// Code generated by go-bindata.
// sources:
// templates/views/subscriptions.html
// locales/ru/LC_MESSAGES/mqtt.mo
// locales/ru/LC_MESSAGES/subscriptions.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSubscriptionsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xc1\x8e\xda\x30\x10\xbd\xf3\x15\x23\x97\x4a\xad\x54\xe2\x85\x53\xb5\x0a\x5c\x7a\xe9\x81\x6a\xb5\x85\x9e\x2b\xc7\x1e\x1a\xd3\xac\x9d\x7a\xbc\xb0\xc8\xe2\xdf\xab\x24\x50\x0c\x9b\x64\x25\xb4\xdb\x13\xc1\x33\xef\xcd\xf3\x7b\x99\x84\x00\x0a\x57\xda\x20\x30\x69\x8d\x47\xe3\x19\xec\xf7\x83\x41\xaa\xf4\x06\x64\x21\x88\xa6\xcc\xd9\x2d\x03\xad\xa6\x4c\xe1\x46\x4b\x24\x36\x1b\x00\x00\xc4\x2d\x4f\x3f\x4b\x61\xb0\x38\x54\x9e\x57\xbd\xf6\x05\x46\xd5\xba\x23\x9f\xcc\x42\x00\x3d\xfe\x6c\x80\x2d\x1e\x33\x92\x4e\x97\x5e\x5b\x43\x0c\x12\xd8\xef\x53\x9e\x4f\x2e\x10\x11\xa7\x2c\x50\xb8\x95\x7e\x62\xb3\x94\x2b\xbd\x89\x06\x5f\xfc\x3d\xd3\x71\xbc\x63\x37\xaf\x17\x59\x81\x23\x87\x54\x5a\x43\x7a\x73\x29\xba\x6e\xaf\x7b\xce\x00\xd0\xc0\xc8\x3b\x5d\xa2\x02\xe5\x23\x06\x30\x76\xeb\x44\xc9\x80\xfc\xae\xc0\x29\xdb\x6a\xe5\xf3\xdb\xf1\xcd\xcd\xfb\x16\xee\x86\x3f\x47\xa1\xba\x6a\xae\xbd\x70\x00\x1e\x55\x3d\xa8\x91\xb4\xc5\x68\xcc\x66\xef\x52\xee\xf3\x5e\xcc\x29\x85\xa5\x2d\xb5\x3c\xba\xff\x02\xea\xf9\xa4\x7f\x34\xf7\x77\x8b\xeb\x48\x26\x11\xc9\x17\x51\x14\x99\x90\xbf\xe9\x25\xaa\x94\x77\x79\x52\x61\x7a\x9c\xcc\xac\xda\xb5\xd7\x42\x00\x27\xcc\x2f\x84\xa1\xfe\x04\x43\x8a\xde\x4d\xb8\x9d\x42\x12\x1f\x50\xb5\x2e\xed\xfc\xbd\x49\xa9\xea\xa6\x42\x29\x18\x6a\x18\x37\xf7\xeb\x10\x1a\xf5\x9f\x49\x49\xea\xb4\xae\x83\xde\xdf\x2d\xae\x03\xce\xd1\xf4\x02\x43\x00\x34\xaa\xd3\x13\xde\x61\x7a\xca\xeb\x05\xba\x58\xcb\xce\xc5\x3e\x3c\x1e\x7e\x4e\x33\x07\xd1\xe7\xac\x4a\x9e\x1d\x85\x84\x00\xe4\x85\xd7\xf2\xeb\xf2\xdb\x1c\x3e\x34\xcf\x3f\xbe\xcf\x81\x71\x25\x28\xcf\xac\x70\x8a\x0b\x22\xf4\xc4\x37\x68\x94\x75\xc4\x95\xf0\xa2\x56\x45\x89\x41\x3f\xca\x88\x4b\x6a\x4e\x97\xcd\x69\x66\xad\x27\xef\x44\x99\x3c\x68\x93\x48\x22\x06\x2b\x51\x10\x7e\x7c\xc5\xa9\xa7\xcf\xc8\x51\xc0\xe9\xa4\x5f\x40\xbb\x2b\x6b\x7a\x45\x4f\xf8\x9a\xf8\xfa\xcf\x23\xba\x5d\x12\xd9\x52\x69\x59\xbf\x85\x17\x19\x55\x03\x3b\x03\x78\x93\x99\x27\xb7\x2f\x66\x47\x31\xfc\x87\xe1\x87\xbb\x77\x66\xbf\x6e\x8f\xfe\x6f\x00\x00\x00\xff\xff\x18\x3c\x9c\x6a\xde\x07\x00\x00")

func templatesViewsSubscriptionsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSubscriptionsHtml,
		"templates/views/subscriptions.html",
	)
}

func templatesViewsSubscriptionsHtml() (*asset, error) {
	bytes, err := templatesViewsSubscriptionsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/subscriptions.html", size: 2014, mode: os.FileMode(420), modTime: time.Unix(1543878137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesMqttMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x41\x6f\xd4\x30\x10\x85\xdf\x56\xcb\x81\x1c\x39\x73\x18\x0e\x54\x20\x70\xb1\x13\x2a\x55\xde\x78\x8b\x28\xad\x84\x68\xc4\xb6\x32\x5c\x38\x59\x1b\x93\x8d\x48\xec\xc8\x76\x10\x48\xfb\x37\xf8\x47\xfc\x0e\x7e\x0b\xda\xac\x96\x15\xef\xf4\x3d\xcd\x9b\xa7\xd1\xfc\x79\x34\xff\x05\x00\x27\x00\x1e\x03\x78\x09\xe0\x01\x80\x12\x7b\xad\x00\x3c\x04\x70\x07\x60\x33\x03\xbe\x00\x98\x03\xf8\x3d\x03\x66\x38\xea\xe4\x00\xbd\x75\xe3\xbc\xba\xd3\x1a\xf7\x76\xf0\x21\xb1\x2a\x36\x6d\xcd\xde\x8e\x4d\x64\xda\x4b\xaa\xed\xf7\x37\xdf\xda\x8d\xe9\xfd\x59\x18\xb3\xd5\x47\xcd\xae\x82\x35\xa9\xf5\x8e\xbd\x33\xc9\x4a\xca\xb9\xb8\x60\xbc\x60\x79\x41\x79\x21\xcf\xcf\x5f\xf0\x82\xf3\xec\xd6\xc4\xc4\x74\x30\x2e\x76\x26\xf9\x20\xe9\xc3\xd4\x41\xd5\x18\x4c\xef\x6b\x4f\xe5\x7f\xc5\xcb\xec\xd6\xb8\x66\x34\x8d\x65\xda\x9a\x5e\xd2\x3f\x2f\xe9\x7e\x8c\xb1\x35\x2e\xab\xde\x57\xd7\xec\xb3\x0d\xb1\xf5\x4e\x92\x38\xe3\xd9\x95\x77\xc9\xba\xc4\xf4\xcf\xc1\x4a\x4a\xf6\x47\x7a\x35\x74\xa6\x75\x0b\x5a\x6f\x4c\x88\x36\xa9\x4f\xfa\x86\x5d\x1c\x73\xbb\x7b\xbe\xda\xc0\xae\xdd\xda\xd7\xad\x6b\x24\x65\xab\x6e\x0c\xa6\x63\x37\x3e\xf4\x51\x92\x1b\x26\x1b\x55\xb1\xa0\x3d\x2a\xf7\x54\x70\xa5\x04\x9d\x9e\xd2\x0e\xf9\x13\x25\x04\x5d\x12\x27\x39\xf9\xa5\xca\x0f\xa3\x52\xbd\xde\xe1\xb3\x29\x56\x0a\x4e\xdb\xed\x7e\x65\xa9\x72\xfe\x9c\x2e\x49\x90\xa4\x7c\x81\xe9\xdb\x7f\x03\x00\x00\xff\xff\xc4\x1a\x03\x04\xc9\x01\x00\x00")

func localesRuLc_messagesMqttMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesMqttMo,
		"locales/ru/LC_MESSAGES/mqtt.mo",
	)
}

func localesRuLc_messagesMqttMo() (*asset, error) {
	bytes, err := localesRuLc_messagesMqttMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/mqtt.mo", size: 457, mode: os.FileMode(420), modTime: time.Unix(1543879909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesSubscriptionsMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\x41\x6b\x13\x4f\x18\xc6\x9f\xe6\xdf\x3f\xe2\x82\x97\xd2\xa3\x87\xd7\x83\x55\x29\x53\x67\x37\x16\xca\x24\x9b\x16\xd3\x16\xc4\x86\xd6\x76\xf5\x3e\x4d\xc6\x64\xe9\x66\x66\x99\xd9\x15\x85\x5e\x3c\xa9\x67\x11\xc1\x8b\x20\x78\xf2\xa4\x28\x84\x14\xe2\x57\x98\x7e\x01\x3f\x8b\xec\xa6\x55\x7c\x4f\xcf\x33\xf3\xfb\xbd\x0c\xcc\xaf\xa5\xc5\x77\x00\xf0\x3f\x80\xeb\x00\xb6\x01\x5c\x01\x90\x61\x3e\xaf\x01\x5c\x05\xf0\x06\xc0\x7f\x00\xde\x02\xb8\x06\xe0\xfd\x85\xf3\x19\xc0\x68\x01\xf8\x02\x60\x09\xc0\x72\x63\xce\xdd\x6a\x00\xcb\x00\x56\x1b\x40\x00\x60\xab\x01\x2c\x00\x68\x5c\x78\x97\x53\xb1\x8b\x55\xe8\xca\x2c\x3b\x96\xfd\x13\x87\x47\xfb\x47\x38\x2a\x8f\x5d\xdf\xa6\x79\x91\x1a\xed\x90\x98\x3c\xed\xe3\x50\xe5\xc6\x16\xac\xe7\x86\xe9\x80\xdd\x2f\x87\x8e\x25\x46\xd0\x40\x3d\xdb\x3a\x49\x47\x72\x6c\xd6\x6c\x19\x1c\xec\x27\xac\x6b\x95\xac\x3c\xb6\x2d\x0b\x25\x28\xe2\xe1\x06\xe3\x4d\x16\x35\x29\x6a\x8a\xf5\xf5\x55\xde\xe4\x3c\xd8\x93\xae\x60\x89\x95\xda\x65\xb2\x30\x56\xd0\xc3\x7a\x07\xf5\x4a\x2b\xc7\x66\x60\xa8\xfd\xcf\xe2\x4e\xb0\x27\xf5\xb0\x94\x43\xc5\x12\x25\xc7\x82\xfe\x74\x41\x87\xa5\x73\xa9\xd4\x41\xef\x41\x6f\x87\x3d\x51\xd6\xa5\x46\x0b\x0a\xd7\x78\xd0\x35\xba\x50\xba\x60\xc9\x8b\x5c\x09\x2a\xd4\xf3\xe2\x6e\x9e\xc9\x54\xb7\xa8\x3f\x92\xd6\xa9\x22\x7e\x9c\xec\xb2\x8d\xbf\x5c\xf5\x9e\xa7\xca\xb2\x1d\xdd\x37\x83\x54\x0f\x05\x05\x07\x59\x69\x65\xc6\x76\x8d\x1d\x3b\x41\x3a\xaf\xab\x8b\x9b\x2d\x9a\xc7\x58\xdf\x0c\x79\x1c\x87\xb4\xb2\x42\x55\xe4\x37\xe2\x30\xa4\x4d\xe2\x24\xea\xde\x89\xa3\xcb\xab\x76\x7c\xaf\x8a\xb7\x6b\xac\x1d\x72\x3a\x3d\x9d\x2b\x9d\x38\xe2\x77\x68\x93\x42\x12\x14\xb5\xe0\x3f\xf8\x99\x3f\xf3\x67\xfe\xab\xff\xe1\xa7\x7e\xe6\xbf\xd5\x7f\xe2\x3f\xfa\x99\xff\xee\x7f\xfa\xc9\xf9\xcb\xf3\x57\x7e\xe2\xa7\x7e\x02\xff\xc9\xcf\xaa\x23\x3f\xc5\xef\x00\x00\x00\xff\xff\x58\xfb\xb7\x34\x4b\x02\x00\x00")

func localesRuLc_messagesSubscriptionsMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesSubscriptionsMo,
		"locales/ru/LC_MESSAGES/subscriptions.mo",
	)
}

func localesRuLc_messagesSubscriptionsMo() (*asset, error) {
	bytes, err := localesRuLc_messagesSubscriptionsMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/subscriptions.mo", size: 587, mode: os.FileMode(420), modTime: time.Unix(1543879909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/subscriptions.html":      templatesViewsSubscriptionsHtml,
	"locales/ru/LC_MESSAGES/mqtt.mo":          localesRuLc_messagesMqttMo,
	"locales/ru/LC_MESSAGES/subscriptions.mo": localesRuLc_messagesSubscriptionsMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"mqtt.mo":          &bintree{localesRuLc_messagesMqttMo, map[string]*bintree{}},
				"subscriptions.mo": &bintree{localesRuLc_messagesSubscriptionsMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"subscriptions.html": &bintree{templatesViewsSubscriptionsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
