// Code generated by go-bindata.
// sources:
// templates/views/cache.html
// templates/views/subscriptions.html
// locales/ru/LC_MESSAGES/cache.mo
// locales/ru/LC_MESSAGES/mqtt.mo
// locales/ru/LC_MESSAGES/subscriptions.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsCacheHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x8f\xdb\x36\x10\xbd\xef\xaf\x18\xb0\x09\x92\x00\x95\x99\x20\x97\x22\x95\x5c\x14\x05\x8a\x1e\x52\xa0\x28\xb6\xe8\x31\xa0\xc4\x91\x45\x97\x26\x55\xce\xc8\x1b\x57\xdd\xff\x5e\x90\xb4\xd6\xf2\xd6\x72\xd2\x20\xa9\x4f\xf4\x7c\xbc\x79\x9c\x79\x43\x8d\x23\x68\x6c\x8d\x43\x10\x8d\x77\x8c\x8e\x05\xdc\xdf\xdf\x94\xda\xec\xa1\xb1\x8a\xa8\x12\xbd\xda\x60\xc1\x86\x2d\x8a\xf5\x0d\x00\xc0\xdc\x99\xec\xef\x2c\xb6\x7c\x74\xa6\x80\xee\xf5\x7a\x1c\xc1\xbc\xfa\xc6\x81\xf8\x41\x35\x1d\x0a\x58\xc1\xfd\x7d\x29\xbb\xd7\x47\x08\xa9\xcd\x7e\x7d\xb3\x00\x17\xcc\xa6\x3b\xc3\x6b\x7d\xd8\x4d\x21\xf1\x5c\x74\x3e\x98\xbf\xbc\x63\x65\x21\xfd\xb7\xaa\x46\x5b\x24\x1a\x10\xbc\xc5\x1c\x26\x60\x87\xdc\x79\x5d\x89\xde\x13\x0b\x30\xba\x12\x84\x4e\xcf\xa0\x1f\x13\x48\x68\x9b\xe0\x87\x1e\xfa\xc1\xda\xe2\x31\x95\x4b\x39\xc6\xf5\x03\xe7\xa4\x0b\x91\x29\x3a\xf1\x9b\xe2\x6b\x76\x57\xa3\x53\x46\x3d\x30\x7b\x07\x7c\xe8\xb1\x12\x34\xd4\x3b\x33\xbf\xc0\x0c\x0a\x22\x9c\x69\x7c\x3e\x68\xe5\x36\x18\xd2\x91\x76\x62\x11\x7e\xfa\x69\xc5\xaa\x60\xbf\xd9\xc4\x96\xed\xbc\x56\x56\x1c\x6d\x2a\x6c\x90\x2b\xf1\x55\x36\x7e\x1c\x50\x8a\xcd\x52\xa9\xc4\x49\x00\xde\xb5\x26\xec\xa0\xb5\x03\x75\xd0\x9c\xe4\xf0\x9f\x50\x6b\xaf\x0f\x33\xd0\xdf\x8d\xb5\x50\xe3\x1c\x74\x05\xdf\x07\x84\x83\x1f\x80\x86\x80\xdf\x7d\x42\x8d\x46\x59\x5b\xab\xe6\x8f\x4a\xa8\x86\x8d\x77\xcf\x9f\x25\xf8\x67\x2f\xbe\xbd\x32\xa9\xf8\x2b\xcd\x83\x7e\x14\x41\xab\x0a\x0c\x8a\x30\x08\x78\xdc\x8b\x1f\x23\xde\x91\xd9\xba\x94\xe6\x8a\x00\x64\x56\xc0\x82\xa0\x64\x52\xd4\x05\x5d\xe6\xc5\xba\x62\x2a\x65\xd4\xf8\xd9\x1a\x4e\xdb\x38\x17\x75\x63\x51\x85\xd6\xbc\x8f\x34\xff\xed\x0d\xfe\x2e\xab\x51\xe3\xde\x34\x48\x17\x5e\x86\xf7\xef\x7a\xe5\xd0\xce\xd7\xf8\xcc\x3b\x3d\x37\xcb\xbb\xc8\xaa\xb6\x58\x04\xa4\xde\x3b\x32\x7b\xbc\xb4\x86\x29\xe6\x2c\x01\x72\x1a\x71\x30\x3d\xea\x34\xde\x6c\xd7\x3c\xc3\x02\xe7\xef\x82\xea\x05\x10\x1f\xe2\x84\xee\x8c\xe6\xee\xcd\xab\x97\x2f\x9f\x2e\xad\x30\x77\xa8\xf4\x92\x2f\x5c\x19\x24\x77\xa7\xc7\xf0\xd6\xf7\xa6\x99\x1e\x43\xee\x3e\x32\xeb\x17\x75\xb0\x5e\xe9\x0f\xe5\x95\x72\x89\x47\xcc\xb9\xc2\x3e\xee\xd6\x65\xdf\x38\x42\x88\x2f\x0a\x3c\xe1\xc8\xfc\x6b\x78\xd2\x67\x2e\xf0\xa6\x82\xd5\xf1\x4c\xf1\x8b\xf1\x09\x7d\xd1\xf1\x86\x19\x38\xdf\x6b\x81\xe0\x14\x5d\xf6\x01\xd7\x65\xe3\x35\xc6\xc4\x3e\x18\xc7\x2d\x88\xa7\x24\x1e\x58\xfd\x1d\xd4\x5d\x82\x4a\x41\xa5\x4c\x09\x8b\xb8\xcb\xfd\x1a\x47\x40\xa7\x17\xaf\x25\x17\x3a\x56\xca\xa4\xb4\x0f\xac\xdf\xc3\xdf\xf3\xed\x3b\xd5\xbc\x99\x7d\x94\xe3\xd8\xc4\x44\x64\x1c\x81\x58\xb1\x69\x7e\xba\xfd\xf9\x2d\x3c\xcf\xe7\xdf\x7e\x7d\x0b\x42\x6a\x45\x5d\xed\x55\xd0\x52\x11\x21\x93\xdc\xa3\xd3\x3e\x90\x7c\xd0\x3f\xad\x1c\x72\x51\x93\x6c\x28\x5b\x6f\xb3\xb5\xf6\x9e\x89\x83\xea\x57\x3b\xe3\x56\x0d\x91\x80\x56\x59\xc2\x17\x9f\xb1\xea\x69\xef\x26\x02\x27\xcb\x75\x02\x97\xbb\xb2\xa5\xcf\xd8\x13\xb9\x25\xb9\xfd\x73\xc0\x70\x58\xcd\xda\x12\xb9\x6c\xbf\x44\x2f\x6a\x8a\x05\x17\x07\xf0\x45\x6a\x9e\xba\xfd\xa8\xf6\x6c\x0c\xff\x43\xf1\xe3\xdd\x17\x67\xbf\x5d\x18\xfd\x3f\x01\x00\x00\xff\xff\xdd\xe0\xe0\x84\xa5\x0a\x00\x00"

func templatesViewsCacheHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsCacheHtml,
		"templates/views/cache.html",
	)
}

func templatesViewsCacheHtml() (*asset, error) {
	bytes, err := templatesViewsCacheHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/cache.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsSubscriptionsHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\xc1\x6e\xda\x40\x10\xbd\xf3\x15\xa3\x6d\x2a\xb5\x52\xf1\x86\x9c\xaa\xc8\x70\xe9\xa5\x07\xaa\x28\x85\x9e\xab\xf5\xee\x50\x2f\x75\x76\xdd\x9d\x0d\x04\x59\xfc\x7b\x65\x1b\xc2\x42\xbc\x8e\x44\x49\x4f\x98\x99\x79\xf3\xde\xcc\xb3\xa7\xaa\x40\xe1\x42\x1b\x04\x26\xad\xf1\x68\x3c\x83\xed\x76\x30\x48\x95\x5e\x81\x2c\x04\xd1\x98\x39\xbb\x66\xa0\xd5\x98\x29\x5c\x69\x89\xc4\x26\x03\x00\x80\xb0\xe4\xe9\x67\x29\x0c\x16\xbb\xcc\xcb\xac\xd7\xbe\xc0\x20\xdb\x54\xe4\x37\x93\xaa\x02\x3d\xfa\x6c\x80\xcd\x1e\x33\x92\x4e\x97\x5e\x5b\x43\x0c\x12\xd8\x6e\x53\x9e\xdf\x9c\x20\x82\x9e\xb2\x40\xe1\x16\xfa\x89\x4d\x52\xae\xf4\x2a\x20\x3e\xf9\x7b\xa4\x63\x3f\x63\xbc\xaf\x17\x59\x81\x43\x87\x54\x5a\x43\x7a\x75\x2a\xba\x29\x6f\x6a\x8e\x00\xd0\xc2\xc8\x3b\x5d\xa2\x02\x25\xbc\x68\xe3\xca\x07\xbd\xc0\xd8\xb5\x13\x25\x03\xf2\x9b\x02\xc7\x6c\xad\x95\xcf\x6f\x47\xd7\xd7\xef\x3b\x58\x5a\xa6\x1c\x85\x8a\xe5\x5c\x77\x62\x07\xdc\xeb\x7b\x50\x43\x69\x8b\xe1\x88\x4d\xde\xa5\xdc\xe7\xbd\x98\x83\x1f\x73\x5b\x6a\xb9\xf7\xe1\x15\xd4\x4b\xa6\xe7\x36\xf7\x77\xb3\x7f\x6f\xf2\x45\x14\x45\x26\xe4\x6f\xba\x4c\xab\x57\xdb\xa4\x3c\xb6\xda\x1a\xd3\x63\x48\x66\xd5\xa6\x3b\x57\x55\xe0\x84\xf9\x85\x70\xa5\x3f\xc1\x15\x05\x2f\x3b\xdc\x8e\x21\x09\x03\x54\x7f\x7f\xdd\xfd\x7b\x0d\x57\xf5\x94\x42\x29\xb8\xd2\x30\x6a\xe7\x8b\x08\x0d\xea\x8f\xa4\x24\x8d\xe9\xe7\x41\xef\xef\x66\xe7\x01\xa7\x68\xce\x03\x36\x56\xf6\x42\xe3\x3e\x56\x15\xa0\x51\xd1\x45\xf3\x88\x93\x29\x6f\x3e\xea\x93\xe3\x11\x3d\x3f\xbb\xc7\xdd\xcf\x81\x73\x10\x1c\xdd\xfa\x75\x62\x7b\x21\x55\x05\xe4\x85\xd7\xf2\xeb\xfc\xdb\x14\x3e\xb4\xcf\x3f\xbe\x4f\x81\x71\x25\x28\xcf\xac\x70\x8a\x0b\x22\xf4\xc4\x57\x68\x94\x75\xc4\x9f\x4f\x0d\x25\x06\xfd\x30\x23\x2e\xa9\x8d\xce\xdb\x68\x66\xad\x27\xef\x44\x99\x3c\x68\x93\x48\x22\x06\x0b\x51\x10\x7e\xbc\x20\xeb\xe1\xc4\xed\x05\x1c\x22\xfd\x02\xba\xb7\xb2\xa4\x0b\xee\x84\x2f\x89\x2f\xff\x3c\xa2\xdb\x24\xc1\x5a\x6a\x2d\xcb\xb7\xd8\x45\x46\x35\x61\xd4\x80\x37\xe1\x3c\x6c\xfb\x84\x3b\xb0\xe1\x3f\x90\xef\x66\x8f\x7a\xbf\xec\xb6\xfe\x6f\x00\x00\x00\xff\xff\x93\xe6\x0e\xbf\x84\x08\x00\x00"

func templatesViewsSubscriptionsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSubscriptionsHtml,
		"templates/views/subscriptions.html",
	)
}

func templatesViewsSubscriptionsHtml() (*asset, error) {
	bytes, err := templatesViewsSubscriptionsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/subscriptions.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesCacheMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x4f\x6b\x14\x41\x10\xc5\xdf\xfa\x17\xe6\xe8\xd9\x43\xe5\x60\xd0\x43\xc7\x99\x35\x07\xe9\xdd\xde\x15\x43\x02\xe2\x2e\x84\x30\x7a\xb6\xd8\x69\x67\x07\x67\xbb\x97\xee\x1e\x31\x90\x83\xe0\xc5\x8b\x78\xf2\xe2\xc5\x8f\x60\x40\x34\xa0\xe8\x67\xe8\xf9\x02\x7e\x16\x99\xd9\x68\xf0\x5d\xea\xfd\x78\xaf\x8a\xfa\x7d\xe3\xca\x07\x00\xb8\x0c\xe0\x26\x80\x5d\x00\x57\x01\xcc\xb0\xd1\xb3\x73\x66\x00\xd7\x01\x94\x00\xa6\x03\xc0\x02\xb8\x06\xe0\xf3\x00\xd8\x02\xf0\x6d\x00\x0c\x70\xa1\x4b\xe7\x37\xb1\xc7\x8b\xa5\xc6\x21\x1f\xd7\x96\x0b\x1c\xe9\xb5\x75\x41\xcc\x7d\x59\x15\xe2\x61\x53\x7a\x91\x5b\x49\x85\x7e\xf9\xe0\x45\xb5\xe4\x95\xdd\x71\x4d\x32\x63\x1f\x44\xee\xd8\xf8\x9a\x83\x75\x92\x1e\xf7\x11\xcd\x1b\xc7\x2b\x5b\x58\x1a\xff\xd7\x9f\x24\x33\x36\x65\xc3\xa5\x16\xb9\xe6\x95\xa4\x7f\x2c\xe9\xa8\xf1\xbe\x62\x93\xcc\x1f\xcd\xf7\xc5\x53\xed\x7c\x65\x8d\xa4\x6c\x27\x4d\xf6\xac\x09\xda\x04\x91\x1f\xaf\xb5\xa4\xa0\x5f\x85\xbb\xeb\x9a\x2b\x33\xa2\xc5\x92\x9d\xd7\x41\x3d\xc9\x0f\xc4\xfd\x8b\x5e\xf7\xcf\x73\xed\xc4\xbe\x59\xd8\xa2\x32\xa5\xa4\xe4\xb0\x6e\x1c\xd7\xe2\xc0\xba\x95\x97\x64\xd6\x3d\x7a\x75\x6f\x44\x1b\xab\xcc\xad\x2c\x55\x2a\xa3\xed\x6d\xea\x6c\xba\xa5\xb2\x8c\xa6\x94\x92\xec\x79\xa2\x86\x7f\xa3\xb1\xda\xed\xec\xed\xbe\x36\xce\x52\x3a\x39\xd9\xac\x4c\xd4\x30\xbd\x43\x53\xca\x48\xd2\x70\x84\xf8\xb1\x7d\xd7\xbe\x45\xfc\x14\x7f\xc5\x1f\xf1\x6b\x3c\x8b\x3f\xe3\x69\xfb\x9e\xba\x11\xbf\xb4\xaf\xdb\x37\xf1\x2c\x7e\x8f\xa7\xf8\x13\x00\x00\xff\xff\xdb\xec\x6e\x96\xd8\x01\x00\x00"

func localesRuLc_messagesCacheMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesCacheMo,
		"locales/ru/LC_MESSAGES/cache.mo",
	)
}

func localesRuLc_messagesCacheMo() (*asset, error) {
	bytes, err := localesRuLc_messagesCacheMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/cache.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesMqttMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x31\x8f\xd3\x30\x1c\xc5\x5f\x20\x20\x91\x05\x89\x99\xe1\xcf\xc0\x09\x06\x1f\x49\x61\x40\x6e\xdc\x22\x4e\x57\x09\xd1\x48\x50\x05\x26\x16\x93\xb8\x69\x44\x62\xa7\xb6\x83\x40\xea\xc2\xc6\x00\x23\x0c\x7c\x2a\xba\xb0\x20\x31\xf0\x49\x50\x93\x02\x3a\x4f\xbf\x9f\xde\x7b\x96\xe5\x5f\x37\xc2\x2f\x00\x10\x02\xb8\x09\x20\x05\x70\x05\xc0\x2b\x8c\xa7\x03\x70\x1d\xc0\x16\x40\x04\xe0\x03\x80\x6b\x00\x3e\x01\x98\x07\xc0\xd7\xe3\xf6\x47\x00\x5c\x05\xf0\x33\x18\xfd\x77\x00\x04\xc7\xec\x32\x80\x4b\xc7\xfb\x50\x18\xbd\xae\x2b\xe6\xe5\xeb\xb0\xdd\x7a\x8f\x56\xe9\x3e\x3c\x93\xc5\x46\x8d\x98\x3d\xcf\x73\xac\x54\x67\xac\x67\x99\xab\xea\x92\x3d\xee\x2b\xc7\x72\xc3\xa9\x54\x6f\x1f\xbd\xa9\x37\xb2\x35\xa7\xb6\x8f\x96\xd2\x79\x96\x5b\xa9\x5d\x23\xbd\xb1\x9c\x9e\x0e\x11\x65\xbd\x95\xad\x29\x0d\xa5\x17\xfa\xb3\x68\x29\x75\xd5\xcb\x4a\xb1\x5c\xc9\x96\xd3\x3f\xe7\xb4\xea\x9d\xab\xa5\x8e\xb2\x27\xd9\x39\x7b\xa9\xac\xab\x8d\xe6\x94\x9c\xc6\xd1\x99\xd1\x5e\x69\xcf\xf2\xf7\x9d\xe2\xe4\xd5\x3b\x7f\xaf\x6b\x64\xad\xa7\x54\x6c\xa4\x75\xca\x8b\x17\xf9\x82\x3d\xfc\xdf\x3b\xbc\x67\xad\x2c\x3b\xd7\x85\x29\x6b\x5d\x71\x8a\x9e\x35\xbd\x95\x0d\x5b\x18\xdb\x3a\x4e\xba\x1b\xd4\x89\xfb\x53\x1a\x51\xe8\xdb\x49\x2c\x44\x42\x27\x27\x74\xc0\xf8\x96\x48\x12\x9a\x53\x4c\x7c\xf0\x99\x98\xfc\x8d\x52\xf1\xe0\x80\x77\x86\x5a\x9a\xc4\xb4\xdb\x8d\x93\x99\x98\xc4\x77\x69\x4e\x09\x71\x9a\x4c\x31\x7c\xe2\xf7\x6f\xfb\xcf\xfb\x8f\x23\xff\x09\x00\x00\xff\xff\xf9\x0d\x64\x37\xe7\x01\x00\x00"

func localesRuLc_messagesMqttMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesMqttMo,
		"locales/ru/LC_MESSAGES/mqtt.mo",
	)
}

func localesRuLc_messagesMqttMo() (*asset, error) {
	bytes, err := localesRuLc_messagesMqttMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/mqtt.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesSubscriptionsMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4f\x6b\x13\x41\x18\xc6\x9f\xae\xad\xe0\x8a\x82\xc5\xa3\x87\x57\xd0\xa2\x87\xad\xbb\xa9\xa0\x6c\xb2\x89\x58\x5a\x10\x13\xd4\x76\xf5\x3e\x4d\xc6\xed\xd2\xcd\xcc\x32\xb3\x2b\x0a\xb9\x78\xf2\xe0\x4d\xf0\xe2\x45\xf0\xa4\x47\xff\x61\x4c\x31\x7e\x00\x2f\x6f\xbe\x80\x9f\x45\x76\x93\x5a\xfa\x9c\x7e\xcf\xfb\x3e\x33\xf3\x30\x7f\x57\x97\xdf\x02\xc0\x69\x00\x97\x00\x74\x01\x9c\x05\x30\xc2\x5c\x1f\x01\x9c\x01\xf0\x09\xc0\x0a\x80\xaf\x00\x4e\x01\xf8\x09\xe0\x1c\x80\x5f\x8b\xf9\x1f\x00\x9d\x25\x60\x06\x60\x15\xc0\x05\x07\x38\x0f\xe0\x8a\x33\xcf\x6f\x38\xc0\x45\x00\xb7\x1c\xc0\xad\xde\x71\x80\xa5\xc5\x5d\x95\x9c\x45\x87\x4a\xcb\x38\xd6\xca\x11\x6c\x8a\x2c\xdb\x13\xfd\x03\x5b\x93\xc5\xa3\x07\xbb\xd8\x2d\xf7\x6c\xdf\xa4\x79\x91\x6a\x65\x11\xeb\x3c\xed\x63\x47\xe6\xda\x14\x5e\xcf\x26\xe9\xc0\xbb\x5b\x26\xd6\x8b\x75\x48\x03\xf9\xec\xce\x41\xba\x2f\x86\x7a\xdd\x94\x6e\x57\xd8\xc2\x8b\x8d\x50\x36\x13\x85\x36\x21\xdd\xaf\x57\xd4\x2b\x8d\x18\xea\x81\xa6\xd6\x89\x7c\xdb\xed\x0a\x95\x94\x22\x91\x5e\x2c\xc5\x30\xa4\xff\x3e\xa4\x9d\xd2\xda\x54\x28\xb7\x77\xaf\xb7\xe5\x3d\x91\xc6\xa6\x5a\x85\x14\xac\xfb\xee\xa6\x56\x85\x54\x85\x17\xbf\xc8\x65\x48\x85\x7c\x5e\xdc\xc8\x33\x91\xaa\x26\xf5\xf7\x85\xb1\xb2\x88\x1e\xc7\xdb\xde\xed\xe3\x5c\xd5\xe7\xa9\x34\xde\x96\xea\xeb\x41\xaa\x92\x90\xdc\x87\x59\x69\x44\xe6\x6d\x6b\x33\xb4\x21\xa9\xbc\xb6\x36\xda\x68\xd2\x1c\x23\x75\x35\xf0\xa3\x28\xa0\xb5\x35\xaa\xd0\xbf\x1c\x05\x01\x75\xc8\xa7\xb0\xf6\xed\xa8\x71\xb4\x6a\x45\x37\x2b\xbc\x56\xc7\x5a\x81\x4f\xa3\xd1\xfc\x48\x3b\x6a\xf8\xd7\xa9\x43\x01\x85\xd4\x68\x82\xdf\xf1\x94\x0f\xf9\x90\x3f\xf3\x77\x9e\xf0\x94\xbf\x80\xdf\xcc\x5e\xf3\x8f\x0a\x6b\x5b\xfd\x3c\xbf\xe7\x29\x7f\xe3\xdf\x3c\x9e\xbd\x9c\xbd\xe2\x31\x4f\x78\x0c\xfe\xc0\xd3\x6a\xc4\x13\xfc\x0b\x00\x00\xff\xff\xe1\x49\x78\xbe\x57\x02\x00\x00"

func localesRuLc_messagesSubscriptionsMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesSubscriptionsMo,
		"locales/ru/LC_MESSAGES/subscriptions.mo",
	)
}

func localesRuLc_messagesSubscriptionsMo() (*asset, error) {
	bytes, err := localesRuLc_messagesSubscriptionsMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/subscriptions.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/cache.html": templatesViewsCacheHtml,
	"templates/views/subscriptions.html": templatesViewsSubscriptionsHtml,
	"locales/ru/LC_MESSAGES/cache.mo": localesRuLc_messagesCacheMo,
	"locales/ru/LC_MESSAGES/mqtt.mo": localesRuLc_messagesMqttMo,
	"locales/ru/LC_MESSAGES/subscriptions.mo": localesRuLc_messagesSubscriptionsMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"cache.mo": &bintree{localesRuLc_messagesCacheMo, map[string]*bintree{}},
				"mqtt.mo": &bintree{localesRuLc_messagesMqttMo, map[string]*bintree{}},
				"subscriptions.mo": &bintree{localesRuLc_messagesSubscriptionsMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"cache.html": &bintree{templatesViewsCacheHtml, map[string]*bintree{}},
			"subscriptions.html": &bintree{templatesViewsSubscriptionsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
