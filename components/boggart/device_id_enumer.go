// Code generated by "enumer -type=DeviceId -trimprefix=DeviceId -output=device_id_enumer.go -transform=snake"; DO NOT EDIT

package boggart

import (
	"fmt"
)

const _DeviceIdName = "video_recordercamera_hallcamera_streetphonerouterwater_meter_coldwater_meter_hot"

var _DeviceIdIndex = [...]uint8{0, 14, 25, 38, 43, 49, 65, 80}

func (i DeviceId) String() string {
	if i < 0 || i >= DeviceId(len(_DeviceIdIndex)-1) {
		return fmt.Sprintf("DeviceId(%d)", i)
	}
	return _DeviceIdName[_DeviceIdIndex[i]:_DeviceIdIndex[i+1]]
}

var _DeviceIdNameToValueMap = map[string]DeviceId{
	_DeviceIdName[0:14]:  0,
	_DeviceIdName[14:25]: 1,
	_DeviceIdName[25:38]: 2,
	_DeviceIdName[38:43]: 3,
	_DeviceIdName[43:49]: 4,
	_DeviceIdName[49:65]: 5,
	_DeviceIdName[65:80]: 6,
}

// DeviceIdString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DeviceIdString(s string) (DeviceId, error) {
	if val, ok := _DeviceIdNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DeviceId values", s)
}
