// Code generated by "enumer -type=DeviceId -trimprefix=DeviceId -output=device_id_enumer.go -transform=snake"; DO NOT EDIT

package boggart

import (
	"fmt"
)

const _DeviceIdName = "electricity_metercamera_hallcamera_streetheat_meterentrance_doorphoneroutetvupsvideo_recorderwater_meter_coldwater_meter_hot"

var _DeviceIdIndex = [...]uint8{0, 17, 28, 41, 51, 64, 69, 74, 76, 79, 93, 109, 124}

func (i DeviceId) String() string {
	if i < 0 || i >= DeviceId(len(_DeviceIdIndex)-1) {
		return fmt.Sprintf("DeviceId(%d)", i)
	}
	return _DeviceIdName[_DeviceIdIndex[i]:_DeviceIdIndex[i+1]]
}

var _DeviceIdNameToValueMap = map[string]DeviceId{
	_DeviceIdName[0:17]:    0,
	_DeviceIdName[17:28]:   1,
	_DeviceIdName[28:41]:   2,
	_DeviceIdName[41:51]:   3,
	_DeviceIdName[51:64]:   4,
	_DeviceIdName[64:69]:   5,
	_DeviceIdName[69:74]:   6,
	_DeviceIdName[74:76]:   7,
	_DeviceIdName[76:79]:   8,
	_DeviceIdName[79:93]:   9,
	_DeviceIdName[93:109]:  10,
	_DeviceIdName[109:124]: 11,
}

// DeviceIdString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DeviceIdString(s string) (DeviceId, error) {
	if val, ok := _DeviceIdNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DeviceId values", s)
}
