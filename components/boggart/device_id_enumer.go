// Code generated by "enumer -type=DeviceId -trimprefix=DeviceId -output=device_id_enumer.go -transform=snake"; DO NOT EDIT.

package boggart

import (
	"fmt"
)

const _DeviceIdName = "electricity_metercamera_hallcamera_streetheat_meterentrance_doorlightphoneroutertv_bedroomtv_living_roomupsvideo_recorderwater_meter_coldwater_meter_hot"

var _DeviceIdIndex = [...]uint8{0, 17, 28, 41, 51, 64, 69, 74, 80, 90, 104, 107, 121, 137, 152}

func (i DeviceId) String() string {
	if i < 0 || i >= DeviceId(len(_DeviceIdIndex)-1) {
		return fmt.Sprintf("DeviceId(%d)", i)
	}
	return _DeviceIdName[_DeviceIdIndex[i]:_DeviceIdIndex[i+1]]
}

var _DeviceIdValues = []DeviceId{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}

var _DeviceIdNameToValueMap = map[string]DeviceId{
	_DeviceIdName[0:17]:    0,
	_DeviceIdName[17:28]:   1,
	_DeviceIdName[28:41]:   2,
	_DeviceIdName[41:51]:   3,
	_DeviceIdName[51:64]:   4,
	_DeviceIdName[64:69]:   5,
	_DeviceIdName[69:74]:   6,
	_DeviceIdName[74:80]:   7,
	_DeviceIdName[80:90]:   8,
	_DeviceIdName[90:104]:  9,
	_DeviceIdName[104:107]: 10,
	_DeviceIdName[107:121]: 11,
	_DeviceIdName[121:137]: 12,
	_DeviceIdName[137:152]: 13,
}

// DeviceIdString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DeviceIdString(s string) (DeviceId, error) {
	if val, ok := _DeviceIdNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DeviceId values", s)
}

// DeviceIdValues returns all values of the enum
func DeviceIdValues() []DeviceId {
	return _DeviceIdValues
}

// IsADeviceId returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DeviceId) IsADeviceId() bool {
	for _, v := range _DeviceIdValues {
		if i == v {
			return true
		}
	}
	return false
}
