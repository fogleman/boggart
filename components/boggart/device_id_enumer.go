// Code generated by "enumer -type=DeviceId -trimprefix=DeviceId -output=device_id_enumer.go -transform=snake"; DO NOT EDIT.

package boggart

import (
	"fmt"
)

const _DeviceIdName = "electricity_meterheat_meterphonerouterwater_meter_coldwater_meter_hot"

var _DeviceIdIndex = [...]uint8{0, 17, 27, 32, 38, 54, 69}

func (i DeviceId) String() string {
	if i < 0 || i >= DeviceId(len(_DeviceIdIndex)-1) {
		return fmt.Sprintf("DeviceId(%d)", i)
	}
	return _DeviceIdName[_DeviceIdIndex[i]:_DeviceIdIndex[i+1]]
}

var _DeviceIdValues = []DeviceId{0, 1, 2, 3, 4, 5}

var _DeviceIdNameToValueMap = map[string]DeviceId{
	_DeviceIdName[0:17]:  0,
	_DeviceIdName[17:27]: 1,
	_DeviceIdName[27:32]: 2,
	_DeviceIdName[32:38]: 3,
	_DeviceIdName[38:54]: 4,
	_DeviceIdName[54:69]: 5,
}

// DeviceIdString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DeviceIdString(s string) (DeviceId, error) {
	if val, ok := _DeviceIdNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DeviceId values", s)
}

// DeviceIdValues returns all values of the enum
func DeviceIdValues() []DeviceId {
	return _DeviceIdValues
}

// IsADeviceId returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DeviceId) IsADeviceId() bool {
	for _, v := range _DeviceIdValues {
		if i == v {
			return true
		}
	}
	return false
}
