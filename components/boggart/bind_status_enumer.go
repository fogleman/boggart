// Code generated by "enumer -type=BindStatus -trimprefix=BindStatus -output=bind_status_enumer.go"; DO NOT EDIT.

//
package boggart

import (
	"fmt"
)

const _BindStatusName = "UnknownUninitializedInitializingOnlineOfflineRemovingRemoved"

var _BindStatusIndex = [...]uint8{0, 7, 20, 32, 38, 45, 53, 60}

func (i BindStatus) String() string {
	if i >= BindStatus(len(_BindStatusIndex)-1) {
		return fmt.Sprintf("BindStatus(%d)", i)
	}
	return _BindStatusName[_BindStatusIndex[i]:_BindStatusIndex[i+1]]
}

var _BindStatusValues = []BindStatus{0, 1, 2, 3, 4, 5, 6}

var _BindStatusNameToValueMap = map[string]BindStatus{
	_BindStatusName[0:7]:   0,
	_BindStatusName[7:20]:  1,
	_BindStatusName[20:32]: 2,
	_BindStatusName[32:38]: 3,
	_BindStatusName[38:45]: 4,
	_BindStatusName[45:53]: 5,
	_BindStatusName[53:60]: 6,
}

// BindStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BindStatusString(s string) (BindStatus, error) {
	if val, ok := _BindStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BindStatus values", s)
}

// BindStatusValues returns all values of the enum
func BindStatusValues() []BindStatus {
	return _BindStatusValues
}

// IsABindStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BindStatus) IsABindStatus() bool {
	for _, v := range _BindStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
