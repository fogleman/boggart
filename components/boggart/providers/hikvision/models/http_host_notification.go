// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HttpHostNotification http host notification
// swagger:model HttpHostNotification
type HttpHostNotification struct {

	// addressing format type
	// Enum: [ipaddress hostname]
	AddressingFormatType string `json:"addressingFormatType,omitempty" xml:"addressingFormatType"`

	// host name
	HostName *string `json:"hostName,omitempty" xml:"hostName"`

	// http authentication method
	// Enum: [MD5digest none]
	HttpAuthenticationMethod string `json:"httpAuthenticationMethod,omitempty" xml:"httpAuthenticationMethod"`

	// id
	ID uint64 `json:"id,omitempty" xml:"id"`

	// interval between events
	IntervalBetweenEvents *int64 `json:"intervalBetweenEvents,omitempty" xml:"Extensions>intervalBetweenEvents"`

	// ip address
	IPAddress *string `json:"ipAddress,omitempty" xml:"ipAddress"`

	// ipv6 address
	IPV6Address *string `json:"ipv6Address,omitempty" xml:"ipv6Address"`

	// parameter format type
	// Enum: [XML querystring]
	ParameterFormatType string `json:"parameterFormatType,omitempty" xml:"parameterFormatType"`

	// password
	Password *string `json:"password,omitempty" xml:"password"`

	// port no
	PortNo uint64 `json:"portNo,omitempty" xml:"portNo"`

	// protocol type
	// Enum: [HTTP HTTPS]
	ProtocolType string `json:"protocolType,omitempty" xml:"protocolType"`

	// url
	URL *string `json:"url,omitempty" xml:"url"`

	// user name
	UserName *string `json:"userName,omitempty" xml:"userName"`
}

// Validate validates this http host notification
func (m *HttpHostNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressingFormatType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHttpAuthenticationMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterFormatType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var httpHostNotificationTypeAddressingFormatTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipaddress","hostname"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpHostNotificationTypeAddressingFormatTypePropEnum = append(httpHostNotificationTypeAddressingFormatTypePropEnum, v)
	}
}

const (

	// HttpHostNotificationAddressingFormatTypeIpaddress captures enum value "ipaddress"
	HttpHostNotificationAddressingFormatTypeIpaddress string = "ipaddress"

	// HttpHostNotificationAddressingFormatTypeHostname captures enum value "hostname"
	HttpHostNotificationAddressingFormatTypeHostname string = "hostname"
)

// prop value enum
func (m *HttpHostNotification) validateAddressingFormatTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, httpHostNotificationTypeAddressingFormatTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HttpHostNotification) validateAddressingFormatType(formats strfmt.Registry) error {

	if swag.IsZero(m.AddressingFormatType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAddressingFormatTypeEnum("addressingFormatType", "body", m.AddressingFormatType); err != nil {
		return err
	}

	return nil
}

var httpHostNotificationTypeHttpAuthenticationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MD5digest","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpHostNotificationTypeHttpAuthenticationMethodPropEnum = append(httpHostNotificationTypeHttpAuthenticationMethodPropEnum, v)
	}
}

const (

	// HttpHostNotificationHttpAuthenticationMethodMD5digest captures enum value "MD5digest"
	HttpHostNotificationHttpAuthenticationMethodMD5digest string = "MD5digest"

	// HttpHostNotificationHttpAuthenticationMethodNone captures enum value "none"
	HttpHostNotificationHttpAuthenticationMethodNone string = "none"
)

// prop value enum
func (m *HttpHostNotification) validateHttpAuthenticationMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, httpHostNotificationTypeHttpAuthenticationMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HttpHostNotification) validateHttpAuthenticationMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.HttpAuthenticationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateHttpAuthenticationMethodEnum("httpAuthenticationMethod", "body", m.HttpAuthenticationMethod); err != nil {
		return err
	}

	return nil
}

var httpHostNotificationTypeParameterFormatTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["XML","querystring"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpHostNotificationTypeParameterFormatTypePropEnum = append(httpHostNotificationTypeParameterFormatTypePropEnum, v)
	}
}

const (

	// HttpHostNotificationParameterFormatTypeXML captures enum value "XML"
	HttpHostNotificationParameterFormatTypeXML string = "XML"

	// HttpHostNotificationParameterFormatTypeQuerystring captures enum value "querystring"
	HttpHostNotificationParameterFormatTypeQuerystring string = "querystring"
)

// prop value enum
func (m *HttpHostNotification) validateParameterFormatTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, httpHostNotificationTypeParameterFormatTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HttpHostNotification) validateParameterFormatType(formats strfmt.Registry) error {

	if swag.IsZero(m.ParameterFormatType) { // not required
		return nil
	}

	// value enum
	if err := m.validateParameterFormatTypeEnum("parameterFormatType", "body", m.ParameterFormatType); err != nil {
		return err
	}

	return nil
}

var httpHostNotificationTypeProtocolTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HTTP","HTTPS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpHostNotificationTypeProtocolTypePropEnum = append(httpHostNotificationTypeProtocolTypePropEnum, v)
	}
}

const (

	// HttpHostNotificationProtocolTypeHTTP captures enum value "HTTP"
	HttpHostNotificationProtocolTypeHTTP string = "HTTP"

	// HttpHostNotificationProtocolTypeHTTPS captures enum value "HTTPS"
	HttpHostNotificationProtocolTypeHTTPS string = "HTTPS"
)

// prop value enum
func (m *HttpHostNotification) validateProtocolTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, httpHostNotificationTypeProtocolTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HttpHostNotification) validateProtocolType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProtocolType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolTypeEnum("protocolType", "body", m.ProtocolType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HttpHostNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HttpHostNotification) UnmarshalBinary(b []byte) error {
	var res HttpHostNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
