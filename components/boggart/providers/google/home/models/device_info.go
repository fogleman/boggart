// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DeviceInfo device info
// swagger:model DeviceInfo
type DeviceInfo struct {

	// 4k blocked
	Nr4kBlocked int64 `json:"4k_blocked,omitempty"`

	// capabilities
	Capabilities *DeviceInfoCapabilities `json:"capabilities,omitempty"`

	// cloud device id
	CloudDeviceID string `json:"cloud_device_id,omitempty"`

	// factory country code
	FactoryCountryCode string `json:"factory_country_code,omitempty"`

	// hotspot bssid
	HotspotBssid string `json:"hotspot_bssid,omitempty"`

	// local authorization token hash
	LocalAuthorizationTokenHash string `json:"local_authorization_token_hash,omitempty"`

	// mac address
	MacAddress string `json:"mac_address,omitempty"`

	// manufacturer
	Manufacturer string `json:"manufacturer,omitempty"`

	// model name
	ModelName string `json:"model_name,omitempty"`

	// product name
	ProductName string `json:"product_name,omitempty"`

	// public key
	PublicKey string `json:"public_key,omitempty"`

	// ssdp udn
	SsdpUdn string `json:"ssdp_udn,omitempty"`

	// uptime
	Uptime float32 `json:"uptime,omitempty"`
}

// Validate validates this device info
func (m *DeviceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceInfo) validateCapabilities(formats strfmt.Registry) error {

	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	if m.Capabilities != nil {
		if err := m.Capabilities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capabilities")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceInfo) UnmarshalBinary(b []byte) error {
	var res DeviceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceInfoCapabilities device info capabilities
// swagger:model DeviceInfoCapabilities
type DeviceInfoCapabilities struct {

	// aogh supported
	AoghSupported bool `json:"aogh_supported,omitempty"`

	// assistant supported
	AssistantSupported bool `json:"assistant_supported,omitempty"`

	// audio hdr supported
	AudioHdrSupported bool `json:"audio_hdr_supported,omitempty"`

	// audio surround mode supported
	AudioSurroundModeSupported bool `json:"audio_surround_mode_supported,omitempty"`

	// ble supported
	BleSupported bool `json:"ble_supported,omitempty"`

	// bluetooth audio sink supported
	BluetoothAudioSinkSupported bool `json:"bluetooth_audio_sink_supported,omitempty"`

	// bluetooth audio source supported
	BluetoothAudioSourceSupported bool `json:"bluetooth_audio_source_supported,omitempty"`

	// bluetooth supported
	BluetoothSupported bool `json:"bluetooth_supported,omitempty"`

	// cloudcast supported
	CloudcastSupported bool `json:"cloudcast_supported,omitempty"`

	// content filters supported
	ContentFiltersSupported bool `json:"content_filters_supported,omitempty"`

	// display supported
	DisplaySupported bool `json:"display_supported,omitempty"`

	// fdr supported
	FdrSupported bool `json:"fdr_supported,omitempty"`

	// hdmi prefer 50hz supported
	HdmiPrefer50hzSupported bool `json:"hdmi_prefer_50hz_supported,omitempty"`

	// hdmi prefer high fps supported
	HdmiPreferHighFpsSupported bool `json:"hdmi_prefer_high_fps_supported,omitempty"`

	// hotspot supported
	HotspotSupported bool `json:"hotspot_supported,omitempty"`

	// https setup supported
	HTTPSSetupSupported bool `json:"https_setup_supported,omitempty"`

	// input management supported
	InputManagementSupported bool `json:"input_management_supported,omitempty"`

	// keep hotspot until connected supported
	KeepHotspotUntilConnectedSupported bool `json:"keep_hotspot_until_connected_supported,omitempty"`

	// multi user supported
	MultiUserSupported bool `json:"multi_user_supported,omitempty"`

	// multizone supported
	MultizoneSupported bool `json:"multizone_supported,omitempty"`

	// night mode supported
	NightModeSupported bool `json:"night_mode_supported,omitempty"`

	// night mode supported v2
	NightModeSupportedV2 bool `json:"night_mode_supported_v2,omitempty"`

	// opencast supported
	OpencastSupported bool `json:"opencast_supported,omitempty"`

	// preview channel supported
	PreviewChannelSupported bool `json:"preview_channel_supported,omitempty"`

	// reboot supported
	RebootSupported bool `json:"reboot_supported,omitempty"`

	// remote ducking supported
	RemoteDuckingSupported bool `json:"remote_ducking_supported,omitempty"`

	// setup supported
	SetupSupported bool `json:"setup_supported,omitempty"`

	// sleep mode supported
	SleepModeSupported bool `json:"sleep_mode_supported,omitempty"`

	// stats supported
	StatsSupported bool `json:"stats_supported,omitempty"`

	// system sound effects supported
	SystemSoundEffectsSupported bool `json:"system_sound_effects_supported,omitempty"`

	// ui flipping supported
	UIFlippingSupported bool `json:"ui_flipping_supported,omitempty"`

	// user eq supported
	UserEqSupported bool `json:"user_eq_supported,omitempty"`

	// wifi auto save supported
	WifiAutoSaveSupported bool `json:"wifi_auto_save_supported,omitempty"`

	// wifi regulatory domain locked
	WifiRegulatoryDomainLocked bool `json:"wifi_regulatory_domain_locked,omitempty"`

	// wifi supported
	WifiSupported bool `json:"wifi_supported,omitempty"`
}

// Validate validates this device info capabilities
func (m *DeviceInfoCapabilities) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceInfoCapabilities) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceInfoCapabilities) UnmarshalBinary(b []byte) error {
	var res DeviceInfoCapabilities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
