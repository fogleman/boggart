// Code generated by go-swagger; DO NOT EDIT.

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new general API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for general API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetBillServicesFull gets bill full for services
*/
func (a *Client) GetBillServicesFull(params *GetBillServicesFullParams) (*GetBillServicesFullOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillServicesFullParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBillServicesFull",
		Method:             "GET",
		PathPattern:        "/GetBillServicesFull.ashx",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBillServicesFullReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBillServicesFullOK), nil

}

/*
GetBills gets bill full for services
*/
func (a *Client) GetBills(params *GetBillsParams) (*GetBillsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBills",
		Method:             "GET",
		PathPattern:        "/GetBills.ashx",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBillsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBillsOK), nil

}

/*
GetDebtByAccount gets account debt
*/
func (a *Client) GetDebtByAccount(params *GetDebtByAccountParams) (*GetDebtByAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebtByAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDebtByAccount",
		Method:             "GET",
		PathPattern:        "/GetDebtByAccount.ashx",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDebtByAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebtByAccountOK), nil

}

/*
GetMeterValuesEverydayMode get meter values everyday mode API
*/
func (a *Client) GetMeterValuesEverydayMode(params *GetMeterValuesEverydayModeParams) (*GetMeterValuesEverydayModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMeterValuesEverydayModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMeterValuesEverydayMode",
		Method:             "GET",
		PathPattern:        "/GetMeterValuesEverydayMode.ashx",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMeterValuesEverydayModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMeterValuesEverydayModeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
