// Code generated by go-swagger; DO NOT EDIT.

package ussd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new ussd API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ussd API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetUSSD get u s s d API
*/
func (a *Client) GetUSSD(params *GetUSSDParams) (*GetUSSDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUSSDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUSSD",
		Method:             "GET",
		PathPattern:        "/ussd/get",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUSSDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUSSDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUSSD: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUSSDStatus get u s s d status API
*/
func (a *Client) GetUSSDStatus(params *GetUSSDStatusParams) (*GetUSSDStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUSSDStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUSSDStatus",
		Method:             "GET",
		PathPattern:        "/ussd/status",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUSSDStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUSSDStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUSSDStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReleaseUSSD release u s s d API
*/
func (a *Client) ReleaseUSSD(params *ReleaseUSSDParams) (*ReleaseUSSDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseUSSDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "releaseUSSD",
		Method:             "GET",
		PathPattern:        "/ussd/release",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReleaseUSSDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReleaseUSSDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for releaseUSSD: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SendUSSD send u s s d API
*/
func (a *Client) SendUSSD(params *SendUSSDParams) (*SendUSSDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendUSSDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendUSSD",
		Method:             "POST",
		PathPattern:        "/ussd/send",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendUSSDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendUSSDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendUSSD: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
