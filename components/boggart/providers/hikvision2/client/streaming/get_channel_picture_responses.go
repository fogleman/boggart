// Code generated by go-swagger; DO NOT EDIT.

package streaming

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetChannelPictureReader is a Reader for the GetChannelPicture structure.
type GetChannelPictureReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *GetChannelPictureReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetChannelPictureOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetChannelPictureOK creates a GetChannelPictureOK with default headers values
func NewGetChannelPictureOK(writer io.Writer) *GetChannelPictureOK {
	return &GetChannelPictureOK{
		Payload: writer,
	}
}

/*GetChannelPictureOK handles this case with default header values.

Successful operation
*/
type GetChannelPictureOK struct {
	Payload io.Writer
}

func (o *GetChannelPictureOK) Error() string {
	return fmt.Sprintf("[GET /Streaming/channels/{channel}/picture][%d] getChannelPictureOK  %+v", 200, o.Payload)
}

func (o *GetChannelPictureOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
