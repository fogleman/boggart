// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetDeviceInfo get device info API
*/
func (a *Client) GetDeviceInfo(params *GetDeviceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInfo",
		Method:             "GET",
		PathPattern:        "/System/deviceInfo",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceInfoOK), nil

}

/*
GetStatus get status API
*/
func (a *Client) GetStatus(params *GetStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStatus",
		Method:             "GET",
		PathPattern:        "/System/status",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStatusOK), nil

}

/*
GetUpgradeStatus get upgrade status API
*/
func (a *Client) GetUpgradeStatus(params *GetUpgradeStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetUpgradeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpgradeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUpgradeStatus",
		Method:             "GET",
		PathPattern:        "/System/upgradeStatus",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUpgradeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUpgradeStatusOK), nil

}

/*
Reboot reboot API
*/
func (a *Client) Reboot(params *RebootParams, authInfo runtime.ClientAuthInfoWriter) (*RebootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reboot",
		Method:             "PUT",
		PathPattern:        "/System/reboot",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RebootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RebootOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
