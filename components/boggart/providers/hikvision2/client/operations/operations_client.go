// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStreamingChannelsChannelPicture get streaming channels channel picture API
*/
func (a *Client) GetStreamingChannelsChannelPicture(params *GetStreamingChannelsChannelPictureParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetStreamingChannelsChannelPictureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStreamingChannelsChannelPictureParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStreamingChannelsChannelPicture",
		Method:             "GET",
		PathPattern:        "/Streaming/channels/{channel}/picture",
		ProducesMediaTypes: []string{"image/jpeg; charset=\"UTF-8\""},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStreamingChannelsChannelPictureReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStreamingChannelsChannelPictureOK), nil

}

/*
GetSystemDeviceInfo get system device info API
*/
func (a *Client) GetSystemDeviceInfo(params *GetSystemDeviceInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemDeviceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemDeviceInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemDeviceInfo",
		Method:             "GET",
		PathPattern:        "/System/deviceInfo",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemDeviceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemDeviceInfoOK), nil

}

/*
GetSystemStatus get system status API
*/
func (a *Client) GetSystemStatus(params *GetSystemStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemStatus",
		Method:             "GET",
		PathPattern:        "/System/status",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemStatusOK), nil

}

/*
GetSystemUpgradeStatus get system upgrade status API
*/
func (a *Client) GetSystemUpgradeStatus(params *GetSystemUpgradeStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetSystemUpgradeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemUpgradeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSystemUpgradeStatus",
		Method:             "GET",
		PathPattern:        "/System/upgradeStatus",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemUpgradeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSystemUpgradeStatusOK), nil

}

/*
PutSystemReboot put system reboot API
*/
func (a *Client) PutSystemReboot(params *PutSystemRebootParams, authInfo runtime.ClientAuthInfoWriter) (*PutSystemRebootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSystemRebootParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSystemReboot",
		Method:             "PUT",
		PathPattern:        "/System/reboot",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSystemRebootReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSystemRebootOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
