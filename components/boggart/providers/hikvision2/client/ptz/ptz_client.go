// Code generated by go-swagger; DO NOT EDIT.

package ptz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new ptz API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ptz API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetPtzChannelStatus its is used to get currently p t z coordinate position for the device
*/
func (a *Client) GetPtzChannelStatus(params *GetPtzChannelStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetPtzChannelStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPtzChannelStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPtzChannelStatus",
		Method:             "GET",
		PathPattern:        "/PTZCtrl/channels/{channel}/status",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPtzChannelStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPtzChannelStatusOK), nil

}

/*
GetPtzChannels its is used to get the list of p t z channels for the device
*/
func (a *Client) GetPtzChannels(params *GetPtzChannelsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPtzChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPtzChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPtzChannels",
		Method:             "GET",
		PathPattern:        "/PTZCtrl/channels",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPtzChannelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPtzChannelsOK), nil

}

/*
GotoPtzChannelPreset its is used to move a particular p t z channel to a ID preset position for the device
*/
func (a *Client) GotoPtzChannelPreset(params *GotoPtzChannelPresetParams, authInfo runtime.ClientAuthInfoWriter) (*GotoPtzChannelPresetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGotoPtzChannelPresetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "gotoPtzChannelPreset",
		Method:             "PUT",
		PathPattern:        "/PTZCtrl/channels/{channel}/presets/{preset}/goto",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GotoPtzChannelPresetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GotoPtzChannelPresetOK), nil

}

/*
SetPtzChannelContinuous its is used to control p t z move around and zoom for the device
*/
func (a *Client) SetPtzChannelContinuous(params *SetPtzChannelContinuousParams, authInfo runtime.ClientAuthInfoWriter) (*SetPtzChannelContinuousOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPtzChannelContinuousParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPtzChannelContinuous",
		Method:             "PUT",
		PathPattern:        "/PTZCtrl/channels/{channel}/continuous",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetPtzChannelContinuousReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetPtzChannelContinuousOK), nil

}

/*
SetPtzChannelMomentary its is used to control p t z move around and zoom in a period of time for the device
*/
func (a *Client) SetPtzChannelMomentary(params *SetPtzChannelMomentaryParams, authInfo runtime.ClientAuthInfoWriter) (*SetPtzChannelMomentaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPtzChannelMomentaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPtzChannelMomentary",
		Method:             "PUT",
		PathPattern:        "/PTZCtrl/channels/{channel}/momentary",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetPtzChannelMomentaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetPtzChannelMomentaryOK), nil

}

/*
SetPtzChannelPositionAbsolute its is used to move a particular p t z channel to a absolute position which is defined by absolute for the device
*/
func (a *Client) SetPtzChannelPositionAbsolute(params *SetPtzChannelPositionAbsoluteParams, authInfo runtime.ClientAuthInfoWriter) (*SetPtzChannelPositionAbsoluteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPtzChannelPositionAbsoluteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPtzChannelPositionAbsolute",
		Method:             "PUT",
		PathPattern:        "/PTZCtrl/channels/{channel}/absolute",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetPtzChannelPositionAbsoluteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetPtzChannelPositionAbsoluteOK), nil

}

/*
SetPtzChannelPositionRelative its is used to move the position which is defined by position x position y to the screen center and relative zoom for the device
*/
func (a *Client) SetPtzChannelPositionRelative(params *SetPtzChannelPositionRelativeParams, authInfo runtime.ClientAuthInfoWriter) (*SetPtzChannelPositionRelativeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPtzChannelPositionRelativeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPtzChannelPositionRelative",
		Method:             "PUT",
		PathPattern:        "/PTZCtrl/channels/{channel}/relative",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetPtzChannelPositionRelativeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetPtzChannelPositionRelativeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
