// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetParams creates a new GetParams object
// with the default values initialized.
func NewGetParams() *GetParams {
	var (
		deviceOSDefault    = string("Android 9")
		sendToEmailDefault = string("no")
	)
	return &GetParams{
		DeviceOS:    &deviceOSDefault,
		SendToEmail: &sendToEmailDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetParamsWithTimeout creates a new GetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetParamsWithTimeout(timeout time.Duration) *GetParams {
	var (
		deviceOSDefault    = string("Android 9")
		sendToEmailDefault = string("no")
	)
	return &GetParams{
		DeviceOS:    &deviceOSDefault,
		SendToEmail: &sendToEmailDefault,

		timeout: timeout,
	}
}

// NewGetParamsWithContext creates a new GetParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetParamsWithContext(ctx context.Context) *GetParams {
	var (
		deviceOSDefault    = string("Android 9")
		sendToEmailDefault = string("no")
	)
	return &GetParams{
		DeviceOS:    &deviceOSDefault,
		SendToEmail: &sendToEmailDefault,

		Context: ctx,
	}
}

// NewGetParamsWithHTTPClient creates a new GetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetParamsWithHTTPClient(client *http.Client) *GetParams {
	var (
		deviceOSDefault    = string("Android 9")
		sendToEmailDefault = string("no")
	)
	return &GetParams{
		DeviceOS:    &deviceOSDefault,
		SendToEmail: &sendToEmailDefault,
		HTTPClient:  client,
	}
}

/*GetParams contains all the parameters to send to the API endpoint
for the get operation typically these are written to a http.Request
*/
type GetParams struct {

	/*DeviceID*/
	DeviceID string
	/*DeviceOS*/
	DeviceOS *string
	/*FiscalDocumentNumber
	  Номер фискальных данных

	*/
	FiscalDocumentNumber uint64
	/*FiscalDriveNumber
	  Номер фискальное накопителя

	*/
	FiscalDriveNumber uint64
	/*FiscalSign
	  Фискальный признак

	*/
	FiscalSign uint64
	/*SendToEmail
	  Отсылка на email

	*/
	SendToEmail *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get params
func (o *GetParams) WithTimeout(timeout time.Duration) *GetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get params
func (o *GetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get params
func (o *GetParams) WithContext(ctx context.Context) *GetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get params
func (o *GetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get params
func (o *GetParams) WithHTTPClient(client *http.Client) *GetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get params
func (o *GetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the get params
func (o *GetParams) WithDeviceID(deviceID string) *GetParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get params
func (o *GetParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithDeviceOS adds the deviceOS to the get params
func (o *GetParams) WithDeviceOS(deviceOS *string) *GetParams {
	o.SetDeviceOS(deviceOS)
	return o
}

// SetDeviceOS adds the deviceOS to the get params
func (o *GetParams) SetDeviceOS(deviceOS *string) {
	o.DeviceOS = deviceOS
}

// WithFiscalDocumentNumber adds the fiscalDocumentNumber to the get params
func (o *GetParams) WithFiscalDocumentNumber(fiscalDocumentNumber uint64) *GetParams {
	o.SetFiscalDocumentNumber(fiscalDocumentNumber)
	return o
}

// SetFiscalDocumentNumber adds the fiscalDocumentNumber to the get params
func (o *GetParams) SetFiscalDocumentNumber(fiscalDocumentNumber uint64) {
	o.FiscalDocumentNumber = fiscalDocumentNumber
}

// WithFiscalDriveNumber adds the fiscalDriveNumber to the get params
func (o *GetParams) WithFiscalDriveNumber(fiscalDriveNumber uint64) *GetParams {
	o.SetFiscalDriveNumber(fiscalDriveNumber)
	return o
}

// SetFiscalDriveNumber adds the fiscalDriveNumber to the get params
func (o *GetParams) SetFiscalDriveNumber(fiscalDriveNumber uint64) {
	o.FiscalDriveNumber = fiscalDriveNumber
}

// WithFiscalSign adds the fiscalSign to the get params
func (o *GetParams) WithFiscalSign(fiscalSign uint64) *GetParams {
	o.SetFiscalSign(fiscalSign)
	return o
}

// SetFiscalSign adds the fiscalSign to the get params
func (o *GetParams) SetFiscalSign(fiscalSign uint64) {
	o.FiscalSign = fiscalSign
}

// WithSendToEmail adds the sendToEmail to the get params
func (o *GetParams) WithSendToEmail(sendToEmail *string) *GetParams {
	o.SetSendToEmail(sendToEmail)
	return o
}

// SetSendToEmail adds the sendToEmail to the get params
func (o *GetParams) SetSendToEmail(sendToEmail *string) {
	o.SendToEmail = sendToEmail
}

// WriteToRequest writes these params to a swagger request
func (o *GetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Device-Id
	if err := r.SetHeaderParam("Device-Id", o.DeviceID); err != nil {
		return err
	}

	if o.DeviceOS != nil {

		// header param Device-OS
		if err := r.SetHeaderParam("Device-OS", *o.DeviceOS); err != nil {
			return err
		}

	}

	// path param fiscalDocumentNumber
	if err := r.SetPathParam("fiscalDocumentNumber", swag.FormatUint64(o.FiscalDocumentNumber)); err != nil {
		return err
	}

	// path param fiscalDriveNumber
	if err := r.SetPathParam("fiscalDriveNumber", swag.FormatUint64(o.FiscalDriveNumber)); err != nil {
		return err
	}

	// query param fiscalSign
	qrFiscalSign := o.FiscalSign
	qFiscalSign := swag.FormatUint64(qrFiscalSign)
	if qFiscalSign != "" {
		if err := r.SetQueryParam("fiscalSign", qFiscalSign); err != nil {
			return err
		}
	}

	if o.SendToEmail != nil {

		// query param sendToEmail
		var qrSendToEmail string
		if o.SendToEmail != nil {
			qrSendToEmail = *o.SendToEmail
		}
		qSendToEmail := qrSendToEmail
		if qSendToEmail != "" {
			if err := r.SetQueryParam("sendToEmail", qSendToEmail); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
