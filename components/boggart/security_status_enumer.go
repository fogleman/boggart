// Code generated by "enumer -type=SecurityStatus -trimprefix=SecurityStatus -output=security_status_enumer.go -transform=snake"; DO NOT EDIT.

package boggart

/*
import (
	"fmt"
)

const _SecurityStatusName = "openclosedopen_forceclosed_force"

var _SecurityStatusIndex = [...]uint8{0, 4, 10, 20, 32}

func (i SecurityStatus) String() string {
	if i < 0 || i >= SecurityStatus(len(_SecurityStatusIndex)-1) {
		return fmt.Sprintf("SecurityStatus(%d)", i)
	}
	return _SecurityStatusName[_SecurityStatusIndex[i]:_SecurityStatusIndex[i+1]]
}

var _SecurityStatusValues = []SecurityStatus{0, 1, 2, 3}

var _SecurityStatusNameToValueMap = map[string]SecurityStatus{
	_SecurityStatusName[0:4]:   0,
	_SecurityStatusName[4:10]:  1,
	_SecurityStatusName[10:20]: 2,
	_SecurityStatusName[20:32]: 3,
}

// SecurityStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SecurityStatusString(s string) (SecurityStatus, error) {
	if val, ok := _SecurityStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SecurityStatus values", s)
}

// SecurityStatusValues returns all values of the enum
func SecurityStatusValues() []SecurityStatus {
	return _SecurityStatusValues
}

// IsASecurityStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SecurityStatus) IsASecurityStatus() bool {
	for _, v := range _SecurityStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
*/
