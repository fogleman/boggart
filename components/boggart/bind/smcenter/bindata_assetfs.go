// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package smcenter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xcd\x6e\x1b\x39\x12\xbe\xfb\x29\x0a\x1d\xef\x22\x3e\xa8\x25\x6b\x17\x8b\xc0\x69\x69\x11\xc4\x30\x60\x6c\xe2\x35\x9c\x64\x81\x3d\x19\x54\x37\x65\x71\x42\x91\x0a\xc9\x96\x6d\x08\xba\xcc\x65\x1e\x64\x9e\x61\x8e\x33\xcf\xe0\xbc\xd1\x80\x3f\xfd\x23\x59\x92\xf5\xc3\x16\xa4\x89\x1a\x48\xd2\xea\xae\xfa\xaa\x58\x55\x2c\x92\x55\x9d\xd1\x08\x12\xdc\x25\x0c\x43\x10\x73\xa6\x30\x53\x01\x8c\xc7\x47\x91\x8c\x05\x19\x28\x50\x8f\x03\xdc\x0a\xd0\x60\x40\x49\x8c\x14\xe1\xac\xfe\x13\x1a\x22\xfb\x32\x68\x1f\x01\x00\x74\x53\x16\xeb\x37\x30\x44\x34\xc5\x17\x5c\xf4\x91\x7a\xcd\x4e\x60\x64\xde\xea\x4b\x60\x95\x0a\x06\x0c\xdf\xc3\x25\x53\x34\xbc\x4a\xfb\x1d\x2c\x1c\xe5\x49\xd8\xcd\x58\xde\x1a\x8e\xf1\x51\x54\xb7\x02\xda\x47\x51\x42\x86\x10\x53\x24\x65\x2b\x10\xfc\xde\x49\x2c\x3f\x8d\x39\xad\xf5\x93\xda\x69\x13\xf4\x9d\xec\x67\x77\x0f\xb2\x76\xda\x74\xf4\xd3\x3c\x0f\xb7\x03\xc4\x30\x2d\xbd\x7d\x4e\x91\x19\x63\x92\x26\xa7\x13\x9c\xe2\x56\xa0\x50\x67\x16\x52\x4e\x99\xd2\x0c\x90\xa1\x21\x30\x34\xac\x29\xd4\x91\xd0\x41\xe2\x56\xdf\x04\x05\x0c\x25\x72\x96\xac\x1c\x89\x12\x47\x3b\x10\x58\x62\xa6\x8c\x2f\x82\xd1\x08\x48\x17\xf0\x37\x08\x91\x75\x41\xa0\x9d\x97\xc9\xd4\xcf\x86\x58\x13\x61\x96\xc0\x78\xdc\x8e\x10\xf4\x04\xee\xb6\xe6\xf0\x15\x9e\x3d\x1b\x72\x92\xbc\x6e\x9c\xbc\xd5\xbc\x54\x62\x18\x8f\x47\x23\x08\x6f\xf0\xb7\x14\x4b\x15\x7e\xb9\xf9\x10\x5e\x23\xd5\xb3\x8f\x2d\x78\xd0\xd6\xa0\xa7\x6f\x18\x04\xef\xe2\x98\xa7\x4c\xc9\x00\x42\x18\x8f\xa3\x3a\x6a\x47\x75\x4a\x3c\x0c\xae\x8f\x15\x16\x72\xdd\x21\x16\xdc\xeb\x0c\xf4\xdf\x16\xa6\x65\x51\x66\x0d\xfb\xa3\xc3\x7f\x79\xd0\x51\x3d\xa5\x73\xde\x94\x62\x50\xa1\x4e\x6d\x7e\x14\x2e\x8a\xc6\x32\x82\x7e\x02\x5d\x94\x60\xb0\xb6\x02\xc2\x16\xa0\xe9\x6b\x91\xe5\x16\x32\x16\xcc\xa1\xe5\x58\x86\xc1\x31\x09\xc4\xee\x30\x1c\x1b\x3e\x38\x6b\xad\x8a\x30\x3b\x4f\xac\xca\xb9\x6c\x2e\x59\x15\x77\x76\xbe\x59\x1d\x45\x11\x45\xf1\x1a\x28\x06\xa9\xd7\x6c\xbf\x1a\x8d\x9c\x89\x43\x37\x47\x2f\xcf\xf5\x64\x2a\x1e\x5f\xa1\x3e\x36\xe1\xdb\x6b\xae\x29\xe6\x59\xca\xeb\x20\x51\x13\xe4\xae\xa7\xc0\x18\xe1\x56\x71\x4e\x3b\xfc\x61\xcd\x61\x80\xcd\x17\x7a\x9e\x17\x4e\xa3\x68\x20\x71\x8d\x12\xf6\x35\x68\x47\x24\x7b\xd1\x45\x12\xba\xa8\x16\xf7\xf0\x50\x70\x56\x4b\x07\x41\x3b\xaa\x93\xf6\xcb\xf9\x68\xa1\xec\xb9\x53\xf7\x45\xce\x72\xa0\x51\x8c\x44\x97\x3c\x68\x8d\x12\x32\x5c\x23\x2e\xd6\x64\x5b\x72\x89\x5b\x0a\x4b\x62\x9b\x1e\x72\x3f\x18\x34\x20\x6c\xc8\x49\xbc\x6e\x98\x4e\x6b\xb9\xda\x64\x7e\x09\xcd\xe9\x56\xeb\x61\x94\x60\xb1\x21\x30\xd8\x59\x95\x61\x0f\x52\x4a\x6d\xa0\x9b\x35\x21\x9b\x67\x49\x22\xb0\x94\x1b\xcd\xa9\x5c\xd8\x7a\x4e\xf7\xc5\x3e\xe9\x95\xcc\xcf\x35\xc2\xba\xdc\xa3\x8b\x5c\xe6\xfd\x67\x8e\x1f\xf3\x75\x12\xe7\xf4\x35\xb9\x4a\x07\x70\xbc\xec\xca\xb2\x50\x6f\x64\xbd\xbb\xb9\x7a\x06\x4d\x2a\xc1\xd9\x5d\xb1\xa1\xb8\xc1\x92\xa7\x22\xc6\x56\xdb\xb3\xa8\xee\x08\x4a\xf9\x3a\x23\xd1\xf1\xd5\x11\x50\xaf\x48\x93\x0b\x14\x2b\x2e\x1e\x81\x99\x8d\xfb\x02\x7d\x1c\xa1\xdd\xe0\x7b\x31\x71\xdd\x8b\x8d\x37\x8c\x7d\xd8\x72\x90\xbe\xef\xe1\xf8\x6b\x3a\xd8\xc9\x30\xb5\x3b\x3c\xe7\xef\x0f\x48\x2a\xa7\xec\x39\x52\xd8\x87\xb6\xd9\xf5\x2c\x08\xb5\xac\x05\xa1\x37\xa5\x4a\x68\x8f\x97\x10\x34\x1b\x8d\x7f\xd5\x1a\xa7\xb5\x46\x33\xf0\x3b\x4b\xf2\x33\xc0\x91\x7f\xbb\x5e\xe1\x87\xad\xd9\x55\xcb\x5a\x60\xd7\x29\x55\xf6\xd4\xae\x77\xaa\x48\x99\xb1\x1e\xcd\x25\x53\x58\x0c\x11\x85\x46\xa5\xc6\xcd\xc4\xcc\x32\xb0\xa6\xb8\xa6\xa9\x40\x14\x82\xbf\x25\xf0\x88\x91\x08\xf2\x3b\x19\xcc\x53\xf8\x18\x18\xa1\xf9\x9f\x39\x44\x9e\xc6\x54\xf8\x62\x63\xcb\xfc\x90\x89\xfc\x93\x42\x42\xed\x7e\x1a\x37\x6a\x56\x9e\x68\xb4\x80\x05\x89\x26\x57\x62\xef\x52\xcc\xb3\x91\xfe\x0f\xd1\xf4\xc5\xa1\x1a\xa2\xc9\xe3\xf7\x17\x46\xd4\xd2\x35\x8f\x85\x1a\xed\xc4\x6c\xdb\x90\x7d\x22\x44\x8d\xb5\x36\xb2\x4d\x75\xc7\x4a\x85\x3a\x6b\xd7\x65\x26\x30\x0d\xd0\x04\x2a\x98\xbf\x6b\x52\x09\x32\xc0\x09\x30\x7e\x2f\xd0\xc0\x83\x28\x2b\x4e\x9f\x83\xfd\x60\x59\x3c\xe1\x0f\xcc\x02\xf6\x66\x65\x8f\xa8\xae\x7a\x15\x0a\x2a\x4d\xde\x8a\x25\x9d\x63\xaa\x50\x15\x92\xa2\xba\x2f\x57\x68\xbd\xbc\x05\x49\xa4\x3a\x3c\x79\xf4\x96\xc2\x5d\xcd\xd8\xb4\x9d\xe0\xac\xe5\x2f\x53\x94\x2f\xaf\x41\x1d\xa9\x24\xf7\xbe\xd5\x3b\xbc\xc6\x82\xf0\x24\xfc\xc8\x99\xea\x85\x9f\x94\x20\xec\xce\xed\xf0\x82\x04\xc9\x5e\x87\x23\x91\x04\xd9\x2a\x31\xc1\xf2\x7f\x8c\x84\x8d\x1c\xaf\x73\x38\x01\x44\xc9\x1d\x6b\x05\xb6\x96\x95\x67\x23\xfc\xa0\x6a\x79\x6b\xc0\x69\xf2\x1f\xc2\x12\x08\x9e\x7e\xfd\xfe\xcb\xf7\x9f\x9f\x7e\x7b\xfa\xfd\xe9\x0f\xad\xaa\x4c\xe3\x18\x4b\x59\xb4\x54\x12\xed\x28\x51\xf4\x4c\xc0\x14\xb2\x4d\x8f\xa6\x0c\x34\x1e\x7b\x4a\x6c\xf9\x60\x96\x6a\x62\x26\x3c\x4e\xfb\x98\xa9\xf0\x5e\x10\x85\x5f\x97\xbb\x98\x85\x82\xd9\x62\x7d\x72\x92\x37\x27\xab\x58\xb7\x73\xcd\xb7\xee\x54\x7d\x40\xb2\x43\x35\x59\x09\x1a\x61\x63\x19\x57\xee\xac\xc3\xec\x28\xf6\xd0\x61\xfe\x72\xb7\xbf\xc3\x1b\x58\xbd\xfc\x64\xef\xa8\x6e\xf6\x34\x7b\xbe\x33\xdd\xc0\xb2\x51\xdd\xb5\x4e\xb6\xd2\xf7\x59\x91\x65\x05\xf2\x15\x48\x97\x37\xd8\x72\x94\x45\x42\x5a\xb6\x23\x8d\xdc\x47\x09\xab\xf7\xa4\x1d\xa7\xe9\x4a\xaf\x8a\x72\xe8\x4b\xbf\x88\xd4\x6b\x9a\x76\x99\xb3\x6c\xf8\xf9\x71\x60\x0e\xc5\xaf\xca\x0f\x4d\x9b\xfa\xd0\x94\x9e\x2b\xfb\xd0\x94\xce\xb0\x0e\x4d\xe9\x85\x4d\xe9\x6c\x42\x1d\xda\xd2\x2b\x42\x57\x5d\x28\xbe\x10\xbc\xbf\x93\x75\xe2\x52\x6d\x33\x8f\x9e\x8b\xcb\xff\x9a\xc8\x71\xaf\xfe\x22\xd5\x4a\xd8\xb2\xcb\x3f\xf3\xbd\x71\xf8\x7b\xde\x1f\x20\xf6\x58\x76\xba\xdf\x6a\xbc\x6b\x96\x5d\x5d\xb9\xa2\x39\xcc\x90\x7e\x79\x75\x75\x28\x8d\xbb\xcb\x95\xc6\xf3\x4d\x93\x40\x4c\xda\xaf\x35\x0f\x25\xf2\x5d\x2d\x91\x7b\xae\x24\x6e\xa1\x34\x3e\x21\xc4\x56\x1d\x2b\x17\x73\x8e\x3b\x44\x55\x2e\xe5\xbd\xc0\xc9\x16\xc4\x5c\x10\xea\xdd\x31\x3f\x46\x6d\xff\x38\xd1\x71\xa0\xcf\xdc\xde\xbe\xcf\xd0\xa8\xb1\xf1\xbb\x6f\x58\x57\x28\x50\x45\x16\x36\xed\x08\xdf\xd9\xb9\x7c\x55\xd1\x96\x28\x0f\x20\x74\x5f\x03\x78\x2f\x44\x3f\x13\x64\xf3\x4a\x25\x8d\x8c\x72\x95\xdb\x55\xb2\x83\xc9\x42\xb8\xdf\xf2\xb5\x5b\x95\xcb\xa3\xbb\x94\xd7\xe8\xb1\xaf\x8f\xa0\x1e\x8b\xcd\xd9\xe5\xa5\x5c\x5e\xd6\xf6\x5d\xdf\x54\xba\x26\xab\xe6\x7f\x7f\xf5\xe6\x1f\x6f\x4e\xdf\x7a\xd7\xbe\x98\xe5\x2d\x40\x49\x92\xfd\x98\xad\x90\x6f\x3f\x79\x2c\x8c\x43\x25\xfd\x9a\x72\xec\xda\xa6\xcb\x16\x42\x97\x71\x75\x08\xdf\x25\xaf\xd2\x72\xe2\xe2\xd7\xfd\x3a\x04\xb0\xc9\xf3\x55\x67\x56\xbd\xb7\xfa\x72\xf3\xa1\x92\xc0\x2c\xfd\x27\xc2\x39\x32\xf3\x16\x6a\x47\x31\xe8\x28\x66\xea\x4d\xf6\x26\xe6\xf6\xc9\x83\x0c\x40\x21\x71\x87\x55\x2b\xb8\xed\x50\xc4\xbe\x7a\x9e\xb3\xb9\xba\xd3\xd5\xe5\x84\xdf\x33\xca\x51\x52\x6e\xb4\xbb\xdd\x75\xfe\xe6\xd8\x74\x6f\xa3\xfa\x9a\x25\xe7\x85\xfa\xd4\x91\x77\xef\xef\x6c\xb8\xef\x6c\xbb\xd6\xf3\x06\x11\x62\x4e\xe5\x00\xb1\x56\xd0\x9c\x5e\x88\x4a\x15\x2d\x95\x7d\xe9\xbc\xff\x9b\x39\x2f\xab\x93\xdd\xd2\x54\xbb\x20\xed\xfd\xde\xc3\x8b\xa5\xdd\xe2\xbb\x67\xa6\x6e\xef\x62\x22\x3a\x7c\xe9\x51\x5c\x87\x2f\x3d\x56\x24\xad\xe2\x4b\x8f\xc5\x54\x0b\x94\x9b\xf3\x6a\xc6\xe3\xa9\x47\xa5\x9f\xee\xd6\xfd\x53\xa8\xf3\x67\x00\x00\x00\xff\xff\xd5\x7e\xd5\x11\x39\x45\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
