// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
package smcenter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xcd\x6e\x1b\x39\x12\xbe\xfb\x29\x0a\x1d\xef\x22\x3e\xa8\x25\x6b\x17\x8b\xc0\x69\x69\x11\xc4\x30\xd6\xd8\xc4\x6b\x38\xc9\x02\x7b\x32\xa8\x6e\xca\xe2\x86\x22\x15\x92\x2d\xdb\x10\x74\x99\xcb\x3c\xc8\x3c\xc3\x1c\x67\x9e\xc1\x79\xa3\x01\x7f\xfa\x47\xb2\x24\xeb\x87\x2d\x48\x13\x11\x48\xd2\x62\xb3\xbe\x2a\x56\x15\x8b\x64\x55\x67\x34\x82\x04\x77\x09\xc3\x10\xc4\x9c\x29\xcc\x54\x00\xe3\xf1\x51\x24\x63\x41\x06\x0a\xd4\xe3\x00\xb7\x02\x34\x18\x50\x12\x23\x45\x38\xab\xff\x1f\x0d\x91\x7d\x19\xb4\x8f\x00\x00\xba\x29\x8b\xf5\x1b\x18\x22\x9a\xe2\x0b\x2e\xfa\x48\xbd\x66\x27\x30\x32\x6f\x75\x13\x58\xa5\x82\x01\xc3\xf7\x70\xc9\x14\x0d\xaf\xd2\x7e\x07\x0b\x37\xf2\x24\xec\x66\x24\x6f\x0d\xc5\xf8\x28\xaa\x5b\x06\xed\xa3\x28\x21\x43\x88\x29\x92\xb2\x15\x08\x7e\xef\x38\x96\x7b\x63\x4e\x6b\xfd\xa4\x76\xda\x04\xfd\x24\xfb\xd9\xd3\x83\xac\x9d\x36\xdd\xf8\x69\x9a\x87\xdb\x01\x62\x98\x96\xde\x3e\x1f\x91\x29\x63\x72\x4c\x3e\x4e\x70\x8a\x5b\x81\x42\x9d\x59\x48\xf9\xc8\x94\x66\x80\x0c\x0d\x81\xa1\x61\x4d\xa1\x8e\x84\x0e\x12\xb7\xfa\x21\x28\x60\x28\x91\xb3\x78\xe5\x48\x94\xb8\xb1\x03\x81\x25\x66\xca\xd8\x22\x18\x8d\x80\x74\x01\x7f\x83\x10\x59\x13\x04\xda\x78\x19\x4f\xdd\x37\xc4\x7a\x10\x66\x09\x8c\xc7\xed\x08\x41\x4f\xe0\x6e\x6b\x0e\x5d\x61\xd9\xb3\x21\x27\xc9\xeb\xc6\xc9\x5b\x4d\x4b\x25\x86\xf1\x78\x34\x82\xf0\x06\x7f\x4b\xb1\x54\xe1\x97\x9b\x0f\xe1\x35\x52\x3d\xdb\x6d\xc1\x83\xb6\x06\x3d\x7d\xc3\x20\x78\x17\xc7\x3c\x65\x4a\x06\x10\xc2\x78\x1c\xd5\x51\x3b\xaa\x53\xe2\x61\x72\x7d\xac\xb0\x90\xeb\x4e\xb1\xa0\x5e\x67\xa2\xff\xb4\x30\x2d\x8b\x32\x6b\xda\x1f\x1d\xfe\xcb\x93\x8e\xea\x29\x9d\xf3\xa6\xe4\x83\x0a\x75\x6a\xf3\xbd\x70\x91\x37\x96\x11\x74\x0f\x74\x51\x82\xc1\xea\x0a\x08\x5b\x80\xa6\xdb\x22\xcd\x2d\x24\x2c\x88\x43\x4b\xb1\x0c\x81\x23\x12\x88\xdd\x61\x38\x36\x74\x70\xd6\x5a\x15\x61\x76\x9c\x58\x95\x72\xd9\x58\xb2\x2a\xee\xec\x78\xb3\x3a\x8a\x22\x8a\xe2\x35\x50\x0c\x52\xaf\xd9\x7e\x35\x1a\x39\x15\x87\x6e\x8d\x5e\x9e\xeb\xc5\x54\x74\x5f\xa1\x3e\x36\xee\xdb\x6b\xae\xc9\xe6\x59\xc8\xeb\x20\x51\x13\xe4\xae\xa7\xc0\x28\xe1\x56\x71\x4e\x3b\xfc\x61\xcd\x69\x80\x8d\x17\x7a\x9d\x17\x46\xa3\x68\x20\x71\x8d\x12\xf6\x35\x68\x47\x24\x7b\xd1\x45\x12\xba\xa8\x16\xf7\xf0\x50\x70\x56\x4b\x07\x41\x3b\xaa\x93\xf6\xcb\xf1\x68\x21\xef\xb9\x4b\xf7\x45\xca\xb2\xa3\x51\x8c\x44\x97\x3c\x68\x89\x12\x32\x5c\xc3\x2f\xd6\x24\x5b\x72\x8b\x5b\x0a\x4b\x62\x1b\x1e\x72\x3b\x18\x34\x20\x6c\xc8\x49\xbc\xae\x9b\x4e\x4b\xb9\xda\x62\x7e\x09\xcd\xc9\x56\xeb\x61\x94\x60\xb1\x21\x30\xd8\x55\x95\x61\x0f\x52\x4a\xad\xa3\x9b\x3d\x21\x5b\x67\x49\x22\xb0\x94\x1b\xad\xa9\x9c\xd9\x7a\x46\xf7\x45\x3e\x69\x95\xcc\xce\x35\xc2\xba\xdc\xa3\x89\x5c\xe4\xfd\x7b\x8e\x1f\xf3\x75\x02\xe7\x74\x9b\xdc\xa5\x03\x38\x5e\x76\x67\x59\x28\x37\xb2\xd6\xdd\x5c\x3c\x83\x26\x95\xe0\xec\xae\x38\x50\xdc\x60\xc9\x53\x11\x63\x2b\xed\x59\x54\x77\x03\x4a\xf1\x3a\x1b\xa2\xfd\xab\x23\xa0\x5e\x91\x24\x17\x28\x56\x5c\x3c\x02\x33\x07\xf7\x05\xf2\xb8\x81\xf6\x80\xef\x45\xc5\x75\x2f\x3a\xde\xd0\xf7\x61\xcb\x4e\xfa\xbe\x87\xe3\xaf\xe9\x60\x27\xdd\xd4\x9e\xf0\x9c\xbd\x3f\x20\xa9\x9c\xb0\xe7\x48\x61\x1f\xd2\x66\xed\x99\x13\x6a\x5e\x0b\x5c\x6f\x4a\x94\xd0\x5e\x2f\x21\x68\x36\x1a\xff\xa8\x35\x4e\x6b\x8d\x66\xe0\x77\x95\xe4\x77\x80\x23\xff\x7a\xbd\xc2\x0f\x5b\xd3\xab\xe6\xb5\x40\xaf\x53\xa2\xec\xa9\x5e\xef\x54\x11\x32\x63\x3d\x9b\x4b\xa6\xb0\x18\x22\x0a\x8d\x4a\x95\x9b\xb1\x99\xa5\x60\x3d\xe2\x9a\xa6\x02\x51\x08\xfe\x92\xc0\x23\x46\x22\xc8\x9f\x64\x30\x4f\xe0\x63\x60\x84\xe6\x7f\xe6\x0c\xf2\x34\xa7\xc2\x16\x1b\x6b\xe6\x87\x0c\xe4\x9f\x14\x12\x6a\xf7\xc3\xb8\x11\xb3\xf2\x40\xa3\x19\x2c\x08\x34\xb9\x10\x7b\x17\x62\x9e\xcd\xf4\xbf\x88\xa6\x2f\x4e\xd5\x0c\x9a\xbc\x7e\x7f\x61\x44\x2d\x9d\xf3\x58\x28\xd1\x4e\xac\xb6\x0d\xc9\x27\x5c\xd4\x68\x6b\x23\xdd\x54\x77\xad\x54\xa8\xb3\x76\x5e\x66\x02\xd3\x00\x4d\xa0\x82\xf9\xbb\x26\x95\x20\x03\x9c\x00\xe3\xf7\x02\x0d\x3c\xb0\xb2\xec\xf4\x3d\xd8\x0f\x96\xc5\x13\xfe\xc0\x2c\x60\x6f\x56\xf4\x88\xea\xaa\x57\x21\xa3\xd2\xe2\xad\x98\xd3\x39\xa6\x0a\x55\xc1\x29\xaa\xfb\x32\x85\x96\xcb\x9b\x93\x44\xaa\xc3\x93\x47\x6f\x21\xdc\xe5\x8c\x4d\xd9\x09\xce\x5a\xfe\x22\x45\xb9\x79\x75\xea\x48\x25\xb9\xf5\xad\xdc\xe1\x35\x16\x84\x27\xe1\x47\xce\x54\x2f\xfc\xa4\x04\x61\x77\xee\x84\x17\x24\x48\xf6\x3a\x1c\x89\x24\xc8\x76\x89\x09\x92\xff\x61\x24\xac\xe7\x78\x5d\xc3\x09\x20\x4a\xee\x58\x2b\xb0\xb9\xac\x3c\x1a\xe1\x07\x55\xcb\x4b\x03\x4e\x92\x7f\x13\x96\x40\xf0\xf4\xcb\xf7\x9f\xbf\xff\xf4\xf4\xeb\xd3\x6f\x4f\xbf\x6b\x51\x65\x1a\xc7\x58\xca\xa2\xa4\x92\x68\x43\x89\xa2\x66\x02\x26\x91\x6d\x6a\x34\x65\xa0\xf1\xd8\x53\x60\xcb\x27\xb3\x54\x11\x33\xe1\x71\xda\xc7\x4c\x85\xf7\x82\x28\xfc\xba\x5c\xc5\x2c\x04\xcc\x36\xeb\x93\x93\xbc\x38\x59\xc5\xbe\x9d\x4b\xbe\x75\xa3\xea\x0b\x92\x9d\xaa\x89\x4a\xd0\x08\x1b\xcb\x98\x72\x67\x0d\x66\x67\xb1\x87\x06\xf3\x17\xbb\xfd\x5d\xde\xc0\xca\xe5\x27\x7a\x47\x75\x73\xa6\xd9\xf3\x93\xe9\x06\x9a\x8d\xea\xae\x74\xb2\x95\xba\xcf\x8a\x24\x2b\x0c\x5f\x61\xe8\xf2\x0a\x5b\x6e\x64\x11\x90\x96\xad\x48\x23\xf7\x51\xc2\xea\x35\x69\x47\x69\xaa\xd2\xab\xa2\x1c\xea\xd2\x2f\x22\xf5\x9a\xa6\x5c\xe6\x34\x1b\x7e\x7e\x1c\x98\x4b\xf1\xab\x72\xa7\x29\x53\x1f\x8a\xd2\x73\x79\x1f\x8a\xd2\x19\xd6\xa1\x28\xbd\xb0\x28\x9d\x2d\xa8\x43\x59\x7a\x45\xe8\xaa\x13\xc5\x17\x82\xf7\x77\x32\x4f\x5c\xca\x6d\xe6\xde\x73\x71\xf9\x1f\xe3\x39\xee\xd5\x9f\x24\x5b\x09\x5b\x36\xf9\x67\xbe\x37\x06\x7f\xcf\xfb\x03\xc4\x1e\xcb\x46\xf7\x9b\x8d\x77\xc5\xb2\xab\x2b\x97\x34\x87\x19\xdc\x2f\xaf\xae\x0e\xa9\x71\xd7\x5c\x6a\x3c\x3f\x34\x09\xc4\xa4\xfd\x5a\xf3\x90\x22\xdf\xd5\x14\xb9\xe7\x4c\xe2\x16\x52\xe3\x13\x4c\x6c\xd6\xb1\x72\x36\xe7\xb8\x43\x54\xe5\x5c\xde\x0b\x9c\x6c\x81\xcd\x05\xa1\xde\x0d\xf3\x63\xe4\xf6\x8f\x13\xed\x07\xfa\xce\xed\xed\xfb\x0c\x8d\x1a\x1b\xbb\xfb\x86\x75\x89\x02\x55\x44\x61\x53\x8e\xf0\x1d\x9d\xcb\xad\x8a\xb2\x44\x79\x02\xa1\xfb\x1a\xc0\x7b\x22\xfa\x19\x23\x1b\x57\x2a\x29\x64\x94\xb3\xdc\x2e\x93\x1d\x4c\x26\xc2\xfd\xa6\xaf\xdd\xae\x5c\x9e\xdd\xa5\xbc\x46\x8f\x7d\x7d\x05\xf5\x98\x6c\xce\x9a\x97\x74\x79\x59\xda\x77\x7d\x93\xe9\x9a\xcc\x9a\xff\xf5\xd5\x9b\xbf\xbd\x39\x7d\xeb\x5d\xfa\x62\x95\xb7\x00\x25\x49\xf6\x63\xb6\x40\xbe\xed\xe4\x31\x31\x0e\x95\xd4\x6b\xca\xbe\x6b\x8b\x2e\x5b\x70\x5d\xc6\xd5\xc1\x7d\x97\x6c\xa5\xed\xc4\xf9\xaf\xfb\x75\x70\x60\x13\xe7\x2b\x70\x4f\xc4\x92\x49\xed\xfe\x0b\x49\x7d\xc4\x9a\xec\xd4\x3d\x5f\x6e\x3e\x54\xe2\xb1\xa5\xff\x5d\x38\x87\x67\x5e\x5b\xed\x28\x06\x1d\xc5\x4c\x22\xca\x3e\xc4\xdc\xf6\x3c\xc8\x00\x14\x12\x77\x58\xb5\x82\xdb\x0e\x45\xec\xab\xe7\xc5\x9c\x8b\x3b\x9d\x76\x4e\xf8\x3d\xa3\x1c\x25\xe5\x0a\xbc\x3b\x76\xe7\x6f\x8e\x4d\x59\x37\xaa\xaf\x99\x8b\x5e\x28\x4f\x1d\x79\x77\x8b\x9d\x5d\x07\x3b\x5b\xc7\xf5\x7c\x72\x84\x98\x53\x39\x40\xac\x15\x34\xa7\x77\xa8\x52\xaa\x4b\x65\x9f\x40\xef\xff\x29\xcf\xcb\xb6\x65\xcf\x3a\xd5\xee\x54\x7b\x7f\x28\xf1\xa2\x69\xb7\x2b\xef\x99\xaa\xdb\xbb\x18\x88\x0e\x9f\x80\x14\xed\xf0\x09\xc8\x8a\x43\xab\xf8\x04\x64\xf1\xa8\x05\xc2\xcd\x79\x35\xa3\x7b\xaa\xab\xf4\xd3\x3d\xba\x7f\x0a\x71\xfe\x08\x00\x00\xff\xff\xf8\xea\xd5\x64\x52\x45\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
