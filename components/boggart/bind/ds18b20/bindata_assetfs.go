// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package ds18b20

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xc1\x8e\xd3\x30\x10\xbd\xf7\x2b\x46\x96\x90\xb6\x87\x24\xdb\x3d\x21\xc8\xf6\x82\x40\xe2\x00\x27\xc4\x15\xb9\xf1\x94\x1a\x39\xb6\x35\x9e\x24\xad\xa2\xfc\x13\xdf\xc0\x97\x21\x27\x69\x5a\x96\x36\x0a\x22\x87\xd6\xce\x7b\x6f\xde\x8c\x3d\x93\xb6\x05\x85\x7b\x6d\x11\x44\xe1\x2c\xa3\x65\x01\x5d\xb7\xca\x43\x41\xda\x33\xf0\xc9\xe3\xb3\x90\xde\x1b\x5d\x48\xd6\xce\x66\x3f\x64\x2d\x07\x50\x6c\x57\x00\x00\xfb\xca\x16\x11\x81\x5a\x9a\x0a\x3f\x38\x2a\x25\x3f\xd8\x35\xb4\x3d\x1a\x1f\x42\xae\xc8\x82\xc5\x06\x3e\x5a\x36\xe9\xe7\xaa\xdc\x21\x8d\xcc\x75\xba\x3f\x4b\xde\xf6\x8a\x6e\x95\x67\x83\xc1\x76\x95\x2b\x5d\x43\x61\x64\x08\xcf\x82\x5c\x33\x3a\x5e\xbf\x2d\x9c\x49\x4a\x95\x6c\x9e\x20\xae\x42\x79\x5e\x1d\x43\xb2\x79\x1a\xf9\x2f\x35\xc7\x6f\x5e\x5a\x34\x57\xe8\xdf\x8c\xf3\x61\xfc\xc9\xe9\x79\x2c\x77\x06\xcf\xcc\x61\xd3\xff\x26\x81\x49\x7b\x54\xa0\x24\xcb\xe1\xbd\xe2\x84\x30\x78\x67\x83\xae\x11\xac\x6b\x48\x7a\x01\x81\x4f\x06\x9f\x45\xa3\x15\x1f\xde\x6c\x1e\x1f\x5f\xdd\x70\x19\x9c\x0e\x28\xd5\x6d\x6c\xc0\xe9\x3e\x38\x06\xd8\xb6\x2d\xe8\xcd\x6b\x0b\xe2\x13\xca\x50\x11\x96\xfd\x15\xa7\xd0\x75\x79\xc6\x87\x7f\xd0\x7f\x8d\xd7\xbb\x44\x99\x67\xf7\xf2\x8a\xba\xbb\x15\xe5\xbc\x73\xea\xf4\x5f\xd5\xaa\x4b\xb6\x5f\xb0\xf4\x48\x92\x2b\xba\xe4\x3c\x73\x94\xf1\x89\xda\x3d\xa4\x48\xe4\x28\xce\xc0\x1c\x77\xf4\x9b\xba\x00\x8f\x9c\x28\x69\xbf\x23\x89\x98\xc3\x10\x24\x7d\x3f\x86\x5a\xe4\x8d\x26\xe0\x42\xdb\xf9\x58\x13\x71\xd1\x0c\x2b\x57\x54\xb1\x27\xd2\x86\x34\xe3\xc3\xf5\x10\xc7\x42\xfa\x3d\x74\xdd\x7a\x3d\x4d\x25\x4c\x87\xfc\xeb\xe7\x3b\xb1\x28\xe5\x45\xf5\x5b\x35\x17\x6b\xb6\xab\x6e\x77\x4e\x9e\xf5\x53\xf8\x62\xcc\x33\xa5\xeb\xab\xef\xc2\x65\x3b\x2e\xc7\xbf\x29\xa3\xdf\x01\x00\x00\xff\xff\xb9\x18\x5a\x1d\x22\x05\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4e\x41\x6b\x13\x41\x18\x7d\x8d\xf5\xb2\x22\x88\x88\x27\x0f\x9f\xa0\x45\x91\xa9\xb3\x89\x15\x9d\x64\x53\xb1\xb6\x20\x36\x58\xca\xda\x93\x97\xa1\x19\x93\xc5\xec\xcc\x3a\x33\x2b\x0a\x15\x44\x0f\x22\x08\x9e\xc4\xa3\xe0\x2f\xc8\x65\x51\xd4\xea\x5f\x98\xfd\x03\xfe\x0e\x8f\xb2\x49\x54\x9c\xcb\x7b\x6f\xde\xfb\xde\xf7\xfd\x3c\xb9\xfc\x0e\x00\x96\x01\x9c\x01\xd0\x03\x70\x14\xc0\x7d\xcc\x5f\x01\xe0\x18\x80\x47\x0b\x7c\xb6\xf0\x5f\x03\x18\x2f\x01\x6f\x01\x9c\x02\xf0\x6b\x09\x38\x0d\xe0\x78\x0b\x38\x01\xe0\x5c\x0b\x58\x02\x70\x64\xd1\xd3\x5a\xec\xc0\x40\x49\x57\x5a\x95\x2b\xed\x91\xaa\xbc\x50\x56\xfa\xd2\x2a\xec\xc9\x49\xa9\xb0\xab\x0a\x63\x3d\x1b\xb8\x51\x36\x64\x37\xcb\x91\x63\xa9\x11\x34\x54\x8f\x6f\x3c\xcc\xc6\x32\x37\xab\xb6\x8c\x76\xee\xa6\x6c\xc3\x2a\xe9\x33\xa3\xd9\x2d\xe9\x95\xa0\x36\x8f\xaf\x33\xde\x61\xf1\x55\x6a\x77\xc4\xda\xda\x25\xde\xe1\x3c\xda\x96\xce\xb3\xd4\x4a\xed\x26\xd2\x1b\x2b\xe8\xce\xac\x83\x06\xa5\x95\xb9\x19\x1a\xea\xfd\x57\xdc\x8f\xb6\xa5\x1e\x95\x72\xa4\x58\xaa\x64\x2e\xe8\xaf\x16\xb4\x5b\x3a\x97\x49\x1d\x0d\x6e\x0f\x36\xd9\x9e\xb2\x2e\x33\x5a\x50\xbc\xca\xa3\x0d\xa3\xbd\xd2\x9e\xa5\x4f\x0b\x25\xc8\xab\x27\xfe\x72\x31\x91\x99\xee\xd2\xfe\x58\x5a\xa7\x7c\x72\x2f\xdd\x62\xd7\xfe\xe5\x9a\x7b\x1e\x28\xcb\x36\xf5\xbe\x19\x66\x7a\x24\x28\xda\x99\x94\x56\x4e\xd8\x96\xb1\xb9\x13\xa4\x8b\x99\x74\x49\xa7\x4b\x73\x9a\xe8\xf3\x31\x4f\x92\x98\x56\x56\xa8\xa1\xfc\x6c\x12\xc7\xb4\x4e\x9c\xc4\x4c\xf7\x93\xf6\x1f\xab\x97\x5c\x69\xe8\x85\x59\xac\x17\x73\x3a\x38\x98\x8f\xf4\x93\x36\xbf\x48\xeb\x14\x93\xa0\x76\x17\xe1\x43\xf8\x1e\xbe\x84\x69\xf8\x14\xa6\xf5\x8b\x50\x85\xaf\xf5\x1b\x84\x8f\xa1\x0a\xdf\xc2\x8f\x50\xd5\xcf\x9b\xef\xfa\x65\x83\x08\xef\xc3\x61\x98\xd6\xaf\x42\x15\x0e\xc3\xe7\x50\xe1\x77\x00\x00\x00\xff\xff\x6f\x6b\x9d\x94\x35\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
