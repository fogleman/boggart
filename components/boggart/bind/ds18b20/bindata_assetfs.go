// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package ds18b20

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xc1\x8e\xd3\x30\x10\xbd\xf7\x2b\x46\x96\x90\xb6\x87\x24\xdb\x3d\x21\xc8\xf6\x82\x40\xe2\x00\x27\xc4\x15\xb9\xf1\x94\x1a\x39\xb6\x35\x9e\x24\xad\xa2\xfc\x13\xdf\xc0\x97\x21\x27\x69\x5a\x96\x36\x0a\x22\x87\xd6\xce\x7b\x6f\xde\x8c\x3d\x93\xb6\x05\x85\x7b\x6d\x11\x44\xe1\x2c\xa3\x65\x01\x5d\xb7\xca\x43\x41\xda\x33\xf0\xc9\xe3\xb3\x90\xde\x1b\x5d\x48\xd6\xce\x66\x3f\x64\x2d\x07\x50\x6c\x57\x00\x00\xfb\xca\x16\x11\x81\x5a\x9a\x0a\x3f\x38\x2a\x25\x3f\xd8\x35\xb4\x3d\x1a\x1f\x42\xae\xc8\x82\xc5\x06\x3e\x5a\x36\xe9\xe7\xaa\xdc\x21\x8d\xcc\x75\xba\x3f\x4b\xde\xf6\x8a\x6e\x95\x67\x83\xc1\x76\x95\x2b\x5d\x43\x61\x64\x08\xcf\x82\x5c\x33\x3a\x5e\xbf\x2d\x9c\x49\x4a\x95\x6c\x9e\x20\xae\x42\x79\x5e\x1d\x43\xb2\x79\x1a\xf9\x2f\x35\xc7\x6f\x5e\x5a\x34\x57\xe8\xdf\x8c\xf3\x61\xfc\xc9\xe9\x79\x2c\x77\x06\xcf\xcc\x61\xd3\xff\x26\x81\x49\x7b\x54\xa0\x24\xcb\xe1\xbd\xe2\x84\x30\x78\x67\x83\xae\x11\xac\x6b\x48\x7a\x01\x81\x4f\x06\x9f\x45\xa3\x15\x1f\xde\x6c\x1e\x1f\x5f\xdd\x70\x19\x9c\x0e\x28\xd5\x6d\x6c\xc0\xe9\x3e\x38\x06\xd8\xb6\x2d\xe8\xcd\x6b\x0b\xe2\x13\xca\x50\x11\x96\xfd\x15\xa7\xd0\x75\x79\xc6\x87\x7f\xd0\x7f\x8d\xd7\xbb\x44\x99\x67\xf7\xf2\x8a\xba\xbb\x15\xe5\xbc\x73\xea\xf4\x5f\xd5\xaa\x4b\xb6\x5f\xb0\xf4\x48\x92\x2b\xba\xe4\x3c\x73\x94\xf1\x89\xda\x3d\xa4\x48\xe4\x28\xce\xc0\x1c\x77\xf4\x9b\xba\x00\x8f\x9c\x28\x69\xbf\x23\x89\x98\xc3\x10\x24\x7d\x3f\x86\x5a\xe4\x8d\x26\xe0\x42\xdb\xf9\x58\x13\x71\xd1\x0c\x2b\x57\x54\xb1\x27\xd2\x86\x34\xe3\xc3\xf5\x10\xc7\x42\xfa\x3d\x74\xdd\x7a\x3d\x4d\x25\x4c\x87\xfc\xeb\xe7\x3b\xb1\x28\xe5\x45\xf5\x5b\x35\x17\x6b\xb6\xab\x6e\x77\x4e\x9e\xf5\x53\xf8\x62\xcc\x33\xa5\xeb\xab\xef\xc2\x65\x3b\x2e\xc7\xbf\x29\xa3\xdf\x01\x00\x00\xff\xff\xb9\x18\x5a\x1d\x22\x05\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4e\x3d\x8b\x14\x41\x14\xac\xd5\x33\x59\x13\x11\x31\x32\x78\x06\x1e\x1a\xf4\x39\xb3\x1a\x48\xef\xce\xae\x28\x77\x20\xde\x82\x1c\xe3\x45\x26\xcd\x6d\x3b\x37\x38\xd3\x3d\x76\xf7\x88\xc2\x09\xa2\x81\x08\x82\x91\x18\x0a\xfe\x82\x4d\x06\x45\x3d\xfd\x09\xbe\xf9\x03\x46\xfe\x0b\x13\x99\xdd\x55\xb9\x97\x54\xd5\xab\x7a\x1f\x3f\x4f\xaf\xbd\x05\x80\x35\x00\xe7\x00\x8c\x00\x9c\x00\x70\x0f\xcb\xaa\x00\x9c\x04\xf0\x70\x85\x4f\x57\xfe\x2b\x00\x93\x1e\xf0\x06\xc0\x19\x00\x3f\x7a\xc0\x59\x00\xbf\x7a\xc0\x29\x00\xbf\x7b\x40\x0f\xc0\xf1\xd5\x9e\x63\xab\x1b\x98\x6a\xe5\x6b\xa7\x4b\x6d\x02\x52\x5d\x56\xda\xa9\x50\x3b\x8d\x5d\x55\xd4\x1a\x3b\xba\xb2\x2e\x88\xa9\xcf\xf2\x99\xb8\x51\x67\x5e\xa4\x56\xd2\x4c\x3f\xba\xfe\x20\xdf\x57\xa5\xdd\x70\x75\x7f\x5b\xf9\x20\x52\xa7\x8c\x2f\x54\xb0\x4e\xd2\xed\x85\x45\xd3\xda\xa9\xd2\xce\x2c\x8d\x8e\xe4\xc7\xfd\x6d\x65\xb2\x5a\x65\x5a\xa4\x5a\x95\x92\xfe\x69\x49\x3b\xb5\xf7\xb9\x32\xfd\xe9\xad\xe9\xa6\xd8\xd5\xce\xe7\xd6\x48\x8a\x37\xa2\xfe\x4d\x6b\x82\x36\x41\xa4\x4f\x2a\x2d\x29\xe8\xc7\xe1\x72\x55\xa8\xdc\x0c\x69\x6f\x5f\x39\xaf\x43\x72\x37\xdd\x12\xd7\xfe\xe7\xba\x7f\xee\x6b\x27\x36\xcd\x9e\x9d\xe5\x26\x93\xd4\xbf\x53\xd4\x4e\x15\x62\xcb\xba\xd2\x4b\x32\xd5\x42\xfa\xe4\xca\x90\x96\x34\x31\x17\xe2\x28\x49\x62\x5a\x5f\xa7\x8e\x46\xe7\x93\x38\xa6\x09\x45\x24\x17\x7a\x9c\x0c\xfe\x5a\xa3\xe4\x6a\x47\x2f\x2e\x62\xa3\x38\xa2\x83\x83\xe5\xc8\x38\x19\x44\x97\x68\x42\x31\x49\x1a\x0c\xc1\xef\xf9\x1b\x7f\xe6\x39\x7f\xe4\x79\xfb\x9c\x1b\xfe\xd2\xbe\x06\x7f\xe0\x86\xbf\xf2\x77\x6e\xda\x67\x5d\xbb\x7d\xd1\x21\xf8\x1d\x1f\xf2\xbc\x7d\xc9\x0d\x1f\xf2\x27\x6e\xf0\x27\x00\x00\xff\xff\x95\xa8\x42\x67\x0c\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
