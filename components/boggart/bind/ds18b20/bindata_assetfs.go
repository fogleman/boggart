// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package ds18b20

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x8e\xd3\x30\x10\xbd\xf7\x2b\x46\xd6\x22\x6d\x25\x92\x6c\xf7\x84\x96\x74\x2f\x48\x48\x1c\xe0\x02\xe2\x8a\xdc\x78\x4a\x8d\x12\xdb\xb2\x27\xc9\x56\x56\xfe\x89\x6f\xe0\xcb\x90\xed\xa4\x5b\xca\xa6\x2d\xe4\xd0\xda\x9e\xf7\x66\xec\xe7\xe7\xf1\x1e\x04\x6e\xa5\x42\x60\x95\x56\x84\x8a\x18\x0c\xc3\xa2\x74\x95\x95\x86\x80\xf6\x06\xd7\x8c\x1b\x53\xcb\x8a\x93\xd4\xaa\xf8\xc1\x3b\x9e\x82\xec\x71\x01\x00\xb0\x6d\x55\x15\x22\xd0\xf1\xba\xc5\xf7\xda\x36\x9c\x6e\xd5\x12\x7c\x8c\x86\xcf\x22\xb5\x56\x81\xc2\x1e\x3e\x28\xaa\xf3\x4f\x6d\xb3\x41\x3b\x22\x97\xf9\x76\xa2\xbc\x8d\x8c\x61\x51\x16\xa9\xc0\xe3\xa2\x14\xb2\x83\xaa\xe6\xce\xad\x99\xd5\xfd\x58\xf1\x78\xb5\xd2\x75\xd6\x88\x6c\x75\x0f\x61\xe4\x9a\x69\xf4\xe4\xb2\xd5\xfd\x88\x3f\xe5\x3c\x7d\x33\x5c\x61\x7d\x14\xfd\x1b\x31\x89\xf1\x27\x26\xe2\x88\x6f\x6a\x9c\x90\x69\x12\x7f\x33\x47\x56\x1a\x14\x20\x38\xf1\xb4\x2e\x28\xb3\xe8\x8c\x56\x4e\x76\x08\x4a\xf7\x96\x1b\x06\x8e\xf6\x35\xae\x59\x2f\x05\xed\x1e\x56\x77\x77\xaf\x5e\xa8\x92\x2a\xed\x90\x8b\x97\x63\x29\x6e\xe7\x83\x63\x82\x47\xef\x41\xae\xde\x28\x60\x9f\x51\x39\x6d\x19\xe4\x30\x0c\x65\x41\xbb\x7f\xa0\x7e\x44\xee\x5a\x8b\x4d\x74\xc7\x7f\xf0\xbf\x06\x67\x5c\xc3\x2c\x8b\xb9\x23\x05\xde\xac\x18\x25\x6d\xb4\xd8\xcf\xa7\x0d\x1b\xd9\x42\x1e\x0d\xea\x82\xbd\xcf\xed\xdc\x7b\xb0\x5c\x7d\x47\xb8\x71\x51\xb1\xd7\x70\x13\x89\xf0\xb0\xbe\x36\xc5\xc5\x8b\x49\x20\x11\x14\x1a\xab\x24\x69\xce\x5c\xf6\x09\x2d\x09\xfb\x05\x1b\x83\x96\x53\x6b\x9f\xe5\xbd\x32\xc7\x45\x50\x04\x5e\xd5\x06\x84\xae\xda\xe0\x8d\xbc\xb7\x92\xf0\xf6\xb8\x0f\x84\x03\x26\xf5\x86\x61\xb9\x3c\x3c\x6c\x38\x9c\xe0\xd7\xcf\x77\xec\x92\x9c\x90\xee\xff\xc2\x9e\xe7\xbd\x33\x7d\xde\x03\x2a\x71\xae\xda\x79\x44\x59\xcc\xf8\xac\x2c\xe2\x73\x3f\xe9\x27\x85\x90\xdd\x51\x03\x7a\x9e\x8e\xc3\xf1\xef\x50\xf3\x77\x00\x00\x00\xff\xff\xa7\xf0\xc8\x75\x8b\x05\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x6a\x13\x5f\x14\xc6\xbf\xa4\xfd\xff\x85\xe8\xa2\x88\xb8\x72\x71\x5c\x58\x75\x71\xeb\x4c\x74\x21\x37\x99\x44\xd4\x16\xc4\x06\xa4\x8e\xdd\x5f\x9a\x6b\x3a\x38\x73\x6f\xb8\xf7\x8e\x28\x74\x51\x75\xa1\x82\xdb\xe2\x46\x10\x5d\xb9\x92\x6c\x82\xa2\xb6\xbe\xc2\x99\x17\xf0\x11\x7c\x06\x99\x24\x2a\x9e\xcd\xf9\x7e\x9c\xdf\x07\xe7\xc7\xc9\xe5\x03\x00\xf8\x0f\xc0\x19\x00\x37\x01\x1c\x03\x90\x63\x3e\x2f\x00\x1c\x07\xf0\x12\xc0\xff\x00\x0e\x16\xfc\x66\xd1\xf9\x00\xa0\xdf\x00\x3e\x02\x38\x05\xe0\x67\x03\x38\x01\x60\xa9\x09\x9c\x06\xb0\xd2\x04\x56\x00\x9c\x6f\x02\x0d\x00\x4d\x00\xcb\x8b\x6e\x3d\x4b\x8b\x8d\x81\x56\xbe\x74\xba\xd0\x26\xe0\xae\x36\xde\x3a\xa4\xba\x18\x6b\xa7\x42\xe9\x34\xb6\x55\x5e\x6a\x6c\xe9\xb1\x75\x41\x0c\xfc\x28\x1b\x8a\xeb\xe5\xc8\x8b\xd4\x4a\x1a\xea\x87\xd7\x1e\x64\xbb\xaa\xb0\x6b\xae\x6c\x6d\x2a\x1f\x44\xea\x94\xf1\xb9\x0a\xd6\x49\xba\x3d\x3b\xd1\xa0\x74\xaa\xb0\x43\x4b\xdd\x7f\xfc\x5e\x6b\x53\x99\x51\xa9\x46\x5a\xa4\x5a\x15\x92\xfe\xb0\xa4\xad\xd2\xfb\x4c\x99\xd6\xe0\xd6\x60\x5d\x6c\x6b\xe7\x33\x6b\x24\xc5\x6b\x51\xeb\x86\x35\x41\x9b\x20\xd2\xc7\x63\x2d\x29\xe8\x47\xe1\xd2\x38\x57\x99\xe9\xd0\xce\xae\x72\x5e\x87\xe4\x5e\xba\x21\xae\xfe\xf5\xea\x7f\xee\x6b\x27\xd6\xcd\x8e\x1d\x66\x66\x24\xa9\x75\x27\x2f\x9d\xca\xc5\x86\x75\x85\x97\x64\xc6\x33\xf4\xc9\xe5\x0e\xcd\x63\x62\xce\xc5\x51\x92\xc4\xb4\xba\x4a\x75\x8c\xce\x26\x71\x4c\x7d\x8a\x48\xce\xb8\x97\xb4\x7f\x9f\xba\xc9\x95\x3a\x5e\x98\x69\xdd\x38\xa2\xbd\xbd\x79\xa5\x97\xb4\xa3\x8b\xd4\xa7\x98\x24\xb5\x3b\xe0\xb7\x7c\xc4\x5f\x78\xc2\x9f\x78\x52\x3d\xe5\x29\x7f\xad\x5e\x81\xdf\xf1\x94\x0f\xab\x27\x7c\x54\xed\x83\xdf\xf3\x94\xbf\xf1\x77\x9e\x56\xfb\xb5\x53\x3d\xab\x37\xf8\x35\x1f\xf2\xa4\x7a\x5e\x9b\xfc\x99\xa7\xf8\x15\x00\x00\xff\xff\x78\xa8\x46\xd7\x38\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
