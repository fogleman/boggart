// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
package modbus

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xd1\x6e\xdb\x3a\x12\x7d\xef\x57\x10\x02\x8a\xee\x3e\xd8\x8e\x9d\xa0\x58\x74\x9d\x14\x45\x8a\x20\x05\xda\x45\xd0\xec\x76\x1f\x05\xda\xa2\x6c\xde\x4a\xa4\x4a\x51\x76\x82\xc0\xff\xd4\x6f\xe8\x97\x5d\x50\xa2\x6c\x4a\xa2\x12\x4b\xa2\x2c\x3b\x50\x1e\xee\x75\x25\xce\x9c\x99\xe1\xcc\x19\x33\xa2\x98\xa7\x27\xe0\x20\x17\x13\x04\xac\x39\x25\x1c\x11\x6e\x81\xcd\xe6\xcd\xd4\xc1\x2b\x30\xf7\x60\x18\x5e\x5a\x8c\xae\xad\xab\x37\x00\x00\xa0\x5e\x9d\x53\x6f\xe0\x3b\x83\xf1\x04\x88\x4f\xa1\x9f\x7e\x7a\x08\x07\xe3\x89\x1c\x9f\x97\x79\xb0\x03\x48\x90\xa7\xdc\x2d\x8e\xe0\x98\x7b\x28\x37\x22\x1e\xb5\x9c\x5c\x3d\x3d\x01\x3c\xfe\x17\x01\xd6\xb7\xeb\xf7\x16\x18\x82\xcd\x66\x3a\x5a\x4e\x34\x63\x23\x2f\x55\x48\xe0\x0a\x10\xb8\x9a\x41\x36\x60\x78\xb1\xe4\x20\xb6\xc0\xe6\x94\x7a\x33\xfa\xa0\xc1\x89\xe5\x3d\x7c\x35\x85\x8a\xa7\x1e\x0c\x42\x34\xf0\x30\xf9\x69\x5d\x4d\x71\x7a\xc3\x85\xc0\x85\x83\xf9\x12\xad\x18\x25\x83\x28\xb0\xae\xa6\x23\x7c\x35\x1d\xc1\xab\xe9\xc8\xc3\x1a\xb3\x46\x91\xa7\xb9\xaa\x06\xd5\x43\x90\xb9\xf8\x41\x68\x72\xf0\x2a\x17\x27\xcd\xa5\x17\x83\x5b\x1c\x95\x4e\x73\x89\xeb\x62\x2c\xa3\x1e\xba\xb4\x38\x9c\x95\x69\x2c\x0f\xf4\x80\xc3\x59\x08\x66\x90\xd9\xe2\x83\xb5\x53\xe5\xe1\xb0\x0c\x53\x09\xbb\x1c\x1f\x30\x14\x22\xc2\x21\xc7\x94\x58\x62\xd6\x5d\x80\x7e\x81\x21\x9c\x8b\x0b\xc0\x12\x29\x9a\xe2\x8a\x6b\x2b\x24\x06\x21\xe2\x80\xcd\x46\x4c\xdc\x92\x21\xf7\xb2\x44\xee\x2f\xb8\x82\xe1\x9c\xe1\x80\x7f\x58\x51\xec\xfc\xe3\xec\x9f\xff\x16\xb2\x5e\x88\xc0\x66\xf3\xf4\x04\x86\xdf\xd1\xaf\x08\x85\x7c\xf8\xbf\xef\x5f\x87\x77\x90\x2f\x93\xcb\x89\x72\x6b\x97\x82\x9f\xd1\x0a\xcf\x51\x9a\x85\x65\x53\x5e\xcb\xbd\x10\x91\x90\xb2\xb0\xae\x97\x8a\x78\x1d\x67\x3f\x26\x7a\x2e\xa5\x1a\x9d\xef\xf7\x29\x42\x1b\xce\x73\xc8\xa3\xfa\xbe\x6f\xa5\x1b\xb9\x1e\x6b\xd1\x7a\x2e\xf5\xef\xef\x78\x62\xe3\xd0\x89\xd3\x65\xf8\x25\xbc\x8f\x82\x80\x32\x8e\x9c\x4f\x6b\xf8\x28\xa8\xd6\x48\xd4\xe0\x1a\x3e\xd6\x8d\x59\x2a\xdb\x24\x62\x42\x87\x2e\x5e\x9f\x62\xdd\x95\xa2\x95\xe8\xa8\x17\xd3\x5b\xea\x39\x98\x2c\x6e\x22\x92\xf8\x66\x2a\xbc\x4b\xea\x39\x75\xc3\x9b\xca\x36\x09\xaf\xd0\xa1\x0b\xef\x6d\xac\xfb\x60\xe1\xbd\x81\xe4\x3e\x40\xe8\x45\x05\x7b\xc7\xd5\x85\xa4\x6e\x58\xa5\x68\x93\xa8\xba\x90\xe8\x82\x7a\x23\x34\x9b\x8c\xa9\xbe\xef\x6f\xef\x2a\xdd\x99\xc3\xd9\xe0\xf9\xfe\x9c\x91\xca\xf5\x69\x55\x8b\xb8\x02\x5c\xe8\x20\x90\x04\x15\x60\xf2\x82\xc6\x58\xab\x4b\x99\x2f\xd5\x8a\x8f\x16\x90\xa1\xb2\x3e\x5a\xc0\x47\x7c\x49\x9d\x4b\x2b\xa0\x21\xb7\x00\x76\x2e\xad\x15\x64\x18\xce\x3c\x14\x5a\xc0\x81\x1c\x0e\x38\x5d\x2c\x84\xe8\x0a\x7a\xd8\x81\x9c\xb2\x3d\x20\x63\x58\xf1\xfd\x00\x29\xe6\x7b\x08\xc4\xff\x1d\x84\x9c\xe1\x00\x39\xc0\xe1\x03\x86\xc2\x80\x92\x50\xf8\x42\xe8\x9a\xc1\xc0\x02\x21\x7f\x14\x70\x6b\xec\xf0\xe5\x87\xf1\xd9\xd9\xdb\x3d\xf1\x12\xcc\x25\x82\xce\xfe\xe3\x13\x19\x56\x4d\x40\x02\xed\x72\xeb\x87\x8c\x58\x9a\x60\x7c\xd9\x58\xa1\x17\xd5\xd6\x36\x1d\x55\x71\x48\xe8\xaf\x14\xb2\x29\x9f\x51\xe7\x71\xff\xf1\xcf\x7e\x95\xa9\xe4\x98\x64\x30\x46\xa9\x6f\x73\xe4\x07\x88\x41\x1e\x31\x54\x55\x4d\xcd\xf9\x76\x76\xd3\xf3\x9d\x52\x1f\x28\x16\x6c\x67\xaa\x62\xe6\x81\x72\xa7\x86\x88\x31\xca\xaa\xba\x26\x2d\xdd\xd6\x1c\x7a\xe0\x03\x07\x92\x05\x62\x31\x13\x96\xa3\xd4\xb6\x5d\x72\x72\xad\x78\x56\x16\x92\x98\x82\xc3\x20\xb7\x5d\x8f\x42\xae\xf1\x69\x25\x8a\x07\xbc\x73\xdf\x81\xc1\x18\xbc\xbf\xa8\x63\x1d\xd8\x4e\x0c\xa1\x1c\x0c\x15\xed\x76\x02\x5e\x7f\x7a\x40\xa6\x24\x34\x9a\x13\xf3\xcf\xc0\x66\xf3\xe7\xf7\xf5\x2e\xc2\x7f\x7e\xdf\xec\xd7\xe7\x9f\x01\xad\x29\x5d\x3f\x39\xaa\xe3\x55\x23\xaf\xfa\x38\xb2\xec\x5c\x8f\x52\xd6\x2d\x99\xdc\x08\x13\x0c\xb3\x49\xc1\xad\x76\xe8\xa4\x1c\xe6\x84\xf9\xa4\xe8\x54\x4f\x28\x65\xa0\x3d\xa1\xa8\x52\xbb\xca\xa3\x2b\xc4\x96\x08\xf2\xae\xd8\x24\xc5\x37\x46\x25\xa9\xc2\x36\x79\xa4\x80\xd1\x09\x89\xe8\xdd\x4e\x6a\x28\x5e\x7b\x26\x71\xa6\x72\x35\x99\x59\x96\xca\x5b\xae\xbb\xbb\x17\x27\xd2\x2b\xce\xf7\x65\xe4\x63\x07\xf3\x17\x7f\xe7\x55\x30\xb3\x71\xa6\xdf\x4a\x64\x03\x39\x9e\x3a\xd1\x4e\x76\x17\xb4\x77\x95\xd7\x3b\x4b\xd2\x74\x7e\xfb\xda\x32\x33\x0d\x52\xe9\x2f\x90\xeb\xe4\x78\x40\xd7\xa8\x72\x56\x34\x4f\xf0\xbb\x18\x36\xcc\xfc\x6e\xba\x41\x92\xc7\x5e\xb4\x93\xe1\x59\xd5\x5d\xd2\x76\x62\x49\xcf\xd6\x1a\xa9\x98\xe8\x10\xe4\x98\x2c\xec\x15\xf4\x56\x1d\x2c\x75\x6e\x13\x78\x10\xc3\x9b\xe0\x6d\xd5\x9d\x96\xc8\x5b\x0b\xd1\x65\x8a\x67\x2d\xea\x53\x5d\x23\x25\xc2\x34\xa7\xd4\xeb\x30\xd5\xaf\x13\x78\x63\xa9\x9e\x71\xa7\x9d\x54\xd7\x43\x74\x99\xea\x59\x8b\xfa\x54\xd7\x48\xa9\x8c\x40\x23\x1e\x44\x1d\xac\x39\x53\x5a\x4f\xf0\x0d\xf2\x7a\xa2\xb0\x5d\x62\xcf\x61\x1c\x03\xb3\x4b\x93\xfa\x7c\xd7\x48\x89\x38\xad\x31\x71\xe8\x3a\xb4\x69\x80\x5e\xdc\x0c\x50\x30\xb5\x71\xb6\xff\x3f\x41\x07\x31\xba\x2b\xf7\x24\x18\x48\x7a\xd5\xab\x76\x52\x5e\x8b\xd0\x65\xc2\x67\x0c\xea\xd3\x3d\x2f\xa1\x59\xc8\xa6\xbb\x7a\xea\x94\x0d\xdc\x63\x6b\x52\xfe\xa7\x79\xb9\xa8\x7b\x85\x1a\x54\x87\x30\xbe\x9d\xaa\xc8\x68\xee\xb2\x1a\x62\x43\xfa\x2a\xd0\x48\xa5\xd1\xe9\xf6\x41\x5d\xbc\xb5\xcf\xec\x73\xba\xbc\x53\xed\x65\xf8\xe9\x3f\xa5\x2b\xba\x91\xd6\x4a\xff\x34\xae\x7f\x1a\x97\x93\xd0\xb4\xce\x74\xc7\x66\xad\x15\x56\xb2\x03\xd5\x76\xf7\xdc\x82\x9a\xff\x31\xb0\xc6\x4a\x2c\x30\xf9\x85\x33\xef\x54\x4b\xeb\xac\x32\x94\x4e\x57\x5a\x79\xa3\xfa\xb6\xab\x91\x52\x23\xd5\x69\xe7\x4d\x93\xdf\x6c\xf3\xd5\xb8\xd6\x6e\x09\x9c\x7e\x0b\xd6\x79\xd2\x77\xe1\x2c\x68\xdf\x85\x55\xa9\x4c\xa1\x61\xbf\x4b\xf2\xc0\xbe\x51\xd6\xc0\x7e\xdb\x74\xa1\x22\x74\xb7\x67\x40\xb5\x26\xad\xf5\xd7\x96\xac\x25\x5f\x19\xe5\xdb\x28\x75\x72\xde\x85\xc4\x0e\x03\x84\x1c\x9b\x44\xfe\x0c\xb1\xb0\x83\xad\x60\x90\x80\xd8\x04\x20\x4d\x30\xb1\x1b\x2c\xef\x56\x4b\x1b\xc2\x4a\x61\x4e\xaa\x5f\xca\x74\x2a\x7a\xb3\x6b\x3f\xb5\x55\xc7\x53\x3c\x4e\x26\x38\x99\xd8\xda\x0d\x4b\xc9\xfc\xad\xa9\xd2\xc4\x71\x63\x13\xcf\x8d\x98\xd8\xf7\x54\x45\x2a\x53\x88\x1d\xf2\x8a\x49\x3e\x69\x99\x47\x5e\x07\x7f\x18\xe3\x8d\x5b\xbc\x58\x1e\x33\x69\x7c\x43\x0e\x8e\xfc\xf6\x2c\x9c\x34\xb6\xf0\x2b\x5d\xb7\x67\xde\x79\x63\xf3\x3e\x45\x9c\xf6\x94\x6b\x00\xa7\x66\xe5\x37\x67\xd9\xe4\x24\x0a\xc0\x1f\x03\x13\xab\x96\xe4\xad\x6f\x5b\x68\x6b\x87\x69\x75\x00\x9d\xad\x59\x54\x63\x4e\x66\xc9\x22\xa6\x29\x7c\x0c\x39\xf2\x6d\x9f\x3a\x1d\x64\xdc\x7d\x0c\x0e\x04\xb8\x81\x8c\x53\x5c\x69\x27\xe3\x74\x00\xa7\xd8\xdd\x55\x3f\x8c\xf5\xf7\xed\xbb\x3f\x26\xda\x53\xd1\xc2\xe6\x1d\xfe\x9a\x52\xaf\x4d\x0b\x9b\x77\xf8\x1f\xf1\xa9\x59\xed\x59\xd8\xbc\xc9\x7f\x46\xcb\xcc\x3b\x30\xed\xd8\xd9\xe8\x7d\xc7\xfe\xcb\x88\x69\x1c\x49\xaf\x1c\xb2\x05\xe2\xdd\x3e\x96\xf9\x6f\x6c\x83\xe1\xa7\x32\x45\xc7\xda\x69\x1f\xcf\xe0\x9c\x54\x17\xc9\xbe\xbc\xac\xf1\xaa\x7f\x7b\xb9\x0c\xb4\x67\x15\x55\x4a\x5f\x7c\xb6\x0f\x1f\xb0\x1f\xf9\xc7\xc0\x2e\x40\xda\xd2\x0a\xcb\xa4\x8e\x1e\x8a\x6d\x0a\x78\x27\xc5\x3a\xcf\x39\xd4\x3f\x10\xce\x82\xf6\x34\xa3\x4a\x95\x55\x1f\x26\xc7\x43\x33\x89\x2d\x2d\xd1\x4c\xa2\xfc\x70\x34\x93\xc3\x3b\x7d\x9a\x91\x0e\xf5\x34\x93\x05\xed\x69\x46\x95\xd2\x9e\x82\x64\x7b\xd8\xc7\x9d\x1d\xca\xa2\x52\x4c\x6c\x48\x1b\x07\x3d\x25\x2e\x1e\xe8\xb8\xa7\x1c\xd8\x69\x51\x4b\x99\x37\x3d\xaf\x64\x41\x7b\x5e\x51\xa5\xe2\x43\x26\xe2\xc3\xe6\x3d\x3a\xff\x79\x78\x2a\xb9\x13\xd8\x40\x60\x9b\x38\x12\x64\xeb\x48\x4b\xe7\x82\x14\xf5\x77\x7a\x38\xc8\xce\x9c\x7e\xbf\xb7\x46\x0a\xbb\x00\x12\x47\x8d\x93\x1d\x60\x62\x8f\x0b\x57\x26\x85\x2b\xe7\x85\x2b\x95\x7f\xd1\x64\xaa\x36\xee\xbe\xfc\x07\xcc\x1b\x3e\xc3\x6a\xf8\x58\xa7\x10\xc1\x66\xcc\x3f\x0d\x03\x48\xf6\x28\xb2\x1c\xd6\x74\x24\xe4\x6a\xfb\x51\xb7\xe0\xa4\x78\xd1\xae\xa6\x8d\x55\x26\xb5\xc1\x79\x99\x1c\x70\x5e\x26\x47\x3a\x2f\x93\x23\x9c\x97\xf3\x03\xce\xcb\xf9\x91\xce\xcb\xf9\x11\xce\xcb\xc5\x01\xe7\xe5\xe2\x48\xe7\xe5\xc2\xd4\xbc\x54\x95\xac\xde\xc9\x0e\xb5\x3f\xaa\x9a\xc4\x74\x54\xe1\x00\xf9\xe9\x28\xfe\x8b\x01\x2f\x0f\x9e\x8e\xc4\x4a\xe8\xf9\x71\x9a\x3f\xb5\xb4\xe7\xed\x92\x5b\x2f\xff\x39\x27\xe5\x9f\xf2\xa3\xfc\xdf\x2e\x6e\x7f\x07\x00\x00\xff\xff\x02\x9f\x8a\xe0\xac\x6b\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
