// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
package modbus

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdf\x8e\xd3\xb8\x17\xbe\xe7\x29\x8e\x2c\x21\x7e\xbf\x8b\xb4\xd3\x61\x85\x56\x6c\x5b\xb4\x02\x21\x2e\x40\x42\xc3\x2e\xb7\x95\x5b\x3b\x8d\x77\x5d\x3b\xd8\x4e\x66\x46\x55\xdf\x89\x67\xe0\xc9\x56\x76\x92\x36\x6d\x93\x99\xe6\x5f\xc3\xa0\xde\x40\x26\xf1\x39\xdf\xf9\x8e\x3f\x7f\x69\xfe\xad\xd7\x40\xa8\xcf\x04\x05\xb4\x90\xc2\x50\x61\x10\x6c\x36\xcf\xc6\x84\xc5\xb0\xe0\x58\xeb\x09\x52\xf2\x16\x4d\x9f\x01\x00\xe4\xf7\x2e\x24\xf7\x56\xc4\x1b\x5d\x83\xdd\xd2\xab\x6c\xeb\x4e\x7b\xa3\xeb\x74\xfc\x61\xcc\xdd\x2c\xc4\x82\xf2\xdc\xd1\xe3\x11\x86\x19\x4e\x0f\x46\xb8\x51\xc1\xf5\x74\xbd\x06\x36\xfa\x5d\x00\xfa\xf4\xf6\x15\x82\x01\x6c\x36\xe3\x61\x70\x5d\x30\x36\xe2\x59\x42\x81\x63\x10\x38\x9e\x63\xe5\x29\xb6\x0c\x0c\xb8\x0a\x66\x46\x4a\x3e\x97\x77\x05\x38\x2e\x9e\xb3\xe9\x18\xe7\x98\x72\x1c\x6a\xea\x71\x26\xfe\x45\xd3\x31\xcb\x0e\xf8\x18\x7c\xec\x2d\x02\x1a\x2b\x29\xbc\x28\x44\xd3\xf1\x90\x4d\xc7\x43\x3c\x1d\x0f\x39\x2b\x28\x6b\x18\xf1\x82\xbd\xf9\xa6\x72\x8a\x95\xcf\xee\x6c\x26\xc2\xe2\x83\x3e\x15\xec\x7a\xb4\xb9\xc7\xa3\xb2\x69\x2e\xa1\x6e\xc7\x2a\xc9\xe9\x04\x19\x3c\x2f\xcb\x58\xde\x68\xcf\xe0\xb9\x86\x39\x56\x33\xbb\x81\x76\xa9\x38\xd3\x65\x98\xb9\xb6\xa7\xe3\x43\x45\x35\x15\x06\x1b\x26\x05\xb2\xb3\xee\x03\xfd\x06\x03\xbc\xb0\x3b\x00\x59\x89\x66\xb8\x76\x5f\x4c\xed\x20\x2a\x08\x6c\x36\x76\xe2\x02\x45\xfd\x49\x49\xdc\x3f\x38\xc6\x7a\xa1\x58\x68\x5e\xc7\x92\x91\xff\x5d\xfd\xff\x0f\x1b\xcb\x35\x85\xcd\x66\xbd\x86\xc1\x0d\xfd\x16\x51\x6d\x06\x7f\xdf\x7c\x1c\x7c\xc6\x26\x48\x76\x27\xc9\xd1\x4e\x82\xef\x68\xcc\x16\x34\x53\x61\xd9\x94\xd7\xa2\xa7\xa9\xd0\x52\xe9\xba\x2c\x73\xe1\x75\xc8\xbe\x49\xf2\x4c\xd2\x34\x45\xdc\xbf\x64\x08\x5d\x90\x37\xd8\x44\xf5\xb9\x6f\xa3\x1b\x51\x77\x59\x0a\x99\xa7\xf9\x4f\x23\x5e\xbc\xe0\xb7\x47\x73\xcb\xd2\xe0\xb9\xf7\xf0\xc2\xdc\x8b\x3a\x58\xa0\xf9\x2c\x76\x0f\xf8\x98\x50\x48\xfa\x06\x4c\x3c\x92\xd1\x65\xf5\xa5\x5a\xa5\x69\xed\x26\x82\xb4\x15\xe8\x0d\x82\x15\x35\x81\x24\x13\x14\x4a\x6d\x10\x30\x32\x41\x31\x56\x0c\xcf\x39\xd5\x08\x08\x36\xd8\x33\x72\xb9\xb4\xa1\x31\xe6\x8c\x60\x23\xd5\x09\x90\x0e\xd6\x1a\x03\xcd\x95\xcf\x29\xb8\x7f\x3d\x6d\x14\x0b\x29\x01\x62\x3c\x45\x75\x28\x85\xb6\x5c\x84\xbc\x55\x38\x44\xa0\xcd\xbd\x85\xbb\x65\xc4\x04\xaf\x47\x57\x57\xcf\x4f\xc4\x4b\x30\x03\x8a\xc9\xe9\xe3\x93\x18\x55\x2d\x20\x05\xda\x09\xe7\x6b\xda\xb1\x4c\x3a\x26\x68\x9c\x90\x47\xb5\xb3\x8d\x87\x55\x08\xd9\xfc\x95\x5a\x36\x36\x73\x49\xee\x4f\x1f\xff\xa0\x87\x55\x22\x96\x64\x1a\x28\x29\x57\x33\x43\x57\x21\x55\xd8\x44\x8a\x56\x4d\x53\x73\xbe\xc9\x6e\x7a\x6e\xa4\x5c\x41\xae\x82\xed\x4c\x55\x54\x1e\x94\x93\x1a\x50\xa5\xa4\xaa\x4a\x2d\xad\x74\xbb\xe6\xe8\x9d\xf1\x08\x16\x4b\xaa\x90\xfd\xfd\xa6\x43\x2c\x26\xe8\xa5\xb3\xbc\x72\xc4\xda\x3c\x52\xff\xad\xd5\xdb\xca\x41\x29\xa6\xf5\x33\x6c\x66\x3e\x97\xd8\x14\x70\x8a\xed\x42\x82\x17\xfe\x0b\xf0\x46\xf0\xea\xb7\x3a\xd5\xc1\x76\x92\x84\x34\x30\xc8\x65\x9f\x25\xe0\xf5\xa7\x0a\xf6\x96\x47\x41\xe6\xa4\xfc\x2b\xd8\x6c\x7e\x7c\x7f\xbb\xeb\xf0\x8f\xef\xef\xb7\xe7\xaf\xba\xa0\x35\xa3\xeb\x8b\xa3\x3a\x5e\x35\x23\xab\x8f\x93\x2e\x41\x9f\x4b\xa9\xfa\x35\x96\xf7\xb6\x84\x96\x9d\xe5\x88\x56\xf7\xd6\x52\x0e\xf9\x84\xbd\xe5\x98\xd4\xc5\x5c\xca\x40\x2f\xe6\x92\x8f\xda\xad\x42\x19\x53\x15\x50\x6c\xfa\x72\x96\x0c\xbf\x35\x5b\xc9\x12\x9e\xcb\x53\x8e\xf0\x7a\x31\x94\xe2\x16\x24\xeb\xc9\x5d\x7f\x26\x3d\x97\x22\xe9\xf3\xde\xa5\x69\x7a\xc8\xf7\x77\xc7\x9c\xa8\x7e\x61\xed\x07\xd1\x8a\x11\x66\xee\xcf\xaf\xfa\x0f\x29\x72\x0b\x7a\xcf\x48\x74\xaf\xf4\x23\xa4\xbe\x34\xbe\xab\x24\x93\xf6\xf3\x5f\x4d\xa5\x59\x93\x4a\xef\x34\xd5\xd1\x7b\x28\x6f\x69\x65\x85\x34\x17\xfb\x67\x07\xab\xf7\x6e\x62\x35\x10\xbc\x63\xd1\xbd\xda\xf7\x61\xfa\xb4\xf3\xa4\x92\x8b\x8b\x17\x44\x39\x03\xa4\xd8\x30\xb1\x9c\xc5\x98\xc7\x3d\x5c\x1a\x7d\x48\xe0\xc1\xc1\xb7\xe1\xe7\x79\x3a\x67\x30\xf5\x42\xb8\x3e\xe5\xbe\x5f\xd1\x45\xf6\x05\x51\xb6\x4d\x0b\x29\x79\x8f\xb2\x7f\x9b\xc0\xb7\x26\xfb\x3d\x3a\xdd\xcb\xbe\x18\xae\x4f\xd9\xef\x57\x74\x91\x7d\x41\x54\xde\x1d\x64\x64\xc2\xa8\x87\xeb\xd5\xcc\xee\x13\xfc\x16\xfd\x3e\x49\x78\x3e\xc3\x3f\xc0\xfb\x19\x1c\x3f\x2d\xe9\xa2\xfd\x82\x28\xd7\x27\xc9\x89\xed\x93\x1f\x89\xe4\x7a\xe0\xfc\xea\x4f\x2a\x80\xac\x82\x36\xf4\x7f\x40\xea\x0c\x2b\xa0\x0c\xb1\xd7\x35\x70\x58\xd4\x65\x15\x1c\x46\xd4\x68\x72\x73\xc5\x27\x6f\xdc\x80\xb9\x0f\xdb\xf8\x95\x43\x5c\xb6\x99\xcd\xd6\xbd\xce\x8b\xc0\x7a\xbb\x65\x93\x2f\x26\x93\xf6\x4f\x2f\x52\x3b\x65\xfa\x5e\x1b\xba\x9a\xad\x24\xe9\x41\x7d\x5f\x1c\x38\x58\xf0\x16\xd4\x97\xa3\xd2\xbd\xfa\x8a\xc0\x9e\xd4\x53\xb6\xf4\xd6\x5b\x9e\xc7\xee\xc9\x54\xed\xa4\xdb\x1f\x91\xc9\x7c\xd6\x7e\x90\x95\xbb\x39\x78\x5c\xe1\xa8\x71\x85\xf6\xf2\xae\xcb\x0a\xaf\x1b\x57\xf8\xd5\xbd\x35\xdc\x5d\x85\x2f\x1b\x57\xf8\x8e\x06\x7b\xb7\xf9\xbb\xa9\xb3\xd1\xe3\x5d\x57\xe7\x9f\x91\x91\x0d\x2b\xbc\x3c\x56\xcd\x45\xb9\x47\x70\x58\xcc\x74\x48\x69\xf5\x3a\x9b\x3f\x51\xc5\x02\x1c\x74\x1b\x0f\x53\x33\x1a\x67\x78\x8e\x7a\x04\xf5\x14\xcf\x16\x3b\x16\xad\x9d\x2b\xd8\x32\x68\xcf\x3f\x0e\xeb\x6b\x7e\xa6\xf8\x44\x09\x8b\x56\xdd\x55\xd8\xfc\x4c\xf1\x51\xde\x76\x57\x5e\xf3\xd3\xc4\xc5\x7e\x5b\xc4\x49\x7d\xcb\x60\xb5\xa4\xa6\xdf\x77\xe6\xfe\x72\x35\xb4\xfc\xd2\xdc\x31\xb1\xee\x9d\xf9\x01\xcc\x27\x65\xd1\xfb\xaf\xcd\x15\xb0\xba\xbc\x37\x57\x06\x7a\x71\x98\x9a\x11\xe3\x61\x85\xaf\x12\xc6\x43\xf7\x19\xca\x09\x1f\xce\x0c\xed\x94\x3f\xf2\xc9\xce\xf1\x87\x7b\x27\x1e\x2e\x39\xf4\xf8\xc7\x81\xb9\x3f\xd3\xcd\xf4\xbf\x5d\xdf\xfe\x0b\x00\x00\xff\xff\x8a\xf9\x5a\xf0\xfa\x39\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
