// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
package modbus

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x6e\xdb\xb8\x12\xbe\xef\x53\x10\x02\x8a\x9e\x73\x61\x3b\x49\x0f\x8a\x83\xae\x93\xa2\x48\x11\x64\x81\x16\x28\x9a\xdd\xee\xa5\x40\x5b\x94\xc5\x5d\x8a\x54\x29\x4a\x4e\x10\xf8\x9d\xfa\x0c\x7d\xb2\x05\x45\xca\xa6\x64\x2a\xb6\xf5\x63\xc5\xad\x72\xd1\x3a\x12\x67\xbe\x99\xe1\xc7\x8f\xa2\x44\x2b\x8f\x8f\xc0\x43\x3e\xa6\x08\x38\x73\x46\x05\xa2\xc2\x01\xab\xd5\x8b\xa9\x87\x53\x30\x27\x30\x8e\x2f\x1d\xce\x96\xce\xd5\x0b\x00\x00\x30\x8f\xce\x19\x19\x85\xde\xe8\xfc\x02\xc8\x4f\x71\x98\x7f\xba\x8f\x47\xe7\x17\xba\x7d\xd9\xe6\xde\x8d\x20\x45\xc4\x38\xbb\xdd\x42\x60\x41\x50\xa9\x45\xd6\x2a\xb8\xb8\x7a\x7c\x04\xf8\xfc\xff\x14\x38\x9f\xae\xdf\x38\x60\x0c\x56\xab\xe9\x24\xb8\xb0\xb4\x4d\x48\xee\x90\xc2\x14\x50\x98\xce\x20\x1f\x71\xbc\x08\x04\xc8\x22\x70\x05\x63\x64\xc6\xee\x2d\x38\x99\x3d\xc1\x57\x53\x68\x64\x4a\x60\x14\xa3\x11\xc1\xf4\x1f\xe7\x6a\x8a\xf3\x13\x3e\x04\x3e\x1c\xcd\x03\x94\x72\x46\x47\x49\xe4\x5c\x4d\x27\xf8\x6a\x3a\x81\x57\xd3\x09\xc1\x96\xb0\x26\x09\xb1\x1c\x35\x8b\x4a\x10\xe4\x3e\xbe\x97\x9e\x3c\x9c\x96\xea\x64\x39\xb4\xb3\xb8\xdb\xad\xf2\x6e\xae\x48\x5d\xb6\xe5\x8c\xa0\x4b\x47\xc0\x59\x95\xc7\xea\x42\x8f\x04\x9c\xc5\x60\x06\xb9\x2b\x3f\x38\x1b\x57\x04\xc7\x55\x98\x46\xd9\x75\xfb\x88\xa3\x18\x51\x01\x05\x66\xd4\x91\xbd\xee\x03\xf4\x0d\x8c\xe1\x5c\x1e\x00\x8e\xa4\x68\x8e\x2b\x8f\xa5\x48\x36\x42\xd4\x03\xab\x95\xec\xb8\x80\x23\xff\xb2\xc2\xee\x6f\x98\xc2\x78\xce\x71\x24\xde\xa6\x0c\x7b\xff\x39\xfb\xef\x6f\xd2\x96\xc4\x08\xac\x56\x8f\x8f\x60\xfc\x05\x7d\x4b\x50\x2c\xc6\x7f\x7e\xf9\x38\xfe\x0c\x45\xa0\x0e\x2b\xe7\xce\x86\x82\x1f\x50\x8a\xe7\x28\x67\x61\x55\x97\xd7\x4a\x2f\x46\x34\x66\x3c\xae\x9b\xa5\x61\x5e\x27\xd9\x77\xca\xcf\xa5\x76\x63\xcb\xfd\x2e\x47\xe8\x22\x79\x01\x45\x52\x3f\xf7\xb5\x75\xa3\xd4\x33\x2f\xd6\xcc\xb5\xff\xfd\x13\x57\x31\x8e\xbd\x8c\x2e\xe3\xdf\xe3\xbb\x24\x8a\x18\x17\xc8\x7b\xbf\x84\x0f\x52\x6a\x5b\xa9\x1a\x5c\xc2\x87\xba\x35\xcb\x6d\x9b\x54\x4c\xfa\xb0\xd5\xeb\x7d\xe6\xfb\xa0\x6a\x29\x1f\xf5\x6a\x7a\xcb\x88\x87\xe9\xe2\x26\xa1\x2a\xb7\xb6\xca\x1b\x30\xe2\xd5\x2d\x6f\x6e\xdb\xa4\xbc\xd2\x87\xad\xbc\xb7\x99\xef\xa3\x95\xf7\x06\xd2\xbb\x08\xa1\x9d\x0e\xf6\xae\xab\x0f\x69\xdd\xb2\x6a\xd3\x26\x55\xf5\x21\xb5\x15\xf5\x46\x7a\x6e\xb3\xa6\xf6\x79\x7f\x7d\xd6\x98\x9d\x05\x9c\x8d\x9e\x9e\x9f\x0b\x56\xa5\x79\xda\xf4\x22\x8f\x00\x1f\x7a\x08\xa8\xa2\x02\x4c\x77\x78\xcc\xbc\xfa\x8c\x87\xda\xad\xfc\xe8\x00\x5d\x2a\xe7\x9d\x03\x42\x24\x02\xe6\x5d\x3a\x11\x8b\x85\x03\xb0\x77\xe9\xa4\x90\x63\x38\x23\x28\x76\x80\x07\x05\x1c\x09\xb6\x58\x48\xd3\x14\x12\xec\x41\xc1\xf8\x1e\x90\x19\xac\xbc\x3e\x40\x46\xf8\x04\x81\xec\xdf\x51\x2c\x38\x8e\x90\x07\x3c\x31\xe2\x28\x8e\x18\x8d\x65\x2e\x94\x2d\x39\x8c\x1c\x10\x8b\x07\x09\xb7\xc4\x9e\x08\xde\x9e\x9f\x9d\xbd\xdc\x13\x4f\x61\x06\x08\x7a\xfb\xb7\x57\x36\xfc\x30\x03\x0d\xb4\xe1\xd6\x57\x5d\xb1\x9c\x60\x22\x68\xec\x90\x24\xb5\xbd\x4d\x27\x87\x24\x24\xfd\x1f\x54\xb2\xa9\x98\x31\xef\x61\xff\xf6\x4f\x5e\xca\x1c\x94\x98\x56\x30\xce\x58\xe8\x0a\x14\x46\x88\x43\x91\x70\x74\xa8\x9b\x9a\xfd\xed\x6d\xba\xe7\x0b\x63\x21\x30\x22\x58\xf7\xd4\x81\xcc\x03\xd5\x49\x8d\x11\xe7\x8c\x1f\x9a\x9a\x8e\x74\x3d\xe6\xd0\xbd\x18\x79\x90\x2e\x10\x77\xe4\x32\x2e\x8e\x20\xbd\x74\x5e\x67\xaa\x58\x8d\x58\x3b\x0f\xad\xcf\xb5\x6a\x7b\xb0\x91\xc6\x94\x7a\x06\x85\xeb\x13\x06\x85\x25\xa7\x54\x0e\x24\xf0\xca\x7f\x05\x46\xe7\xe0\xcd\xff\xea\x44\x07\xd6\x9d\x44\x99\x00\x63\xc3\xbb\xab\xc0\xeb\x77\x15\x28\x0c\x0f\x8b\x67\x15\xfe\x19\x58\xad\x7e\x7c\xbf\xde\x54\xf8\xc7\xf7\x9b\xfd\xe6\xfc\x27\x40\x6b\x5a\xd7\x27\xc7\xe1\x78\x87\x09\x59\x7d\x1c\x3d\x04\x7d\xc2\x18\xef\x57\x58\x6e\x64\x08\x2d\x2b\xcb\x56\x5a\xdd\x4b\x4b\x35\xe4\x09\x6b\xcb\x76\x52\x83\xb8\x54\x81\x0e\xe2\x62\x5a\x6d\x46\x21\x4b\x11\x0f\x10\x14\x7d\x29\x4b\x8e\xdf\x9a\xac\xe4\x0e\x8f\xa5\x29\x5b\x78\xbd\x08\x8a\xbd\x04\x6a\x3c\x65\xeb\x53\x55\x73\xa6\x57\x9c\x85\xa5\xab\x3e\xe5\xfb\x9b\x73\x19\xa9\x7e\x62\xee\x07\x49\x88\x3d\x2c\x76\xde\x17\xdb\x0a\xb3\x31\xeb\x6f\x35\x72\x0b\x7c\xcf\x93\xe8\x9e\xe9\x5b\x48\x7d\x71\x7c\x13\x49\x4e\xed\x97\x3f\x1b\x4b\xf3\x22\x55\xde\x70\xae\xc3\xf7\x88\x2d\xd1\xc1\x0c\x69\x4e\xf6\xcf\x19\x6c\x5c\xb8\x97\xdd\x80\xf0\x59\x16\xdd\xb3\xbd\x08\xd3\xa7\x9c\xab\x48\x06\x15\xb7\x58\x65\x02\x88\xa0\xc0\x74\xe1\xa6\x90\xa4\x3d\x2c\x8d\x6e\x15\x3c\xc8\xe0\xdb\xd0\x73\x33\x9d\x23\x88\xba\x15\xae\x4f\xba\x17\x23\x1a\x68\x6f\xb1\x92\x65\x9a\x33\x46\x7a\xa4\xfd\xb5\x82\x6f\x8d\xf6\x85\x74\xba\xa7\xbd\x1d\xae\x4f\xda\x17\x23\x1a\x68\x6f\xb1\x32\xd5\x81\x25\x22\x4a\x7a\x58\xaf\xe6\x72\xaf\xf0\x5b\xd4\x7b\xe5\xf0\x78\x82\x5f\xc2\x7b\x0e\x8a\xaf\x43\x1a\xb8\x6f\xb1\x92\x75\x5a\x62\xea\xb1\x65\xec\xb2\x08\xed\xdc\x6c\xb0\x15\x6a\x63\xe6\xff\xa5\xd0\x41\x86\xee\xeb\x3d\x0f\x2d\x0c\x00\x33\xab\xee\xe9\x6f\x45\xeb\x93\xfc\x85\x80\x06\xea\x97\x2d\x2c\x8b\xe0\x7c\x07\x51\x9d\x21\x04\xf7\xd8\x06\x55\xfe\x69\x3e\x74\xcc\x7d\x49\x0d\x46\x8a\x0c\xbe\xfb\x11\x52\x40\xe9\x73\x64\x64\x81\x0c\x23\xc2\x62\x95\x57\xa7\xdf\x87\x82\xd9\x96\xc2\x76\x9f\x09\x96\x93\x3a\x0e\xdb\x4f\xff\x89\xe0\x76\x1a\xf9\xb8\x19\x9e\xfc\x0d\x4f\xfe\x4a\x16\x96\x29\x35\xdf\x35\x5a\x6b\x45\xa6\x76\xc1\xba\xfe\x9e\xdb\x60\xcb\x3f\x2d\xac\xc9\x54\x04\x6d\x5e\x94\x96\x93\x3a\xc2\xba\xac\x0a\xb1\xd7\x95\x59\x39\xa8\x61\x3a\xb6\x58\x99\x95\x12\x38\x44\x6e\x80\xfb\x1b\x04\x32\x00\x10\xe0\x16\xc7\x80\x4e\xe9\x78\x43\xa0\x0c\xd8\xdf\x73\xc6\x52\x40\x39\xfb\x7f\x15\x1e\x13\xb6\xec\x99\xc8\x84\x2d\xdb\x66\x32\x61\xcb\x23\x53\xd9\x44\x7c\x1e\x5c\x96\x11\xfd\x4a\x64\xee\x73\x99\xb4\xe6\x73\xab\x2b\x25\x4b\x6a\x47\x64\xf5\xc9\xaf\x97\x6c\x99\x0c\x4b\xa6\x22\xe8\xb0\x64\x5a\x5b\x58\x96\x4c\xfa\x1b\x61\x75\x64\xc9\x87\xd4\x8d\x23\x84\x3c\x37\x64\x5e\x1f\xbb\xb9\x21\x05\x19\x3e\x90\xf8\x6d\xec\xb9\x2c\x24\x74\x84\x3d\x97\x76\xbc\x93\x92\x20\x4d\xa7\x52\x2a\x9b\xe1\x5c\xdb\x6f\xd6\xc5\xe7\xaa\x83\x55\xdf\xd6\x16\x00\x83\xf6\xeb\x38\x75\x88\xe7\x8d\x43\x7c\xdd\x4a\x88\x83\x46\x19\x56\x85\xb1\xd8\xa3\xae\xb4\x29\x29\x47\x54\x93\x9f\x43\x48\x5a\xd3\x90\x5b\xbc\x08\x9e\xb3\x80\x7c\x42\x1e\x4e\xc2\xee\x22\xbc\x68\x1c\xe1\xc7\x7c\xf5\xda\x45\x78\xaf\x1b\x87\xf7\x3e\x11\x6c\x90\xdf\x16\x70\x6a\x8e\xfc\xe6\x8a\xab\x5e\x0b\x03\xc4\x43\xd4\xc6\x65\x9c\x7a\x05\x83\x2b\xbd\x75\xaf\xba\x36\xb0\xde\x6e\x8e\x98\xc1\x9c\xcc\x7d\x11\xd9\x65\xf1\x43\x2c\x50\xd8\xd3\x3a\xe2\x2e\x03\x6f\x6b\x11\x61\xa4\xd2\x3d\xfb\x6c\x60\xa7\x38\xeb\x9b\x79\xb4\x36\xef\xaf\xbf\x88\xd7\xc6\xb4\xb5\x1d\x61\xf3\x99\xff\x9a\x31\xd2\x65\x84\xcd\x67\xfe\xaf\xd9\xab\xed\xba\x8b\xb0\xf9\xe4\xff\x01\x05\x85\x2f\xa1\x75\x13\x67\xa3\x2f\x1f\x0f\x17\x29\x6d\xe3\x68\xa9\x15\x90\x2f\x90\xe8\xf7\xb6\xf8\x1f\x59\x0c\x2d\xdf\x15\xdf\x4e\xac\xfb\xa9\xe4\x09\xcc\x93\x9a\x51\x8a\x6f\x15\xb0\x64\x35\xbc\x56\xa0\x0a\x74\x50\x18\xd3\xca\x3e\x10\xdd\x10\xde\xe3\x30\x09\x9f\x83\xd2\x00\x1d\x4b\x27\x8a\x93\x27\xda\x87\xf2\x6c\x61\x9f\x94\x02\x3d\x95\xd0\xf0\x70\xae\x08\x3a\x48\x8e\x69\x55\x35\x12\x31\x7d\x3e\x92\xa3\x62\xe9\x48\x72\x94\xf3\x7e\x24\xa7\x84\x7d\xfa\x92\xa3\x13\x1a\x24\xa7\x08\x3a\x48\x8e\x69\x65\x7d\x85\x99\x4b\x70\x88\x7b\x7b\x8b\x92\x29\x37\x59\x20\x5d\xbc\xa5\x4d\xa5\xd8\xc3\xbb\xda\x4a\xc0\xa7\x25\x33\x55\xd9\x0c\x1a\x53\x04\x1d\x34\xa6\xa6\xc5\x74\x72\xc0\xeb\x6f\xa7\x93\xec\x7d\xc7\xbb\x1b\x4f\x27\xb2\xcb\x9f\x6e\x67\xf9\x43\x11\x7b\x9e\xae\x38\xb5\xfb\x8f\x51\x18\xbf\xea\x8f\xfa\xbf\x4d\xdd\xfe\x0d\x00\x00\xff\xff\x90\xba\xe4\x15\x6a\x64\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
