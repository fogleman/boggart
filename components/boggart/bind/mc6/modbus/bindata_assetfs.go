// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
package modbus

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x61\x6f\x9b\xbc\x16\xfe\xbe\x5f\x61\x21\x4d\xbb\xf7\x43\x92\x26\xad\xa6\xab\xdd\xb4\xd3\xd4\xa9\xea\xa4\xed\xaa\x5a\xef\xdd\xfd\x88\x9c\x60\x82\xdf\x19\x9b\x81\x93\xb4\xaa\xf2\x9f\xf6\x1b\xf6\xcb\x5e\x19\x4c\x62\xc0\xb4\x01\x4c\x48\x36\xfa\xe1\x7d\x33\xf0\x39\xcf\x39\xc7\x8f\x1f\xc7\x60\xc8\xd3\x13\x70\x90\x8b\x29\x02\xd6\x9c\x51\x8e\x28\xb7\xc0\x66\xf3\x6a\xea\xe0\x15\x98\x13\x18\x45\x97\x56\xc8\xd6\xd6\xd5\x2b\x00\x00\x50\x8f\xce\x19\x19\xf8\xce\x60\x3c\x01\xe2\x53\xe4\xa7\x9f\x1e\xa2\xc1\x78\x22\xdb\xe7\x6d\x1e\xec\x00\x52\x44\x94\xb3\xc5\x16\x1c\x73\x82\x72\x2d\xe2\x56\xde\xe4\xea\xe9\x09\xe0\xf1\xbf\x28\xb0\xbe\x5c\xbf\xb5\xc0\x10\x6c\x36\xd3\x91\x37\xd1\xb4\x5d\x92\xd4\x21\x85\x2b\x40\xe1\x6a\x06\xc3\x41\x88\x17\x1e\x07\x71\x04\x36\x67\x8c\xcc\xd8\x83\x06\x27\xb6\x27\xf8\x6a\x0a\x95\x4c\x09\x0c\x22\x34\x20\x98\x7e\xb7\xae\xa6\x38\x3d\xe1\x42\xe0\xc2\xc1\xdc\x43\xab\x90\xd1\xc1\x32\xb0\xae\xa6\x23\x7c\x35\x1d\xc1\xab\xe9\x88\x60\x4d\x58\xa3\x25\xd1\x1c\x55\x8b\x4a\x10\x0c\x5d\xfc\x20\x3c\x39\x78\x95\xab\x93\xe6\xd0\x8b\xc5\x2d\xb6\x4a\xbb\xb9\x24\x75\xd1\x36\x64\x04\x5d\x5a\x1c\xce\xca\x3c\x96\x17\x7a\xc0\xe1\x2c\x02\x33\x18\xda\xe2\x83\xb5\x73\x45\x70\x54\x86\xa9\x94\x5d\xb6\x0f\x42\x14\x21\xca\x21\xc7\x8c\x5a\xa2\xd7\x5d\x80\x7e\x80\x21\x9c\x8b\x03\xc0\x12\x14\x4d\x71\xc5\xb1\x15\x12\x8d\x10\x75\xc0\x66\x23\x3a\xce\x0b\x91\x7b\x59\x62\xf7\x17\x5c\xc1\x68\x1e\xe2\x80\xbf\x5b\x31\xec\xfc\xe3\xec\x9f\xff\x16\xb6\x24\x42\x60\xb3\x79\x7a\x02\xc3\xaf\xe8\xc7\x12\x45\x7c\xf8\xbf\xaf\x9f\x87\x77\x90\x7b\xc9\xe1\xc4\xb9\xb5\xa3\xe0\x47\xb4\xc2\x73\x94\xb2\xb0\xac\xcb\x6b\xa5\x17\x21\x1a\xb1\x30\xaa\x9b\xa5\x62\x5e\x27\xd9\xf7\x89\x9f\x4b\xe9\x46\x97\xfb\x7d\x8a\xd0\x46\xf2\x1c\xf2\x65\xfd\xdc\xb7\xd6\x8d\x52\x8f\xbd\x68\x33\x97\xfe\xf7\x4f\x3c\x89\x71\xe8\xc4\x74\x19\x7e\x8a\xee\x97\x41\xc0\x42\x8e\x9c\x0f\x6b\xf8\x28\xa4\xd6\x48\xd5\xe0\x1a\x3e\xd6\xad\x59\x6a\xdb\xa4\x62\xc2\x87\xae\x5e\x1f\x62\xdf\x95\xaa\x95\xf8\xa8\x57\xd3\x5b\x46\x1c\x4c\x17\x37\x4b\x9a\xe4\x66\xaa\xbc\x1e\x23\x4e\xdd\xf2\xa6\xb6\x4d\xca\x2b\x7c\xe8\xca\x7b\x1b\xfb\x3e\x58\x79\x6f\x20\xbd\x0f\x10\x7a\xd1\xc1\xde\x75\x75\x21\xad\x5b\x56\x69\xda\xa4\xaa\x2e\xa4\xba\xa2\xde\x08\xcf\x26\x6b\xaa\x9f\xf7\xb7\x67\x95\xd9\x99\xc3\xd9\xe0\xf9\xf9\x39\x63\x95\x9b\xa7\x55\x2f\xe2\x08\x70\xa1\x83\x40\x52\x54\x80\xe9\x0b\x1e\x63\xaf\x2e\x0b\x7d\xe9\x56\x7c\xb4\x80\x2c\x95\xf5\xde\x02\x3e\xe2\x1e\x73\x2e\xad\x80\x45\xdc\x02\xd8\xb9\xb4\x56\x30\xc4\x70\x46\x50\x64\x01\x07\x72\x38\xe0\x6c\xb1\x10\xa6\x2b\x48\xb0\x03\x39\x0b\xf7\x80\x8c\x61\xc5\xf7\x03\xa4\x84\x4f\x10\x88\xff\x3b\x88\x78\x88\x03\xe4\x00\x87\x0f\x42\x14\x05\x8c\x46\x22\x17\xca\xd6\x21\x0c\x2c\x10\xf1\x47\x01\xb7\xc6\x0e\xf7\xde\x8d\xcf\xce\x5e\xef\x89\x97\x60\x7a\x08\x3a\xfb\xb7\x4f\x6c\xc2\x6a\x06\x12\x68\xc7\xad\x6f\xb2\x62\x29\xc1\xb8\xd7\xd8\x21\x59\xd6\xf6\x36\x1d\x55\x49\x48\xf8\xaf\x54\xb2\x29\x9f\x31\xe7\x71\xff\xf6\xcf\x7e\x95\xa9\x94\x98\x54\xb0\x90\x31\xdf\xe6\xc8\x0f\x50\x08\xf9\x32\x44\x55\xdd\xd4\xec\x6f\x67\xd7\x3d\x5f\x19\xf3\x81\x12\xc1\xb6\xa7\x2a\x32\x0f\x94\x27\x35\x44\x61\xc8\xc2\xaa\xa9\xc9\x48\xb7\x63\x0e\x3d\xf0\x81\x03\xe9\x02\x85\xb1\x12\x96\xa3\xd4\x8e\x5d\x6a\x72\xad\x7a\x56\x36\x92\x98\x42\xc3\x20\xb7\x5d\xc2\x20\xd7\xe4\xb4\x12\x83\x07\xbc\x71\xdf\x80\xc1\x18\xbc\xbd\xa8\x13\x1d\xd8\x76\x0c\x65\x1c\x0c\x15\xef\x76\x02\x5e\xbf\x7b\x40\x66\x48\x68\x3c\x27\xe1\x9f\x81\xcd\xe6\xd7\xcf\xeb\x5d\x85\x7f\xfd\xbc\xd9\x6f\x9e\x7f\x06\xb4\xa6\x75\x7d\x72\x54\xc7\xab\x26\x5e\xf5\x71\xe4\xb0\x73\x09\x63\x61\xb7\x62\x72\x23\x42\x30\xac\x26\x85\xb4\xda\x91\x93\x72\x98\x13\xd6\x93\x62\x52\xbd\xa0\x94\x81\xf6\x82\xa2\x5a\xed\x46\x1e\x5b\xa1\xd0\x43\x90\x77\xa5\x26\x29\xbe\x31\x29\x49\x1d\xb6\xa9\x23\x05\x8c\x4e\x44\x44\x9f\x76\x32\x86\xe2\xb5\x67\x52\x67\x26\x57\x93\x99\x65\xa9\x3c\xe5\xba\xbb\x73\x31\x91\x7e\x63\xbe\x7b\x4b\x1f\x3b\x98\xbf\x78\xcd\xab\x10\x66\x63\xa6\xdf\x4a\x64\x03\x1c\x4f\x93\x68\x87\xdd\x05\xef\x5d\xf1\x7a\x17\x49\x4a\xe7\xd7\xbf\x1b\x33\xd3\x22\x95\x5e\x40\xae\xc3\xf1\x80\xad\x51\x65\x56\x34\x27\xf8\x5d\x0c\x1b\x65\xae\x4d\x37\x20\x79\x9c\x45\x3b\x0c\xcf\xba\xee\x52\xb6\x93\x48\x7a\xb5\xd6\x58\xc5\x42\x87\x20\xc7\x74\x61\xaf\x20\x59\x75\xb0\xd4\xb9\x4d\xe0\x41\x0c\x6f\x42\xb7\xd5\x74\x5a\x12\x6f\x2d\x44\x97\x14\xcf\x46\xd4\x53\x5d\x63\x25\xca\x34\x67\x8c\x74\x48\xf5\xeb\x04\xde\x18\xd5\x33\xe9\xb4\x43\x75\x3d\x44\x97\x54\xcf\x46\xd4\x53\x5d\x63\xa5\x2a\x02\x5b\xf2\x60\xd9\xc1\x9a\x33\x95\xf5\x04\xdf\xa0\xae\x27\x0e\xdb\x15\xf6\x1c\xc6\x31\x28\xbb\x0c\xa9\xe7\xbb\xc6\x4a\xd4\x69\x8d\xa9\xc3\xd6\x91\xcd\x02\xf4\xe2\x66\x80\x42\xa8\x8d\xd9\xfe\xff\x04\x1d\xc4\xe8\xae\xdc\x93\x60\x80\xf4\x6a\x56\xed\x50\x5e\x8b\xd0\x25\xe1\x33\x01\xf5\x74\xcf\x5b\x68\x16\xb2\xe9\xae\x9e\x3a\xc3\x06\xee\xb1\x35\x29\xff\xd7\x7c\xb8\xa8\x7b\x85\x1a\x8c\x0e\x11\x7c\x3b\xa3\x22\xe3\xb9\xcb\xd1\x10\x07\xd2\x8f\x02\x8d\x55\x5a\x9d\x6e\x6f\xd4\xc5\x5b\xfb\xcc\xde\xa7\xcb\x27\xd5\x1e\xc3\x4f\xff\x2e\x5d\x31\x8d\x74\xac\xf4\x77\xe3\xfa\xbb\x71\x39\x0b\xcd\xd4\x99\xee\xd8\xac\xb5\xc2\x4a\x76\xa0\xda\xee\x9e\x5b\x50\xf3\x7f\x06\xd6\x58\x49\x04\x26\xbf\x70\xe6\x93\x6a\x69\x9d\x55\x86\xd2\xe9\x4a\x2b\x1f\x54\x3f\xed\x6a\xac\xd4\x4a\x71\xec\x23\xdb\xc3\xdd\x11\x5f\x04\x00\x3c\x6c\x90\xf7\x32\xa5\x76\x69\x9f\x07\xe9\xee\xde\x5f\x2e\xa0\x94\xf1\x7f\x0a\x77\x09\x5b\x77\x4c\x5e\xc2\xd6\xa6\xd9\x4b\xd8\xfa\x00\xf4\x55\x51\x8e\x83\xbf\x22\xa2\x3f\x89\xc0\x5d\x2e\x7b\xb6\x1c\x36\xba\xf2\xd1\xa4\xd6\x32\x93\x4f\x7e\xfd\xa3\xcb\xa4\x5f\x02\x65\x41\xfb\x25\xd0\xd6\x42\xb3\x04\x92\x4f\x57\xd5\x91\x22\x17\x52\x3b\x0a\x10\x72\x6c\x9f\x39\x5d\xec\x92\x86\x14\xc4\xf8\x40\xe0\x9b\xd8\xd7\x98\x49\xa8\xa5\x7d\x8d\x7a\x8c\x93\x92\x1d\x49\xa1\x5c\x2a\xbb\x21\x5c\xdb\x6f\xdc\xad\xe3\xa4\x53\x93\xfe\xac\x3d\xe8\x15\xaa\x6f\xe3\x94\x21\x8e\x1b\x87\x78\x6e\x24\xc4\x5e\x97\x14\xab\xcc\xf8\xeb\x50\x4b\x4c\xca\x48\xcb\x0a\xf2\x7b\x88\x87\x31\xdd\xb8\xc5\x0b\xef\x98\x45\xe3\x0b\x72\xf0\xd2\x6f\x2f\xc2\x49\xe3\x08\x3f\xa7\xab\xd1\x36\xc2\x3b\x6f\x1c\xde\x87\x25\x67\xbd\xe4\x1a\xc0\xa9\x39\xf2\x9b\xab\x6c\xf2\x2a\x15\xc0\x1f\x03\x13\x5f\xd7\x92\xd7\x16\xd8\xc2\x5b\x3b\x4a\xab\x03\xe8\xec\x62\x87\x1a\xcc\xc9\x5c\xe7\x10\xdd\x14\x3d\x46\x1c\xf9\x1d\xad\x11\xee\x63\x70\x53\x0b\x04\x25\x95\x76\x18\xa7\x03\x38\xc5\xd9\x5d\xcd\xc3\xd8\xfc\xbe\x7d\x78\xcd\xc4\xf4\x54\x8c\xb0\xf9\x0c\x7f\xcd\x18\x69\x33\xc2\xe6\x33\xfc\xb7\xf8\xb5\x6f\xed\x45\xd8\x7c\x92\xff\x88\xbc\xcc\x43\x5c\xed\xc4\xd9\xe8\x81\xdd\xfe\xcb\x88\x69\x1c\x29\xaf\x1c\x86\x0b\xc4\xbb\xbd\xb4\xfd\xdf\x38\x06\xc3\x57\xb6\x8b\x89\xb5\x33\x7d\x3c\x83\x73\x52\xb3\x48\xf6\xe9\x7b\x4d\x56\xfd\xe3\xf7\x65\xa0\xbd\xaa\xa8\x56\xfa\xc1\x67\xfb\xf0\x01\xfb\x4b\xff\x18\xd4\x05\xc8\x58\x5a\x51\x99\x34\xd1\x43\xa9\x4d\x01\xef\xa4\x54\xe7\xb9\x84\xfa\x9b\x6a\x59\xd0\x5e\x66\x54\xab\xb2\xd1\x87\xe9\xf1\xc8\x4c\x12\x4b\x4b\x32\x93\x38\x3f\x9c\xcc\xe4\xf0\x4e\x5f\x66\x64\x42\xbd\xcc\x64\x41\x7b\x99\x51\xad\xb4\xaf\xf1\xb2\x09\xf6\x71\x67\x6f\x15\x52\x25\x26\x0e\xa4\x8d\x37\x95\x25\x29\x1e\xe8\x7d\x65\x39\xb0\xd3\x92\x96\xb2\x6c\x7a\x5d\xc9\x82\xf6\xba\xa2\x5a\xc5\x6f\x49\x89\x7f\x2d\x81\xb0\xf9\xf7\xc3\x4b\xc9\x9d\xc0\x06\x02\xdb\xc4\x3b\x6d\xb6\x89\xb4\xf4\x62\x9b\xa2\xff\x4e\xdf\x6e\xb3\x0b\xa7\x7f\x60\x41\x63\x85\x5d\x00\xa9\xa3\xd6\xc9\x0e\x30\xb5\xc7\x85\x23\x93\xc2\x91\xf3\xc2\x91\xca\x17\x9a\x4c\x8d\x8d\xbb\x4f\xff\x01\xf3\x86\xf7\xb0\x1a\xde\xd6\x29\x54\xb0\x99\xf2\x4f\xa3\x00\xd2\x3d\x06\x59\x0e\x6b\x3a\x12\x76\xb5\xf3\xa8\x3b\xe0\xa4\x79\x31\xae\xa6\x13\xab\x24\xb5\xc1\x7e\x99\x1c\xb0\x5f\x26\x47\xda\x2f\x93\x23\xec\x97\xf3\x03\xf6\xcb\xf9\x91\xf6\xcb\xf9\x11\xf6\xcb\xc5\x01\xfb\xe5\xe2\x48\xfb\xe5\xc2\x54\xbf\x54\xb5\xac\x3e\x93\x1d\x6a\x7f\x54\x35\x8b\xe9\xa8\xc2\x2f\x20\x4c\x47\xf1\x4f\x5e\xbc\xdc\x78\x3a\x12\x2b\xa1\xe7\xdb\x69\x7e\x2b\x6c\xcf\xd3\x25\xa7\x5e\xfe\x3d\x32\xe5\x9f\xf2\xa3\xfc\xdf\xae\x6e\x7f\x07\x00\x00\xff\xff\xb8\x00\xcb\x20\x6d\x6e\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
