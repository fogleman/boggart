// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
package modbus

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x6e\xdb\x3a\x12\xbe\xef\x53\x10\x02\x8a\xee\x5e\xd8\x8e\x9d\xa0\x58\x74\x9d\x14\x45\x8a\x20\x05\xda\x45\xd0\xec\x76\x2f\x05\xda\xa2\x2c\x9e\x52\xa4\x2a\x51\x72\x82\xc0\xef\xd4\x67\xe8\x93\x1d\x50\xa2\x6c\xfd\x50\x89\x25\x51\x96\xdd\x2a\x17\xe7\xb8\x12\x67\xbe\x99\xe1\xc7\x8f\xa6\x44\xc9\x4f\x4f\xc0\x42\x36\xa6\x08\x18\x4b\x46\x39\xa2\xdc\x00\x9b\xcd\xab\xb9\x85\x23\xb0\x24\x30\x08\x2e\x0d\x9f\xad\x8d\xab\x57\x00\x00\x90\x3d\xba\x64\x64\xe4\x5a\xa3\xe9\x0c\x88\x4f\x81\x9b\x7e\x7a\x08\x46\xd3\x99\x6c\x5f\xb4\x79\x30\x3d\x48\x11\xc9\x9c\x2d\xb7\xe0\x98\x13\x54\x68\x11\xb7\x72\x66\x57\x4f\x4f\x00\x4f\xff\x45\x81\xf1\xe5\xfa\xad\x01\xc6\x60\xb3\x99\x4f\x9c\x99\xa2\x6d\x48\x52\x87\x14\x46\x80\xc2\x68\x01\xfd\x91\x8f\x57\x0e\x07\x71\x04\x26\x67\x8c\x2c\xd8\x83\x02\x27\xb6\x27\xf8\x6a\x0e\x33\x99\x12\xe8\x05\x68\x44\x30\xfd\x6e\x5c\xcd\x71\x7a\xc2\x86\xc0\x86\xa3\xa5\x83\x22\x9f\xd1\x51\xe8\x19\x57\xf3\x09\xbe\x9a\x4f\xe0\xd5\x7c\x42\xb0\x22\xac\x49\x48\x14\x47\xb3\x45\x25\x08\xfa\x36\x7e\x10\x9e\x2c\x1c\x15\xea\xa4\x38\xf4\x62\x71\xcb\xad\xd2\x6e\xae\x48\x5d\xb4\xf5\x19\x41\x97\x06\x87\x8b\x2a\x8f\xd5\x85\x1e\x71\xb8\x08\xc0\x02\xfa\xa6\xf8\x60\xec\x5c\x11\x1c\x54\x61\x66\xca\x2e\xdb\x7b\x3e\x0a\x10\xe5\x90\x63\x46\x0d\xd1\xeb\x36\x40\x3f\xc0\x18\x2e\xc5\x01\x60\x08\x8a\xa6\xb8\xe2\x58\x84\x44\x23\x44\x2d\xb0\xd9\x88\x8e\x73\x7c\x64\x5f\x56\xd8\xfd\x05\x23\x18\x2c\x7d\xec\xf1\x77\x11\xc3\xd6\x3f\xce\xfe\xf9\x6f\x61\x4b\x02\x04\x36\x9b\xa7\x27\x30\xfe\x8a\x7e\x84\x28\xe0\xe3\xff\x7d\xfd\x3c\xbe\x83\xdc\x49\x0e\x27\xce\x8d\x1d\x05\x3f\xa2\x08\x2f\x51\xca\xc2\xaa\x2e\x6f\x94\x5e\x80\x68\xc0\xfc\xa0\x69\x96\x19\xf3\x26\xc9\xbe\x4f\xfc\x5c\x4a\x37\xaa\xdc\xef\x53\x84\x2e\x92\xe7\x90\x87\xcd\x73\xdf\x5a\xb7\x4a\x3d\xf6\xa2\xcc\x5c\xfa\xdf\x3f\xf1\x24\xc6\xb1\x15\xd3\x65\xfc\x29\xb8\x0f\x3d\x8f\xf9\x1c\x59\x1f\xd6\xf0\x51\x48\xad\x96\xaa\xc1\x35\x7c\x6c\x5a\xb3\xd4\xb6\x4d\xc5\x84\x0f\x55\xbd\x3e\xc4\xbe\x6b\x55\x2b\xf1\xd1\xac\xa6\xb7\x8c\x58\x98\xae\x6e\x42\x9a\xe4\xa6\xab\xbc\x0e\x23\x56\xd3\xf2\xa6\xb6\x6d\xca\x2b\x7c\xa8\xca\x7b\x1b\xfb\x3e\x58\x79\x6f\x20\xbd\xf7\x10\x7a\xd1\xc1\xde\x75\xb5\x21\x6d\x5a\x56\x69\xda\xa6\xaa\x36\xa4\xaa\xa2\xde\x08\xcf\x3a\x6b\xaa\x9e\xf7\xb7\x67\x33\xb3\x33\x87\x8b\xd1\xf3\xf3\x73\xce\xaa\x30\x4f\x67\xbd\x88\x23\xc0\x86\x16\x02\x49\x51\x01\xa6\x2f\x78\x8c\xbd\xda\xcc\x77\xa5\x5b\xf1\xd1\x00\xb2\x54\xc6\x7b\x03\xb8\x88\x3b\xcc\xba\x34\x3c\x16\x70\x03\x60\xeb\xd2\x88\xa0\x8f\xe1\x82\xa0\xc0\x00\x16\xe4\x70\xc4\xd9\x6a\x25\x4c\x23\x48\xb0\x05\x39\xf3\xf7\x80\x8c\x61\xc5\xf7\x03\x94\x09\x9f\x20\x10\xff\x77\x14\x70\x1f\x7b\xc8\x02\x16\x1f\xf9\x28\xf0\x18\x0d\x44\x2e\x94\xad\x7d\xe8\x19\x20\xe0\x8f\x02\x6e\x8d\x2d\xee\xbc\x9b\x9e\x9d\xbd\xde\x13\x2f\xc1\x74\x10\xb4\xf6\x6f\x9f\xd8\xf8\xf5\x0c\x24\xd0\x8e\x5b\xdf\x64\xc5\x52\x82\x71\xa7\xb5\x43\x12\x36\xf6\x36\x9f\xd4\x49\x48\xf8\xaf\x55\xb2\x39\x5f\x30\xeb\x71\xff\xf6\xcf\x7e\x95\xa9\x95\x98\x54\x30\x9f\x31\xd7\xe4\xc8\xf5\x90\x0f\x79\xe8\xa3\xba\x6e\x1a\xf6\xb7\xb5\xeb\x9e\xaf\x8c\xb9\x20\x13\xc1\xb6\xa7\x6a\x32\x0f\x54\x27\x35\x46\xbe\xcf\xfc\xba\xa9\xc9\x48\xb7\x63\x0e\x3d\xf0\x91\x05\xe9\x0a\xf9\xb1\x12\x56\xa3\x34\x8e\x5d\x6a\x72\xa3\x7a\xd6\x36\x92\x98\x42\xc3\x20\x37\x6d\xc2\x20\x57\xe4\x14\x89\xc1\x03\xde\xd8\x6f\xc0\x68\x0a\xde\x5e\x34\x89\x0e\x6c\x3b\x86\x32\x0e\xc6\x19\xef\x66\x02\xde\xbc\x7b\x40\x6e\x48\x28\x3c\x27\xe1\x9f\x81\xcd\xe6\xd7\xcf\xeb\x5d\x85\x7f\xfd\xbc\xd9\x6f\x9e\x7f\x06\xb4\xa1\x75\x73\x72\xd4\xc7\xab\x27\x5e\xcd\x71\xe4\xb0\xb3\x09\x63\x7e\xbf\x62\x72\x23\x42\xd0\xac\x26\xa5\xb4\xba\x91\x93\x6a\x98\x13\xd6\x93\x72\x52\x83\xa0\x54\x81\x0e\x82\x92\xb5\xda\x8d\x3c\x16\x21\xdf\x41\x90\xf7\xa5\x26\x29\xbe\x36\x29\x49\x1d\x76\xa9\x23\x25\x8c\x5e\x44\x44\x9d\x76\x32\x86\xe2\xb5\x67\x52\x67\x26\x57\x93\xb9\x65\xa9\x3c\x65\xdb\xbb\x73\x31\x91\x7e\x63\xbe\x3b\xa1\x8b\x2d\xcc\x5f\xbc\xe6\x55\x0a\xb3\x35\xd3\x6f\x25\xb2\x06\x8e\xa7\x49\x74\xc3\xee\x92\xf7\xbe\x78\xbd\x8b\x24\xa5\xf3\xeb\xdf\x8d\x99\x69\x91\x2a\x2f\x20\x37\xe1\xb8\xc7\xd6\xa8\x36\x2b\xda\x13\xfc\x2e\x86\x0d\x72\xd7\xa6\x5b\x90\x3c\xce\xa2\x1b\x86\xe7\x5d\xf7\x29\xdb\x49\x24\x83\x5a\x2b\xac\x62\xa1\x43\x90\x63\xba\x32\x23\x48\xa2\x1e\x96\x3a\xb7\x09\x3c\x88\xe1\x75\xe8\x76\x36\x9d\x8e\xc4\x5b\x09\xd1\x27\xc5\xf3\x11\x0d\x54\x57\x58\x89\x32\x2d\x19\x23\x3d\x52\xfd\x3a\x81\xd7\x46\xf5\x5c\x3a\xdd\x50\x5d\x0d\xd1\x27\xd5\xf3\x11\x0d\x54\x57\x58\x65\x15\x81\x85\xdc\x0b\x7b\x58\x73\xa6\xb2\x9e\xe0\x6b\xd4\xf5\xc4\x61\xb7\xc2\x5e\xc0\x38\x06\x65\x97\x21\x0d\x7c\x57\x58\x89\x3a\xad\x31\xb5\xd8\x3a\x30\x99\x87\x5e\xdc\x0c\x50\x0a\xb5\x35\xdb\xff\x9f\xa0\x83\x18\xdd\x96\x7b\x12\x34\x90\x3e\x9b\x55\x37\x94\x57\x22\xf4\x49\xf8\x5c\x40\x03\xdd\x8b\x16\x8a\x85\x6c\xba\xab\xa7\xc9\xb0\x81\x7b\x6c\x4d\x2a\xfe\xb5\x1f\x2e\xd9\xbd\x42\x2d\x46\x87\x08\xbe\x9b\x51\x91\xf3\xdc\xe7\x68\x88\x03\x19\x46\x81\xc2\x2a\xad\x4e\xbf\x37\xea\xe2\xad\x7d\x7a\xef\xd3\x15\x93\xea\x8e\xe1\xa7\x7f\x97\xae\x9c\x46\x3a\x56\x86\xbb\x71\xc3\xdd\xb8\x82\x85\x62\xea\x4c\x77\x6c\x36\x5a\x61\x25\x3b\x50\x4d\x7b\xcf\x2d\xa8\xc5\x3f\x0d\x6b\xac\x24\x02\x9d\x5f\x38\x8b\x49\x75\xb4\xce\xaa\x42\xe9\x75\xa5\x55\x0c\x6a\x98\x76\x15\x56\xd9\x4a\x71\xec\x22\xd3\xc1\xfd\x11\x5f\x04\x00\x1c\xac\x91\xf7\x32\xa5\x6e\x69\x5f\x04\xe9\xef\xde\x5f\x21\xa0\x94\xf1\x7f\x0a\x77\x09\x5b\xf7\x4c\x5e\xc2\xd6\xba\xd9\x4b\xd8\xfa\x00\xf4\xcd\xa2\x1c\x07\x7f\x45\x44\x7f\x12\x81\xfb\x5c\xf6\x6c\x39\xac\x75\xe5\xa3\x48\xad\x63\x26\x9f\xfc\xfa\x47\x95\xc9\xb0\x04\xca\x83\x0e\x4b\xa0\xad\x85\x62\x09\x24\x9f\xae\x6a\x22\x45\x36\xa4\x66\xe0\x21\x64\x99\x34\x74\x17\xc8\x0f\x7a\xd8\xda\x08\x29\x88\x43\x00\x32\x04\x1d\xbb\x1b\x8b\x69\x75\xb4\xc1\xb1\x12\xe6\xa4\x24\x48\xd2\xa9\x9c\xcd\x6e\x44\x37\x76\x1d\x77\xf1\x34\xe9\xe0\xa4\x63\x1b\x6b\x40\x86\xf9\xdb\x50\x65\x88\xd3\xd6\x21\x9e\x6b\x09\x71\x90\xa9\x8c\x55\x6e\x20\xf6\xa8\x2b\x3a\xf5\xa4\x63\x1d\xf9\x3d\xf4\x43\x9b\x6e\xdc\xe2\x95\x73\xcc\xa2\xf1\x05\x59\x38\x74\xbb\x8b\x70\xd6\x3a\xc2\xcf\xe9\xe2\xb4\x8b\xf0\xce\x5b\x87\xf7\x21\xe4\x6c\x90\x5c\x0d\x38\x0d\x47\x7e\x7b\x95\x4d\xde\xac\x02\xf8\xa3\xa7\x63\xf9\x98\xbc\xc5\xc0\x14\xde\xba\x51\x5a\x15\x40\x6f\xd7\x3e\xb2\xc1\x9c\xcc\x65\x0f\xd1\x4d\xc1\x63\xc0\x91\x6b\xba\xcc\xea\x81\x71\xf7\x31\x38\x10\xe0\x1a\x18\x97\x49\xa5\x1b\xc6\xa9\x00\x4e\x71\x76\xcf\xe6\xa1\x6d\x7e\xdf\x3e\xcb\xa6\x63\x7a\x2a\x47\xd8\x7e\x86\xbf\x66\x8c\x74\x19\x61\xfb\x19\xfe\x5b\xfc\x16\xb8\xee\x22\x6c\x3f\xc9\x7f\x44\x4e\xee\x99\xae\x6e\xe2\x6c\xf5\xfc\xee\xf0\x65\x44\x37\x8e\x94\x57\x0e\xfd\x15\xe2\xfd\x5e\xe9\xfe\x6f\x1c\x83\xe6\x0b\xdd\xe5\xc4\xba\x99\x3e\x9e\xc1\x39\xa9\x59\x24\xff\x30\xbe\x22\xab\xe1\x69\xfc\x2a\xd0\x41\x55\xb2\x56\xea\xc1\x67\xba\xf0\x01\xbb\xa1\x7b\x0c\xea\x02\x64\x2c\x9d\xa8\x4c\x9a\xe8\xa1\xd4\xa6\x84\x77\x52\xaa\xf3\x5c\x42\xc3\x3d\xb6\x3c\xe8\x20\x33\x59\xab\xaa\xd1\x87\xe9\xf1\xc8\x4c\x12\x4b\x47\x32\x93\x38\x3f\x9c\xcc\x14\xf0\x4e\x5f\x66\x64\x42\x83\xcc\xe4\x41\x07\x99\xc9\x5a\x29\xdf\xea\x65\x12\xec\xe2\xde\x5e\x32\x94\x95\x98\x38\x90\x2e\x5e\x5c\x96\xa4\x78\xa0\xd7\x97\x15\xc0\x4e\x4b\x5a\xaa\xb2\x19\x74\x25\x0f\x3a\xe8\x4a\xd6\x2a\x7e\x69\x4a\xfc\xe3\x09\x84\x2d\xbf\x1f\x5e\x4a\xee\x04\x36\x10\xd8\x3a\x5e\x71\xb3\x4d\xa4\xa3\xf7\xdc\x94\xfd\xf7\xfa\xb2\x9b\x5d\x38\xc3\xf3\x0b\x0a\x2b\x6c\x03\x48\xad\x6c\x9d\x4c\x0f\x53\x73\x5a\x3a\x32\x2b\x1d\x39\x2f\x1d\xa9\x7d\xa1\x49\xd7\xd8\xb8\xfb\xf4\x1f\xb0\x6c\x79\x0f\xab\xe5\x6d\x9d\x52\x05\xdb\x29\xff\x3c\xf0\x20\xdd\x63\x90\x15\xb0\xe6\x13\x61\xd7\x38\x8f\xa6\x03\x4e\x9a\x97\xe3\x6a\x3b\xb1\x4a\x52\x6b\xec\x97\xd9\x01\xfb\x65\x76\xa4\xfd\x32\x3b\xc2\x7e\x39\x3f\x60\xbf\x9c\x1f\x69\xbf\x9c\x1f\x61\xbf\x5c\x1c\xb0\x5f\x2e\x8e\xb4\x5f\x2e\x74\xf5\x4b\x5d\xcb\xfa\x33\xd9\xa1\xf6\x47\xd5\xb3\x98\x4f\x6a\xfc\x20\xc2\x7c\x12\xff\x02\xc6\xcb\x8d\xe7\x13\xb1\x12\x7a\xbe\x9d\xe2\xa7\xc3\xf6\x3c\x5d\x71\xea\xe5\x9f\x27\xcb\xfc\x53\x7e\x94\xff\xdb\xd5\xed\xef\x00\x00\x00\xff\xff\x30\x4c\xf5\xaa\x7c\x6e\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
