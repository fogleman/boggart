// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package homie

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7b\x73\xdb\xb6\xb2\xff\x3f\x9f\x62\x8b\xba\x23\xa9\x35\x49\xd9\x69\x73\xef\x55\x24\x67\x72\x9b\xdb\x69\xef\xa4\x49\xa6\x71\xdb\x99\x93\x93\xe3\x81\x48\x48\x82\x03\x02\x2c\x00\x4a\x56\x3c\xfa\xee\x67\x00\x3e\xc4\xa7\x44\xd9\x72\x9b\x9e\x09\x67\xe2\x90\xe0\x02\x0b\xec\xfe\xf6\x81\x05\x75\x7b\x0b\x01\x99\x51\x4e\x00\xf9\x82\x6b\xc2\x35\x82\xcd\xe6\xd1\x38\xa0\x4b\xf0\x19\x56\x6a\x82\x22\x3c\x27\x8e\xa6\x9a\x11\x74\xf1\x08\x00\xa0\xf8\xd2\xb6\x5f\x31\x32\xd3\xe9\x4b\x4b\xb0\x78\xbc\x7d\x30\xd7\xed\x2d\xd0\xb3\xff\xe6\x80\x5e\x90\x25\xf5\x09\x7c\xa5\x10\x9c\x00\xa7\x2c\xff\xe7\x72\x1c\x12\xd8\x6c\xc6\x53\x09\xde\xc5\xa3\x5a\xef\x19\xb8\x0c\x2b\x7d\x15\x47\x01\xd6\x86\xb0\x44\x61\x99\xaa\x10\x33\x76\x31\x56\xbe\xa4\x91\x06\xbd\x8e\xc8\x04\xe1\x28\x62\xd4\xc7\x9a\x0a\xee\x5d\xe3\x25\x4e\x5e\xa2\x8b\x40\xf8\x71\x48\xb8\x76\x57\x92\x6a\xd2\x37\x63\x5e\x8a\xb7\x5a\x52\x3e\xef\xf7\x6e\x6f\x4b\xcc\xdc\x1f\x84\x0c\xb1\x06\x74\x3e\x1c\x3e\x71\x86\x67\xce\xf0\xfc\xf2\xec\xbb\xd1\xf0\xdb\xd1\xf0\xbb\x7f\x0c\xff\x6b\x34\x1c\x1a\x91\xf5\x06\x83\xb1\x97\x0c\x7f\x31\xf6\x92\xb9\x54\x57\x41\x78\x50\x9c\xf9\xd8\xcb\xe4\x34\xf6\x02\xba\x4c\x57\x5d\x97\xae\xa4\xf3\x45\x49\xbc\x05\x8a\x99\x90\xa1\x33\x97\x22\x8e\x20\x8a\x19\x73\xaa\xb4\x55\x7a\xca\xa3\x58\x27\x1d\x2a\x54\x96\x92\xe1\x29\x61\x19\xed\x54\xf3\x56\x4a\x4b\x3d\x8d\xb5\x16\x3c\x15\x75\xf2\x80\x0a\x9d\xc1\x0c\x40\x7d\x91\xdc\xac\xb0\xe4\x94\xcf\xed\xbd\x0a\x51\xe3\x88\xd9\x15\x60\x8d\x1d\x2d\xe6\x73\x46\x26\x28\x14\x01\x66\x28\x6d\xc3\x72\x4e\xf4\x04\x7d\x99\x34\xee\x1f\xc4\xd2\x25\xe8\x9d\xa0\x1c\x86\xdf\x0b\x3e\xa3\x32\x04\x49\x94\xc6\x52\x43\x60\x61\x89\xc0\x85\xcd\xa6\xf3\xa0\x53\x11\xac\x0b\x63\xfe\x4e\x19\x83\x29\xa9\x8c\xe9\xc2\x73\x49\x60\x2d\x62\x50\xb1\x24\xcf\x0e\x64\xe1\x63\xc6\xa6\xd8\xff\x30\x41\xd8\x37\x18\xee\xf7\xd2\xd1\x7b\x83\xa7\x2d\x4a\xb1\x8a\xa1\x39\x3c\xb0\x82\x19\x76\x22\xb1\x22\xd2\x11\xb3\x19\x82\xaa\x28\x7e\x49\x06\x4c\x27\x76\x31\xf6\x68\x8b\xb2\xbd\x44\xc1\xc7\x80\x42\x80\xf9\x9c\xc8\x4f\x0d\x09\xe4\xb8\x38\x58\xd1\x88\x80\x6f\x86\x9f\x3f\x1c\x16\xc8\xa1\x48\x20\x12\x2b\x22\xeb\x30\xf8\x9d\x46\xe4\x1e\x18\x18\x7b\xd6\x73\x54\xfc\x4e\xe2\xd5\x1a\x1e\xd3\xdb\xcc\xed\x15\x1d\x94\xcf\x08\x96\x33\x7a\x63\xa6\x51\x7f\x2b\xc5\xaa\x21\x08\xf9\x82\x39\x61\xe0\x9c\x9d\x83\xb9\x53\x61\x76\x77\xa3\x9c\xb3\xf3\x16\xc7\x79\x73\x15\x61\x4e\xd8\x0e\x57\x79\x73\x55\x0c\x7a\x25\xaa\xc5\xf9\x45\x35\xa4\x61\xad\x25\x9d\xc6\x9a\xa8\x44\x8c\x63\x6f\x71\xde\xd0\x33\xce\xbd\x2b\xc7\x4b\xe0\x78\x39\xc5\x32\x71\xda\x60\xe7\x73\xa5\x85\x60\x53\x71\xd3\xe6\x72\x19\xbd\x18\xe3\xc2\xba\x19\x8e\x14\x71\x18\xe5\x1f\xd0\x45\x51\xd9\x46\xd7\xfe\x82\x2c\xa5\xe0\x8e\x71\xe0\x46\xa7\x63\x0f\x5f\x8c\x3d\xd6\xa0\xdc\xb1\x17\xb3\x86\xd6\x5d\x6a\xd9\xa1\xe8\xba\x20\xb3\xd4\xa2\x81\x87\xc6\x53\x46\xf2\x78\x67\x1f\xec\x5f\x47\x69\x49\x23\x12\x58\x13\x48\xda\x03\xed\x48\xa2\x22\xc1\x15\x5d\x12\xe0\x62\x25\x71\x84\x40\xe9\xb5\x41\xf2\x8a\x06\x7a\x31\x3a\x1b\x0e\xbf\x6a\x13\x9d\x5e\x10\x1c\xb4\xbd\x93\x3b\x6c\x48\x2f\xb2\xf9\x85\x81\x63\x70\x75\x8e\xb6\xea\x7f\x9e\xe9\x3d\x53\xbb\x5e\xec\x1c\x6a\xdb\xf3\x37\xcc\xe2\xbd\xbd\xc6\x5e\xdb\xd4\x4c\x9f\x1d\x0b\x32\x5e\xa9\x7d\x22\xb7\xb7\x20\x8d\x13\x86\x13\x93\x77\x9d\xc2\xc9\xd2\x4c\x06\x46\x13\x70\x13\x5f\xa5\xae\xb6\x80\x6e\xca\xb6\xb6\x8c\x76\x48\x2e\x21\x08\xcc\x92\x4f\xb2\xfc\xce\xd3\x2d\x53\x2e\x76\xd8\x49\x00\x79\x4a\x48\xfe\x48\xc7\x45\x34\x8c\x18\x31\x09\x9d\x4d\xf5\xdc\xc4\xed\xa2\x5d\x13\x2f\xb1\x8c\x24\xc9\x70\x14\xe1\x20\xa0\x7c\x3e\x1a\xa2\x8b\xb1\x2f\x82\x1c\x9a\xd7\x4a\x70\x74\xb7\xec\xf2\xff\xdf\xbe\x7e\xe5\x2a\x9b\x5c\xd2\xd9\x3a\x79\x8c\xb0\x54\xa4\x6f\xd5\xb0\xca\xa4\xbf\xd9\x0c\x4e\x81\xc7\x8c\x9d\xc2\x79\x29\x9b\x34\xf3\xb8\x18\x7b\x91\x24\x9d\x24\x43\x98\x6a\xcc\x90\x5b\xc8\x73\xee\x9d\xc6\x2e\xa7\xb0\x8d\xd2\xdc\xa9\xe2\x76\x40\xef\xe7\x30\xf6\x5a\x60\x3d\xf6\xac\x87\x38\x42\xf8\xf9\x04\x03\xcc\x2b\x11\x7c\x0e\x2a\x0d\xc2\xfb\xd4\x83\x0a\x74\x73\x8f\x85\x88\xf0\xd3\x8b\x2e\x41\xa4\xd6\xed\x15\x0e\x3b\x45\x9f\x5a\xc7\xcb\x75\x74\xb7\x8e\xcf\xa5\xc4\xeb\x03\x7a\x66\xf2\x0c\xa8\x8a\x18\x5e\x8f\x80\x0b\x4e\x8c\xd6\x77\x06\xcb\xe3\x87\xbe\x42\xd8\x3b\x85\x13\x6e\xdc\xbb\x09\x79\xe6\xe6\x48\x51\x4e\x04\xc4\xfd\xe9\x85\x9b\x94\x12\x3a\xc7\xbb\xbc\xab\x51\xe5\x9d\x3b\x1b\x75\xde\xb9\xb3\x55\xe9\xa1\xbd\xf7\x46\x8c\xfd\x96\x98\x5a\xdc\xfe\xa1\xa0\x83\xb9\xd5\xe9\xf7\xe8\xad\x81\xc1\x16\xe5\x6f\xa4\x88\x88\xd4\x6b\x04\x27\x9d\x80\xbe\x73\xb0\x34\xdb\x3b\x7c\xa4\xdd\x01\xb3\x42\xd9\x5d\x3c\xfb\x32\xc4\xea\xb5\x35\x9d\xe8\x14\x4e\xa2\x54\x34\xc6\x7c\x12\xfc\xa4\xc2\xa2\xbb\x0d\xa9\x3e\x8b\x83\x15\x94\x60\x36\x9b\xc0\xc1\x16\xb3\x77\x40\xab\xa8\xed\x88\x50\x7a\xf9\x2b\xa7\xfa\xae\xdc\xba\x2b\x12\x3a\xe7\x5a\x85\xb1\xbb\xa9\xb3\x31\x53\x6a\x20\xba\x53\x06\xf7\x9f\x97\xbd\x41\x96\x0d\x05\xf7\xcf\xe3\xfe\x57\x0a\x1c\xf8\x58\x69\x08\x89\x52\x78\x4e\x3e\xe7\x74\x87\xe4\x74\x33\x21\xc3\x52\xd5\x7b\x21\x24\xfd\x28\xb8\xc6\x0c\xec\xb3\xad\x40\x39\xf6\x28\x02\xa4\x30\xe9\x86\x69\x46\x10\x12\xbd\x10\xc1\x04\x45\x42\x69\x04\x34\x98\xa0\x69\xa6\x09\x04\x49\x2d\x6d\x82\x9e\xa5\x37\x85\x57\x5c\x2c\x31\xa3\x01\xd6\x2d\xd6\x52\x2a\xab\x6b\x12\xc2\xb6\x16\xbf\xab\x22\x97\x94\xd8\x67\x42\x4e\x10\x23\x4b\xc2\xd0\x56\x49\x5c\x4b\xc1\x9c\xb4\x06\x9f\x80\xf6\x71\x86\xd9\xc7\x8d\x90\xad\x5e\x39\xd8\x5e\x26\x43\x1b\x80\xc1\x58\x45\x98\xe7\x26\x42\xfe\x88\xa9\x34\x78\xfe\x7a\xec\x99\x17\xbb\x0c\xbd\xa1\xa8\xd7\x26\x81\x74\xbe\x4f\xb2\xf9\x3e\xe9\x34\x5f\x3b\x8a\x3d\x93\x48\xb7\xd4\x9a\xdc\x68\x54\x52\x73\x2a\x96\x44\x73\xa9\xc4\xcc\xa6\x3f\x7f\x88\x18\xf6\xc9\x42\xb0\x80\xc8\x09\xc2\x8c\x48\x8d\xc0\x6e\x69\x27\x08\x41\xb6\xdc\xe2\xc2\x77\x2c\xb8\x06\xcf\x2e\xaf\xee\x8d\x83\xdc\x1f\x3c\x04\x12\x7e\x2e\x3a\x9b\xbf\x5c\xd7\x46\xbf\x58\x12\xdc\xa4\x62\x90\x44\xd1\x8f\x26\x14\x5c\x65\x64\xc6\x92\x57\x6a\x82\xbe\xcd\x74\x9e\x8b\xca\xa0\x21\x7b\x30\x1b\x89\xb4\xc3\x43\x2a\x97\xf1\x2b\x25\x18\x0d\x1a\x5d\x5b\x53\x87\x6e\x40\x68\x13\x6c\x18\x38\x62\x36\x53\x44\x3b\x8f\xf7\x49\xb5\x74\xfa\xa2\xe2\x69\x48\x75\xed\xf4\x45\xc5\xbe\x4f\x94\x2a\x94\x2e\xdf\x12\x1e\x64\x31\x68\xd7\xe1\xce\xdd\xa4\x37\xf6\xcc\xf2\xef\x18\xd4\xd3\x23\x5f\x45\xb4\xa6\x7c\xae\xaa\x47\xd2\x9f\x74\x9c\xff\x3e\x2d\x3e\x7e\x0e\xee\x07\x06\xf7\x62\xd0\xae\xc6\xe5\x0c\x09\x4d\xe1\x7c\xfb\xae\x74\x5a\x98\x46\x6f\x21\x5b\x6b\x37\x7f\x56\x95\x08\x8e\x54\x29\xaa\x1c\x43\x9c\x15\x6c\xf9\x75\x64\xc4\x74\xa7\x62\x4e\xa7\x73\x08\xd8\xbb\x81\xd9\xbb\xfb\xec\x7e\x26\x41\x4f\xe1\x44\xd8\x05\xd9\xf2\x4c\xd1\x0b\xb4\x0f\xde\xb1\x42\x93\x8c\x6b\xb7\x8d\xc7\x29\x73\x6c\x8f\x22\xd2\xa1\x2f\xd7\x11\x01\x34\x15\x26\x67\xe9\xb0\x7d\x2b\xa5\x3f\xfe\x82\xf8\x1f\x8c\xe1\x6f\x8f\x1d\x1c\xb5\xa2\xda\x5f\x64\x01\xb0\xbe\x86\xc4\x08\x9a\xda\xf3\xa9\xf5\x23\x49\xb9\xce\x09\xac\xc6\x07\x80\xb4\x34\x8a\xdf\x6c\xc0\xb2\x25\x41\xbe\x7f\x03\x6f\xef\x9a\xed\x21\x03\x9d\x81\x90\xd0\xaf\x2d\x9e\x72\x8d\x06\xcd\xed\x4f\xbe\x45\x83\x83\xc5\xc2\xe3\x70\x4a\x64\x4b\x5e\xd8\x2e\x97\x34\x0b\x2c\xbc\xfa\x2d\x3d\xea\x68\x97\x59\x84\xb5\x26\x92\x4f\xd0\xbf\xde\x39\xdf\xbc\x7f\xf6\x6e\xe8\xfc\xcf\xfb\xaf\x4f\xd0\x3d\x05\x12\xb7\x49\x24\xfe\x7b\x89\xe4\x4e\x12\xa9\x2d\x7a\xc6\x04\x36\xab\xfe\x9b\x2c\x7a\x8b\x83\xfe\x3f\xdd\xe4\x66\xf0\xec\x10\x01\x60\x1e\x34\xa8\x3e\x39\x11\x34\xa8\x98\x13\xe8\x33\xc2\xab\xf6\x79\x36\x1c\x76\xc3\xc5\x7d\x93\xea\x03\x7c\xca\x45\x83\x10\xbb\x64\xdf\x70\xd8\xd1\x64\xd7\x3d\xe1\x51\x75\xde\x41\xa1\x7f\xe5\xe9\x27\xec\xab\xf3\xb5\xd6\xf6\xee\x93\x8a\x6f\xe7\xf4\xf7\xc9\xc0\x5f\x5f\x3e\xff\x9c\x7e\x1f\xf5\xbc\xf4\xf0\x73\xd1\xdd\xb9\x5e\xa7\x73\xd1\xb7\x1a\xeb\x58\x75\xc9\x66\x6d\x6a\x67\x36\x8c\x42\xe3\x2b\x19\x73\x9e\xd4\xe7\xd3\xbb\xad\xdf\x91\x04\x07\xeb\x1c\xd1\xf7\x31\xd5\x4e\x0b\x78\x23\xc5\x5c\x12\xd5\x71\x09\xfb\x9d\x62\xf1\xa3\xec\x74\xe8\xae\x07\x67\x0d\x5d\x9d\x29\x96\x50\x7c\xc8\xb5\xdd\x28\xcc\x12\x25\xe5\x33\x61\xf7\x68\x4b\xb2\x95\x6e\x89\x22\xf9\xc6\x33\x91\xb5\xf1\xb9\xc9\xe6\x2e\x23\x99\x62\x89\x00\x4b\x8a\x1d\xeb\xa7\xb9\x58\x59\x8f\x6c\x59\xae\x24\xd5\x9a\x70\xeb\xa9\xb7\x24\x21\xe5\x13\x34\x2c\xb5\xe0\x9b\x6d\x27\x2d\x34\x66\xb6\x4b\x09\xa2\xd9\xeb\x8c\x2f\x6c\x36\xbb\x36\x69\x35\xb1\x15\x2b\xa7\x4a\x3a\x82\xb3\xb5\x0d\x81\x95\x89\xc2\x74\xad\x89\x02\x31\x83\xea\x7c\xf6\xd5\x58\x4b\xdc\xda\x6b\x2c\x07\x92\x3d\x38\xb2\xbf\x37\x1b\x06\x15\x87\x9d\x8d\xd3\x0a\xc5\x4f\x7b\xdd\xc3\xf6\x0e\x3b\x44\x82\x4e\xb5\x05\xa1\x71\x53\x59\xc1\x36\xa7\xba\x0f\xa4\x88\x3e\xa6\xdf\x2c\x1c\x25\x96\x16\x7e\x77\x61\x76\xcd\x79\x2a\x7c\x7b\x0b\x4a\x63\x4d\xfd\x1f\x2f\x7f\x7e\x09\xfd\xe4\xfe\xd7\x5f\x5e\x02\xf2\x02\xac\x16\x53\x81\x65\xe0\x61\xa5\x88\x56\xde\x92\xf0\x40\x48\xe5\xe5\x65\x0a\xe5\x72\xa2\x9d\xa9\xf2\x7c\x95\xb4\x5e\x26\xad\x53\x21\xb4\xd2\x12\x47\x6e\x48\xb9\xeb\x2b\x85\x60\x86\x99\x22\x83\x23\x72\xdd\x96\x47\xb2\x09\x6c\x5b\x1e\x66\x02\x0b\x3a\x5f\x30\x13\xb4\xaf\x13\x7e\x5a\x84\x42\x4a\xb1\x3a\xea\x22\x53\xbd\xa7\x2c\xb2\xc7\x26\x16\x89\xbe\xad\xf7\x29\xe4\xad\xa6\x5b\xc1\xe1\x7c\x99\xd7\x32\x2c\x8c\xc1\xa6\xb9\xa7\xb5\xe6\x3c\xa1\xbf\x2d\xe1\x2c\xf1\x69\x66\x5f\xf0\xd5\xd3\xfc\xc5\x26\x05\x9a\xe5\xdc\x86\xb1\x6b\x75\x44\x84\x79\xd7\xca\xbb\xfe\x23\x26\x72\xed\x16\x40\x66\x44\x72\xfd\x10\xc8\x9a\x2a\xc3\xb0\x15\xce\x0f\xc2\x73\x8b\xdd\x0a\xef\x02\xa8\xff\x04\xe6\xe9\xda\x5b\x2d\xe9\x38\xec\x8b\x86\x74\x5d\x78\x74\x23\xec\x7f\x38\x22\x9f\xbc\x20\x6b\xb8\xe4\x0f\xc7\x94\xe3\xd6\x5a\xaf\x2b\xc6\x5a\x67\xd0\xed\x53\xde\xdc\xcc\x4e\xfa\xd9\x57\xbd\x03\xd7\xa6\x91\xfd\x59\xcc\x6d\xfc\x80\xfe\xa0\x62\xa7\x2f\x32\xce\xc9\x06\x53\x99\xe0\x07\x93\x0a\x91\xb9\x22\x2c\x31\x63\x84\xfd\x1a\x31\x81\x03\x35\x82\xb3\xd3\x46\x9a\xd0\x6c\x51\x47\x80\x66\x54\x86\x2b\x2c\x09\xaa\x93\xf9\x92\x60\x4d\x7e\x0a\xf1\x9c\x5c\x2e\xe2\x70\xca\x31\x65\x6a\x94\xac\xb9\x4e\x8d\x7d\x9f\x44\x9a\x04\x3f\x50\x46\xd4\x08\x4a\xcb\x0f\xb1\x3f\xa5\x1c\xcb\xf5\xa9\x3b\xa5\xbc\xfc\xfb\x94\xcd\xd3\xf2\x4f\xf3\x16\xec\x5a\xb9\x94\x53\xfd\x63\x06\x1a\xca\xe7\xaf\xf9\x4b\x81\x83\xfe\xa0\x42\x9b\xcb\x2b\x3d\x89\xfa\x11\xf3\x80\x11\xd9\x97\x55\xf1\x99\x8b\xce\xa0\x2f\x8d\xb5\xc5\x4c\xc3\x64\x32\x81\xde\x0c\x53\x46\x82\x5e\x13\xb1\xb9\x38\x59\xc1\x9b\x57\x42\xd3\xd9\xba\xdf\x4c\x61\x2e\xbb\x7d\x1c\x41\xef\xff\xa4\x14\xb2\x57\x97\x4b\x4e\x47\x6e\xf4\x08\xa4\x9b\x9e\x30\xee\x20\x5c\x47\x66\x3c\xb2\x67\xbc\x05\x0d\x48\xab\x32\xb2\xcb\x78\x70\xca\xe7\x23\xe8\xe5\x56\xfe\xb8\xd7\x48\xbd\x19\x3c\xad\xb5\x6f\xf2\x72\x53\x3f\x9f\x37\x7c\x61\x24\x17\xf3\x24\x0c\x1c\x4b\x78\x6f\x13\xfd\x1d\x51\x7c\x6a\xef\x88\x7f\x86\x00\xcb\x48\x7f\x54\x09\xbd\x3c\x10\x2b\x37\xc9\x18\x61\x92\x83\xb9\xef\x87\x41\x93\x54\x4f\x5c\x7c\x8d\x6f\x5a\x84\x99\xae\xfa\xcd\xeb\xb7\x97\x2d\x4b\x8e\x25\x1b\x41\x2f\x4b\x50\x7b\xf0\x0d\xf8\x61\xd0\x4c\x9a\xca\x6e\x54\x31\xab\xfa\xf2\x2a\x4b\xae\x9a\xf2\x49\xbf\xf7\x65\xfe\xf5\x4b\x6f\xe0\x26\xc7\xc8\xb9\x97\xeb\x93\xa5\xf1\x7d\xf5\x05\xd9\x76\x37\x92\xf6\xff\x17\x64\x86\x63\xa6\xfb\x0d\xe2\x5d\x62\x09\x04\x26\x70\xd2\xd7\x0b\xaa\xaa\xce\xe1\x58\x32\x23\x6e\x24\x45\xd4\xef\x25\x92\xeb\x0d\x9a\x49\x4d\xc0\x35\xb4\x8a\x48\x8a\x19\xfd\x48\xfa\x2d\x84\x77\x16\x6e\x75\x7d\x0d\x07\xda\xa5\xa5\xf7\x7b\xdb\x1c\xd0\x26\x85\xef\x68\xf0\xbe\x94\x18\xa6\x29\xa1\x69\xef\x0d\x5c\x7f\x61\xf6\xd7\x5b\xed\x34\x61\x70\x89\xeb\x13\x35\x57\x41\x0b\xed\xe2\x31\xf1\x6a\xd3\xfc\xfa\x03\x4c\x72\x39\xd3\xa0\x37\xa8\x11\x35\xe8\xd6\xb8\xa5\xac\x8f\x51\x65\x6f\x90\x78\xf5\xec\xc0\xab\xd5\x35\x99\xb9\xbc\xfb\xf0\xbe\xc0\x32\x3d\xac\xea\x0d\xe0\x8b\x09\xf4\x7a\xad\x9e\x70\xff\x78\x4b\xcc\xfa\xf5\xd9\x6f\x1e\x06\x99\x45\x15\xf7\x06\x07\xc0\xd4\xfc\x3d\x3e\x3a\x8b\xcf\x85\x3d\x43\xa5\xd9\x60\xd6\xc6\xb6\xa6\xa2\xf4\xfe\xa8\xd1\x25\xdc\x26\xb1\xc2\xfe\xe8\x3e\xe3\xd4\x46\xb9\x3f\xd6\xee\x0d\x13\xdd\x42\x44\xbb\x80\xaa\x14\xf9\xaf\xb4\xb6\x1b\xaf\x7f\x07\x00\x00\xff\xff\xb5\xe5\x04\xfd\x53\x41\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xcf\x6f\x1b\x55\x17\x3d\x9d\xd8\x6e\xeb\xef\xa3\x2d\x2d\xbf\x41\xe2\xb1\x48\xa0\xaa\x26\xd8\x0e\x41\x30\x89\x13\xd2\xa4\x81\x88\xa4\x8d\x82\x29\x3b\xd0\x6b\xfc\xea\x8c\xb0\x67\xac\x37\xe3\x42\x50\x90\x1c\x07\x51\xa2\x44\xa2\x20\x41\x51\x45\x8b\x02\x12\x62\x05\x4e\x52\xb7\xa6\x10\x47\xfc\x07\xf7\x49\xdd\x21\xb1\x62\xc3\x8a\x25\x5b\xf4\x66\xc6\x0e\x34\x09\x6f\xf3\xee\xdc\x77\xef\xb9\xe7\x9c\x6b\xff\x76\x3c\xf6\x19\x00\x3c\x0c\xe0\x09\x00\x77\x01\x3c\x09\x60\xf5\x00\x82\x73\xc8\x00\xe2\x00\x0e\x1b\xc0\x61\x00\x47\x0d\xe0\x7e\x00\x8f\x1a\x40\x02\xc0\x29\x03\x78\x00\x40\xc6\x00\x1e\x02\xf0\x72\x54\xf7\x66\x54\x37\x67\x00\x06\x80\xf7\x22\x9c\xf7\x0d\xe0\x20\x80\x25\x03\x88\x01\x58\x89\xf2\x57\x22\xbc\xcf\x0d\xe0\x10\x80\xeb\x51\xdd\xb7\x51\xdd\xf7\xd1\xbd\x19\xd5\x37\x0d\xa0\x1b\x40\xcb\x00\x4e\x02\xf8\x3d\x7a\x3f\xd2\x05\xcc\x1d\x00\x4e\x74\x01\xff\x07\xb0\x10\x03\x8e\x01\x58\x8e\x01\xfd\x00\xae\xc5\x80\x47\x00\x50\x0c\x18\x04\xf0\x47\x0c\x78\x05\x40\x4f\x3c\xf4\xc0\x8d\x03\x4f\x03\xb8\x1c\x0f\x79\xff\x10\x07\x8e\x00\xd8\x88\x03\xc7\x01\xfc\x12\x0f\x79\xde\x8d\x87\x3c\x7f\x8d\x03\x49\x3d\x3f\x1e\xce\xf9\x33\x0e\x3c\xa6\x8d\x4b\x84\xf5\x8f\x27\xc2\xfa\xde\x44\xf8\xde\x9f\x00\xa6\x01\x8c\x27\x80\xb7\x00\x5c\x8d\xf2\x7f\x25\x00\x6d\xf9\xff\xb0\x73\x4e\x20\xf4\x54\x9f\x63\xd1\xad\x39\xdd\x07\xa0\x2b\xda\x99\x3e\x0f\x86\xe3\x82\x3d\xe8\xa3\x75\x6b\x2f\xb4\x4f\x47\xa3\x9c\xde\x85\xe6\xa3\x39\xeb\xfd\x68\xce\x07\xa3\x37\xad\x0f\x23\x52\xf2\x79\x8c\xf8\xbe\xb4\x2f\x54\x7c\x81\xd3\xd2\xe5\xf9\x59\xee\xf9\xac\x24\x3c\x8f\x17\x04\x46\x5d\xe7\xa2\x5d\x08\x2f\x59\x62\x52\x78\xc2\x67\x79\x71\xc9\x9e\x15\xff\x4c\xfa\x5c\x76\xd2\x63\xc1\xc5\xba\xbd\x76\xc4\xdb\xf8\x1e\x26\xc6\x30\x29\x2e\x89\x22\xa6\x22\xfc\xb3\xbc\x24\x70\xd6\xcd\x0b\x0f\xe7\xca\xbe\xed\x3a\x98\x96\x6e\x59\x48\x7f\x1e\x33\x21\x2c\x5e\x13\x4e\x1e\xb9\xf9\xb2\xc0\x79\x5e\xac\x08\xbc\x61\x17\x8b\xec\x82\xb8\x67\x6c\x2f\x1b\x91\x82\xcd\xbb\x15\xe6\x55\xa4\x18\xee\x54\xbd\x63\x97\x05\x9b\x0d\x54\xec\x5b\x59\x16\x98\x11\x65\x57\xfa\xe6\x94\x57\xb0\xf3\xe6\xe9\x4a\xc1\x33\x73\xae\xa5\x1b\x5e\x7a\xdb\x9e\xe3\x25\xb7\x57\x56\x92\xd3\xe7\x72\xe6\xa8\x14\x5c\xd3\x34\xc7\xb8\x2f\x2c\x96\x49\xa5\x5f\x34\x53\x7d\x66\xfa\x79\x96\xe9\xb3\xfa\xfb\x4f\xa5\xfa\x52\xa9\xe4\x24\xf7\x7c\x33\x27\xb9\xe3\x15\xb9\xef\x4a\x8b\xbd\x1a\x60\xb0\xa9\x8a\xe4\x25\x37\xef\xb2\xc1\x7f\x01\x0f\x25\x27\xb9\x53\xa8\xf0\x82\x30\x73\x82\x97\x2c\xd6\xf9\xb6\xd8\x4c\xc5\xf3\x6c\xee\x24\xa7\x26\xa6\xce\x98\xe7\x85\xf4\x6c\xd7\xb1\x58\xba\x37\x95\x1c\x75\x1d\x5f\x38\xbe\xa9\x9d\xb1\x98\x2f\xde\xf5\x9f\x2d\x17\xb9\xed\x0c\xb0\xd9\x39\x2e\x3d\xe1\x67\x5f\xcf\x8d\x9b\x2f\xec\xd4\x69\x3e\x17\x85\x34\xcf\x38\xb3\x6e\xde\x76\x0a\x16\x4b\x4e\x17\x2b\x92\x17\xcd\x71\x57\x96\x3c\x8b\x39\xe5\xe0\xd3\xcb\xf6\x0d\xb0\x30\xcc\x3a\xdd\xe9\x54\x36\x9b\x66\x3d\x3d\x4c\x87\xa9\xa7\xb2\xe9\x34\x1b\x66\x29\x66\x05\xdf\x43\xd9\x4c\xfb\x69\x30\xfb\x9c\x0e\x9f\x09\xca\x06\xd3\x29\xb6\xb0\x10\xb6\x0c\x65\x33\xa9\x93\x6c\x98\xa5\x99\xc5\x32\x03\xa0\x2f\xa9\xae\x16\xd5\x22\x35\x69\x03\x74\x45\xd5\x54\x4d\x55\xa9\x49\xeb\x6a\x49\xd5\x40\xdf\x51\x53\x55\xa9\x45\x77\xa8\x45\x1b\xd4\x50\xcb\x54\x57\x35\x6a\xd0\x4f\x6a\x95\xb6\xa8\x45\x0d\xa6\x16\xa9\x45\x2d\x5a\x57\xcb\xd4\xa0\x2d\x6a\x52\x03\x74\x8d\x5a\xb4\xa5\x3e\xa0\x26\x6d\xaa\x25\x55\xa5\xba\xfa\x90\x9a\xea\x63\xd0\x57\xd4\xa2\x9b\xaa\x16\x40\x55\xe9\x16\xdd\x6c\xf7\x68\x98\x75\x3d\x49\x2d\x52\x9d\xa9\x25\xb5\x18\xf0\x68\xd1\x8f\x3a\xa2\x0d\xaa\xff\x57\x33\x6d\x07\xa9\x06\xdd\xa6\x3a\x6d\xaa\xaa\x5a\xa2\xdb\x74\x87\x9a\xfb\x00\x7d\xb3\x2b\xd9\xd2\x7f\x8f\x7b\xd5\xab\x95\xbd\xfb\x27\xc6\x34\x44\x35\x74\x84\xb6\xd4\x2a\x68\x6d\xb7\x07\x5f\xd0\xcf\x5a\xf1\xf5\x80\xf4\x0a\xe8\x06\x6d\xb7\x5d\x58\xd3\x13\x77\x66\x6b\x65\xbb\xe9\x37\x55\x4d\x23\xdf\x50\x35\xda\xd6\x16\xd2\x46\x3b\xf5\x35\x35\x69\x1b\x74\x95\xb6\xa8\xae\x2e\xef\x4c\xdc\x4b\x96\x56\xa2\x8d\x52\xb5\xbd\x4c\xba\x15\x34\xb7\x7a\x19\x7d\x1a\x88\x8d\xac\xd5\xa2\x56\x86\x41\x9f\x74\x7a\x3b\xdb\xf9\x28\xe8\xa8\xb3\xe0\x07\xb1\xc7\x8a\xf7\x74\x6c\x3f\xfc\xb5\xce\xca\x43\x65\x7f\x07\x00\x00\xff\xff\x3e\x06\x8d\x37\x08\x07\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
