// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package homie

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x41\x6f\xeb\x36\x0c\xbe\xf7\x57\x10\x42\x07\x24\x40\x6d\xb5\x39\x0d\x9d\x6b\x60\xc0\x0e\x0f\x43\xb7\x07\x6c\x6f\xbb\x16\xb4\x45\xc7\xf2\x53\x24\x57\x92\x9d\x06\x46\xfe\xfb\x60\x3b\x4e\xdc\xce\x4e\x73\x68\xdf\xa5\x95\x28\x92\xdf\x47\xf2\x0b\xdd\x34\x20\x28\x93\x9a\x80\xa5\x46\x7b\xd2\x9e\xc1\x7e\x7f\x15\x09\x59\x43\xaa\xd0\xb9\x07\x66\xcd\x96\xc5\x57\x00\x00\x63\x6b\x6a\x54\xb0\x11\xc1\xdd\x0a\xda\x93\xdb\x0c\xa7\x17\x17\xdc\xad\x0e\xfe\x6f\x63\x5e\x9e\x4a\xd4\xa4\x46\xaf\xff\xf7\xf0\xd2\x2b\x7a\xe3\xd1\x79\xe5\xab\xb8\x69\x40\xde\xfd\xac\x81\xfd\x46\xb5\x4c\x09\xd0\x7b\x2b\x93\xca\x93\x63\x10\xc2\x7e\x1f\xf1\x7c\x35\x11\x59\xa9\x21\xbd\xc6\x1a\x34\xd6\x09\xda\xc0\xca\x75\xee\xa1\xe3\xf3\xe4\x8d\x51\x89\x79\x99\x40\xed\xe2\x95\x8c\x23\x1c\xd5\xad\xb0\x74\x14\x28\xa9\xbf\xb3\x38\x92\xc3\x43\x86\x90\x61\x90\xe6\x54\x5b\xa3\x83\xaa\x64\x71\xc4\x65\x1c\x71\x8c\x23\xae\xe4\x04\x2d\x5e\xa9\x09\xeb\xb8\xc5\x8a\xd0\x66\xf2\xa5\xcd\x24\x64\xfd\xa6\x6b\x13\xa6\x57\x8d\x1c\xc6\x39\x81\xe1\x31\x51\x34\x78\xf6\x97\xee\x6f\xe0\xbc\x95\x25\x09\x10\xe8\xb1\xb7\x0b\x1f\x58\x72\xa5\xd1\x4e\xd6\x04\xda\x6c\x2d\x96\x0c\x9c\xdf\x29\x7a\x60\x5b\x29\x7c\x7e\x7f\x77\x7b\xfb\xd3\x5c\xeb\x7c\x4e\x28\xe6\xde\xec\xf4\xc3\x21\x70\xe0\xb7\x11\x41\xab\xab\x15\x3b\x8d\xff\xd7\x61\xee\xc3\xd8\x7d\x7e\x36\xd5\x29\xf2\x5f\x54\xd5\xbb\x51\x11\x9f\xa3\xd6\xc6\x9c\x29\x28\x31\x62\x37\x4f\xa4\x69\xc0\xa2\x5e\x13\x5c\x6b\xdc\xd0\x0d\x5c\xd7\x2d\x19\xb8\x7f\x80\x50\x74\x7a\x76\x4f\x27\x41\xb7\x3f\xc2\xf9\x8a\xce\x74\xae\x77\x10\x6d\xc9\x1d\x4e\x5f\xe9\x0c\xe5\x71\xc0\x59\x87\x03\x7f\x99\x01\x3d\x1f\xf2\x32\xb9\x29\x15\x6d\x48\x7b\xf4\xd2\xe8\x30\x35\x3a\x93\x6b\x76\x8e\xf8\x2b\xc8\xd2\xd2\xa0\xa3\x12\x85\x90\x7a\x7d\x7f\xcb\xe2\x28\x35\xe2\x28\xcd\xc2\x19\xcd\xe2\xc8\xa5\x56\x96\x1e\xfc\xae\xa4\x07\x86\x65\xa9\x64\xda\x41\xf2\x02\x6b\xec\x1f\x59\x2c\x4c\x5a\xb5\x64\xc2\xad\x95\x9e\x16\xbf\xff\xfd\xf5\xcf\xb0\x95\xb3\x5e\xcb\x6c\xd7\x5f\x4b\xb4\x8e\x16\xdd\x18\xb6\x43\xf7\xf7\xfb\xe5\x0d\xe8\x4a\xa9\x1b\x58\x2d\x97\x11\xef\xd3\xc5\x11\x6f\x79\xc4\x11\x2f\x2d\x5d\xd4\x19\x52\x8e\x2e\x2d\xbd\x1d\xcd\x80\x7e\x51\x6e\x2d\xde\xf3\x3c\x3f\xe2\x79\x41\xbf\x8f\x10\xf1\x19\x59\x47\xbc\xdb\x10\x67\xb7\xd2\xe8\x7a\x38\x1e\xfe\x9d\x30\xaf\x46\x5f\xa0\xf6\xb7\x75\x14\x50\xd3\x80\x6b\xa5\x95\x7e\xf9\xf6\xc7\x23\x2c\xfa\xf3\x3f\x7f\x3d\x02\xe3\x02\x5d\x9e\x18\xb4\x82\xa3\x73\xe4\x1d\xaf\x49\x0b\x63\x1d\x3f\xee\x2d\x17\x6a\xf2\x41\xe2\x78\xea\x7a\xeb\xb7\xde\x9a\x18\xe3\x9d\xb7\x58\x86\x1b\xa9\xc3\xd4\x39\x06\x19\x2a\x47\xcb\x0f\x44\x3d\xed\xcb\x81\xc0\xc9\xf2\x39\x04\x72\xb9\xce\x55\xfb\x3d\x2b\x7a\x3c\x6f\x36\xc6\x5a\xb3\x9d\xc2\x98\xee\x7c\xe1\x3e\xb0\xef\xbc\x70\xbc\x78\xae\xc8\xee\xc2\x51\xeb\x5b\x2e\xc5\x67\xf4\x3b\x71\x2d\xe0\xec\x90\x3f\x05\xf3\x34\xd1\x37\xd8\xa3\x51\xff\x00\xf0\x43\xed\xb3\xfa\xfa\x18\xf8\xb1\xbc\x8a\xd1\x35\x2c\x31\xfd\x3e\x83\x73\xd9\xd2\x3e\x2e\x8a\xeb\xc5\xb0\xbf\x97\xa1\x25\x14\xbb\x45\x56\xe9\xb4\xf5\x87\xc5\x12\x9a\x57\x3b\x26\x57\x85\x0b\xa5\x96\xfe\xcb\x40\x44\xea\xf5\x57\xfd\x68\x50\x2c\x96\xbf\x1c\x5d\xf7\x87\xf3\x71\xa7\x9f\xa4\xff\x5f\x00\x00\x00\xff\xff\x8b\x4b\xdd\x49\xf5\x0a\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x4f\x6b\x13\x41\x18\xc6\x9f\xc6\x7a\x70\x41\x50\xcf\x1e\x5e\x0f\x56\x45\xa6\xce\x26\x46\x74\x92\x4d\xd5\xfe\x01\xb1\xc1\x52\xd6\x9e\xbc\x8c\xc9\x98\x2c\x26\x33\xeb\xcc\x6c\x51\xec\x41\xd3\x83\x07\x11\x04\x11\xbf\x46\x15\x0a\xf5\x50\x3f\xc3\xec\x17\xf0\x93\x78\x90\x6c\x52\x45\x9c\xd3\xef\xf7\xbc\xef\x3c\x33\x3f\x2f\x2c\x7e\x06\x80\x45\x00\x17\x01\xb4\x01\x9c\x06\xf0\x04\xb3\x93\x03\x38\x03\xe0\x05\x80\xf3\x00\x5e\xcf\xe7\x1f\x00\x0c\x17\x80\x4f\x00\xce\x01\xf8\xb5\x00\x5c\x01\x70\xb6\x36\xf3\x66\x0d\x58\x98\x77\xd4\x00\x9c\x9a\xbf\x81\x7b\xde\xdb\xec\x69\xe1\x15\xd6\xd4\x6e\xd6\x53\x24\x4f\x02\x87\x1d\x39\x2a\x14\xb6\x55\x6e\xac\x67\x5d\x37\xc8\xfa\xec\x7e\x31\x70\x2c\x35\x82\xfa\x6a\xf7\xee\xf3\x6c\x28\xc7\x66\xd9\x16\xd1\xd6\xa3\x94\xad\x5a\x25\x7d\x66\x34\x5b\x93\x5e\x09\xaa\xf3\xf8\x0e\xe3\x0d\x16\xdf\xa2\x7a\x43\x34\x9b\xd7\x79\x83\xf3\x68\x53\x3a\xcf\x52\x2b\xb5\x1b\x49\x6f\xac\xa0\x87\x55\x07\x75\x0b\x2b\xc7\xa6\x6f\xa8\xfd\x4f\x71\x27\xda\x94\x7a\x50\xc8\x81\x62\xa9\x92\x63\x41\x7f\x5c\xd0\x76\xe1\x5c\x26\x75\xd4\x7d\xd0\x5d\x67\x3b\xca\xba\xcc\x68\x41\xf1\x32\x8f\x56\x8d\xf6\x4a\x7b\x96\xbe\xca\x95\x20\xaf\x5e\xfa\x1b\xf9\x48\x66\xba\x45\xbd\xa1\xb4\x4e\xf9\xe4\x71\xba\xc1\x6e\xff\xdd\x9b\xfe\xe7\x99\xb2\x6c\x5d\xf7\x4c\x3f\xd3\x03\x41\xd1\xd6\xa8\xb0\x72\xc4\x36\x8c\x1d\x3b\x41\x3a\xaf\xd4\x25\x8d\x16\xcd\x30\xd1\x97\x63\x9e\x24\x31\x2d\x2d\xd1\x14\xf9\xa5\x24\x8e\x69\x85\x38\x89\xca\x3b\x49\xfd\x64\xd4\x4e\x6e\x4e\xf1\x6a\xb5\xd6\x8e\x39\xed\xed\xcd\xae\x74\x92\x3a\xbf\x46\x2b\x14\x93\xa0\x7a\x0b\xe1\x63\x39\x29\x27\xe5\x9b\x70\x14\xbe\x96\xfb\xe5\xe4\xbf\xa0\x7c\x4f\xe5\x7e\xf9\xb6\x8a\x7e\x84\xef\x53\x0a\xdf\xc2\x01\xc2\x97\x70\x1c\x0e\xca\x77\xe1\x30\x1c\x87\xa3\x70\x88\xdf\x01\x00\x00\xff\xff\x9d\x8b\x72\xca\x46\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
