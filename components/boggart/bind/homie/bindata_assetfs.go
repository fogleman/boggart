// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package homie

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xfd\x6f\xdb\x36\xfa\xff\xbd\x7f\xc5\xf3\xe5\x52\x48\xde\x22\xc9\x49\xbb\x7e\xef\x5c\xd9\xc5\x6e\xbb\x43\x71\xe8\xda\x61\xcd\x6d\xc0\xf5\x7a\x01\x2d\xd2\x36\x13\x8a\x54\x49\xca\x4e\x6a\xf8\x7f\x3f\x50\x6f\x96\x65\xc9\x76\x12\xa7\xdb\x80\x09\x58\x27\x91\x0f\x1f\x3e\x2f\x1f\x3e\x2f\x8c\x97\x4b\x20\x74\xc2\x04\x05\x14\x49\x61\xa8\x30\x08\x56\xab\x27\x21\x61\x73\x88\x38\xd6\x7a\x88\x12\x3c\xa5\x9e\x61\x86\x53\x34\x7a\x02\x00\x50\x9f\xcc\xc6\x2f\x39\x9d\x98\x62\x32\x23\x98\x3d\x5b\x7f\xd8\x67\xb9\x04\x76\xf6\x17\x01\xe8\x07\x3a\x67\x11\x85\xa7\x1a\xc1\x09\x08\xc6\xab\xff\x7c\x81\x63\x0a\xab\x55\x38\x56\x10\x8c\x9e\x6c\xad\x9e\x80\xcf\xb1\x36\x97\x69\x42\xb0\xb1\x84\x1b\x14\xd9\xa6\x3a\xc6\x9c\x8f\x42\x1d\x29\x96\x18\x30\xb7\x09\x1d\x22\x9c\x24\x9c\x45\xd8\x30\x29\x82\x2b\x3c\xc7\xf9\x24\x1a\x11\x19\xa5\x31\x15\xc6\x5f\x28\x66\xa8\x6b\x79\x5e\xc8\xf7\x46\x31\x31\x75\x9d\xe5\x72\x63\x33\xff\x1f\x52\xc5\xd8\x00\x3a\xef\xf7\x5f\x78\xfd\x33\xaf\x7f\x7e\x71\xf6\xed\xa0\xff\x7c\xd0\xff\xf6\xdf\xfd\xff\x1f\xf4\xfb\xd6\x64\x4e\xaf\x17\x06\x39\xfb\x51\x18\xe4\xb2\x34\xb5\xa0\x82\xd4\x25\x0f\x83\xd2\x4e\x61\x40\xd8\xbc\xd0\x7a\xdb\xba\x8a\x4d\x67\x1b\xe6\xad\x51\x4c\xa4\x8a\xbd\xa9\x92\x69\x02\x49\xca\xb9\xd7\xa4\x6d\xd2\x33\x91\xa4\x26\x5f\xd0\xa0\xca\x28\x39\x1e\x53\x5e\xd2\x8e\x8d\xe8\xa4\xcc\xa8\xc7\xa9\x31\x52\x14\xa6\xce\x3f\x50\x6d\x31\x58\x06\x2c\x92\xf9\xcb\x02\x2b\xc1\xc4\x34\x7b\xd7\x31\x6a\xe5\x58\x3e\x04\x1b\xec\x19\x39\x9d\x72\x3a\x44\xb1\x24\x98\xa3\x62\x0c\xab\x29\x35\x43\xf4\x55\x3e\xb8\x9f\x49\x46\x97\xa3\x77\x88\x2a\x18\x7e\x2f\xc5\x84\xa9\x18\x14\xd5\x06\x2b\x03\x24\x83\x25\x02\x1f\x56\xab\x83\x99\x8e\x25\xb9\xad\xf1\xfc\x95\x71\x0e\x63\xda\xe0\xe9\xc3\x77\x8a\xc2\xad\x4c\x41\xa7\x8a\xbe\xba\xe3\x16\x11\xe6\x7c\x8c\xa3\xeb\x21\xc2\x91\xc5\xb0\xeb\x14\xdc\x9d\xde\xcb\x0e\xa7\x64\x8e\x61\x15\x3c\xb0\x86\x09\xf6\x12\xb9\xa0\xca\x93\x93\x09\x82\xa6\x29\x7e\xce\x19\x16\x82\x8d\xc2\x80\x75\x38\x3b\xc8\x1d\x7c\x0c\x28\x10\x2c\xa6\x54\xfd\xde\x90\x40\x8f\x8b\x83\x05\x4b\x28\x44\x96\xfd\xf4\xf1\xb0\x40\xef\x8a\x04\xaa\xb0\xa6\x6a\x1b\x06\xbf\xb2\x84\x3e\x00\x03\x61\x90\x45\x8e\x46\xdc\xc9\xa3\x5a\xcb\x67\xf1\x5a\x86\xbd\x7a\x80\x8a\x38\xc5\x6a\xc2\x6e\xac\x18\xdb\xb3\x4a\x2e\x5a\x92\x50\x24\xb9\x17\x13\xef\xec\x1c\xec\x9b\x8e\xcb\xb7\x1b\xed\x9d\x9d\x77\x04\xce\x9b\xcb\x04\x0b\xca\x77\x84\xca\x9b\xcb\x7a\xd2\xdb\xa0\x9a\x9d\x8f\x9a\x29\x0d\x1b\xa3\xd8\x38\x35\x54\xe7\x66\x0c\x83\xd9\x79\xcb\xca\xb4\x8a\xae\x02\xcf\x41\xe0\xf9\x18\xab\x3c\x68\x43\x26\xcf\xa5\x91\x92\x8f\xe5\x4d\x57\xc8\xe5\x6c\x14\xe2\x9a\xde\x1c\x27\x9a\x7a\x9c\x89\x6b\x34\xaa\x3b\xdb\xfa\x3a\x9a\xd1\xb9\x92\xc2\xb3\x01\xdc\xfa\x34\x0c\xf0\x28\x0c\x78\x8b\x73\xc3\x20\xe5\x2d\xa3\xbb\xdc\xb2\xc3\xd1\xdb\x86\x2c\x4b\x8b\x96\x3d\x0c\x1e\x73\x5a\xe5\xbb\xec\x23\xfb\xd7\xd3\x46\xb1\x84\x92\xec\x08\xe4\xe3\xc4\x78\x8a\xea\x44\x0a\xcd\xe6\x14\x84\x5c\x28\x9c\x20\xd0\xe6\xd6\x22\x79\xc1\x88\x99\x0d\xce\xfa\xfd\xa7\x5d\xa6\x33\x33\x8a\x49\xd7\x9c\xda\x71\x86\xcc\xac\x94\x2f\x26\x9e\xc5\xd5\x39\x5a\xbb\xff\xbb\xd2\xef\xa5\xdb\xcd\x6c\x27\xab\xf5\xca\x5f\x30\x4f\xf7\xae\x0a\x83\x2e\xd1\xec\x9a\x1d\x0a\xd9\xa8\xd4\x2d\xc8\x72\x09\xca\x06\x61\x38\xb1\x75\xd7\x29\x9c\xcc\xad\x30\x30\x18\x82\x9f\xc7\x2a\x7d\xb9\x06\x74\x5b\xb5\xb5\xde\x68\x87\xe5\x72\x02\x62\x55\x3e\x29\xeb\xbb\xc0\x74\x88\x5c\x5f\xb0\x93\x00\xaa\x92\x90\x7e\x2a\xf8\x22\x16\x27\x9c\xda\x82\x2e\x2b\xf5\xfc\x3c\xec\xa2\x5d\x82\x6f\x6c\x99\x28\x5a\xe2\x28\xc1\x84\x30\x31\x1d\xf4\xd1\x28\x8c\x24\xa9\xa0\x79\xa5\xa5\x40\xf7\xab\x2e\xff\xf9\xfe\xdd\x5b\x5f\x67\xc5\x25\x9b\xdc\xe6\x9f\x09\x56\x9a\xba\x99\x1b\x16\xa5\xf5\x57\xab\xde\x29\x88\x94\xf3\x53\x38\xdf\xa8\x26\xad\x1c\xa3\x30\x48\x14\x3d\xc8\x32\x94\xeb\xd6\x0a\xb9\x83\xbc\xda\xfd\x20\xde\x9b\x25\x6c\xab\x35\x77\xba\xb8\x1b\xd0\xfb\x77\x08\x83\x0e\x58\x87\x41\x16\x21\x8e\x90\x7e\x8e\x9e\x60\xa0\x0c\xd2\xe4\xe1\xa9\xe6\x6f\x4a\x62\x12\x61\x6d\x20\xa6\x5a\xe3\x29\xfd\x33\xd5\xdc\x25\xd5\xd8\x5e\x69\xa3\x6f\x9a\x49\xc5\x3e\x4b\x61\x30\x87\xec\x3b\xab\x61\xbc\xac\x99\x05\x25\x6d\x34\xb0\xc3\x08\x62\x6a\x66\x92\x0c\x51\x22\xb5\x41\xc0\xc8\x10\x8d\x4b\x4f\x20\xc8\xab\xb1\x21\x7a\x55\xbc\xd4\xa6\x84\x9c\x63\xce\x6c\x0f\xd9\x61\xe2\x7a\x63\x66\x68\x0c\xeb\x6e\x6e\x57\x4d\x97\x37\x69\x13\xa9\x86\x88\xd3\x39\xe5\x68\xed\x24\x61\x94\xe4\x5e\xd1\xc5\xe5\xa0\x7d\x56\x62\xf6\x59\x2b\x64\x9b\x4f\x05\xb6\x37\x39\x6b\x0b\x30\x08\x75\x82\x45\x75\x44\xe8\xa7\x94\x29\x8b\xe7\xaf\xc3\xc0\x4e\xec\x3a\xec\x2d\x65\x61\x97\x05\x0a\x79\x5f\x94\xf2\xbe\x38\x48\xde\x8c\x4b\xd6\xd5\x16\x41\xd9\xd0\x1b\x83\x36\xdc\x5c\x98\x25\xf7\x5c\x61\x31\x9b\x36\xaa\x8f\x84\xe3\x88\xce\x24\x27\x54\x0d\x11\xe6\xd4\xb6\x43\x59\x50\x1c\x22\x04\xa5\xba\x75\xc5\x77\x28\xbc\x05\xcf\x43\xa6\x1e\x8c\x83\x2a\x1e\x3c\x06\x12\x7e\xac\x07\x9b\xdf\xdc\xd7\xd6\xbf\x58\x51\xdc\xe6\x62\xdb\xc6\xb1\xcf\x36\x15\x5c\x96\x64\xf6\x24\x2f\xf4\x10\x3d\x2f\x7d\x5e\x99\xca\xa2\xa1\xfc\x18\x85\x41\xb9\xe0\x31\x9d\xcb\xc5\xa5\x96\x9c\x91\xd6\xd0\xd6\xb6\xe0\x30\x20\x74\x19\x36\x26\xb6\xe7\xd7\xd4\x78\xcf\xf6\x59\x75\xa3\x7f\xd7\xe9\x38\x66\x66\xab\x7f\xd7\x69\x14\x51\xad\x6b\xc5\xef\x7b\x2a\x48\x99\x83\x76\x5d\x0f\xdc\xcf\x7a\x61\x60\xd5\xbf\x67\x52\x2f\x2e\x0d\x8b\x06\xbc\x71\xa5\xf9\xbb\xce\xf2\xdf\x17\xc5\xeb\x9f\xa9\xfd\x8e\xa9\xbd\x9e\xb2\x9b\x59\xb9\xec\x08\xb6\x53\x79\x3e\xa3\xd1\xe6\x55\x53\x91\xb8\xa5\xea\xec\x26\xbf\x54\xdf\x0a\x7b\x7a\x57\x38\xac\x0b\x6b\xf6\xb0\x67\xb5\x63\xfc\x2e\xb1\x36\x3a\xa4\x81\x85\x7b\x35\xb1\xb0\xb7\xee\xdf\xd9\xcc\xc2\x9d\x1a\x5a\x76\x0a\x27\x32\x53\x28\x6b\x67\xd7\x01\xa0\x9b\xf5\x81\x2d\x6c\xce\xd5\x7f\x7b\xb4\x4e\x76\xdd\xc5\x16\xac\x2f\x6e\x13\x0a\x68\x2c\x6d\xb1\x72\x40\x3f\xb6\x51\xf7\x44\x33\x1a\x5d\xdb\x33\xbf\xee\x58\x3d\xbd\x60\x26\x9a\x95\x99\x6f\x5b\x87\xfc\x04\xb4\x8d\x57\xa2\xb9\x89\x62\xc2\x54\x04\x99\xbf\x7b\x80\x8c\xb2\x6e\x5f\xad\x20\xdb\x96\x92\xaa\x71\x83\x60\xaf\xce\x59\x7f\xca\x26\x20\x15\xb8\x5b\xca\x33\x61\x50\xaf\x7d\xfc\xc5\x73\xd4\xbb\xb3\x59\x44\x1a\x8f\xa9\xea\x28\x08\xbb\xed\x52\x94\x7f\xb5\xa9\x5f\x8a\x2e\xb9\xdb\x66\x09\x36\x86\x2a\x31\x44\xff\xfd\xe0\x7d\xf3\xf1\xd5\x87\xbe\xf7\xd7\x8f\x5f\x9f\xa0\x07\x1a\x24\xed\xb2\x48\xfa\xc7\x32\xc9\xbd\x2c\xb2\xa5\xf4\x84\x4b\x6c\xb5\xfe\x83\x28\xbd\xc6\x81\xfb\x1f\x3f\x7f\xe9\xbd\xba\x8b\x01\xb0\x20\x2d\xae\xcf\x2f\x93\x2c\x2a\xa6\x14\x5c\x4e\x45\xf3\x7c\x9e\xf5\xfb\x87\xe1\xe2\xa1\xd5\xf4\x1d\x62\xca\xa8\xc5\x88\x87\x94\xdd\x70\xb7\x5b\xad\x43\x9b\xc1\xa3\xfa\xfc\x00\x87\xfe\x96\x17\x67\xb0\xeb\xf2\x0c\xba\x2e\xd0\xe0\x81\x35\xf8\x5a\xa6\xc6\x6b\xf9\x8b\x03\x9b\xf2\xab\x93\xbc\x5c\x82\x36\xd8\xb0\xe8\xf5\xc5\x8f\x6f\xc0\xcd\xdf\xff\xf5\xf3\x1b\x40\x01\xc1\x7a\x36\x96\x58\x91\x00\x6b\x4d\x8d\x0e\xe6\x54\x10\xa9\x74\x50\xd5\x58\xda\x17\xd4\x78\x63\x1d\x44\x3a\x1f\xbd\xc8\x47\xc7\x52\x1a\x6d\x14\x4e\xfc\x98\x09\x3f\xd2\x1a\xc1\x04\x73\x4d\x7b\x47\xdc\x75\x5d\xdb\x95\x02\xac\x47\x1e\x47\x80\x19\x9b\xce\xb8\xad\xf6\xaf\xf2\xfd\x8c\x8c\xa5\x52\x72\xd1\xb6\x47\xee\x97\xac\xd8\xac\x9d\x09\xbb\xac\x56\x6f\x7e\x55\x14\xc1\x90\x41\x04\xb2\x13\x74\xda\x1c\xad\x42\xc5\x72\x03\x0d\x79\x01\x6b\x23\xce\xd3\x97\xd5\xc4\xaa\x80\x43\xb6\x6f\x13\x09\xa5\xfb\xaf\xf4\x11\x9d\x1f\x5c\xe9\xe0\xea\x53\x4a\xd5\xad\x5f\xf3\xbf\x35\xc8\xd5\x63\x38\x7d\xac\xed\x86\x9d\x48\x7b\x94\x3d\xd7\xb0\x6a\xec\x5d\xc3\xdb\x17\xd8\xbc\xd0\xbd\x13\xe4\xc7\xd9\xbe\x8e\xf1\xab\xda\xa7\x9f\xe0\xe8\xfa\x88\xfb\x54\x8d\x9e\xdd\xa5\xfa\xe8\xd8\xe0\xb0\x3f\xff\x54\xa7\xe0\xc4\x2d\xff\x12\xd4\xf3\x15\xc5\xe4\xd6\x9d\xa4\x22\xeb\x47\xc1\xed\x35\x8e\xd1\x8c\x5f\x69\x9f\x09\x66\x5e\x97\x9a\x32\x31\x7d\x27\xde\x48\x4c\xdc\xde\xcb\xcd\x1f\x44\x55\x5c\x8a\x1b\x99\xd7\x58\x10\x4e\x95\xab\x9a\x4c\xed\xc3\x26\xe0\x2a\x0b\x91\x94\x1b\x18\x0e\x87\xe0\x4c\x30\xe3\x94\x38\x6d\xc4\xf6\x11\x74\x01\x3f\xbd\x95\x86\x4d\x6e\xdd\x76\x0a\xfb\x64\x57\x19\x03\x70\xfe\xae\x94\x54\xce\x69\x37\x1d\xbd\x31\x03\x50\x7e\x71\xd3\xb6\x83\xf0\x36\xb1\xfc\xe8\x1e\x7e\x33\x46\xe8\x20\x77\x4b\x37\x91\x0d\x3b\x4c\x4c\x07\xe0\x54\xd0\x7c\xe6\xb4\x52\xaf\x7a\x2f\xb7\xc6\x57\x55\xf5\xe5\x56\x72\xc3\xff\x59\xcb\xa5\x22\x8f\x5d\xc7\x32\xde\xfb\xdc\x7f\x47\x34\x9f\xde\xcb\xf1\x4b\x18\xf0\xc9\xe6\x57\x23\x5f\x08\x22\x17\x7e\x7e\x2f\x03\xc3\x0a\xcc\x6e\x14\x93\x36\xab\x9e\xf8\xf8\x0a\xdf\x74\x18\xb3\xd0\xfa\xa7\x77\xef\x2f\x3a\x54\x4e\x15\x1f\x80\x53\x5e\x03\x39\xf0\x0d\x44\x31\x69\x27\x2d\x6c\x37\x68\x1c\xab\x6d\xf5\x1a\x2a\xaf\x1a\xc7\xf3\xc4\x75\xbe\xaa\xfe\x0a\xe4\xf4\xfc\xfc\x3a\xb5\x3a\xfb\x2e\x9d\xdb\x88\xb0\xad\x50\x36\xee\x27\x2a\xfb\xff\x0f\x74\x82\x53\x6e\xdc\x16\xf3\xce\xb1\x02\x0a\x43\x38\x71\xcd\x8c\xe9\x66\x70\x38\x96\xcd\xa8\x9f\x28\x99\xb8\x4e\x6e\x39\xa7\xd7\x4e\x6a\xb3\x84\xa5\xd5\x54\x31\xcc\xd9\x67\xea\x76\x10\xde\xdb\xb8\x4d\xfd\xb6\x2e\x76\x37\x14\x77\x9d\xaa\x6a\xc9\xaa\x98\x0f\x8c\x7c\xac\x57\x32\x45\x0d\x63\x87\x9d\x9e\x1f\xcd\xb0\x98\xd2\xb5\x67\xda\xf0\x37\xc7\xdb\x42\xda\xa7\xe6\x81\x6e\xd3\xc0\x10\x96\xab\xf6\xe9\x6b\x18\x56\x36\x66\xc4\xe9\x6d\x11\xb5\xf8\xd5\x86\xa4\x72\x8d\x75\xa3\xd3\xcb\x23\x7a\x79\xf7\xd3\x19\x96\xac\x2c\x1f\xae\x3f\xd6\xb6\x2c\xee\x6d\x9c\x5e\x1e\xd9\x9c\xce\x30\xb8\x9f\xe1\x1c\x73\x77\x5b\xfc\xd5\xe3\xc0\xb2\xe6\x61\xa7\x77\x07\x88\xda\x7f\x8f\x8f\xcc\xfa\x77\xad\xc8\x6d\x0c\x5b\xbc\x66\x79\xad\xad\x3f\xdb\x9f\x31\x0e\x49\xb5\x79\x9e\xc8\x7e\xba\x5c\xee\xd4\x45\xb9\x3f\xcf\xee\x4d\x11\x87\xa5\x87\x6e\x03\x35\x29\xaa\xdf\xba\xac\x3b\x85\xff\x05\x00\x00\xff\xff\xd5\x23\xf7\xc2\x99\x2e\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcf\x6f\x1b\x45\x18\x7d\x76\xec\x42\x0d\xb4\x50\xa1\x82\x10\x48\x53\xa4\x14\x2a\xd8\xb0\x76\x08\x82\x4d\x9c\xd0\xa4\xad\x8a\x88\xd5\x28\x98\x72\xe0\x80\xa6\xf6\xd4\x59\xb1\xde\x35\xb3\xbb\x2d\x95\x7a\x70\x1c\x04\x8d\x5a\x89\x5f\x42\x48\x1c\x8a\x2a\x40\xe2\xc0\xc1\x49\xeb\xd6\x14\x79\x03\xff\xc1\x37\x37\xc4\x81\x03\x57\xae\x9c\x38\xa1\xd9\x5d\x3b\xd0\x24\xcc\x65\xbf\xf9\xe6\x7b\x6f\xde\x7b\xb3\xbf\x1f\xca\x7d\x01\x00\x8f\x00\x78\x12\xc0\xb7\x00\x1e\x03\xf0\x7c\x06\xf1\xba\x92\x01\xf6\x03\x58\xcf\x24\x33\x9f\x67\x80\x7d\x00\xbe\xcb\x00\x8f\x02\xf8\x21\x03\x1c\x06\xf0\x4b\x3a\xf7\x6b\x3a\xf7\x47\x06\xc8\x03\xf8\x2b\x03\xdc\x07\xe0\xef\x14\x97\xcd\x26\xfb\xfd\x59\x20\xa7\xef\xcd\x26\x73\x87\xb3\xc0\xb8\xd6\x90\x05\x8e\x01\x98\x4f\xcf\x9d\x2c\xb0\x92\x01\xde\xcb\x02\x0f\x03\xf8\x6d\x0c\x98\x02\xf0\xe7\x18\xf0\x38\x80\x23\x39\x60\x06\x80\x95\x03\x4e\x03\xb8\x98\x4b\xf4\xff\x9c\x03\x9e\xd1\x7a\x72\xc0\x01\x6d\x24\x0f\x1c\x02\x70\x30\x0f\x14\x00\x3c\x9d\x07\x9e\x00\x60\xa4\xfd\xd3\xf9\x84\xff\xed\x3c\xb0\xa4\xef\xcd\x03\xef\x00\x18\xa4\xfd\xa7\xf6\x01\x3a\x92\x42\x9a\x95\x5e\x63\x00\x1e\x40\xe2\x4b\x6b\xbd\x3f\xed\x67\x01\x3c\x98\xd6\x1a\x7b\x00\xdb\xeb\xa1\x44\x4a\xbc\x74\x5e\x07\x91\xe4\x81\xe3\x41\x20\xed\x73\x61\x20\x30\x2f\x3d\x5e\xaf\x71\x3f\x60\x4d\xe1\xfb\xbc\x21\xb0\xe0\xb9\xe7\xed\x46\xf2\x91\x4d\x26\x85\x2f\x02\x56\x17\x17\xec\x9a\xf8\x77\x33\xe0\x72\xd4\x3e\x11\x7f\xd8\xb8\x3f\xac\xf8\x90\xdf\xc7\xa2\xb8\x20\x1c\x54\x52\xf2\x33\xad\xc0\xf6\x5c\x2c\x27\x78\xbc\x21\xdc\x3a\xce\x72\x27\x14\x78\xcb\x76\x1c\x76\x4e\xdc\x43\x3d\xc1\x8e\x4b\xc1\x2e\x79\x21\xf3\x43\x29\xe6\x46\x53\x17\xed\x96\x60\xb5\x58\xe9\x9e\x93\x2d\x81\x65\xd1\xf2\x64\x60\x54\xfc\x86\x5d\x37\xe6\xc3\x86\x6f\x54\x3d\x4b\x03\x5e\x7d\xd7\x5e\xe1\x4d\x6f\x42\x86\x85\xa5\x33\x55\x63\x41\x0a\xae\x85\x19\x27\x78\x20\x2c\x56\x32\x8b\xaf\x18\xe6\xa4\x51\x7c\x89\x95\x26\xad\xa9\xa9\xe7\xcc\x49\xd3\x2c\x2c\x72\x3f\x30\xaa\x92\xbb\xbe\xc3\x03\x4f\x5a\xec\xf5\x98\x83\x55\x42\xc9\x9b\x5e\xdd\x63\x33\xff\x21\x9e\x2d\x2c\x72\xb7\x11\xf2\x86\x30\xaa\x82\x37\x2d\x36\xda\x5b\x6c\x39\xf4\x7d\x9b\xbb\x85\xca\x6b\x95\x93\xc6\x59\x21\x7d\xdb\x73\x2d\x56\x9c\x30\x0b\x0b\x9e\x1b\x08\x37\x30\xaa\x97\x5a\xc2\x62\x81\x78\x3f\x78\xa1\xe5\x70\xdb\x9d\x66\xb5\x15\x2e\x7d\x11\x94\xdf\xac\x9e\x32\x5e\xde\x9e\xd3\x7a\xce\x0b\x69\x9c\x74\x6b\x5e\xdd\x76\x1b\x16\x2b\x2c\x39\xa1\xe4\x8e\x71\xca\x93\x4d\xdf\x62\x6e\x2b\xde\xfa\xe5\xc9\x69\x96\x94\x65\x77\xbc\x68\x96\xcb\x45\x76\xf4\x28\xd3\xa5\x79\xa4\x5c\x2c\xb2\x39\x66\x32\x2b\xde\xcf\x96\x4b\xc3\xa3\x99\xf2\x8b\xba\x7c\x36\x1e\x9b\x29\x9a\xec\xf2\xe5\x04\x32\x5b\x2e\x99\xc7\xd8\x1c\x2b\x32\x8b\x95\xa6\x41\x9f\xa8\x8e\xea\xa8\x36\xf5\x69\x43\xad\xa9\x0e\xe8\x7b\xea\xab\x36\x45\x74\x97\x22\xda\xa4\x9e\x5a\xa7\xae\xea\x50\x8f\x7e\x52\xd7\x68\x40\x11\xf5\x98\x5a\xa5\x88\x22\xda\x50\xeb\xd4\xa3\x01\xf5\xa9\x07\xfa\x8a\x22\x1a\xa8\x0f\xa8\x4f\x37\xd5\x9a\x6a\x53\x57\x7d\x48\x7d\xf5\x31\xe8\x6b\x8a\xe8\x96\xea\xc4\x54\x6d\xba\x4d\xb7\x86\x18\x4d\xb3\xa1\x6f\x52\xab\xd4\x65\x6a\x4d\xad\xc6\x3a\x22\xfa\x51\x57\xb4\x49\xdd\xff\x03\xd3\x56\xdc\xea\xd1\x1d\xea\xd2\x4d\xd5\x56\x6b\x74\x87\xee\x52\x7f\x0f\xa2\x6f\x76\x34\x23\xfd\xd7\xdf\xeb\x5e\x5d\xdd\x13\xdf\x4e\xe2\xa0\x81\xba\x06\xba\xb1\x33\x80\xeb\xb4\xb5\x6d\x79\xa7\xb4\xbe\xea\x68\xe0\x75\xd5\xa1\x2d\x1d\x0f\x6d\x0e\x5b\x5f\xd2\x80\xba\xea\xa3\x6d\xa6\xdd\xb4\x6a\x79\xda\xbd\xea\xec\xe6\xfc\x76\x0c\x8e\x26\x18\x7d\x16\x3b\x48\xf3\xd2\x62\xaf\xce\x81\x3e\x1d\x61\x47\x91\x5f\x89\x11\x5d\x16\xbf\xf2\x2e\xef\xb6\x6b\x0c\x7b\xf1\xdf\x18\xbd\x63\x62\xe9\x9f\x00\x00\x00\xff\xff\x75\x38\x05\x0f\x2e\x06\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
