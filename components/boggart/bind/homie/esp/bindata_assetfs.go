// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package esp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7d\x73\xdb\x36\x93\xff\x3f\x9f\x62\x1f\xd4\x19\x49\xad\x29\xc9\x76\x9b\xbb\x53\x24\x65\x72\xcd\x75\xda\x9b\x34\xc9\x34\x6e\x3b\x73\x69\xce\x03\x11\x90\x04\x07\x04\x58\x00\x94\xac\x78\xf4\xdd\x9f\x01\xc1\x57\x89\x94\x28\x5b\x4e\x93\x99\x70\x26\x0e\x09\x2e\x77\x81\x7d\xf9\xed\x62\x49\xdd\xde\x02\xa1\x53\x26\x28\x20\x5f\x0a\x43\x85\x41\xb0\x5e\x3f\x1a\x12\xb6\x00\x9f\x63\xad\x47\x28\xc4\x33\xea\x19\x66\x38\x45\xe3\x47\x00\x00\xc5\x9b\xf1\xf8\x15\xa7\x53\x93\xdc\x8c\x09\xe6\x17\xe3\xdb\x5b\x60\x67\xff\x29\x00\xbd\xa0\x0b\xe6\x53\x78\xac\x11\x9c\x80\x60\x3c\xfb\xd7\x15\x38\xa0\xb0\x5e\x0f\x7b\xf3\x8b\x84\x71\x8f\xb0\xc5\xf8\x51\x8d\x10\xc5\x66\xf3\x92\x94\x02\xc5\x54\xaa\xc0\x9b\x29\x19\x85\x10\x46\x9c\x7b\x9b\xb4\x9b\xf4\x4c\x84\x91\x71\x0f\x6c\x50\xc5\x94\x1c\x4f\x28\x4f\x69\x27\x46\xd4\x52\xda\xc3\xae\x74\x0a\x5d\x29\xb8\x55\xe3\x7a\x5d\x49\x34\x9c\x44\xc6\x48\x01\x66\x15\xd2\x11\x72\x17\xa8\x20\x01\xac\x14\xe6\x4b\x77\xb2\xc4\x4a\x30\x31\x8b\xcf\x75\x80\x2a\x39\xa6\x07\xc1\x06\x7b\x46\xce\x66\x9c\x8e\x50\x20\x09\xe6\x28\x19\xc3\x6a\x46\xcd\x08\x7d\xe3\x06\xf7\x33\x89\xe9\x9c\xa5\x47\x28\xb3\xdf\x8f\x52\x4c\x99\x0a\x40\x51\x6d\xb0\x32\x40\x62\x7b\x22\xe8\xc2\x7a\xdd\x98\xe9\x44\x92\x55\x81\xe7\x9f\x8c\x73\x98\xd0\x0d\x9e\x5d\x78\xae\x28\xac\x64\x04\x3a\x52\xf4\xd9\x81\x22\x7c\xcc\xf9\x04\xfb\x1f\x46\x08\xfb\x86\x49\xd1\x6e\x25\xdc\x5b\x9d\xa7\x35\x96\x8b\x0d\xc3\x32\x1f\xc2\x1a\xa6\xd8\x0b\xe5\x92\x2a\x4f\x4e\xa7\x08\x36\x55\xf1\x9b\x63\x98\x4c\x6c\x3c\xec\xb1\x6a\xbe\xc3\x9e\x33\x70\xad\xbf\x50\x41\x8e\xe3\x28\x04\x8b\x19\x55\x9f\x9b\x9f\xd0\xe3\x7a\xc9\x92\x85\x14\x7c\xcb\x7e\xf6\x70\x9e\x42\x0f\xf5\x13\xaa\xb0\xa6\x6a\xdb\x49\xfe\x64\x21\xbd\x87\x87\x0c\x7b\x31\xf8\x6c\x40\x97\x03\xc6\x8a\xcb\xe4\x34\x45\xce\x22\xc6\xf9\x9c\x62\x35\x65\x37\x76\x1a\xdb\x77\x95\x5c\x56\xc0\xb9\x2f\xb9\x17\x10\xef\xec\x1c\xec\x99\x0e\xd2\xb3\x1b\xed\x9d\x9d\xd7\x60\xef\xcd\x55\x88\x05\xe5\x3b\xd0\xf6\xe6\xaa\x98\x3e\x4a\x54\xf3\xf3\xad\x4c\x81\x8d\x51\x6c\x12\x19\xaa\x9d\x1a\x87\xbd\xf9\x79\xc5\x93\x51\x06\xd0\x02\x2f\x40\xe0\xc5\x04\x2b\x87\xfb\x10\xcf\xe7\xca\x48\xc9\x27\xf2\xa6\xc6\xa6\x43\xce\xc6\x43\x5c\x58\x37\xc7\xa1\xa6\x1e\x67\xe2\x03\x1a\x17\x8d\x6d\x6d\xed\xcf\xe9\x42\x49\xe1\xd9\x1c\x60\x6d\x3a\xec\xe1\xf1\xb0\xc7\x2b\x8c\x3b\xec\x45\xbc\x62\x74\x97\x59\x76\x18\x7a\x5b\x91\x69\x92\xae\x90\x11\x66\xe9\x92\xde\x18\x2f\x88\x0c\x25\x30\x95\xc2\x78\x67\x17\x10\x78\x13\xef\xa2\xbf\x3b\x81\x71\xac\xcd\x55\x14\x12\x6c\xe8\x15\xa1\xdc\xe0\x3a\x88\x4a\x9e\x51\x78\x09\x6d\x67\xb9\x97\x58\x1b\x48\x12\xa0\x61\x81\xcd\xf6\xd0\x7e\xac\x3b\xd6\x80\xc5\x94\xdf\x0e\x15\x13\x06\xd0\x50\xfb\x8a\x85\xc6\x81\xdc\x5f\x08\x87\x21\x67\x3e\xb6\xb1\xd8\xbb\xc6\x0b\xec\xee\xfe\x85\xc6\x44\xfa\x51\x40\x85\xe9\x2e\x15\x33\xb4\x6d\xa7\x76\x29\xdf\x1a\xc5\xc4\xac\xdd\x42\xd0\x2e\xce\xb9\xfb\x93\x54\x01\x36\x80\xce\xfb\xfd\x27\x5e\xff\xcc\xeb\x9f\x5f\x9e\xfd\x30\xe8\x7f\x3f\xe8\xff\xf0\x7f\xfd\xff\x18\xf4\xfb\xa8\x03\xa8\xd5\xe9\x0c\x7b\x8e\xff\x18\x75\xaa\x16\xdd\xa9\x5b\xb6\xc5\x6d\xae\x6b\x33\x7c\x51\x2b\x50\xab\x96\xcf\x5e\x23\x3b\x97\x5f\x9d\xb6\x86\xbd\x30\x29\xda\x4a\xa3\x06\x4f\x38\xcd\x7c\x32\xbe\x88\xff\x7a\xda\x28\x16\x52\x12\x43\xb2\x1b\x27\xc6\x53\x54\x87\x52\x68\xb6\xa0\x20\xe4\x52\xe1\x10\x81\x36\x2b\x8b\xac\x4b\x46\xcc\x7c\x70\xd6\xef\x3f\xae\x0b\x65\x33\xa7\x98\xd4\xdd\x53\x3b\x30\xdd\xcc\xd3\xf9\x05\xc4\xb3\x38\x77\x8e\x72\x38\x7a\x9e\xe2\x50\x0a\x43\x66\xbe\x93\x55\xfe\xe4\x1f\x98\x47\x7b\x9f\x1a\xf6\xea\xa6\x66\x9f\xd9\xb1\x20\x9b\x25\xeb\x27\x12\xbb\xa0\x98\x51\x38\xb1\xe5\xf5\x29\x9c\x2c\xec\x64\x60\x30\x82\xae\xcb\x9d\xfa\x2a\x07\xd8\x5d\xbe\xbc\x53\x73\x8e\x80\xd8\x25\x9f\x64\x65\xbc\xa9\x99\x72\xf1\x81\x9d\x04\x90\x81\x11\xfd\x3b\xe1\x8b\x58\x10\x72\x6a\x3d\x3e\x0e\x86\xae\x2b\x03\xd0\xae\x89\x97\x44\x86\x8a\xa6\x7e\x14\x62\x42\x98\x98\x0d\xfa\x68\x3c\xf4\x25\xc9\x5c\xf3\x5a\x4b\x81\xc6\xa5\x00\xac\x89\xbf\xad\xf0\xfb\xdf\xb7\xaf\x5f\x75\x75\x1c\x7d\x6c\xba\x72\x97\x21\x56\x9a\xb6\x13\x24\x48\xb4\xbf\x5e\x77\x4e\x41\x44\x9c\x9f\xc2\x79\x21\xdc\x86\x3d\x3b\x8f\xf1\xb0\x17\x2a\xda\x48\x33\xfb\xf0\x67\x83\x3c\x93\xde\x88\x77\x7d\x4d\x9a\x69\x73\xa7\x89\xeb\x1d\x7a\xbf\x84\x61\xaf\xc6\xad\x87\xbd\x18\x21\xee\x58\x0e\x25\x99\x4d\x48\xe2\x7c\xfd\x33\x2f\x80\x5e\xd9\x79\x7e\x2d\x7a\x0e\x29\x7a\x3e\x8b\x24\x03\xcd\xe0\xb2\x90\x21\x7e\x79\xd1\x24\xa9\x40\x09\x0f\xbb\xa1\x92\x46\xfa\x92\x5f\x05\xf8\x5a\x2a\x40\x17\x16\x06\x4b\x6c\x5f\xe1\xa0\x98\x77\x1a\x46\x75\x91\xc3\xe5\x2a\x6c\x94\xef\xb6\x1e\x7c\xae\x14\x5e\x1d\xf0\x64\xaa\x78\xc2\x74\xc8\xf1\x6a\x00\x42\x0a\x6a\xdd\x63\x67\x96\x3d\x7e\xce\x2c\xe4\xcb\x53\x38\xb1\x48\x11\xe7\xca\x0c\x32\xea\x97\xd0\x34\x3d\x4a\x42\xbb\xbf\xbc\xe8\xba\x22\xad\x51\xa2\xdc\x6f\xf3\x02\x6b\x6b\xf3\x0d\xe6\x4d\xed\x5e\xe0\x62\xed\x7e\xc8\x14\x4b\x0f\xc7\xb6\x3f\xf4\xe9\x26\x39\xe9\x24\x54\x32\xa4\xca\x30\xaa\xad\x55\x9c\xb4\x37\xf9\x58\xb3\xcc\xc6\xa6\x25\x46\x0d\x1e\xda\x0f\x2b\x09\x7c\xec\x5f\x05\x34\xc0\x8e\x6d\xfa\x3d\xbe\x55\x21\x20\x8f\xc4\x44\x3f\x2b\x04\x27\x8d\x82\x71\x27\xb3\xa4\x94\x3d\x9c\xd3\xee\x6a\x60\x83\xb2\xb9\x7a\xf6\x95\xbf\x9b\x47\x1e\xde\xe1\x69\xe6\x05\xab\xd8\x99\x0e\x73\x89\x7c\x02\x07\xdb\xc6\x45\x4a\x2a\xbb\x2a\x60\xef\xc7\x30\xb6\x51\xce\x11\x4a\x37\x7f\x17\xcc\xdc\x55\x5a\x73\x1b\x42\xe3\x1a\xb2\xc0\xbb\x99\x25\x2b\x2b\xc0\xbb\xcb\xbf\x6b\x0d\xfb\x4f\xd4\xaf\xb9\xcc\xb4\x92\xd5\xd4\x18\x26\x66\x0f\x5f\xcc\x42\x5a\x1c\x92\xfb\x97\xb5\x3f\x26\x7b\xb6\xaf\x75\x6d\xf3\xba\x76\x2a\x55\x00\x4a\xda\x0a\xc9\x9e\x22\x70\xad\xea\x11\x7a\x96\x9c\xa4\x9e\x80\x20\xa0\x66\x2e\xc9\x08\x85\x52\x1b\x04\x8c\x8c\x50\x7e\xaf\xd4\xf4\x5f\x60\xce\x08\x36\x52\xd5\x96\xb8\x9f\xaa\x98\x86\x23\x15\xd4\x1b\xdd\x9b\xb3\x42\xf7\xe6\x75\x68\xd5\x74\xa7\x52\xb6\x51\xfb\x06\xf6\xe2\xe3\xde\xbc\xd6\xbc\x95\xc3\x4e\xe1\x44\xc6\x0b\x8a\x8b\xd3\x22\x0a\xd4\x33\x6f\x58\x9f\x3a\xbe\x71\x56\x3a\x4e\xed\x96\x57\xaf\x09\x6b\x5b\x5b\x02\x9a\x48\xc9\x1b\xf5\x6d\x86\xf1\xcb\xd9\xa4\x11\xe3\xcf\xa9\xff\xc1\x06\x7e\xde\xad\xf1\xf4\x92\x19\x7f\x8e\x40\xe0\xc0\xbd\x78\xd9\x58\x83\x0b\x82\xaa\xf1\x6c\x6a\x49\xdb\x35\x25\x88\x2d\xde\x01\x64\x94\x35\xfc\x7a\x0d\xb1\x58\x4a\x32\x00\x86\xde\xde\x35\xc7\xbd\x19\x36\x05\xa9\xa0\xbd\xb5\x78\x26\x0c\xea\x54\x8f\x3f\xf9\x1e\xd5\xf6\x5c\x6b\xd5\x22\xa2\x60\x42\x15\x2a\xbd\xfe\xb6\x68\xa2\xac\x8e\xeb\xf5\x12\xf7\x83\x4a\xb7\xfe\x48\x3a\x44\xf5\x3a\x0b\xb1\x31\x54\x89\x11\xfa\xff\x77\xde\x77\xef\x9f\xbd\xeb\x7b\xff\xf5\xfe\xdb\x13\x74\x4f\x85\x44\x75\x1a\x89\xbe\x2c\x95\xdc\x49\x23\x5b\x8b\x9e\x72\x89\xed\xaa\xbf\x90\x45\xe7\x7e\xd0\xfe\xab\xeb\x4e\x3a\xcf\x0e\x51\x00\x16\xa4\xc2\xf4\xae\x91\x6a\xbd\x62\x46\xa1\xcd\xa9\xd8\x8c\xcf\xb3\x7e\xbf\x99\x5f\x18\x7a\x63\xb0\xa2\xb8\x4a\x2f\xa0\xa8\x66\x1f\x6d\x12\xbb\x4a\xc9\x10\x28\xb9\xd4\x23\xf4\xfd\x1d\x30\x65\x5c\xa1\xc4\x61\x2f\xe5\xdc\x4c\x23\x87\x5a\xdd\x72\xff\x14\x36\x6f\x60\xd0\x7f\xb2\x69\x0c\xfb\xb6\x11\xb5\x5b\x87\x61\xcf\x6a\xed\x58\x45\xb9\x34\xf8\x8a\x0a\x2b\x89\x7c\x51\x75\xf9\xeb\xcb\xe7\x5f\x8b\xf2\xa3\x36\x9b\x0f\x6f\x2a\xef\xae\x00\x0f\x6b\x2a\xbf\x35\xd8\x44\xba\x79\xc9\x1b\xd7\x7f\xa9\x03\xab\x48\x08\xd7\x23\xc8\xf8\x25\x43\x8e\x61\x8e\x55\xf9\x7d\x8a\xc9\x2a\xbf\x1b\x07\xc5\x7d\xa2\xfd\xb0\xd5\xbe\x51\x72\xa6\xa8\x3e\x68\xbd\xfb\x61\xb6\xf8\xdd\x63\x26\x20\x31\x67\x80\xd5\x8c\x09\x6f\x22\x8d\x91\xc1\xa0\xee\x6b\x8a\x26\x2c\xbd\x09\x56\x50\xbc\xc8\x3c\xa8\xd2\x22\x25\x4a\x26\xa6\x32\xde\x0d\x2e\x68\x6e\x93\x12\x85\xfb\x28\xcc\x99\xc4\xa2\xbb\xdb\x46\xa6\x24\x13\xac\x10\x60\xc5\xb0\x17\x67\x04\x21\x97\x31\xf6\xc7\x22\x97\x8a\x19\x43\x45\x9c\x13\x72\x92\x80\x89\x11\xea\x97\x46\xf0\x4d\xfe\x90\x91\x06\xf3\xf8\x91\x92\xdb\xa7\xb7\x53\xb9\xb0\x5e\xef\xda\x0e\x6e\xa9\x4d\x87\x58\xa4\x1c\x39\x13\xd4\x9b\x53\x0b\x3d\x83\xf3\x7e\x58\x87\x38\x75\x47\xe6\x33\x8f\x09\x4c\x56\x86\x6a\x90\x53\x78\x4c\x36\xbf\xc5\x28\xa9\xa0\xb4\xb4\x03\x3a\x66\x76\xda\x4d\xfb\x9e\x5b\x48\x74\x47\xb2\x4f\x17\x74\x3f\xda\x7d\x91\x8e\x82\x03\x41\x26\x56\xa6\x9f\x3c\x7b\x0f\x94\xd8\xdf\x66\xdb\xba\x93\x6d\xf9\x4a\x31\x35\xc5\x35\x75\x97\x6b\xbc\x14\x4b\xab\xb9\x54\xec\xa3\x14\xd6\x11\xe2\xeb\xf8\xf3\x3c\x8f\xd3\xa9\x01\xa2\x64\xf8\x51\x0a\x8a\x4a\x9d\x9a\xed\x7e\x8c\x34\x78\xbb\x81\x13\x0f\x0a\x99\x34\x65\x6a\xfa\x9b\xa5\x6f\x96\x0d\x0d\x20\xff\xd0\x79\x57\x6b\xc5\x7d\xbf\x3c\x95\x6a\x84\x38\x5d\x50\x8e\xf2\x2c\x1c\xd7\x89\x5e\xf2\x81\xb3\xab\x43\x2e\xd2\x32\xe4\xa2\xb2\x0a\xa9\xd2\xa8\x7b\x57\xc8\x02\x2a\xa3\xe4\x73\xd8\x1d\xd6\xac\xf8\xa0\xb1\x6e\x8d\xc9\x8c\x9e\xa4\x33\x7a\xd2\x68\x46\x70\x40\x81\x6c\xed\x61\xd2\x89\xbb\x6a\x39\xbb\xcc\x4b\x64\x17\xfd\x6e\x3c\x86\x36\x45\xff\x8e\x98\xa2\x64\x84\xd2\xb3\x5d\xfa\xaf\x0f\xd9\x9a\x5b\x55\x05\x29\xd4\x16\xc0\x77\x28\x55\xbf\x98\xa2\xf4\xbf\x95\xc4\xc4\xc7\xda\x40\x40\xb5\xc6\x33\xfa\xb5\x44\x3d\xb8\x6f\xdc\x0c\xbe\xf6\xa1\xd6\x24\xb5\xc4\x36\x76\x15\x6e\x7d\x89\x08\x06\x45\x14\x7b\xe9\xd8\x5b\x27\x4b\x8a\x8e\x34\x4c\xb2\x40\xff\x76\x5f\x5a\xff\x0c\x31\x2e\xd1\x9a\x43\xb8\xe4\x22\xe4\xd8\xa7\x73\xc9\x09\x55\x23\x84\x39\x55\x39\xe6\x3d\x38\xc2\x6d\x6a\xe1\x6e\xbe\x90\x61\xc2\x43\x79\xc3\xaf\x45\xd0\xf9\xc7\xed\x7d\xdf\x3e\x56\xa6\x2e\xeb\x11\xe9\xc5\xb8\x49\x7b\xea\xfe\x06\xe6\xe2\x4a\x4b\xce\x48\x25\xc4\x55\x3d\xd0\xcc\x19\xea\x14\x1b\x10\x4f\x4e\xa7\x9a\x1a\xef\x62\x9f\x56\x4b\xbf\xb0\xd1\xd1\x24\x60\x66\xeb\x17\x36\x3a\xf2\x7d\xbb\xf7\x2b\xec\xae\xa9\x20\x69\x2e\xda\xf5\xf3\x9e\xbb\x69\xef\x78\x1d\xa9\xf4\xe7\x7c\x73\x8a\x49\xd6\x50\xbe\xbd\x05\x6d\xb0\x61\xfe\xcf\x97\xbf\xbe\x84\xb6\x3b\xff\xfd\xb7\x97\x80\x7a\x04\xeb\xf9\x44\x62\x45\x7a\x58\x6b\x6a\x74\x6f\x41\x05\x91\x4a\xf7\xb2\x97\x7d\xba\x2b\xa8\xf1\x26\xba\xe7\x6b\x37\x7a\xe9\x46\x27\x52\x1a\x6d\x14\x0e\xbb\x01\x13\x5d\xdf\xee\x94\xe3\xba\xba\x73\x44\xa9\xf9\x4b\xc6\x74\x02\xf9\xc8\xc3\x4c\x60\xce\x66\x73\x6e\x2b\x88\x6b\x27\xcf\xc8\x40\x2a\x25\x97\x47\x5d\x64\xb2\x71\x48\x44\xa4\x97\x55\x22\x9c\xbd\xe3\x7d\x70\x01\xf8\xed\x63\x05\x37\xff\x26\x7b\x23\x18\xef\x8f\x20\xce\x13\xa7\x5b\xc3\x19\x9c\xdc\x96\xfc\xcc\xed\xd7\xe1\xac\xdf\x7f\xfc\x34\xbb\xb1\x4e\x1c\x2d\x96\x5c\xe7\x63\xd7\xfa\x88\x1e\xd6\xbb\xd6\xbd\xeb\xbf\x23\xaa\x56\xdd\x82\x93\x59\x95\x5c\x3f\x84\x67\x4d\xb4\x15\x58\xeb\xce\x0f\x22\x33\xf7\xdd\x0d\xd9\x05\xa7\xfe\x04\xc2\x93\xb5\xd7\x46\xd2\x71\xc4\x17\x03\xe9\xba\x70\xd9\x0d\xb1\xff\xe1\x88\x72\xb2\xcf\x1a\xac\x94\xec\xe2\x98\x7a\xcc\xa3\xf5\x7a\x23\x58\xb7\x05\x34\xfb\x1d\x41\x16\x66\x27\xed\xf4\x27\x05\x9d\x6e\xdc\x4f\x6d\x4f\x23\x11\x17\xd9\xd0\xee\x6c\xc4\xe9\x8b\x54\xb2\x7b\x4d\xa3\xed\x26\x15\x46\x1b\x44\xf6\x08\xb1\xc2\x9c\x53\xfe\x7b\xc8\x25\x26\x7a\x00\x67\xa7\x95\x34\xc1\x2b\x1c\xd0\x01\xa0\x29\x53\xc1\x12\x2b\x8a\xb6\xc9\x7c\x45\xb1\xa1\xbf\x04\x78\x46\x2f\xe7\x51\x30\x11\x98\x71\x3d\x70\x6b\xde\xa6\xc6\xbe\x4f\x43\x43\xc9\x4f\x8c\x53\x3d\x80\xd2\xf2\x03\xec\x4f\x98\xc0\x6a\x75\xda\x9d\x30\x51\xfe\xb1\xe6\xfa\x69\xb9\x71\x33\xe7\xd7\xba\xcb\x04\x33\x3f\xa7\x4e\xc3\xc4\xec\xb5\x78\x29\x31\x69\x77\x36\x68\x33\x7d\x25\x29\xfb\x67\x2c\x08\xa7\xaa\xad\x36\xd5\x67\x0f\x36\x85\xb6\xb2\xd1\x16\x71\x03\xa3\xd1\x08\x5a\x53\xcc\x38\x25\xad\x2a\x62\x7b\x08\xba\x84\x37\xaf\xa4\x61\xd3\x55\xbb\x9a\xc2\x1e\xf1\xce\x76\x00\xad\xff\x51\x4a\xaa\xd6\xb6\x5e\x32\x3a\x7a\x63\x06\xa0\xba\x49\x29\xb6\x83\x70\x15\x5a\x7e\x74\x0f\xbf\x39\x23\xb4\xd6\x18\xe9\x61\x11\x9c\x89\xd9\x00\x5a\x59\x94\x5f\xb4\x2a\xa9\xd7\x9d\xa7\x5b\xe3\xeb\xec\xa5\x6d\x3b\x9b\x37\xfc\xcb\x6a\x2e\x12\x2e\x0d\x1c\x4b\x79\x6f\x9d\xfd\x8e\xa8\x3e\xbd\x97\xe3\xa7\x50\x60\xd9\xd3\x1f\x6d\xa4\x5e\x41\xe4\xb2\xeb\xb6\xd5\x30\xca\x9c\xb9\xed\x07\xa4\x4a\xab\x27\x5d\x7c\x8d\x6f\x6a\x94\x99\xac\xfa\xcd\xeb\xb7\x97\x35\x4b\x8e\x14\x1f\x40\x2b\xdd\xc5\xb7\xe0\x3b\xf0\x03\x52\x4d\x9a\xe8\x6e\xb0\x11\x56\xdb\xcb\xdb\x58\xf2\x66\x28\x9f\xb4\x5b\xdf\x64\xed\x82\x56\xa7\xeb\xea\xed\x0c\xe5\xda\x74\x61\xb1\x6f\x7b\x41\xf1\x78\x37\x54\xf1\xff\x2f\xe8\x14\x47\xdc\xb4\x2b\xd4\xbb\xc0\x0a\x28\x8c\xe0\xa4\x6d\xe6\x4c\x6f\x82\xc3\xb1\x74\x46\xbb\xa1\x92\x61\xbb\xe5\x34\xd7\xea\x54\x93\xda\x84\x6b\x69\x35\x55\x0c\x73\xf6\x91\xb6\x6b\x08\xef\xac\xdc\xcd\xf5\x55\x7c\x16\x5a\x5a\x7a\xbb\x95\xd7\x80\x71\x51\xf8\x8e\x91\xf7\xa5\xc2\x30\x29\x09\xed\x78\xab\xd3\xf5\xe7\x58\xcc\x68\x6e\x9d\x2a\x1f\x5c\xe0\xed\x89\xda\xa3\x60\x85\x7a\xf5\xd8\x7c\xb5\xae\xbe\xfd\x01\x46\x99\x9e\x19\x69\x75\xb6\x88\x2a\x6c\x6b\x61\x29\x7d\xc6\x9a\xb2\xd5\x71\xa8\x9e\x7e\x36\x56\x0b\x4d\x76\x2e\xef\x3e\xbc\x2f\x88\x4c\x3e\xf9\x6a\x75\xe0\x5f\x23\x68\xb5\x6a\x91\x70\x3f\xbf\x05\xe6\xed\xed\xd9\xaf\x1f\xc6\x33\x8b\x26\x6e\x75\x0e\x70\x53\xfb\xf7\xf8\xde\x59\xbc\x2e\xec\x19\x36\x86\xad\xcf\xc6\xb9\xad\xaa\xc9\xb2\x3f\x6b\x34\x49\xb7\x2e\x57\xb4\x6e\x6f\x73\x49\x75\x94\xfb\x73\xed\xde\x34\xd1\x2c\x45\xd4\x2b\x68\x93\x22\xfb\x89\x68\xbe\xf1\xfa\x77\x00\x00\x00\xff\xff\x5a\x85\xc2\x05\xaa\x47\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5b\x6c\x54\x55\x17\xfe\x3a\x67\x3a\xd3\x7f\x7e\x2f\x88\x88\x78\x65\xfb\x50\x84\x90\xa9\x33\x55\x89\x19\x3a\x2d\x85\x42\x24\x52\x24\x65\xc0\x07\x1f\xcc\xa1\xb3\x19\x4e\x98\x39\x67\x72\x2e\x68\x13\x62\xda\xa9\x51\x08\x24\x5c\x12\xd4\x78\x81\x00\x26\x9a\x68\xcc\xf4\x32\x30\x40\x7b\x1a\x7d\xc2\xc4\x87\xb5\x1f\x34\x1a\x12\x1e\x7c\x30\xbe\xfb\x60\xe2\x93\xd9\x67\xef\x99\x22\x6d\x13\x27\x99\xac\xbd\xd7\x5e\x97\x6f\x7d\xeb\x3b\x77\x57\xc7\x2f\x00\x00\x03\xf0\xb4\xfc\x77\x00\x9b\xa5\x8d\x21\xfa\xdd\x8e\x01\x0f\x01\xf8\x21\x06\x74\x02\xf8\x25\x06\xfc\x0f\xc0\xdd\x18\xf0\x08\x80\x3f\x62\x40\x17\x80\xbf\x63\x40\x02\x80\x61\x00\x6b\x00\xa4\x0c\x60\x2d\x80\xf5\x86\x8a\xdf\x62\xa8\xf8\x6d\x06\x20\x4b\x8f\x18\xc0\xa3\x00\x0e\x18\xc0\x3a\x00\x96\xa1\xea\xd7\x0c\x20\x09\xe0\x84\x01\xc4\x01\x9c\xd5\xfe\x0b\x86\xaa\xff\xa9\xa1\xfa\x5d\xd1\xf6\x6b\x1d\x3f\xab\xe3\xe7\x74\xdc\x77\xda\x7f\x5b\xfb\x49\xd7\xf9\xc9\x00\xba\x01\xdc\x31\x80\x4d\x00\x3a\xe2\xea\x7d\x73\x5c\xbd\x67\xe2\x2a\x6f\x4b\x1c\x18\xe8\x00\xfa\xe3\x0a\xe7\xbb\x9d\xc0\x03\x00\xce\x77\x02\xab\x00\x5c\xea\x04\x5e\x06\x50\xd7\xf7\xdf\x3b\xd5\x1c\x7f\x75\x02\x7d\x00\x56\x25\x80\x57\x01\x0c\x27\x80\xc7\x01\x7c\x98\x00\x9e\x07\xf0\x6d\x42\xcd\xff\x73\x42\xf5\xff\x35\x01\xf4\x48\xde\x92\x8a\xe7\xde\x24\xb0\x1a\xc0\x60\x52\xcd\x51\x48\xaa\x39\xdf\x4c\x02\x29\x00\xc5\xa4\xea\xe7\x68\x3b\x9e\x04\x9e\x04\x70\x4e\xe7\x7d\x93\x54\x38\x17\x74\xbd\x1f\x75\x9d\x3b\x3a\xfe\xb7\x24\xb0\x0f\xc0\x9f\x49\xe0\x2d\x00\x43\x5d\xca\xff\x45\x97\xca\x6b\xe8\xfb\xf7\x5d\x40\x87\x92\x40\x34\x3f\xb4\x3e\x9e\xd5\xe7\xb5\xda\xae\xd3\xb6\x4b\xdb\x55\xda\xca\x5d\x4b\x5c\x12\xf3\x53\x50\xd8\xb4\xa4\xf0\x30\x80\x67\xb0\xf8\x93\xf8\xfe\x0f\x85\x57\x72\xb5\x46\xeb\x51\xe2\x59\x0f\xa5\x1f\x43\xc7\x3e\x06\xb5\x2f\xb9\x2b\xb9\xa7\x07\x01\x3c\x21\x1f\xba\x8b\xec\xd0\x98\xcf\x3d\xe6\x1c\x66\xdd\x45\x0c\xba\xae\x39\x86\x41\xdf\x77\xad\x43\x81\xcf\xb1\xdd\x75\xcc\xe2\xa8\xe9\xf9\xac\xc2\x3d\xcf\x2c\x71\xec\x38\xc2\x47\x8f\x7a\x41\x05\x3b\x1c\xfb\xb0\x55\x52\xc6\xad\x30\x97\x7b\xdc\x67\x45\x7e\xcc\x1a\xe5\xf7\x3a\x7d\xd3\x6d\xbb\x87\x22\xc3\xba\xbd\xd6\xc9\x6c\x35\xf2\xb0\x7b\x08\x7b\x64\x1f\xc7\x2e\x5b\x36\x67\xbe\x55\x89\x02\x97\xf1\xb1\x8d\xdd\xde\x26\xec\xe1\xc7\x78\x19\xc3\x1a\xd5\x5e\xb3\xc2\xb1\xd7\x29\x72\x0f\xaf\x57\x7d\xcb\xb1\xb1\xcf\x75\x4a\x2e\xf7\x3c\x79\xa8\x72\xd7\x1f\xc3\x88\x02\x83\xfd\xdc\x2e\x62\xbf\x6f\xfa\x81\x87\x82\x55\xe1\x4e\xe0\xa3\x30\x56\xe5\x38\x68\x96\x03\x8e\x37\xac\x72\x99\x1d\xe2\xf7\x61\xef\x61\x83\x2e\x67\x63\x4e\xc0\xbc\xc0\xe5\x03\xed\xa8\xb7\xad\x2a\x67\xa3\x11\x15\x2b\x46\x56\x39\x5c\x6e\x16\xc7\xe0\x06\xb6\x6d\xd9\x25\x8c\xf0\xaa\xe3\xfa\xe9\x61\xaf\x64\x15\xd3\xdb\x83\x92\x97\x2e\x38\x39\x99\xbe\xed\xa8\x75\xc4\xac\x38\x3d\x6e\x90\x92\x83\xa7\x0b\xae\x69\x7b\x65\xd3\x77\xdc\x1c\x7b\x2d\x7a\x62\xc3\x81\x6b\x56\x9c\xa2\xc3\xfa\xfe\x15\xdf\x9f\xda\x63\xda\xa5\xc0\x2c\xf1\x74\x81\x9b\x95\x1c\x6b\xdf\x73\x6c\x24\xf0\x3c\xcb\xb4\x53\xc3\xbb\x87\x77\xa6\x0f\x72\xd7\xb3\x1c\x3b\xc7\xb2\x3d\x99\xd4\x0e\xc7\xf6\xb9\xed\xa7\xe5\xf8\x39\xe6\xf3\x77\xfc\x17\xaa\x65\xd3\xb2\xb7\xb2\xd1\x23\xa6\xeb\x71\x3f\x7f\xa0\xb0\x2b\xfd\xca\x62\x9c\xc4\x73\x98\xbb\xe9\x9d\xf6\xa8\x53\xb4\xec\x52\x8e\xa5\xf6\x95\x03\xd7\x2c\xa7\x77\x39\x6e\xc5\xcb\x31\xbb\x1a\x5d\xbd\xfc\x8b\x5b\x99\x3a\xe6\xed\xee\x6c\x26\x9f\xcf\xb2\x0d\x1b\x98\x3c\x66\x9e\xcb\x67\xb3\x6c\x80\x65\x58\x2e\xba\xf7\xe7\x7b\x5b\x4f\x7d\xf9\x97\xe4\x71\x63\x14\xd6\x97\xcd\xb0\xe3\xc7\x55\x4a\x7f\xbe\x37\xb3\x89\x0d\xb0\x2c\xcb\xb1\xde\xad\x52\xb4\x34\x45\x75\xba\x21\x6a\x8c\x9a\x74\x5d\x2a\x97\x3e\xa3\xba\x98\x10\x13\xd4\xa4\x69\xd0\x59\x51\x13\x35\x31\x4e\x4d\x9a\x12\x93\xa2\x06\xfa\x8a\x9a\x62\x9c\x42\xba\x49\x21\x4d\x53\x43\x9c\xa4\xba\xa8\x51\x83\x6e\x89\xd3\x34\x4f\x21\x35\x98\x98\xa0\x90\x42\x9a\x12\x27\xa9\x41\xf3\xd4\xa4\x06\xe8\x4b\x6a\xd0\x4d\x31\x21\x26\x69\x8e\xe6\xa8\x0e\xfa\x84\x42\x9a\x17\xef\x51\x93\x66\xc4\xa4\x18\xa7\xba\x78\x9f\x9a\xe2\x0c\xe8\x12\x85\x34\x2b\x6a\x51\xed\x71\xba\x46\xb3\xad\x22\xb2\xee\x94\x6c\x2d\x26\xa8\xce\xc4\xa4\x98\x88\x80\x85\x74\x43\x9e\x68\x5a\x56\x5d\x39\x99\x16\x22\x57\x83\xae\x53\x9d\x66\xc4\xb8\x98\xa4\xeb\x74\x93\x9a\x2b\x14\xba\xba\xc4\x19\xca\x8f\xe8\x7e\x3a\xc4\xa9\xe5\xf3\x77\x0f\x81\xce\x47\xed\xe6\xc4\x19\xd9\x5b\x82\xbe\x45\x0d\x9a\xa5\x79\x6a\xd0\x0c\x85\xad\x4f\x51\x16\xfd\xaf\x91\xea\x7b\xa5\xab\x51\xb3\x69\x39\x9a\x38\x0d\xba\xbc\x94\xed\x8f\x65\x31\xd0\xe7\x11\x1b\xa7\x40\x17\x69\xa1\x4d\x6f\x94\x3c\x23\x3b\xca\x25\xcb\xf4\xe9\x7b\xa7\x94\x1c\x2e\x25\xaa\x29\x6a\xb2\xd5\x45\x51\xa3\x05\xb9\x2c\x9a\x6e\xb9\x2e\x8b\x9a\x14\x80\x64\x01\x74\x45\x4a\x49\xee\x57\x49\xe5\x0a\x35\x69\x01\xf4\x11\xcd\x53\x5d\x7c\xb0\x08\x6f\x39\x72\x25\x9f\x72\x5d\x52\x88\x4b\x57\x75\x2d\x4a\x0e\x7b\x18\x9d\x8f\x28\xd7\x0b\x96\x0c\x9c\x1a\x00\x9d\x6b\xe7\xb6\x35\x72\x22\xca\xa8\xb3\x48\xa7\xcb\x08\x6d\xd9\xbd\xad\x54\xff\x72\x5b\x78\x7a\xea\x19\x0a\x45\x2d\x5a\x42\x88\x08\xe6\x82\x98\xd4\x0b\x08\xf1\x4f\x00\x00\x00\xff\xff\xed\x76\xe8\xc1\xd3\x08\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
