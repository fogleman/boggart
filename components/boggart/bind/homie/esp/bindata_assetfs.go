// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package esp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\xff\x6f\xdb\xb6\x97\xbf\xf7\xaf\x78\xd3\x32\xd8\xde\x22\xc9\x49\xb7\xde\x9d\x6b\xa7\xe8\xad\x37\x6c\x87\xae\x2d\xd6\x6c\x03\xae\xd7\x4f\x40\x4b\xb4\xcd\x94\x22\x35\x92\xb2\xe3\x06\xfe\xdf\x3f\x20\xa9\xef\x96\x6c\x39\x71\xba\x15\xa8\x80\x65\x22\xf9\xf8\x1e\xf9\xbe\xf3\x89\xee\xed\x2d\x84\x78\x46\x18\x06\x27\xe0\x4c\x61\xa6\x1c\xd8\x6c\x1e\x8d\x43\xb2\x84\x80\x22\x29\x27\x4e\x8c\xe6\xd8\x55\x44\x51\xec\x5c\x3c\x02\x00\x28\x0f\x9a\xfe\x2b\x8a\x67\x2a\x1d\x34\x00\x8b\xc7\x45\x43\x3f\xb7\xb7\x40\xce\xfe\x93\x81\xf3\x02\x2f\x49\x80\xe1\x1b\xe9\xc0\x09\x30\x42\xf3\xff\x3c\x86\x22\x0c\x9b\xcd\x78\x2a\xc0\xbf\x78\xb4\x35\x7b\x06\x1e\x45\x52\x5d\x25\x71\x88\x94\x06\xac\x40\x18\xa2\x32\x42\x94\x5e\x8c\x65\x20\x48\xac\x40\xad\x63\x3c\x71\x50\x1c\x53\x12\x20\x45\x38\xf3\xaf\xd1\x12\xd9\x41\xe7\x22\xe4\x41\x12\x61\xa6\xbc\x95\x20\x0a\xf7\x35\xce\x4b\xfe\x56\x09\xc2\xe6\xfd\xde\xed\x6d\x85\x98\xf7\x13\x17\x11\x52\xe0\x9c\x0f\x87\x4f\xdc\xe1\x99\x3b\x3c\xbf\x3c\xfb\x61\x34\xfc\x7e\x34\xfc\xe1\xff\x86\xff\x31\x1a\x0e\x35\xcb\x7a\x83\xc1\xd8\xb7\xe8\x2f\xc6\xbe\x5d\x4b\x7d\x17\x98\x85\xe5\x95\x8f\xfd\x8c\x4f\x63\x3f\x24\xcb\x74\xd7\xdb\xdc\x15\x64\xbe\xa8\xb0\xb7\x04\x31\xe3\x22\x72\xe7\x82\x27\x31\xc4\x09\xa5\x6e\x1d\xb6\x0e\x4f\x58\x9c\x28\x3b\xa1\x06\x65\x20\x29\x9a\x62\x9a\xc1\x4e\x15\x6b\x85\x2c\xc9\x85\x33\xaa\xf5\xa7\x41\x24\x06\xe5\x34\x51\x8a\xb3\x54\x1e\xb6\xe1\x94\x28\x80\xa6\x42\x02\x6e\x5f\x56\x48\x30\xc2\xe6\xe6\x5d\x46\x4e\x23\xc6\xec\x09\x91\x42\xae\xe2\xf3\x39\xc5\x13\x27\xe2\x21\xa2\x4e\xda\x87\xc4\x1c\xab\x89\xf3\xb5\xed\xdc\x8f\xc4\xc0\x59\x15\x9f\x38\xb9\xae\xfe\xc8\xd9\x8c\x88\x08\x04\x96\x0a\x09\x05\xa1\xd1\x5d\x07\x3c\xd8\x6c\x3a\x23\x9d\xf2\x70\x5d\xc2\xf9\x27\xa1\x14\xa6\xb8\x86\xd3\x83\xe7\x02\xc3\x9a\x27\x20\x13\x81\x9f\x1d\x48\x22\x40\x94\x4e\x51\xf0\x61\xe2\xa0\x40\x2b\x7a\xbf\x97\x62\xef\x0d\x9e\xb6\x48\xce\x08\x86\xe4\x3a\x84\x24\xcc\x90\x1b\xf3\x15\x16\x2e\x9f\xcd\x1c\xa8\xb3\xe2\x37\x8b\x30\x5d\xd8\xc5\xd8\x27\xcd\x78\xc7\xbe\x15\x70\xab\xbe\xd4\x2c\xa0\x32\xf7\x20\x45\x09\x11\x9b\x63\xf1\x4f\xd3\x13\x7c\x5c\x2d\x59\x91\x18\x43\xa0\xd1\xcf\x1f\x4e\x53\xf0\xa1\x7a\x82\x05\x92\x58\x6c\x2b\xc9\x9f\x24\xc6\xf7\xd0\x90\xb1\x6f\x9c\x4f\xcd\x75\x59\xc7\xd8\xd0\x4c\x5f\x33\xcf\x59\xf6\x71\x01\xc5\x48\xcc\xc8\x8d\x5e\xc6\xf6\xa8\xe0\xab\x86\x38\x16\x70\xea\x46\xa1\x7b\x76\x0e\xfa\x4d\x46\xd9\xdb\x8d\x74\xcf\xce\x5b\x7c\xef\xcd\x55\x8c\x18\xa6\x3b\xbc\xed\xcd\x55\x39\x6e\x56\xa0\x16\xe7\x17\xf5\xa8\x88\x94\x12\x64\x9a\x28\x2c\x2d\x1b\xc7\xfe\xe2\xbc\x61\x66\x92\x3b\x68\x86\x96\xc0\xd0\x72\x8a\x84\xf5\xfb\x60\xd6\x73\xa5\x38\xa7\x53\x7e\xd3\x22\xd3\x31\x25\x17\x63\x54\xda\x37\x45\xb1\xc4\x2e\x25\xec\x83\x73\x51\x16\xb6\x96\x75\xb0\xc0\x4b\xc1\x99\xab\x63\x80\x96\xe9\xd8\x47\x17\x63\x9f\x36\x08\x77\xec\x27\xb4\xa1\x77\x97\x58\x76\x08\x7a\x9b\x91\x59\x76\xd2\x40\x43\xa1\x29\xc5\x79\xc8\x34\x0d\xf3\xd7\x95\x4a\x90\x18\x87\xc6\x04\x6c\x7f\xa8\x5c\x81\x65\xcc\x99\x24\x4b\x0c\x8c\xaf\x04\x8a\x1d\x90\x6a\xad\x35\x79\x45\x42\xb5\x18\x9d\x0d\x87\xdf\xb4\xb1\x4e\x2d\x30\x0a\xdb\xc6\xc4\x0e\x1b\x52\x8b\x6c\x7d\x51\xe8\x6a\xbd\x3a\x77\x0a\xf1\x3f\xcf\xe4\x9e\x89\x5d\x2d\x76\xa2\x2a\x66\xfe\x81\x68\xb2\x77\xd6\xd8\x6f\x5b\x9a\x9e\xb3\x63\x43\xda\x2b\xb5\x2f\xe4\xf6\x16\x84\x76\xc2\x70\xa2\x53\xb7\x53\x38\x59\xea\xc5\xc0\x68\x02\x9e\xf5\x55\xf2\xaa\x50\xe8\x36\xa7\x0f\xfb\x38\x67\x01\x42\xbd\xe5\x93\x2c\x45\xf4\x55\xcb\x92\xcb\x13\x76\x02\x40\x9e\xbd\xe0\xbf\x52\xbc\x0e\x89\x62\x8a\x75\x4e\x68\xb2\x45\xcf\xba\x5d\x67\xd7\xc2\x2b\x24\x63\x81\x33\x3d\x8a\x51\x18\x12\x36\x1f\x0d\x9d\x8b\x71\xc0\xc3\x5c\x35\xaf\x25\x67\xce\xdd\x12\xd4\xff\x7d\xfb\xfa\x95\x27\x4d\x7e\x4a\x66\x6b\xdb\x8c\x91\x90\xb8\x6f\xc4\xb0\xca\xb8\xbf\xd9\x0c\x4e\x81\x25\x94\x9e\xc2\x79\x25\x21\xd5\xeb\xb8\x18\xfb\xb1\xc0\x9d\x38\x83\xa9\x6c\xcd\xe8\x1a\xc0\x73\xea\x9d\x70\xb7\xe7\x00\x39\x37\x77\x8a\xb8\x5d\xa1\xf7\x53\x18\xfb\x2d\x6a\x3d\xf6\x8d\x87\xb8\x63\xf8\x49\x53\x61\xc6\x43\xab\xeb\xff\xf0\x80\xf3\x4a\xaf\xf3\x4b\x90\xf9\xec\x82\x0c\x74\x73\x97\xa5\x08\xf1\xcb\x8b\x2e\x41\x05\x2a\xfe\xd0\x8b\x05\x57\x3c\xe0\xf4\x2a\x42\xd7\x5c\x80\xf3\x58\xbb\xc1\x0a\xda\x57\x28\x2a\xc7\x9d\x8e\x56\x5d\xc6\x70\xb9\x8e\x3b\xc5\xbb\xad\x89\xcf\x85\x40\xeb\x03\x66\x66\x8c\x0f\x89\x8c\x29\x5a\x8f\x80\x71\x86\xb5\x7a\xec\x8c\xb2\xc7\x8f\x99\xa5\x78\x79\x0a\x27\xda\x53\x98\x58\x99\xbb\x8c\xf6\x2d\x74\x0d\x8f\x3c\xc4\xde\x2f\x2f\x3c\x5b\xc6\xe8\x14\x28\xf7\xcb\xbc\x84\x5a\xcb\xbc\x86\xbc\xab\xdc\x4b\x58\xb4\xdc\x0f\x59\x62\x65\xb2\x91\xfd\xa1\xb3\xbb\xc4\xa4\x93\x58\xf0\x18\x0b\x45\xb0\xd4\x52\xb1\xd4\xde\x14\x7d\xdd\x22\x1b\x99\x55\x10\x75\x98\xb4\xdf\xad\xa4\xee\x63\xff\x2e\xa0\x83\xef\xd8\x86\xdf\xa3\x5b\x0d\x04\x0a\x4b\x4c\xf9\xb3\x76\xe0\xa4\x93\x31\xee\x44\x96\xa6\xb2\x87\x63\xda\x9d\x0d\xd4\x20\xbb\xb3\x67\x5f\xfa\x5b\x7f\x0a\xf3\x8e\x4f\x73\x2d\x58\x1b\x65\x3a\x4c\x25\x8a\x05\x1c\x2c\x1b\x6b\x29\x19\xed\x26\x83\xbd\x1f\x42\x23\xa3\x02\x23\x54\x06\x7f\x67\x44\xdd\x95\x5a\x77\x19\x42\xe7\x1c\xb2\x84\xbb\x9b\x24\x1b\x33\xc0\xbb\xd3\xbf\x6b\x0e\xfb\x77\xe4\xaf\x05\xcd\x2c\x93\x95\x58\x29\xc2\xe6\x0f\x9f\xcc\x42\x96\x1c\x86\xf7\x4f\x6b\x7f\x4c\xcf\x6c\x5f\xf2\xda\xee\x79\xed\x8c\x8b\x08\x04\xd7\x19\x92\x7e\x75\xc0\x96\x06\x27\xce\xb3\xf4\x25\xd3\x04\x07\x22\xac\x16\x3c\x9c\x38\x31\x97\xca\x01\x12\x4e\x9c\x62\xac\x52\x64\x5d\x22\x4a\x42\xa4\xb8\x68\x4d\x71\x3f\x55\x32\x0d\x47\x4a\xa8\x6b\xd5\x9b\xb3\x52\xf5\xe6\x75\xac\xd9\x74\xa7\x54\xb6\x53\xf9\x06\xf6\xfa\xc7\xbd\x71\xad\x7b\x29\x87\x9c\xc2\x09\x37\x1b\x32\xc9\x69\xd9\x0b\xb4\x23\xef\x98\x9f\x5a\xbc\x26\x2a\x1d\x27\x77\x2b\xb2\xd7\x14\xb5\xce\x2d\xc1\x99\x72\x4e\x3b\xd5\x6d\xc6\xe6\x63\x58\x5a\x88\x09\x16\x38\xf8\xa0\x0d\xbf\xa8\xd6\xb8\x72\x45\x54\xb0\x70\x80\xa1\xc8\x16\xba\x6b\x7b\xb0\x46\xd0\xd4\x9f\x2f\xad\x1f\x0b\xc2\x54\x0e\x60\x24\x3e\x00\x47\x09\x2d\xf8\xcd\x06\x0c\x59\x1c\xe6\x0e\x18\xfc\xbd\x7b\x36\xb5\x19\x32\x03\x2e\xa0\xbf\xb5\x79\xc2\x94\x33\x68\xee\x7f\xf2\xbd\x33\x38\x98\x2d\x2c\x89\xa6\x58\x38\x95\xcf\x8d\xda\x9b\x08\xcd\xe3\x76\xbe\x98\x7a\x50\x65\xe8\x8f\xb4\x42\xd4\xce\xb3\x18\x29\x85\x05\x9b\x38\xff\x7a\xe7\x7e\xf7\xfe\xd9\xbb\xa1\xfb\x5f\xef\xbf\x3d\x71\xee\xc9\x90\xa4\x8d\x23\xc9\xe7\xc5\x92\x3b\x71\x64\x6b\xd3\x33\xca\x91\xde\xf5\x67\xb2\xe9\x42\x0f\xfa\xff\xef\xd9\x97\xc1\xb3\x43\x18\x80\x58\xd8\x20\x7a\x5b\x48\xd5\x5a\x31\xc7\xd0\xa7\x98\xd5\xed\xf3\x6c\x38\xec\xa6\x17\x0a\xdf\x28\x24\x30\x6a\xe2\x0b\x08\x2c\xc9\x47\x1d\xc4\xae\x32\x30\x07\x04\x5f\xc9\x89\xf3\xfd\x1d\x7c\xca\x45\x03\x13\xc7\x7e\x86\xb9\x1b\x47\x0e\x95\xba\xc6\xfe\x29\x64\xde\x41\xa0\x7f\x67\xd1\x18\xf6\x1d\x23\x5a\x8f\x0e\x63\x5f\x73\xed\x58\x49\x39\x57\xe8\x0a\x33\x4d\x29\xfc\xac\xf2\xf2\xd7\x97\xcf\xbf\x24\xe5\x47\x2d\x36\x1f\x5e\x54\xde\x9d\x01\x1e\x56\x54\x7e\xab\x90\x4a\x64\xf7\x94\xd7\xe4\x7f\x99\x02\x8b\x84\x31\x5b\x23\xc8\xf1\xa5\x5d\x16\x61\xe1\xab\x8a\x71\x8c\xc2\x75\x31\x6a\x8c\xe2\x3e\xd6\x7e\xd8\x6e\xdf\x08\x3e\x17\x58\x1e\xb4\xdf\xfd\x6e\xb6\x7c\xc1\x2e\x27\x90\x8a\x33\x42\x62\x4e\x98\x3b\xe5\x4a\xf1\x68\x34\xec\x5a\xfc\x6b\x40\xe9\x4e\x91\x80\x72\x23\xd7\xa0\x46\x89\x54\x20\x09\x9b\x71\x73\x1a\x5c\xe2\x42\x26\x15\x08\x7b\x09\xc7\x8a\x44\x7b\x77\x7b\x8c\xcc\x40\xa6\x48\x38\x80\x04\x41\xae\x89\x08\x8c\xaf\x8c\xef\x37\x24\x57\x82\x28\x85\x99\x89\x09\x05\x48\x44\xd8\xc4\x19\x56\x7a\xd0\x4d\x31\x49\x71\x85\xa8\x99\x52\x51\xfb\x6c\x38\xa3\x0b\x9b\xcd\xae\xe3\xe0\x16\xdb\x64\x8c\x58\x86\x91\x12\x86\xdd\x05\xd6\xae\x67\x74\x3e\x8c\x6f\x4c\xd4\xad\xad\x18\xa6\x6b\x85\x25\xf0\x19\xd4\x17\x36\xf6\x35\xae\xae\xc5\xc8\x2d\xf7\x70\x47\xb0\x4f\x67\x09\x3f\xea\xc3\x8a\x4c\xa2\x03\x2d\xdf\xf0\x28\x48\xe7\xde\xc3\x74\xf7\xd7\xbe\x5a\xca\x1b\xe5\x04\x66\xc1\x05\xf9\xc8\x99\x16\x98\x69\x9b\x4b\x47\x2e\xc5\x33\x05\xa1\xe0\xf1\x47\xce\xb0\x53\xa9\x87\x6c\x57\x3d\xb8\x42\xdb\x65\x12\xd3\xc9\x78\x5a\xfa\x68\xa9\x22\x56\x6e\x62\x2a\x1c\x41\x71\x7d\x73\x57\x01\xc3\xde\xca\x9c\x71\x31\x71\x28\x5e\x62\xea\x14\xb1\xce\x64\x63\x6e\x7a\x6d\xd3\x46\xfb\xc7\x59\xb0\x7f\xdc\x18\xeb\xeb\x4f\xf1\x45\x8e\x44\x98\x27\xe9\x25\xbf\x1d\xe2\x69\xb8\xa6\xd5\xb6\xc7\x74\x45\x4f\xb2\x15\x3d\xe9\xb4\x22\x38\x20\x0d\xd5\xf2\x50\xd9\xc2\x6d\x4e\x9a\x37\x8b\x44\xd4\x5a\xa9\xed\x37\x0e\x44\xe0\xbf\x12\x22\x70\x38\x71\xb2\xb7\x5d\xfc\x6f\xb7\xc1\x96\xa1\x23\xa5\x7d\x9f\x4d\x82\xf7\xdf\x82\xa3\x30\x40\x52\x41\x84\xa5\x44\x73\xfc\x25\xdd\x3b\xb8\x06\xdb\xcd\x49\xed\xf3\x4d\xd3\x4c\x12\xdb\x1e\xaa\x34\xf4\x39\xfa\x29\x28\xfb\xaa\x97\x16\xbd\x56\xb2\x34\x80\x67\x66\x92\x9b\xf3\xb7\xfb\xa2\xf1\x3f\xd0\x93\xa5\x5c\xb3\x7e\x2c\x6d\xc4\x14\x05\x78\xc1\x69\x88\xc5\xc4\x41\x14\x8b\xc2\xb3\x3d\xb8\x1f\xab\x73\xe1\x6e\xba\x90\xfb\x84\x87\xd2\x86\x5f\xcb\x4e\xe7\x6f\x97\xf7\x7d\x6b\x42\x39\xbb\xb4\x46\x64\x8d\x8b\x2e\xa5\x9e\xfb\x0b\x98\xb2\x2b\xc9\x29\x09\x1b\x5d\x5c\xd3\x84\x6e\xca\xd0\xc6\xd8\x28\x74\xf9\x6c\x26\xb1\x72\x1f\xef\xe3\x6a\xe5\xd7\x01\x32\x99\x46\x44\x6d\xfd\x3a\x40\x26\x41\xa0\xcf\x51\xa5\x93\x2a\x66\x61\x16\x8b\x76\xfd\x34\xe1\x6e\xdc\x3b\x5e\x75\x27\xfb\x0d\xd6\x02\xa3\x30\x2f\xce\xde\xde\x82\x54\x48\x91\xe0\xe7\xcb\x5f\x5f\x42\xdf\xbe\xff\xfe\xdb\x4b\x70\xfc\x10\xc9\xc5\x94\x23\x11\xfa\x48\x4a\xac\xa4\xbf\xc4\x2c\xe4\x42\xfa\xf9\x87\x33\xe9\x31\xac\xdc\xa9\xf4\x03\x69\x7b\x2f\x6d\xef\x94\x73\x25\x95\x40\xb1\x17\x11\xe6\x05\xfa\xd4\x39\x43\x54\xe2\xc1\x11\xa9\x16\x1f\xec\xb2\x05\x14\x3d\x0f\xb3\x80\x05\x99\x2f\xa8\xce\x20\xae\x2d\x3d\xc5\x23\x2e\x04\x5f\x1d\x75\x93\xe9\xf1\x20\x25\x91\x35\x9b\x48\x58\x79\x9b\x33\x65\xc9\xf1\xeb\x69\x25\x35\xff\x3a\xff\xba\x66\x8e\x35\x60\xe2\xc4\xe9\x56\x77\xee\x4e\x6e\x2b\x7a\x66\xcf\xbe\x70\x36\x1c\x7e\xf3\x34\x1f\xd8\xa4\x8a\x66\x28\xb7\xe9\xd8\xb5\x3c\xa2\x86\xf9\xd7\xd2\xbf\xfe\x2b\xc1\x62\xed\x95\x94\x4c\xb3\xe4\xfa\x21\x34\x6b\x2a\x35\xc1\x56\x75\x7e\x10\x9a\x85\xee\xd6\x68\x97\x94\xfa\x13\x10\x4f\xf7\xde\x6a\x49\xc7\x21\x5f\x36\xa4\xeb\x52\xd3\x8b\x51\xf0\xe1\x88\x74\xf2\x2b\x02\x9a\x4a\xde\x38\x26\x1f\x0b\x6b\xbd\xae\x19\xeb\x36\x81\x6e\x77\xf2\x73\x33\x3b\xe9\x67\xd7\xf3\x07\x9e\xa9\x4d\xf6\x67\x09\x33\x49\x36\xf4\x07\x35\x3b\x7d\x91\x51\xb6\x9f\x3c\xa4\x3e\x8a\xc2\xa4\x06\xa4\x9f\x18\x09\x44\x29\xa6\xbf\xc7\x94\xa3\x50\x8e\xe0\xec\xb4\x11\x26\x7a\x85\x22\x3c\x02\x67\x46\x44\xb4\x42\x02\x3b\xdb\x60\x81\xc0\x48\xe1\x5f\x22\x34\xc7\x97\x8b\x24\x9a\x32\x44\xa8\x1c\xd9\x3d\x6f\x43\xa3\x20\xc0\xb1\xc2\xe1\x4f\x84\x62\x39\x82\xca\xf6\x23\x14\x4c\x09\x43\x62\x7d\xea\x4d\x09\xab\xfe\xd0\x6c\xf3\xb4\x5a\x6f\x59\xd0\x6b\xe9\x11\x46\xd4\xcf\x99\xd2\x10\x36\x7f\xcd\x5e\x72\x14\xf6\x07\x35\xd8\x9c\x5f\x69\xc8\xfe\x19\xb1\x90\x62\xd1\x17\x75\xf6\xe9\x87\xcc\xa0\x2f\xb4\xb5\x25\x54\xc1\x64\x32\x81\xde\x0c\x11\x8a\xc3\x5e\x13\xb0\x7e\x18\x5e\xc1\x9b\x57\x5c\x91\xd9\xba\xdf\x0c\xa1\x1f\x73\xb2\x1d\x41\xef\x7f\x84\xe0\xa2\xb7\xcd\x97\x1c\x0e\xdf\xa8\x11\x08\x2f\x4d\xc5\x76\x00\xae\x63\x8d\x0f\xef\xc1\xb7\x20\x21\x6e\x15\x46\xf6\x68\x0f\x4e\xd8\x7c\x04\xbd\xdc\xca\x1f\xf7\x1a\xa1\x37\x83\xa7\x5b\xfd\x9b\xfc\x03\x68\x3f\x5f\x37\x7c\xa5\x39\x97\x30\x1b\x06\x8e\xc5\xbc\xb7\x56\x7e\x47\x64\x9f\xdc\x8b\xf1\x53\x30\xb0\xaa\xe9\x8f\x6a\xa1\x97\x85\x7c\xe5\xd9\x63\x35\x4c\x72\x65\xee\x07\x51\xd8\xc4\xd5\x13\x0f\x5d\xa3\x9b\x16\x66\xa6\xbb\x7e\xf3\xfa\xed\x65\xcb\x96\x13\x41\x47\xd0\xcb\x4e\xf1\x3d\xf8\x0e\x82\x28\x6c\x06\x4d\x79\x37\xaa\x99\xd5\xf6\xf6\x6a\x5b\xae\x9b\xf2\x49\xbf\xf7\x75\x5e\x2e\xe8\x0d\x3c\x9b\x6f\xe7\x5e\xae\x8f\x97\xda\xf7\x6d\x6f\xc8\xf4\x7b\xb1\x30\xff\x7f\x81\x67\x28\xa1\xaa\xdf\xc0\xde\x25\x12\x80\x61\x02\x27\x7d\xb5\x20\xb2\xee\x1c\x8e\xc5\x33\xec\xc5\x82\xc7\xfd\x9e\xe5\x5c\x6f\xd0\x0c\xaa\x03\xae\x86\x95\x58\x10\x44\xc9\x47\xdc\x6f\x01\xbc\x33\x73\xeb\xfb\x6b\xb8\x62\x59\xd9\x7a\xbf\x57\xe4\x80\x26\x29\x7c\x47\xc2\xf7\x95\xc4\x30\x4d\x09\x75\x7f\x6f\xe0\x05\x0b\xc4\xe6\xb8\x90\x4e\x93\x0e\x2e\xd1\xf6\x42\xf5\x53\x92\x42\x3b\x7b\x74\xbc\xda\x34\x0f\x7f\x80\x49\xce\x67\x12\xf6\x06\x5b\x40\x0d\xb2\xd5\x6e\x29\x9b\xa3\x45\xd9\x1b\x58\xaf\x9e\x5d\xc1\x6a\x75\x4d\x7a\x2d\xef\x3e\xbc\x2f\x91\x4c\xaf\x4f\xf5\x06\xf0\xd5\x04\x7a\xbd\x56\x4f\xb8\x1f\xdf\x12\xd1\xfe\xf6\xea\x37\x0f\xa3\x99\x65\x11\xf7\x06\x07\xa8\xa9\xfe\x7b\x7c\xed\x2c\xb7\x4b\x67\x86\x5a\xb7\xd6\x59\x13\xdb\x9a\x8a\x2c\xfb\xa3\x46\x97\x70\x6b\x63\x85\xf9\x07\x38\x32\x4a\x6d\x90\xfb\x63\xed\xde\x30\xd1\x2d\x44\xb4\x33\xa8\x0e\x91\xff\xdc\xb2\x38\x78\xfd\x3b\x00\x00\xff\xff\x4c\x96\x5c\xca\x5f\x45\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcf\x6f\x13\xd7\x16\xfe\xb0\xb1\xcd\x33\xef\xf1\x1e\x3c\x4a\x7f\x4b\x17\x55\x40\x69\x35\xa9\x9d\x94\xfe\x70\x62\x02\x24\x20\x50\x09\xa4\xe0\xd2\x4d\xa5\xea\x12\x5f\x9c\x11\xf6\x8c\x75\x67\x06\x9a\x8a\x45\xe2\x54\xa5\x08\xaa\x42\xa5\x0a\x54\x51\xaa\xc0\xa2\x5d\x74\xe1\x24\x98\x18\x9a\x4c\xa4\x76\x53\x75\x75\xee\xae\xdd\xf4\x2f\x40\xed\xa6\x9b\x2e\x2a\x55\x77\xe6\xc6\x04\x48\xbc\xb9\xf7\x9e\x39\xdf\x77\xbe\xf3\x9d\xe3\xdf\x36\xad\xfd\x02\x00\x9e\x07\xf0\x1c\x80\xb5\x6b\x80\x9d\x00\xee\xaf\x41\xf4\xbb\x9c\x00\x52\x00\xae\x24\x80\x7f\x01\xb8\x9a\x00\x36\x02\x98\x4a\x00\xeb\x00\xcc\x26\x80\x34\x80\xf9\x04\xb0\x19\xc0\x8f\x09\x60\x0b\x80\x5f\x4c\xfe\x1f\x26\xff\xaf\x04\x90\x00\xb0\x3e\x19\xf3\x6d\x48\x02\x19\x00\x9b\x93\xc0\x5a\x5d\xdb\xc4\xb7\x26\x63\xbe\x1d\xc9\x98\xbf\xcb\x9c\xaf\x9b\xfc\x3d\x26\xff\xa0\xc9\x1b\x32\xf1\x92\x89\xbf\x67\x78\x78\x12\xd8\x06\xa0\x92\x8c\xfb\xf9\xd4\x7c\x9f\x33\xdf\xe7\x0d\xee\x87\x24\x30\xba\x06\xf8\x39\x09\xfc\x1b\x40\x4f\x0a\xf8\x9f\xae\x93\x02\x76\x01\x78\xdb\xbc\xcf\xa7\x80\xa7\x00\x5c\x4b\x01\x7d\x00\xa6\x53\xc0\x41\x00\xbf\xa7\x80\x27\xb5\xbe\x34\xb0\x03\xc0\xd1\x74\xdc\xe7\xd9\x34\xb0\x01\xc0\x87\x69\x60\x13\x80\x0b\xe9\x58\xef\xf5\x74\xdc\xcf\xad\x34\x90\x05\xf0\x5d\x3a\xe6\x9f\x33\xe7\x4f\x69\xe0\x19\x00\xbf\x1a\xdc\x9f\xe9\x58\x57\x26\x13\xf3\x6d\xce\xc4\x3c\x2f\x64\xe2\xfc\x97\x32\xc0\x30\x80\xde\x0c\xf0\x3e\x80\x4b\x26\x7e\x3f\x13\xe3\xfe\x36\xef\xec\x3a\x40\x8f\x54\x6b\xdb\x10\x8f\x16\x4f\x9b\x73\x3d\x1e\xfe\x3d\x61\x76\x21\x09\xe0\x59\xc4\xbe\x69\x4d\x9a\x47\xd7\xd6\xfe\x69\xed\xba\xef\x2d\x06\xf3\xff\x65\x78\xdd\xdf\x7f\x97\xbd\xf5\x1e\x68\xef\x32\xe6\xbd\xd1\xec\x9b\xd6\xa7\x77\xe6\x3f\x88\x7b\x8d\x7e\x7b\xa5\xe4\x63\xd8\xeb\xfb\xd2\x3e\x19\xf8\x02\xfb\xa4\xcb\xcb\x23\xdc\xf3\x59\x4d\x78\x1e\xaf\x08\x0c\x8c\x8a\x91\xd3\x5e\x50\xc3\x80\xeb\x9c\xb2\x2b\xf1\x21\x6b\x4c\x0a\x4f\xf8\xac\x2c\xce\xd8\x23\x62\x79\xd0\xe7\xb2\x13\x1e\x8c\x0e\xb6\xcd\x5b\xba\xf1\xa5\x42\x1e\x0e\x0d\xe2\xb0\x38\x23\xaa\x18\x32\x85\x8e\xf0\x9a\xc0\x11\xb7\x2c\x3c\x1c\xad\xfb\xb6\xeb\x60\x58\xba\x15\x29\x3c\x4f\x5f\xea\x42\xfa\x63\x38\x16\xf3\xe3\xb8\x70\xca\x38\xee\x73\x3f\xf0\x50\xb2\x6b\xc2\x0d\x7c\x94\xc6\xea\x02\x27\x78\x35\x10\x78\xd7\xae\x56\xd9\x49\xf1\x88\x9c\x2e\xb6\x57\x0a\x36\xe6\x06\xcc\x0b\xa4\xe8\xef\x64\x9d\xb5\xeb\x82\x8d\x44\xdd\xad\x9a\x59\x17\x90\x82\x97\xc7\x20\x03\xc7\xb1\x9d\x0a\x8e\x89\xba\x2b\x7d\x6b\xc8\xab\xd8\x65\x6b\x5f\x50\xf1\xac\x92\x5b\xd0\xf0\x3d\xa7\xed\x51\x5e\x73\xbb\x64\x90\x1d\x3e\x5a\xb2\x06\xa4\xe0\xba\x19\x6b\x90\xfb\xa2\xc0\xba\x73\xf9\x37\xad\x5c\x8f\x95\x7f\x8d\x75\xf7\x14\x76\xed\x7a\x39\xd7\x93\xcb\x65\x0f\x73\xcf\xb7\x4a\x92\x3b\x5e\x95\xfb\xae\x2c\xb0\xb7\x22\x0e\x36\x14\x48\x5e\x73\xcb\x2e\xeb\x7b\x88\x78\x77\xf6\x30\x77\x2a\x01\xaf\x08\xab\x24\x78\xad\xc0\x3a\xef\x02\x3b\x16\x78\x9e\xcd\x9d\xec\xd0\xa1\xa1\xfd\xd6\x09\x21\x3d\xdb\x75\x0a\x2c\xdf\x95\xcb\x0e\xb8\x8e\x2f\x1c\xdf\xd2\x3e\x15\x98\x2f\x3e\xf0\x5f\xa9\x57\xb9\xed\xf4\xb2\x91\x51\x2e\x3d\xe1\x17\xdf\x29\x1d\xb0\xde\x78\x90\xa7\xf5\x9c\x12\xd2\xda\xef\x8c\xb8\x65\xdb\xa9\x14\x58\x76\xb8\x1a\x48\x5e\xb5\x0e\xb8\xb2\xe6\x15\x98\x53\x8f\x9e\x5e\xb1\xa7\x97\xc5\xd7\xa2\xb3\x2d\x9f\x2b\x16\xf3\x6c\xfb\x76\xa6\xaf\xb9\xad\xc5\x7c\x9e\xf5\xb3\x1c\x2b\x44\xef\xdd\xc5\xee\xa5\x4f\x7d\xc5\x57\xf5\xf5\xc5\x28\xad\x2f\x9f\x63\xe7\xce\xc5\x90\xdd\xc5\xee\xdc\x4e\xd6\xcf\xf2\xac\xc0\xba\x7b\x41\xd7\xa9\xa9\x26\xd4\x04\xb5\x69\x06\x74\x59\x35\x54\x43\x8d\x53\x9b\xa6\xd5\xa4\x6a\x80\xbe\xa5\xb6\x1a\xa7\x90\xee\x51\x48\x33\xd4\x52\x17\xa8\xa9\x1a\xd4\xa2\xef\xd5\x25\x5a\xa0\x90\x5a\x4c\x4d\x50\x48\x21\x4d\xab\x0b\xd4\xa2\x05\x6a\x53\x0b\xf4\x0d\xb5\xe8\x9e\x9a\x50\x93\x34\x4f\xf3\xd4\x04\x7d\x49\x21\x2d\xa8\x8f\xa8\x4d\xb3\x6a\x52\x8d\x53\x53\x7d\x4c\x6d\xf5\x19\xe8\x6b\x0a\xe9\xb6\x6a\x44\xdc\xe3\x74\x87\x6e\x2f\x91\x68\xde\x69\x5d\x5a\x4d\x50\x93\xa9\x49\x35\x11\x09\x0b\xe9\xae\xbe\xd1\x8c\x66\x5d\x1d\x4c\x8b\x51\xa8\x45\x73\xd4\xa4\x59\x35\xae\x26\x69\x8e\xee\x51\x7b\x15\xa2\x5b\x8f\x05\x43\xfd\xaf\x7a\xd4\x0e\x75\x71\x65\xfc\xa1\x41\x4d\x31\x1e\x5b\x44\x0b\xea\x12\x68\xea\x71\x53\xae\xd1\xbc\xee\xf8\xab\x48\xf4\x45\xd0\x0d\x5a\xec\xb8\x10\x81\x67\xb5\x62\x3d\x0b\x0d\x9f\x59\x2e\x46\xb7\xfa\x78\x3f\x6d\xd5\xd0\xa5\x6e\xa8\x06\x2d\x6a\x4f\x69\x66\x29\x34\xa5\x1a\x7a\x4e\x5a\x2c\xe8\x26\x35\xe9\xae\x1e\x43\x3c\xd1\x9b\xd4\xa6\x45\xd0\x55\x5a\xa0\xa6\x3a\xff\x40\xde\x4a\x1e\xe8\xb6\xb5\xab\xaa\xb1\x92\xa3\x77\x22\x70\xd8\xc5\xe8\xf3\xc8\x19\x33\x07\xed\xc0\xc5\x7e\xd0\x95\x0e\xb6\x33\xca\x4f\x22\x44\x93\x45\xeb\xb4\xc2\x3e\xac\x68\xef\x6a\xfc\x53\x9d\xfd\x30\x5d\xcf\x52\xa8\x1a\xd1\x10\x42\x44\x32\x17\xd5\xa4\x19\x40\x88\x7f\x02\x00\x00\xff\xff\xc9\xa5\xfa\x87\x1b\x08\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
