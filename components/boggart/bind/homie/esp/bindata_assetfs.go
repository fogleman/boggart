// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package esp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xef\x72\xdb\x36\x12\xff\x9e\xa7\xd8\xb2\xee\x48\x6a\x2d\x52\x76\xda\xdc\x9d\x22\x29\x93\x6b\xae\xd3\xde\xa4\x49\xa6\x71\xdb\x99\xcb\xe5\x3c\x10\x09\x49\x70\x40\x80\x05\x40\xc9\x8a\x47\xef\x7e\x03\x80\xff\x45\x4a\x94\x2d\xa7\xf5\x4c\x38\x53\x97\x04\x17\xbb\xc0\x6f\x17\xbb\x8b\x25\x94\x9b\x1b\x08\xf0\x8c\x30\x0c\x8e\xcf\x99\xc2\x4c\x39\xb0\xd9\x3c\x1a\x05\x64\x09\x3e\x45\x52\x8e\x9d\x08\xcd\x71\x5f\x11\x45\xb1\x33\x79\x04\x00\x50\x7c\x69\xda\x2f\x29\x9e\xa9\xe4\xa5\x21\x58\x3c\xce\x1f\xf4\x75\x73\x03\xe4\xec\xef\x0c\x9c\x17\x78\x49\x7c\x0c\x5f\x49\x07\x4e\x80\x11\x9a\xfd\xe7\x32\x14\x62\xd8\x6c\x46\x53\x01\xde\xe4\xd1\x56\xef\x19\xb8\x14\x49\x75\x19\x47\x01\x52\x9a\xb0\x44\x61\x84\xca\x10\x51\x3a\x19\x49\x5f\x90\x48\x81\x5a\x47\x78\xec\xa0\x28\xa2\xc4\x47\x8a\x70\xe6\x5d\xa1\x25\xb2\x2f\x9d\x49\xc0\xfd\x38\xc4\x4c\xb9\x2b\x41\x14\xee\x6a\x9e\x17\xfc\xad\x12\x84\xcd\xbb\x9d\x9b\x9b\x92\x30\xf7\x07\x2e\x42\xa4\xc0\x39\x1f\x0c\x9e\xf4\x07\x67\xfd\xc1\xf9\xc5\xd9\x77\xc3\xc1\xb7\xc3\xc1\x77\xff\x19\xfc\x6d\x38\x18\x68\xc8\x3a\xbd\xde\xc8\xb3\xec\x27\x23\xcf\x8e\xa5\x3a\x0b\xcc\x82\xe2\xc8\x47\x5e\x8a\xd3\xc8\x0b\xc8\x32\x99\xf5\x36\xba\x82\xcc\x17\x25\x78\x0b\x14\x33\x2e\xc2\xfe\x5c\xf0\x38\x82\x28\xa6\xb4\x5f\xa5\xad\xd2\x13\x16\xc5\xca\x76\xa8\x50\x19\x4a\x8a\xa6\x98\xa6\xb4\x53\xc5\x1a\x29\x0b\x7a\xe1\x8c\x6a\xfb\xa9\x51\x89\x61\x39\x8d\x95\xe2\x2c\xd1\x87\x7d\x70\x0a\x12\x40\x4b\x21\x3e\xb7\x37\x2b\x24\x18\x61\x73\x73\x2f\x43\xa7\x96\x63\x7a\x05\x48\xa1\xbe\xe2\xf3\x39\xc5\x63\x27\xe4\x01\xa2\x4e\xd2\x86\xc4\x1c\xab\xb1\xf3\xa5\x6d\xdc\xcf\xc4\xd0\x59\x13\x1f\x3b\x99\xad\x7e\xcf\xd9\x8c\x88\x10\x04\x96\x0a\x09\x05\x81\xb1\x5d\x07\x5c\xd8\x6c\x5a\x33\x9d\xf2\x60\x5d\xe0\xf9\x3b\xa1\x14\xa6\xb8\xc2\xd3\x85\xe7\x02\xc3\x9a\xc7\x20\x63\x81\x9f\x1d\x28\xc2\x47\x94\x4e\x91\xff\x61\xec\x20\x5f\x1b\x7a\xb7\x93\x70\xef\xf4\x9e\x36\x68\xce\x28\x86\x64\x36\x84\x24\xcc\x50\x3f\xe2\x2b\x2c\xfa\x7c\x36\x73\xa0\x0a\xc5\x2f\x96\x61\x32\xb0\xc9\xc8\x23\xf5\x7c\x47\x9e\x55\x70\xa3\xbd\x54\x56\x40\xa9\xef\x41\x86\x12\x20\x36\xc7\xe2\xaf\x66\x27\xf8\xb8\x56\xb2\x22\x11\x06\x5f\xb3\x9f\xdf\x9f\xa5\xe0\x43\xed\x04\x0b\x24\xb1\xd8\x36\x92\xdf\x49\x84\xef\x60\x21\x23\xcf\x38\x9f\x8a\xeb\xb2\x8e\xb1\xe6\x31\xb9\x4d\x3d\x67\xd1\xc7\xf9\x14\x23\x31\x23\xd7\x7a\x18\xdb\x6f\x05\x5f\xd5\xc4\x31\x9f\xd3\x7e\x18\xf4\xcf\xce\x41\xdf\xc9\x30\xbd\xbb\x96\xfd\xb3\xf3\x06\xdf\x7b\x7d\x19\x21\x86\xe9\x0e\x6f\x7b\x7d\x59\x8c\x9b\x25\xaa\xc5\xf9\xa4\x1a\x15\x91\x52\x82\x4c\x63\x85\xa5\x85\x71\xe4\x2d\xce\x6b\x7a\xc6\x99\x83\x66\x68\x09\x0c\x2d\xa7\x48\x58\xbf\x0f\x66\x3c\x97\x8a\x73\x3a\xe5\xd7\x0d\x3a\x1d\x51\x32\x19\xa1\xc2\xbc\x29\x8a\x24\xee\x53\xc2\x3e\x38\x93\xa2\xb2\xb5\xae\xfd\x05\x5e\x0a\xce\xfa\x3a\x06\x68\x9d\x8e\x3c\x34\x19\x79\xb4\x46\xb9\x23\x2f\xa6\x35\xad\xbb\xd4\xb2\x43\xd1\xdb\x40\xa6\xd9\x49\x8d\x0c\x85\xa6\x14\x67\x21\xd3\x3c\x98\xbf\x7d\xa9\x04\x89\x70\x60\x96\x80\x6d\x0f\x54\x5f\x60\x19\x71\x26\xc9\x12\x03\xe3\x2b\x81\x22\x07\xa4\x5a\x6b\x4b\x5e\x91\x40\x2d\x86\x67\x83\xc1\x57\x4d\xd0\xa9\x05\x46\x41\xd3\x3b\xb1\x63\x0d\xa9\x45\x3a\xbe\x30\xe8\x6b\xbb\x3a\x77\x72\xf5\x3f\x4f\xf5\x9e\xaa\x5d\x2d\x76\xb2\xca\x7b\xfe\x86\x68\xbc\xb7\xd7\xc8\x6b\x1a\x9a\xee\xb3\x63\x42\xda\x2b\x35\x0f\xe4\xe6\x06\x84\x76\xc2\x70\xa2\x53\xb7\x53\x38\x59\xea\xc1\xc0\x70\x0c\xae\xf5\x55\xf2\x32\x37\xe8\x26\xa7\x0f\xfb\x90\xb3\x04\x81\x9e\xf2\x49\x9a\x22\x7a\xaa\x61\xc8\xc5\x0e\x3b\x09\x20\xcb\x5e\xf0\x1f\x09\x5f\x87\x84\x11\xc5\x3a\x27\x34\xd9\xa2\x6b\xdd\xae\xb3\x6b\xe0\x25\x91\x91\xc0\xa9\x1d\x45\x28\x08\x08\x9b\x0f\x07\xce\x64\xe4\xf3\x20\x33\xcd\x2b\xc9\x99\x73\xbb\x04\xf5\xdf\x6f\x5f\xbf\x72\xa5\xc9\x4f\xc9\x6c\x6d\x1f\x23\x24\x24\xee\x1a\x35\xac\x52\xf4\x37\x9b\xde\x29\xb0\x98\xd2\x53\x38\x2f\x25\xa4\x7a\x1c\x93\x91\x17\x09\xdc\x0a\x19\x4c\x65\x63\x46\x57\x43\x9e\x49\x6f\xc5\xbb\x39\x07\xc8\xd0\xdc\xa9\xe2\x66\x83\xde\x2f\x61\xe4\x35\x98\xf5\xc8\x33\x1e\xe2\x96\xe1\x27\x49\x85\x19\x0f\xac\xad\xff\xc5\x03\xce\x2b\x3d\xce\xcf\x41\xe6\xc1\x05\x19\x68\xe7\x2e\x0b\x11\xe2\xa7\x17\x6d\x82\x0a\x94\xfc\xa1\x1b\x09\xae\xb8\xcf\xe9\x65\x88\xae\xb8\x00\xe7\xb1\x76\x83\x25\xb6\xaf\x50\x58\x8c\x3b\x2d\x57\x75\x91\xc3\xc5\x3a\x6a\x15\xef\xb6\x3a\x3e\x17\x02\xad\x0f\xe8\x99\x02\x1f\x10\x19\x51\xb4\x1e\x02\xe3\x0c\x6b\xf3\xd8\x19\x65\x8f\x1f\x33\x0b\xf1\xf2\x14\x4e\xb4\xa7\x30\xb1\x32\x73\x19\xcd\x53\x68\x1b\x1e\x79\x80\xdd\x9f\x5e\xb8\xb6\x8c\xd1\x2a\x50\xee\xd7\x79\x81\xb5\xd6\x79\x85\x79\x5b\xbd\x17\xb8\x68\xbd\x1f\x32\xc4\x52\x67\xa3\xfb\x43\x7b\xb7\x89\x49\x27\x91\xe0\x11\x16\x8a\x60\xa9\xb5\x62\xa5\xbd\xc9\xdb\xda\x45\x36\x32\x2b\x31\x6a\xd1\x69\xbf\x5b\x49\xdc\xc7\xfe\x59\x40\x0b\xdf\xb1\x4d\xbf\xc7\xb6\x6a\x04\xe4\x2b\x31\xc1\x67\xed\xc0\x49\xab\xc5\xb8\x93\x59\x92\xca\x1e\xce\x69\x77\x36\x50\xa1\x6c\x0f\xcf\xbe\xf4\xb7\x7a\xe5\xcb\x3b\x3a\xcd\xac\x60\x6d\x8c\xe9\x30\x93\xc8\x07\x70\xb0\x6e\xec\x4a\x49\x65\xd7\x2d\xd8\xbb\x31\x34\x3a\xca\x39\x42\xe9\xe5\xaf\x8c\xa8\xdb\x4a\x6b\xaf\x43\x68\x9d\x43\x16\x78\xb7\xd3\x64\x6d\x06\x78\x7b\xf9\xb7\xcd\x61\xff\x8c\xfc\x35\x97\x99\x66\xb2\x12\x2b\x45\xd8\xfc\xfe\x93\x59\x48\x93\xc3\xe0\xee\x69\xed\xf7\xc9\x9e\xed\x73\x5e\xdb\x3e\xaf\x9d\x71\x11\x82\xe0\x3a\x43\xd2\xb7\x0e\xd8\xd2\xe0\xd8\x79\x96\xdc\xa4\x96\xe0\x40\x88\xd5\x82\x07\x63\x27\xe2\x52\x39\x40\x82\xb1\x93\xbf\x2b\x15\x59\x97\x88\x92\x00\x29\x2e\x1a\x53\xdc\x4f\x95\x4c\xc3\x91\x12\xea\x4a\xf5\xe6\xac\x50\xbd\x79\x1d\x69\x98\x6e\x95\xca\xb6\x2a\xdf\xc0\x5e\xff\xb8\x37\xae\xb5\x2f\xe5\x90\x53\x38\xe1\x66\x42\x26\x39\x2d\x7a\x81\x66\xe6\x2d\xf3\x53\xcb\xd7\x44\xa5\xe3\xe4\x6e\x79\xf6\x9a\xb0\xd6\xb9\x25\x38\x53\xce\x69\xab\xba\xcd\xc8\x7c\x0c\x4b\x0a\x31\xfe\x02\xfb\x1f\xf4\xc2\xcf\xab\x35\x7d\xb9\x22\xca\x5f\x38\xc0\x50\x68\x0b\xdd\x95\x39\xd8\x45\x50\xd7\x9e\x0d\xad\x1b\x09\xc2\x54\x46\x60\x34\xde\x03\x47\x09\xad\xf8\xcd\x06\x8c\x58\x1c\x64\x0e\x18\xbc\xbd\x73\x36\xb5\x19\x32\x03\x2e\xa0\xbb\x35\x79\xc2\x94\xd3\xab\x6f\x7f\xf2\xad\xd3\x3b\x18\x16\x16\x87\x53\x2c\x9c\xd2\xe7\x46\xed\x4d\x84\xc6\xb8\x19\x17\x53\x0f\x2a\xbd\xfa\x2d\xa9\x10\x35\x63\x16\x21\xa5\xb0\x60\x63\xe7\x7f\xef\xfa\xdf\xbc\x7f\xf6\x6e\xd0\xff\xc7\xfb\xaf\x4f\x9c\x3b\x02\x12\x37\x21\x12\x3f\x2c\x48\x6e\x85\xc8\xd6\xa4\x67\x94\x23\x3d\xeb\x07\x32\xe9\xdc\x0e\xba\xff\x75\xed\x4d\xef\xd9\x21\x00\x20\x16\xd4\xa8\xde\x16\x52\xb5\x55\xcc\x31\x74\x29\x66\xd5\xf5\x79\x36\x18\xb4\xb3\x0b\x85\xaf\x15\x12\x18\xd5\xe1\x02\x02\x4b\xf2\x51\x07\xb1\xcb\x94\xcc\x01\xc1\x57\x72\xec\x7c\x7b\x0b\x9f\x32\xa9\x01\x71\xe4\xa5\x9c\xdb\x21\x72\xa8\xd6\x35\xf7\x4f\xa1\xf3\x16\x0a\xfd\x33\x8b\xc6\xb0\x6f\x1b\xd1\xb8\x75\x18\x79\x1a\xb5\x63\x25\xe5\x5c\xa1\x4b\xcc\xb4\xa4\xe0\x41\xe5\xe5\xaf\x2f\x9e\x7f\x4e\xca\x8f\x5a\x6c\x3e\xbc\xa8\xbc\x3b\x03\x3c\xac\xa8\xfc\x56\x21\x15\xcb\xf6\x29\xaf\xc9\xff\x52\x03\x16\x31\x63\xb6\x46\x90\xf1\x4b\x9a\x2c\xc3\xdc\x57\xe5\xef\x31\x0a\xd6\xf9\x5b\xb3\x28\xee\xb2\xda\x0f\x9b\xed\x1b\xc1\xe7\x02\xcb\x83\xe6\xbb\xdf\xcd\x16\x0f\xd8\xa5\x02\x5a\x56\xa6\x6a\xba\xf6\xa7\x48\x40\xf1\x21\xb3\x94\x5a\xe4\x4b\x94\x84\xcd\xb8\xd9\xf5\x2d\x71\x8e\x7d\x89\xc2\x1e\xb6\xb1\xd0\x6b\x2f\x6e\xb7\x8b\x29\xc9\x14\x09\x07\x90\x20\xa8\x6f\x3c\x3f\xe3\x2b\xe3\xe3\x8d\xc8\x95\x20\x4a\x61\x66\x7c\x7f\x4e\x12\x12\x36\x76\x06\xa5\x16\x74\x9d\x77\x52\x5c\x21\x6a\xba\x94\xcc\x3b\x7d\x9d\xca\x85\xcd\x66\xd7\xb6\x6f\x0b\x36\x19\x21\x96\xe2\x26\x45\x9f\x33\xba\x36\x41\xb5\x32\x50\x98\xae\x15\x96\xc0\x67\x50\x1d\xcf\xc8\xd3\x2c\xda\xd6\x1a\xb7\x56\xff\x2d\xc9\x3e\x9d\xa1\x7f\xaf\xf7\x22\x32\x0e\x0f\x5c\xd8\x06\x23\x3f\xe9\x7b\x87\x95\xb9\xbf\xb4\xd5\x50\xbd\x28\xe6\x27\x0b\x2e\xc8\x47\xce\xb4\xc2\xcc\xb3\x39\x53\xd4\xa7\x78\xa6\x20\x10\x3c\xfa\xc8\x19\x76\x4a\xe5\x8e\xed\xa2\x06\x57\x68\xbb\x0a\x62\x1a\x19\x4f\x2a\x1b\x0d\x45\xc2\xd2\x41\x4b\x85\x43\xc8\x4f\x67\xee\xaa\x4f\xd8\x43\x97\x33\x2e\xc6\x0e\xc5\x4b\x4c\x9d\x3c\x94\x99\x64\xab\x9f\x9c\xca\xb4\xc1\xfc\x71\x1a\xcb\x1f\xd7\x86\xf2\xea\x95\x7f\x70\x23\x21\xe6\x71\x72\x86\x6f\x87\x7a\x6a\x4e\x61\x35\xcd\x31\x19\xd1\x93\x74\x44\x4f\x5a\x8d\x08\x0e\xc8\x32\xb5\x3e\x54\x3a\x70\x9b\x72\x66\x8f\x79\x9e\x69\x57\xa9\x6d\x37\x7e\x43\xe0\x3f\x62\x22\x70\x30\x76\xd2\xbb\x5d\xf8\x37\xaf\xc1\x86\x57\x47\xca\xea\x1e\x4c\xfe\xf6\x4f\xc1\x51\xe0\x23\xa9\x20\xc4\x52\xa2\x39\xfe\x9c\xcd\x1d\x5c\x62\x6d\xe7\xa4\xf6\xf9\xa6\x69\xaa\x89\x6d\x0f\x55\x78\xf5\xa0\xfd\xd4\x4b\xcb\x5a\x1b\x58\x39\x66\xe7\x4b\xf9\xeb\x7d\x91\xf8\x2f\xe8\xc5\x12\xc4\xac\x0f\x4b\x1e\x22\x8a\x7c\xbc\xe0\x34\xc0\x62\xec\x20\x8a\x45\xee\xd5\xee\xdd\x87\x55\x51\xb8\x9d\x1d\x64\xfe\xe0\x3e\x2c\xe1\xe7\xa2\xb3\xf9\xd3\x75\x7d\xd7\x52\x4f\x06\x95\xb6\x86\xf4\x61\xd2\xa6\x82\x73\x77\xe5\x52\x76\x29\x39\x25\x41\xad\x6b\xab\xeb\xd0\xce\x10\x9a\x80\x0d\x83\x3e\x9f\xcd\x24\x56\xfd\xc7\xfb\x50\x2d\x1d\xfa\x97\xf1\x34\x24\x6a\xeb\xd0\xbf\x8c\x7d\xdf\x6c\x8f\xf2\x0d\x28\x66\x41\x1a\x83\x76\xfd\xe2\xe0\x76\xe8\x1d\xaf\x68\x93\xfe\xb4\x6a\x81\x51\x90\xd5\x5c\x6f\x6e\x40\x2a\xa4\x88\xff\xe3\xc5\xcf\x2f\xa1\x6b\xef\x7f\xfd\xe5\x25\x38\x5e\x80\xe4\x62\xca\x91\x08\x3c\x24\x25\x56\xd2\x5b\x62\x16\x70\x21\xbd\xec\x7b\x98\x74\x19\x56\xfd\xa9\xf4\x7c\x69\x5b\x2f\x6c\xeb\x94\x73\x25\x95\x40\x91\x1b\x12\xe6\xfa\x7a\xb7\x3a\x43\x54\xe2\xde\x11\xa5\xe6\xdf\xe1\xd2\x01\xe4\x2d\xf7\x33\x80\x05\x99\x2f\xa8\xce\x1c\xae\xac\x3c\xc5\x43\x2e\x04\x5f\x1d\x75\x92\xc9\xb6\x20\x11\x91\x3e\xd6\x89\xb0\xfa\x36\x9b\xd2\x82\xd3\xd7\xdd\x0a\x66\xfe\x65\xf6\xd1\xcc\x6c\x67\xc0\xc4\x88\xd3\xad\xe6\xcc\x9d\xdc\x94\xec\xcc\x6e\x75\xe1\x6c\x30\xf8\xea\x69\xf6\x62\x93\x18\x9a\x91\xdc\x64\x63\x57\xf2\x88\x16\xe6\x5d\x49\xef\xea\x8f\x18\x8b\xb5\x5b\x30\x32\x0d\xc9\xd5\x7d\x58\xd6\x54\x6a\x81\x8d\xe6\x7c\x2f\x32\x73\xdb\xad\xc8\x2e\x18\xf5\x27\x10\x9e\xcc\xbd\x71\x25\x1d\x47\x7c\x71\x21\x5d\x15\x1e\xdd\x08\xf9\x1f\x8e\x28\x27\xfb\xf2\xaf\xa5\x64\x0f\xc7\xc4\x31\x5f\xad\x57\x95\xc5\xba\x2d\xa0\xdd\x51\xfb\x6c\x99\x9d\x74\xd3\x53\xf7\x3d\xd7\x94\x1c\xbb\xb3\x98\x99\xe4\x1a\xba\xbd\xca\x3a\x7d\x91\x4a\xb6\x5f\x32\xa4\xde\x82\xc2\xb8\x42\xa4\xaf\x08\x09\x44\x29\xa6\xbf\x46\x94\xa3\x40\x0e\xe1\xec\xb4\x96\x26\x7c\x85\x42\x3c\x04\x67\x46\x44\xb8\x42\x02\x3b\xdb\x64\xbe\xc0\x48\xe1\x9f\x42\x34\xc7\x17\x8b\x38\x9c\x32\x44\xa8\x1c\xda\x39\x6f\x53\x23\xdf\xc7\x91\xc2\xc1\x0f\x84\x62\x39\x84\xd2\xf4\x43\xe4\x4f\x09\x43\x62\x7d\xea\x4e\x09\x2b\xff\x7e\x6c\xf3\xb4\x5c\x67\x59\xd0\x2b\xe9\x12\x46\xd4\x8f\xa9\xd1\x10\x36\x7f\xcd\x5e\x72\x14\x74\x7b\x15\xda\x0c\xaf\x24\x64\xff\x88\x58\x40\xb1\xe8\x8a\x2a\x7c\xfa\x22\x33\xe8\x0a\xbd\xda\x62\xaa\x60\x3c\x1e\x43\x67\x86\x08\xc5\x41\xa7\x8e\x58\x5f\x0c\xaf\xe0\xcd\x2b\xae\xc8\x6c\xdd\xad\xa7\xd0\x97\xd9\xd1\x0e\xa1\xf3\x2f\x21\xb8\xe8\x6c\xe3\x92\xd1\xe1\x6b\x35\x04\xe1\x26\xa9\xd8\x0e\xc2\x75\xa4\xf9\xe1\x3d\xfc\x16\x24\xc0\x8d\xca\x48\x2f\xed\xc1\x09\x9b\x0f\xa1\x93\xad\xf2\xc7\x9d\x5a\xea\x4d\xef\xe9\x56\xfb\x26\xfb\xae\xd9\xcd\xc6\x0d\x5f\x68\xe4\x62\x66\xc3\xc0\xb1\xc0\x7b\x6b\xf5\x77\x44\xf8\xe4\x5e\x8e\x9f\x02\xc0\xb2\xa5\x3f\xaa\x84\x5e\x16\xf0\x95\x6b\xb7\xd3\x30\xce\x8c\xb9\xeb\x87\x41\x1d\xaa\x27\x2e\xba\x42\xd7\x0d\x60\x26\xb3\x7e\xf3\xfa\xed\x45\xc3\x94\x63\x41\x87\xd0\x49\x77\xef\x1d\xf8\x06\xfc\x30\xa8\x27\x4d\xb0\x1b\x56\x96\xd5\xf6\xf4\x2a\x53\xae\x2e\xe5\x93\x6e\xe7\xcb\xac\x4c\xd0\xe9\xb9\x36\xdf\xce\xbc\x5c\x17\x2f\xb5\xef\xdb\x9e\x90\x69\x77\x23\x61\xfe\xff\x02\xcf\x50\x4c\x55\xb7\x06\xde\x25\x12\x80\x61\x0c\x27\x5d\xb5\x20\xb2\xea\x1c\x8e\x85\x19\x76\x23\xc1\xa3\x6e\xc7\x22\xd7\xe9\xd5\x93\xea\x80\xab\x69\x25\x16\x04\x51\xf2\x11\x77\x1b\x08\x6f\x0d\x6e\x75\x7e\x35\x27\x27\x4b\x53\xef\x76\xf2\x1c\xd0\x24\x85\xef\x48\xf0\xbe\x94\x18\x26\x29\xa1\x6e\xef\xf4\x5c\x7f\x81\xd8\x1c\xe7\xda\xa9\xb3\xc1\x25\xda\x1e\xa8\xbe\x0a\x5a\x68\x86\x47\xc7\xab\x4d\xfd\xeb\x0f\x30\xce\x70\x26\x41\xa7\xb7\x45\x54\xa3\x5b\xed\x96\xd2\x3e\x5a\x95\x9d\x9e\xf5\xea\xe9\xc9\xaa\x46\xd7\xa4\xc7\xf2\xee\xc3\xfb\x82\xc8\xe4\x54\x54\xa7\x07\x5f\x8c\xa1\xd3\x69\xf4\x84\xfb\xf9\x2d\x11\xed\x6e\x8f\x7e\x73\x3f\x96\x59\x54\x71\xa7\x77\x80\x99\xea\xbf\xc7\xb7\xce\xe2\x73\x61\xcf\x50\x69\xd6\x36\x6b\x62\x5b\x5d\x91\x65\x7f\xd4\x68\x13\x6e\x6d\xac\x30\xff\xae\x46\x2a\xa9\x89\x72\x7f\xac\xdd\x1b\x26\xda\x85\x88\x66\x80\xaa\x14\xd9\xaf\x28\xf3\x8d\xd7\xff\x03\x00\x00\xff\xff\xd3\xba\x64\x98\x36\x45\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcf\x6f\x13\xd7\x16\xfe\xb0\xb1\xcd\x33\xef\xf1\x1e\x3c\x4a\x7f\x4b\x17\x55\x40\x69\x35\xa9\x9d\x94\xfe\x70\x62\x02\x24\x20\x50\x09\xa4\xe0\xd2\x4d\xa5\xea\x12\x5f\x9c\x11\xf6\x8c\x75\x67\x06\x9a\x8a\x45\xe2\x54\xa5\x08\xaa\x42\xa5\x0a\x54\x51\xaa\xc0\xa2\x5d\x74\xe1\x24\x98\x18\x9a\x4c\xa4\x76\x53\x75\x75\xee\xae\xdd\xf4\x2f\x40\xed\xa6\x9b\x2e\x2a\x55\x77\xe6\xc6\x04\x48\xbc\xb9\xf7\x9e\x39\xdf\x77\xbe\xf3\x9d\xe3\xdf\x36\xad\xfd\x02\x00\x9e\x07\xf0\x1c\x80\xb5\x6b\x80\x9d\x00\xee\xaf\x41\xf4\xbb\x9c\x00\x52\x00\xae\x24\x80\x7f\x01\xb8\x9a\x00\x36\x02\x98\x4a\x00\xeb\x00\xcc\x26\x80\x34\x80\xf9\x04\xb0\x19\xc0\x8f\x09\x60\x0b\x80\x5f\x4c\xfe\x1f\x26\xff\xaf\x04\x90\x00\xb0\x3e\x19\xf3\x6d\x48\x02\x19\x00\x9b\x93\xc0\x5a\x5d\xdb\xc4\xb7\x26\x63\xbe\x1d\xc9\x98\xbf\xcb\x9c\xaf\x9b\xfc\x3d\x26\xff\xa0\xc9\x1b\x32\xf1\x92\x89\xbf\x67\x78\x78\x12\xd8\x06\xa0\x92\x8c\xfb\xf9\xd4\x7c\x9f\x33\xdf\xe7\x0d\xee\x87\x24\x30\xba\x06\xf8\x39\x09\xfc\x1b\x40\x4f\x0a\xf8\x9f\xae\x93\x02\x76\x01\x78\xdb\xbc\xcf\xa7\x80\xa7\x00\x5c\x4b\x01\x7d\x00\xa6\x53\xc0\x41\x00\xbf\xa7\x80\x27\xb5\xbe\x34\xb0\x03\xc0\xd1\x74\xdc\xe7\xd9\x34\xb0\x01\xc0\x87\x69\x60\x13\x80\x0b\xe9\x58\xef\xf5\x74\xdc\xcf\xad\x34\x90\x05\xf0\x5d\x3a\xe6\x9f\x33\xe7\x4f\x69\xe0\x19\x00\xbf\x1a\xdc\x9f\xe9\x58\x57\x26\x13\xf3\x6d\xce\xc4\x3c\x2f\x64\xe2\xfc\x97\x32\xc0\x30\x80\xde\x0c\xf0\x3e\x80\x4b\x26\x7e\x3f\x13\xe3\xfe\x36\xef\xec\x3a\x40\x8f\x54\x6b\xdb\x10\x8f\x16\x4f\x9b\x73\x3d\x1e\xfe\x3d\x61\x76\x21\x09\xe0\x59\xc4\xbe\x69\x4d\x9a\x47\xd7\xd6\xfe\x69\xed\xba\xef\x2d\x06\xf3\xff\x65\x78\xdd\xdf\x7f\x97\xbd\xf5\x1e\x68\xef\x32\xe6\xbd\xd1\xec\x9b\xd6\xa7\x77\xe6\x3f\x88\x7b\x8d\x7e\x7b\xa5\xe4\x63\xd8\xeb\xfb\xd2\x3e\x19\xf8\x02\xfb\xa4\xcb\xcb\x23\xdc\xf3\x59\x4d\x78\x1e\xaf\x08\x0c\x8c\x8a\x91\xd3\x5e\x50\xc3\x80\xeb\x9c\xb2\x2b\xf1\x21\x6b\x4c\x0a\x4f\xf8\xac\x2c\xce\xd8\x23\x62\x79\xd0\xe7\xb2\x13\x1e\x8c\x0e\xb6\xcd\x5b\xba\xf1\xa5\x42\x1e\x0e\x0d\xe2\xb0\x38\x23\xaa\x18\x32\x85\x8e\xf0\x9a\xc0\x11\xb7\x2c\x3c\x1c\xad\xfb\xb6\xeb\x60\x58\xba\x15\x29\x3c\x4f\x5f\xea\x42\xfa\x63\x38\x16\xf3\xe3\xb8\x70\xca\x38\xee\x73\x3f\xf0\x50\xb2\x6b\xc2\x0d\x7c\x94\xc6\xea\x02\x27\x78\x35\x10\x78\xd7\xae\x56\xd9\x49\xf1\x88\x9c\x2e\xb6\x57\x0a\x36\xe6\x06\xcc\x0b\xa4\xe8\xef\x64\x9d\xb5\xeb\x82\x8d\x44\xdd\xad\x9a\x59\x17\x90\x82\x97\xc7\x20\x03\xc7\xb1\x9d\x0a\x8e\x89\xba\x2b\x7d\x6b\xc8\xab\xd8\x65\x6b\x5f\x50\xf1\xac\x92\x5b\xd0\xf0\x3d\xa7\xed\x51\x5e\x73\xbb\x64\x90\x1d\x3e\x5a\xb2\x06\xa4\xe0\xba\x19\x6b\x90\xfb\xa2\xc0\xba\x73\xf9\x37\xad\x5c\x8f\x95\x7f\x8d\x75\xf7\x14\x76\xed\x7a\x39\xd7\x93\xcb\x65\x0f\x73\xcf\xb7\x4a\x92\x3b\x5e\x95\xfb\xae\x2c\xb0\xb7\x22\x0e\x36\x14\x48\x5e\x73\xcb\x2e\xeb\x7b\x88\x78\x77\xf6\x30\x77\x2a\x01\xaf\x08\xab\x24\x78\xad\xc0\x3a\xef\x02\x3b\x16\x78\x9e\xcd\x9d\xec\xd0\xa1\xa1\xfd\xd6\x09\x21\x3d\xdb\x75\x0a\x2c\xdf\x95\xcb\x0e\xb8\x8e\x2f\x1c\xdf\xd2\x3e\x15\x98\x2f\x3e\xf0\x5f\xa9\x57\xb9\xed\xf4\xb2\x91\x51\x2e\x3d\xe1\x17\xdf\x29\x1d\xb0\xde\x78\x90\xa7\xf5\x9c\x12\xd2\xda\xef\x8c\xb8\x65\xdb\xa9\x14\x58\x76\xb8\x1a\x48\x5e\xb5\x0e\xb8\xb2\xe6\x15\x98\x53\x8f\x9e\x5e\xb1\xa7\x97\xc5\xd7\xa2\xb3\x2d\x9f\x2b\x16\xf3\x6c\xfb\x76\xa6\xaf\xb9\xad\xc5\x7c\x9e\xf5\xb3\x1c\x2b\x44\xef\xdd\xc5\xee\xa5\x4f\x7d\xc5\x57\xf5\xf5\xc5\x28\xad\x2f\x9f\x63\xe7\xce\xc5\x90\xdd\xc5\xee\xdc\x4e\xd6\xcf\xf2\xac\xc0\xba\x7b\x41\xd7\xa9\xa9\x26\xd4\x04\xb5\x69\x06\x74\x59\x35\x54\x43\x8d\x53\x9b\xa6\xd5\xa4\x6a\x80\xbe\xa5\xb6\x1a\xa7\x90\xee\x51\x48\x33\xd4\x52\x17\xa8\xa9\x1a\xd4\xa2\xef\xd5\x25\x5a\xa0\x90\x5a\x4c\x4d\x50\x48\x21\x4d\xab\x0b\xd4\xa2\x05\x6a\x53\x0b\xf4\x0d\xb5\xe8\x9e\x9a\x50\x93\x34\x4f\xf3\xd4\x04\x7d\x49\x21\x2d\xa8\x8f\xa8\x4d\xb3\x6a\x52\x8d\x53\x53\x7d\x4c\x6d\xf5\x19\xe8\x6b\x0a\xe9\xb6\x6a\x44\xdc\xe3\x74\x87\x6e\x2f\x91\x68\xde\x69\x5d\x5a\x4d\x50\x93\xa9\x49\x35\x11\x09\x0b\xe9\xae\xbe\xd1\x8c\x66\x5d\x1d\x4c\x8b\x51\xa8\x45\x73\xd4\xa4\x59\x35\xae\x26\x69\x8e\xee\x51\x7b\x15\xa2\x5b\x8f\x05\x43\xfd\xaf\x7a\xd4\x0e\x75\x71\x65\xfc\xa1\x41\x4d\x31\x1e\x5b\x44\x0b\xea\x12\x68\xea\x71\x53\xae\xd1\xbc\xee\xf8\xab\x48\xf4\x45\xd0\x0d\x5a\xec\xb8\x10\x81\x67\xb5\x62\x3d\x0b\x0d\x9f\x59\x2e\x46\xb7\xfa\x78\x3f\x6d\xd5\xd0\xa5\x6e\xa8\x06\x2d\x6a\x4f\x69\x66\x29\x34\xa5\x1a\x7a\x4e\x5a\x2c\xe8\x26\x35\xe9\xae\x1e\x43\x3c\xd1\x9b\xd4\xa6\x45\xd0\x55\x5a\xa0\xa6\x3a\xff\x40\xde\x4a\x1e\xe8\xb6\xb5\xab\xaa\xb1\x92\xa3\x77\x22\x70\xd8\xc5\xe8\xf3\xc8\x19\x33\x07\xed\xc0\xc5\x7e\xd0\x95\x0e\xb6\x33\xca\x4f\x22\x44\x93\x45\xeb\xb4\xc2\x3e\xac\x68\xef\x6a\xfc\x53\x9d\xfd\x30\x5d\xcf\x52\xa8\x1a\xd1\x10\x42\x44\x32\x17\xd5\xa4\x19\x40\x88\x7f\x02\x00\x00\xff\xff\xc9\xa5\xfa\x87\x1b\x08\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
