// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package esp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7d\x73\xdb\x36\x93\xff\x3f\x9f\x62\x1f\xd4\x19\x49\xad\x29\xc9\x76\x9b\xbb\x53\x24\x65\x72\xcd\x75\xda\x9b\x34\xc9\x34\x6e\x3b\x73\x69\xce\x03\x91\x2b\x09\x0e\x08\xb0\x00\x28\x59\xf1\xe8\xbb\x3f\x03\xbe\x8b\x22\x25\xca\x96\xd3\x64\x26\x9c\x89\x43\x82\xcb\x5d\x60\x5f\x7e\xbb\x58\x52\xb7\xb7\xe0\xe1\x94\x09\x04\xe2\x4a\x61\x50\x18\x02\xeb\xf5\xa3\xa1\xc7\x16\xe0\x72\xaa\xf5\x88\x04\x74\x86\x8e\x61\x86\x23\x19\x3f\x02\x00\x28\xde\x8c\xc6\xaf\x38\x4e\x4d\x72\x33\x22\x98\x5f\x8c\x6f\x6f\x81\x9d\xfd\xa7\x00\xf2\x02\x17\xcc\x45\x78\xac\x09\x9c\x80\x60\x3c\xfb\xd7\x15\xd4\x47\x58\xaf\x87\xbd\xf9\x45\xc2\xb8\xe7\xb1\xc5\xf8\x51\x8d\x10\xc5\x66\xf3\x0d\x29\x05\x8a\xa9\x54\xbe\x33\x53\x32\x0c\x20\x08\x39\x77\xca\xb4\x65\x7a\x26\x82\xd0\xc4\x0f\x94\xa8\x22\x4a\x4e\x27\xc8\x53\xda\x89\x11\xb5\x94\xf6\xb0\x2b\x9d\x42\x57\x0a\x6e\xd5\xb8\x5e\x57\x12\x0d\x27\xa1\x31\x52\x80\x59\x05\x38\x22\xf1\x05\x29\x48\x00\x2b\x85\xb9\x32\x3e\x59\x52\x25\x98\x98\x45\xe7\xda\x27\x95\x1c\xd3\xc3\xa3\x86\x3a\x46\xce\x66\x1c\x47\xc4\x97\x1e\xe5\x24\x19\xa3\x6a\x86\x66\x44\xbe\x89\x07\xf7\x33\x89\xe8\x62\x4b\x8f\x48\x66\xbf\x1f\xa5\x98\x32\xe5\x83\x42\x6d\xa8\x32\xe0\x45\xf6\x24\xd0\x85\xf5\xba\x31\xd3\x89\xf4\x56\x05\x9e\x7f\x32\xce\x61\x82\x25\x9e\x5d\x78\xae\x10\x56\x32\x04\x1d\x2a\x7c\x76\xa0\x08\x97\x72\x3e\xa1\xee\x87\x11\xa1\xae\x61\x52\xb4\x5b\x09\xf7\x56\xe7\x69\x8d\xe5\x22\xc3\xb0\xcc\x87\xa8\x86\x29\x75\x02\xb9\x44\xe5\xc8\xe9\x94\x40\x59\x15\xbf\xc5\x0c\x93\x89\x8d\x87\x3d\x56\xcd\x77\xd8\x8b\x0d\x5c\xeb\x2f\x28\xbc\xe3\x38\x8a\x47\xc5\x0c\xd5\xe7\xe6\x27\x78\x5c\x2f\x59\xb2\x00\xc1\xb5\xec\x67\x0f\xe7\x29\x78\xa8\x9f\xa0\xa2\x1a\xd5\xb6\x93\xfc\xc9\x02\xbc\x87\x87\x0c\x7b\x11\xf8\x94\xa0\x2b\x06\xc6\x8a\xcb\xe4\x34\x45\xce\x22\xc6\xb9\x1c\xa9\x9a\xb2\x1b\x3b\x8d\xed\xbb\x4a\x2e\x2b\xe0\xdc\x95\xdc\xf1\x3d\xe7\xec\x1c\xec\x99\xf6\xd3\xb3\x1b\xed\x9c\x9d\xd7\x60\xef\xcd\x55\x40\x05\xf2\x1d\x68\x7b\x73\x55\x4c\x1f\x1b\x54\xf3\xf3\xad\x4c\x41\x8d\x51\x6c\x12\x1a\xd4\xb1\x1a\x87\xbd\xf9\x79\xc5\x93\x61\x06\xd0\x82\x2e\x40\xd0\xc5\x84\xaa\x18\xf7\x21\x9a\xcf\x95\x91\x92\x4f\xe4\x4d\x8d\x4d\x87\x9c\x8d\x87\xb4\xb0\x6e\x4e\x03\x8d\x0e\x67\xe2\x03\x19\x17\x8d\x6d\x6d\xed\xce\x71\xa1\xa4\x70\x6c\x0e\xb0\x36\x1d\xf6\xe8\x78\xd8\xe3\x15\xc6\x1d\xf6\x42\x5e\x31\xba\xcb\x2c\x3b\x0c\xbd\xad\xc8\x34\x49\x57\xc8\x08\xb2\x74\x89\x37\xc6\xf1\x43\x83\x1e\x4c\xa5\x30\xce\xd9\x05\xf8\xce\xc4\xb9\xe8\xef\x4e\x60\x9c\x6a\x73\x15\x06\x1e\x35\x78\xe5\x21\x37\xb4\x0e\xa2\x92\x67\x14\x5d\x42\x3b\xb6\xdc\x4b\xaa\x0d\x24\x09\xd0\x30\xdf\x66\x7b\x68\x3f\xd6\x1d\x6b\xc0\x62\xca\x6f\x07\x8a\x09\x03\x64\xa8\x5d\xc5\x02\x13\x83\xdc\x5f\x84\x06\x01\x67\x2e\xb5\xb1\xd8\xbb\xa6\x0b\x1a\xdf\xfd\x8b\x8c\x3d\xe9\x86\x3e\x0a\xd3\x5d\x2a\x66\xb0\x6d\xa7\x76\x29\xdf\x1a\xc5\xc4\xac\xdd\x22\xd0\x2e\xce\xb9\xfb\x93\x54\x3e\x35\x40\xce\xfb\xfd\x27\x4e\xff\xcc\xe9\x9f\x5f\x9e\xfd\x30\xe8\x7f\x3f\xe8\xff\xf0\x7f\xfd\xff\x18\xf4\xfb\xa4\x03\xa4\xd5\xe9\x0c\x7b\x31\xff\x31\xe9\x54\x2d\xba\x53\xb7\x6c\x8b\xdb\x5c\xd7\x66\xf8\xa2\x56\xa0\x56\x2d\x9f\xbd\x46\x76\x2e\xbf\x3a\x6d\x0d\x7b\x41\x52\xb4\x6d\x8c\x1a\x3a\xe1\x98\xf9\x64\x74\x11\xfd\x75\xb4\x51\x2c\x40\x2f\x82\xe4\x78\xdc\x33\x8e\x42\x1d\x48\xa1\xd9\x02\x41\xc8\xa5\xa2\x01\x01\x6d\x56\x16\x59\x97\xcc\x33\xf3\xc1\x59\xbf\xff\xb8\x2e\x94\xcd\x1c\xa9\x57\x77\x4f\xed\xc0\x74\x33\x4f\xe7\xe7\x7b\x8e\xc5\xb9\x73\x92\xc3\xd1\xf3\x14\x87\x52\x18\x32\xf3\x9d\xac\xf2\x27\xff\xa0\x3c\xdc\xfb\xd4\xb0\x57\x37\x35\xfb\xcc\x8e\x05\xd9\x2c\x59\x3f\x91\xc8\x05\xc5\x0c\xe1\xc4\x96\xd7\xa7\x70\xb2\xb0\x93\x81\xc1\x08\xba\x71\xee\xd4\x57\x39\xc0\xee\xf2\xe5\x9d\x9a\x8b\x09\x3c\xbb\xe4\x93\xac\x8c\x37\x35\x53\x2e\x3e\xb0\x93\x00\x32\x30\xc2\xbf\x13\xbe\x84\xf9\x01\x47\xeb\xf1\x51\x30\x74\xe3\x32\x80\xec\x9a\xf8\x86\xc8\x40\x61\xea\x47\x01\xf5\x3c\x26\x66\x83\x3e\x19\x0f\x5d\xe9\x65\xae\x79\xad\xa5\x20\xe3\x8d\x00\xac\x89\xbf\xad\xf0\xfb\xdf\xb7\xaf\x5f\x75\x75\x14\x7d\x6c\xba\x8a\x2f\x03\xaa\x34\xb6\x13\x24\x48\xb4\xbf\x5e\x77\x4e\x41\x84\x9c\x9f\xc2\x79\x21\xdc\x86\x3d\x3b\x8f\xf1\xb0\x17\x28\x6c\xa4\x99\x7d\xf8\x53\x22\xcf\xa4\x37\xe2\x5d\x5f\x93\x66\xda\xdc\x69\xe2\x7a\x87\xde\x2f\x61\xd8\xab\x71\xeb\x61\x2f\x42\x88\x3b\x96\x43\x49\x66\x13\xd2\x8b\x7d\xfd\x33\x2f\x80\x5e\xd9\x79\x7e\x2d\x7a\x0e\x29\x7a\x3e\x8b\x24\x03\xcd\xe0\xb2\x90\x21\x7e\x79\xd1\x24\xa9\xc0\x06\x1e\x76\x03\x25\x8d\x74\x25\xbf\xf2\xe9\xb5\x54\x40\x2e\x2c\x0c\x6e\xb0\x7d\x45\xfd\x62\xde\x69\x18\xd5\x45\x0e\x97\xab\xa0\x51\xbe\xdb\x7a\xf0\xb9\x52\x74\x75\xc0\x93\xa9\xe2\x3d\xa6\x03\x4e\x57\x03\x10\x52\xa0\x75\x8f\x9d\x59\xf6\xf8\x39\xb3\x90\x2f\x4f\xe1\xc4\x22\x45\x94\x2b\x33\xc8\xa8\x5f\x42\xd3\xf4\x28\x3d\xec\xfe\xf2\xa2\x1b\x17\x69\x8d\x12\xe5\x7e\x9b\x17\x58\x5b\x9b\x97\x98\x37\xb5\x7b\x81\x8b\xb5\xfb\x21\x53\xdc\x78\x38\xb2\xfd\xa1\x4f\x37\xc9\x49\x27\x81\x92\x01\x2a\xc3\x50\x5b\xab\xc4\xd2\xde\xe4\x63\xcd\x32\x1b\x9b\x6e\x30\x6a\xf0\xd0\x7e\x58\x49\xe0\x63\xff\x2a\xa0\x01\x76\x6c\xd3\xef\xf1\xad\x0a\x01\x79\x24\x26\xfa\x59\x11\x38\x69\x14\x8c\x3b\x99\x25\xa5\xec\xe1\x9c\x76\x57\x03\x25\xca\xe6\xea\xd9\x57\xfe\x96\x8f\x3c\xbc\x83\xd3\xcc\x0b\x56\x91\x33\x1d\xe6\x12\xf9\x04\x0e\xb6\x4d\x1c\x29\xa9\xec\xaa\x80\xbd\x1f\xc3\xc8\x46\x39\x47\xd8\xb8\xf9\xbb\x60\xe6\xae\xd2\x9a\xdb\x10\x1a\xd7\x90\x05\xde\xcd\x2c\x59\x59\x01\xde\x5d\xfe\x5d\x6b\xd8\x7f\xa2\x7e\xcd\x65\xa6\x95\xac\x46\x63\x98\x98\x3d\x7c\x31\x0b\x69\x71\xe8\xdd\xbf\xac\xfd\x31\xd9\xb3\x7d\xad\x6b\x9b\xd7\xb5\x53\xa9\x7c\x50\xd2\x56\x48\xf6\x94\x40\xdc\xaa\x1e\x91\x67\xc9\x49\xea\x09\x04\x7c\x34\x73\xe9\x8d\x48\x20\xb5\x21\xc0\xbc\x11\xc9\xef\x6d\x34\xfd\x17\x94\x33\x8f\x1a\xa9\x6a\x4b\xdc\x4f\x55\x4c\xc3\x91\x0a\xea\x52\xf7\xe6\xac\xd0\xbd\x79\x1d\x58\x35\xdd\xa9\x94\x6d\xd4\xbe\x81\xbd\xf8\xb8\x37\xaf\x35\x6f\xe5\xb0\x53\x38\x91\xd1\x82\xa2\xe2\xb4\x88\x02\xf5\xcc\x1b\xd6\xa7\x31\xdf\x28\x2b\x1d\xa7\x76\xcb\xab\xd7\x84\xb5\xad\x2d\x81\x4c\xa4\xe4\x8d\xfa\x36\xc3\xe8\xe5\x6c\xd2\x88\x71\xe7\xe8\x7e\xb0\x81\x9f\x77\x6b\x1c\xbd\x64\xc6\x9d\x13\x10\xd4\x8f\x5f\xbc\x94\xd6\x10\x07\x41\xd5\x78\x36\xb5\xa4\xed\x9a\x12\x44\x16\xef\x00\x31\xca\x1a\x7e\xbd\x86\x48\x2c\x7a\x19\x00\x43\x6f\xef\x9a\xa3\xde\x0c\x9b\x82\x54\xd0\xde\x5a\x3c\x13\x86\x74\xaa\xc7\x9f\x7c\x4f\x6a\x7b\xae\xb5\x6a\x11\xa1\x3f\x41\x45\x36\x5e\x7f\x5b\x34\x51\x56\xc7\xf5\x7a\x89\xfa\x41\x1b\xb7\xfe\x48\x3a\x44\xf5\x3a\x0b\xa8\x31\xa8\xc4\x88\xfc\xff\x3b\xe7\xbb\xf7\xcf\xde\xf5\x9d\xff\x7a\xff\xed\x09\xb9\xa7\x42\xc2\x3a\x8d\x84\x5f\x96\x4a\xee\xa4\x91\xad\x45\x4f\xb9\xa4\x76\xd5\x5f\xc8\xa2\x73\x3f\x68\xff\xd5\x8d\x4f\x3a\xcf\x0e\x51\x00\x15\x5e\x85\xe9\xe3\x46\xaa\xf5\x8a\x19\x42\x9b\xa3\x28\xc7\xe7\x59\xbf\xdf\xcc\x2f\x0c\xde\x18\xaa\x90\x56\xe9\x05\x14\x6a\xf6\xd1\x26\xb1\xab\x94\x8c\x80\x92\x4b\x3d\x22\xdf\xdf\x01\x53\xc6\x15\x4a\x1c\xf6\x52\xce\xcd\x34\x72\xa8\xd5\x2d\xf7\x4f\x61\xf3\x06\x06\xfd\x27\x9b\xc6\xb0\x6f\x1b\x51\xbb\x75\x18\xf6\xac\xd6\x8e\x55\x94\x4b\x43\xaf\x50\x58\x49\xde\x17\x55\x97\xbf\xbe\x7c\xfe\xb5\x28\x3f\x6a\xb3\xf9\xf0\xa6\xf2\xee\x0a\xf0\xb0\xa6\xf2\x5b\x43\x4d\xa8\x9b\x97\xbc\x51\xfd\x97\x3a\xb0\x0a\x85\x88\x7b\x04\x19\xbf\x64\x28\x66\x98\x63\x55\x7e\x1f\xa9\xb7\xca\xef\x46\x41\x71\x9f\x68\x3f\x6c\xb5\x6f\x94\x9c\x29\xd4\x07\xad\x77\x3f\xcc\x16\xbf\x7b\xcc\x04\x24\xe6\xf4\xa9\x9a\x31\xe1\x4c\xa4\x31\xd2\x1f\xd4\x7d\x4d\xd1\x84\xa5\x33\xa1\x0a\x8a\x17\x99\x07\x55\x5a\x64\x83\x92\x89\xa9\x8c\x76\x83\x0b\xcc\x6d\xb2\x41\x11\x7f\x14\x16\x9b\xc4\xa2\x7b\xbc\x8d\x4c\x49\x26\x54\x11\xa0\x8a\x51\x27\xca\x08\x42\x2e\x23\xec\x8f\x44\x2e\x15\x33\x06\x45\x94\x13\x72\x12\x9f\x89\x11\xe9\x6f\x8c\xd0\x9b\xfc\x21\x23\x0d\xe5\xd1\x23\x1b\x6e\x9f\xde\x4e\xe5\xc2\x7a\xbd\x6b\x3b\xb8\xa5\x36\x1d\x50\x91\x72\xe4\x4c\xa0\x33\x47\x0b\x3d\x83\xf3\x7e\x70\x13\x65\xdd\xd2\x8c\x61\xb2\x32\xa8\x41\x4e\xa1\x3c\xb1\x61\xcf\xf2\x6a\xda\x8c\xdc\x82\x87\x3b\x92\x7d\xba\x48\xf8\xd1\x6e\x56\x74\xe8\x1f\x18\xf9\x91\x8e\xdc\xe4\xd9\x7b\x84\xee\xfe\xde\x57\x4d\x7b\xa3\x58\xc0\xcc\xa5\x62\x1f\xa5\xb0\x06\x8b\xae\xa3\x8f\xe0\x1c\x8e\x53\x03\x9e\x92\xc1\x47\x29\x90\x6c\xf4\x43\xb6\xbb\x1e\xd2\xd0\xed\x36\x49\x34\x28\x64\xd2\xfa\xa8\xe9\x22\x6e\x7c\x19\x6c\xd0\x87\xfc\x73\xe2\x5d\x0d\x8c\xf8\x2b\xe1\xa9\x54\x23\xc2\x71\x81\x9c\xe4\xb9\x2e\xaa\xc6\x9c\xe4\x33\xe2\x38\xdb\x5f\xa4\xc9\xfe\xa2\x32\xd7\x97\x8f\xfc\x8d\x1c\xf3\x51\x86\xc9\x47\xa7\x3b\xcc\x53\xf1\xd9\x60\xdd\x1a\x93\x19\x3d\x49\x67\xf4\xa4\xd1\x8c\xe0\x80\x32\xd4\xda\xc3\xa4\x13\x8f\x6b\xd2\xec\x32\x2f\x44\xe3\x28\x8d\xc7\x23\x00\x51\xf8\x77\xc8\x14\x7a\x23\x92\x9e\xed\xd2\x7f\x7d\x0c\xd6\xdc\x3a\x52\xd9\xf7\xc5\x14\x78\xff\xad\x24\xf5\x5c\xaa\x0d\xf8\xa8\x35\x9d\xe1\xd7\x72\xef\xe0\x1e\x6c\x33\x90\xda\x87\x4d\x93\xd4\x12\xdb\x08\x55\xb8\xf5\x25\xe2\x14\x14\xb1\xea\x65\xcc\xde\x3a\x59\x92\xc0\xd3\x30\xc9\xc2\xf9\xdb\x7d\xd9\xf8\x33\x44\xb2\x44\x6b\x31\x8e\x25\x17\x01\xa7\x2e\xce\x25\xf7\x50\x8d\x08\xe5\xa8\x72\x64\x7b\x70\x1c\x2b\x6b\xe1\x6e\xbe\x90\x61\xc2\x43\x79\xc3\xaf\x45\xd0\xf9\xc7\xed\x7d\xdf\x9e\x50\xa6\x2e\xeb\x11\xe9\xc5\xb8\x49\xab\xe7\xfe\x06\xe6\xe2\x4a\x4b\xce\xbc\x4a\x88\xab\x7a\xa0\x99\x33\xd4\x29\xd6\xf7\x1c\x39\x9d\x6a\x34\xce\xc5\x3e\xad\x6e\xfc\x5a\x45\x87\x13\x9f\x99\xad\x5f\xab\xe8\xd0\x75\xed\x3e\xaa\xb0\x53\x45\xe1\xa5\xb9\x68\xd7\x4f\x65\xee\xa6\xbd\xe3\x75\x77\xd2\x9f\xc6\xcd\x91\x7a\x59\x73\xf6\xf6\x16\xb4\xa1\x86\xb9\x3f\x5f\xfe\xfa\x12\xda\xf1\xf9\xef\xbf\xbd\x04\xd2\xf3\xa8\x9e\x4f\x24\x55\x5e\x8f\x6a\x8d\x46\xf7\x16\x28\x3c\xa9\x74\x2f\x7b\x71\xa6\xbb\x02\x8d\x33\xd1\x3d\x57\xc7\xa3\x97\xf1\xe8\x44\x4a\xa3\x8d\xa2\x41\xd7\x67\xa2\xeb\xda\x5d\xe7\x94\x72\x8d\x9d\x23\x4a\xcd\x5f\xd8\xa5\x13\xc8\x47\x1e\x66\x02\x73\x36\x9b\x73\x5b\x41\x5c\xc7\xf2\x8c\xf4\xa5\x52\x72\x79\xd4\x45\x26\xdb\x83\x44\x44\x7a\x59\x25\x22\xb6\x77\xb4\xa7\x2c\x00\xbf\x7d\xac\xe0\xe6\xdf\x64\x6f\xd7\xa2\x6d\x0d\x44\x79\xe2\x74\x6b\x38\x83\x93\xdb\x0d\x3f\x8b\xf7\xbe\x70\xd6\xef\x3f\x7e\x9a\xdd\x58\x27\x8e\x16\x49\xae\xf3\xb1\x6b\x7d\x44\x0f\xeb\x5d\xeb\xde\xf5\xdf\x21\xaa\x55\xb7\xe0\x64\x56\x25\xd7\x0f\xe1\x59\x13\x6d\x05\xd6\xba\xf3\x83\xc8\xcc\x7d\xb7\x24\xbb\xe0\xd4\x9f\x40\x78\xb2\xf6\xda\x48\x3a\x8e\xf8\x62\x20\x5d\x17\x2e\xbb\x01\x75\x3f\x1c\x51\x4e\xf6\x89\x80\x95\x92\x5d\x1c\x53\x8f\x79\xb4\x5e\x97\x82\x75\x5b\x40\xb3\x6f\xf2\xb3\x30\x3b\x69\xa7\x9f\xe7\x77\xba\x51\x6f\xb2\x3d\x0d\x45\x54\x64\x43\xbb\x53\x8a\xd3\x17\xa9\xe4\xf8\x95\x87\xb6\x5b\x51\x18\x95\x88\xec\x11\x50\x45\x39\x47\xfe\x7b\xc0\x25\xf5\xf4\x00\xce\x4e\x2b\x69\xfc\x57\xd4\xc7\x01\x90\x29\x53\xfe\x92\x2a\x24\xdb\x64\xae\x42\x6a\xf0\x17\x9f\xce\xf0\x72\x1e\xfa\x13\x41\x19\xd7\x83\x78\xcd\xdb\xd4\xd4\x75\x31\x30\xe8\xfd\xc4\x38\xea\x01\x6c\x2c\xdf\xa7\xee\x84\x09\xaa\x56\xa7\xdd\x09\x13\x9b\x3f\x7c\x5c\x3f\xdd\xec\xb7\xcc\xf9\xb5\xee\x32\xc1\xcc\xcf\xa9\xd3\x30\x31\x7b\x2d\x5e\x4a\xea\xb5\x3b\x25\xda\x4c\x5f\x49\xca\xfe\x99\x0a\x8f\xa3\x6a\xab\xb2\xfa\xec\xc1\xa6\xd0\x56\x36\xda\x42\x6e\x60\x34\x1a\x41\x6b\x4a\x19\x47\xaf\x55\x45\x6c\x0f\x81\x4b\x78\xf3\x4a\x1a\x36\x5d\xb5\xab\x29\xec\x11\xed\x6c\x07\xd0\xfa\x1f\xa5\xa4\x6a\x6d\xeb\x25\xa3\xc3\x1b\x33\x00\xd5\x4d\x4a\xb1\x1d\x84\xab\xc0\xf2\xc3\x3d\xfc\xe6\xcc\xc3\x5a\x63\xa4\x87\x45\x70\x26\x66\x03\x68\x65\x51\x7e\xd1\xaa\xa4\x5e\x77\x9e\x6e\x8d\xaf\xb3\x17\xa0\xed\x6c\xde\xf0\x2f\xab\xb9\x50\xc4\x69\xe0\x58\xca\x7b\x1b\xdb\xef\x88\xea\xd3\x7b\x39\x7e\x0a\x05\x6e\x7a\xfa\xa3\x52\xea\x15\x9e\x5c\x76\xe3\x6d\x35\x8c\x32\x67\x6e\xbb\xbe\x57\xa5\xd5\x93\x2e\xbd\xa6\x37\x35\xca\x4c\x56\xfd\xe6\xf5\xdb\xcb\x9a\x25\x87\x8a\x0f\xa0\x95\xee\xe2\x5b\xf0\x1d\xb8\xbe\x57\x4d\x9a\xe8\x6e\x50\x0a\xab\xed\xe5\x95\x96\x5c\x0e\xe5\x93\x76\xeb\x9b\xac\x5d\xd0\xea\x74\xe3\x7a\x3b\x43\xb9\x36\x2e\x2c\xf6\x6d\x2f\x28\x1a\xef\x06\x2a\xfa\xff\x05\x4e\x69\xc8\x4d\xbb\x42\xbd\x0b\xaa\x00\x61\x04\x27\x6d\x33\x67\xba\x0c\x0e\xc7\xd2\x19\x76\x03\x25\x83\x76\x2b\xd6\x5c\xab\x53\x4d\x6a\x13\xae\xa5\xd5\xa8\x18\xe5\xec\x23\xb6\x6b\x08\xef\xac\xdc\xf2\xfa\x2a\x3e\xb1\xdc\x58\x7a\xbb\x95\xd7\x80\x51\x51\xf8\x8e\x79\xef\x37\x0a\xc3\xa4\x24\xb4\xe3\xad\x4e\xd7\x9d\x53\x31\xc3\xdc\x3a\x55\x3e\xb8\xa0\xdb\x13\xb5\x47\xc1\x0a\xf5\xea\xb1\xf9\x6a\x5d\x7d\xfb\x03\x8c\x32\x3d\x33\xaf\xd5\xd9\x22\xaa\xb0\xad\x85\xa5\xf4\x19\x6b\xca\x56\x27\x46\xf5\xf4\x13\xac\x5a\x68\xb2\x73\x79\xf7\xe1\x7d\x41\x64\xf2\xf9\x54\xab\x03\xff\x1a\x41\xab\x55\x8b\x84\xfb\xf9\x2d\x28\x6f\x6f\xcf\x7e\xfd\x30\x9e\x59\x34\x71\xab\x73\x80\x9b\xda\xbf\xc7\xf7\xce\xe2\x75\x61\xcf\x50\x1a\xb6\x3e\x1b\xe5\xb6\xaa\x26\xcb\xfe\xac\xd1\x24\xdd\xc6\xb9\xa2\x75\x7b\x9b\x4b\xaa\xa3\xdc\x9f\x6b\xf7\xa6\x89\x66\x29\xa2\x5e\x41\x65\x8a\xec\xe7\x96\xf9\xc6\xeb\xdf\x01\x00\x00\xff\xff\xa9\x0a\x71\xb7\xf6\x46\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xdd\x8f\x13\x55\x14\xff\xd1\xe9\x76\x96\x15\xe5\x53\x11\x3f\xaf\x0f\x8b\x6c\x4c\xd7\x2d\x62\x62\xca\x96\x95\xcf\x48\x64\x91\xc0\x0a\x0f\x3e\x98\xa1\xbd\x94\x09\xed\x4c\xbd\x33\x83\xae\xf2\xb0\x6d\x89\x48\xc0\x20\x24\x44\x83\x8a\x2e\x3c\xa0\x31\x31\xdd\xee\x16\x0a\xec\xce\xc6\x37\x1f\xcf\x8d\xf1\xc5\x18\x5f\xfc\x23\xf4\xd1\xdc\xb9\xd3\xf2\xd5\x4d\x9c\x97\x7b\xee\xb9\xe7\xfc\xce\xf9\xfd\xce\x99\xbf\xd6\x24\x2f\x03\xc0\x8b\x00\x9e\x03\xb0\x6e\x19\x30\x04\x60\x45\x02\xd1\xd7\x48\x00\x7d\x00\x66\x12\xc0\x72\x00\xb7\x12\xc0\x6a\x00\xbf\x24\x80\x7e\x00\xbf\x25\x80\x14\x80\x3f\x13\xc0\x3a\x00\x7f\x27\x80\xa7\x00\xfc\x1b\xc7\xaf\x34\x74\xfc\x06\x03\x50\x90\xaf\x18\xc0\x5a\x00\xc3\x06\xf0\x34\x80\x1d\x86\xc6\x7f\xcf\x00\x4c\x00\x96\x01\x24\x01\xd8\xb1\xdf\x31\x34\xbe\x6f\xe8\x7a\x9f\xc4\xe7\xe9\x38\xfe\xf3\x38\xfe\x72\x1c\x77\x25\xf6\x4f\xc7\xfe\x1f\x63\x9c\x9f\x0d\x60\x10\xc0\x9c\xa1\xf9\xfd\x11\xbf\x27\x93\xfa\x7d\x79\x52\xe7\xad\x4c\x02\x63\xcb\x80\xf5\x49\x60\x05\x80\x23\x7d\xc0\x2a\x00\x85\x3e\xe0\x75\x00\x41\x7c\xff\xa9\x4f\xf7\x3f\xdf\x07\x8c\x02\xf8\xbd\x0f\x78\x0b\xc0\x9a\x14\xb0\x5e\xf1\x49\x01\x2f\x03\xf0\x52\x9a\xf7\xd7\x29\x5d\xf7\x6a\x0a\x18\x06\xf0\x6b\x0a\x78\x02\xc0\x3f\x29\x60\x0d\x80\x94\xa9\xfb\xdf\x60\x6a\x7e\xcc\x04\x06\x00\x0c\x99\xba\xde\x96\xf8\xdc\x6d\x02\xcf\x00\x38\x6c\xea\xbc\x0f\x4c\xdd\xe7\x69\x53\xe3\x5d\x8c\x71\xbe\x8f\xe3\x6f\x98\xc0\x01\x00\x6d\x13\x78\x5f\xf1\xec\xd7\x7e\xbb\x5f\xe7\x7d\x1c\xdf\xcf\xf4\x03\xcb\xa0\x7b\x5d\xa5\x47\x8f\x67\xe3\xf3\x31\x3c\xf8\x29\x7e\x1b\x00\x18\x00\x9e\x87\xd6\x51\xed\x8e\xc2\x53\xb5\x95\x9e\xaa\x77\xd5\x9f\xd2\xe8\x71\x00\x4f\xde\x97\xaf\xf8\xad\x8e\xed\x17\xa0\xf7\x44\x71\x32\x63\xdf\xda\x78\x1f\x15\x1f\xb5\x4b\x2b\xa1\x77\x2b\xfa\xb6\x0b\x61\x4d\x62\xbb\xef\x0b\xfb\x68\xe0\x73\xec\x10\xae\x55\xc8\x5b\x9e\xcf\xca\xdc\xf3\xac\x22\xc7\xce\xe3\x3c\x7f\xc2\x0b\xca\xd8\xe9\x3a\xc7\xec\xa2\x3e\x44\x99\x09\xee\x71\x9f\x15\xf8\x49\x3b\xcf\xef\x77\xfa\x96\xe8\xba\x77\x45\x07\x1b\xf4\x3a\x96\xd5\x29\xe4\x61\xef\x2e\xec\x53\x75\x5c\xa7\x64\x3b\x9c\xf9\x76\x39\x0a\xec\xe1\x63\x9b\x06\xbd\x21\xec\xe3\x27\x79\x09\xe3\x71\x57\xfb\xad\x32\xc7\x7e\xb7\xc0\x3d\xbc\x53\xf1\x6d\xd7\xc1\x01\xe1\x16\x05\xf7\x3c\x65\x54\xb8\xf0\x27\x71\x50\x37\x83\x43\xdc\x29\xe0\x90\x6f\xf9\x81\x87\x09\xbb\xcc\xdd\xc0\xc7\xc4\x64\x85\xe3\xb0\x55\x0a\x38\x8e\xd8\xa5\x12\x3b\xca\x1f\xea\x7d\x98\x6d\x17\x9c\x4d\xba\x01\xf3\x02\xc1\xc7\xba\x51\x1f\xda\x15\xce\xf2\x91\x14\x4b\x46\x56\x38\x04\xb7\x0a\x93\x10\x81\xe3\xd8\x4e\x11\x07\x79\xc5\x15\x7e\x7a\xdc\x2b\xda\x85\xf4\x8e\xa0\xe8\xa5\x27\xdc\xac\x4a\x7f\xf3\x84\x7d\xdc\x2a\xbb\xc3\x22\x18\x50\xc4\xd3\x13\xc2\x72\xbc\x92\xe5\xbb\x22\xcb\xde\x8e\x9e\xd8\x78\x20\xac\xb2\x5b\x70\xd9\xe8\x03\xf1\xdb\x06\xf6\x59\x4e\x31\xb0\x8a\x3c\x3d\xc1\xad\x72\x96\x75\xef\x59\x76\x30\xf0\x3c\xdb\x72\x06\xc6\xf7\x8e\xef\x4e\x1f\xe6\xc2\xb3\x5d\x27\xcb\x32\xc3\x23\x03\x3b\x5d\xc7\xe7\x8e\x9f\x56\xf4\xb3\xcc\xe7\x1f\xf9\xaf\x56\x4a\x96\xed\x6c\x65\xf9\xe3\x96\xf0\xb8\x9f\x7b\x77\x62\x4f\xfa\x8d\x7b\x71\xaa\x9f\x63\x5c\xa4\x77\x3b\x79\xb7\x60\x3b\xc5\x2c\x1b\x38\x50\x0a\x84\x55\x4a\xef\x71\x45\xd9\xcb\x32\xa7\x12\x5d\xbd\xdc\x6b\x5b\x99\x36\x73\xce\x60\x66\x24\x97\xcb\xb0\x8d\x1b\x99\x32\x47\x5e\xca\x65\x32\x6c\x8c\x8d\xb0\x6c\x74\xdf\x96\xdb\xdc\x79\x1a\xcd\x6d\x51\xe6\xa6\x28\x6c\x34\x33\xc2\x4e\x9d\xd2\x29\xdb\x72\x9b\x47\x86\xd8\x18\xcb\xb0\x2c\xdb\xbc\x15\xf4\x0d\x35\x64\x55\x56\xa9\x4d\x4d\xd0\x17\xb2\x26\x6b\x72\x8a\xda\x34\x23\xeb\xb2\x06\xfa\x81\xda\x72\x8a\x42\xba\x43\x21\x35\xa9\x25\xcf\x52\x43\xd6\xa8\x45\x77\xe5\x79\x5a\xa0\x90\x5a\x4c\x56\x29\xa4\x90\x66\xe4\x59\x6a\xd1\x02\xb5\xa9\x05\xba\x41\x2d\xba\x23\xab\xb2\x4e\xf3\x34\x4f\x0d\xd0\x15\x0a\x69\x41\x9e\xa6\x36\xcd\xca\xba\x9c\xa2\x86\xfc\x94\xda\xf2\x02\xe8\x3b\x0a\x69\x4e\xd6\x22\xec\x29\xba\x49\x73\x1d\x10\x85\x3b\xa3\x4a\xcb\x2a\x35\x98\xac\xcb\x6a\xd4\x58\x48\xb7\x95\x45\x4d\x85\xba\x74\x32\x2d\x46\xae\x16\xdd\xa2\x06\xcd\xca\x29\x59\xa7\x5b\x74\x87\xda\x4b\x00\x5d\x7f\xc4\x19\xaa\x1f\xe6\x61\x39\xe4\xb9\xde\xf9\x7b\x77\x81\x2e\x45\xe5\xe6\xe5\x05\x55\x5b\x35\x7d\x97\x5a\x34\x47\x0b\xd4\xa2\x59\x0a\x3b\xbf\x9d\x02\xfd\xbf\x91\xfa\xdf\xa4\xeb\x51\xb1\xa6\xa2\x26\xcf\x83\xa6\x1f\x55\xfb\x2b\x05\x06\xfa\x36\x52\xe3\x1c\xe8\x2a\x2d\x76\xe5\x8d\x92\x67\x55\x45\x35\x64\x95\xde\xbc\x9f\xa5\xd2\xf0\x51\xa1\xda\xb2\xa6\x4a\x5d\x95\x35\x5a\x54\xc3\xa2\x66\xc7\x35\x2d\x6b\x6a\x01\x94\x0a\xa0\x6b\xd4\xa0\xdb\x6a\xbe\x7a\x55\xae\x51\x9b\x16\x41\x5f\xd2\x02\x35\xe4\x99\x7b\xed\xf5\x12\x57\xe9\xa9\xc6\x25\x6b\xbd\x46\x75\x33\x4a\x0e\x87\x19\x5d\x8a\x24\x8f\x07\xac\x14\x38\x37\x06\xba\xd8\xcd\xed\xee\xc8\x67\x51\x46\x83\x45\x7b\xda\x63\xd1\x7a\xce\x6d\x29\xfc\xe9\xee\xe2\xc5\xac\x67\x29\x94\xb5\x68\x08\x21\xa2\x36\x17\x65\x3d\x1e\x40\x88\xff\x02\x00\x00\xff\xff\x4e\x57\x14\xe3\x98\x08\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
