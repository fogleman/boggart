// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package alsa

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xcb\x6e\xdb\x30\x10\xbc\xe7\x2b\x16\x7b\x6a\x0b\xc8\x8a\x9d\x22\xe8\xc1\xf2\xb1\xe8\x21\x05\x8a\xbe\xae\x01\x65\xae\x62\x06\x7c\xa8\xe4\xca\x71\x22\xe8\xdf\x0b\xea\xe1\xa8\xb6\xea\x1a\x68\x73\xa8\x2f\xe6\x63\x48\x8e\x66\x86\xdc\xba\x06\x49\x85\xb2\x04\xb8\x76\x96\xc9\x32\x42\xd3\x5c\x2c\xa5\xda\xc2\x5a\x8b\x10\x32\xf4\xee\x01\x57\x17\x00\x00\xe3\xd1\xb5\xd3\x89\x91\xc9\x7c\x01\xb1\x15\xcc\xd0\xda\x85\x64\xbe\xe8\xf1\x87\x6b\x76\xb7\xa5\xb0\xa4\x47\xb3\xc7\x08\x56\xac\xe9\x00\xd1\xa2\x36\x8b\x55\x5d\x83\x9a\xbf\xb3\x80\x9f\xb4\x78\x84\x42\x69\x42\x98\x41\xd3\x2c\xd3\xcd\x62\x62\xc5\x98\xad\x26\xe1\x0b\xb5\xc3\xd5\x32\x95\x6a\x7b\x40\x60\x62\xe8\x17\x4e\x83\x32\x13\x67\x14\xce\x9b\x01\x18\xdb\xc9\xc6\x79\xf5\xe4\x2c\x0b\x0d\x6d\x5f\x8b\x9c\x74\xa2\xa9\x60\x04\xef\x34\x75\x30\x04\x43\xbc\x71\x32\xc3\xd2\x05\x46\x50\x32\xc3\x40\x56\x22\x58\xb7\x15\x5a\x49\xc1\x74\x7c\xda\x21\x33\xc5\x64\xba\x53\xee\xbc\xab\xca\x09\x7e\xfb\x55\x2d\x8d\x88\xcd\x70\xeb\x74\x65\x08\x9f\x8d\xb4\xec\x9d\xee\x88\x42\x6f\xeb\xd5\xe0\xea\xd5\xa4\xa9\x87\xbf\xbd\x31\xdf\xfb\xbd\xa3\x2b\xb0\x0c\xa5\xb0\xfb\x14\xd1\x8f\x4a\x79\x92\xb8\x7a\xb3\x4c\xe3\xc4\x09\xb2\x69\xcb\xe5\x04\xe0\x38\x87\xd7\x03\xe1\xeb\xb3\x08\xb7\xbb\x28\x5b\x56\x0c\xfc\x58\x52\x86\x5e\xd8\x3b\x42\x30\xca\x66\x38\x47\x30\x62\x97\xe1\xfc\xf2\x12\x21\x30\x95\xed\xd0\xd8\xe4\x5e\xb3\xce\xb7\x41\x4f\x2b\x0c\x3d\xf7\xb6\x42\x57\x94\x61\x5d\xc3\xac\x1b\x82\xa6\x41\x18\x54\x18\xeb\x71\x42\x87\xa3\x5c\x9e\x33\xf5\xd7\x01\x29\xb5\x78\x24\xff\x32\x01\x79\xaf\x34\x41\xe5\xf5\x7f\x12\x11\xa6\x1d\x0b\x4f\x62\xca\x7d\xf0\x14\xd4\x93\xc8\x35\xdd\x0e\xb0\x78\xc5\x1f\x42\x86\x6f\x87\x34\xb4\x5f\x1a\x43\x12\x11\xd3\xf6\xc7\x84\x54\x5e\xb7\xcf\xd8\xb0\xcf\x4b\x66\x42\xdb\xdb\xe0\xb4\x92\x93\x4f\xe1\xd4\x82\xf3\xf2\xf3\x3b\xbd\x8d\x4c\x5c\x51\x04\xe2\xe4\xea\x4f\x62\xe7\x15\xb3\xb3\xa3\xb7\xb0\xbb\x9a\xa1\xca\x8d\xe2\x7d\x1c\x73\xb6\x90\xb3\x4d\x42\xb5\x5e\x53\x08\xf8\x5c\x15\xbe\xb4\x8b\xba\x82\xd0\xed\xf5\x2f\x75\x5c\xa6\x51\x88\x93\x95\x63\xd4\xed\x9b\xfd\x5f\x5d\x03\x59\x19\x0b\xeb\xc5\xa8\xe0\xde\x87\xb6\xd6\x42\x77\x3f\x02\x0b\x56\xeb\x0f\x5f\x3f\xde\xc0\xab\xae\xfd\xed\xf3\x0d\x60\x2a\x45\xd8\xe4\x4e\x78\x99\x8a\x10\x88\x43\xba\x25\x2b\x9d\x0f\x69\x5f\x27\x9c\x4f\xef\x47\x9d\x99\x51\x76\x16\x77\x2e\x84\x0e\xf4\x3a\x1e\xb0\x3f\xfd\x67\x00\x00\x00\xff\xff\x69\x66\xf8\x01\xed\x07\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbf\x4f\x14\x41\x1c\xc5\x1f\x27\xfe\x3a\x8d\x26\xb4\x5a\x7c\x89\x91\x68\xcc\xe0\xee\x9e\x24\x64\x60\x41\x45\x48\x8c\x5c\x24\xb8\x50\x9a\x4c\xd8\x61\xd9\xb8\x37\x73\x99\xdd\x35\x5e\x42\x01\xc4\x4e\x12\x0b\x63\xab\x85\xfc\x01\x17\x08\x06\xd4\x60\x6d\xe5\x6c\x63\xa9\x89\x9d\x8d\x9d\xbd\xb9\x3d\x84\x5c\xe3\xb7\x99\xf7\xe6\x7d\xe6\xcd\xf7\xfb\x40\xff\x6b\x00\x38\x0d\xe0\x32\x80\x00\xc0\x39\x00\x9b\xe8\xce\x1e\x80\x8b\x00\xf6\x01\x9c\x07\xf0\x05\xc0\x19\x00\xdf\x00\x9c\x05\xf0\x03\x40\x3f\x80\x5f\x00\x4e\x01\xf8\x0d\x60\xa5\x0f\xf8\x03\x60\x10\xc0\xe3\x0a\x70\x05\xc0\x5a\x05\xb8\x00\x60\xab\x02\x5c\x02\xb0\x53\x01\x06\x00\x7c\x3d\x3c\x7f\x56\x80\x3e\x00\x15\xf4\xce\x89\xc3\xde\xce\x7e\x27\x0f\xff\x2a\xe7\x4e\x62\xa4\x08\x5b\xd4\x4c\x44\x2b\x56\x11\x66\xe2\x44\xf6\x9a\xdc\x24\x98\x4b\x44\x8b\x96\xe3\x44\xe2\x91\x54\x21\x16\x75\x92\x37\x24\xe6\x65\x53\x9b\x8c\xd5\xd3\x28\x0e\xd9\xdd\x3c\x4a\x59\xa0\x39\x85\xf2\xe9\xed\x27\xf1\x8a\x68\xe8\x61\x93\x57\xe7\x1e\x06\x6c\xca\x48\x91\xc5\x5a\xb1\x7b\x22\x93\x9c\x3c\xc7\x1d\x65\x4e\x8d\x79\x35\xf2\x6a\x7c\x64\xe4\x86\x53\x73\x9c\xea\xac\x48\x33\x16\x18\xa1\xd2\x44\x64\xda\x70\x7a\x50\x76\x50\x3d\x37\xa2\xa1\x43\x4d\xe3\x3d\xc5\x13\xd5\x59\xa1\xa2\x5c\x44\x92\x05\x52\x34\x38\x1d\x79\x4e\xf3\x79\x9a\xc6\x42\x55\xeb\xf7\xeb\xd3\x6c\x51\x9a\x34\xd6\x8a\x93\x3b\xec\x54\xa7\xb4\xca\xa4\xca\x58\xd0\x6a\x4a\x4e\x99\x7c\x96\xdd\x6c\x26\x22\x56\x63\xb4\xb4\x22\x4c\x2a\x33\x7f\x21\x98\x61\xa3\xc7\x5c\x67\x9f\x65\x69\xd8\xb4\x5a\xd2\x61\xac\x22\x4e\xd5\xb9\x24\x37\x22\x61\x33\xda\x34\x52\x4e\xaa\x59\xda\xd4\xaf\x8d\x51\x57\xfa\xea\xaa\xeb\xf8\xbe\x4b\x43\x43\xd4\x91\xce\xa0\xef\xba\x34\x49\x0e\xf1\xd2\x4f\xf8\xde\xbf\x68\xdc\xbf\xd5\x91\xd7\x4a\x6c\xdc\x75\x68\x75\xb5\xfb\x64\xc2\xf7\x9c\xeb\x34\x49\x2e\x71\xf2\xc6\x60\xdf\xd9\xf7\x76\x97\xec\xe7\x62\xcd\x1e\xd8\x3d\xbb\x53\xac\x15\x2f\xec\xb6\x6d\xdb\xdd\x62\xa3\x58\x2f\x5e\xc2\x6e\xd9\xb6\xdd\xb7\x1f\xff\xc7\x2c\xcc\xcf\x52\xf1\xbc\xcb\xd9\x36\xec\xdb\x63\xd2\xb6\x8b\x8d\x62\xf3\x28\x85\x7d\x53\x6c\x94\x4d\x6d\xbb\x6d\xf7\x3a\x19\xec\xab\x12\xff\x64\x3f\xd8\x83\x62\xbd\xbc\xfa\x1b\x00\x00\xff\xff\x95\xa0\x3b\x19\xf5\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
