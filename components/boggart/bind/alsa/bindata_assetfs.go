// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
package alsa

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xc9\x6e\xdb\x30\x10\xbd\xe7\x2b\x06\x73\x6a\x0b\xc8\x8a\x9d\x22\xe8\x41\xf2\xb1\xe8\x21\x05\x8a\x6e\xd7\x80\x32\x47\x31\x03\x2e\x2a\x39\x72\x9c\x08\xfe\xf7\x82\x5a\x1c\xd5\x56\x5d\x03\x6d\x0e\xf5\xc5\x5c\xde\x70\x9e\xde\x3c\x72\x9a\x06\x24\x95\xca\x12\xe0\xca\x59\x26\xcb\x08\xbb\xdd\x45\x26\xd5\x06\x56\x5a\x84\x90\xa3\x77\x0f\xb8\xbc\x00\x00\x18\xaf\xae\x9c\x4e\x8c\x4c\xe6\x0b\x88\xa3\x60\x86\xd1\x36\x24\xf3\x45\x8f\x3f\x8c\xd9\xde\x56\xc2\x92\x1e\xed\x1e\x23\x58\xb1\xa6\x03\x44\x8b\x5a\x2f\x96\x4d\x03\x6a\xfe\xce\x02\x7e\xd2\xe2\x11\x4a\xa5\x09\x61\x06\xbb\x5d\x96\xae\x17\x13\x11\x63\xb6\x9a\x84\x2f\xd5\x16\x97\x59\x2a\xd5\xe6\x80\xc0\xc4\xd2\x2f\x9c\x06\x65\x26\x72\x94\xce\x9b\x01\x18\xc7\xc9\xda\x79\xf5\xe4\x2c\x0b\x0d\xed\x5c\x8b\x82\x74\xa2\xa9\x64\x04\xef\x34\x75\x30\x04\x43\xbc\x76\x32\xc7\xca\x05\x46\x50\x32\xc7\x40\x56\x22\x58\xb7\x11\x5a\x49\xc1\x74\x9c\xed\x90\x99\x62\x32\x5d\x96\x3b\xef\xea\x6a\x82\xdf\x3e\xaa\xa5\x11\xb1\x39\x6e\x9c\xae\x0d\xe1\x73\x21\x2d\x7b\xa7\x3b\xa2\xd0\x97\xf5\x6a\xa8\xea\xd5\x64\x51\xa7\x7e\xfb\xe2\x7c\xef\xcf\x8f\x95\x81\x2c\x54\xc2\xee\x9d\x44\x3f\x6a\xe5\x49\xe2\xf2\x4d\x96\xc6\x8d\x13\x84\xd3\x96\xcf\x09\xc0\xb1\x17\xaf\x07\xd2\xd7\x67\x93\xce\x94\xad\x6a\x06\x7e\xac\x28\x47\x2f\xec\x1d\x21\x18\x65\x73\x9c\x23\x18\xb1\xcd\x71\x7e\x79\x89\x10\x98\xaa\x76\x69\x5c\xe8\x5e\xb7\xae\x76\x83\xa6\x56\x18\x7a\x9e\x6d\x84\xae\x29\xc7\xa6\x81\x59\xb7\x04\xbb\x1d\xc2\xa0\xc2\x58\x8f\x13\x3a\x1c\x79\xf3\x9c\xad\xbf\x36\x49\xa5\xc5\x23\xf9\x97\x33\xc9\x7b\xa5\x09\x6a\xaf\xff\x13\x9b\x30\x6d\x59\x78\x12\x53\x0e\x00\x4f\x41\x3d\x89\x42\xd3\xed\x00\x8b\x57\xfd\x21\xe4\xf8\x76\x70\x44\xfb\xa5\xd1\x28\x11\x31\x6d\x81\xe8\x92\xda\xeb\xf6\x39\x1b\xce\x79\x49\x5f\x68\x7b\x1b\x9c\x56\x72\xf2\x49\x9c\x0a\x38\xcf\x43\xbf\xd3\xdb\xc8\xc4\x95\x65\x20\x4e\xae\xfe\x24\x76\x51\x33\x3b\x3b\x7a\x13\xbb\xeb\x19\xea\xc2\x28\xde\x5b\xb2\x60\x0b\x05\xdb\x24\xd4\xab\x15\x85\x80\xcf\xdd\xe1\x4b\x1b\xd4\x35\x86\xee\xac\x7f\xa9\x63\x96\x46\x21\x4e\x76\x90\xd1\xb4\x1f\xf6\x7f\x4d\x03\x64\x65\x6c\xb0\x17\xa3\xc6\x7b\x1f\xda\x9e\x0b\xdd\xfd\x08\x2c\x58\xad\x3e\x7c\xfd\x78\x03\xaf\xba\xf1\xb7\xcf\x37\x80\xa9\x14\x61\x5d\x38\xe1\x65\x2a\x42\x20\x0e\xe9\x86\xac\x74\x3e\xa4\x7d\xbf\x70\x3e\xbd\x1f\x4d\x66\x46\xd9\x59\x3c\xb9\x14\x3a\xd0\xeb\x98\x60\x9f\xfd\x67\x00\x00\x00\xff\xff\xfd\x60\xa3\x26\xf5\x07\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x3d\x4c\x14\x41\x18\x86\x1f\x4e\xfc\x3b\x8d\x26\xb4\x5a\x7c\xc4\x48\xb4\x58\xbc\x45\x4d\xcc\xc2\x82\x3f\x81\xc4\xc8\x25\x04\x0f\xac\x27\xdc\x70\x6c\xdc\x9b\xbd\xec\x8f\xf1\x22\x05\x10\x2b\x25\xb1\x30\xb6\x5a\x68\xac\x2f\x18\x0c\xa8\xc1\xda\x6e\xb6\xb1\xd4\xda\xc6\xce\xde\xdc\x1e\x42\xae\xf1\x6d\xe6\x7d\xe7\x7d\xe6\x9b\xef\xc7\xd0\xe0\x2b\x80\xe3\xc0\x79\xa0\x06\x9c\x02\x36\xe9\x69\x07\x38\x0b\xec\x02\xa7\x81\x6f\xc0\x09\xe0\x3b\x70\x12\xf8\x09\x0c\x02\xbf\x80\x63\xc0\x6f\x60\x6a\x00\xfe\x00\xc3\xc0\xf5\x12\x5c\x00\x1e\x94\xe0\x0c\xf0\xa4\x04\xe7\x80\x67\x25\x18\x02\xde\xef\x9f\xbb\x25\x18\x00\x4a\xf4\xeb\xc8\xfe\xdc\xee\x7e\x47\xf7\xff\x2a\x74\x2b\x8c\xb5\xaa\xb7\xa5\x15\xaa\x76\x60\x1a\xcc\x04\xa1\xee\x0f\x59\x1c\x32\x17\xaa\xb6\x2c\x07\xa1\xe6\xbe\x36\x75\x16\xa3\x30\x6b\x6a\xe6\x75\x2b\x8a\x53\xa7\x9a\x34\x82\xba\x73\x3b\x6b\x24\x4e\x2d\xf2\xa4\xae\x1f\xdd\x7c\x18\xac\xa8\x66\x34\x1a\x67\xe5\x59\x95\xa4\x4e\x2d\x56\x26\x09\x55\x1a\xc5\x9e\xdc\x2b\x2a\xa9\x66\xb1\x6a\x46\xf5\x48\x26\xfa\xf8\xc9\xf2\xac\x32\x8d\x4c\x35\xb4\x53\xd3\xaa\xe9\xc9\x41\xf6\x64\x3e\x4b\x92\x40\x99\x72\xf5\x6e\x75\xda\x59\xd4\x71\x12\x44\xc6\x13\x77\xb4\x52\xbe\x13\x99\x54\x9b\xd4\xa9\xb5\x5b\xda\x93\x54\x3f\x4e\xaf\xb4\x42\x15\x98\x71\x59\x5a\x51\x71\xa2\x53\x7f\xa1\x36\xe3\xdc\x38\xe4\xba\xfb\x2c\xeb\xd8\x99\x36\x4b\x51\x3d\x30\x0d\x4f\xca\x73\x61\x16\xab\xd0\x99\x89\xe2\x66\xe2\x89\x69\x15\x31\xf1\xaf\x8e\x4b\xcf\xfa\xe6\xa2\x5b\xf1\x7d\x57\x46\x46\xa4\x6b\x2b\xc3\xbe\xeb\xca\x94\x54\xc4\x2b\xf2\xa4\x3f\xf6\xaf\x9a\xf0\xaf\x75\xed\xa5\x02\x9b\x70\x2b\xb2\xba\xda\x7b\x32\xe9\x8f\x55\x2e\xcb\x94\xb8\xe2\xc9\xd8\x38\xf6\xad\xfd\x68\xb7\xc5\x7e\xcd\xd7\xec\x9e\xdd\xb1\x1f\xf2\xb5\xfc\xb9\xdd\xb2\x1d\xbb\x9d\x6f\xe4\xeb\xf9\x0b\xec\x3b\xdb\xb1\xbb\xf6\xf3\xff\x98\x85\xf9\x59\xc9\x9f\xf6\x38\xdb\xc1\xbe\x39\x24\x6d\x27\xdf\xc8\x37\x0f\x5a\xec\xeb\x7c\xa3\x98\xd4\xb1\x5b\x76\xa7\xdb\x61\x5f\x16\xf8\x17\xfb\xc9\xee\xe5\xeb\xc5\xd5\xdf\x00\x00\x00\xff\xff\xf7\x0b\x18\xeb\xcc\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
