// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package sp3s

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x5d\x6b\xe3\x3a\x10\x7d\xcf\xaf\x18\x74\x0b\xb5\x1f\x62\xd3\x04\xca\x85\x26\x79\xb8\x0f\x17\xf6\x65\x29\xf4\x07\x2c\x8a\x3d\xa9\xd5\xca\x92\x56\x1a\x27\xe9\x1a\xff\xf7\x45\xf2\x47\xdd\xd4\x6d\x02\xbb\x0b\xeb\x17\xcb\x9a\xa3\x99\xa3\x73\xc6\x52\x5d\x43\x8e\x3b\xa1\x10\x58\xa6\x15\xa1\x22\x06\x4d\x33\x5b\xb9\xcc\x0a\x43\x40\x2f\x06\xd7\x8c\x1b\x23\x45\xc6\x49\x68\x95\x3e\xf1\x3d\x6f\x83\x6c\x33\x03\x00\xd8\x55\x2a\xf3\x11\xd8\x73\x59\xe1\xff\xda\x96\x9c\x22\x15\x43\x1d\xa2\xfe\xb1\x48\x95\x55\xa0\xf0\x00\x5f\x14\xc9\xe4\x6b\x55\x6e\xd1\x76\xc8\x38\xd9\xf5\x4b\xee\xc2\x8a\x66\x16\x5e\x57\x51\xae\xb3\xaa\x44\x45\x71\x62\x91\xe7\x2f\xd1\x50\x28\x1a\x27\xbf\x8a\xae\xff\x71\xc4\x09\xaf\xe3\x24\x2b\xb8\x7a\xc4\x01\xf8\x06\x37\x60\xcd\xd2\x5d\xc7\x89\xab\xb6\xa5\xa0\xa8\xab\x19\xea\xf6\xf5\xe3\xbb\xd9\x2a\x6d\xb7\xb8\x99\xad\x72\xb1\x87\x4c\x72\xe7\xd6\xcc\xea\x43\xb7\xe7\xf1\x6c\xa6\xe5\xbc\xcc\xe7\x37\x0b\xf0\x23\x57\xf6\xa3\xa3\x9b\xdf\x2c\x3a\xfc\xe9\x9a\xe3\x37\xc3\x15\xca\x51\xf4\x3d\x82\x04\x49\x3c\x41\x04\x54\xb1\xd8\xd4\x35\x88\x9b\x7f\x15\xb0\xff\xac\xe6\xb9\x14\xea\x19\x1e\xee\x97\x0f\x0c\x12\x68\x9a\x55\x5a\x2c\x26\x96\x8d\x29\x4b\xe4\x76\x27\x8e\x6c\xb3\x4a\x73\xb1\x3f\x61\x31\x31\xf5\x86\x58\xdf\x27\x13\x35\xbc\x95\x3d\xd0\x8f\xe7\x85\xb6\xe2\x87\x56\xc4\x25\x84\x6f\xc9\xb7\x28\xe7\x12\x77\xc4\xc0\x6a\x89\x2d\x8c\x41\x89\x54\xe8\x7c\xcd\x8c\x76\xc4\x40\xe4\x6b\xe6\x7d\x9a\x28\x71\x4a\x27\x64\x7d\xb4\xba\x32\x1f\x80\xc3\x82\x50\xd6\x33\x58\xb3\xbd\x96\x55\x89\xec\xd5\x3d\x45\x56\xcb\x96\x18\x74\x5e\x2e\x7b\x2b\x97\x93\x4e\x4e\x3d\x83\x23\x0f\xbe\x17\x5b\x23\x3e\xe6\x93\x86\x72\x9f\x10\x7e\xdf\x5f\xb7\x3d\xa7\xdb\x8b\x39\x8d\xb3\x9c\x81\xbe\xaa\x74\x1e\x17\xb0\x42\x99\xaa\x3f\x1e\xb2\x02\xb3\xe7\xad\x3e\x0e\xa2\x3e\xb9\xb9\x3b\x08\xca\x0a\x06\x8a\x97\xb8\x66\xae\x15\x25\xf8\xda\x0e\xbd\x5e\x3b\xc0\xef\x10\x19\x2b\x14\x41\x12\xe6\x63\x60\x64\x2b\xf4\x47\x10\x84\xac\x98\xd7\x35\xa0\xca\xfd\x44\x7a\xc1\x16\xce\x09\x0b\xd3\x0d\x7e\x61\xf8\xb3\xd0\xaf\xf4\xa4\xd1\x07\xb4\x7f\xae\x25\xef\xdb\xf4\x7f\x45\x4b\x9a\x37\x22\xf5\x5b\xf5\xe6\x8b\xec\x92\x1e\xbd\xe8\x5e\xea\x6f\x8e\xe4\x60\x05\x61\x34\xbe\x98\xea\x1a\x92\x20\x37\x34\x4d\x1c\x0f\xe7\xfc\xab\x58\x07\x4e\xe4\xce\x88\xd5\x0a\x66\x7e\x67\x0f\xad\x52\x2f\xc8\xa7\x27\xf1\xe8\xb3\x1b\x76\xaf\xe1\x17\xf9\x19\x00\x00\xff\xff\xfb\xe9\xdd\x02\xcd\x07\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x4d\x4f\x3b\x55\x14\xc6\x9f\xf9\xb7\xbe\xd5\x98\xfc\xc3\x46\x17\x46\x0f\x0b\x88\xc6\x0c\xcc\xb4\xe2\xcb\xc0\x14\x02\x82\x1a\x69\x8a\x58\xd9\xdf\xb4\xb7\xed\xc4\x76\xa6\x99\x7b\x6b\xd5\x60\x62\x61\x21\x44\x22\x09\xd1\x9d\x89\x31\x7e\x01\x24\x69\x44\x5e\xea\x57\x38\x77\xe1\xd6\xcf\xa0\x6e\xdc\x9a\x69\xcb\x6b\x60\x41\xe2\xdd\x9c\x73\xee\xf3\xcc\xef\x9c\x7b\xe6\xcf\xb1\xf4\xf7\x00\x90\x01\xf0\x22\x80\x06\x80\xe7\x00\x9c\x61\x78\xfe\x02\xf0\x12\x80\xbf\x47\xf1\xb1\x05\xbc\x00\x60\xda\x02\x9e\x05\xf0\x9e\x05\x3c\x0f\xa0\x64\x0d\x19\x0d\x0b\x78\x02\x40\x67\x14\xbf\x1c\xc5\x6d\x0b\xa8\x5b\xc0\xae\x05\x14\x01\xfc\xf3\x08\xf8\x10\xc0\x62\x0a\x58\x00\xf0\x5d\x0a\x18\x07\xf0\x47\x0a\xc8\x03\xf8\x37\x05\xbc\x0c\xe0\x8d\x34\xf0\x18\xc0\x46\x1a\x18\x03\x50\x4b\x03\x4f\x03\xf8\x22\x0d\x58\xb8\x3a\xcf\x8c\xde\x90\x02\xf0\x08\x43\x4f\xd2\x37\x0d\xe0\x49\x00\x4f\x5d\x18\xdf\x95\x9a\x5a\x51\x47\xc6\x54\x15\x41\x43\x56\xa8\x13\xe8\x3a\xc9\x38\x8e\x62\x9a\x50\x03\x59\x69\xa1\xe5\xdd\x72\xb1\x5a\xbd\x5f\x50\xed\x72\x59\x2a\x85\x62\x78\x8f\x27\xbc\xb4\xac\x25\x13\xe0\xa3\xa4\x11\x3a\x42\x6b\x85\x75\xd9\x8a\x62\x6d\x17\x54\x2d\xa8\xd8\x8b\xed\x9a\xb2\x4b\x91\x47\x15\xf9\xe9\xc2\x27\x41\x5d\x34\xa3\xa9\xb8\x9d\x59\x2b\x96\xec\xa5\x58\x0a\x1d\x44\xa1\xfd\x8e\xd0\xd2\xa3\xac\xe3\xbe\x6d\x3b\x39\x3b\xfb\x26\x65\x73\xde\xcc\xcc\x6b\x4e\xce\x71\x32\xab\x42\x69\xbb\x14\x8b\x50\x35\x84\x8e\x62\x8f\x3e\x18\x30\xa8\xd0\x8e\x45\x33\xaa\x44\x34\x77\x03\x9c\xcf\xac\x8a\xb0\xd6\x16\x35\x69\x97\xa4\x68\x7a\x74\x59\x7b\xb4\xde\x56\x2a\x10\x61\xa6\xf0\x7e\x61\xd9\xde\x90\xb1\x0a\xa2\xd0\x23\x77\xca\xc9\x2c\x45\xa1\x96\xa1\xb6\x4b\x9f\xb7\xa4\x47\x5a\x7e\xa6\xa7\x5b\x0d\x11\x84\xb3\x54\xae\x8b\x58\x49\xed\x7f\x5c\x5a\xb1\xdf\xba\xf2\x25\xf3\x54\x65\x6c\x2f\x87\xe5\xa8\x12\x84\x35\x8f\x32\x6b\x8d\x76\x2c\x1a\xf6\x4a\x14\x37\x95\x47\x61\x6b\x50\x2a\x3f\x37\x4b\xc3\xd4\x0f\x27\x5c\xc7\xf7\x5d\x9a\x9c\xa4\x24\x75\xc6\x7d\xd7\xa5\x79\x72\xc8\x1b\xd4\x79\x3f\x7b\x21\xcd\xf9\xaf\x27\xe9\x2b\x03\xdb\x9c\xeb\xd0\xe6\xe6\xf0\x93\xbc\x9f\x75\x5e\xa5\x79\x72\xc9\xa3\xec\x2c\xf8\x47\xee\xf3\xa9\xd9\x36\x5f\x73\x8f\xcf\xf9\x98\x7b\xc4\x67\xdc\x37\xbb\x7c\xce\x7d\xd3\x35\x5b\x7c\x4c\xfc\x2b\x1f\xf2\x11\xf7\xcc\x57\x66\x87\x8f\xf9\x74\x20\xec\x91\xe9\x12\xf7\x07\x37\xbf\xf0\x09\xf7\xf9\xb7\xe4\xaf\xde\xc1\x33\xdd\x11\xa9\x6f\xf6\x93\x2b\xb3\xff\x30\xe2\x81\xf9\x86\x4f\xf8\xd4\x7c\x7b\x7d\xc6\x87\x00\x7e\x36\x5d\xfe\x9d\x7b\x66\x27\x79\x13\xf1\xd1\x2d\x5e\x1f\x7c\xf0\xff\x36\xb8\x8d\xff\xe1\xfa\x42\xcd\x1e\xf8\xa7\x9b\x1b\xe1\x1e\xf8\x88\x0f\xcd\x96\xd9\xc2\x7f\x01\x00\x00\xff\xff\x7f\x8b\x3d\x03\x83\x04\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
