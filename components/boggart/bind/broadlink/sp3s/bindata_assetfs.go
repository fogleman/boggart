// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package sp3s

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x5d\x6b\xe3\x3a\x10\x7d\xcf\xaf\x18\x74\x0b\xb5\x1f\x62\xd3\x04\xca\x85\x26\x79\xb8\x0f\x17\xf6\x65\x29\xf4\x07\x2c\x8a\x3d\xa9\xd5\xca\x92\x56\x1a\x27\xe9\x1a\xff\xf7\x45\xf2\x47\xdd\xd4\x6d\x02\xbb\x0b\xeb\x17\xcb\x9a\xa3\x99\xa3\x73\xc6\x52\x5d\x43\x8e\x3b\xa1\x10\x58\xa6\x15\xa1\x22\x06\x4d\x33\x5b\xb9\xcc\x0a\x43\x40\x2f\x06\xd7\x8c\x1b\x23\x45\xc6\x49\x68\x95\x3e\xf1\x3d\x6f\x83\x6c\x33\x03\x00\xd8\x55\x2a\xf3\x11\xd8\x73\x59\xe1\xff\xda\x96\x9c\x22\x15\x43\x1d\xa2\xfe\xb1\x48\x95\x55\xa0\xf0\x00\x5f\x14\xc9\xe4\x6b\x55\x6e\xd1\x76\xc8\x38\xd9\xf5\x4b\xee\xc2\x8a\x66\x16\x5e\x57\x51\xae\xb3\xaa\x44\x45\x71\x62\x91\xe7\x2f\xd1\x50\x28\x1a\x27\xbf\x8a\xae\xff\x71\xc4\x09\xaf\xe3\x24\x2b\xb8\x7a\xc4\x01\xf8\x06\x37\x60\xcd\xd2\x5d\xc7\x89\xab\xb6\xa5\xa0\xa8\xab\x19\xea\xf6\xf5\xe3\xbb\xd9\x2a\x6d\xb7\xb8\x99\xad\x72\xb1\x87\x4c\x72\xe7\xd6\xcc\xea\x43\xb7\xe7\xf1\x6c\xa6\xe5\xbc\xcc\xe7\x37\x0b\xf0\x23\x57\xf6\xa3\xa3\x9b\xdf\x2c\x3a\xfc\xe9\x9a\xe3\x37\xc3\x15\xca\x51\xf4\x3d\x82\x04\x49\x3c\x41\x04\x54\xb1\xd8\xd4\x35\x88\x9b\x7f\x15\xb0\xff\xac\xe6\xb9\x14\xea\x19\x1e\xee\x97\x0f\x0c\x12\x68\x9a\x55\x5a\x2c\x26\x96\x8d\x29\x4b\xe4\x76\x27\x8e\x6c\xb3\x4a\x73\xb1\x3f\x61\x31\x31\xf5\x86\x58\xdf\x27\x13\x35\xbc\x95\x3d\xd0\x8f\xe7\x85\xb6\xe2\x87\x56\xc4\x25\x84\x6f\xc9\xb7\x28\xe7\x12\x77\xc4\xc0\x6a\x89\x2d\x8c\x41\x89\x54\xe8\x7c\xcd\x8c\x76\xc4\x40\xe4\x6b\xe6\x7d\x9a\x28\x71\x4a\x27\x64\x7d\xb4\xba\x32\x1f\x80\xc3\x82\x50\xd6\x33\x58\xb3\xbd\x96\x55\x89\xec\xd5\x3d\x45\x56\xcb\x96\x18\x74\x5e\x2e\x7b\x2b\x97\x93\x4e\x4e\x3d\x83\x23\x0f\xbe\x17\x5b\x23\x3e\xe6\x93\x86\x72\x9f\x10\x7e\xdf\x5f\xb7\x3d\xa7\xdb\x8b\x39\x8d\xb3\x9c\x81\xbe\xaa\x74\x1e\x17\xb0\x42\x99\xaa\x3f\x1e\xb2\x02\xb3\xe7\xad\x3e\x0e\xa2\x3e\xb9\xb9\x3b\x08\xca\x0a\x06\x8a\x97\xb8\x66\xae\x15\x25\xf8\xda\x0e\xbd\x5e\x3b\xc0\xef\x10\x19\x2b\x14\x41\x12\xe6\x63\x60\x64\x2b\xf4\x47\x10\x84\xac\x98\xd7\x35\xa0\xca\xfd\x44\x7a\xc1\x16\xce\x09\x0b\xd3\x0d\x7e\x61\xf8\xb3\xd0\xaf\xf4\xa4\xd1\x07\xb4\x7f\xae\x25\xef\xdb\xf4\x7f\x45\x4b\x9a\x37\x22\xf5\x5b\xf5\xe6\x8b\xec\x92\x1e\xbd\xe8\x5e\xea\x6f\x8e\xe4\x60\x05\x61\x34\xbe\x98\xea\x1a\x92\x20\x37\x34\x4d\x1c\x0f\xe7\xfc\xab\x58\x07\x4e\xe4\xce\x88\xd5\x0a\x66\x7e\x67\x0f\xad\x52\x2f\xc8\xa7\x27\xf1\xe8\xb3\x1b\x76\xaf\xe1\x17\xf9\x19\x00\x00\xff\xff\xfb\xe9\xdd\x02\xcd\x07\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x51\x4b\x6b\x13\x51\x14\xfe\xa6\x89\xaf\x88\x50\xba\x51\x41\xf4\x74\xd1\xa2\x8b\x69\x93\xea\x42\xa6\x9d\xb4\x28\xad\x8a\x0d\x7d\x18\xdd\x5f\x92\x9b\x74\x68\x32\x13\xe6\x4e\x8c\x42\x05\xd3\x2e\x6c\xb1\x58\x28\xb8\x13\x44\xdc\xba\xa8\x85\x60\xed\x23\xae\xdd\xc8\xb9\x7f\xc0\xdf\xa0\xff\x40\x66\x92\x3e\x69\x17\x05\xef\xe6\x3c\xbe\x6f\xbe\xf3\x9d\x33\xbf\xbb\xe2\xef\x01\x20\x01\xe0\x1a\x80\x12\x80\x4b\x00\xb6\xd1\x7a\x7f\x00\x5c\x07\xf0\xb7\x1d\x3b\x0d\xe0\x0a\x80\x7e\x03\xb8\x08\xe0\xa1\x01\x5c\x06\x90\x35\x5a\x1a\x25\x03\x38\x03\xa0\xd6\x8e\xaf\xda\x71\xc1\x00\x86\x0d\x60\xc9\x00\x26\x00\xfc\xec\x00\xa6\x00\x5c\x8d\x01\x23\x00\x66\x63\x40\x37\x80\x2f\x31\x20\x0d\xe0\x57\x0c\xb8\x11\x7a\x89\x03\x9d\x00\xcc\x38\xd0\x05\x20\x1d\x07\xce\x03\x98\x8a\x03\x06\xf6\xdf\x85\xf6\x0e\x31\x00\x1d\x68\x71\xc2\xb9\x71\x00\x67\x01\x9c\xdb\x25\x3e\x90\x01\x55\xbc\x9a\xf4\xa9\x20\x9c\x92\xcc\x53\xcd\x09\x66\x48\xfa\xbe\xe7\x53\x8f\x8a\x60\x15\x88\x40\x1e\x0f\x4f\x14\x0a\x27\x03\xaa\x9a\xcb\x49\xa5\x30\xe1\x9e\xc0\x71\xf7\x28\x93\xa1\x03\x3c\x09\x07\xa1\x26\x82\x40\x61\x5a\x56\x3c\x3f\x30\x33\xaa\xe8\xe4\xcd\x7b\xd5\xa2\x32\xb3\x9e\x45\x79\xf9\x7c\x64\xd6\x99\x11\x65\xaf\xcf\xaf\x26\xc6\x85\x0a\xcc\xac\x2f\x5c\x55\x12\x81\xe7\x5b\xf4\x38\x82\x28\x53\xf5\x45\xd9\xcb\x7b\x34\x74\x88\x9f\x4e\x8c\x0b\xb7\x58\x15\x45\x69\x66\xa5\x28\x5b\xb4\x57\x5b\x34\x5d\x55\xca\x11\x6e\x22\xf3\x28\x33\x6a\x3e\x93\xbe\x72\x3c\xd7\xa2\x54\x5f\x32\x71\xdf\x73\x03\xe9\x06\x66\xf6\x65\x45\x5a\x14\xc8\x17\x41\x7f\xa5\x24\x1c\x77\x90\x72\x33\xc2\x57\x32\xb0\x9f\x66\xc7\xcc\xbb\xfb\xbc\xd0\x4f\x41\xfa\xe6\xa8\x9b\xf3\xf2\x8e\x5b\xb4\x28\x31\x59\xaa\xfa\xa2\x64\x8e\x79\x7e\x59\x59\xe4\x56\xa2\x52\xd9\xb7\x07\xa9\x95\xda\x6e\x4f\x2a\x69\xdb\x29\xea\xed\xa5\x30\x4d\x76\xdb\xa9\x14\x0d\x53\x92\xac\xa8\x4e\xdb\x03\xbb\xd0\x90\x7d\x27\x4c\x6f\x46\xb4\xa1\x54\x92\xe6\xe6\x5a\x9f\xa4\xed\x81\xe4\x2d\x1a\xa6\x14\x59\x34\x30\x08\xfe\xc8\x4d\xde\xd2\x0b\xfa\x0d\x37\x78\x87\x37\xb8\x41\xbc\xcd\x4d\xbd\xc4\x3b\xdc\xd4\x75\x3d\xcf\x1b\xc4\xdf\x78\x8d\xd7\xb9\xa1\x5f\xeb\x45\xde\xe0\xad\x08\x58\x26\x5d\x27\x6e\x46\x9d\xaf\xbc\xc9\x4d\xfe\x1e\xfe\xac\x63\xf4\x74\xbd\xad\xd4\xd4\x2b\x61\x4b\xaf\x9c\x4e\x71\x55\xbf\xe5\x4d\xde\xd2\xef\x0e\x7a\x3c\x8d\xc0\x67\x5d\xe7\x1f\xdc\xd0\x8b\xe1\x4e\xc4\xeb\x47\xf4\x9a\xe0\xd5\xff\x3b\xe0\xa8\xfc\x87\x83\x07\xd5\xcb\xe0\x4f\x87\x2f\xc2\x0d\xf0\x3a\xaf\xe9\x79\x3d\x8f\x7f\x01\x00\x00\xff\xff\x1c\xe2\x33\xc3\x5a\x04\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
