// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package sun

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x99\x5f\x6f\x9b\x3c\x14\xc6\xef\xfb\x29\x8e\x2c\xbd\x6a\x7b\xc1\x9f\x44\x6f\xb7\x29\xa2\x91\xba\xb5\xbb\xac\x26\xa5\x57\xbb\x99\x5c\x7c\xd2\x78\x25\x36\xb2\x0f\x49\x2b\x94\xef\x3e\x01\x61\x21\x0d\x49\xd7\xa9\xc5\x45\xbb\x49\x00\x9f\xc3\xf3\x70\xf8\x19\x63\x93\xe7\x20\x70\x2a\x15\x02\x8b\xb5\x22\x54\xc4\x60\xb5\x3a\x8a\x84\x5c\x40\x9c\x70\x6b\xcf\x99\xd1\x4b\x36\x3e\x02\x00\x68\x1e\x8d\x75\xe2\xcd\x85\x37\x18\x42\xb1\x65\xe7\xf5\xd6\x83\xf5\x06\xc3\x75\xfc\xd3\x9c\x87\x1f\x29\x57\x98\x34\x5a\x77\x23\x48\x52\x82\x4f\x22\xca\xa8\xd9\x70\x9c\xe7\x20\x07\x9f\x14\xb0\x0b\x4b\x46\xc3\x24\x53\x0c\x7c\x58\xad\xa2\x60\x36\x6c\xc9\x68\xba\x4d\x90\x9b\xa9\x7c\x60\xe3\x28\x10\x72\xf1\xc4\x40\xcb\xa1\x2d\x4f\x75\x65\x5a\x34\x88\xdf\x26\x58\x47\x56\x3b\xe5\xaf\x67\xc9\xc8\x14\x05\x08\xf2\x0c\xda\x54\x2b\x2b\x17\x08\x4a\x2f\x0d\x4f\x19\x58\x7a\x4c\xf0\x9c\x2d\xa5\xa0\xd9\x68\x10\x86\xff\xb5\x9c\xbb\x3a\xff\x0c\xb9\xd8\xd7\x66\xda\x1b\xd6\x89\x9b\x72\x7d\x43\x23\xb5\xa8\x6b\x45\xb3\x3f\x4c\x9b\x10\x37\x04\x9c\x5e\x9c\x78\xa5\xc4\xdf\xa4\x5d\x66\x86\x93\xd4\xea\xb9\xc4\x28\xd8\x77\xe5\x45\xce\x81\x7a\xdd\x6a\xf1\x78\xc8\xcb\x81\x7a\x56\x01\x62\x63\xf6\x5a\xde\xcd\x36\x97\xb8\x47\xb2\x99\x19\xd9\xd8\xc8\x94\x80\x1e\x53\x3c\x67\x3c\x4d\x13\x19\x97\x97\x1b\xfc\xe4\x0b\x5e\x35\xb2\xb1\xd0\x71\x36\x47\x45\xfe\xd2\x48\xc2\x13\xc1\x09\x6f\xf4\x84\x8c\x54\x77\x27\xc7\x79\x0e\x3e\xc9\x39\x5a\xbf\x54\xff\x8c\x53\x6d\xd0\x2f\x6f\x93\xff\x55\x9b\x39\x27\x60\xc3\x30\xfc\xe0\x85\x03\x2f\x1c\xde\x0c\xce\x46\xe1\xff\xa3\xf0\xec\x7b\xf8\x71\x14\x86\x45\xbf\x3e\x3e\x3d\x8d\x82\x4a\x6a\xec\xd8\xf5\x95\x12\x6f\xe5\xb9\x5d\xb0\xa6\xcb\xaf\x7c\x3d\x7b\xdf\xf6\x53\x06\x2f\x87\x85\x0b\x69\xdc\xc1\x52\xa8\xbf\x19\x20\xaf\x10\xf5\x9a\xa5\x2e\x87\x06\xa5\xe7\x32\xe6\x09\x08\xbe\x54\xce\xca\xde\x74\x72\xc9\x97\xaa\x47\x1d\x75\xc7\x7a\x27\xbd\x75\x47\xd5\x6d\x97\xcd\xc8\x3d\x43\xb5\x8b\x9e\xf1\xb3\x65\xbb\x9b\x27\x7d\x53\xd1\x25\x37\x5f\xe4\x42\x3a\x86\xa6\xb4\xd0\x33\x62\x36\x9e\x3b\xc1\x65\x23\xe7\x92\x95\x49\xa6\x8c\xb4\xe8\x0c\x94\xb5\x7e\x8f\x30\xa9\x1d\x77\x02\x49\x2d\xe6\x14\x11\x9d\x70\x03\x4a\x6b\x77\x8f\x93\xd2\xc2\xb5\xd6\xea\x5f\x79\x85\x9c\x64\xca\xa2\xbb\xb9\x5d\x25\xdf\xaf\x4e\x59\x18\xee\xaa\x4f\x16\x5a\xef\x60\x84\xcf\xec\xbd\xe3\x11\x3e\xb3\xf7\x3d\xa2\x64\xe3\xb9\xc3\x11\xbe\x90\x7b\x1f\xb3\x08\x97\xb8\xfc\x7e\x39\xee\x17\x31\x5b\xb6\xbb\x9d\x45\xb8\xe6\x66\x7b\x15\xc3\x25\x3b\x5b\x93\xf2\x7e\xf1\xb3\x63\xbd\xfb\x55\x0c\xd7\x1c\xbd\x83\x55\xea\x8b\x29\xa1\xe9\x11\x35\x0d\xd3\xdd\xad\x51\x57\x7a\xaf\x47\x4a\x14\xec\xf9\xd8\x11\x05\xe5\xe7\xa9\x83\x1f\xc0\x1a\xbb\xeb\xcd\xf5\x5f\x9e\x03\x2a\x01\xab\xd5\xaf\x00\x00\x00\xff\xff\x20\xd6\x0f\xdd\x36\x1c\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x50\xdf\x6b\x1c\x55\x14\xfe\x66\x33\xeb\x8f\xb5\xf5\x17\x42\x41\x7c\xb8\x0a\x96\x0a\x4e\xbb\x1b\x05\x75\x92\x49\xb4\x31\x05\xb1\x89\xa5\x59\x7d\x14\x2e\x99\x71\x33\x74\xf7\xde\x70\xe7\x4e\x55\xc8\xc3\x6e\xc5\x46\xb1\xa0\x58\x24\x4f\xa1\x08\xfa\x3e\xc4\xdd\x76\x69\x3b\x41\x7c\x17\xce\x7d\xf1\x4d\x5f\xfc\x0b\xfc\x03\x44\xb9\x73\xa7\xc6\xf8\xd4\x78\x5f\xee\xf9\xf1\x7d\xdf\x39\xdf\xf9\xed\x49\xff\x1b\x00\x78\x02\xc0\x33\x00\xbe\x03\x70\x02\xc0\x8b\x1e\xaa\xf7\x99\x07\x3c\x0c\xe0\x73\xcf\x61\xae\xd7\xff\xf7\x1e\xd0\x02\x70\xab\xfe\x7f\xf2\x80\x87\x00\xfc\xec\x01\x0f\x00\xf8\xc5\x03\x9a\x00\x7e\xf5\x80\xe3\x00\x7e\xaf\xff\x3f\xea\xfa\x5f\x35\xae\xd9\x70\xfc\x63\x0d\xc7\x3f\xd1\x00\x1e\x04\xc0\x1a\xae\x7f\xaa\x01\x2c\x7a\xc0\x99\x06\x70\x0c\x80\x9c\x01\x96\x00\x6c\xcd\x00\x8b\x00\x7e\x9c\x01\xe6\xec\xa2\x3e\xf0\x0a\x80\x79\x1f\x78\x0e\x80\xf6\x81\xa7\x01\xec\xf8\x4e\x7f\xcf\x77\xf8\xd2\x77\xf8\x3f\x7d\x37\xef\xb5\xa6\xd3\x3d\xdb\x04\x1e\x05\xf0\x4e\x13\x78\x0a\xc0\xfb\x75\x3d\x6b\x3a\xfe\xb0\x09\xd4\x27\xa9\xf6\xab\x47\x56\xbd\x47\x00\x34\x00\x3c\x0e\xe7\xcd\xea\x5a\xae\xbd\xdb\xf1\x1a\x6b\xbd\xcc\xe0\xe0\x3d\x56\xdf\xdc\x3e\x3b\x17\x6f\x64\x5a\x49\xb6\x96\x0b\x17\x09\x39\x48\xd7\x79\x9f\xc5\xfc\xc3\xff\x56\xf2\xec\x12\x96\xd2\xcb\x69\xdd\xac\x43\x5b\x7d\x33\x57\x5c\xa7\x52\x60\x59\xc4\x8c\x6b\xac\xf2\x38\x55\x58\xe5\xb9\x3e\xd0\x3a\xc8\x2c\x63\x35\xed\x6d\x68\x5c\x48\x54\x2a\x63\xac\xc9\x3e\x57\x4c\x48\x29\xb0\xa6\xb9\xd2\x56\x62\x2d\x17\x2a\xcd\x12\xfb\x67\x89\xc6\xc5\x64\x53\x2a\x1d\xac\x64\xbd\x34\x0e\xce\xe6\xbd\x2c\xe8\xca\x90\xc5\xc9\xe5\xd7\x2f\xa5\x1b\x7c\x20\x4f\xab\xbc\x75\x9e\x67\x3a\xe8\x2a\x2e\xb2\x3e\xd7\x52\x85\xec\xed\xaa\xc5\x56\x72\xc5\x07\x32\x96\x6c\xfe\x10\x7e\xa1\x75\x9e\x8b\x5e\xce\x7b\x49\xd0\x4d\xf8\x20\x64\xff\xe4\x21\xbb\x98\x67\x59\xca\x45\x6b\xe5\xad\x95\xe5\xe0\xbd\x44\x65\xa9\x14\x21\xeb\x9c\x6e\xb7\x96\xa4\xd0\x89\xd0\x41\xf7\xe3\xcd\x24\x64\x3a\xf9\x48\x9f\xd9\xec\xf3\x54\xcc\xb1\xf5\x0d\xae\xb2\x44\x47\xef\x76\xcf\x05\xaf\x1e\xe0\xec\x3e\x1f\x24\x2a\x58\x16\xeb\x32\x4e\x45\x2f\x64\xad\x0b\xfd\x5c\xf1\x7e\x70\x4e\xaa\x41\x16\x32\xb1\x59\xa5\x59\xf4\xd2\x1c\x73\x61\x24\x9e\xef\xb4\xa3\xa8\xc3\x4e\x9e\x64\x36\x6c\x3f\x1b\x75\x3a\x6c\x91\xb5\x59\x58\xe5\x0b\xd1\xec\xbd\xd6\x7c\xf4\xb2\x0d\x4f\x55\xb0\xf9\x4e\x9b\x6d\x6d\x39\xca\x42\x34\xdb\x7e\x81\x2d\xb2\x0e\x0b\xd9\xec\x1c\xe8\x5b\xda\xa7\x3b\x54\x9a\xab\x34\x01\x7d\x65\x46\xe6\x8a\x19\xd2\x3e\x95\xb4\x4f\x77\x69\x6a\xb6\x69\x62\x46\x74\x9b\xa6\x34\x61\x66\x64\x3e\xa1\xbb\x34\x31\x43\x5b\x60\x54\x52\xc1\xcc\x90\x0a\x33\x32\x23\xda\xa3\x89\xb9\xf2\xff\x34\xe8\x16\x15\x74\x9b\x0a\xc7\xbf\x6e\x25\xe9\x26\x8d\xa9\xa0\xf2\x88\xb3\xef\x9f\x7b\x78\xe6\x8d\x6a\xdf\x71\x75\x8a\x9b\x34\xb5\x45\xba\x63\xae\x59\x07\x95\x9b\x6b\xa0\x1d\x87\xa7\xd2\x6c\xd3\x94\xf6\xa8\xb0\x33\xcd\xc8\x7c\x09\xda\xa5\x82\xc6\x34\x35\x43\x17\xee\xd1\x94\x7e\xa0\xc2\x5c\xa5\x69\x75\x84\xd2\x7c\x71\xdf\x06\x8e\xc6\x3f\x6c\x62\x97\xf6\xcd\xb6\x5d\xf5\x46\x85\xb2\xe4\xb1\x4d\xac\xa9\x31\x4d\xa8\xb4\xbd\x5d\x2a\x2a\x03\xe5\xbf\x0d\x7c\x5d\xd9\xfc\xd4\x11\x76\xee\x69\xe2\xef\x00\x00\x00\xff\xff\xc9\x46\x27\x04\x8b\x05\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
