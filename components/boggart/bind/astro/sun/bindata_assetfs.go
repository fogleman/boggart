// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package sun

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x99\x5d\x6f\x9b\x3c\x14\xc7\xef\xfb\x29\x8e\x2c\x3d\x6a\x7b\xc1\x4b\xa2\xa7\xdb\x14\xd1\x48\xd3\xda\x5d\x56\x93\xd2\xab\xdd\x4c\x2e\x76\x8b\x57\xb0\x91\x7d\x08\xad\x10\xdf\x7d\x02\xc2\x20\xaf\x5d\xa7\x14\x17\xed\x26\x01\x7c\x0e\xff\x3f\x87\x9f\x31\x36\x45\x01\x8c\xdf\x0b\xc9\x81\x84\x4a\x22\x97\x48\xa0\x2c\x4f\x02\x26\x96\x10\xc6\xd4\x98\x4b\xa2\x55\x4e\xe6\x27\x00\x00\xfd\xa3\xa1\x8a\x9d\x84\x39\x93\x29\x54\x5b\x26\x69\xb7\x9e\x8c\x33\x99\xae\xe2\x37\x73\x9e\x7e\xa4\x54\xf2\xb8\xd7\xba\x1d\x81\x02\x63\xbe\x11\x51\x47\x45\xd3\x79\x51\x80\x98\x7c\x92\x40\x3e\x1b\xd4\x0a\x16\x99\x24\xe0\x42\x59\x06\x5e\x34\xdd\x91\xd1\x77\x1b\x73\xaa\xef\xc5\x13\x99\x07\x1e\x13\xcb\x0d\x03\x3b\x0e\xad\x79\x6a\x2b\xb3\x43\x03\xe9\x5d\xcc\xdb\xc8\x66\xa7\xfe\x75\x0c\x6a\x91\x72\x06\x0c\x1d\xcd\x4d\xaa\xa4\x11\x4b\x0e\x52\xe5\x9a\xa6\x04\x0c\x3e\xc7\xfc\x92\xe4\x82\x61\x34\x9b\xf8\xfe\x7f\x3b\xce\xdd\x9c\x3f\xe2\x94\xed\x6b\xd3\xbb\x1b\x56\x89\x5d\xb9\xbe\x71\x2d\x14\x6b\x6b\x85\xd1\x1f\xa6\x2d\x90\x6a\x04\x8a\xaf\x4e\xbc\x96\xec\x6f\xd2\xae\x32\x4d\x51\x28\xf9\x52\x62\xe0\xed\xbb\xf2\x2a\xe7\x40\xbd\xee\x14\x7b\x3e\xe4\xe5\x40\x3d\x9b\x00\xd6\x99\xbd\x11\x0f\x51\x77\x89\x7b\x24\xfb\x99\x81\x09\xb5\x48\x11\xf0\x39\xe5\x97\x84\xa6\x69\x2c\xc2\xfa\x72\xbd\x9f\x74\x49\x9b\x46\x32\x67\x2a\xcc\x12\x2e\xd1\xcd\xb5\x40\x7e\xc6\x28\xf2\x5b\xb5\x40\x2d\xe4\xc3\xd9\x69\x51\x80\x8b\x22\xe1\xc6\xad\xd5\xdd\xfa\x06\xb9\x5f\x95\x4e\x28\x02\x99\xfa\xfe\x07\xc7\x9f\x38\xfe\xf4\x76\x72\x31\xf3\xff\x9f\xf9\x17\xdf\xfd\x8f\x33\xdf\xaf\x7a\xf4\xe9\xf9\x79\xe0\x35\x22\x73\x6b\x7e\xaf\x25\x7b\x2b\xb7\x9b\x52\x2d\x4b\x6e\xe3\xe5\xc5\xbb\xb4\x9f\x29\x78\x3d\x1a\x94\x09\x6d\x0f\x8d\x4a\xfd\xcd\xa0\x38\x42\xd4\x31\x4b\x5d\x0f\x04\x52\x25\x22\xa4\x31\x30\x9a\x4b\x6b\x65\xef\x3b\xb9\xa2\xb9\x1c\x51\xe7\xdc\xb2\x3e\x48\x3f\xdd\x52\xb5\xdb\x65\x33\xb4\xcf\x50\xeb\x62\x64\xfc\xac\xd9\x1e\xe6\x19\xdf\x57\xb4\xc9\xcd\x17\xb1\x14\x96\xa1\xa9\x2d\x8c\x8c\x98\xce\xf3\x20\xb8\x74\x72\x36\x59\x59\x64\x52\x0b\xc3\xad\x81\xb2\xd2\x1f\x11\x26\xad\xe3\x41\x20\x69\xc5\xac\x22\xa2\x62\xaa\x41\x2a\x65\xef\x71\x52\x5b\xb8\x51\x4a\xfe\x2b\xaf\x90\x8b\x4c\x1a\x6e\x6f\x26\xd7\xc8\x8f\xab\x53\x56\x86\x87\xea\x93\x95\xd6\x3b\x18\xe1\x33\xf3\x68\x79\x84\xcf\xcc\xe3\x88\x28\xe9\x3c\x0f\x38\xc2\x57\x72\xef\x63\x16\x61\x13\x97\xdf\x2f\xc7\xe3\x22\x66\xcd\xf6\xb0\xb3\x08\xdb\xdc\xac\xaf\x62\xd8\x64\x67\x6d\x52\x3e\x2e\x7e\xb6\xac\x0f\xbf\x8a\x71\x5c\x8e\x02\x6f\xcf\x82\x75\xe0\xd5\x9f\x18\x0e\x7e\xc4\xe8\xed\xae\x36\x57\x7f\x45\x01\x5c\x32\x28\xcb\x5f\x01\x00\x00\xff\xff\x95\x11\x34\x3c\xfa\x19\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x50\xcf\x6b\x5c\x55\x14\xfe\x66\x32\xe3\x8f\xb1\xf5\x17\x42\x41\x5c\x5c\x05\x43\x8b\xbe\xf6\xbd\x89\xf5\xc7\x4b\x5e\xa2\xa6\x29\x88\x4d\x0c\xcd\xe8\xfe\x9a\x79\x4e\x1e\x99\xb9\x37\xdc\x77\x5f\xad\xd0\x45\xa6\x62\xa3\x58\x50\x2c\x52\x17\x86\x22\xe8\xc2\xdd\x23\xce\xb4\x43\xdb\x09\xe2\x5e\x38\x77\xe3\x46\x74\x23\x08\x2e\xfd\x0b\x94\xfb\xee\xab\x31\xae\x1a\xef\xe6\x9e\x1f\xdf\xf7\x9d\xf3\x9d\x5f\x1f\xad\x7d\x0e\x00\x8f\x00\x78\x02\xc0\xd7\x00\x8e\x00\x78\xb6\x82\xe2\x7d\x58\x01\xee\x07\xf0\x51\xc5\x61\xae\x94\xff\x37\x15\xa0\x01\xe0\x46\xf9\xff\x50\x01\xee\x03\xf0\x63\x05\xb8\x07\xc0\x4f\x15\xa0\x0e\xe0\x97\x0a\x70\x18\xc0\x6f\xe5\xff\x67\x59\xff\xab\xc4\xd5\xab\x8e\x7f\xa8\xea\xf8\x47\xaa\xc0\xbd\x00\x58\xd5\xf5\x8f\x56\x81\xb5\x0a\x70\xa2\x0a\x1c\x02\xf0\xc5\x04\x30\x6f\xe7\x4f\x00\x73\x00\xfe\x98\x00\xa6\x01\x1c\xab\x01\x2f\x00\x88\x6b\xc0\x53\x00\xb6\x6b\xc0\xe3\x00\xbe\xaf\x39\xfd\x9f\x6b\x0e\xff\x7b\xcd\xe1\x27\xeb\x6e\xde\xdb\x75\xa7\xbb\x5e\x07\x1e\x04\x70\xbe\x0e\x3c\x06\x60\xab\xac\x7f\x59\x77\xfc\x6f\xeb\x40\x79\x92\x62\x3f\xfb\x6a\x70\xbd\x07\x00\x54\x01\x3c\x0c\xe7\xcd\xea\x5a\xae\xbd\xdb\xe1\x12\x6b\xbd\x4c\x60\xef\x3d\x54\xde\xdc\x3e\x3b\x17\xaf\xa4\x5a\x49\xb6\x92\x09\x17\x09\xd9\x4b\x56\x79\x97\xb5\xf9\xbb\xff\xad\x64\xe9\x3a\xe6\x93\x73\x49\xd9\x2c\x43\x5b\x3d\x95\x29\xae\x13\x29\xb0\x20\xda\x8c\x6b\x2c\xf1\x76\xa2\xb0\xc4\x33\xbd\xa7\xb5\x97\x59\xc6\x52\xd2\x59\xd3\x58\x8e\x55\x22\xdb\x58\x91\x5d\xae\x98\x90\x52\x60\x45\x73\xa5\xad\xc4\x4a\x26\x54\x92\xc6\xf6\x4f\x63\x8d\xb3\xf1\x86\x54\xda\x5b\x4c\x3b\x49\xdb\x7b\x35\xeb\xa4\x5e\x4b\x86\xac\x1d\x9f\x7b\x79\x3d\x59\xe3\x3d\x79\x5c\x65\x8d\xe5\x37\x5a\xde\xbc\x8a\x8b\x4d\xbc\x53\x5c\xc7\x21\x6b\xfa\xc1\x4b\x9e\x3f\xe5\x05\xcf\xb3\xe6\x54\x78\xf2\xe4\x33\xfe\x94\xef\x37\xce\xf0\x54\x7b\x2d\xc5\x45\xda\xe5\x5a\xaa\x90\xbd\x5e\x68\xb0\xc5\x4c\xf1\x9e\x6c\x4b\x36\xb3\x4f\x78\xb6\x71\x86\x8b\x4e\xc6\x3b\xb1\xd7\x8a\x79\x2f\x64\xff\xe4\x21\x3b\x9b\xa5\x69\xc2\x45\x63\xf1\xb5\xc5\x05\xef\xad\x58\xa5\x89\x14\x21\x0b\x8e\xfb\x8d\x79\x29\x74\x2c\xb4\xd7\x7a\x6f\x23\x0e\x99\x8e\xcf\xeb\x13\x1b\x5d\x9e\x88\x69\xb6\xba\xc6\x55\x1a\xeb\xe8\xcd\xd6\x69\xef\xc5\x3d\x9c\xdd\xe7\x9d\x58\x79\x0b\x62\x55\xb6\x13\xd1\x09\x59\x63\xb9\x9b\x29\xde\xf5\x4e\x4b\xd5\x4b\x43\x26\x36\x8a\x34\x8d\xa6\xa6\x99\x0b\x23\xf1\x74\xe0\x47\x51\xc0\x26\x27\x99\x0d\xfd\x27\xa3\x20\x60\x73\xcc\x67\x61\x91\xcf\x46\xcd\x3b\xad\x99\xe8\x39\x1b\x1e\x2d\x60\x33\x81\xcf\x2e\x5c\x70\x94\xd9\xa8\xe9\x1f\x63\x73\x2c\x60\x21\x6b\x4e\x83\xbe\xa2\x5d\xba\x45\x63\x73\x89\x86\xa0\x4f\x4d\xdf\x5c\x34\x9b\xb4\x4b\x63\xda\xa5\xdb\x34\x32\x5b\x34\x34\x7d\xba\x49\x23\x1a\x32\xd3\x37\xef\xd3\x6d\x1a\x9a\x4d\x5b\x60\x34\xa6\x9c\x99\x4d\xca\x4d\xdf\xf4\x69\x87\x86\xe6\xe2\xff\xd3\xa0\x1b\x94\xd3\x4d\xca\x1d\xff\x8a\x95\xa4\xeb\x34\xa0\x9c\xc6\x07\x9c\x7d\xf7\xdc\xfd\x33\xaf\x15\xfb\x0e\x8a\x53\x5c\xa7\x91\x2d\xd2\x2d\x73\xd9\x3a\x28\xdc\x5c\x06\x5d\x75\x78\x1a\x9b\x2d\x1a\xd1\x0e\xe5\x76\xa6\xe9\x9b\x4f\x40\xdb\x94\xd3\x80\x46\x66\xd3\x85\x3b\x34\xa2\xef\x28\x37\x97\x68\x54\x1c\x61\x6c\x3e\xbe\x6b\x03\x07\xe3\xef\x37\xb1\x4d\xbb\x66\xcb\xae\x7a\xad\x40\x59\xf2\xc0\x26\xd6\xd4\x80\x86\x34\xb6\xbd\x6d\xca\x0b\x03\xe3\x7f\x1b\xf8\xac\xb0\xf9\x81\x23\x5c\xbd\xa3\x89\xbf\x03\x00\x00\xff\xff\xf1\x9b\xaa\x3f\xb4\x05\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
