// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package hikvision

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5f\x6f\xe3\x36\x12\x7f\xdf\x4f\x31\xab\xcd\x55\x76\x2f\x92\x92\xb4\x45\x0f\x59\x2b\x87\x5e\xf7\x7a\xb7\xc0\xde\x62\xb1\xdd\x3e\x15\x45\x40\x8b\x23\x8b\x1b\x8a\x54\x48\xca\x89\x61\xf8\xbb\x1f\x28\x4a\xb2\xfc\x5f\x71\x1c\xa0\xa8\x1f\x12\x9a\x9c\x19\xfe\xe6\x37\xc3\xe1\x98\xf3\x39\x50\x4c\x99\x40\xf0\x12\x29\x0c\x0a\xe3\xc1\x62\xf1\x6a\x44\xd9\x14\x12\x4e\xb4\x8e\x3d\x25\x1f\xbc\x9b\x57\x00\x00\xdd\xd9\x44\xf2\x20\xa7\xc1\xe5\x15\xd8\x91\xce\x9b\xd1\xa3\x0e\x2e\xaf\x6a\xf9\x75\x9d\xc7\xdb\x82\x08\xe4\x9d\xd5\x4d\x89\x06\xc5\xaa\x4c\x2b\xa7\x24\xc7\xd8\x33\x64\xbc\xcd\x52\x2b\x59\xf2\xc6\xa0\x20\x53\x10\x64\x1a\x18\x32\xd6\x30\x26\xea\xd6\x0e\xbc\xa5\x19\xce\xf4\xb6\xbd\x5a\x4b\x9c\xd5\xb2\x85\x42\x8d\xc2\x10\xc3\xa4\xf0\xe6\x73\x60\x29\xe0\x3d\x84\x24\xb1\x13\xe0\x59\xd6\x9a\x3d\xed\xdc\x14\xad\x10\x0a\x0a\x8b\xc5\xcd\x88\x40\xa6\x30\x8d\x77\xe8\x7d\x25\x53\xa2\x13\xc5\x0a\x73\x3d\x95\x8c\x0e\x2e\x86\x6f\xad\x2e\xd7\x08\x8b\xc5\x7c\x0e\xe1\x67\xbc\x2f\x51\x9b\xf0\xb7\xcf\x1f\xc2\x4f\xc4\x64\x6e\xda\x19\xf7\x6e\xac\xd1\xcb\x7f\x08\xf0\x3e\x29\x9c\x32\x7c\xf0\x20\x84\xc5\x62\x14\x91\x9b\x51\xc4\xd9\x09\x7c\x63\x39\x99\xe0\xb1\x0e\xb6\xca\xc7\x78\xf9\x4f\x67\x25\xae\x8c\x6c\x73\xf9\xbd\xb3\x7e\xd8\xe1\x51\x54\xf2\x1d\x2b\x9d\xf4\x33\x64\x1c\xec\x4e\xc0\x7d\x89\xd8\xb5\x60\x67\x20\x25\x14\xc1\x11\x05\x4c\xec\xb1\xb6\x87\xb2\x9d\x3a\xb5\x9e\x22\x62\x82\x70\xc6\xce\xe1\x2c\xc9\x88\x10\xc8\xe1\x3a\x86\xb0\x1e\xeb\x43\x16\xd6\xbd\xaf\x8f\xf4\x0f\xcd\x89\xfe\x61\xeb\x81\xde\x6b\x8d\xe5\x13\xd0\x2a\xa9\x12\xe1\x6c\x5f\x44\x0b\x97\xab\xdf\xd4\x58\xe3\xcb\x0b\xab\x51\x7f\x0b\xdf\xbf\xb3\x61\x86\x07\x46\x4d\x16\x7b\x97\x17\x17\x7f\xf3\x20\x43\x36\xc9\x4c\xf3\x8d\xd1\x2a\x6d\x5d\xbe\x47\x87\xd1\x8d\x22\xca\xa6\x3d\xc4\x36\xe9\xf8\xb1\xa1\xe3\xc7\xa7\xd3\x91\x4a\x95\xd7\x99\x62\x87\x1e\x50\x62\x48\x60\xe4\x64\x62\xa7\xa6\x84\x33\x4a\x8c\x54\xce\x9d\x2a\xec\x81\x46\x63\x98\x98\x68\x0f\x6a\xa6\x0e\x52\x59\xa7\x4b\x8e\x26\x93\x96\x15\xb9\xb7\xa2\xad\x7f\x5c\xfa\x2d\x99\x57\x3f\x97\xe6\x17\xc6\x0d\xaa\x3e\xe9\xb3\x8d\x37\x92\x24\x52\x51\x5b\x4a\x3a\x6e\x75\x26\x57\x6b\x2f\x10\xc5\x48\x90\x97\xdc\x30\x8d\x1c\x13\x3b\x6f\x97\x55\x89\x4f\xf0\x62\x1d\xc3\xbe\xdb\x61\xaf\x0d\xb2\x62\x21\xc8\x90\x50\x26\x26\x1d\xd0\x5b\x9d\x0a\xf4\x03\x33\x49\xb6\x16\xdf\x44\x72\x4e\x0a\x8d\xf5\x74\x41\x14\x0a\x13\x7b\x6f\x36\x18\x71\xb5\xb3\x9e\x6f\xb4\x5a\x9b\x15\x41\xf8\x58\x10\x41\x91\xd6\xcc\xb8\x49\x5b\xaa\x94\xe4\xba\xc1\xb3\xae\xfa\x74\xff\x2b\x0e\xb2\xef\x57\x49\x30\xcc\x70\xec\x14\xdd\x77\x64\x16\x7d\xb4\x87\x11\x1a\x88\x67\x55\xfd\xcd\xbe\x3f\x82\xf0\x88\x1c\xa1\x64\x23\xbd\x0c\xc3\x06\x63\x2b\xe8\x9b\x55\x68\x07\xac\x9b\x84\x75\xf9\xae\xf8\xe4\x64\x8c\x9c\x23\x1d\xcf\x76\x46\xf8\x48\x4a\xd7\x53\x33\x18\x4b\x3a\x3b\xd2\x58\x65\xb0\x82\x0a\xa9\x54\xb1\xc7\x54\x90\x94\x26\x48\xab\x43\x1b\x98\x59\xf1\xd4\x83\xb3\xfe\x39\x10\x68\x18\xe9\x82\x88\xb6\x3b\xc4\xfb\x92\x29\xa4\xde\xcd\xb7\xa3\xc8\x2e\x3c\xc3\xa9\xa8\xf2\xea\x19\x06\x5c\x05\x71\xa9\xb1\xc9\x4a\x03\xd9\x96\xe2\xe6\xec\x80\x53\xb9\xf2\xa0\x71\xa4\xeb\xd2\xb3\x68\x1c\xc9\xa2\xba\xcf\xa7\x84\x97\x18\x7b\x94\xcc\x96\xed\xd1\xb6\x7a\x1b\x7e\x99\x15\x08\x95\x9c\x65\xd9\x01\xb3\x78\x9a\x51\xa7\xe1\xea\x86\xa8\x39\x7e\x6e\xbb\x93\x62\x16\x36\xf8\xbd\x50\x3b\xc9\xfe\xb8\x3f\x3a\xf9\x17\x43\x4e\x4a\x23\x7b\x01\xaf\x04\xfb\xe3\xfe\xa9\x12\x7f\x31\xd8\x3a\xc9\x90\x96\x1c\x7b\x41\x6f\x85\xfb\xc3\xff\xb5\x55\x39\x8d\x0b\xa3\xc8\xed\x76\x64\x59\xec\xd7\x94\x9d\x40\xed\x18\x95\xd7\x41\xf0\x67\xe9\x3f\xda\xbb\x8b\x1e\xec\x44\xa4\xc9\x50\x9d\xb6\x11\xa9\x4d\xae\xf5\x21\x29\xe1\xfa\x60\x23\xe2\x54\x4f\xdb\x87\xfc\xec\x8c\xb3\x31\x47\xf8\x8f\x92\x65\x01\xef\x0d\xe6\x1a\xde\x5c\xfd\x09\x5a\x90\x9a\xab\xfd\x1d\xc8\x11\xed\xc7\xb3\x88\x3c\x79\xf7\x51\xdc\x8c\xb4\x51\x52\x4c\x56\x82\x61\xc3\x00\x57\x55\x8e\x8d\xa2\x7a\xfd\x19\x95\xa5\x38\x5e\xf9\x27\xc1\x72\x28\x2c\xa9\xa6\x54\x90\x70\x96\x64\x08\x0a\x0b\x85\x19\x0a\x8a\x8a\x99\x73\x40\x2b\x83\xac\xd4\xb9\xa4\x90\xb1\x49\x06\x9c\xa5\xf6\x27\x7b\x52\x6a\x92\x97\x1a\x0c\x2a\x35\x03\xc5\x92\x8c\x28\xaa\xa5\x00\x42\x41\xdf\x97\x8c\x86\xf0\x1d\x3c\x48\x9e\x42\x2e\xa5\x00\x99\xa6\x2c\x61\x04\x48\x69\xf0\x1c\x84\x14\x90\x94\x85\xfd\x5d\x47\x0c\xe8\x3b\x62\x70\x2c\x89\xa2\x40\x25\x97\x0a\xc6\xaa\x14\x49\x16\xc2\x2f\x52\x52\x30\xaa\x4c\xee\xe0\xbe\x64\x42\x12\x10\xa8\x13\x56\x0a\x03\x9c\x8c\xa5\x2a\x5b\x68\x21\xfc\xab\xd2\x59\xd9\xd3\x60\x5e\x48\x75\xfe\xd7\x2b\xba\x41\xd0\x5f\xfe\x89\xe6\xdb\xdb\xb0\xdf\x4f\xf7\xc8\x76\x89\x27\x79\x57\x38\xbc\xf1\xf2\x1d\x6c\xaf\xa1\x95\xd7\x95\x1e\x8f\x2b\x27\x79\x40\x39\x8c\x7e\x0f\x05\x3b\x96\xb6\x4c\xaf\x4d\x75\xbe\xd6\xc3\xfa\xdf\x12\xce\xab\xce\xd3\xf5\x57\xdd\x3e\x97\xf5\x79\x4e\x9b\xcf\x41\x1b\x62\x58\xf2\xdf\x2f\xff\xfb\x00\x03\x37\xfe\xed\xf3\x07\xf0\x22\x4a\x74\x56\x1d\xd8\x88\x68\x8d\x46\x47\x53\x14\x54\x2a\x1d\xb5\x8f\x35\xd1\xd7\xce\x97\x30\x67\x22\xb4\xbb\x57\xb7\xe1\xb0\x03\xa2\x41\x59\xb9\xe0\xde\x3d\xc1\xfe\x0a\x89\x3d\x52\x14\x9c\x25\xd5\x63\x6b\xb4\x7c\x14\xed\x94\xe3\xb3\x81\xff\xa6\x0e\x8d\x3f\x0c\x15\x12\x3a\x1b\xa4\xa5\x70\xee\x0c\x86\x30\x5f\x61\xee\x81\x09\x2a\x1f\x42\x8d\xe6\xbd\x30\xa8\xa6\x84\xb7\xc2\x1b\xb2\x9b\xd6\x89\x31\x6a\xe0\x6b\x95\xf8\xe7\xe0\xf7\x4b\xab\x6f\x6e\x4d\xec\xff\x7d\x20\xf0\x01\xde\x11\x83\x83\xe1\x30\x9c\xa0\xf9\xc2\x72\x3b\x7c\xbb\xb2\xdf\xe2\xdc\x52\x11\xd6\x8a\xb7\x0a\x53\x85\x3a\xbb\x65\x35\x50\xdb\xb7\x7e\x0b\x97\x17\x17\x17\x1d\xbd\xc5\xf0\xed\xab\x0e\x15\x54\x26\x65\x8e\xc2\x1c\x26\xc2\x3a\xb6\xfa\x86\x06\x4c\x14\xa5\xf9\x9d\xd1\x3f\xce\x61\x7d\xc9\xf5\xad\x9b\xf3\x06\x1f\x0d\x51\x48\xac\x96\x3f\xac\xde\x52\x27\xb8\x9f\xd1\x29\x51\x3b\x0f\x07\x42\x0c\x67\x03\x93\x31\x3d\xdc\x5d\xae\xed\x65\x01\x31\xcc\x17\xbb\x45\xee\x20\x06\x0c\x0b\x25\x8b\x81\xcf\xa8\x3f\xdc\x10\xec\x90\xd6\x7c\x58\x0a\x83\x46\xc7\xa6\x9e\x3f\x84\x38\x8e\xc1\x4f\x32\x4c\xee\xc6\xf2\xd1\xdf\xe6\x4c\x83\xe7\xf7\xbb\x3f\x3a\x5b\x56\x2a\x48\xfd\x21\xbc\x8e\xc1\xf7\xdf\x6e\xa8\x2d\x5c\x05\x3b\x6c\xcf\xe6\xe7\x26\xfa\xc5\x26\xfa\xb3\x90\x7c\x25\x8f\x83\xed\x16\xad\x3b\xd7\x5b\x22\xee\x0f\x6b\xc0\xee\x35\xd4\xdf\x41\x7a\xa9\xf8\x5e\x6d\x97\xf0\xbb\xb4\xad\x3b\xd7\xd5\xdf\xed\xeb\xba\x4c\x12\xd4\xfa\x1a\x96\xb9\xaa\x76\x51\x0d\x75\x9c\x54\xa8\x50\x97\xdc\xb8\x08\xa5\x84\xf1\x8a\xed\xdd\x4a\xf6\x63\x8f\xe0\xa7\x8f\xd2\xb0\x74\xb6\x83\xa7\x15\xce\x6c\xfb\x7c\x0d\xfe\xbf\x95\x92\xca\x3f\xdc\x3c\xd8\x93\x70\x0d\x2a\xcc\x51\x6b\x32\xc1\x1e\x0a\x55\x50\x7c\xec\x69\x5f\x9b\x19\x67\x62\x72\x0d\xfe\x58\x4a\xa3\x8d\x22\xc5\x77\xfe\x5e\xad\xc5\x70\x33\xf1\xda\x35\x97\x80\x8e\xcb\x1a\x32\xbc\xb6\x64\x96\xc2\x5d\x13\x2f\xc5\xe7\xaf\x2e\xdc\x2f\xc8\xa8\xee\xbd\xc3\x89\x39\xdd\xba\xb2\x39\xbb\x6e\x63\xb1\x56\xce\xc1\xbd\x14\x54\xf7\x5c\xe7\x0a\xff\x7f\x00\x00\x00\xff\xff\x64\xe2\xe5\xcc\x7c\x1e\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x3b\x68\x14\x5f\x14\xc6\xbf\xcc\x3f\x7f\x95\xb5\x11\x0b\x41\xb0\x38\x16\x06\x1f\xdc\x64\x66\xd7\x88\x4e\x32\x89\x9a\x07\x04\xb3\x1a\xe2\x6a\x65\x73\xd9\xbd\xce\x0e\xee\xce\x2c\xf3\x48\x0c\xa6\xd8\xa4\x49\x23\xc1\x42\xc1\x42\x49\x67\x1d\xc5\xd5\xa0\x66\xed\x44\x1b\x39\xd7\xc6\xce\xc6\xca\xca\xd2\x56\xe6\x11\xc5\x81\xe1\x7c\xdf\x39\xdf\xf9\xdd\xf3\xed\xf0\xe0\x23\x00\x38\x00\xe0\x18\x80\x5b\x00\x0e\x02\x78\x82\xfc\xfb\x08\x60\x10\xc0\x27\x00\xff\x01\xf8\x0c\xe0\x10\x80\x2f\x00\xfe\x07\xf0\xbd\xa8\x3f\x00\xec\x07\xf0\xb3\x60\xfd\x02\xd0\x1c\x00\x30\x90\x7b\xcf\xc8\x6b\x68\x00\xa7\x01\xdc\x33\x80\x23\x00\x9e\x15\xfd\x5d\x23\xe7\x7e\x30\x80\xa3\x00\xbe\x1a\xd9\x6a\x36\x43\xc1\x36\x0a\x3d\x58\xdc\x82\xe2\xed\x7d\xa9\xb8\x94\xc4\x01\xa6\xe5\x4a\xfa\x8f\x5c\xf5\xdc\x66\x4c\xd1\xb2\x17\xd7\x9b\x98\x6b\x4b\x57\x21\x6b\x61\x21\x54\x4b\x9e\x5a\xc6\xf5\x7a\x53\x35\x92\x96\xc2\xa2\xea\x04\x61\x2c\xaa\x91\xeb\x35\xc4\xe5\xc4\x8d\x44\x2d\xb0\xa9\xa1\x96\x2e\xde\xf1\x9a\xb2\x1d\x0c\x87\x49\x69\xe1\x5a\x4d\x4c\x85\x4a\xc6\x5e\xe0\x8b\x69\x19\x2b\x9b\xca\xa6\x75\x41\x98\x15\x61\x9d\xa3\x72\xc5\x1e\x1d\x3d\x63\x56\x4c\xb3\x34\x2f\xa3\x58\xd4\x42\xe9\x47\x2d\x19\x07\xa1\x4d\x57\x32\x06\x55\x93\x50\xb6\x83\x46\x40\xe3\xff\x80\x27\x4a\xf3\xd2\x77\x13\xe9\x2a\x51\x53\xb2\x6d\xd3\x1f\x6f\xd3\x62\x12\x45\x9e\xf4\x4b\xd5\xb9\xea\x8c\xb8\xa9\xc2\xc8\x0b\x7c\x9b\xac\x61\xb3\x34\x15\xf8\xb1\xf2\x63\x51\x5b\xe9\x28\x9b\x62\x75\x37\x1e\xe9\xb4\xa4\xe7\x8f\x51\xbd\x29\xc3\x48\xc5\xce\x8d\xda\xac\x38\xff\x37\x97\xde\x73\x5b\x85\x62\xc6\xaf\x07\x0d\xcf\x77\x6d\x2a\x2d\xb4\x92\x50\xb6\xc4\x6c\x10\xb6\x23\x9b\xfc\x4e\x66\x23\xa7\x32\x46\xb9\x74\xfc\x13\x96\xe9\x38\x16\x0d\x0d\x51\x2a\xcd\xe3\x8e\x65\xd1\x24\x99\x64\x67\x7e\xc2\x29\xef\x8d\xc6\x9d\xb3\xa9\x3c\x99\xc5\xc6\x2d\x93\x56\x57\xf3\x95\x09\xa7\x6c\x9e\xa2\x49\xb2\xc8\xa6\xf2\x18\xf8\x01\xbf\xd0\xeb\xdc\x07\x3f\xe4\x1e\xef\xea\xfb\xe0\x2d\xee\xe9\x2e\xf7\xf8\x0d\xbf\xd5\x9b\x7a\x23\x6d\xf3\x0e\xf7\x88\x5f\xe6\x89\x11\xde\xe5\xbe\xde\x48\xa3\x8f\xf9\x35\xf7\xf9\xb9\xee\xf2\x36\xbf\xda\x0b\x82\x9f\xee\xcd\xb7\x74\x97\xfb\x7a\x8d\xdf\x71\x5f\xaf\xeb\x6e\xca\xee\x53\x9a\xd6\x6b\xfc\x9e\x77\xf4\x1a\x6f\xa7\x3b\x7a\x13\xbf\x03\x00\x00\xff\xff\x18\x2c\x2f\x98\xf1\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
