// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package hikvision

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xff\x6f\xdb\x38\xb2\xff\x7d\xff\x8a\x59\x6d\xdf\xd9\xbe\x57\xd9\x69\xbb\x77\xf7\x90\xc6\x79\x68\x37\xed\x35\x40\xaf\x57\xb4\xc9\xbe\x1f\x0e\x87\x80\x96\xc6\x16\x5b\x8a\x54\x49\xca\x89\xb7\xf0\xff\xfe\x40\x52\x92\x25\x5b\x8e\x25\x5b\x49\xd3\xe2\xb2\xc0\x56\xa6\x38\xc3\x99\xcf\x0c\x87\xc3\x6f\xfa\xfa\x15\x42\x9c\x52\x8e\xe0\x05\x82\x6b\xe4\xda\x83\xe5\xf2\xa7\x93\x90\xce\x21\x60\x44\xa9\xb1\x27\xc5\xb5\x77\xfa\x13\x00\x40\xb9\x34\x10\xcc\x8f\x43\xff\xc9\x53\x30\x4f\x2a\xce\x9f\x6e\x94\xff\xe4\x69\x56\x7f\x9d\xe6\xe6\x2a\x21\x1c\x59\xe9\xed\x66\x8d\x5c\x8a\x6a\x9d\xa2\x9e\x14\x0c\xc7\x9e\x26\x93\x3a\x4e\x45\xcd\x94\xe5\x0c\x39\x99\x03\x27\x73\x5f\x93\x89\x82\x09\x91\x57\xe6\xc1\x5b\xb1\x61\x54\xd5\xb5\x55\x70\x62\x34\xab\x9b\x48\x54\xc8\x35\xd1\x54\x70\xef\xeb\x57\xa0\x53\xc0\x2f\x30\x24\x81\x29\x00\xcf\xa0\x96\xb7\x69\xca\xe6\x68\x2a\x21\x0f\x61\xb9\x3c\x3d\x21\x10\x49\x9c\x8e\xb7\xd0\x7d\x22\x73\xa2\x02\x49\x13\x7d\x3c\x17\x34\xec\x1f\x0d\x9e\x1b\x5a\xa6\x10\x96\xcb\xaf\x5f\x61\xf8\x01\xbf\xa4\xa8\xf4\xf0\xf2\xc3\xdb\xe1\x7b\xa2\x23\x57\xec\x98\x7b\xa7\x86\xe9\x93\xff\xe1\xe0\xbd\x97\x38\xa7\x78\xed\xc1\x10\x96\xcb\x93\x11\x39\x3d\x19\x31\xda\x81\x6e\x34\x26\x33\xdc\x57\xc1\x82\x78\x1f\x2d\xff\xd7\x71\x19\x5b\x26\x75\x2a\x9f\x3b\xee\x1d\x2b\xac\x16\x4a\x63\xbc\xaf\xc6\x2b\xea\x43\x54\x76\x5c\xea\x74\xfe\x98\xf1\x6f\xa6\xb4\x93\x6f\x88\x73\xe4\x5a\x5d\x21\x27\x13\x86\x86\x61\x63\x30\xb8\xd0\x74\x4a\x03\xf7\x7a\x4f\x48\xd6\x79\x1c\x02\x4c\x99\x57\x1d\x3c\xef\x2a\x6d\x55\x40\x2a\xaa\xd7\x47\x8d\x51\xca\xb6\xc4\x93\x52\x84\xd2\x64\xe2\x6f\x8f\x51\x15\x8a\xb5\x58\x55\xe6\x60\x4a\x60\x4a\x42\x04\x07\x23\x50\x7e\x0b\xb7\x5b\x7a\xd5\x56\x9a\x8c\x4e\x12\x3e\x43\x78\x44\x1f\xc3\xa3\x20\x22\x9c\x23\x83\xe3\x31\x0c\xb3\x67\xb5\x8b\xc3\xba\xf6\x59\xd4\xff\x4b\x1e\xf4\xff\x52\x1b\xf3\x6f\xe5\x46\xe3\x19\x28\x19\x58\x37\x79\x74\x9b\xa1\x13\x17\xce\xfe\x94\xc9\x3a\x7e\x72\x64\x28\xb2\x5f\xc3\xf3\x33\x63\x76\xb8\xa6\xa1\x8e\xc6\xde\x93\xa3\xa3\xff\xf2\x20\x42\x3a\x8b\x74\xfe\x8b\x86\xd6\xb7\x5d\x48\x1c\xed\x96\xee\x64\x14\xd2\x79\x83\x6a\x9b\x70\xfc\x2d\x87\xe3\x6f\xed\xe1\x98\x0a\x19\x67\x9e\x62\x1e\x3d\x08\x89\x26\xbe\x16\xb3\x99\x29\x9a\x13\x46\x43\xa2\x85\x74\xea\x58\xb3\xfb\x0a\xb5\xa6\x7c\xa6\x3c\xc8\x90\xda\x09\x65\xe6\x2e\x31\xea\x48\x18\x54\xc4\xad\x83\xde\xfa\x9f\x73\xbf\x15\xf2\x32\x48\xf5\x6b\xca\x34\xca\x8b\x45\x82\x4d\x5c\xa8\x0e\x3b\x12\x04\x42\x86\xb6\x93\xae\x54\x2b\x15\x56\x87\x68\x20\x92\x12\x3f\x4e\x99\xa6\x0a\x19\x06\xa6\xdc\xbc\x96\x29\xb6\xd0\x64\x5d\x86\xdb\x92\x88\x5b\x79\x90\x0a\x07\x3f\x42\x12\x52\x3e\x2b\x09\x5d\xab\x94\xaf\xae\xa9\x0e\xa2\x35\x1b\x07\x82\x31\x92\x28\xcc\x8a\x13\x22\x91\xeb\xb1\xf7\xcb\x06\x22\x2e\xba\x66\xe5\x39\x55\xc1\xd3\x02\x84\x37\x09\xe1\x21\x86\x19\x32\xae\xd0\x84\x2b\x29\x98\xca\xe5\x59\x27\x6d\xaf\xbf\xc5\x20\xfa\xb5\x0a\x82\xa6\x9a\x61\x29\x10\x9f\x91\xc5\xe8\x9d\xe9\x90\x90\x8b\xf8\xc8\x06\xe3\xe8\xd7\x3d\x00\x1f\x91\x3d\x88\x8c\xa5\x57\x66\xd8\x40\xac\x22\x7d\xfe\x16\x8a\x07\x5a\x76\xc2\x2c\x84\x5b\x3c\x19\x99\x20\x63\x18\x4e\x16\x5b\x2d\xbc\x27\xa4\xeb\xae\xe9\x4f\x44\xb8\xd8\x93\x99\x65\x68\x45\x85\xa9\x90\x63\x8f\x4a\x3f\x48\xb5\x3f\xb5\x1d\xd7\xd7\x8b\xa4\x6d\xc7\x59\xff\xdb\x61\x68\x38\x51\x09\xe1\xc5\x24\x02\xbf\xa4\x54\x62\xe8\x9d\xfe\xf9\x64\x64\x5e\x1c\xa0\xd4\xc8\x6a\x75\x00\x03\x17\x41\x9c\x6b\x6c\xa2\x92\x8b\x6c\xc2\x71\xde\x77\xc0\x91\x3c\xf5\x20\x57\xa4\xac\xd2\x41\x30\x9e\x88\xc4\x8e\xe9\x73\xc2\x52\x1c\x7b\x21\x59\xac\x12\xa8\xad\x31\xd7\x56\x33\x20\x3b\xb9\x8c\x38\xf9\x53\x29\x23\x2b\x5b\x28\xef\x7d\xae\xb5\x4e\x45\xe6\xc6\xf6\x4d\x84\x76\x15\x9b\x8b\xfd\xce\xd5\xbf\x33\xc1\x49\xaa\x45\x13\xb9\x6d\xbd\xe6\x62\xbf\xb0\xd5\xef\x4c\x6a\x15\x44\x18\xa6\x0c\x9b\x48\x5e\xd4\x6d\x2e\xfd\xc7\x82\xa4\x1b\x0d\x4e\x46\xae\xb5\x3d\x43\x62\xb3\xa4\xac\x03\xb2\x7d\x48\xbe\x61\x2a\x31\x65\x34\xe9\x36\x91\x70\x1c\xf7\x48\x23\x2c\xe1\x1d\x25\x11\xaf\xad\x50\x0f\x24\x71\x70\x08\xdd\x9e\x36\xec\x91\x33\x1c\x82\xdf\x5d\x66\x0c\x07\xc8\x95\xff\xd5\xd8\xf1\xfb\xc8\x0b\x2a\xa6\xfe\x46\x99\x00\x55\x76\xb1\x26\x8b\xf3\x5c\xe8\x52\xa0\x37\x2e\x64\x30\x7d\x55\x2c\xe8\x34\x4d\x05\x72\xae\x77\x37\x40\xbd\x7d\xf5\xfa\xe2\xc3\xf9\xdf\xdf\x5c\xd4\x8d\x50\xb9\xe0\x1f\xf5\x82\x21\x94\xea\x36\x57\xe1\x2d\x4e\x35\x8c\x40\xde\x71\x76\x70\xf9\xfe\xec\x9f\xff\xf7\xae\x81\x0e\x59\xc5\xe6\x0a\x5c\x26\x30\x82\x50\x5c\xf3\x3b\x94\xfe\xb7\x57\xef\x2e\x5e\x7d\x68\x20\x7d\x56\xb1\xb9\xf4\xbf\x21\xd7\x28\x3b\x15\xfd\x67\xdf\x5f\x13\xff\xc5\xe5\xc5\x3f\x1b\x08\x6f\xab\x1d\x94\x99\xf9\xfe\x7f\x52\x9b\x3a\x92\x9f\x7d\xff\xa1\xe4\x42\xc5\xd8\x1a\xee\xcc\x8a\x84\x8e\x8c\x6b\x76\x99\x16\x65\x2c\xd7\xf2\xa2\x29\x61\x6a\x67\x62\xe4\x48\xbb\xcd\x8c\x7e\x73\xcc\xe9\x84\x21\xfc\x5d\x8a\x34\x81\x73\x8d\xb1\x82\x5f\x9e\x3e\x80\x04\x29\xc3\xaa\xf3\x0c\xe9\x20\x20\x3b\x4f\x91\x92\xd3\x13\xa5\xa5\xe0\xb3\x8a\x31\x8c\x19\xe0\xa9\xf5\xb1\x93\x51\xf6\xfe\x80\xc8\x92\xec\x4f\xfc\x82\xd3\x18\x12\x03\xaa\x4e\x25\x04\x8c\x06\x11\x82\xc4\x44\x62\x84\x3c\x44\x49\xf5\x63\x40\x53\x07\x69\xaa\x62\x11\x42\x44\x67\x11\x30\x3a\x45\x20\x41\x90\x2a\x12\xa7\x0a\x34\x4a\xb9\x00\x49\x83\x88\xc8\x50\x09\x0e\x24\x04\xf5\x25\xa5\xe1\x10\x9e\xc1\xb5\x60\x53\x88\x85\xe0\x20\xa6\x53\x1a\x50\x02\x24\xd5\xf8\x18\xb8\xe0\x10\xa4\x09\x35\x20\x68\x50\x9f\x89\xc6\x89\x20\x32\x84\x50\x30\x21\x61\x22\x53\x1e\x44\x43\x78\x2d\x44\x08\x5a\xa6\xc1\x67\xf8\x92\x52\x2e\x08\x70\x54\x01\x4d\xb9\x06\x46\x26\x42\xa6\x85\x68\x43\x78\x69\x69\x2a\x6d\x6a\x8c\x13\x21\x1f\xff\x78\x41\xb7\xcd\x58\xd4\x92\xfd\xed\x5b\x5f\x9b\xcc\x4d\xca\xdb\xc9\x96\xc9\xee\x86\xf3\x9d\xbf\xad\xdb\xa8\xbb\xf8\xd3\x29\x0c\x29\x9f\x8a\xb6\x9b\x59\x37\x57\x59\x4c\x6d\x86\x49\xf4\x74\x95\x48\xbc\x24\x8a\x06\x60\x1a\x95\x71\x65\xa7\x31\x7a\xda\x90\x5b\x79\x17\x89\x21\x91\x53\x7a\xe3\x9d\x36\xdd\x82\x72\xd5\x76\xd7\xb3\xbb\x24\xa5\x7d\x47\x86\x60\xff\xef\x2b\x2d\x69\x82\xa1\x8d\x56\xae\x3c\xd4\xbe\x44\x95\x08\xae\xe8\x1c\x81\x8b\x6b\x49\x12\x0f\x94\x49\xb3\xc6\x9e\xdd\x65\x3b\xb6\xdb\x6a\x0d\xd5\xd3\x66\xec\x6e\x5a\x57\xb6\x70\x7b\x1d\xad\x6d\xbe\xfd\x5a\x3e\x01\x41\x24\x89\xd1\x66\xa7\xce\x1c\x3a\x6a\xc5\x7a\xc5\xe9\x77\x93\x86\xb6\xe5\x72\x32\x6a\xaa\x8a\xe1\xd9\x02\x20\x33\x62\xb5\x51\xa4\x05\xa0\x8e\x20\x2c\x4d\x10\x71\x4e\x03\x04\x4e\xe2\x95\xfe\x0d\x05\x5d\xe3\x67\x3b\xe5\xd0\xf1\x7b\x47\x62\x6c\xcd\xab\x39\x9e\xd0\x99\xda\x69\x3c\x29\xb9\xcf\x21\x8a\x5f\x98\xb9\x81\x4b\x0d\xed\x66\xf5\xc3\xd5\xfd\x1f\x22\x34\x69\x58\x07\x3a\x5b\x4e\x0f\x5a\xd7\x8f\x28\x29\x61\x5d\xda\xd9\x71\x7c\x67\x19\x3e\x68\xd5\x5f\x53\x19\x5f\x13\x89\x30\x47\xa9\x4a\x63\xd6\x41\xda\xe7\x4c\x7f\x77\x3c\xcd\x5c\x7c\xe3\xdd\x07\x64\x48\x14\x86\x67\x44\xdf\x75\x10\xc8\xd6\xca\xb0\x5e\xba\x73\x93\x25\x78\x3b\x73\x8a\xaa\xb2\x5d\x42\x6e\x53\x86\xbb\xc0\xfd\xdc\xe5\x3f\x77\x0c\x6d\x8b\x14\x12\x0e\xc6\xee\x15\x0f\x44\x88\xb2\x53\x6f\xcd\x78\xd6\x39\x6b\xf6\xea\xdb\xf9\xea\x19\x56\x64\xbb\x4f\x37\xcd\x9a\xee\x14\xea\x35\x75\xca\x50\x67\xaf\xee\x17\xea\x96\xbe\xbb\x66\x9c\x97\x42\xe8\x6f\x61\x19\xd3\x6e\xa7\x66\x29\x2b\x52\xb6\x89\x29\x7f\xd0\x06\xe9\x24\xbd\x3b\x3f\xeb\x30\xa7\xbd\xf3\xac\x6e\x23\x40\x98\x56\xcf\xd0\x9d\x9c\xbd\xff\x18\x61\x11\x0c\x57\xcd\x77\x08\x65\x59\xa9\x87\xe6\x78\xb5\x56\x78\x2b\xdc\x09\xe3\x6f\x61\x02\x26\xaa\xa7\x9b\x3b\xc0\xbf\x50\xe7\x81\x83\xef\xce\xbe\xff\x26\xb8\x26\x81\xbe\x57\xec\x5d\xcb\x10\xb8\xa6\xbb\x99\x38\x54\x94\x79\x68\xc8\x1f\x38\xa5\x24\x01\x90\x30\x94\xa8\x54\x37\x13\x4b\x12\xbc\x70\xec\xee\x37\xe6\xbe\x21\x32\x2c\x4f\x6f\xee\xd3\xe5\xf2\xb6\x3b\x1d\xff\xd7\x15\xfa\xb1\xdc\x2e\x8b\x90\xee\x1c\x67\x67\xd1\x31\x3b\xe6\xfe\x70\x67\xf6\x1f\xd3\x24\x11\x52\xc3\x04\x31\xe9\x26\x34\x39\x86\x2f\x11\x93\xef\x42\xf1\x39\x0d\x51\x00\x13\x1d\x45\x9b\x8c\xed\xef\x86\xeb\x5b\x71\xa7\x31\xe7\x64\xd4\x70\x75\xf7\x64\x64\x17\xea\x9b\xee\xb6\x34\xd9\x34\x49\x93\x99\x24\x61\xa3\x1b\x1c\x1d\xed\x9b\x5c\x26\xa1\x99\x5b\x4c\xb3\xc5\x8b\x07\xb9\x6b\x52\x05\x67\x78\x69\xff\xa5\x7c\xd6\x78\xf3\xac\xbc\xe1\x2c\xc5\xcc\x8d\x81\xd9\x4e\x4a\x4c\xe4\x8c\x72\x7f\x22\xb4\x16\xf1\xf1\x51\x8b\x6d\xe8\x3a\xb6\xfe\x84\x48\x28\xff\x28\x36\x76\x2a\x85\x76\x73\x2c\xbb\xaf\x57\x5c\xfa\x73\xef\x27\x24\x3f\xdb\x60\x0f\xde\x70\x71\x6d\x6f\x13\x15\xda\xbf\x47\x19\x20\xd7\xf6\xae\xd5\xaa\x5a\x4c\xf9\xd8\x3b\xaa\x94\x90\x1b\x7b\xef\x6a\x6d\xcb\xa8\x9e\x55\xd3\x5d\xa4\x42\x75\x7b\x62\x30\x63\xcc\x28\x47\xdf\xdd\xf4\x3a\x7e\x7a\x94\xdc\xd8\xed\x9f\xba\x46\xda\x9e\x27\x6c\xb1\xa3\xda\xb0\xea\xea\x4e\x63\x33\xae\xf6\x2e\x58\xf9\xcc\x61\x24\x24\xfd\xc3\xe4\x87\xf6\x44\x66\xec\xce\x48\xf8\x0c\xa7\x1a\x42\x29\x92\x3f\x04\x2f\x0c\xea\x2e\x8f\x55\x6e\x78\xb9\x83\x8c\x45\x57\xcb\x2f\x8b\x55\x6f\x98\x7a\xc0\x45\x76\xcb\x0c\x4f\x9b\xee\xfb\x36\x1b\xd6\x5b\x6d\xfd\x12\x1e\x6e\xdc\x52\xed\x6f\xbd\x43\x3a\xd8\xd5\x76\xbb\x7b\x75\x65\xde\x7b\x5c\xaf\xab\x5e\x6f\xad\xda\xa0\x99\x39\x1b\x74\x88\x72\xff\xb7\xd4\x33\x29\xd2\xa6\xe7\x73\xcb\xc7\x7a\x53\xb9\xba\x8b\x9a\xed\x4f\x39\x49\x20\xdb\x51\x7d\x96\x5f\x67\x7c\xd6\xfa\x3a\x23\x94\xcf\xfc\x5e\x7e\x78\xeb\x02\x7c\xc3\x3e\xd5\xe2\xf8\x6e\xcd\x25\xcc\xbf\xe6\x52\xff\x75\x2f\xa9\x4f\x28\x4f\x52\x6d\x33\xc7\xb1\xa7\xf1\x46\xd7\x9e\xfe\xf5\xec\xbe\x68\x86\xa1\xf1\x1c\xfb\x90\x9f\xff\x6d\x15\xd4\x12\x46\x02\x8c\x04\x0b\x51\xba\x90\x7b\x8b\x83\xd9\x7e\xe1\xc6\xa5\x19\x42\x9f\x21\x37\xfd\x22\x40\xa5\xae\x3e\xe3\x62\x00\x47\xb0\x5c\xfe\xe9\x33\x2e\xc6\x86\xcf\xea\x45\xe5\x3b\x01\xad\x84\xcb\x4e\x61\x1a\x76\x65\xe7\x1e\xa6\x92\xd9\xa1\xa0\xc1\x75\x5a\x68\x1e\x27\xf7\xb8\x79\x7b\x50\x0f\xc8\x26\xa6\xbe\x3b\xbd\x71\x3f\x9d\x21\x9f\xbd\xe6\x6d\x7e\x37\xfd\xa2\x74\x28\x7e\x1d\x37\xd7\x17\xb6\xa0\x79\x47\x87\xe6\xd7\xce\x09\xd3\xa4\x58\x65\x58\xdd\x92\xaf\xb8\x6c\xf6\xfe\xca\x89\x07\x65\x8a\xc6\xe7\x86\x5f\x2e\xe0\xfc\xfd\x6a\x3d\x63\xff\x93\xcf\x6b\xd2\x47\x42\x69\x77\xd0\xa2\xa1\xf0\x2b\x82\x36\xb2\xaf\xa8\xf6\x93\xbc\xdd\x39\xe7\x07\xda\xe9\x57\x20\xdc\x47\x77\x7f\x53\xb4\xf6\xdd\x74\xf4\x56\x03\xe0\x0a\x4d\x13\x18\x8a\x5f\x07\x8d\x80\x81\xe0\x53\x3a\x03\x2f\x24\x2a\xb2\xc7\x46\x87\x91\x4d\xa1\xba\x1a\xbc\x72\x29\x7f\x80\x11\xac\x74\x39\xe9\x4e\xdd\xb8\x1c\xf5\x7e\x4c\x47\x36\x48\xda\x93\xec\xc9\x01\xce\x7b\x34\xb4\xff\x75\xe3\xa6\x34\xb9\x22\xc5\x52\xf7\xf7\xee\xa8\x89\x90\xf7\x94\x60\xbd\xb7\x2d\xfd\x98\x4e\xea\x50\xb4\x1f\xb4\xb1\x4f\x9d\x4c\x38\x36\xc3\xad\x63\xde\x55\xb8\xb5\x0b\xb3\x0f\xc2\x83\x19\xbf\x52\x82\xd1\xb0\xf9\x52\xe1\x41\xee\xbf\xcd\x59\xe2\xd0\x17\xd3\xa9\x42\xed\x3f\x6b\xe3\x29\x93\x54\x6b\xc1\x33\x57\x51\xe9\x24\xa6\x2b\x67\x99\x68\x0e\x13\xcd\x7d\x95\xda\x49\x5f\xe9\x28\xf4\x8b\x24\x61\x8b\x7c\x7d\xd5\xb1\xb8\x6f\x33\xec\x5a\x4d\x6a\xb8\x3c\x56\x6f\x0c\x48\x52\xc6\x7c\x77\x07\xb4\x9d\x41\x6d\xcf\xdb\x27\xa0\xad\x30\x6f\x45\x0d\x1b\x46\x74\x3f\x36\x8c\x48\x03\x91\x3d\xf0\xa9\x70\x66\x8d\x3d\x10\x3c\x60\x34\xf8\x5c\x7c\xcb\xea\x03\x4e\x25\xaa\xa8\x3f\x68\x3b\x71\xa2\x05\x88\x44\xc1\x94\xf8\x6a\xc1\x03\x0f\xec\x52\xbe\xfb\x66\x9b\xf5\x9b\x8c\xbd\xf3\x1c\xd3\x61\x6e\xf9\xb6\xdc\x46\x13\xad\x1c\xcd\x52\x94\xbe\x19\xd7\xe4\x5b\x60\xa1\xb8\xe6\x4c\x90\x70\xfc\xa4\x19\x7a\x07\x42\x94\x37\xb7\x09\xd3\x59\xf1\x66\x2f\x9c\x1a\xde\xb9\x6b\x3c\x48\x35\xea\x8d\xbb\xab\x94\xbf\xcd\xd6\xc0\x1c\x9d\x7c\x7e\x6d\xf7\x2a\xf1\x2d\x92\x6f\x79\x55\x53\xbc\x56\x54\xfa\x99\x3d\x66\xff\x94\x76\xd0\x4a\xdf\x46\x8d\xd0\x98\x3a\x93\xf1\xb6\x4f\x3e\xfe\x54\x52\x4b\x69\xa2\x69\xf0\xe6\xe2\x1f\x6f\xa1\xef\x9e\x2f\x3f\xbc\x05\x6f\x54\x0c\xb8\x23\xa2\x14\x6a\x35\x9a\x23\x0f\x85\x54\xa3\x7c\x4d\xff\x93\x1a\x05\x6a\xf5\x73\x18\x53\x3e\x0c\x4c\x0a\x6e\x6f\x9d\x0e\x4a\x72\x64\xa2\xd6\x0b\xfd\x49\xdd\x22\xf2\xe6\x17\x04\xf7\x91\xb8\x58\x47\x1f\x7d\x2a\xfd\xb0\x02\x7f\xaa\x95\xb7\xd9\x45\xaf\x03\xc1\xfb\xb4\x86\x5d\x55\x94\x95\x0f\xb8\x33\x67\x59\x50\x26\x49\xc2\xb2\xd4\x65\xb4\xfa\x3e\xe5\x5a\x04\x79\xd4\x0f\x45\x90\xc6\xc8\xf5\x60\x28\x91\x84\x8b\xfe\x34\xe5\x4e\x8f\xfe\x00\xbe\x6e\x38\xe2\x59\x2e\x86\x5b\x72\x51\xc3\x7c\x3b\x06\xc6\x35\xb5\xcd\x5f\x42\x24\x61\x0c\xd9\x65\x62\xc2\x8b\x3a\x86\x27\xf5\x17\x1d\x4d\xbd\xf8\x1d\x89\xf1\x18\x56\x7b\x3c\xf5\x55\x03\x89\x44\xa3\xbd\x3a\x7f\x11\xa5\xf1\x84\x13\xca\xd4\xb1\x43\xa4\x9e\x82\x04\x01\x26\x1a\xc3\xd7\x94\xa1\x3a\x86\x0a\x36\x22\xd0\xa8\x7d\xa5\x25\x92\xf8\xf1\x30\x24\xf3\xcd\x6c\x71\xf9\xbc\x52\xb4\x1c\x3c\x2f\xf5\x3b\x87\xeb\xe9\x9a\x07\xff\xb4\x87\x41\xae\x29\x0f\xc5\xf5\xb0\x3a\x2e\xc2\x18\x72\x93\x6c\x58\xe4\x51\xbf\xf7\x4b\x56\xbb\x37\x18\x12\xad\x65\xbf\xa7\x64\xd0\x7b\x0c\xbd\x86\xe3\xcf\x95\x1e\xf7\xfe\xbb\xcf\xf1\x1a\xce\x88\xc6\xfe\x60\x30\x9c\xa1\xbe\xa0\xb1\x79\x5c\x29\xb9\x7c\xbe\x72\xb2\x6a\x9b\xbb\x7c\x26\x53\x49\xa1\x3e\xe7\x1a\xe5\x9c\xb0\x7e\xad\x96\x8f\xed\xc1\xdd\xac\xec\x4a\xba\xc2\x2b\x9a\xd1\xc0\x72\x09\x7f\x86\x27\x47\x47\x47\x65\xa1\x06\x15\xa9\x9a\xfb\xb1\xd1\xa0\xfa\xe1\x49\xb0\x29\xd4\xbf\x68\xf8\xef\xc7\xb0\xfe\xca\xad\x14\x6e\x96\x9b\x39\x0e\x91\x48\x0c\x55\x6f\x60\x3f\x40\x3a\xc3\xfe\x56\x53\x81\x9d\x58\xc8\xad\x63\x82\xe9\x40\x8f\xfa\x3a\xa2\x6a\xb0\xfd\x22\x70\x48\x34\x31\x1d\x6d\xb9\xbd\xca\x67\x18\x03\x0e\x13\x29\x92\x7e\x8f\x86\xbd\xc1\x46\xc5\xe7\x9b\x07\x06\xe8\x14\xfa\x39\x8d\x71\xd5\xde\x00\xc6\xe3\x31\xf4\x82\x08\x83\xcf\x13\x71\xd3\xab\x53\x26\x97\xe7\x5f\x9f\xff\x5d\x6a\xd2\x92\x60\xd8\x1b\xc0\xcf\x63\xe8\xf5\x9e\x6f\x76\x25\x17\x32\x77\xf3\x33\xae\xb2\x29\x7d\xcd\x39\x90\x47\x43\xf2\x89\xdc\xf4\xeb\x39\x1a\x75\x8e\x6b\x2c\xde\x1b\x64\x02\xbb\xcd\xcd\xde\x16\xd0\x53\xc9\x6e\xa5\x76\xbd\x69\x1b\xb5\x51\xe7\xd8\xfe\xbf\xfe\x7d\x36\xc9\x39\x86\x95\xaf\xca\x6d\x50\x43\x66\x27\x39\x94\xa8\x52\xa6\x9d\x85\xa6\x84\x32\x8b\xf6\x76\x22\xf3\x67\xfa\xf7\x7b\xfb\x1d\xe1\xc5\x16\x9c\x2a\x98\x99\xd4\xf0\x18\x7a\xaf\xa4\x14\xb2\xb7\xfb\x5a\xba\xe9\x09\xc7\x20\x87\x31\x2a\x45\x66\x5b\x22\x70\x85\xc0\x1a\xa5\x87\x0d\xf9\x2b\xbd\x60\x94\xcf\x8e\xa1\x37\x11\x42\x2b\x2d\x49\xf2\xac\x77\x2b\x55\x39\x40\x6f\xbc\x2b\xc6\xec\x7e\x21\x32\xfc\x6c\xc0\x4c\xb9\x4b\x34\xee\x0a\xcf\x8f\xce\xdc\x77\x88\xa8\x6a\xdc\x42\xc7\x98\xd6\xbe\xd9\x2c\x5d\xe7\xb1\x5c\x0b\xe7\x50\x19\x50\x8b\xc1\xf4\xff\x03\x00\x00\xff\xff\xdf\xca\x10\x05\xd4\x5f\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x52\x4d\x6f\x1b\x55\x14\x3d\xe3\x69\x29\x18\x84\xa0\x0b\x24\x24\x16\xb7\x12\x8d\xa0\xd2\x34\x76\x60\x81\xc6\x99\x84\x8f\xb4\xa8\xa2\x46\x55\x6a\xd8\x3f\xd9\xcf\xf6\x80\x3d\xcf\x9a\x8f\x98\x48\x41\xb2\x13\x20\x2c\xa2\x88\x05\x91\xd8\x40\x84\xd8\xb2\x70\x22\x4c\x86\x24\x1e\xfe\x01\xba\x6f\xc1\x0e\x65\x0b\x3f\x03\x3d\xcf\x24\xd0\x2b\x59\xf7\x9c\xf7\xce\xb9\xf7\x3c\x6b\x2e\x6e\x5e\x3b\x00\x80\xe7\x00\xbc\x02\x60\x0b\xc0\x8b\x00\xfe\x42\x5e\x64\x01\xd7\x00\xdc\xb2\x00\x1b\xc0\x82\x05\xbc\x00\xe0\x8e\x05\x3c\x0d\xa0\x66\x01\xaf\x02\x58\xb3\x80\xeb\x00\xfc\xa2\x2b\x0b\xb8\x01\x20\x29\xfa\xe7\x85\xfe\x4b\x0b\x78\x0a\xc0\xbe\x05\xac\x5a\xc0\x41\x71\xfe\x67\x29\xef\x17\x25\xe0\x0e\x80\xbf\x4b\xc0\xf3\x00\x6e\xda\xc0\x27\x66\xbf\x0d\xbc\x04\x60\xcf\xce\x75\x3f\xd9\x79\x8e\x9f\x8b\x3e\xb3\x81\x97\x01\xfc\x61\xe7\xbe\x7f\x6c\xc0\x42\x9e\xdd\x94\xf1\x5c\x2f\xf0\xb3\xc8\xdf\x72\xa3\xe0\x65\xe4\x99\x9e\x01\x50\x2a\xfe\x8b\xab\x7a\x27\x89\x15\xd6\xc4\xa6\xf9\x2d\x7e\xe8\x77\xba\x31\x45\x43\x3f\x6e\x76\xb1\xa6\x86\x41\x4f\x89\x16\xde\x97\x31\xb5\xe4\x86\xdf\x94\xe4\x07\x6d\x45\x6d\xe1\xf7\x64\x8b\x86\x7e\xdc\x25\x19\x86\x2a\xa4\xdb\x11\x1e\xf4\x45\x47\x62\x3e\x00\x8f\x42\xb9\xe1\xcb\x21\xd6\x65\x3b\x94\x51\x17\x8f\x9b\x5d\xd9\x4a\x7a\x12\x8f\x37\xa3\x58\xf6\xb1\x2e\x07\x2a\x8c\x9d\x7a\xd4\xf1\x5b\xce\xbb\x49\x27\x72\x1a\xca\x35\x2b\xde\xfe\xd4\xef\x8a\xbe\xba\x1b\x26\xe5\x87\x22\x8a\x9d\x46\x28\x82\xa8\x27\x62\x15\xba\xf4\xc1\xfc\x8a\xea\x49\x28\xfa\xaa\xa5\x68\xf9\x09\xfd\x4a\xf9\xa1\x08\x3a\x89\xe8\x48\xa7\x21\x45\xdf\xa5\x2b\xee\xd2\x7a\x12\x45\xbe\x08\xca\xf5\x07\xf5\x7b\xce\xc7\x32\x8c\x7c\x15\xb8\x54\xbd\x5b\x29\xbf\xa7\x82\x58\x06\xb1\xd3\xd8\x1c\x48\x97\x62\xf9\x59\xbc\x38\xe8\x09\x3f\xa8\x51\xb3\x2b\xc2\x48\xc6\xde\x47\x8d\xfb\xce\x5b\xff\xe9\x4c\x9e\xb6\x0c\x9d\x7b\x41\x53\xb5\xfc\xa0\xe3\x52\xf9\x51\x2f\x09\x45\xcf\xb9\xaf\xc2\x7e\xe4\x52\x30\x98\xd3\xc8\x7b\xa3\x46\x39\xf4\x82\xdb\xd5\x8a\xe7\x55\x69\x61\x81\x0c\xac\xdc\xf2\xaa\x55\x5a\xa5\x0a\xb9\x73\xbe\xe2\x2d\x5d\x5e\x2d\x7b\x6f\x1a\xf8\xda\x5c\xb6\x5c\xad\xd0\xd6\x56\x6e\x59\xf1\x96\x2a\xaf\xd3\x2a\x55\xc9\xa5\xa5\x1a\xf8\x1b\x3e\xd6\xdb\x9c\x81\xbf\xe5\x29\xcf\xf4\x1e\xf8\x90\xa7\x7a\xc4\x53\x3e\xe5\x33\xbd\xaf\x77\xcd\x31\xa7\x3c\x25\xfe\x25\x57\x2c\xf2\x8c\x33\xbd\x6b\xa4\x3f\xf2\x29\x4f\xf4\x2e\x4f\xf4\x76\xee\xcc\xf8\x4c\xef\xfc\xdf\x93\xf2\x4c\x7f\xc1\x99\x1e\xf1\x39\x4f\xf4\x57\x9c\x72\x4a\x9c\xf1\x11\xe9\x1d\x3d\xd6\xdb\x7a\xc4\x19\xff\x66\x10\x1f\x1b\xf9\x09\x4f\x0c\xd0\x23\xfd\x35\xa7\x7c\xc6\x99\x1e\xeb\x3d\xe2\x6c\x4e\x8f\xf8\xd4\xa8\xcd\x27\xc2\xdf\xf1\x89\x19\xa3\x47\x3c\xe1\x5f\x2f\xd7\x81\xbf\xbf\x4c\x76\x68\x26\xeb\x31\x9f\x73\x66\xb6\x80\x7f\xe0\x23\x93\x9b\x8f\x39\xbd\x0a\x4b\xc6\xae\xc7\xfc\x3b\xa7\x7a\xcc\x13\x33\x44\xef\x9b\x57\xa5\xf3\x44\x53\x93\x19\xff\x06\x00\x00\xff\xff\xe4\x4d\x6a\x9d\xf7\x03\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
