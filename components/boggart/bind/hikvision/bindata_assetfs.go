// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package hikvision

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x5d\x6f\xe3\xb6\xd2\xbe\xdf\x5f\x31\x55\xf3\xbe\xb6\x7b\x22\x39\x49\x5b\xf4\xc0\x6b\xe7\xa0\xdb\x74\x4f\x17\xd8\x2e\x16\xfb\xd1\x9b\xa2\x58\xd0\xe2\xd8\x62\x96\x22\xb5\x24\xe5\x24\x0d\xfc\xdf\x0f\x48\x4a\xb2\xfc\x2d\x7f\x64\x61\xd4\x17\x89\x4c\x72\x1e\xcd\x3c\x1c\x0e\x47\xd4\xf8\xf1\x11\x28\x8e\x98\x40\x08\x62\x29\x0c\x0a\x13\xc0\x74\xfa\xac\x4f\xd9\x04\x62\x4e\xb4\x1e\x04\x4a\xde\x05\xd7\xcf\x00\x00\xea\xad\xb1\xe4\x61\x4a\xc3\xcb\x2b\xb0\x57\x3a\x2d\xaf\xee\x75\x78\x79\x55\x8c\x5f\x94\xb9\xff\x94\x11\x81\xbc\xd6\xbb\x3c\xa2\xd4\x62\x7e\x4c\x35\x4e\x49\x8e\x83\xc0\x90\xe1\x2a\xa4\x6a\x64\xce\x4b\x40\x41\x26\x20\xc8\x24\x34\x64\xa8\x61\x48\xd4\x27\x7b\x11\xcc\x60\x38\xd3\xab\xee\x55\x21\x71\x56\x8c\xcd\x14\x6a\x14\x86\x18\x26\x45\xf0\xf8\x08\x6c\x04\xf8\x05\x22\x12\xdb\x06\x08\x2c\x6b\xe5\x3d\x6d\xdb\x04\xed\x20\x14\x14\xa6\xd3\xeb\x3e\x81\x44\xe1\x68\xb0\x46\xee\x96\x4c\x88\x8e\x15\xcb\x4c\x6f\x22\x19\x6d\x5f\x74\x9e\x5b\x59\xae\x11\xa6\xd3\xc7\x47\x88\xde\xe1\x97\x1c\xb5\x89\x3e\xbe\x7b\x1d\xbd\x25\x26\xf1\xcd\x1e\x3c\xb8\xb6\xa0\x97\xff\x16\x10\xbc\x55\x38\x61\x78\x17\x40\x04\xd3\x69\xbf\x4b\xae\xfb\x5d\xce\x8e\x60\x1b\x4b\xc9\x18\xf7\x35\xb0\x12\xde\xc7\xca\xff\x78\x94\x81\x03\x59\x65\xf2\x2b\x8f\x7e\x64\x83\xf5\x83\x36\x98\xee\x6b\xf1\x4c\xfa\x10\x93\x3d\xca\x2a\x9b\xdf\x17\xf8\xdb\x8d\xee\x77\x73\xbe\xa6\xa7\xb6\xe6\x0c\x19\x86\xeb\x57\xdd\x9c\xc4\xc2\xea\xab\x23\xd8\x16\x18\x11\x8a\xe0\xb9\x02\x26\x36\xa0\x6d\xf0\x93\xb5\x32\x85\x9c\x22\x62\x8c\x70\xc6\xce\xe1\x2c\x4e\x88\x10\xc8\xa1\x37\x80\xa8\xb8\xd6\xdb\x10\x16\xad\x2f\xe2\xd8\x8f\x65\x18\xfb\x71\x65\x14\xdb\x88\xc6\xd2\x31\x68\x15\x3b\x5f\x38\xdb\x34\xa7\x99\x5f\xa0\xff\x5f\xe8\x3a\xb8\xbc\xb0\x12\xc5\xb7\xe8\xd5\x8d\x9d\x67\xb8\x63\xd4\x24\x83\xe0\xf2\xe2\xe2\xff\x02\x48\x90\x8d\x13\x53\x7e\x63\xd4\xb9\xae\x5f\xe4\xdd\xed\xda\xf5\xbb\x94\x4d\x1a\x0c\x5b\xa6\xe3\xa7\x92\x8e\x9f\x76\xa7\x63\x24\x55\x5a\x78\x8a\xbd\x0c\x80\x12\x43\x42\x23\xc7\x63\xdb\x34\x21\x9c\x51\x62\xa4\xf2\xe6\xb8\x69\x0f\x35\x1a\xc3\xc4\x58\x07\x50\x30\xb5\x95\xca\xc2\x5d\x52\x34\x89\xb4\xac\xc8\x8d\x61\x7c\xf1\xe3\xdd\x6f\xc6\xbc\xfa\x25\x37\x2f\x19\x37\xa8\x9a\xb8\xcf\x2a\xde\x48\x1c\x4b\x45\x6d\x38\xa9\x99\x55\x6b\x9c\xdf\x70\x80\x28\x46\xc2\x34\xe7\x86\x69\xe4\x18\xdb\x76\xdb\xad\x72\xdc\xc1\x8a\x45\x1d\x36\x6d\x89\x1b\x31\xc8\x1c\x42\x98\x20\xa1\x4c\x8c\x6b\x4a\xaf\x34\x2a\xd4\x77\xcc\xc4\xc9\xc2\xfc\xc6\x92\x73\x92\x69\x2c\x9a\x33\xa2\x50\x98\x41\xf0\xed\x12\x23\x3e\x7c\x16\xed\xa5\x54\x85\xe9\x08\xc2\xfb\x8c\x08\x8a\xb4\x60\xc6\x37\xda\x50\xa5\x24\xd7\xa5\x3e\x8b\xa2\xbb\xdb\xef\x38\x48\x7e\x98\x27\xc1\x30\xc3\xb1\x16\x75\x6f\xc8\x43\xf7\x8d\x5d\x8c\x50\xaa\x78\xe6\xe2\x6f\xf2\xc3\x1e\x84\x77\xc9\x1e\x42\x76\xa6\x67\xd3\xb0\xc4\xd8\x9c\xf6\x65\x2f\x54\x17\xac\xee\x84\x45\xf8\x76\x7c\x72\x32\x44\xce\x91\x0e\x1f\xd6\xce\xf0\x9e\x94\x2e\xba\x66\x38\x94\xf4\x61\x4f\x30\x07\xe8\x54\x85\x91\x54\x83\x80\xa9\x30\xce\x4d\x38\x72\x8b\x36\x34\x0f\xd9\xae\x0b\x67\xf1\xb3\x65\xa2\xa1\xaf\x33\x22\xaa\x94\x18\xbf\xe4\x4c\x21\x0d\xae\xbf\xeb\x77\x6d\xc7\x01\x46\x75\x9d\x55\x07\x00\xf8\x08\xe2\x5d\x63\x99\x95\x52\x65\x1b\x8a\xcb\xb5\x03\x5e\xe4\x2a\x80\xd2\x90\xba\x49\x07\xd1\xd8\x97\x99\xdb\xcf\x27\x84\xe7\x38\x08\x28\x79\x98\x65\x48\xab\xe2\x6d\xf4\xe1\x21\x43\x70\xe3\x2c\xcb\x5e\x31\xab\x4f\x79\x55\xcb\xb9\xea\x53\x54\x2e\x3f\x7f\xbb\xa3\xea\x2c\xec\xe4\x37\xd2\xda\x8f\x6c\xae\xf7\x1b\x3f\xfe\xc9\x34\x27\xb9\x91\x8d\x14\x77\x03\x9b\xeb\xfd\xb3\x1b\xfe\x64\x6a\xeb\x38\x41\x9a\x73\x6c\xa4\x7a\x35\xb8\xb9\xfa\xef\x2b\x91\xe3\x98\xd0\xef\xfa\xbb\xed\x19\x16\x9b\x25\x65\x47\x10\xdb\x47\xe4\x9b\x30\x3c\x95\xfc\xa3\xda\xbb\xe8\xd6\x4c\x44\x9a\x04\xd5\x71\x13\x91\x02\x72\x21\x0f\x19\x11\xae\xb7\x26\x22\x5e\xf4\xb8\x79\xc8\x2f\x1e\x9c\x0d\x39\xc2\x7f\x95\xcc\x33\x78\x65\x30\xd5\xf0\xed\xd5\x09\xa4\x20\x05\x57\x9b\x33\x90\x3d\xd2\x8f\x83\x88\x3c\x7a\xf6\x91\x5d\xf7\xb5\x51\x52\x8c\xe7\x26\xc3\x4e\x03\x5c\x39\x1f\xeb\x77\x8b\xfe\x03\x22\x4b\xb6\xbf\xf0\xcf\x82\xa5\x90\x59\x52\x4d\xae\x20\xe6\x2c\x4e\x10\x14\x66\x0a\x13\x14\x14\x15\x33\xe7\x80\x76\x0c\xb2\x5c\xa7\x92\x42\xc2\xc6\x09\x70\x36\xb2\x8f\xec\x71\xae\x49\x9a\x6b\x30\xa8\xd4\x03\x28\x16\x27\x44\x51\x2d\x05\x10\x0a\xfa\x4b\xce\x68\x04\xdf\xc3\x9d\xe4\x23\x48\xa5\x14\x20\x47\x23\x16\x33\x02\x24\x37\x78\x0e\x42\x0a\x88\xf3\xcc\x3e\xd7\x11\x03\xfa\x33\x31\x38\x94\x44\x51\xa0\x92\x4b\x05\x43\x95\x8b\x38\x89\xe0\xa5\x94\x14\x8c\xca\xe3\xcf\xf0\x25\x67\x42\x12\x10\xa8\x63\x96\x0b\x03\x9c\x0c\xa5\xca\x2b\xd5\x22\x78\xe1\x64\xe6\xee\x69\x30\xcd\xa4\x3a\xff\xe7\x05\xdd\x30\x6c\x3e\x7e\x47\xf8\x6a\x37\x6c\xf6\xe8\xde\xb5\x59\xe2\x51\xce\x15\xb6\xdf\xb8\x3c\x09\x5b\x7b\x7a\xb6\x11\x7f\xfe\xd0\xb8\x08\x92\xdb\x15\x4f\xae\x66\x69\xc1\x0b\xa2\x59\x0c\x4c\x58\x9b\xfd\x49\x60\x71\xa4\x96\x5c\xed\x78\x66\xc2\x91\xa8\x11\xbb\x0f\xae\x1b\x10\x53\x0c\xd9\x3c\xc6\x9d\x07\xd4\x4e\xd7\x38\x82\xfb\x1b\x6a\xa3\x58\x86\xd4\x85\x1b\xdf\x4e\x4d\xa8\x50\x67\x52\x68\x36\x41\x10\xf2\x4e\x91\x2c\x00\x6d\x1e\x6c\xac\x75\x67\x49\x3d\x77\x78\xd4\xc0\x24\x63\x37\xde\x26\xe3\x54\xc3\x93\x20\x93\x2c\x1c\x2b\xfd\x50\x3f\xad\x26\x8a\xa4\x68\xec\xc6\xe1\x69\x37\x49\x63\xd8\x19\xca\x1f\x36\x85\xdc\x05\xa1\xdf\x6d\xa2\xbe\xc5\x6a\x48\x86\xdd\x56\x9a\x2a\xde\x90\x38\x3f\x98\xd6\x1e\x78\x70\xc2\x62\x04\x41\xd2\x99\xad\x0d\x94\x5b\xc0\x8a\xac\xaf\x47\x1e\xeb\x0d\x49\x71\x27\x9c\x66\xbc\xc1\x51\xcc\xcc\xd3\x61\xcd\x2d\xf6\x35\xf4\x83\x4d\xd2\x7d\x8e\xe6\x8e\x56\x4f\xcb\xd6\xdf\x25\xb5\x39\xd0\x81\x36\x3a\x94\x93\xb3\xed\x3d\x2a\x46\xf8\xb1\xe6\xd1\xa3\xbd\x71\x60\x27\x67\xea\x4b\xa6\xd2\x3b\xa2\x10\x26\xa8\x74\x6d\x0f\xd9\xdb\xda\x12\xf0\x0f\x8f\x67\x9f\x72\x97\xfa\xde\x21\x47\xa2\x91\xde\x10\xf3\x54\x8b\xd8\x3f\x8a\x0b\x5c\xad\xd5\x2b\x31\x92\xfe\xdd\xe5\x57\xa6\xd7\x6d\xd7\xc7\xe6\xd8\x59\xf3\x64\x34\xee\x92\x7f\xed\xcd\xd3\xaf\x22\x96\x14\xd5\xd1\xbc\xb0\xc0\x5b\xe5\x84\x45\xd7\xd7\xf7\xc1\x1b\x9c\xd3\xe9\x6b\xb8\x5f\x71\xcb\xa3\xd1\xba\x60\x42\x9d\xd6\xa2\xeb\xeb\xd0\xfa\x55\x7c\xf2\x85\x94\xe6\x68\xcc\x59\xb0\x55\xb4\xd9\xf6\xaf\xc0\xd9\xc1\x39\xcd\xab\x9b\x23\x25\x6e\x27\x98\xca\x14\x26\x52\xf4\xb5\x0e\xc7\x59\x28\x16\xf2\x66\x86\x78\xaa\x46\x73\x19\x93\x23\x5a\xfc\xba\x80\x3b\x39\x73\x7d\xd1\x09\xd8\x7c\x9a\xc4\xe6\x9f\x6e\xed\xef\x24\x06\x42\xa9\x42\xad\x0f\x4f\xd1\x49\xfc\xb3\x87\x3a\x39\x33\x7f\x23\x8a\x1e\x35\x79\x2d\x01\x67\x91\xfa\xb4\x0c\x2e\x16\xad\x7f\x31\x7a\x14\x17\x76\x2f\xa5\x4e\xcd\xcc\xf7\x79\x96\x49\x65\x60\x88\x98\x1d\xfe\xf8\xe5\xc1\x5e\x20\x66\x27\x6b\xe8\x84\x51\x94\xc0\xe5\x11\x96\x6b\x01\xf9\x87\x45\x7c\x2d\x9f\x64\xd1\xf6\xbb\x0d\x0e\x8d\xfa\x5d\x77\xbe\xb7\xed\xa4\xf0\xf0\x63\xd0\x8f\x19\xb5\x79\xd3\xa8\x78\x26\x3a\x99\x43\x50\x9f\xfd\x47\x79\x36\x56\x84\x62\xf4\xd1\xfd\x67\x62\xbc\x6b\x81\x5f\xa6\xe4\xd8\x07\xf2\xe2\x50\x34\x25\x6a\xcc\x44\x38\x94\xc6\xc8\xb4\x77\xd1\xb4\xac\x6d\x05\x64\x38\x24\x0a\xea\x5f\xaa\xf3\xd9\xb9\x46\xeb\x57\x45\x55\x64\x50\x15\xa0\xfa\xfe\x21\x29\xdf\x31\xba\x77\xe1\x42\xde\xb9\xd2\xb7\xca\xea\xb7\xa8\x62\x14\xc6\x15\x06\xce\x86\xa5\x4c\x0c\x82\x8b\xb9\x16\x72\xef\x8a\x04\x17\x4e\x7e\x57\x43\x35\x39\x0c\xae\xcc\x76\x65\x2f\x05\x28\x67\x02\x43\x5f\x92\xd8\xbb\xba\xc8\xee\xdd\x69\xee\xaa\x1b\xec\x52\x14\xd3\xb4\x48\xb1\xd9\x3b\x07\x5f\x5b\xbb\x1d\xcd\x15\x29\xd6\x4b\x63\x12\xa9\xd8\xdf\x36\xbb\x71\x05\x46\xa9\x7f\x2f\x19\x72\x1c\x19\xa0\x4a\x66\x7f\x4b\x51\x4d\x9e\xaf\x6a\x9c\x2b\x3d\x74\x6f\x45\x67\x4b\xa8\xac\x62\x9c\x2f\xe6\x0d\x40\xc8\xa2\xfc\x11\xaf\x9b\xbc\x6b\x69\xfe\x12\x65\x87\xb7\x25\xce\xba\xb1\x7b\x85\x9c\xe5\x9c\x87\xca\x15\xa5\xec\xb6\xd8\x99\xc8\x72\xe3\x41\x9a\x2e\x1f\x5f\xbb\x55\xc8\x0f\x8d\xd8\x49\xda\x21\x0c\x73\x63\xa4\x70\x9b\xf7\x20\xf0\x5f\x82\x1a\x20\x58\x50\x16\xcb\xe2\xc2\xae\x39\x7b\xa1\xd3\x00\xa4\x88\x39\x8b\x3f\x57\xc5\xb3\xef\x70\xa4\x50\x27\xed\xce\xae\xc5\x96\xac\x22\x91\x68\x18\x91\x50\x3f\x88\x38\x00\x17\x76\x7d\x25\xb8\x8b\xa8\x05\xbc\x8f\xa4\x36\x1e\x6e\xa8\x49\x5f\xba\x45\xd7\x5b\xb6\x83\x44\xad\x12\xbd\x49\xf1\x31\x95\x77\x82\x4b\x42\x07\x97\xcd\xd8\x3b\x90\xa2\xf2\x76\xcb\x34\xdd\x54\x3d\x7b\xf1\xd4\xb0\x7e\xa1\x71\x7d\x5d\xf3\x6d\x6b\xe3\x90\x7a\x31\x78\x83\xe9\x38\x4a\xbd\xf7\xf6\x38\xb1\x41\xf3\x35\x5d\x2b\x9a\x17\x9a\x6a\x5f\x8b\xcb\xe2\xdf\x4c\x9d\x67\xb5\x9f\x17\x25\x68\xa7\xba\xd0\x71\xd3\xaf\x26\x9e\xd5\xcc\xd2\x86\x18\x16\xff\xf6\xe1\xf7\xd7\xd0\xf6\xd7\x1f\xdf\xbd\x86\xa0\x4b\x89\x4e\x5c\x89\x41\x97\x68\x8d\x46\x77\x27\x28\xa8\x54\xba\x5b\xc6\xea\x5b\xdd\x8d\xf5\xec\x6b\x94\x32\x11\xc5\x36\x09\x70\x15\x3c\x9d\x9a\x1e\x85\xaa\xab\x95\xbe\xd5\x1b\x54\x5e\xfe\xc9\xc2\x3e\x1a\x57\x05\xf1\xdd\xdb\xda\x17\xa7\xf0\xed\x4a\x7d\x9b\xbd\x34\x3f\x90\xbc\xdb\x05\xee\xe6\x55\x99\xf9\x80\x3f\xa0\x29\x82\x32\xc9\x32\xce\xfc\x23\x7d\x77\xf6\xdb\x97\x85\x08\x72\xd6\xa6\x32\xce\x53\x14\xa6\x13\x29\x24\xf4\xa1\x3d\xca\x85\xb7\xa3\xdd\x81\xc7\x95\x3e\x7a\x53\xaa\xe2\x4b\xf7\x74\x54\x6e\xb5\x30\x58\x23\x61\x3f\x19\x51\x84\x73\xe4\x1f\x33\x1b\x66\x74\x0f\x2e\xd7\x17\x8f\xd8\xb1\xe9\x1b\x92\x62\x0f\x66\xfb\xf8\xfa\xe1\xb1\x42\x62\xd0\xfd\xfa\xe8\x43\x92\xa7\x43\x41\x18\xd7\x3d\xcf\xd0\x7a\x29\x12\xc7\x98\x19\xa4\x2f\x19\x47\xdd\x83\x39\xbe\x64\x6c\xd0\xd8\xfc\x11\x49\x7a\x1e\x51\x32\x09\x56\xc2\x4c\x9f\x2f\x35\x4f\x3b\xcf\x6b\x6b\xd2\x73\x7e\xbd\xe0\xdd\x7e\x95\xee\x36\x59\x77\x4c\x50\x79\x17\xcd\xef\x99\x30\x80\x72\xba\x96\x66\xeb\xac\xdd\xfa\xb6\x18\xdd\xea\x44\xc4\x18\xd5\x6e\x69\x15\xb7\xce\xa1\xd5\x70\x6f\xfa\x64\x06\xad\x7f\xb5\x05\xde\xc1\x0d\x31\xd8\xee\x74\xa2\x31\x9a\x0f\x2c\xb5\x97\x33\x23\xa7\xcf\x67\x0e\x38\x7f\xcf\x6d\xfe\x54\x98\xa4\xd1\xbc\x12\x06\xd5\x84\xf0\xf6\x4a\x2b\xcf\xdd\x01\x73\xd1\xf6\x49\xf9\xc6\x4f\xac\x90\x81\xe9\x14\xbe\x83\xcb\x8b\x8b\x8b\xba\x52\x9d\x39\xad\x9a\xfb\xb8\xb5\x60\xfe\x57\x30\xe0\xd2\xab\x3f\x19\xfd\xeb\x1c\x16\xbb\x7c\xe5\xe9\x72\xbb\xc1\x7b\x43\x14\x12\x2b\xd5\xea\xb8\x5f\x43\x8d\xb1\xbd\x76\xaa\xec\x67\x42\xd4\x5a\x4f\xb5\x0b\xeb\xac\x6d\x12\xa6\x3b\xeb\xdd\x99\x12\x43\xec\x02\x9c\xae\x1f\xf2\x19\x06\x80\x51\xa6\x64\xd6\x6e\x31\xda\xea\x2c\x0d\x7c\xbe\xfc\x10\xc8\x46\xd0\x2e\x65\xac\xab\xb6\x3a\x30\x18\x0c\xa0\x15\x27\x18\x7f\x1e\xca\xfb\xd6\xba\x28\x61\xf5\xf9\xf3\xf3\x5f\xb5\x5b\x3a\x11\xa4\xad\x0e\x7c\x33\x80\x56\x6b\xc5\xda\xf1\xe1\x74\x3b\x9e\x75\x95\x65\xed\xa7\xcb\xda\x9f\x45\xe4\x96\xdc\xb7\x57\x23\x5a\x73\x7a\x2b\x66\xbc\xd5\x29\x14\xf6\x0f\x15\xad\x35\xa4\xe7\x8a\x6f\x94\xf6\xab\x69\x9d\xb4\x35\xa7\xe7\xfe\xae\xee\xd7\x79\x1c\xa3\xb6\x51\xac\xf2\x55\xb5\x8e\x6a\x28\xe6\x49\x45\x0a\x75\xce\x8d\x9f\xa1\x11\x61\xdc\xb1\xbd\x5e\xc8\x7e\xec\xfa\x7e\xfb\x46\x1a\x36\x7a\x58\xc3\xd3\x1c\x67\x36\x6d\xec\x41\xeb\x57\xa5\xa4\x6a\x6d\x2f\xff\xb3\x2b\xa1\x07\x2a\x4a\x51\x6b\x32\xde\x10\x8d\x2b\x01\x37\x29\x2d\x6c\x88\x6f\x9f\x85\x99\x18\xf7\xa0\x35\x94\xd2\x68\xa3\x48\xf6\x7d\x6b\xa3\x54\x3d\x40\x2f\xf5\x55\xfb\x79\xbb\x52\x19\xbe\xb1\x64\xe6\xc2\x27\x21\x4f\xc5\xe7\x7b\x3f\xdd\x4f\xc8\xa8\x6e\x7c\x87\x23\x73\xba\x7a\xe7\xdc\xb8\x71\x2e\x7e\x2f\xaf\x67\x1b\x6a\xb5\x99\xfe\x2f\x00\x00\xff\xff\x7e\xba\xa7\xc6\x33\x3f\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x52\xc1\x6e\xdc\x54\x14\x3d\xee\xa4\x04\x06\x84\x5a\x16\x48\x48\x2c\x6e\x25\x1a\x41\x91\x1b\x7b\x42\x11\x38\x71\x0a\x34\x2d\x2a\x34\x10\xa5\x03\xfb\xa7\x99\x97\x19\xc3\x8c\x5f\x64\x3f\x77\x88\x14\xa4\x99\x14\x08\x8b\x2a\x62\x41\x25\x36\x50\xf1\x07\x93\x88\xa1\x26\x69\xcc\x0f\xb0\xb8\x6f\xc1\x0e\xb1\xe4\x17\xd8\x21\xf4\xc6\x4e\xa0\x57\xb2\xee\xb9\xcf\xe7\x9c\x7b\x9e\xe5\x3f\x9f\x9b\xb9\x0f\x00\xcf\x00\x78\x11\xc0\x36\x80\xf3\x00\xfe\x40\x59\xe4\x00\x33\x00\x2e\x38\x40\x0d\xc0\x9c\x03\x9c\x03\x70\xc9\x01\x9e\x04\xb0\xe8\x00\x2f\x01\x58\x71\x80\xb3\x00\xa2\xaa\x2b\x07\x98\x05\x90\x55\xfd\xf3\x8a\xff\xa5\x03\x3c\x01\x60\xcf\x01\xba\x0e\x70\xbf\x3a\xff\xe7\x4c\xd9\x67\x6b\xc0\x25\x00\xe7\x6a\xc0\xb3\xd6\xbf\x06\x7c\x02\xe0\xbd\x1a\xf0\x3c\x80\x49\xad\xe4\xfd\x56\x2b\x73\xfc\x5e\xf5\xbf\x6a\xc0\x0b\x00\xfe\xae\x74\xe7\x67\x00\x07\x65\x76\x5b\x56\x73\xb6\xc2\x4f\xa3\xbc\xcb\x6c\x35\xd7\x51\x66\x7a\x0a\xc0\x99\xea\x5b\x9c\xd6\xdb\x99\x56\x58\x11\x5b\xf6\x99\xff\x20\xea\x74\x35\xa5\x83\x48\xb7\xba\x58\x51\x83\xb8\xa7\x44\x1b\xef\x4a\x4d\x6d\x79\x27\x6a\x49\x8a\xe2\x0d\x45\x1b\x22\xea\xc9\x36\x0d\x22\xdd\x25\x99\x24\x2a\xa1\x8b\x29\x6e\xf6\x45\x47\x62\x6a\x80\xb5\x44\xde\x89\xe4\x00\xeb\x72\x23\x91\x69\x17\xb7\x5b\x5d\xd9\xce\x7a\x12\xb7\xb7\x52\x2d\xfb\x58\x97\x9b\x2a\xd1\xee\x6a\xda\x89\xda\xee\x3b\x59\x27\x75\x9b\x2a\xb0\x2b\xde\xfa\x34\xea\x8a\xbe\xba\x9c\x64\xf5\xb5\x0f\x9b\xee\xb5\x44\x0a\x1d\xa9\xd8\x5d\x11\x5a\x06\xd4\xf0\xfc\x37\x5d\x6f\xc1\xf5\x5f\xa7\xc6\x42\x70\xe5\xca\xab\xde\x82\xe7\xd5\x6f\x89\x54\xbb\xcd\x44\xc4\x69\x4f\x68\x95\x04\xf4\xfe\xd4\x83\x56\xb3\x44\xf4\x55\x5b\xd1\xd2\x63\xc6\xcb\xf5\x5b\x22\xee\x64\xa2\x23\xdd\xa6\x14\xfd\x80\x4e\xe7\x80\xd6\xb3\x34\x8d\x44\x5c\x5f\xbd\xb9\x7a\xdd\xfd\x58\x26\x69\xa4\xe2\x80\xfc\xcb\x5e\xfd\x9a\x8a\xb5\x8c\xb5\xdb\xdc\xda\x94\x01\x69\xf9\x99\x9e\xdf\xec\x89\x28\x5e\xa4\x56\x57\x24\xa9\xd4\xe1\x47\xcd\x1b\xee\x1b\xff\xf1\x6c\x9e\x0d\x99\xb8\xd7\xe3\x96\x6a\x47\x71\x27\xa0\xfa\x5a\x2f\x4b\x44\xcf\xbd\xa1\x92\x7e\x1a\x50\xbc\x39\x1d\xd3\x70\x61\x91\x4a\x18\xc6\x17\x7d\x2f\x0c\x7d\x9a\x9b\x23\x0b\xbd\x0b\xa1\xef\xd3\x55\xf2\x28\x98\xce\xcb\x61\xe3\xe4\xd5\x52\xf8\x9a\x85\x2f\x4f\x69\x4b\xbe\x47\xdb\xdb\xa5\x64\x39\x6c\x78\xaf\xd0\x55\xf2\x29\xa0\xc6\x22\xf8\x1b\x3e\x30\x3b\x5c\x80\xbf\xe5\x09\x1f\x9b\x7b\xe0\x07\x3c\x31\x43\x9e\xf0\x21\x1f\x99\x3d\xb3\x6b\x8f\x39\xe7\x09\xf1\x4f\x25\x63\x9e\x8f\xb9\x30\xbb\x96\xfa\x23\x1f\xf2\xd8\xec\xf2\xd8\xec\x94\xca\x82\x8f\xcc\xdd\xff\x6b\x72\x3e\x36\x5f\x70\x61\x86\xfc\x88\xc7\xe6\x2b\xce\x39\x27\x2e\x78\x9f\xcc\x5d\x33\x32\x3b\x66\xc8\x05\xff\x62\x11\x1f\x58\xfa\x43\x1e\x5b\x60\x86\xe6\x6b\xce\xf9\x88\x0b\x33\x32\xf7\x88\x8b\xe9\xb8\xcf\x87\x96\x6d\xff\x25\xfe\x8e\x1f\x5a\x1b\x33\xe4\x31\xff\x7c\xb2\x0e\xfc\xfd\x49\xb2\x07\xd6\xd9\x8c\xf8\x11\x17\x76\x0b\xf8\x07\xde\xb7\xb9\xf9\x80\xf3\xd3\xb0\x64\xe5\x66\xc4\xbf\x72\x6e\x46\x3c\xb6\x26\x66\xcf\xde\x2a\x9f\x26\x9a\xd8\xcc\xf8\x37\x00\x00\xff\xff\xb3\xe4\x31\xc2\x20\x04\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
