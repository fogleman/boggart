// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package hikvision

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x6d\x6f\xe3\x36\xf2\x7f\xbf\x9f\x62\xaa\xe6\xff\xb7\xdd\x8b\xe5\x24\x6d\xd1\x83\xd7\xce\xa1\xdb\x74\xaf\x0b\x6c\x17\x8b\x7d\xe8\x9b\xa2\x58\xd0\xe2\xd8\x62\x42\x91\x5a\x92\x72\x92\x06\xfe\xee\x07\x92\x92\x2c\xdb\xb2\x2d\x3f\x24\xc8\x9d\x5f\x24\x12\x39\x33\x9c\xf9\x71\x38\x1c\x51\xa3\x87\x07\xa0\x38\x66\x02\x21\x88\xa4\x30\x28\x4c\x00\xb3\xd9\x8b\x01\x65\x53\x88\x38\xd1\x7a\x18\x28\x79\x1b\x5c\xbe\x00\x00\xa8\xb6\x46\x92\x77\x13\xda\x3d\xbf\x00\x7b\xa5\x93\xe2\xea\x4e\x77\xcf\x2f\x72\xfa\x65\x9e\xbb\x2f\x29\x11\xc8\x2b\xbd\xab\x14\x85\x16\x8b\x34\x25\x9d\x92\x1c\x87\x81\x21\xa3\x3a\x49\x25\x65\xc6\x0b\x81\x82\x4c\x41\x90\x69\xd7\x90\x91\x86\x11\x51\x5f\xec\x45\x30\x17\xc3\x99\xae\x1b\xab\x94\xc4\x59\x4e\x9b\x2a\xd4\x28\x0c\x31\x4c\x8a\xe0\xe1\x01\xd8\x18\xf0\x2b\x84\x24\xb2\x0d\x10\x58\xd4\x8a\x31\x6d\xdb\x14\x2d\x11\x0a\x0a\xb3\xd9\xe5\x80\x40\xac\x70\x3c\x5c\xc3\x77\x4d\xa6\x44\x47\x8a\xa5\xa6\x3f\x95\x8c\xb6\xcf\x3a\x2f\x2d\x2f\xd7\x08\xb3\xd9\xc3\x03\x84\x1f\xf0\x6b\x86\xda\x84\x9f\x3f\xbc\x0d\xdf\x13\x13\xfb\x66\x2f\x3c\xb8\xb4\x42\xcf\xff\x29\x20\x78\xaf\x70\xca\xf0\x36\x80\x10\x66\xb3\x41\x8f\x5c\x0e\x7a\x9c\x1d\xc1\x36\x96\x90\x09\xee\x6b\x60\xc9\xbc\x8f\x95\xff\xf2\x52\x86\x4e\x48\x9d\xc9\x6f\xbc\xf4\x23\x1b\xac\xef\xb5\xc1\x64\x5f\x8b\xe7\xdc\x87\x98\xec\xa5\xd4\xd9\xfc\x31\x97\xbf\xdd\xe8\x41\x2f\xe3\x6b\x7a\x2a\x6b\xce\x90\x51\x77\xfd\xaa\x5b\xe0\x58\x5a\x7d\x55\x09\xb6\x05\xc6\x84\x22\x78\xac\x80\x89\x0d\xd2\x36\xf8\xc9\x5a\x9e\x9c\x4f\x11\x31\x41\x38\x61\xa7\x70\x12\xc5\x44\x08\xe4\xd0\x1f\x42\x98\x5f\xeb\x6d\x12\x96\xad\xcf\xe3\xd8\x8f\x45\x18\xfb\xb1\x36\x8a\x6d\x94\xc6\x92\x09\x68\x15\x39\x5f\x38\xd9\x34\xa7\xa9\x5f\xa0\xff\x9f\xeb\x3a\x3c\x3f\xb3\x1c\xf9\x5d\xf8\xe6\xca\xce\x33\xdc\x32\x6a\xe2\x61\x70\x7e\x76\xf6\x7f\x01\xc4\xc8\x26\xb1\x29\xee\x18\x75\xae\xeb\x17\x79\x6f\xbb\x76\x83\x1e\x65\xd3\x06\x64\xab\x70\xfc\x54\xc0\xf1\xd3\xee\x70\x8c\xa5\x4a\x72\x4f\xb1\x97\x01\x50\x62\x48\xd7\xc8\xc9\xc4\x36\x4d\x09\x67\x94\x18\xa9\xbc\x39\x6e\xda\xbb\x1a\x8d\x61\x62\xa2\x03\xc8\x91\xda\x0a\x65\xee\x2e\x09\x9a\x58\x5a\x54\xe4\xc6\x30\xbe\xfc\xf3\xee\x37\x47\x5e\xfd\x92\x99\xd7\x8c\x1b\x54\x4d\xdc\xa7\x0e\x37\x12\x45\x52\x51\x1b\x4e\x2a\x66\x55\x1a\x17\x37\x1c\x20\x8a\x91\x6e\x92\x71\xc3\x34\x72\x8c\x6c\xbb\xed\x56\x19\xee\x60\xc5\xb2\x0e\x9b\xb6\xc4\x8d\x32\xc8\x82\x84\x6e\x8c\x84\x32\x31\xa9\x28\x5d\x6b\x54\x57\xdf\x32\x13\xc5\x4b\xf3\x1b\x49\xce\x49\xaa\x31\x6f\x4e\x89\x42\x61\x86\xc1\xb7\x2b\x88\xf8\xf0\x99\xb7\x17\x5c\xa5\x4c\x07\x10\xde\xa5\x44\x50\xa4\x39\x32\xbe\xd1\x86\x2a\x25\xb9\x2e\xf4\x59\x66\xdd\xdd\x7e\x87\x41\xfc\xc3\x22\x08\x86\x19\x8e\x95\xa8\x7b\x45\xee\x7b\xef\xec\x62\x84\x42\xc5\x13\x17\x7f\xe3\x1f\xf6\x00\xbc\x47\xf6\x60\xb2\x33\x3d\x9f\x86\x15\xc4\x16\xb4\x2f\x7a\xa1\xbc\x60\x55\x27\xcc\xc3\xb7\xc3\x93\x93\x11\x72\x8e\x74\x74\xbf\x76\x86\xf7\x84\x74\xd9\x35\xbb\x23\x49\xef\xf7\x14\xe6\x04\x3a\x55\x61\x2c\xd5\x30\x60\xaa\x1b\x65\xa6\x3b\x76\x8b\xb6\x6b\xee\xd3\x5d\x17\xce\xf2\x6f\xcb\x44\xc3\x40\xa7\x44\x94\x29\x31\x7e\xcd\x98\x42\x1a\x5c\x7e\x37\xe8\xd9\x8e\x03\x8c\xea\x39\xab\x0e\x10\xe0\x23\x88\x77\x8d\x55\x54\x0a\x95\x6d\x28\x2e\xd6\x0e\x78\x96\x8b\x00\x0a\x43\xaa\x26\x1d\x04\xe3\x40\xa6\x6e\x3f\x9f\x12\x9e\xe1\x30\xa0\xe4\x7e\x9e\x21\xd5\xc5\xdb\xf0\xd3\x7d\x8a\xe0\xe8\x2c\xca\x5e\x31\xab\x4f\x71\x55\xc9\xb9\xaa\x53\x54\x2c\x3f\x3f\xdc\x51\x75\x16\x76\xf2\x1b\x69\xed\x29\x9b\xeb\xfd\xce\xd3\x3f\x9a\xe6\x24\x33\xb2\x91\xe2\x8e\xb0\xb9\xde\x3f\x3b\xf2\x47\x53\x5b\x47\x31\xd2\x8c\x63\x23\xd5\x4b\xe2\xe6\xea\x7f\x2c\x59\x8e\x63\xc2\xa0\xe7\x47\xdb\x33\x2c\x36\x4b\xca\x8e\xc0\xb6\x0f\xcb\x37\xdd\xee\x73\xc9\x3f\xca\xbd\x8b\x6e\xcd\x44\xa4\x89\x51\x1d\x37\x11\xc9\x45\x2e\xe5\x21\x63\xc2\xf5\xd6\x44\xc4\xb3\x1e\x37\x0f\xf9\xc5\x0b\x67\x23\x8e\xf0\x6f\x25\xb3\x14\xde\x18\x4c\x34\x7c\x7b\xf1\x0c\x52\x90\x1c\xab\xcd\x19\xc8\x1e\xe9\xc7\x41\x40\x1e\x3d\xfb\x48\x2f\x07\xda\x28\x29\x26\x0b\x93\x61\xa7\x01\x2e\x9c\x8f\x0d\x7a\x79\xff\x01\x91\x25\xdd\x9f\xf9\x67\xc1\x12\x48\x2d\xa8\x26\x53\x10\x71\x16\xc5\x08\x0a\x53\x85\x31\x0a\x8a\x8a\x99\x53\x40\x4b\x83\x2c\xd3\x89\xa4\x10\xb3\x49\x0c\x9c\x8d\xed\x23\x7b\x94\x69\x92\x64\x1a\x0c\x2a\x75\x0f\x8a\x45\x31\x51\x54\x4b\x01\x84\x82\xfe\x9a\x31\x1a\xc2\xf7\x70\x2b\xf9\x18\x12\x29\x05\xc8\xf1\x98\x45\x8c\x00\xc9\x0c\x9e\x82\x90\x02\xa2\x2c\xb5\xcf\x75\xc4\x80\xbe\x21\x06\x47\x92\x28\x0a\x54\x72\xa9\x60\xa4\x32\x11\xc5\x21\xbc\x96\x92\x82\x51\x59\x74\x03\x5f\x33\x26\x24\x01\x81\x3a\x62\x99\x30\xc0\xc9\x48\xaa\xac\x54\x2d\x84\x57\x8e\x67\x61\x4c\x83\x49\x2a\xd5\xe9\xff\x5e\xd0\xed\x76\x9b\xd3\xef\x28\xbe\xdc\x0d\x9b\x3d\xba\xf7\x6c\x96\x78\x94\x73\x85\xed\x03\x17\x27\x61\x6b\x4f\xcf\x36\xca\x5f\x3c\x34\xce\x83\xe4\x76\xc5\xe3\x8b\x79\x5a\xf0\x8a\x68\x16\x01\x13\xd6\x66\x7f\x12\x98\x1f\xa9\xc5\x17\x3b\x9e\x99\x70\x24\x6a\xcc\xee\x82\xcb\x06\xc0\xe4\x24\x9b\x69\xdc\x79\x40\xe5\x74\x8d\x23\xb8\xbf\x5d\x6d\x14\x4b\x91\xba\x70\xe3\xdb\xa9\xe9\x2a\xd4\xa9\x14\x9a\x4d\x11\x84\xbc\x55\x24\x0d\x40\x9b\x7b\x1b\x6b\xdd\x59\x52\xdf\x1d\x1e\x35\x30\xc9\xd8\x8d\xb7\x09\x9d\x6a\x78\x12\x64\xe2\xa5\x63\xa5\x1f\xaa\xa7\xd5\x44\x91\x04\x8d\xdd\x38\x3c\xec\x26\x6e\x2c\x76\x2e\xe5\x0f\x9b\x42\xee\x22\x61\xd0\x6b\xa2\xbe\x95\xd5\x10\x0c\xbb\xad\x34\x55\xbc\x21\x70\x9e\x98\x56\x1e\x78\x70\xca\x22\x04\x41\x92\xb9\xad\x0d\x94\x5b\x92\x15\x5a\x5f\x0f\xbd\xac\x77\x24\xc1\x9d\xe4\x34\xc3\x0d\x8e\x62\x66\x96\x8c\x2a\x6e\xb1\xaf\xa1\x9f\x6c\x92\xee\x73\x34\x77\xb4\xfa\xbc\x6c\xfd\x5d\x52\x9b\x03\x1d\x68\xa3\x93\xf2\xec\x6c\xfb\x88\x8a\x11\x7e\xac\x79\xf4\xd2\xde\x39\x61\xcf\xce\xd4\xd7\x4c\x25\xb7\x44\x21\x4c\x51\xe9\xca\x1e\xb2\xb7\xb5\x85\xc0\x3f\xbc\x3c\xfb\x94\xbb\xd2\xf7\x01\x39\x12\x8d\xf4\x8a\x98\xc7\x5a\xc4\xfe\x51\x5c\x60\xbd\x56\x6f\xc4\x58\xfa\x77\x97\x4f\x0c\xaf\xdb\xae\x8f\x8d\xb1\xb3\xe6\xd1\x60\xdc\x25\xff\xda\x1b\xa7\x5f\x45\x24\x29\xaa\xa3\x79\x61\x2e\xaf\xce\x09\xf3\xae\xa7\xf7\xc1\x2b\x5c\xd0\xe9\x29\xdc\x2f\x1f\xf2\x68\xb0\x2e\x99\x50\x85\x35\xef\x7a\x1a\x58\x77\xf0\xc9\xa5\x49\x78\x25\xa5\x79\xca\x19\xb0\xe3\x1d\x0d\xfe\xaa\xf2\x55\xec\x6d\xfb\xb3\x03\xfe\xe0\x34\xea\xcd\xd5\x91\x72\xc5\x47\xcb\x9e\x56\x16\xb8\x1d\xed\x0a\x7d\xc9\xc4\xd3\xad\x71\x87\x16\x9d\x0f\x7b\x24\xd8\xaa\x86\x3c\x07\x87\xaa\x45\xfb\xad\x8c\xc8\x53\x43\xcd\xf3\x31\x8f\x84\x73\x69\xc2\x33\x04\xd9\xd7\xea\xfc\x22\x85\x21\x91\x79\x12\x8c\xfd\x88\x10\xf9\x21\x0f\x4f\xbe\x17\x0c\x78\x0e\x08\x1f\xf0\xc8\x45\x22\x20\x94\x2a\xd4\xfa\xf0\x07\x2f\x12\xfd\xec\x45\x3d\x4d\x6c\xfc\x8d\x28\x5a\x7d\x2c\x78\x0a\x57\x2a\xc6\x3c\xda\xfe\xbb\x6c\xc4\x7f\xb7\x3b\xe5\xd1\xcc\xbf\x65\x3f\x4a\x24\x73\x6f\x38\x9f\xdb\x13\xee\xc7\x2c\x4d\xa5\x32\x30\x42\x4c\x0f\x0f\x27\x5e\xd8\x2b\xc4\xf4\xd9\x1a\x3a\x65\x14\x25\x70\x79\x84\x28\x91\x8b\xfc\xc3\x4a\x7c\x2b\x1f\x25\x56\x0c\x7a\x0d\x4e\x20\x07\x3d\x77\x58\xbc\xed\xd8\xf9\xf0\x33\xf5\xcf\x29\xb5\xf9\xf3\x38\x7f\xc0\x7e\x36\x27\xea\x3e\x9a\x86\x59\x3a\x51\x84\x62\xf8\xd9\xfd\x67\x62\xb2\x6b\xb5\x68\xaa\xe4\xc4\xef\x1f\xf9\x09\x7b\x42\xd4\x84\x89\xee\x48\x1a\x23\x93\xfe\x59\xd3\x1a\xc9\x1a\x91\xdd\x11\x51\x50\xbd\x29\x0f\xfb\x17\x1a\xad\x5f\xe5\x25\xb6\x41\x59\xcd\xec\xfb\x47\xa4\x78\x61\xed\x0a\x2b\x84\xbc\x75\x75\x94\xa5\xd5\xef\x51\x45\x28\x8c\xab\x32\x9d\x93\x25\x4c\x0c\x83\xb3\x85\x16\x72\xe7\x2a\x4e\x97\x5e\x23\xd4\x8b\x6a\xf2\x66\xa1\x34\xdb\xd5\x50\xe5\x42\x39\x13\xd8\xf5\xf5\xad\xfd\x8b\xb3\xf4\xce\xbd\x1a\xa8\x1b\x60\x97\x0a\xab\xa6\x15\xaf\xcd\x5e\x60\xf9\x42\xed\xed\xd2\x5c\xc5\x6b\xb5\xce\x2a\x96\x8a\xfd\x6d\x73\x26\x57\xad\x96\xf8\x97\xdc\x5d\x8e\x63\x03\x54\xc9\xf4\x6f\x29\xca\xc9\xf3\x25\xb2\x0b\x75\xac\xee\x15\xfb\x7c\x09\x15\x25\xb1\x8b\x95\xe1\x01\x08\x99\xd7\xd2\xe2\x65\x93\x17\x77\xcd\xdf\xc8\xed\xf0\xea\xcd\x59\x37\x71\xf5\x08\x69\xc6\x79\x57\xb9\x0a\xa7\xdd\x16\x3b\x13\x69\x66\xbc\x90\xa6\xcb\xc7\x17\x02\xe6\xfc\x23\x23\x76\xe2\x76\x12\x46\x99\x31\x52\xb8\xcd\x7b\x18\xf8\x9b\xa0\x22\x10\xac\x50\x16\xc9\xfc\xc2\xae\x39\x7b\xa1\x93\x00\xa4\x88\x38\x8b\x6e\xca\x4a\xec\x0f\x38\x56\xa8\xe3\x76\x67\xd7\xca\x5d\x56\x82\x48\x34\x8c\x49\x57\xdf\x8b\x28\x00\x17\x76\xfd\x67\x05\x2e\xa2\xe6\xe2\x7d\x24\xb5\xf1\x70\xc3\x07\x0e\x2b\x43\xf4\xbc\x65\x3b\x70\x54\x3e\x6b\x68\x52\xc9\x4e\xe5\xad\xe0\x92\xd0\xe1\x79\x33\xf4\x0e\x84\xa8\x18\x6e\x15\xa6\xab\xb2\x67\x2f\x9c\x1a\x16\xc3\x34\x2e\xd6\x6c\xbe\x6d\x6d\x24\xa9\x7e\x59\xd0\x60\x3a\x8e\xf2\xf1\xc0\xf6\x38\xb1\x41\xf3\x35\x5d\x35\xcd\x4b\x4d\x95\xdb\xfc\x32\xff\x37\x57\xe7\x45\xe5\x5b\xb5\x18\xed\x54\xe7\x3a\x6e\xfa\x04\xe7\x45\xc5\x2c\x6d\x88\x61\xd1\x6f\x9f\x7e\x7f\x0b\x6d\x7f\xfd\xf9\xc3\x5b\x08\x7a\x94\xe8\xd8\xd5\xab\xf4\x88\xd6\x68\x74\x6f\x8a\x82\x4a\xa5\x7b\x45\xac\xbe\xd6\xbd\x48\xcf\x6f\xc3\x84\x89\x30\xb2\x49\x80\x2b\x07\xeb\x54\xf4\xc8\x55\xad\x57\xfa\x5a\x6f\x50\x79\xf5\xfb\x97\x7d\x34\x2e\xbf\xae\xe8\x5d\x57\x6e\x9c\xc2\xd7\xb5\xfa\x36\xab\xc0\x38\x10\xbc\xeb\x25\xec\x16\x55\x99\xfb\x80\x3f\x2f\xcb\x83\x32\x49\x53\xce\xfc\xc9\x4e\x6f\xfe\x21\xd5\x52\x04\x39\x69\x53\x19\x65\x09\x0a\xd3\x09\x15\x12\x7a\xdf\x1e\x67\xc2\xdb\xd1\xee\xc0\xc3\x8a\x23\x5e\x15\x6a\xf8\x1a\x50\x1d\x16\xdb\x2c\x0c\x6b\xa8\xed\x2f\x25\x8a\x70\x8e\xfc\x73\x6a\xc3\x8b\xee\xc3\x79\x7d\x05\x92\xa5\x4b\xde\x91\x04\xfb\x30\xdf\xbb\xeb\x49\x23\x85\xc4\xa0\xfb\x74\xed\x53\x9c\x25\x23\x41\x18\xd7\x7d\x8f\x48\x3d\x07\x89\x22\x4c\x0d\xd2\xd7\x8c\xa3\xee\xc3\x02\x36\x32\x32\x68\x6c\xae\x88\x24\x39\x0d\x29\x99\x06\x2b\x22\x66\x2f\x17\x9a\x66\x9d\x97\x95\x75\xe7\x71\xbd\x5c\xf2\xe0\x17\x7b\x4c\xc8\x2d\x13\x54\xde\x86\x8b\xfb\x22\x0c\xa1\x98\x92\x95\x19\x39\x69\xb7\xbe\xcd\xa9\x5b\x9d\x90\x18\xa3\xda\x2d\xad\xa2\xd6\x29\xb4\x1a\xee\x3f\x5f\xcc\xb0\xf5\x8f\xb6\xc0\x5b\xb8\x22\x06\xdb\x9d\x4e\x38\x41\xf3\x89\x25\xf6\x72\x6e\xe4\xec\xe5\xdc\xc9\x16\xc7\xdc\xe6\x33\xb9\x49\x1a\xcd\x1b\x61\x50\x4d\x09\x6f\xd7\x5a\x79\xea\x5e\x26\xe4\x6d\x5f\x94\x6f\xfc\xc2\x72\x1e\x98\xcd\xe0\x3b\x38\x3f\x3b\x3b\xab\x2a\xd5\x59\xd0\xaa\xb9\x1f\x5b\x0b\x16\x3f\x9b\x02\x97\x42\xfd\xc9\xe8\x5f\xa7\xb0\xdc\xe5\x4b\x95\x57\xdb\x0d\xde\x19\xa2\x90\x58\xae\x56\xc7\x7d\x3e\x37\xc1\xf6\xda\xa9\xb2\xbf\x29\x51\x6b\xf7\x04\xbb\x80\x4e\xda\x26\x66\xba\xb3\xbe\x42\x8f\x12\x43\xec\x42\x9b\xad\x27\xb9\x81\x21\x60\x98\x2a\x99\xb6\x5b\x8c\xb6\x3a\x2b\x84\x2f\x57\x1f\xf4\xd8\x18\xda\x05\x8f\x75\xd5\x56\x07\x86\xc3\x21\xb4\xa2\x18\xa3\x9b\x91\xbc\x6b\xd5\x19\x53\xe8\xf3\xe7\xcd\x5f\x95\x21\x1d\x0b\xd2\x56\x07\xbe\x19\x42\xab\xf5\x72\x75\x29\xf9\x90\xb9\x5d\x9e\x75\x95\x55\xed\x67\xab\xda\x9f\x84\xe4\x9a\xdc\xb5\xeb\x25\x5a\x73\xfa\x35\x33\xde\xea\xe4\x0a\xfb\x07\x87\xd6\x1a\xd0\x33\xc5\x37\x72\xfb\xd5\xb4\x8e\xdb\x9a\xd3\x77\x7f\xeb\xfb\x75\x16\x45\xa8\x6d\xe4\x2a\x7d\x55\xad\x83\x1a\xf2\x79\x52\xa1\x42\x9d\x71\xe3\x67\x68\x4c\x18\x77\x68\xaf\x67\xb2\x3f\xbb\xbe\xdf\xbf\x93\x86\x8d\xef\xd7\xe0\xb4\x80\x99\x4d\x0d\xfb\xd0\xfa\x55\x29\xa9\x5a\xdb\xeb\x45\xed\x4a\xe8\x83\x0a\x13\xd4\x9a\x4c\xd6\x44\xe0\x05\x06\x37\x29\x2d\x6c\x28\xdf\x3e\xef\x32\x31\xe9\x43\x6b\x24\xa5\xd1\x46\x91\xf4\xfb\xd6\x46\xae\x6a\x80\x5e\xe9\x2b\xf7\xec\x76\xa9\x32\x7c\x63\xc1\xcc\x84\x4f\x34\x1e\x0b\xcf\x8f\x7e\xba\x1f\x11\x51\xdd\x78\x84\x23\x63\x5a\xdb\xb3\xda\xba\x2c\x63\xb6\x14\xce\x61\x61\x43\x2d\x37\xd3\xff\x04\x00\x00\xff\xff\x2c\xfc\x21\x63\x64\x41\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x52\xc1\x6e\xdc\x54\x14\x3d\xee\xa4\x04\x06\x84\x5a\x16\x48\x48\x2c\x6e\x25\x1a\x41\x91\x1b\x7b\x42\x11\x38\x71\x0a\x34\x2d\x2a\x34\x10\xa5\x03\xfb\xa7\x99\x97\x19\xc3\x8c\x5f\x64\x3f\x77\x88\x14\xa4\x99\x14\x08\x8b\x2a\x62\x41\x25\x36\x50\xf1\x07\x93\x88\xa1\x26\x69\xcc\x0f\xb0\xb8\x6f\xc1\x0e\xb1\xe4\x17\xd8\x21\xf4\xc6\x4e\xa0\x57\xb2\xee\xb9\xcf\xe7\x9c\x7b\x9e\xe5\x3f\x9f\x9b\xb9\x0f\x00\xcf\x00\x78\x11\xc0\x36\x80\xf3\x00\xfe\x40\x59\xe4\x00\x33\x00\x2e\x38\x40\x0d\xc0\x9c\x03\x9c\x03\x70\xc9\x01\x9e\x04\xb0\xe8\x00\x2f\x01\x58\x71\x80\xb3\x00\xa2\xaa\x2b\x07\x98\x05\x90\x55\xfd\xf3\x8a\xff\xa5\x03\x3c\x01\x60\xcf\x01\xba\x0e\x70\xbf\x3a\xff\xe7\x4c\xd9\x67\x6b\xc0\x25\x00\xe7\x6a\xc0\xb3\xd6\xbf\x06\x7c\x02\xe0\xbd\x1a\xf0\x3c\x80\x49\xad\xe4\xfd\x56\x2b\x73\xfc\x5e\xf5\xbf\x6a\xc0\x0b\x00\xfe\xae\x74\xe7\x67\x00\x07\x65\x76\x5b\x56\x73\xb6\xc2\x4f\xa3\xbc\xcb\x6c\x35\xd7\x51\x66\x7a\x0a\xc0\x99\xea\x5b\x9c\xd6\xdb\x99\x56\x58\x11\x5b\xf6\x99\xff\x20\xea\x74\x35\xa5\x83\x48\xb7\xba\x58\x51\x83\xb8\xa7\x44\x1b\xef\x4a\x4d\x6d\x79\x27\x6a\x49\x8a\xe2\x0d\x45\x1b\x22\xea\xc9\x36\x0d\x22\xdd\x25\x99\x24\x2a\xa1\x8b\x29\x6e\xf6\x45\x47\x62\x6a\x80\xb5\x44\xde\x89\xe4\x00\xeb\x72\x23\x91\x69\x17\xb7\x5b\x5d\xd9\xce\x7a\x12\xb7\xb7\x52\x2d\xfb\x58\x97\x9b\x2a\xd1\xee\x6a\xda\x89\xda\xee\x3b\x59\x27\x75\x9b\x2a\xb0\x2b\xde\xfa\x34\xea\x8a\xbe\xba\x9c\x64\xf5\xb5\x0f\x9b\xee\xb5\x44\x0a\x1d\xa9\xd8\x5d\x11\x5a\x06\xd4\xf0\xfc\x37\x5d\x6f\xc1\xf5\x5f\xa7\xc6\x42\x70\xe5\xca\xab\xde\x82\xe7\xd5\x6f\x89\x54\xbb\xcd\x44\xc4\x69\x4f\x68\x95\x04\xf4\xfe\xd4\x83\x56\xb3\x44\xf4\x55\x5b\xd1\xd2\x63\xc6\xcb\xf5\x5b\x22\xee\x64\xa2\x23\xdd\xa6\x14\xfd\x80\x4e\xe7\x80\xd6\xb3\x34\x8d\x44\x5c\x5f\xbd\xb9\x7a\xdd\xfd\x58\x26\x69\xa4\xe2\x80\xfc\xcb\x5e\xfd\x9a\x8a\xb5\x8c\xb5\xdb\xdc\xda\x94\x01\x69\xf9\x99\x9e\xdf\xec\x89\x28\x5e\xa4\x56\x57\x24\xa9\xd4\xe1\x47\xcd\x1b\xee\x1b\xff\xf1\x6c\x9e\x0d\x99\xb8\xd7\xe3\x96\x6a\x47\x71\x27\xa0\xfa\x5a\x2f\x4b\x44\xcf\xbd\xa1\x92\x7e\x1a\x50\xbc\x39\x1d\xd3\x70\x61\x91\x4a\x18\xc6\x17\x7d\x2f\x0c\x7d\x9a\x9b\x23\x0b\xbd\x0b\xa1\xef\xd3\x55\xf2\x28\x98\xce\xcb\x61\xe3\xe4\xd5\x52\xf8\x9a\x85\x2f\x4f\x69\x4b\xbe\x47\xdb\xdb\xa5\x64\x39\x6c\x78\xaf\xd0\x55\xf2\x29\xa0\xc6\x22\xf8\x1b\x3e\x30\x3b\x5c\x80\xbf\xe5\x09\x1f\x9b\x7b\xe0\x07\x3c\x31\x43\x9e\xf0\x21\x1f\x99\x3d\xb3\x6b\x8f\x39\xe7\x09\xf1\x4f\x25\x63\x9e\x8f\xb9\x30\xbb\x96\xfa\x23\x1f\xf2\xd8\xec\xf2\xd8\xec\x94\xca\x82\x8f\xcc\xdd\xff\x6b\x72\x3e\x36\x5f\x70\x61\x86\xfc\x88\xc7\xe6\x2b\xce\x39\x27\x2e\x78\x9f\xcc\x5d\x33\x32\x3b\x66\xc8\x05\xff\x62\x11\x1f\x58\xfa\x43\x1e\x5b\x60\x86\xe6\x6b\xce\xf9\x88\x0b\x33\x32\xf7\x88\x8b\xe9\xb8\xcf\x87\x96\x6d\xff\x25\xfe\x8e\x1f\x5a\x1b\x33\xe4\x31\xff\x7c\xb2\x0e\xfc\xfd\x49\xb2\x07\xd6\xd9\x8c\xf8\x11\x17\x76\x0b\xf8\x07\xde\xb7\xb9\xf9\x80\xf3\xd3\xb0\x64\xe5\x66\xc4\xbf\x72\x6e\x46\x3c\xb6\x26\x66\xcf\xde\x2a\x9f\x26\x9a\xd8\xcc\xf8\x37\x00\x00\xff\xff\xb3\xe4\x31\xc2\x20\x04\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
