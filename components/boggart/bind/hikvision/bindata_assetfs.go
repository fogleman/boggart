// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package hikvision

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x6d\x6f\xe3\x36\xf2\x7f\xbf\x9f\x62\xaa\xe6\xff\xb7\xdd\x8b\xe5\x24\x6d\xd1\x83\xd7\xce\xa1\xdb\x74\xaf\x0b\x6c\x17\x8b\x7d\xe8\x9b\xa2\x58\xd0\xe2\xd8\x62\x42\x91\x5a\x92\x72\x92\x06\xfe\xee\x07\x92\x92\x2c\xdb\xb2\x2d\x3f\x24\xc8\x9d\x5f\x24\x12\x39\x33\x9c\xf9\x71\x38\x1c\x51\xa3\x87\x07\xa0\x38\x66\x02\x21\x88\xa4\x30\x28\x4c\x00\xb3\xd9\x8b\x01\x65\x53\x88\x38\xd1\x7a\x18\x28\x79\x1b\x5c\xbe\x00\x00\xa8\xb6\x46\x92\x77\x13\xda\x3d\xbf\x00\x7b\xa5\x93\xe2\xea\x4e\x77\xcf\x2f\x72\xfa\x65\x9e\xbb\x2f\x29\x11\xc8\x2b\xbd\xab\x14\x85\x16\x8b\x34\x25\x9d\x92\x1c\x87\x81\x21\xa3\x3a\x49\x25\x65\xc6\x0b\x81\x82\x4c\x41\x90\x69\xd7\x90\x91\x86\x11\x51\x5f\xec\x45\x30\x17\xc3\x99\xae\x1b\xab\x94\xc4\x59\x4e\x9b\x2a\xd4\x28\x0c\x31\x4c\x8a\xe0\xe1\x01\xd8\x18\xf0\x2b\x84\x24\xb2\x0d\x10\x58\xd4\x8a\x31\x6d\xdb\x14\x2d\x11\x0a\x0a\xb3\xd9\xe5\x80\x40\xac\x70\x3c\x5c\xc3\x77\x4d\xa6\x44\x47\x8a\xa5\xa6\x3f\x95\x8c\xb6\xcf\x3a\x2f\x2d\x2f\xd7\x08\xb3\xd9\xc3\x03\x84\x1f\xf0\x6b\x86\xda\x84\x9f\x3f\xbc\x0d\xdf\x13\x13\xfb\x66\x2f\x3c\xb8\xb4\x42\xcf\xff\x29\x20\x78\xaf\x70\xca\xf0\x36\x80\x10\x66\xb3\x41\x8f\x5c\x0e\x7a\x9c\x1d\xc1\x36\x96\x90\x09\xee\x6b\x60\xc9\xbc\x8f\x95\xff\xf2\x52\x86\x4e\x48\x9d\xc9\x6f\xbc\xf4\x23\x1b\xac\xef\xb5\xc1\x64\x5f\x8b\xe7\xdc\x87\x98\xec\xa5\xd4\xd9\xfc\x31\x97\xbf\xdd\xe8\x41\x2f\xe3\x6b\x7a\x2a\x6b\xce\x90\x51\x77\xfd\xaa\x5b\xe0\x58\x5a\x7d\x55\x09\xb6\x05\xc6\x84\x22\x78\xac\x80\x89\x0d\xd2\x36\xf8\xc9\x5a\x9e\x9c\x4f\x11\x31\x41\x38\x61\xa7\x70\x12\xc5\x44\x08\xe4\xd0\x1f\x42\x98\x5f\xeb\x6d\x12\x96\xad\xcf\xe3\xd8\x8f\x45\x18\xfb\xb1\x36\x8a\x6d\x94\xc6\x92\x09\x68\x15\x39\x5f\x38\xd9\x34\xa7\xa9\x5f\xa0\xff\x9f\xeb\x3a\x3c\x3f\xb3\x1c\xf9\x5d\xf8\xe6\xca\xce\x33\xdc\x32\x6a\xe2\x61\x70\x7e\x76\xf6\x7f\x01\xc4\xc8\x26\xb1\x29\xee\x18\x75\xae\xeb\x17\x79\x6f\xbb\x76\x83\x1e\x65\xd3\x06\x64\xab\x70\xfc\x54\xc0\xf1\xd3\xee\x70\x8c\xa5\x4a\x72\x4f\xb1\x97\x01\x50\x62\x48\xd7\xc8\xc9\xc4\x36\x4d\x09\x67\x94\x18\xa9\xbc\x39\x6e\xda\xbb\x1a\x8d\x61\x62\xa2\x03\xc8\x91\xda\x0a\x65\xee\x2e\x09\x9a\x58\x5a\x54\xe4\xc6\x30\xbe\xfc\xf3\xee\x37\x47\x5e\x45\x99\x79\xcd\xb8\x41\xf5\xe9\x3e\xc5\x26\x2e\x54\x87\x1d\x89\x22\xa9\xa8\x0d\x29\x15\xd3\x2a\x8d\x8b\x9b\x0e\x10\xc5\x48\x37\xc9\xb8\x61\x1a\x39\x46\xb6\xdd\x76\xab\x0c\x77\xb0\x64\x59\x87\x4d\xdb\xe2\x46\x19\x64\x41\x42\x37\x46\x42\x99\x98\x54\x94\xae\x35\xaa\xab\x6f\x99\x89\xe2\xa5\x39\x8e\x24\xe7\x24\xd5\x98\x37\xa7\x44\xa1\x30\xc3\xe0\xdb\x15\x44\x7c\x08\xcd\xdb\x0b\xae\x52\xa6\x03\x08\xef\x52\x22\x28\xd2\x1c\x19\xdf\x68\xc3\x95\x92\x5c\x17\xfa\x2c\xb3\xee\x6e\xbf\xc3\x20\xfe\x61\x11\x04\xc3\x0c\xc7\x4a\xe4\xbd\x22\xf7\xbd\x77\x76\x41\x42\xa1\xe2\x89\x8b\xc1\xf1\x0f\x7b\x00\xde\x23\x7b\x30\xd9\x99\x9e\x4f\xc3\x0a\x62\x0b\xda\x17\xbd\x50\x5e\xb0\xaa\x13\xe6\x21\xdc\xe1\xc9\xc9\x08\x39\x47\x3a\xba\x5f\x3b\xc3\x7b\x42\xba\xec\x9a\xdd\x91\xa4\xf7\x7b\x0a\x73\x02\x9d\xaa\x30\x96\x6a\x18\x30\xd5\x8d\x32\xd3\x1d\xbb\x85\xdb\x35\xf7\xe9\xae\x0b\x67\xf9\xb7\x65\xa2\x61\xa0\x53\x22\xca\xb4\x18\xbf\x66\x4c\x21\x0d\x2e\xbf\x1b\xf4\x6c\xc7\x01\x46\xf5\x9c\x55\x07\x08\xf0\x11\xc4\xbb\xc6\x2a\x2a\x85\xca\x36\x1c\x17\x6b\x07\x3c\xcb\x45\x00\x85\x21\x55\x93\x0e\x82\x71\x20\x53\xb7\xa7\x4f\x09\xcf\x70\x18\x50\x72\x3f\xcf\x92\xd6\xc6\x5c\x47\x66\x41\xf6\x7a\x59\x75\x8a\xab\x4a\xda\x55\x9d\xa1\x62\xf5\xf9\xd1\x8e\xaa\xb2\xb0\x73\xdf\x44\x69\x4f\xd8\x5c\xed\x77\x9e\xfe\xd1\x14\x27\x99\x91\x4d\xf4\x76\x74\xcd\xd5\xfe\xd9\x91\x3f\x9a\xd6\x3a\x8a\x91\x66\x1c\x9b\x68\x5e\xd2\x36\xd7\xfe\x63\xc9\x72\x1c\x0b\x06\x3d\x3f\xda\x9e\x21\xb1\x59\x52\x76\x04\xb6\x7d\x58\xbe\xe9\x76\x9f\x4b\xee\x51\xee\x5b\x74\x6b\x16\x22\x4d\x8c\xea\xb8\x49\x48\x2e\x72\x29\x07\x19\x13\xae\xb7\x26\x21\x9e\xf5\xb8\x39\xc8\x2f\x5e\x38\x1b\x71\x84\x7f\x2b\x99\xa5\xf0\xc6\x60\xa2\xe1\xdb\x8b\x67\x90\x7e\xe4\x58\x6d\xce\x3e\xf6\x48\x3d\x0e\x02\xf2\xe8\x99\x47\x7a\x39\xd0\x46\x49\x31\x59\x98\x0c\x3b\x0d\x70\xe1\x7c\x6c\xd0\xcb\xfb\x0f\x88\x2c\xe9\xfe\xcc\x3f\x0b\x96\x40\x6a\x41\x35\x99\x82\x88\xb3\x28\x46\x50\x98\x2a\x8c\x51\x50\x54\xcc\x9c\x02\x5a\x1a\x64\x99\x4e\x24\x85\x98\x4d\x62\xe0\x6c\x6c\x1f\xd9\xa3\x4c\x93\x24\xd3\x60\x50\xa9\x7b\x50\x2c\x8a\x89\xa2\x5a\x0a\x20\x14\xf4\xd7\x8c\xd1\x10\xbe\x87\x5b\xc9\xc7\x90\x48\x29\x40\x8e\xc7\x2c\x62\x04\x48\x66\xf0\x14\x84\x14\x10\x65\xa9\x7d\xae\x23\x06\xf4\x0d\x31\x38\x92\x44\x51\xa0\x92\x4b\x05\x23\x95\x89\x28\x0e\xe1\xb5\x94\x14\x8c\xca\xa2\x1b\xf8\x9a\x31\x21\x09\x08\xd4\x11\xcb\x84\x01\x4e\x46\x52\x65\xa5\x6a\x21\xbc\x72\x3c\x0b\x63\x1a\x4c\x52\xa9\x4e\xff\xf7\x82\x6e\xb7\xdb\x9c\x7e\x47\xf1\xe5\x6e\xd8\xec\xd1\xbd\x67\x33\xc4\xa3\x9c\x2b\x6c\x1f\xb8\x38\x09\x5b\x7b\x7a\xb6\x51\xfe\xe2\xa1\x71\x1e\x24\xb7\x2b\x1e\x5f\xcc\xd3\x82\x57\x44\xb3\x08\x98\xb0\x36\xfb\x93\xc0\xfc\x48\x2d\xbe\xd8\xf1\xcc\x84\x23\x51\x63\x76\x17\x5c\x36\x00\x26\x27\xd9\x4c\xe3\xce\x02\x2a\xa7\x6b\x1c\xc1\xfd\xed\x6a\xa3\x58\x8a\xd4\x85\x1b\xdf\x4e\x4d\x57\xa1\x4e\xa5\xd0\x6c\x8a\x20\xe4\xad\x22\x69\x00\xda\xdc\xdb\x58\xeb\xce\x92\xfa\xee\xf0\xa8\x81\x49\xc6\x6e\xbc\x4d\xe8\x54\xc3\x93\x20\x13\x2f\x1d\x2b\xfd\x50\x3d\xad\x26\x8a\x24\x68\xec\xc6\xe1\x61\x37\x71\x63\xb1\x73\x29\x7f\xd8\x0c\x72\x17\x09\x83\x5e\x13\xf5\xad\xac\x86\x60\xd8\x6d\xa5\xa9\xe2\x0d\x81\xf3\xc4\xb4\xf2\xb4\x83\x53\x16\x21\x08\x92\xcc\x6d\x6d\xa0\xdc\x92\xac\xd0\xfa\x7a\xe8\x65\xbd\x23\x09\xee\x24\xa7\x19\x6e\x70\x14\x33\xb3\x64\x54\x71\x8b\x7d\x0d\xfd\x64\x93\x74\x9f\xa3\xb9\xa3\xd5\xe7\x65\xeb\xef\x92\xda\x1c\xe8\x40\x1b\x9d\x94\x67\x67\xdb\x47\x54\x8c\xf0\x63\xcd\xa3\x97\xf6\xce\x09\x7b\x76\xa6\xbe\x66\x2a\xb9\x25\x0a\x61\x8a\x4a\x57\xf6\x90\xbd\xad\x2d\x04\xfe\xe1\xe5\xd9\xa7\xdc\x95\xbe\x0f\xc8\x91\x68\xa4\x57\xc4\x3c\xd6\x22\xf6\x4f\xe2\x02\xeb\xb5\x7a\x23\xc6\xd2\xbf\xbb\x7c\x62\x78\xdd\x76\x7d\x6c\x8c\x9d\x35\x8f\x06\xe3\x2e\xf9\xd7\xde\x38\xfd\x2a\x22\x49\x51\x1d\xcd\x0b\x73\x79\x75\x4e\x98\x77\x3d\xbd\x0f\x5e\xe1\x82\x4e\x4f\xe1\x7e\xf9\x90\x47\x83\x75\xc9\x84\x2a\xac\x79\xd7\xd3\xc0\xba\x83\x4f\x2e\x4d\xc2\x2b\x29\xcd\x53\xce\x80\x1d\xef\x68\xf0\x57\x95\xaf\x62\x6f\xdb\x9f\x1d\xf0\x07\xa7\x51\x6f\xae\x8e\x94\x2b\x3e\x5a\xf6\xb4\xb2\xc0\xed\x68\x57\xe8\x4b\x26\x9e\x6e\x8d\x3b\xb4\xe8\x7c\xd8\x23\xc1\x56\x35\xe4\x39\x38\x54\x2d\xda\x6f\x65\x44\x9e\x1a\x6a\x9e\x8f\x79\x24\x9c\x4b\x13\x9e\x21\xc8\xbe\x56\xe7\x17\x29\x0c\x89\xcc\x93\x60\xec\x47\x84\xc8\x0f\x79\x78\xf2\xbd\x60\xc0\x73\x40\xf8\x80\x47\x2e\x12\x01\xa1\x54\xa1\xd6\x87\x3f\x78\x91\xe8\x67\x2f\xea\x69\x62\xe3\x6f\x44\xd1\xea\x63\xc1\x53\xb8\x52\x31\xe6\xd1\xf6\xdf\x65\x23\xfe\xbb\xdd\x29\x8f\x66\xfe\x0d\xfb\x51\x22\x59\x5e\x7c\xf4\xbc\x9e\x70\x3f\x66\x69\x2a\x95\x81\x11\x62\x7a\x78\x38\xf1\xc2\x5e\x21\xa6\xcf\xd6\xd0\x29\xa3\x28\x81\xcb\x23\x44\x89\x5c\xe4\x1f\x56\xe2\x5b\xf9\x28\xb1\x62\xd0\x6b\x70\x02\x39\xe8\xb9\xc3\xe2\x6d\xc7\xce\x87\x9f\xa9\x7f\x4e\xa9\xcd\x9f\xc7\xf9\x03\xf6\xb3\x39\x51\xf7\xd1\x34\xcc\xd2\x89\x22\x14\xc3\xcf\xee\x3f\x13\x93\x5d\xab\x45\x53\x25\x27\x7e\xff\xc8\x4f\xd8\x13\xa2\x26\x4c\x74\x47\xd2\x18\x99\xf4\xcf\x9a\xd6\x48\xd6\x88\xec\x8e\x88\x82\xea\x4d\x79\xd8\xbf\xd0\x68\xfd\x2a\x2f\xb1\x0d\xca\x6a\x66\xdf\x3f\x22\xc5\x0b\x6b\x57\x57\x21\xe4\xad\xab\xa3\x2c\xad\x7e\x8f\x2a\x42\x61\x5c\x95\xe9\x9c\x2c\x61\x62\x18\x9c\x2d\xb4\x90\x3b\x57\x71\xba\xf4\x1a\xa1\x5e\x54\x93\x37\x0b\xa5\xd9\xae\x7e\x2a\x17\xca\x99\xc0\xae\xaf\x6f\xed\x5f\x9c\xa5\x77\xee\xd5\x40\xdd\x00\xbb\x54\x57\x35\xad\x78\x6d\xf6\x02\xcb\x17\x6a\x6f\x97\xe6\x2a\x5e\xab\x35\x56\xb1\x54\xec\x6f\x9b\x33\xb9\x4a\xb5\xc4\xbf\xe4\xee\x72\x1c\x1b\xa0\x4a\xa6\x7f\x4b\x51\x4e\x9e\x2f\x91\x5d\xa8\x63\x75\xaf\xd8\xe7\x4b\xa8\x28\x89\x5d\xac\x0c\x0f\x40\xc8\xbc\x96\x16\x2f\x9b\xbc\xb8\x6b\xfe\x46\x6e\x87\x57\x6f\xce\xba\x89\xab\x47\x48\x33\xce\xbb\xca\xd5\x37\xed\xb6\xd8\x99\x48\x33\xe3\x85\x34\x5d\x3e\xbe\x08\x30\xe7\x1f\x19\xb1\x13\xb7\x93\x30\xca\x8c\x91\xc2\x6d\xde\xc3\xc0\xdf\x04\x15\x81\x60\x85\xb2\x48\xe6\x17\x76\xcd\xd9\x0b\x9d\x04\x20\x45\xc4\x59\x74\x53\x56\x62\x7f\xc0\xb1\x42\x1d\xb7\x3b\xbb\x56\xed\xb2\x12\x44\xa2\x61\x4c\xba\xfa\x5e\x44\x01\xb8\xb0\xeb\x3f\x2b\x70\x11\x35\x17\xef\x23\xa9\x8d\x87\x1b\x3e\x70\x58\x19\xa2\xe7\x2d\xdb\x81\xa3\xf2\x59\x43\x93\x4a\x76\x2a\x6f\x05\x97\x84\x0e\xcf\x9b\xa1\x77\x20\x44\xc5\x70\xab\x30\x5d\x95\x3d\x7b\xe1\xd4\xb0\x18\xa6\x71\xa1\x66\xf3\x6d\x6b\x23\x49\xf5\xcb\x82\x06\xd3\x71\x94\x8f\x07\xb6\xc7\x89\x0d\x9a\xaf\xe9\xaa\x69\x5e\x6a\xaa\xdc\xe6\x97\xf9\xbf\xb9\x3a\x2f\x2a\xdf\xaa\xc5\x68\xa7\x3a\xd7\x71\xd3\x27\x38\x2f\x2a\x66\x69\x43\x0c\x8b\x7e\xfb\xf4\xfb\x5b\x68\xfb\xeb\xcf\x1f\xde\x42\xd0\xa3\x44\xc7\xae\x5e\xa5\x47\xb4\x46\xa3\x7b\x53\x14\x54\x2a\xdd\x2b\x62\xf5\xb5\xee\x45\x7a\x7e\x1b\x26\x4c\x84\x91\x4d\x02\x5c\x39\x58\xa7\xa2\x47\xae\x6a\xbd\xd2\xd7\x7a\x83\xca\xab\xdf\xbf\xec\xa3\x71\xf9\x75\x45\xef\xba\x72\xe3\x14\xbe\xae\xd5\xb7\x59\x05\xc6\x81\xe0\x5d\x2f\x61\xb7\xa8\xca\xdc\x07\xfc\x79\x59\x1e\x94\x49\x9a\x72\xe6\x4f\x76\x7a\xf3\x0f\xa9\x96\x22\xc8\x49\x9b\xca\x28\x4b\x50\x98\x4e\xa8\x90\xd0\xfb\xf6\x38\x13\xde\x8e\x76\x07\x1e\x56\x1c\xf1\xaa\x50\xc3\xd7\x80\xea\xb0\xd8\x66\x61\x58\x43\x6d\x7f\x29\x51\x84\x73\xe4\x9f\x53\x1b\x5e\x74\x1f\xce\xeb\x2b\x90\x2c\x5d\xf2\x8e\x24\xd8\x87\xf9\xde\x5d\x4f\x1a\x29\x24\x06\xdd\xa7\x6b\x9f\xe2\x2c\x19\x09\xc2\xb8\xee\x7b\x44\xea\x39\x48\x14\x61\x6a\x90\xbe\x66\x1c\x75\x1f\x16\xb0\x91\x91\x41\x63\x73\x45\x24\xc9\x69\x48\xc9\x34\x58\x11\x31\x7b\xb9\xd0\x34\xeb\xbc\xac\xac\x3b\x8f\xeb\xe5\x92\x07\xbf\xd8\x63\x42\x6e\x99\xa0\xf2\x36\x5c\xdc\x17\x61\x08\xc5\x94\xac\xcc\xc8\x49\xbb\xf5\x6d\x4e\xdd\xea\x84\xc4\x18\xd5\x6e\x69\x15\xb5\x4e\xa1\xd5\x70\xff\xf9\x62\x86\xad\x7f\xb4\x05\xde\xc2\x15\x31\xd8\xee\x74\xc2\x09\x9a\x4f\x2c\xb1\x97\x73\x23\x67\x2f\xe7\x4e\xb6\x38\xe6\x36\x9f\xc9\x4d\xd2\x68\xde\x08\x83\x6a\x4a\x78\xbb\xd6\xca\x53\xf7\x32\x21\x6f\xfb\xa2\x7c\xe3\x17\x96\xf3\xc0\x6c\x06\xdf\xc1\xf9\xd9\xd9\x59\x55\xa9\xce\x82\x56\xcd\xfd\xd8\x5a\xb0\xf8\xd9\x14\xb8\x14\xea\x4f\x46\xff\x3a\x85\xe5\x2e\x5f\xaa\xbc\xda\x6e\xf0\xce\x10\x85\xc4\x72\xb5\x3a\xee\xf3\xb9\x09\xb6\xd7\x4e\x95\xfd\x4d\x89\x5a\xbb\x27\xd8\x05\x74\xd2\x36\x31\xd3\x9d\xf5\x15\x7a\x94\x18\x62\x17\xda\x6c\x3d\xc9\x0d\x0c\x01\xc3\x54\xc9\xb4\xdd\x62\xb4\xd5\x59\x21\x7c\xb9\xfa\xa0\xc7\xc6\xd0\x2e\x78\xac\xab\xb6\x3a\x30\x1c\x0e\xa1\x15\xc5\x18\xdd\x8c\xe4\x5d\xab\xce\x98\x42\x9f\x3f\x6f\xfe\xaa\x0c\xe9\x58\x90\xb6\x3a\xf0\xcd\x10\x5a\xad\x97\xab\x4b\xc9\x87\xcc\xed\xf2\xac\xab\xac\x6a\x3f\x5b\xd5\xfe\x24\x24\xd7\xe4\xae\x5d\x2f\xd1\x9a\xd3\xaf\x99\xf1\x56\x27\x57\xd8\x3f\x38\xb4\xd6\x80\x9e\x29\xbe\x91\xdb\xaf\xa6\x75\xdc\xd6\x9c\xbe\xfb\x5b\xdf\xaf\xb3\x28\x42\x6d\x23\x57\xe9\xab\x6a\x1d\xd4\x90\xcf\x93\x0a\x15\xea\x8c\x1b\x3f\x43\x63\xc2\xb8\x43\x7b\x3d\x93\xfd\xd9\xf5\xfd\xfe\x9d\x34\x6c\x7c\xbf\x06\xa7\x05\xcc\x6c\x6a\xd8\x87\xd6\xaf\x4a\x49\xd5\xda\x5e\x2f\x6a\x57\x42\x1f\x54\x98\xa0\xd6\x64\xb2\x26\x02\x2f\x30\xb8\x49\x69\x61\x43\xf9\xf6\x79\x97\x89\x49\x1f\x5a\x23\x29\x8d\x36\x8a\xa4\xdf\xb7\x36\x72\x55\x03\xf4\x4a\x5f\xb9\x67\xb7\x4b\x95\xe1\x1b\x0b\x66\x26\x7c\xa2\xf1\x58\x78\x7e\xf4\xd3\xfd\x88\x88\xea\xc6\x23\x1c\x19\xd3\xda\x9e\xd5\xd6\x65\x19\xb3\xa5\x70\x0e\x0b\x1b\x6a\xb9\x99\xfe\x27\x00\x00\xff\xff\x94\xa9\x34\xfa\x64\x41\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x52\xc1\x6e\xdc\x54\x14\x3d\xee\xa4\x04\x06\x84\x5a\x16\x48\x48\x2c\x6e\x25\x1a\x41\x91\x1b\x7b\x42\x11\x38\x71\x0a\x34\x2d\x2a\x34\x10\xa5\x03\xfb\xa7\x99\x97\x19\xc3\x8c\x5f\x64\x3f\x77\x88\x14\xa4\x99\x14\x08\x8b\x2a\x62\x41\x25\x36\x50\xf1\x07\x93\x88\xa1\x26\x69\xcc\x0f\xb0\xb8\x6f\xc1\x0e\xb1\xe4\x17\xd8\x21\xf4\xc6\x4e\xa0\x57\xb2\xee\xb9\xcf\xe7\x9c\x7b\x9e\xe5\x3f\x9f\x9b\xb9\x0f\x00\xcf\x00\x78\x11\xc0\x36\x80\xf3\x00\xfe\x40\x59\xe4\x00\x33\x00\x2e\x38\x40\x0d\xc0\x9c\x03\x9c\x03\x70\xc9\x01\x9e\x04\xb0\xe8\x00\x2f\x01\x58\x71\x80\xb3\x00\xa2\xaa\x2b\x07\x98\x05\x90\x55\xfd\xf3\x8a\xff\xa5\x03\x3c\x01\x60\xcf\x01\xba\x0e\x70\xbf\x3a\xff\xe7\x4c\xd9\x67\x6b\xc0\x25\x00\xe7\x6a\xc0\xb3\xd6\xbf\x06\x7c\x02\xe0\xbd\x1a\xf0\x3c\x80\x49\xad\xe4\xfd\x56\x2b\x73\xfc\x5e\xf5\xbf\x6a\xc0\x0b\x00\xfe\xae\x74\xe7\x67\x00\x07\x65\x76\x5b\x56\x73\xb6\xc2\x4f\xa3\xbc\xcb\x6c\x35\xd7\x51\x66\x7a\x0a\xc0\x99\xea\x5b\x9c\xd6\xdb\x99\x56\x58\x11\x5b\xf6\x99\xff\x20\xea\x74\x35\xa5\x83\x48\xb7\xba\x58\x51\x83\xb8\xa7\x44\x1b\xef\x4a\x4d\x6d\x79\x27\x6a\x49\x8a\xe2\x0d\x45\x1b\x22\xea\xc9\x36\x0d\x22\xdd\x25\x99\x24\x2a\xa1\x8b\x29\x6e\xf6\x45\x47\x62\x6a\x80\xb5\x44\xde\x89\xe4\x00\xeb\x72\x23\x91\x69\x17\xb7\x5b\x5d\xd9\xce\x7a\x12\xb7\xb7\x52\x2d\xfb\x58\x97\x9b\x2a\xd1\xee\x6a\xda\x89\xda\xee\x3b\x59\x27\x75\x9b\x2a\xb0\x2b\xde\xfa\x34\xea\x8a\xbe\xba\x9c\x64\xf5\xb5\x0f\x9b\xee\xb5\x44\x0a\x1d\xa9\xd8\x5d\x11\x5a\x06\xd4\xf0\xfc\x37\x5d\x6f\xc1\xf5\x5f\xa7\xc6\x42\x70\xe5\xca\xab\xde\x82\xe7\xd5\x6f\x89\x54\xbb\xcd\x44\xc4\x69\x4f\x68\x95\x04\xf4\xfe\xd4\x83\x56\xb3\x44\xf4\x55\x5b\xd1\xd2\x63\xc6\xcb\xf5\x5b\x22\xee\x64\xa2\x23\xdd\xa6\x14\xfd\x80\x4e\xe7\x80\xd6\xb3\x34\x8d\x44\x5c\x5f\xbd\xb9\x7a\xdd\xfd\x58\x26\x69\xa4\xe2\x80\xfc\xcb\x5e\xfd\x9a\x8a\xb5\x8c\xb5\xdb\xdc\xda\x94\x01\x69\xf9\x99\x9e\xdf\xec\x89\x28\x5e\xa4\x56\x57\x24\xa9\xd4\xe1\x47\xcd\x1b\xee\x1b\xff\xf1\x6c\x9e\x0d\x99\xb8\xd7\xe3\x96\x6a\x47\x71\x27\xa0\xfa\x5a\x2f\x4b\x44\xcf\xbd\xa1\x92\x7e\x1a\x50\xbc\x39\x1d\xd3\x70\x61\x91\x4a\x18\xc6\x17\x7d\x2f\x0c\x7d\x9a\x9b\x23\x0b\xbd\x0b\xa1\xef\xd3\x55\xf2\x28\x98\xce\xcb\x61\xe3\xe4\xd5\x52\xf8\x9a\x85\x2f\x4f\x69\x4b\xbe\x47\xdb\xdb\xa5\x64\x39\x6c\x78\xaf\xd0\x55\xf2\x29\xa0\xc6\x22\xf8\x1b\x3e\x30\x3b\x5c\x80\xbf\xe5\x09\x1f\x9b\x7b\xe0\x07\x3c\x31\x43\x9e\xf0\x21\x1f\x99\x3d\xb3\x6b\x8f\x39\xe7\x09\xf1\x4f\x25\x63\x9e\x8f\xb9\x30\xbb\x96\xfa\x23\x1f\xf2\xd8\xec\xf2\xd8\xec\x94\xca\x82\x8f\xcc\xdd\xff\x6b\x72\x3e\x36\x5f\x70\x61\x86\xfc\x88\xc7\xe6\x2b\xce\x39\x27\x2e\x78\x9f\xcc\x5d\x33\x32\x3b\x66\xc8\x05\xff\x62\x11\x1f\x58\xfa\x43\x1e\x5b\x60\x86\xe6\x6b\xce\xf9\x88\x0b\x33\x32\xf7\x88\x8b\xe9\xb8\xcf\x87\x96\x6d\xff\x25\xfe\x8e\x1f\x5a\x1b\x33\xe4\x31\xff\x7c\xb2\x0e\xfc\xfd\x49\xb2\x07\xd6\xd9\x8c\xf8\x11\x17\x76\x0b\xf8\x07\xde\xb7\xb9\xf9\x80\xf3\xd3\xb0\x64\xe5\x66\xc4\xbf\x72\x6e\x46\x3c\xb6\x26\x66\xcf\xde\x2a\x9f\x26\x9a\xd8\xcc\xf8\x37\x00\x00\xff\xff\xb3\xe4\x31\xc2\x20\x04\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
