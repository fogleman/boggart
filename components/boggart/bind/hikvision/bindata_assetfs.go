// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package hikvision

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\xfd\x6f\xdb\xb6\xd3\xff\xbd\x7f\xc5\x4d\xcb\x33\xdb\x7b\x22\x3b\x49\xf7\xf2\x20\x8d\xf3\xa0\x5d\xd6\xef\x0a\x74\x45\xd1\x97\xfd\x32\x0c\x01\x2d\x9e\x2d\x36\x14\xa9\x92\x94\x13\xaf\xf0\xff\xfe\x05\x49\xc9\x96\x6c\xd9\x96\x5f\x12\xa4\xcd\x80\x55\x26\x79\xc7\xbb\x0f\x8f\xc7\x23\x79\xd2\x97\x2f\x40\x71\xc8\x04\x42\x10\x49\x61\x50\x98\x00\xa6\xd3\x27\x17\x94\x8d\x21\xe2\x44\xeb\x7e\xa0\xe4\x6d\x70\xf9\x04\x00\xa0\x5c\x1a\x49\x1e\x26\x34\x3c\x3d\x03\xfb\xa4\x93\xe2\xe9\x4e\x87\xa7\x67\x79\xfb\x45\x9a\xbb\xeb\x94\x08\xe4\xa5\xda\xe5\x16\x85\x14\xd5\x36\xb3\x76\x4a\x72\xec\x07\x86\x0c\xea\x38\xcd\x5a\x66\xbc\x60\x28\xc8\x18\x04\x19\x87\x86\x0c\x34\x0c\x88\xba\xb6\x0f\xc1\x9c\x0d\x67\xba\xae\xaf\x19\x27\xce\xf2\xb6\xa9\x42\x8d\xc2\x10\xc3\xa4\x08\xbe\x7c\x01\x36\x04\xfc\x0c\x5d\x12\xd9\x02\x08\x2c\x6a\x45\x9f\xb6\x6c\x8c\xb6\x11\x0a\x0a\xd3\xe9\xe5\x05\x81\x58\xe1\xb0\xbf\x82\xee\x13\x19\x13\x1d\x29\x96\x9a\xf3\xb1\x64\xb4\x7d\xd2\x79\x66\x69\xb9\x46\x98\x4e\xbf\x7c\x81\xee\x3b\xfc\x9c\xa1\x36\xdd\x8f\xef\x5e\x77\xdf\x12\x13\xfb\x62\xcf\x3c\xb8\xb4\x4c\x4f\xff\x4f\x40\xf0\x56\xe1\x98\xe1\x6d\x00\x5d\x98\x4e\x2f\x7a\xe4\xf2\xa2\xc7\xd9\x01\x74\x63\x09\x19\xe1\xae\x0a\xce\x88\x77\xd1\xf2\xff\x3d\x97\xbe\x63\x52\xa7\xf2\x2b\xcf\xfd\xc0\x0a\xeb\x89\x36\x98\xec\xaa\xf1\x9c\x7a\x1f\x95\x3d\x97\x3a\x9d\xdf\xe7\xfc\x9b\x29\xed\xe5\xeb\xe2\x18\x85\xd1\xd7\x28\xc8\x80\xa3\x65\xd8\x18\x0c\x21\x0d\x1b\xb2\xc8\x57\xef\x08\xc9\x22\x8f\x7d\x80\x29\xf3\xaa\x83\xe7\x4d\xa5\xaf\x0a\x48\xb3\xe6\xf5\x5e\xa3\x97\xf1\x15\xfe\xa4\xe4\xa1\x0c\x19\x84\xab\x7d\x54\x85\x62\xc1\x57\x95\x39\xd8\x12\x18\x12\x8a\xe0\x61\x04\x26\xd6\x70\x5b\x33\xab\x56\xd2\xe4\x74\x8a\x88\x11\xc2\x11\x3b\x86\xa3\x28\x26\x42\x20\x87\xf3\x3e\x74\xf3\x67\xbd\x89\xc3\xa2\xf6\xb9\xd7\xff\xb9\x70\xfa\x3f\xd7\xfa\xfc\xb5\xdc\x58\x32\x02\xad\x22\x67\x26\x47\xeb\x06\x3a\xf5\xee\xec\x87\x5c\xd6\xfe\xe9\x89\xa5\xc8\x7f\x75\x5f\x5d\xd9\x61\x87\x5b\x46\x4d\xdc\x0f\x4e\x4f\x4e\xfe\x27\x80\x18\xd9\x28\x36\xc5\x2f\x46\x9d\x6d\x7b\x97\xd8\xdb\x2c\xdd\x45\x8f\xb2\x71\x83\x66\xcb\x70\xfc\x5a\xc0\xf1\xeb\xf6\x70\x0c\xa5\x4a\x72\x4b\xb1\x8f\x01\x50\x62\x48\x68\xe4\x68\x64\x8b\xc6\x84\x33\x4a\x8c\x54\x5e\x1d\x37\xec\xa1\x46\x63\x98\x18\xe9\x00\x72\xa4\x36\x42\x99\x9b\x4b\x82\x26\x96\x16\x15\xb9\x76\xd1\x5b\xfc\xf3\xe6\x37\x47\x5e\x45\x99\x79\xc9\xb8\x41\xf5\x61\x92\x62\x13\x13\xaa\xc3\x8e\x44\x91\x54\xd4\x4d\xd2\xb9\x6a\xa5\xc2\xea\x12\x0d\x44\x31\x12\x26\x19\x37\x4c\x23\xc7\xc8\x96\xdb\x6a\x95\xe1\x16\x9a\x2c\xca\xb0\x2e\x88\x58\xcb\x83\x54\x38\x84\x31\x12\xca\xc4\xa8\x24\x74\xad\x52\xa1\xbe\x65\x26\x8a\x17\xc6\x38\x92\x9c\x93\x54\x63\x5e\x9c\x12\x85\xc2\xf4\x83\xef\x97\x10\xf1\xde\x35\x2f\x2f\xa8\x66\x3c\x1d\x40\x78\x97\x12\x41\x91\xe6\xc8\xf8\x42\xeb\xae\x94\xe4\xba\x90\x67\x91\x74\x7b\xfd\x1d\x06\xf1\x4f\x55\x10\x0c\x33\x1c\x4b\x8e\xf8\x8a\x4c\x7a\x6f\xec\x84\x84\x42\xc4\x23\xe7\x8c\xe3\x9f\x76\x00\xbc\x47\x76\x20\xb2\x23\x3d\x1f\x86\x25\xc4\x2a\xd2\x17\xb5\x30\x7b\x60\x65\x23\xcc\x5d\xb8\xc3\x93\x93\x01\x72\x8e\x74\x30\x59\x39\xc2\x3b\x42\xba\x68\x9a\xe1\x40\xd2\xc9\x8e\xcc\x1c\x43\x27\x2a\x0c\xa5\xea\x07\x4c\x85\x51\x66\xc2\xa1\x9b\xb8\xa1\x99\xa4\xdb\x4e\x9c\xc5\xbf\x0d\x03\x0d\x17\x3a\x25\x62\xb6\x89\xc0\xcf\x19\x53\x48\x83\xcb\x1f\x2f\x7a\xb6\x62\x0f\xa5\x7a\x4e\xab\x3d\x18\x78\x0f\xe2\x4d\x63\x19\x95\x42\x64\xeb\x8e\x8b\xb9\x03\x9e\xe4\x2c\x80\x42\x91\xb2\x4a\x7b\xc1\x78\x21\x53\xb7\xa6\x8f\x09\xcf\xb0\x1f\x50\x32\x99\x07\x50\x2b\x7d\xae\x6b\x66\x41\xf6\x72\x59\x71\x8a\xa7\x52\x44\x56\x1e\xa1\x62\xf6\xf9\xde\x0e\x2a\xb2\xb0\x63\xdf\x44\x68\xdf\xb0\xb9\xd8\x6f\x7c\xfb\x7b\x13\x9c\x64\x46\x36\x91\xdb\xb5\x6b\x2e\xf6\x73\xd7\xfc\xde\xa4\xd6\x51\x8c\x34\xe3\xd8\x44\xf2\x59\xdb\xe6\xd2\xbf\x9f\x91\x1c\x46\x83\x8b\x9e\xef\x6d\x47\x97\xd8\x2c\x28\x3b\x00\xd9\x2e\x24\xdf\x85\xe1\x63\x89\x3d\x66\xeb\x16\xdd\x18\x85\x48\x13\xa3\x3a\x6c\x10\x92\xb3\x5c\x88\x41\x86\x84\xeb\x8d\x41\x88\x27\x3d\x6c\x0c\xf2\x9b\x67\xce\x06\x1c\xe1\x3f\x4a\x66\x29\xbc\x32\x98\x68\xf8\xfe\xec\x11\x84\x1f\x39\x56\xeb\xa3\x8f\x1d\x42\x8f\xbd\x80\x3c\x78\xe4\x91\x5e\x5e\x68\xa3\xa4\x18\x55\x06\xc3\x0e\x03\x9c\x39\x1b\xbb\xe8\xe5\xf5\x7b\x78\x96\x74\x77\xe2\xe7\x82\x25\x90\x5a\x50\x4d\xa6\x20\xe2\x2c\x8a\x11\x14\xa6\x0a\x63\x14\x14\x15\x33\xc7\x80\xb6\x0d\xb2\x4c\x27\x92\x42\xcc\x46\x31\x70\x36\xb4\x5b\xf6\x28\xd3\x24\xc9\x34\x18\x54\x6a\x02\x8a\x45\x31\x51\x54\x4b\x01\x84\x82\xfe\x9c\x31\xda\x85\xa7\x70\x2b\xf9\x10\x12\x29\x05\xc8\xe1\x90\x45\x8c\x00\xc9\x0c\x1e\x83\x90\x02\xa2\x2c\xb5\xfb\x3a\x62\x40\xdf\x10\x83\x03\x49\x14\x05\x2a\xb9\x54\x30\x50\x99\x88\xe2\x2e\xbc\x94\x92\x82\x51\x59\x74\x03\x9f\x33\x26\x24\x01\x81\x3a\x62\x99\x30\xc0\xc9\x40\xaa\x6c\x26\x5a\x17\x5e\x38\x9a\x4a\x9f\x06\x93\x54\xaa\xe3\x6f\xcf\xe9\x86\x61\xf3\xf6\x5b\xb2\x5f\x7f\x3e\xb4\xcc\xdc\x46\x88\x07\x39\x57\xd8\xdc\x71\x71\x3c\xb6\xf2\xac\x71\x2d\xff\xea\x11\x7b\xee\x24\x37\x0b\x1e\x9f\xcd\xc3\x82\x17\x44\xb3\x08\x98\xb0\x3a\x57\xce\xd6\xe2\xb3\x2d\xcf\x4c\x38\x12\x35\x64\x77\xc1\x65\x03\x60\xf2\x26\xeb\xdb\xb8\xb3\x80\xd2\xe9\x1a\x47\x70\xff\x0f\xb5\x51\x2c\x45\xea\xdc\x8d\x2f\xa7\x26\x54\xa8\x53\x29\x34\x1b\x23\x08\x79\xab\x48\x1a\x80\x36\x13\xeb\x6b\xdd\x59\xd2\xb9\x3b\x3c\x6a\xa0\x92\xb1\x0b\x6f\x93\x76\xaa\xe1\x49\x90\x89\x17\x8e\x95\x7e\x2a\x9f\xed\x13\x45\x12\x34\x76\xe1\xf0\xb0\x9b\xb8\x31\xdb\x39\x97\xbf\x6c\x04\xb9\x0d\x87\x8b\x5e\x13\xf1\x2d\xaf\x86\x60\xd8\x65\xa5\xa9\xe0\x0d\x81\xf3\x8d\x69\x69\xb7\x83\x63\x16\x21\x08\x92\xcc\x75\x6d\x20\xdc\x02\xaf\xae\xb5\xf5\xae\xe7\xf5\x86\x24\xb8\x15\x9f\x66\xb8\xc1\x41\xd4\xcc\x92\x41\xc9\x2c\x76\x55\xf4\x83\x0d\xd2\x7d\x8c\xe6\x8e\x56\x1f\x97\xae\x7f\x4a\x6a\x63\xa0\x3d\x75\x74\x5c\x1e\x9d\x6e\xef\x51\x31\xc2\x0f\x35\x8e\x9e\xdb\x1b\xc7\xec\xd1\xa9\xfa\x92\xa9\xe4\x96\x28\x84\x31\x2a\x5d\x5a\x43\x76\xd6\xb6\x60\xf8\x97\xe7\x67\x77\xb9\x4b\x75\xef\x90\x23\xd1\x48\xaf\x88\xb9\xaf\x49\xec\x77\xe2\x02\xeb\xa5\x7a\x25\x86\xd2\xdf\xf4\x3e\x30\xbc\x6e\xb9\x3e\x34\xc6\x4e\x9b\x7b\x83\x71\x9b\xf8\x6b\x67\x9c\x7e\x17\x91\xa4\xa8\x0e\x66\x85\x39\xbf\x3a\x23\xcc\xab\x1e\xde\x06\xaf\xb0\x22\xd3\x43\x98\x5f\xde\xe5\xc1\x60\x5d\x50\xa1\x0c\x6b\x5e\xf5\x30\xb0\x6e\x61\x93\x0b\x83\xf0\x42\x4a\xf3\x90\x23\x60\xfb\x3b\x18\xfc\x65\xe1\xcb\xd8\xdb\xf2\x47\x07\xfc\xde\x61\xd4\xab\xab\x03\xc5\x8a\xf7\x16\x3d\x2d\x4d\x70\xdb\xdb\x15\xfa\x3c\x8a\x87\x9b\xe3\x0e\x2d\x3a\xef\xf6\x40\xb0\x95\x15\x79\x0c\x06\x55\x8b\xf6\x6b\xe9\xf3\x4a\x1e\x12\x6a\x2e\xab\xb9\x2c\x7b\xe2\x3c\x53\xe1\x11\x82\xec\x33\x9b\x7e\x93\xc2\x90\xc8\x3c\x08\xc6\xbe\x47\x88\x7c\x97\xfb\x07\xdf\x15\x05\x1e\x03\xc2\x7b\x6c\xb9\x48\x04\x84\x52\x85\x5a\xef\xbf\xf1\x22\xd1\x73\xcf\xea\x61\x7c\xe3\x1f\x44\xd1\xf2\xb6\xe0\x21\x4c\xa9\xe8\xf3\x60\xeb\xef\xa2\x12\x5f\xb7\x39\xe5\xde\xcc\xdf\xb0\x1f\xc4\x93\xe5\xc9\x47\x8f\x6b\x87\xfb\x3e\x4b\x53\xa9\x0c\x0c\x10\xd3\xfd\xdd\x89\x67\xf6\x02\x31\x7d\xb4\x8a\x8e\x19\x45\x09\x5c\x1e\xc0\x4b\xe4\x2c\xff\xb2\x1c\x5f\xcb\x7b\xf1\x15\x17\xbd\x06\x27\x90\x17\x3d\x77\x58\xbc\xe9\xd8\x79\xff\x33\xf5\x8f\x29\xb5\xf1\xf3\x30\xdf\x60\x3f\x9a\x13\xf5\x3c\x67\x38\x4b\x47\x8a\x50\xec\x7e\x74\xff\x32\x31\xda\x36\x5b\x34\x55\x72\xe4\xd7\x8f\xfc\x84\x3d\x21\x6a\xc4\x44\x38\x90\xc6\xc8\xe4\xfc\xa4\x69\x8e\x64\x0d\xcb\x70\x40\x14\x94\x7f\xcc\x0e\xfb\x2b\x85\xd6\xae\xf2\x14\xdb\x60\x96\xee\xec\xeb\x07\xa4\xb8\xb0\x76\x79\x15\x42\xde\xba\x3c\xca\x99\xd6\x6f\x51\x45\x28\x8c\xcb\x32\x9d\x37\x4b\x98\xe8\x07\x27\x95\x12\x72\xe7\x32\x4e\x17\xae\x11\xea\x59\x35\xb9\x59\x98\xa9\xed\xf2\xa7\x72\xa6\x9c\x09\x0c\x7d\x7e\xeb\xf9\xd9\x49\x7a\xe7\xae\x06\xea\x3a\xd8\x26\xbb\xaa\x69\xc6\x6b\xb3\x0b\x2c\x9f\xbd\xbd\x99\x9b\xcb\x78\x2d\xe7\x58\xc5\x52\xb1\x7f\x6d\xcc\xe4\x32\xd5\x12\x7f\xc9\x1d\x72\x1c\x1a\xa0\x4a\xa6\xff\x4a\x31\x1b\x3c\x9f\x22\x5b\xc9\x63\x75\x57\xec\xf3\x29\x54\xa4\xc4\x56\xf3\xe8\x03\x10\x32\xcf\xa5\xc5\xcb\x26\x17\x77\x5b\xdd\xc8\x11\x41\x97\x32\xec\xdb\x2b\xf3\xdf\x3b\x1b\x6f\xeb\xb6\xca\x09\x2e\xf3\xde\x21\x35\xb8\x9a\x9a\x5f\x45\xb6\xd9\x20\x35\xf1\x7a\xa5\x19\xec\xa8\x47\x4a\x66\x69\xd3\xe9\x5f\x4a\x62\xcc\xd4\x3c\x8f\x3e\xbf\xad\xf0\x92\x40\x7e\x67\xf6\xb4\x48\xc5\x7e\xba\x75\x2a\x36\x94\x73\x1a\x3f\xbe\x7b\xed\xdd\x71\xc3\x89\xb4\x45\x4a\x62\x4d\x02\xf9\x2f\x85\xd4\xbf\xec\x24\xf5\x05\x13\x69\x66\x5c\x6c\xd5\x0f\x0c\xde\x99\xda\x1c\xc6\xc0\xdd\x88\xe5\x18\x5a\xcb\x71\x0f\x45\x16\xe3\x56\x77\xf0\x29\x27\x11\xc6\x92\x53\x54\xde\x69\xae\x31\x30\x37\x2f\xfc\x8a\x32\x42\x68\x73\x14\x76\x5e\x44\xa8\xf5\xf5\x0d\x4e\x3a\x70\x02\xd3\xe9\x0f\x37\x38\xe9\x5b\x3e\xf3\x8a\xca\x3b\x4e\x5b\x09\x97\xa7\xc9\x59\x76\x65\xe3\xee\x66\x8a\x3b\x67\xde\xe0\x55\x00\x38\xa8\x73\x84\x43\xce\x80\x7c\x4b\x16\xfa\x7b\xf8\x87\x99\x0c\xc5\xde\xad\xe8\xf3\xab\x99\x17\xa5\x44\xdf\x45\xdc\xfc\x5c\x58\x81\xe6\x3d\xa5\xfe\x2e\x24\x72\xb2\x74\xb6\xbf\x9e\xbf\xe1\x53\x31\xd9\xbc\xfe\xda\x8b\x07\x65\x8a\xc6\xf9\x9c\x2f\x26\xf0\xea\xed\x7c\x27\xbf\x7b\x52\xe7\x82\xf4\xb1\xd4\xc6\x5f\xb1\x37\x14\x7e\x4e\xb0\x8d\xec\x73\xaa\xdd\x24\xdf\x2e\xfd\xf4\x91\x4e\xfa\x39\x08\x0f\x31\xdd\xff\x98\xf5\xf6\xd5\x4c\xf4\xad\x16\xc0\x39\x9a\xd6\x31\xcc\x7e\xed\xb5\x02\x46\x52\x0c\xd9\x08\x02\x4a\x74\xec\xb2\xf9\xba\xb1\x0b\xa1\x0e\xb5\x78\x15\x52\x7e\x03\x2b\x18\x4b\x1f\xc6\x8c\xcb\x5e\xef\xdb\x34\x64\x8b\xa4\x4b\x30\x4e\xf7\x30\xde\x93\xae\xfb\xef\x30\x66\xca\xd2\x6b\x32\x3b\xe8\xfd\xda\x0d\x35\x95\xea\x81\x02\xac\xb7\xae\xa7\x6f\xd3\x48\x3d\x8a\xee\x65\x5c\xf7\x74\x90\x0d\xc7\xb2\xbb\xf5\xcc\x0f\xe5\x6e\xdd\xd1\xe6\xa3\xb0\x60\x2e\xae\xb5\xe4\x8c\x36\x3a\xdc\x5b\x24\xde\xde\xfc\x57\x19\x4b\x42\x43\x39\x1c\x6a\x34\xe1\xd3\x6d\x2c\x65\x90\x19\x23\x45\x6e\x2a\x3a\x1b\x24\x6c\x6e\x2c\x03\x23\x60\x60\x44\xa8\x33\xb7\xe9\x2b\x25\xbb\x3e\x4f\x53\x3e\x29\x4e\x43\x3d\x8b\x87\x1e\x86\x4d\x67\x44\x0d\x0f\xbc\xea\x07\x03\xd2\x8c\xf3\x50\xb9\xb7\xdb\xb6\x1b\x50\x37\xf3\x76\x71\x68\x73\xcc\xb7\xa2\x86\xa5\x41\xf4\x3f\x96\x06\x91\x45\x32\x7f\x10\x43\xe9\x87\x35\x09\x40\x8a\x88\xb3\xe8\x66\xf6\x1e\xfe\x3b\x1c\x2a\xd4\x71\xbb\xb3\xed\xc6\x89\xcd\x40\x24\x1a\x86\x24\xd4\x13\x11\x05\xe0\x0e\xdd\xfd\xf7\x26\x9c\xdd\xe4\xec\xbd\xe5\xd8\x09\xb3\xe6\xbb\x18\x4b\x5d\x6c\x65\x68\x8e\xa2\xf4\xbd\x8b\x26\xdf\x31\xa0\xf2\x56\x70\x49\x68\xff\xb4\x19\x7a\x7b\x42\x54\x74\xb7\x0c\xd3\xd5\xac\x66\x27\x9c\x1a\xbe\x0a\xd5\x78\x91\x6a\x7e\x69\xb1\xb6\x49\xf9\xbb\x12\x0d\x86\xe3\x20\x9f\x8e\xd8\x7c\x4a\xbc\x46\xf2\x15\x55\x35\xc5\x0b\x45\xa5\x9f\xf9\x63\xfe\xcf\x5c\x9c\x27\xa5\xef\x3a\xc5\x68\x87\x3a\x97\x71\xdd\xe7\x6a\x9e\x94\xd4\xd2\x86\x18\x16\xfd\xf1\xe1\xcf\xd7\xd0\xf6\xcf\x1f\xdf\xbd\x86\xa0\x37\x5b\x70\x7b\x44\x6b\x34\xba\x37\x46\x41\xa5\xd2\xbd\xe2\xa4\xfe\x93\xee\x45\x7a\xfe\xb3\x9b\x30\xd1\x8d\x6c\x08\xee\x5e\x06\xec\x94\xe4\xc8\x45\xad\x17\xfa\x93\x5e\x23\xf2\xf2\xd7\x4f\x76\x91\x78\x76\x8e\xde\xfb\x54\xfa\xe1\x04\xfe\x54\x2b\x6f\xb3\xf7\x6f\xf6\x04\xef\xd3\x02\x76\x55\x51\xe6\x36\xe0\xb3\xa5\x72\xa7\x4c\xd2\x94\xe7\xa1\x4b\x6f\xfe\x6d\x9d\x05\x0f\x72\xd4\xa6\x32\xca\x12\x14\xa6\xd3\x55\x48\xe8\xa4\x3d\xcc\x84\xd7\xa3\xdd\x81\x2f\x4b\x86\x78\x55\x88\xe1\x8f\x5c\x74\xb7\xb8\x64\x81\x7e\x4d\x6b\xfb\x97\x12\x45\x38\x47\xfe\x31\xb5\xee\x45\x9f\xc3\x69\xfd\xfb\x67\xb6\x5d\xf2\x86\x24\x78\x0e\xf3\x9b\x9b\xfa\xa6\x91\x42\x62\xd0\x7d\xe6\xe9\x43\x9c\x25\x03\x41\x18\xd7\xe7\x1e\x91\x7a\x0a\x12\x45\x98\x1a\xa4\x2f\x19\x47\x7d\x0e\x15\x6c\x64\x64\xd0\x84\xda\x28\x24\xc9\x71\x97\x92\xf1\x72\xb4\x38\x7d\x56\x29\x9a\x76\x9e\x95\xe6\x9d\xc7\xf5\x72\xc1\x82\x9f\xec\x30\x20\xb7\x4c\x50\x79\xdb\xad\xae\x8b\xd0\x87\x62\x48\x96\x46\xe4\xa8\xdd\xfa\x3e\x6f\xdd\xea\x74\x89\x31\xaa\xdd\xd2\x2a\x6a\x1d\x43\xab\xe1\xfa\x73\x6d\xfa\xad\xff\x6d\x0b\xbc\x85\x2b\x62\xb0\xdd\xe9\x74\x47\x68\x3e\xb0\xc4\x3e\xce\x95\x9c\x3e\x9b\x1b\x59\xb5\xcf\x4d\x36\x93\xab\xa4\xd1\xbc\x12\x06\xd5\x98\xf0\x76\xad\x96\xc7\x2e\x95\x34\x2f\xbb\x56\xbe\xf0\x9a\xe5\x34\x30\x9d\xc2\x8f\x70\x7a\x72\x72\x52\x16\xaa\x53\x91\xaa\xb9\x1d\x5b\x0d\xaa\x1f\xcd\x01\x17\x42\xfd\xcd\xe8\x3f\xc7\xb0\x58\xe5\x4f\x0a\x97\xcb\xed\x1e\x87\x28\x24\x96\xaa\xd5\x71\x1f\x4f\x1a\x61\x7b\xe5\x50\x81\xdb\x58\xa8\x95\x6b\x82\x9d\x40\x47\x6d\x13\x33\xdd\x59\xfd\x7e\x26\x25\x86\xd8\x89\x36\x5d\xdd\xe4\x06\xfa\x80\xdd\x54\xc9\xb4\xdd\x62\xb4\xd5\x59\x6a\xf8\x6c\xf9\x9a\x9f\x0d\xa1\x5d\xd0\x58\x53\x6d\x75\xa0\xdf\xef\x43\x2b\x8a\x31\xba\x19\xc8\xbb\x56\x9d\x32\x85\x3c\x7f\xdf\xfc\x53\xea\xd2\x91\x20\x6d\x75\xe0\xbb\x3e\xb4\x5a\xcf\x96\xa7\x92\x77\x99\x9b\xf9\x59\x53\x59\x96\x7e\xba\x2c\xfd\x51\x97\x7c\x22\x77\xed\x7a\x8e\x56\x9d\xf3\x9a\x11\x6f\x75\x72\x81\xfd\xe5\x66\x6b\x05\xe8\x99\xe2\x6b\xa9\xfd\x6c\x5a\x45\x6d\xd5\x39\x77\xff\xaf\xaf\xcf\x37\x39\xe7\x30\xb7\x55\xb5\x0a\x6a\xc8\xc7\x49\x75\x15\xea\x8c\x1b\x3f\x42\x43\xc2\xb8\x43\x7b\x35\x91\xfd\xb3\xf3\xfb\xad\xfb\x06\xda\x64\x05\x4e\x15\xcc\x6c\x68\x78\x0e\xad\xdf\x95\x92\xaa\xb5\xf9\x6d\x61\x3b\x13\xce\x41\x75\x13\xd4\x9a\x8c\x56\x78\xe0\x0a\x81\x1b\x94\x16\x36\xe4\xaf\xcd\x84\x33\x31\x3a\x87\xd6\x40\x4a\xa3\x8d\x22\xe9\xd3\xd6\x5a\xaa\xb2\x83\x5e\xaa\x9b\xad\xd9\xed\x99\xc8\xf0\x9d\x05\x33\x13\x3e\xd0\xb8\x2f\x3c\xdf\xfb\xe1\xbe\x47\x44\x75\xe3\x1e\x0e\x8c\x69\x6d\xcd\x72\xe9\x22\x8f\xe9\x82\x3b\x87\xca\x82\x3a\x5b\x4c\xff\x1b\x00\x00\xff\xff\x77\x13\xae\x07\x90\x54\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x52\x4d\x6f\x1b\x55\x14\x3d\xe3\x69\x29\x18\x84\xa0\x0b\x24\x24\x16\xb7\x12\x8d\xa0\xd2\x34\x76\x60\x81\xc6\x99\x84\x8f\xb4\xa8\xa2\x46\x55\x6a\xd8\x3f\xd9\xcf\xf6\x80\x3d\xcf\x9a\x8f\x98\x48\x41\xb2\x13\x20\x2c\xa2\x88\x05\x91\xd8\x40\x84\xd8\xb2\x70\x22\x4c\x86\x24\x1e\xfe\x01\xba\x6f\xc1\x0e\x65\x0b\x3f\x03\x3d\xcf\x24\xd0\x2b\x59\xf7\x9c\xf7\xce\xb9\xf7\x3c\x6b\x2e\x6e\x5e\x3b\x00\x80\xe7\x00\xbc\x02\x60\x0b\xc0\x8b\x00\xfe\x42\x5e\x64\x01\xd7\x00\xdc\xb2\x00\x1b\xc0\x82\x05\xbc\x00\xe0\x8e\x05\x3c\x0d\xa0\x66\x01\xaf\x02\x58\xb3\x80\xeb\x00\xfc\xa2\x2b\x0b\xb8\x01\x20\x29\xfa\xe7\x85\xfe\x4b\x0b\x78\x0a\xc0\xbe\x05\xac\x5a\xc0\x41\x71\xfe\x67\x29\xef\x17\x25\xe0\x0e\x80\xbf\x4b\xc0\xf3\x00\x6e\xda\xc0\x27\x66\xbf\x0d\xbc\x04\x60\xcf\xce\x75\x3f\xd9\x79\x8e\x9f\x8b\x3e\xb3\x81\x97\x01\xfc\x61\xe7\xbe\x7f\x6c\xc0\x42\x9e\xdd\x94\xf1\x5c\x2f\xf0\xb3\xc8\xdf\x72\xa3\xe0\x65\xe4\x99\x9e\x01\x50\x2a\xfe\x8b\xab\x7a\x27\x89\x15\xd6\xc4\xa6\xf9\x2d\x7e\xe8\x77\xba\x31\x45\x43\x3f\x6e\x76\xb1\xa6\x86\x41\x4f\x89\x16\xde\x97\x31\xb5\xe4\x86\xdf\x94\xe4\x07\x6d\x45\x6d\xe1\xf7\x64\x8b\x86\x7e\xdc\x25\x19\x86\x2a\xa4\xdb\x11\x1e\xf4\x45\x47\x62\x3e\x00\x8f\x42\xb9\xe1\xcb\x21\xd6\x65\x3b\x94\x51\x17\x8f\x9b\x5d\xd9\x4a\x7a\x12\x8f\x37\xa3\x58\xf6\xb1\x2e\x07\x2a\x8c\x9d\x7a\xd4\xf1\x5b\xce\xbb\x49\x27\x72\x1a\xca\x35\x2b\xde\xfe\xd4\xef\x8a\xbe\xba\x1b\x26\xe5\x87\x22\x8a\x9d\x46\x28\x82\xa8\x27\x62\x15\xba\xf4\xc1\xfc\x8a\xea\x49\x28\xfa\xaa\xa5\x68\xf9\x09\xfd\x4a\xf9\xa1\x08\x3a\x89\xe8\x48\xa7\x21\x45\xdf\xa5\x2b\xee\xd2\x7a\x12\x45\xbe\x08\xca\xf5\x07\xf5\x7b\xce\xc7\x32\x8c\x7c\x15\xb8\x54\xbd\x5b\x29\xbf\xa7\x82\x58\x06\xb1\xd3\xd8\x1c\x48\x97\x62\xf9\x59\xbc\x38\xe8\x09\x3f\xa8\x51\xb3\x2b\xc2\x48\xc6\xde\x47\x8d\xfb\xce\x5b\xff\xe9\x4c\x9e\xb6\x0c\x9d\x7b\x41\x53\xb5\xfc\xa0\xe3\x52\xf9\x51\x2f\x09\x45\xcf\xb9\xaf\xc2\x7e\xe4\x52\x30\x98\xd3\xc8\x7b\xa3\x46\x39\xf4\x82\xdb\xd5\x8a\xe7\x55\x69\x61\x81\x0c\xac\xdc\xf2\xaa\x55\x5a\xa5\x0a\xb9\x73\xbe\xe2\x2d\x5d\x5e\x2d\x7b\x6f\x1a\xf8\xda\x5c\xb6\x5c\xad\xd0\xd6\x56\x6e\x59\xf1\x96\x2a\xaf\xd3\x2a\x55\xc9\xa5\xa5\x1a\xf8\x1b\x3e\xd6\xdb\x9c\x81\xbf\xe5\x29\xcf\xf4\x1e\xf8\x90\xa7\x7a\xc4\x53\x3e\xe5\x33\xbd\xaf\x77\xcd\x31\xa7\x3c\x25\xfe\x25\x57\x2c\xf2\x8c\x33\xbd\x6b\xa4\x3f\xf2\x29\x4f\xf4\x2e\x4f\xf4\x76\xee\xcc\xf8\x4c\xef\xfc\xdf\x93\xf2\x4c\x7f\xc1\x99\x1e\xf1\x39\x4f\xf4\x57\x9c\x72\x4a\x9c\xf1\x11\xe9\x1d\x3d\xd6\xdb\x7a\xc4\x19\xff\x66\x10\x1f\x1b\xf9\x09\x4f\x0c\xd0\x23\xfd\x35\xa7\x7c\xc6\x99\x1e\xeb\x3d\xe2\x6c\x4e\x8f\xf8\xd4\xa8\xcd\x27\xc2\xdf\xf1\x89\x19\xa3\x47\x3c\xe1\x5f\x2f\xd7\x81\xbf\xbf\x4c\x76\x68\x26\xeb\x31\x9f\x73\x66\xb6\x80\x7f\xe0\x23\x93\x9b\x8f\x39\xbd\x0a\x4b\xc6\xae\xc7\xfc\x3b\xa7\x7a\xcc\x13\x33\x44\xef\x9b\x57\xa5\xf3\x44\x53\x93\x19\xff\x06\x00\x00\xff\xff\xe4\x4d\x6a\x9d\xf7\x03\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
