// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package hikvision

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x6d\x6f\xe3\x36\xf2\x7f\xbf\x9f\x62\xaa\xe6\xff\xb7\xdd\x8b\xe4\x24\x6d\xd1\x83\xd7\xce\xa1\xdb\x74\xaf\x0b\x6c\x17\x8b\x7d\xe8\x9b\xa2\x58\xd0\xe2\xd8\x62\x42\x91\x5a\x92\x72\x92\x06\xfe\xee\x07\x92\x92\x2c\x3f\xcb\x0f\x09\x72\xe7\x17\x89\x44\x72\x86\x33\x3f\x0e\x87\x43\x72\xf4\xf0\x00\x14\x47\x4c\x20\x04\xb1\x14\x06\x85\x09\x60\x3a\x7d\xd1\xa7\x6c\x02\x31\x27\x5a\x0f\x02\x25\x6f\x83\xcb\x17\x00\x00\xf5\xd2\x58\xf2\x30\xa5\xe1\xf9\x05\xd8\x27\x9d\x96\x4f\x77\x3a\x3c\xbf\x28\xda\x2f\xd2\xdc\x7d\xc9\x88\x40\x5e\xab\x5d\x6e\x51\x4a\x31\xdf\xa6\x6a\xa7\x24\xc7\x41\x60\xc8\x70\x15\xa7\xaa\x65\xce\x4b\x86\x82\x4c\x40\x90\x49\x68\xc8\x50\xc3\x90\xa8\x2f\xf6\x21\x98\xb1\xe1\x4c\xaf\xea\xab\xe2\xc4\x59\xd1\x36\x53\xa8\x51\x18\x62\x98\x14\xc1\xc3\x03\xb0\x11\xe0\x57\x88\x48\x6c\x0b\x20\xb0\xa8\x95\x7d\xda\xb2\x09\xda\x46\x28\x28\x4c\xa7\x97\x7d\x02\x89\xc2\xd1\x60\x0d\xdd\x35\x99\x10\x1d\x2b\x96\x99\xde\x44\x32\xda\x3e\xeb\xbc\xb4\xb4\x5c\x23\x4c\xa7\x0f\x0f\x10\x7d\xc0\xaf\x39\x6a\x13\x7d\xfe\xf0\x36\x7a\x4f\x4c\xe2\x8b\x3d\xf3\xe0\xd2\x32\x3d\xff\xa7\x80\xe0\xbd\xc2\x09\xc3\xdb\x00\x22\x98\x4e\xfb\x5d\x72\xd9\xef\x72\x76\x04\xdd\x58\x4a\xc6\xb8\xaf\x82\x15\xf1\x3e\x5a\xfe\xcb\x73\x19\x38\x26\xab\x54\x7e\xe3\xb9\x1f\x59\x61\x7d\xaf\x0d\xa6\xfb\x6a\x3c\xa3\x3e\x44\x65\xcf\x65\x95\xce\x1f\x0b\xfe\xdb\x95\xee\x77\x73\xbe\xa6\xa6\x36\xe7\x0c\x19\x86\xeb\x67\xdd\x1c\xc5\xc2\xec\xab\x73\xb0\x25\x30\x22\x14\xc1\x63\x05\x4c\x6c\xe0\xb6\xc1\x4e\xd6\xd2\x14\x74\x8a\x88\x31\xc2\x09\x3b\x85\x93\x38\x21\x42\x20\x87\xde\x00\xa2\xe2\x59\x6f\xe3\xb0\xa8\x7d\xe1\xc7\x7e\x2c\xdd\xd8\x8f\x2b\xbd\xd8\x46\x6e\x2c\x1d\x83\x56\xb1\xb3\x85\x93\x4d\x63\x9a\xf9\x09\xfa\xff\x85\xac\x83\xf3\x33\x4b\x51\xbc\x45\x6f\xae\xec\x38\xc3\x2d\xa3\x26\x19\x04\xe7\x67\x67\xff\x17\x40\x82\x6c\x9c\x98\xf2\x8d\x51\x67\xba\x7e\x92\x77\xb7\x4b\xd7\xef\x52\x36\x69\xd0\x6c\x19\x8e\x9f\x4a\x38\x7e\xda\x1d\x8e\x91\x54\x69\x61\x29\xf6\x31\x00\x4a\x0c\x09\x8d\x1c\x8f\x6d\xd1\x84\x70\x46\x89\x91\xca\xab\xe3\x86\x3d\xd4\x68\x0c\x13\x63\x1d\x40\x81\xd4\x56\x28\x0b\x73\x49\xd1\x24\xd2\xa2\x22\x37\xba\xf1\xc5\x9f\x37\xbf\x19\xf2\xea\x97\xdc\xbc\x66\xdc\xa0\x6a\x62\x3e\xab\x70\x23\x71\x2c\x15\xb5\xee\xa4\xa6\x56\xad\x70\x7e\xc1\x01\xa2\x18\x09\xd3\x9c\x1b\xa6\x91\x63\x6c\xcb\x6d\xb5\xca\x71\x07\x2d\x16\x65\xd8\xb4\x24\x6e\xe4\x41\xe6\x38\x84\x09\x12\xca\xc4\xb8\x26\xf4\x4a\xa5\x42\x7d\xcb\x4c\x9c\x2c\x8c\x6f\x2c\x39\x27\x99\xc6\xa2\x38\x23\x0a\x85\x19\x04\xdf\x2e\x21\xe2\xdd\x67\x51\x5e\x52\x55\x3c\x1d\x40\x78\x97\x11\x41\x91\x16\xc8\xf8\x42\xeb\xaa\x94\xe4\xba\x94\x67\x91\x74\x77\xfd\x1d\x06\xc9\x0f\xf3\x20\x18\x66\x38\xd6\xbc\xee\x15\xb9\xef\xbe\xb3\x93\x11\x4a\x11\x4f\x9c\xff\x4d\x7e\xd8\x03\xf0\x2e\xd9\x83\xc8\x8e\xf4\x6c\x18\x96\x10\x9b\x93\xbe\xac\x85\xea\x81\xd5\x8d\xb0\x70\xdf\x0e\x4f\x4e\x86\xc8\x39\xd2\xe1\xfd\xda\x11\xde\x13\xd2\x45\xd3\x0c\x87\x92\xde\xef\xc9\xcc\x31\x74\xa2\xc2\x48\xaa\x41\xc0\x54\x18\xe7\x26\x1c\xb9\x49\x1b\x9a\xfb\x6c\xd7\x89\xb3\xf8\xdb\x32\xd0\xd0\xd7\x19\x11\x55\x48\x8c\x5f\x73\xa6\x90\x06\x97\xdf\xf5\xbb\xb6\xe2\x00\xa5\xba\x4e\xab\x03\x18\x78\x0f\xe2\x4d\x63\x19\x95\x52\x64\xeb\x8a\xcb\xb9\x03\x9e\xe4\x22\x80\x52\x91\xba\x4a\x07\xc1\xd8\x97\x99\x5b\xcf\x27\x84\xe7\x38\x08\x28\xb9\x9f\x45\x48\xab\xfc\x6d\xf4\xe9\x3e\x43\x70\xed\x2c\xca\x5e\x30\x2b\x4f\xf9\x54\x8b\xb9\xea\x43\x54\x4e\x3f\xdf\xdd\x51\x65\x16\x76\xf0\x1b\x49\xed\x5b\x36\x97\xfb\x9d\x6f\xff\x68\x92\x93\xdc\xc8\x46\x82\xbb\x86\xcd\xe5\xfe\xd9\x35\x7f\x34\xb1\x75\x9c\x20\xcd\x39\x36\x12\xbd\x6a\xdc\x5c\xfc\x8f\x15\xc9\x71\x54\xe8\x77\x7d\x6f\x7b\xba\xc5\x66\x41\xd9\x11\xc8\xf6\x21\xf9\x26\x0c\x9f\x4b\xfc\x51\xad\x5d\x74\x6b\x24\x22\x4d\x82\xea\xb8\x81\x48\xc1\x72\x21\x0e\x19\x11\xae\xb7\x06\x22\x9e\xf4\xb8\x71\xc8\x2f\x9e\x39\x1b\x72\x84\x7f\x2b\x99\x67\xf0\xc6\x60\xaa\xe1\xdb\x8b\x67\x10\x82\x14\x58\x6d\x8e\x40\xf6\x08\x3f\x0e\x02\xf2\xe8\xd1\x47\x76\xd9\xd7\x46\x49\x31\x9e\x1b\x0c\x3b\x0c\x70\xe1\x6c\xac\xdf\x2d\xea\x0f\xf0\x2c\xd9\xfe\xc4\x3f\x0b\x96\x42\x66\x41\x35\xb9\x82\x98\xb3\x38\x41\x50\x98\x29\x4c\x50\x50\x54\xcc\x9c\x02\xda\x36\xc8\x72\x9d\x4a\x0a\x09\x1b\x27\xc0\xd9\xc8\x6e\xd9\xe3\x5c\x93\x34\xd7\x60\x50\xa9\x7b\x50\x2c\x4e\x88\xa2\x5a\x0a\x20\x14\xf4\xd7\x9c\xd1\x08\xbe\x87\x5b\xc9\x47\x90\x4a\x29\x40\x8e\x46\x2c\x66\x04\x48\x6e\xf0\x14\x84\x14\x10\xe7\x99\xdd\xd7\x11\x03\xfa\x86\x18\x1c\x4a\xa2\x28\x50\xc9\xa5\x82\xa1\xca\x45\x9c\x44\xf0\x5a\x4a\x0a\x46\xe5\xf1\x0d\x7c\xcd\x99\x90\x04\x04\xea\x98\xe5\xc2\x00\x27\x43\xa9\xf2\x4a\xb4\x08\x5e\x39\x9a\xb9\x3e\x0d\xa6\x99\x54\xa7\xff\x7b\x4e\x37\x0c\x9b\xb7\xdf\x91\x7d\xb5\x1a\x36\xdb\xba\x77\x6d\x94\x78\x94\x73\x85\xed\x1d\x97\x27\x61\x6b\x4f\xcf\x36\xf2\x9f\x3f\x34\x2e\x9c\xe4\x76\xc1\x93\x8b\x59\x58\xf0\x8a\x68\x16\x03\x13\x56\x67\x7f\x12\x58\x1c\xa9\x25\x17\x3b\x9e\x99\x70\x24\x6a\xc4\xee\x82\xcb\x06\xc0\x14\x4d\x36\xb7\x71\xe7\x01\xb5\xd3\x35\x8e\xe0\xfe\x86\xda\x28\x96\x21\x75\xee\xc6\x97\x53\x13\x2a\xd4\x99\x14\x9a\x4d\x10\x84\xbc\x55\x24\x0b\x40\x9b\x7b\xeb\x6b\xdd\x59\x52\xcf\x1d\x1e\x35\x50\xc9\xd8\x85\xb7\x49\x3b\xd5\xf0\x24\xc8\x24\x0b\xc7\x4a\x3f\xd4\x4f\xab\x89\x22\x29\x1a\xbb\x70\x78\xd8\x4d\xd2\x98\xed\x8c\xcb\x1f\x36\x84\xdc\x85\x43\xbf\xdb\x44\x7c\xcb\xab\x21\x18\x76\x59\x69\x2a\x78\x43\xe0\x7c\x63\x5a\xdb\xf0\xe0\x84\xc5\x08\x82\xa4\x33\x5d\x1b\x08\xb7\xc0\x2b\xb2\xb6\x1e\x79\x5e\xef\x48\x8a\x3b\xf1\x69\x86\x1b\x1c\x45\xcd\x3c\x1d\xd6\xcc\x62\x5f\x45\x3f\xd9\x20\xdd\xc7\x68\xee\x68\xf5\x79\xe9\xfa\xbb\xa4\x36\x06\x3a\x50\x47\xc7\xe5\xd9\xe9\xf6\x11\x15\x23\xfc\x58\xe3\xe8\xb9\xbd\x73\xcc\x9e\x9d\xaa\xaf\x99\x4a\x6f\x89\x42\x98\xa0\xd2\xb5\x35\x64\x6f\x6d\x4b\x86\x7f\x78\x7e\x76\x97\xbb\x54\xf7\x01\x39\x12\x8d\xf4\x8a\x98\xc7\x9a\xc4\x7e\x2b\x2e\x70\xb5\x54\x6f\xc4\x48\xfa\xbb\xcb\x27\x86\xd7\x2d\xd7\xc7\xc6\xd8\x69\xf3\x68\x30\xee\x12\x7f\xed\x8d\xd3\xaf\x22\x96\x14\xd5\xd1\xac\xb0\xe0\xb7\xca\x08\x8b\xaa\xa7\xb7\xc1\x2b\x9c\x93\xe9\x29\xcc\xaf\xe8\xf2\x68\xb0\x2e\xa8\x50\x87\xb5\xa8\x7a\x1a\x58\x77\xb0\xc9\x85\x41\x78\x25\xa5\x79\xca\x11\xb0\xfd\x1d\x0d\xfe\xba\xf0\x75\xec\x6d\xf9\xb3\x03\xfe\xe0\x30\xea\xcd\xd5\x91\x62\xc5\x47\x8b\x9e\x96\x26\xb8\xed\xed\x0a\x7d\xca\xc4\xd3\xcd\x71\x87\x16\x9d\x75\x7b\x24\xd8\xea\x8a\x3c\x07\x83\x5a\x89\xf6\x5b\x19\x93\xa7\x86\x9a\x17\x7d\x1e\x09\xe7\x4a\x85\x67\x08\xb2\xcf\xd5\xf9\x45\x0a\x43\x62\xf3\x24\x18\xfb\x1e\x21\xf6\x5d\x1e\x1e\x7c\xcf\x29\xf0\x1c\x10\x3e\x60\xcb\x45\x62\x20\x94\x2a\xd4\xfa\xf0\x8d\x17\x89\x7f\xf6\xac\x9e\xc6\x37\xfe\x46\x14\xad\x6f\x0b\x9e\xc2\x94\xca\x3e\x8f\xb6\xfe\x2e\x2a\xf1\xdf\x6d\x4e\x85\x37\xf3\xb7\xec\x47\xf1\x64\xee\x86\xf3\xb9\xed\x70\x3f\xe6\x59\x26\x95\x81\x21\x62\x76\xb8\x3b\xf1\xcc\x5e\x21\x66\xcf\x56\xd1\x09\xa3\x28\x81\xcb\x23\x78\x89\x82\xe5\x1f\x96\xe3\x5b\xf9\x28\xbe\xa2\xdf\x6d\x70\x02\xd9\xef\xba\xc3\xe2\x6d\xc7\xce\x87\x9f\xa9\x7f\xce\xa8\x8d\x9f\x47\xc5\x06\xfb\xd9\x9c\xa8\x7b\x6f\x1a\xe5\xd9\x58\x11\x8a\xd1\x67\xf7\x9f\x89\xf1\xae\xd9\xa2\x99\x92\x63\xbf\x7e\x14\x27\xec\x29\x51\x63\x26\xc2\xa1\x34\x46\xa6\xbd\xb3\xa6\x39\x92\x2b\x58\x86\x43\xa2\xa0\xfe\x52\x1d\xf6\xcf\x15\x5a\xbb\x2a\x52\x6c\x83\x2a\x9b\xd9\xd7\x0f\x49\x79\x61\xed\x12\x2b\x84\xbc\x75\x79\x94\x95\xd6\xef\x51\xc5\x28\x8c\xcb\x32\x9d\x35\x4b\x99\x18\x04\x67\x73\x25\xe4\xce\x65\x9c\x2e\x5c\x23\xac\x66\xd5\xe4\x66\xa1\x52\xdb\xe5\x50\x15\x4c\x39\x13\x18\xfa\xfc\xd6\xde\xc5\x59\x76\xe7\xae\x06\x56\x75\xb0\x4b\x86\x55\xd3\x8c\xd7\x66\x17\x58\x3e\x51\x7b\x3b\x37\x97\xf1\x5a\xcf\xb3\x4a\xa4\x62\x7f\xdb\x98\xc9\x65\xab\xa5\xfe\x92\x3b\xe4\x38\x32\x40\x95\xcc\xfe\x96\xa2\x1a\x3c\x9f\x22\x3b\x97\xc7\xea\xae\xd8\x67\x53\xa8\x4c\x89\x9d\xcf\x0c\x0f\x40\xc8\x22\x97\x16\x2f\x9b\x5c\xdc\x35\xbf\x91\xdb\xe1\xea\xcd\x69\x37\x76\xf9\x08\x59\xce\x79\xa8\x5c\x86\xd3\x6e\x93\x9d\x89\x2c\x37\x9e\x49\xd3\xe9\xe3\x13\x01\x0b\xfa\xa1\x11\x3b\x51\x3b\x0e\xc3\xdc\x18\x29\xdc\xe2\x3d\x08\xfc\x4b\x50\x63\x08\x96\x29\x8b\x65\xf1\x60\xe7\x9c\x7d\xd0\x69\x00\x52\xc4\x9c\xc5\x37\x55\x26\xf6\x07\x1c\x29\xd4\x49\xbb\xb3\x6b\xe6\x2e\xab\x40\x24\x1a\x46\x24\xd4\xf7\x22\x0e\xc0\xb9\x5d\xff\x59\x81\xf3\xa8\x05\x7b\xef\x49\xad\x3f\xdc\xf0\x81\xc3\x52\x17\x5d\xaf\xd9\x0e\x14\xb5\xcf\x1a\x9a\x64\xb2\x53\x79\x2b\xb8\x24\x74\x70\xde\x0c\xbd\x03\x21\x2a\xbb\x5b\x86\xe9\xaa\xaa\xd9\x0b\xa7\x86\xc9\x30\x8d\x93\x35\x9b\x2f\x5b\x1b\x9b\xd4\xbf\x2c\x68\x30\x1c\x47\xf9\x78\x60\xbb\x9f\xd8\x20\xf9\x9a\xaa\x15\xc5\x0b\x45\xb5\xd7\xe2\xb1\xf8\x37\x13\xe7\x45\xed\x5b\xb5\x04\xed\x50\x17\x32\x6e\xfa\x04\xe7\x45\x4d\x2d\x6d\x88\x61\xf1\x6f\x9f\x7e\x7f\x0b\x6d\xff\xfc\xf9\xc3\x5b\x08\xba\x94\xe8\xc4\xe5\xab\x74\x89\xd6\x68\x74\x77\x82\x82\x4a\xa5\xbb\xa5\xaf\xbe\xd6\xdd\x58\xcf\x5e\xa3\x94\x89\x28\xb6\x41\x80\x4b\x07\xeb\xd4\xe4\x28\x44\x5d\x2d\xf4\xb5\xde\x20\xf2\xf2\xf7\x2f\xfb\x48\x5c\x7d\x5d\xd1\xbd\xae\xbd\x38\x81\xaf\x57\xca\xdb\x2c\x03\xe3\x40\xf0\xae\x17\xb0\x9b\x17\x65\x66\x03\xfe\xbc\xac\x70\xca\x24\xcb\x38\xf3\x27\x3b\xdd\xd9\x87\x54\x0b\x1e\xe4\xa4\x4d\x65\x9c\xa7\x28\x4c\x27\x52\x48\xe8\x7d\x7b\x94\x0b\xaf\x47\xbb\x03\x0f\x2b\x6d\xf4\xaa\x14\xc5\xe7\x81\xea\xa8\x5c\x6a\x61\xb0\x86\xc2\xfe\x32\xa2\x08\xe7\xc8\x3f\x67\xd6\xcd\xe8\x1e\x9c\xaf\xcf\x44\xb2\x6d\xd3\x77\x24\xc5\x1e\xcc\xd6\xf1\xf5\xcd\x63\x85\xc4\xa0\xfb\x94\xed\x53\x92\xa7\x43\x41\x18\xd7\x3d\x8f\xd0\x7a\x2a\x12\xc7\x98\x19\xa4\xaf\x19\x47\xdd\x83\x39\xbc\x64\x6c\xd0\xd8\xf8\x11\x49\x7a\x1a\x51\x32\x09\x56\xb2\x99\xbe\x5c\x2a\x9e\x76\x5e\xd6\xe6\xa4\xc7\xfc\x72\xc1\xba\xfd\x2c\xdd\x6d\xb0\x6e\x99\xa0\xf2\x36\x9a\x5f\x33\x61\x00\xe5\x70\x2d\x8d\xd6\x49\xbb\xf5\x6d\xd1\xba\xd5\x89\x88\x31\xaa\xdd\xd2\x2a\x6e\x9d\x42\xab\xe1\xda\xf4\xc5\x0c\x5a\xff\x68\x0b\xbc\x85\x2b\x62\xb0\xdd\xe9\x44\x63\x34\x9f\x58\x6a\x1f\x67\x4a\x4e\x5f\xce\x0c\x70\xbe\xcf\x6d\xf6\x54\xa8\xa4\xd1\xbc\x11\x06\xd5\x84\xf0\xf6\x4a\x2d\x4f\xdd\x45\x43\x51\xf6\x45\xf9\xc2\x2f\xac\xa0\x81\xe9\x14\xbe\x83\xf3\xb3\xb3\xb3\xba\x50\x9d\x39\xa9\x9a\xdb\xb8\xd5\x60\xfe\x93\x2a\x70\xe1\xd5\x9f\x8c\xfe\x75\x0a\x8b\x55\x3e\x8d\x79\xb9\xdc\xe0\x9d\x21\x0a\x89\xa5\x6a\x75\xdc\xa7\x75\x63\x6c\xaf\x1d\x2a\xfb\x9b\x10\xb5\xd6\x52\xed\xc4\x3a\x69\x9b\x84\xe9\xce\x7a\x73\xa6\xc4\x10\x3b\x01\xa7\xeb\x9b\xdc\xc0\x00\x30\xca\x94\xcc\xda\x2d\x46\x5b\x9d\xa5\x86\x2f\x97\x37\x81\x6c\x04\xed\x92\xc6\x9a\x6a\xab\x03\x83\xc1\x00\x5a\x71\x82\xf1\xcd\x50\xde\xb5\xd6\x79\x09\x2b\xcf\x9f\x37\x7f\xd5\xba\x74\x24\x48\x5b\x1d\xf8\x66\x00\xad\xd6\x8a\xb9\xe3\xdd\xe9\x76\x7e\xd6\x54\x96\xa5\x9f\x2e\x4b\x7f\x12\x91\x6b\x72\xd7\x5e\xcd\xd1\xaa\xd3\x5b\x31\xe2\xad\x4e\x21\xb0\xdf\x54\xb4\xd6\x80\x9e\x2b\xbe\x91\xda\xcf\xa6\x75\xd4\x56\x9d\x9e\xfb\xbb\xba\x5e\xe7\x71\x8c\xda\x7a\xb1\xca\x56\xd5\x3a\xa8\xa1\x18\x27\x15\x29\xd4\x39\x37\x7e\x84\x46\x84\x71\x87\xf6\x7a\x22\xfb\xb3\xf3\xfb\xfd\x3b\x69\xd8\xe8\x7e\x0d\x4e\x73\x98\xd9\xb0\xb1\x07\xad\x5f\x95\x92\xaa\xb5\x3d\x97\xd4\xce\x84\x1e\xa8\x28\x45\xad\xc9\x78\x83\x37\xae\x08\xdc\xa0\xb4\xb0\x21\x7f\xbb\x17\x66\x62\xdc\x83\xd6\x50\x4a\xa3\x8d\x22\xd9\xf7\xad\x8d\x54\x75\x07\xbd\x54\x57\xad\xe7\xed\x4a\x64\xf8\xc6\x82\x99\x0b\x1f\x84\x3c\x16\x9e\x1f\xfd\x70\x3f\x22\xa2\xba\x71\x0f\x47\xc6\x74\xf5\xca\xb9\x71\xe1\x5c\x7c\x2f\x9f\x67\x0b\x6a\xb5\x98\xfe\x27\x00\x00\xff\xff\x11\x11\x0f\x8a\x80\x41\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x52\xc1\x6e\xdc\x54\x14\x3d\xee\xa4\x04\x06\x84\x5a\x16\x48\x48\x2c\x6e\x25\x1a\x41\x91\x1b\x7b\x42\x11\x38\x71\x0a\x34\x2d\x2a\x34\x10\xa5\x03\xfb\xa7\x99\x97\x19\xc3\x8c\x5f\x64\x3f\x77\x88\x14\xa4\x99\x14\x08\x8b\x2a\x62\x41\x25\x36\x50\xf1\x07\x93\x88\xa1\x26\x69\xcc\x0f\xb0\xb8\x6f\xc1\x0e\xb1\xe4\x17\xd8\x21\xf4\xc6\x4e\xa0\x57\xb2\xee\xb9\xcf\xe7\x9c\x7b\x9e\xe5\x3f\x9f\x9b\xb9\x0f\x00\xcf\x00\x78\x11\xc0\x36\x80\xf3\x00\xfe\x40\x59\xe4\x00\x33\x00\x2e\x38\x40\x0d\xc0\x9c\x03\x9c\x03\x70\xc9\x01\x9e\x04\xb0\xe8\x00\x2f\x01\x58\x71\x80\xb3\x00\xa2\xaa\x2b\x07\x98\x05\x90\x55\xfd\xf3\x8a\xff\xa5\x03\x3c\x01\x60\xcf\x01\xba\x0e\x70\xbf\x3a\xff\xe7\x4c\xd9\x67\x6b\xc0\x25\x00\xe7\x6a\xc0\xb3\xd6\xbf\x06\x7c\x02\xe0\xbd\x1a\xf0\x3c\x80\x49\xad\xe4\xfd\x56\x2b\x73\xfc\x5e\xf5\xbf\x6a\xc0\x0b\x00\xfe\xae\x74\xe7\x67\x00\x07\x65\x76\x5b\x56\x73\xb6\xc2\x4f\xa3\xbc\xcb\x6c\x35\xd7\x51\x66\x7a\x0a\xc0\x99\xea\x5b\x9c\xd6\xdb\x99\x56\x58\x11\x5b\xf6\x99\xff\x20\xea\x74\x35\xa5\x83\x48\xb7\xba\x58\x51\x83\xb8\xa7\x44\x1b\xef\x4a\x4d\x6d\x79\x27\x6a\x49\x8a\xe2\x0d\x45\x1b\x22\xea\xc9\x36\x0d\x22\xdd\x25\x99\x24\x2a\xa1\x8b\x29\x6e\xf6\x45\x47\x62\x6a\x80\xb5\x44\xde\x89\xe4\x00\xeb\x72\x23\x91\x69\x17\xb7\x5b\x5d\xd9\xce\x7a\x12\xb7\xb7\x52\x2d\xfb\x58\x97\x9b\x2a\xd1\xee\x6a\xda\x89\xda\xee\x3b\x59\x27\x75\x9b\x2a\xb0\x2b\xde\xfa\x34\xea\x8a\xbe\xba\x9c\x64\xf5\xb5\x0f\x9b\xee\xb5\x44\x0a\x1d\xa9\xd8\x5d\x11\x5a\x06\xd4\xf0\xfc\x37\x5d\x6f\xc1\xf5\x5f\xa7\xc6\x42\x70\xe5\xca\xab\xde\x82\xe7\xd5\x6f\x89\x54\xbb\xcd\x44\xc4\x69\x4f\x68\x95\x04\xf4\xfe\xd4\x83\x56\xb3\x44\xf4\x55\x5b\xd1\xd2\x63\xc6\xcb\xf5\x5b\x22\xee\x64\xa2\x23\xdd\xa6\x14\xfd\x80\x4e\xe7\x80\xd6\xb3\x34\x8d\x44\x5c\x5f\xbd\xb9\x7a\xdd\xfd\x58\x26\x69\xa4\xe2\x80\xfc\xcb\x5e\xfd\x9a\x8a\xb5\x8c\xb5\xdb\xdc\xda\x94\x01\x69\xf9\x99\x9e\xdf\xec\x89\x28\x5e\xa4\x56\x57\x24\xa9\xd4\xe1\x47\xcd\x1b\xee\x1b\xff\xf1\x6c\x9e\x0d\x99\xb8\xd7\xe3\x96\x6a\x47\x71\x27\xa0\xfa\x5a\x2f\x4b\x44\xcf\xbd\xa1\x92\x7e\x1a\x50\xbc\x39\x1d\xd3\x70\x61\x91\x4a\x18\xc6\x17\x7d\x2f\x0c\x7d\x9a\x9b\x23\x0b\xbd\x0b\xa1\xef\xd3\x55\xf2\x28\x98\xce\xcb\x61\xe3\xe4\xd5\x52\xf8\x9a\x85\x2f\x4f\x69\x4b\xbe\x47\xdb\xdb\xa5\x64\x39\x6c\x78\xaf\xd0\x55\xf2\x29\xa0\xc6\x22\xf8\x1b\x3e\x30\x3b\x5c\x80\xbf\xe5\x09\x1f\x9b\x7b\xe0\x07\x3c\x31\x43\x9e\xf0\x21\x1f\x99\x3d\xb3\x6b\x8f\x39\xe7\x09\xf1\x4f\x25\x63\x9e\x8f\xb9\x30\xbb\x96\xfa\x23\x1f\xf2\xd8\xec\xf2\xd8\xec\x94\xca\x82\x8f\xcc\xdd\xff\x6b\x72\x3e\x36\x5f\x70\x61\x86\xfc\x88\xc7\xe6\x2b\xce\x39\x27\x2e\x78\x9f\xcc\x5d\x33\x32\x3b\x66\xc8\x05\xff\x62\x11\x1f\x58\xfa\x43\x1e\x5b\x60\x86\xe6\x6b\xce\xf9\x88\x0b\x33\x32\xf7\x88\x8b\xe9\xb8\xcf\x87\x96\x6d\xff\x25\xfe\x8e\x1f\x5a\x1b\x33\xe4\x31\xff\x7c\xb2\x0e\xfc\xfd\x49\xb2\x07\xd6\xd9\x8c\xf8\x11\x17\x76\x0b\xf8\x07\xde\xb7\xb9\xf9\x80\xf3\xd3\xb0\x64\xe5\x66\xc4\xbf\x72\x6e\x46\x3c\xb6\x26\x66\xcf\xde\x2a\x9f\x26\x9a\xd8\xcc\xf8\x37\x00\x00\xff\xff\xb3\xe4\x31\xc2\x20\x04\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
