// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x9a\xed\x6e\xdb\x36\x17\xc7\xbf\xe7\x2a\x0e\x84\x14\x8d\xf1\x3c\x96\x64\x27\xdd\x0a\x57\xf6\x30\xb4\x5d\x31\x60\x1d\x82\x2e\x1b\xb0\x7d\x09\x68\x91\x8e\x39\x50\x94\x4a\x52\x76\x0c\x41\xf7\xb4\x6b\xd8\x95\x0d\x94\x64\x99\x76\x1c\x5b\x52\xe4\xb6\x76\x04\x24\x96\xf9\xf2\x3f\xe7\x90\x3f\x1c\x1e\xd9\x4e\x12\xc0\x64\x42\x39\x01\xcb\x0f\xb9\x22\x5c\x59\x90\xa6\x67\x9e\xf4\x05\x8d\x14\xa8\x45\x44\x86\x16\x8a\x22\x46\x7d\xa4\x68\xc8\x9d\xbf\xd1\x0c\xe5\x9d\xd6\xe8\x0c\x00\x60\x12\x73\x5f\xf7\xc0\x0c\xb1\x98\xfc\x14\x8a\x00\xa9\x0b\xde\x81\x24\xeb\xd5\x97\x20\x2a\x16\x1c\x38\x99\xc3\xcf\x5c\x31\xfb\xd7\x38\x18\x13\x51\x8c\xec\xd8\x93\xe5\x94\x37\xd9\x8c\xf4\xcc\x73\x72\x03\xa3\x33\x0f\xd3\x19\xf8\x0c\x49\x39\xb4\x44\x38\x2f\x2c\x9a\xad\x7e\xc8\xba\x01\xee\xf6\xfa\xa0\xef\x64\xb0\xbc\xbb\x97\xdd\x5e\xbf\x18\xbf\x39\xe7\xfe\x36\x42\x9c\x30\xa3\xf7\xe1\x88\xe5\x62\xac\x8f\x29\xc7\x89\x90\x91\xa1\xa5\xd0\x78\x9b\x52\x39\x32\x66\x4b\x41\x8e\x66\xc0\xd1\xac\xab\xd0\x58\xc2\x18\x89\x5b\x7d\x63\xad\x64\x18\x95\xdb\x6c\x95\x4a\x8c\x16\x63\x23\x41\x24\xe1\x2a\xdb\x0b\x2b\x49\x80\x4e\x80\x7c\x06\x1b\xe5\x5b\x60\xe9\xcd\x5b\xda\xd4\x6d\x33\xa2\x07\x11\x8e\x21\x4d\x47\x1e\x82\xa9\x20\x93\xe1\x23\xf3\x56\x3b\x3b\x98\x85\x14\x5f\xb8\x9d\x37\x7a\x2e\x93\x04\xd2\x34\x49\xc0\xfe\x44\x3e\xc7\x44\x2a\xfb\xf7\x4f\xbf\xd8\xd7\x48\x4d\xf3\xe6\x5c\xdc\x1a\x69\xd1\xde\x6b\x0e\xd6\xdb\x58\x08\xc2\x15\x04\x04\xc9\x58\x90\x80\x70\x25\x2d\xb0\x21\x4d\x3d\x07\x8d\x3c\x87\xd1\x16\x02\x45\xc2\x9f\xea\xe8\x1a\xc6\x6b\x4c\x6f\x12\xf6\x0f\xb9\xce\xb0\x90\xd9\xb6\x0a\x3f\x2e\x2d\xec\x0f\xdc\x73\x62\xf6\x48\x8f\xc1\xa4\x42\xe3\xee\xe3\x54\xee\xa2\xd3\x54\xd0\x2d\x30\x41\x98\x40\xbe\x5c\x40\xf9\x0e\x35\x7d\xed\x5c\xbc\x9d\x33\x3d\x0d\x36\x31\xac\x33\x02\xd9\xff\xae\x54\x82\x46\x04\x03\x46\x0a\xe5\xed\x58\x75\x05\x91\x51\xc8\xa5\x76\x8a\x87\x73\x81\x22\x0b\xa4\x5a\xe8\x48\xe6\x14\xab\xe9\xa0\xe7\xba\x2f\xf6\xf8\x9a\x5b\x9d\x12\x84\xab\x8c\x13\xfb\x07\x15\x82\xab\x6d\x7d\x87\x54\xb9\xa7\x6a\xda\x40\xe0\x3d\x27\xe2\x6e\x01\x94\xc3\x07\x1f\xb1\x3a\x52\x9e\x53\xc5\x63\xad\x55\x31\xfe\x71\x88\x17\xfb\xc7\x25\x09\x08\xc4\xef\x08\x9c\xd3\xff\xc3\xb9\x54\x48\xc1\x60\x08\xb6\xbe\x91\xfb\x08\x80\x7a\xeb\x5c\xc1\x6b\xc3\xab\x9c\xca\x73\x3b\x22\x82\x86\x18\xac\x20\xe4\x6a\xca\x16\x7b\xb1\xdc\x26\xa5\xb7\x26\x8b\xcd\xd6\x1b\x6c\x7f\xd4\x52\xf6\x6f\x4a\x50\x7e\x07\xe7\x3a\xc7\x24\x89\xd9\xff\x27\x41\xa2\x8e\x99\x65\x42\xd9\x74\x19\x23\xda\xcc\x61\xc3\x97\x77\x68\x51\x38\xf8\xa5\xa2\xa8\xe9\x6e\xb5\x5a\x02\x87\x7e\xac\x8f\x0a\x7b\x2e\xa8\x22\x17\x18\x29\x72\x13\xe6\xbe\x5f\xbc\x5c\xf7\x3b\xaf\x1c\xc0\xea\xbb\xee\x77\x5d\xb7\xd7\x75\xfb\x37\xbd\x57\x03\xf7\x6a\xe0\xbe\xfa\xcb\xfd\x7e\xe0\xba\x7a\x45\x5f\x76\x3a\xab\x3a\xa2\x4e\x84\x59\x22\xaf\x06\xac\x53\x95\x58\x8d\x76\xa3\x65\x30\x6b\xaa\x72\x11\x8a\x14\x92\xa6\x46\x88\xd5\x7c\xa9\x96\x42\xaa\xaf\x82\xe7\x54\x48\x22\x9e\x93\xa5\xf8\xbd\xa7\x4c\x15\xb6\xbe\xed\x23\x05\xea\xa4\x3b\xd8\x3c\x19\x3e\xae\xea\xa5\xba\x27\xcc\x03\xad\x3f\x34\x37\xb5\xcf\xa9\xaf\x73\xc0\x40\xfd\x55\xc3\xeb\x07\x32\x20\x8e\x41\xd1\x60\x15\x71\xed\x93\xc4\xd6\x09\x47\x4b\xd8\xef\x85\x08\x6b\xa5\xc5\xc2\xa5\x12\x4a\x72\xaf\xba\x58\x9f\x98\x22\x2b\x07\x37\x94\x4b\xfd\xda\x5e\x36\xca\xbd\x75\x6c\x94\x93\x5a\x49\xd8\xab\xb8\x33\x18\x0f\x98\xb5\x97\x57\xbe\x93\x9c\x18\xa6\xdf\x11\xa6\x10\xb8\x75\x97\x2d\x5f\x05\x25\x42\x7e\xb7\x75\x5b\x6b\x8b\xad\xdc\xbb\x53\xed\xb8\x67\xaa\xf6\x5e\xf3\x6b\x16\x0b\xc4\xc0\xfa\xdf\x0b\x0c\x92\xf8\x21\xc7\x96\xf9\x46\x3f\x80\x6d\x58\x3d\x07\x4e\x59\xf9\xb7\xd9\xdb\xd0\xa3\x86\x98\xee\x08\xc8\x8c\xe7\xab\x84\x53\xbd\x1e\x30\x2f\xcf\xc9\xf1\x69\x44\x71\x03\x9b\xf5\xb3\x49\xad\x3a\xa7\x72\x09\xdf\x34\x8d\xdf\x90\x20\x22\x02\xa9\x58\x64\x8f\xa4\xcd\xf3\xb8\x5a\x09\xdd\x52\xde\x7e\x36\xdf\xa6\xff\xe5\x73\x7a\x1b\xc5\xe4\x66\x28\x59\x9a\x5e\xaf\x2a\xcb\xa7\x0a\xeb\xdf\x7f\xde\x5a\x8d\x02\xfc\x76\x31\x0b\x63\xd5\x12\x67\x61\xac\x0e\x0b\x5a\x69\xe0\x04\x48\xd3\xb1\x3c\x37\xd4\xb0\x3e\x84\x5a\x82\x2d\xd3\x3a\x2c\x6e\x86\x89\x13\x00\x2e\x8f\xe6\x39\x20\x77\x1d\xce\x89\x78\x02\x66\x91\x9e\xdf\x3e\x5a\x86\xec\x91\xe2\x94\x47\xb0\x13\xa1\x0f\x3e\x62\xce\xf4\x14\x28\xca\x3f\x5e\x7a\x02\x46\x24\x13\x68\x9f\x23\x53\xf7\x48\x41\x2a\x42\xd8\x4b\xd2\x29\x70\xf4\x16\x45\xc8\xa7\xea\x29\x24\xf9\x85\x44\xfb\x2c\xad\x2b\x1f\x29\x4d\x65\x10\x8f\xf0\x24\xd0\x1c\x2e\xf2\xcd\x08\x3c\x19\x47\xa3\x4b\xcf\xd1\x2f\x56\xe7\x14\xf0\x0a\xb9\x8c\x83\x28\xfb\x7e\xf8\x09\x84\xad\x54\x0e\x00\xd9\xa6\xf8\xb1\x72\x66\xc4\x51\x13\x35\x67\x7a\x12\xb0\x5d\xc7\xd9\xd7\x77\x3c\x8a\x15\xf4\x9e\x52\x61\xc5\x92\xe9\x87\xed\x28\x56\xb7\xbd\x03\x54\x5a\x0f\xe5\x8f\x14\xb9\xf5\x48\x76\x9e\x97\x91\xde\x1b\x79\x0a\x27\xa6\x49\x59\xbf\x25\xca\xfa\x87\xa5\xac\x7f\x32\x94\xf5\x9f\x23\x65\x97\x2d\x51\x76\x79\x58\xca\x2e\x4f\x86\xb2\xcb\xe7\x48\xd9\x55\x4b\x94\x5d\x1d\x96\xb2\xab\x93\xa1\xec\xea\x78\x28\x6b\xf7\x27\x24\xbb\xbd\xf3\x1c\x4c\x67\x8f\xfd\x06\x73\x6b\xd7\x96\xe6\x8d\x26\xe3\x6d\x71\x5b\xbc\x94\xee\xfc\x17\x00\x00\xff\xff\xa8\xa1\xe1\xe8\x63\x2d\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x68\x5c\x55\x14\xfe\x3a\x93\x99\xd4\xb1\x5a\x8d\x7f\xad\x08\xde\x22\x69\xad\xe1\x25\xf3\x93\x6a\x7d\xc9\xa4\xd5\x98\x8a\xda\xd0\x58\xc6\x2e\x95\xcb\xcc\xed\xcc\xd3\x99\xf7\x86\xf7\x53\x0d\x54\xc8\x0f\x21\x34\x11\x15\x54\x14\x11\x15\xc1\x8d\xa0\x4e\x63\x06\xc7\x36\x33\x01\xc1\x85\xe0\xe2\x5c\x70\xe1\x46\x57\x2e\x05\x05\x41\x5c\xca\x7d\xf7\x99\xf4\x25\x94\xdc\xc5\x9c\xf3\x7d\xe7\xdc\xf3\xf3\xdd\x37\xbf\x0d\xf4\xbd\x07\x00\xf7\x03\x78\x00\xc0\x1f\x00\x06\x01\x6c\xec\x43\x78\x66\x12\xc0\xdd\x00\x9e\x4f\x00\xf7\x02\xb8\x98\x00\xfa\x01\xbc\x9e\x00\xf6\x03\x58\x4a\x00\xb7\x02\x78\x33\xca\xfb\x30\x01\xf4\x01\xf8\x3a\x01\xdc\x06\x60\x3d\x01\xa4\x01\x7c\x9f\x00\x6e\x07\xf0\x63\x14\xff\x25\xe2\x7f\x8d\xee\xff\x9e\x00\x52\x00\xfe\x8a\xee\xfd\x13\xd9\xbe\xa4\xb6\x03\x91\x65\x49\xe0\x4e\x00\xc3\x49\x5d\xef\x74\x12\x38\x08\xe0\x5c\x52\xdf\x7f\x29\xca\x13\x11\xef\x25\x75\x9f\xc5\x24\x50\xdb\x07\xac\x24\x81\x02\x80\xbf\xfb\x80\x47\x01\x1c\x4b\x01\x19\x00\x2f\x46\xd6\x4a\x01\x07\x00\xf8\x29\xe0\x21\x00\xf3\x29\xbd\xe7\xe7\x29\xbd\xff\x57\x29\xdd\xf7\x87\x94\xd6\xec\xe7\x28\xfe\x67\x4a\xef\xf1\x6f\x4a\xeb\xd0\x97\x06\xee\x00\x70\x38\x0d\x3c\x08\xe0\x91\xc8\x3e\x1b\xd9\x97\x23\xbb\x92\x06\x8e\x00\xf8\x22\xad\xfb\xfd\x94\x06\x8e\x29\x1d\xa2\xfb\x87\xfa\x75\xbf\xe3\xfd\x7a\xef\x93\xfd\xc0\x80\xaa\xd3\x0f\xa8\x27\x4a\xe9\x67\xc2\x61\x6c\x9f\xfd\x88\x9f\x7b\xa0\x67\x3f\x04\x5d\x23\x09\x5d\x43\xcd\x7b\xd7\x0d\x79\xea\x5d\x0f\x46\xbe\x7a\xa3\xfb\x22\x5f\xed\x79\x20\xf2\x13\xd0\x7a\x2a\xad\xd4\x9e\x6a\xc6\x5b\xa0\x35\x57\x73\x62\xb0\xc2\x3c\x51\x76\xec\xca\xb6\xe7\x61\x68\x9b\x1d\xba\x81\x7e\xc2\x2d\xd7\xac\x4b\x02\x93\xbc\xc9\xcb\x96\x3f\x8b\x49\xc7\xf6\x82\x46\xd3\xb7\x1c\x1b\x93\x81\xeb\x0a\xdb\x67\x0d\xc1\xbd\xc0\x15\x0d\x61\xfb\x1e\x9e\xe2\xbe\x08\x7f\x18\xb7\x2b\xcc\xb7\x1a\x02\x53\xb6\x70\xab\xb3\x91\x61\x96\xcd\x9e\x2e\xf3\x3a\xb6\x7e\x46\x6a\x98\xde\xae\x80\x19\xe7\x55\xe1\x62\x26\xa8\x7b\x82\x59\x76\x33\xf0\x59\x2e\x86\xf2\x31\x54\x88\xa1\x51\x94\x44\xa3\x29\x5c\xee\x07\xae\x60\x15\x51\xf7\x79\x8c\xb1\xec\x18\x74\x02\x1f\x17\x78\x3d\x10\x68\x8c\x7b\x41\x73\xa2\x30\x3e\xa2\x4c\x1c\x8d\xd4\xd0\x54\x2d\x3c\x9c\x17\x4d\xc7\xf5\x8d\x69\xaf\x6a\x55\x8c\x27\x83\xaa\x67\x94\x1c\x93\x55\xc4\xa5\xd3\xaf\x58\x35\xde\x70\x86\xdd\x20\x33\x73\xae\x64\x4c\xba\x82\x2b\x81\x0c\x25\x83\xc9\xf2\xd9\xdc\xe3\x46\xb6\x60\xe4\x1f\x63\xf9\x82\x79\xe2\xc4\x50\xb6\x90\xcd\x66\xce\x72\xcf\x37\x4a\x2e\xb7\xbd\x3a\xf7\x1d\xd7\x64\xcf\x85\x35\xd8\x74\xe0\xf2\x86\x53\x71\xd8\x78\xac\xf0\x44\xe6\x2c\xb7\xab\x01\xaf\x0a\xa3\x24\x78\xc3\x64\x5b\xd8\x64\xe7\x03\xcf\xb3\xb8\x9d\x99\x7e\x66\x7a\xca\xb8\x20\x5c\xcf\x72\x6c\x93\xe5\x86\xb3\x99\x49\xc7\xf6\x85\xed\x1b\xa5\xd9\xa6\x30\x99\x2f\x5e\xf3\x47\x9a\x75\x6e\xd9\x63\xac\x5c\xe3\xae\x27\xfc\xe2\x0b\xa5\x33\xc6\xc9\xed\x3c\x35\xcf\x45\xe1\x1a\x53\x76\xd9\xa9\x58\x76\xd5\x64\x99\x99\x7a\xe0\xf2\xba\x71\xc6\x71\x1b\x9e\xc9\xec\x66\x08\xbd\x62\x61\x8c\x69\xb7\x68\x0f\xe6\xb2\xc5\x62\x8e\x1d\x3d\xca\x94\x9b\x3d\x52\xcc\xe5\xd8\x29\x96\x65\x66\x88\x27\x8a\xf9\xff\x43\xe3\xc5\x51\xe5\x3e\x1c\xa6\x8d\xe7\xb2\xec\xf2\x65\x7d\x65\xa2\x98\xcf\x1e\x67\xa7\x58\x8e\x99\x2c\x3f\xa6\xbe\x4b\x39\x4f\x6d\xba\x26\x17\xa9\x4b\xeb\xd4\xda\xc9\xc8\xd5\x9d\x4c\xf8\xd5\xee\xb8\xb4\x93\x92\xab\xbb\x28\xd0\xdb\x72\x4e\x2e\x51\x87\xd6\x40\x1f\xd3\x55\xb9\x42\x6d\xda\x00\x7d\x4a\x2d\x39\x2f\x97\xa8\xa7\x52\x3e\xd3\xf9\xf2\x0a\x75\xa8\xcd\x68\x93\x7a\x74\x8d\x5a\xf4\x2d\xb5\xe4\x02\xb5\xe9\x3a\x75\x40\xef\x86\xa0\xb5\xe5\x30\xea\x30\x5a\x93\x73\xaa\x9c\x7c\x0b\xf4\x25\x75\xa9\x2d\xe7\xe8\x1b\xea\xec\x82\x8c\xd6\x18\xbd\x13\xd6\xbc\x8e\x5d\xce\x88\x5c\x06\x7d\xb2\xb3\xa7\x7c\x03\xf4\x11\xf5\xe4\x15\xea\x52\x4f\xce\xcb\x05\x45\x7c\x40\x1b\xb4\x29\x17\x55\x54\xce\x53\x57\xae\xd2\x77\x6a\x88\x70\x0d\x96\xdb\x23\x9e\xdf\x23\x5e\xd8\x23\x3e\xaa\xa6\x6c\x87\x1b\x6f\x52\x8b\xd6\x59\x38\xe8\x06\x6d\x86\x64\x4b\x2e\xc8\x45\x2d\x65\x8c\x52\x56\x4b\xba\x4e\x2d\xb9\xac\xa4\xbc\x49\x4e\x8f\xae\x6a\x82\xba\xd4\x52\x1a\xbe\x1f\x3a\xcb\xd4\xa6\xae\x7a\x18\xd0\x46\xec\x4f\x1c\x87\xa1\x8a\x9d\xd8\xfc\x3d\x5a\xc3\x7f\x01\x00\x00\xff\xff\xab\x3e\xa5\xca\x5d\x07\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
