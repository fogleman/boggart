// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x9a\x6f\x6f\xe2\xc6\x13\xc7\x9f\xe7\x55\x8c\xac\xdf\xe9\x82\x7e\xc2\x36\x24\xd7\x9e\x72\x0e\x4f\x72\xd7\xaa\x52\x5b\x45\xd7\xb4\x0f\xfa\x24\x5a\xbc\x43\xd8\x6a\xbd\xf6\xed\x1f\x48\x84\xfc\x9e\xfa\x1a\xfa\xca\xaa\xb5\x8d\xed\x70\x40\x0c\x98\xb6\x38\x48\x77\x98\xdd\xd9\xef\xec\xcc\x7c\x98\x35\x91\x17\x0b\xa0\x38\x61\x02\xc1\x09\x63\xa1\x51\x68\x07\xd2\xf4\x2c\x50\xa1\x64\x89\x06\xfd\x94\xe0\xb5\x43\x92\x84\xb3\x90\x68\x16\x0b\xef\x0f\x32\x23\xf9\xa4\x33\x3a\x03\x00\x98\x18\x11\xda\x19\x98\x11\x6e\xf0\xbb\x58\x46\x44\x9f\x8b\x1e\x2c\xb2\x59\xfb\x92\xa8\x8d\x14\x20\x70\x0e\x3f\x08\xcd\xdd\x9f\x4d\x34\x46\x59\x58\xf6\xdc\xc9\x72\xc9\x87\x6c\x45\x7a\x16\x78\xb9\x83\xd1\x59\x40\xd9\x0c\x42\x4e\x94\xba\x76\x64\x3c\x2f\x3c\xd6\x47\xc3\x98\xf7\x23\xda\x1f\x0c\xc1\x5e\xa9\x68\x79\xf5\xa8\xfa\x83\x61\x61\xbf\xba\xe6\xf1\x3e\x21\x02\x79\x6d\xf6\x6b\x8b\x65\x32\x9e\xdb\x94\x76\x32\xe6\x78\xed\x68\x32\x5e\xa7\x54\x5a\x1a\xbe\x14\x14\x64\x06\x82\xcc\xfa\x9a\x8c\x15\x8c\x89\xbc\xb7\x17\x4e\x25\xc3\x99\x5a\xe7\xab\x54\xe2\xac\xb0\x4d\x24\x2a\x14\x3a\xab\x85\xb3\x58\x00\x9b\x00\x7e\x01\x97\xe4\x25\x70\x6c\xf1\x96\x3e\xed\xd8\x0c\xad\x11\x0a\x0a\x69\x3a\x0a\x08\x4c\x25\x4e\xae\x37\xac\xab\x2a\x7b\x35\x8b\x19\x3d\xf7\x7b\x1f\xec\x5a\xae\x10\xd2\x74\xb1\x00\xf7\x33\x7e\x31\xa8\xb4\xfb\xeb\xe7\x1f\xdd\x5b\xa2\xa7\xf9\x70\x2e\xee\x8c\xac\xe8\xe0\xbd\x00\xe7\xc6\x48\x89\x42\x43\x84\x44\x19\x89\x11\x0a\xad\x1c\x70\x21\x4d\x03\x8f\x8c\x02\x8f\xb3\x0d\xe9\xf2\x0c\xdf\x30\x53\x2b\x8d\x26\xe3\xfe\xe6\xe2\x6c\x2b\x52\x5d\xc1\x8e\xc0\x84\x50\x84\x3c\x4b\xc0\xc4\x16\xb5\x4c\xd1\x56\x09\x6b\x1a\x1c\x21\xfb\xbf\xaf\xb4\x64\x09\x52\xa0\x44\x93\x7c\x9c\xea\xbe\x44\x95\xc4\x42\x59\x69\x11\xcf\x25\x49\x1c\x50\xfa\xc9\xee\x67\xce\xa8\x9e\x5e\x0d\x7c\xff\xcd\x0b\x1e\x73\xaf\x53\x24\xf4\x65\xbb\xdc\x56\x36\x33\x2c\x84\xab\x8a\xfd\x54\x55\x6a\x59\x28\x3d\xdd\x53\xeb\x37\xdb\x05\x76\x55\x09\xbc\x26\x7b\xb7\x7a\x8d\xb2\x11\xe8\x71\x4c\x9f\x8e\x92\x35\x5a\x45\xfa\x91\x68\x04\x22\x28\x68\x16\x55\x11\x37\x2c\x96\x7d\xe5\x5f\x43\x97\x12\x8d\x56\xc2\xfd\x24\x65\x2c\x6d\xf7\x6d\x2a\x50\x6c\xa9\x84\x12\x1f\x75\x9f\x12\xf1\x80\x32\xfb\x3a\xae\x28\x97\xfa\x3b\xef\xb2\xe8\x01\xbb\xee\xab\xb9\x8f\x72\x51\xa3\x63\x87\xc6\xa1\xb1\xac\xba\x73\xc9\x34\x9e\xdb\x28\xef\xe2\x5f\xb4\x64\xe2\xe1\xfc\xed\xb3\xb8\x33\x18\xdd\xfc\xa4\x01\x67\xe8\xfb\xdf\xf4\xfd\x41\xdf\x1f\xde\x0d\xde\x5d\xf9\x97\x57\xfe\xbb\xdf\xfd\x6f\xaf\x7c\xdf\x76\xbf\xb7\xbd\x5e\x75\xee\xec\xba\xef\xbc\x92\x02\x6b\xae\x3f\x22\xd7\x04\xfc\x5d\xd3\x96\x67\x41\xcb\x58\x3c\xac\x2d\xeb\xce\x62\xd5\xf6\x1e\x74\x3b\xdb\xab\xab\x0e\xde\x8b\x5b\x6e\x24\xe1\xe0\xfc\xff\x0d\x05\x85\x61\x2c\xa8\x53\xff\x60\x5b\xff\x8a\xd7\xff\x81\x60\xbc\xfc\xb7\x3a\xbb\xe7\x8e\xf6\xc4\x74\x4b\x40\xf5\x78\xfe\x95\x70\xb2\x83\x75\x77\x7a\xbc\x1c\x9f\xbd\x28\xde\xc3\xe7\xee\xdd\xa4\xb9\x8f\x66\xe7\x02\x1c\xd4\xc6\xef\x30\x4a\x50\x12\x6d\x64\x76\x17\xb0\x7f\x1f\xd7\x95\xd0\x3d\x13\xed\x77\xf3\x75\xfa\xff\x7c\x4f\xdf\xab\x45\xd7\x7f\x1a\xac\x09\x25\x6b\xd3\x90\xa6\xb5\x16\x0c\x65\x7d\xfe\xfa\xf3\xc6\xd9\x2b\xc0\xff\x2e\x66\xb1\xd1\x2d\x71\x16\x1b\x7d\x5c\xd0\x4a\x07\x1d\x20\xcd\xc6\xf2\xda\x50\xa3\xf6\x10\x6a\x09\xb6\x4c\xeb\xb8\xb8\xd5\x5c\x74\x00\xb8\x3c\x9a\xd7\x80\xdc\x6d\x3c\x47\x79\x00\x66\x89\x5d\xdf\x3e\x5a\x35\xd9\x13\xc5\x29\x8f\x60\x2b\x42\xdf\x87\x84\x7b\xd3\x2e\x50\xf4\x49\xa0\x7c\x78\x3a\x00\x23\xcc\x04\xda\xe7\xa8\xae\x7b\xa2\x20\x15\x21\xbc\x48\x52\x17\x38\xba\x21\x09\x09\x99\x3e\x84\xa4\xb0\x90\x68\x9f\xa5\xe7\xca\x27\x4a\x53\x19\xc4\x06\x9e\x24\x99\xc3\x79\x5e\x8c\x28\x50\x26\x19\x5d\x04\x9e\x7d\x73\x7a\x5d\xc0\x2b\x16\xca\x44\x49\xf6\x27\xf8\x03\x08\xab\x54\x8e\x00\xd9\xaa\xf8\xa9\x72\x56\x8b\x63\x47\xd4\xbc\x69\x27\x60\xbb\x35\x36\xff\x4c\x24\x46\xc3\xe0\x90\x3b\x2c\xa3\xb8\xfd\xb1\x9d\x18\x7d\x3f\x38\xc2\x9d\xd6\xd7\xf2\x27\x8a\xdc\xf3\x48\xb6\x9e\x97\x89\xad\x8d\xea\xc2\x89\x59\xa7\x6c\xd8\x12\x65\xc3\xe3\x52\x36\xec\x0c\x65\xc3\xd7\x48\xd9\x45\x4b\x94\x5d\x1c\x97\xb2\x8b\xce\x50\x76\xf1\x1a\x29\xbb\x6c\x89\xb2\xcb\xe3\x52\x76\xd9\x19\xca\x2e\x4f\x87\xb2\xc0\x6b\xf0\x98\x40\xe0\x65\x8f\x74\x6c\x79\xd2\xc4\xa3\x6c\xb6\xe9\x81\x96\xb5\x53\x6b\x86\x57\x86\x6a\x1f\x8b\xcb\xe2\xad\x4c\xc3\xdf\x01\x00\x00\xff\xff\x01\xc2\x22\xaa\xb7\x25\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4b\x6f\x1b\x55\x14\xfe\x3a\xf1\x98\xd6\x14\x0a\xe1\xb5\x41\xf4\x56\xa8\x01\x14\x4d\x33\xb6\x93\x42\x27\x71\x8a\x08\x29\x02\x6a\x11\x55\xa6\x2b\x10\xba\x8a\x2f\xce\x08\xcf\x8c\x99\x07\x10\xa9\x8b\x3c\x54\xa2\x92\x4a\x95\x78\x95\x05\x82\x0a\x89\x25\xc8\x2d\xb1\x1a\xda\xd8\x59\xb0\x63\x75\xae\x84\xc4\x06\xf1\x07\xf8\x01\x48\xb0\x41\x77\xee\xd0\x74\x8c\x50\xee\x22\xe7\x7c\xdf\x79\x7f\x19\xff\x3e\x5a\xf8\x0c\x00\x1e\x03\xf0\x38\x80\x5f\x00\x1c\x05\x70\xf9\x00\xd2\x77\xd0\x00\x1e\x06\x70\xc8\x00\x1e\x05\xf0\x84\x01\x1c\x04\x30\x65\x00\xf7\x02\x98\xcd\xe2\xaf\x18\xc0\x7d\x00\xde\x32\x80\x22\x00\xcf\x00\x0a\x00\xe2\x0c\x2f\x67\xf9\x2b\x06\x60\xaa\xfe\x59\xfe\xc7\x99\xbd\x96\xd9\xef\x33\xbb\x63\x00\x0f\x02\xf8\xd9\x00\xee\x07\xf0\x9b\x01\x1c\x01\xf0\x47\x56\xff\x77\x96\x77\x60\x44\xf3\x47\x46\xf4\x9c\xa3\x23\xc0\xd2\x01\x60\x6c\x04\xa8\x02\xb8\x52\x00\x4e\x02\xf8\xa9\x00\x94\x00\xfc\x55\x00\x0e\x03\x30\x4d\xe0\x49\x00\xa3\xa6\xbe\xeb\xa4\xa9\xe7\xd4\x4d\x7d\xdf\x1b\xa6\xde\x57\x98\xfa\xbe\x77\x4d\xe0\x01\x00\x1f\x9a\x5a\x9f\xab\x99\xbd\x99\xd9\x5f\x33\xfb\xa7\x09\x1c\x53\x7a\x16\x75\xff\x53\x45\xe0\x29\x00\x6f\x16\x75\xfd\xc5\xa2\x9e\xf3\x79\x51\xdf\xf7\x6d\x11\x18\x55\x7d\x8a\x80\x92\x5c\xc5\xd4\x1d\xea\x26\x35\x7f\x04\x80\x01\x5d\x7b\x08\xc0\x23\xd8\x7b\x6a\xef\x42\xf6\xbf\x53\x3d\x54\xbf\x7b\xa0\xf7\x35\xb3\x1c\x75\xf3\x43\xc8\x3f\x75\xdf\xe1\xbb\xb0\xd2\x11\xc7\x9b\x2c\x12\x8b\x81\xdf\xdc\xf3\x22\x8c\xef\xb1\xe3\x77\xd1\x73\xbc\xc3\x17\xdd\x78\x19\x73\x81\x1f\x25\x5e\x27\x76\x03\x1f\x73\x49\x18\x0a\x3f\x66\x9e\xe0\x51\x12\x0a\x4f\xf8\x71\x84\x17\x79\x2c\x18\xf7\x9b\x2c\x76\x3d\x81\x79\x5f\x84\xad\x65\xbc\xb4\xc8\xdb\xe9\x9f\x89\x25\xd4\xf7\xb2\xb1\x10\xbc\x2f\x42\x2c\x24\xed\x48\x30\xd7\xef\x24\x31\x2b\xe7\x50\x25\x87\xaa\x39\x34\x89\x86\xf0\x3a\x22\xe4\x71\x12\x0a\xd6\x14\xed\x98\xe7\x18\xd7\xcf\xc1\x20\x89\x71\x9e\xb7\x13\x01\x6f\x26\x4a\x3a\xb3\xd5\x99\x09\x65\xf2\x68\x62\x09\x1d\x35\x22\xc2\x39\xd1\x09\xc2\xd8\xaa\x47\x2d\xb7\x69\xbd\x90\xb4\x22\xab\x11\x38\xac\x29\xde\x7b\xfe\x1d\x77\x89\x7b\xc1\x89\x30\x29\x2d\xbc\xd6\xb0\xe6\x42\xc1\x95\x18\x96\xba\xdb\x61\x15\xbb\x7c\xca\xb2\xab\x56\xe5\x59\x56\xa9\x3a\x53\x53\xe3\x76\xd5\xb6\x4b\x67\x79\x14\x5b\x8d\x90\xfb\x51\x9b\xc7\x41\xe8\xb0\x57\xd3\x1e\xac\x9e\x84\xdc\x0b\x9a\x01\x9b\xc9\x35\x9e\x2d\x9d\xe5\x7e\x2b\xe1\x2d\x61\x35\x04\xf7\x1c\x76\x07\x3b\xec\x5c\x12\x45\x2e\xf7\x4b\xf5\x97\xeb\xf3\xd6\x79\x11\x46\x6e\xe0\x3b\xac\x7c\xc2\x2e\xcd\x05\x7e\x2c\xfc\xd8\x6a\x2c\x77\x84\xc3\x62\xf1\x41\x3c\xd1\x69\x73\xd7\x9f\x66\x8b\x4b\x3c\x8c\x44\x5c\x7b\xbd\x71\xc6\x7a\x6e\x2f\x4f\xed\xf3\xb6\x08\xad\x79\x7f\x31\x68\xba\x7e\xcb\x61\xa5\x85\x76\x12\xf2\xb6\x75\x26\x08\xbd\xc8\x61\x7e\x27\x85\x51\xad\x3a\xcd\xb4\x5b\xf3\x8f\x97\xed\x5a\xad\xcc\xc6\xc6\x98\x72\xed\x63\xb5\x72\x99\x9d\x66\x36\x73\x52\x3c\x5b\xab\xfc\x1b\x9a\xa9\x4d\x2a\xf7\xe9\x34\x6d\xa6\x6c\xb3\x0b\x17\x74\xc9\x6c\xad\x62\x3f\xc3\x4e\xb3\x32\x73\x58\x65\x5a\x7d\x7b\x72\x95\x7a\x74\x4b\xae\x53\x9f\xb6\xa8\x3b\xcc\xc8\xcd\x61\x26\xfd\x32\x87\x8a\x86\x29\xb9\xf9\x1f\x0a\xf4\x15\x5d\x97\x1f\x51\x8f\x76\x40\xd7\xa8\x2b\x57\xe5\x45\x1a\x28\xfe\x1b\x9d\x24\x2f\xd1\x36\xf5\x18\xed\xd2\x80\x6e\x51\x97\x6e\x52\x57\xae\x51\x8f\x6e\xd3\x36\xe8\xd3\x14\x74\x19\x6d\x33\xba\x21\x57\x54\x17\x79\x05\xf4\x1d\xf5\xa9\x27\x57\xe8\x07\xda\x56\xf0\x93\xb4\xf0\xf6\x1d\x67\x42\x6e\x80\xbe\x1e\xee\x27\x2f\x83\xbe\xa4\x81\xbc\x44\x7d\x1a\xc8\x55\xb9\xa6\x88\x2f\x68\x87\x76\xe5\xba\x8a\xca\x55\xea\xcb\x4d\xfa\x51\x4d\x4a\x57\x64\xe5\x7d\xe2\x95\x7d\xe2\xd5\x7d\xe2\x93\x6a\xcb\x5e\x7a\xd6\x2e\x75\x69\x8b\xa5\x8b\xee\xd0\x6e\x4a\x76\xe5\x9a\x5c\xd7\x32\xe5\x28\x65\xb5\x5c\x5b\xd4\x95\x1b\x4a\xa6\xff\xc9\x19\xd0\x75\x4d\x50\x9f\xba\x4a\xa8\xab\xa9\xb3\x41\x3d\xea\x2b\xd1\x41\x3b\xb9\x5f\x65\x1e\xa6\x2a\x6e\xe7\xf6\x1f\xd0\x0d\xfc\x13\x00\x00\xff\xff\xde\x7e\x77\x9a\xca\x06\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
