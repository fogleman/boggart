// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7d\x6f\xa3\x38\xfe\xff\xbf\xaf\xc2\xe2\xd7\xfd\x25\xd1\x4d\x20\x4f\xbb\xb7\xca\x24\x3d\xdd\xb6\x7b\x3b\x23\x4d\x6f\xab\xd9\xee\x4a\xdd\xd1\xa8\x72\xb0\xd3\x30\x07\x36\x63\x9b\x74\x7a\x55\xde\xd3\xbd\x86\x7b\x65\x27\x63\x20\x4e\x42\x52\x20\x30\xa5\x99\x20\xcd\x94\x80\xfd\x7d\xfc\xf8\xeb\x0f\x09\x86\xc7\x47\x80\xf0\xd4\x21\x18\x18\x36\x25\x02\x13\x61\x80\xc5\xe2\x64\xc4\x6d\xe6\xf8\x02\x88\x07\x1f\x8f\x0d\xe8\xfb\xae\x63\x43\xe1\x50\x62\x7d\x82\x73\xa8\x4e\x1a\x67\x27\x00\x00\x30\x0d\x88\x2d\xcf\x80\x39\x74\x03\xfc\x0f\xca\x3c\x28\x9a\xa4\x05\x1e\xc3\xb3\x72\x63\x58\x04\x8c\x00\x82\xef\xc1\x5b\x22\x5c\xf3\x9f\x81\x37\xc1\x2c\x6a\xd9\x32\xa7\x71\x97\xd7\x61\x8f\xc5\xc9\xc8\x52\x0a\xce\x4e\x46\xc8\x99\x03\xdb\x85\x9c\x8f\x0d\x46\xef\x23\x8d\xfa\x51\x9b\xba\x6d\x0f\xb5\xbb\x3d\x20\xf7\xb8\x17\xef\x7d\xe1\xed\x6e\x2f\x6a\xbf\xde\xe7\xcb\xad\x0f\x09\x76\xb5\xb3\x9b\x2d\xe2\x60\xac\xb6\x49\xda\x31\xea\xe2\xb1\x21\xe0\x24\x4d\x52\xd2\x32\x70\x63\x81\x04\xce\x01\x81\xf3\xb6\x80\x13\x0e\x26\x90\xdd\xca\x1d\x63\x29\xc6\x75\x78\x9a\xae\x44\x92\xeb\x44\x6d\x7d\x86\x39\x26\x22\xcc\x85\xf1\xf8\x08\x9c\x29\xc0\x9f\x81\x09\x55\x0a\x0c\x99\xbc\x58\xa7\x3c\x36\xc7\xb2\x11\x26\x08\x2c\x16\x67\x23\x08\x66\x0c\x4f\xc7\x5b\xfa\x2d\x33\x3b\x9c\x53\x07\x35\x3b\xad\xd7\xb2\xaf\xcb\x31\x58\x2c\x1e\x1f\x81\xf9\x1e\x7f\x0e\x30\x17\xe6\xef\xef\xdf\x99\x57\x50\xcc\xd4\x61\x25\xdc\x38\x93\x42\xbb\x3f\x12\x60\x9c\x07\x8c\x61\x22\x80\x87\x21\x0f\x18\xf6\x30\x11\xdc\x00\x26\x58\x2c\x46\x16\x3c\x1b\x59\xae\x53\x82\xa3\x90\xd9\x33\xe9\x5d\x41\x7f\xb5\xee\x45\xdc\xfe\x9b\x92\x33\x8e\xc4\xa4\x45\xe1\xef\xb1\x86\xa7\x1d\x1f\x59\x81\xbb\xe5\x8c\x86\x49\x01\x27\xed\xed\xa8\xdc\x85\x4e\x5d\x82\x3c\x02\xa6\x10\x61\xa0\xc2\x05\x1c\xb2\x43\x9a\xdc\x76\x06\x6f\x67\x4f\xdd\xfa\x7b\xec\xba\x06\xe0\xe2\x41\x5a\x46\xe7\x98\x4d\x5d\x7a\x3f\x04\x30\x10\xf4\x09\xfd\xa1\x24\x59\x23\x62\x51\x72\xbf\x3d\xa3\xcc\xf9\x37\x25\x02\xba\xf1\x28\x92\x87\x0d\xe0\x61\x31\xa3\x68\x6c\xdc\x61\x61\x80\x28\x4b\xc6\x96\x2c\x1a\xc0\x41\xe3\xd8\x9b\xb6\xea\x4f\xe8\x1c\xba\x0e\x82\x02\x3f\x6d\x55\x68\x99\x43\xfc\x20\xae\x93\x33\x07\x21\x4c\x0c\x55\x09\xc7\xcb\x38\x11\xe8\x61\x85\x4f\x4a\x0c\x60\xed\x2f\x39\x16\x39\x65\xd4\x2b\x55\xa0\xa0\xd9\xc5\x6d\x56\xe1\x41\x86\x54\xc6\x5b\x32\x50\x2e\xa0\xc0\x80\x41\x72\x17\x8d\x95\xcc\x12\x46\x53\x07\xbb\x88\x63\x91\x5d\xe9\xa6\xdd\x44\x30\xea\xb6\xef\x18\x0d\xfc\x1c\xc6\xef\x90\xc5\x0b\x88\x59\x17\x15\x26\xaa\xed\x33\xec\xcb\xb2\xa2\x3e\x15\x35\x31\x91\xcf\x7d\x48\x92\x52\x89\x50\x9b\x12\x5d\x72\x1b\x22\x44\x89\x71\x36\x72\x92\x61\x06\xc1\x14\xb6\x6d\xe8\x62\x82\x20\x33\xce\x46\x96\x73\x36\xb2\xa4\x94\x3d\x8c\xd0\x21\x28\xf0\x17\xb1\x3a\x04\xe5\xb0\x33\x56\x86\x79\x14\xd4\x04\xa7\x72\x24\xcb\x56\xb7\x12\xf9\xa6\xa2\x10\xc0\xe8\x75\x3a\x3f\x98\x9d\xae\xd9\xe9\x81\xee\xf7\xc3\xce\x20\x9c\x15\xda\x20\x69\x2c\xe8\xce\xa6\x99\x21\xbf\xe1\x8e\x85\x9c\x79\x01\xd4\xe4\xef\x96\xb3\xcb\xc8\xca\x37\x36\x72\x88\x2f\x6b\xd8\x5f\x61\xe6\x50\x74\x1c\xf2\x4f\x0e\xf9\x78\xd2\xbc\x77\x90\x98\x0d\x41\xb7\xd3\xf9\x6e\xaf\x32\x80\x5d\x6c\x8b\x70\xd8\xf9\x51\x0a\x54\xe9\x8f\x3f\xa5\x0c\x3f\xa0\x3a\xf5\x0c\xc0\xf0\xe7\xc0\x61\x18\x8d\x8d\x78\x6f\x0f\x5b\x42\x7b\xa8\xbf\xbc\x78\x18\x1b\x1e\x25\x62\xe6\x3e\x68\x8c\x4d\x99\x05\x92\x33\x72\x68\x2b\x73\xa4\x15\xf1\x9e\xc6\xfa\x12\x84\x5d\xc6\x3d\x14\x03\x53\x8a\x4a\xb5\x16\x41\x27\xd5\x56\x75\x3c\xbb\xa5\x17\xaa\x7d\x65\x76\xce\x68\xc0\x52\x0d\x8d\x4e\x64\xb7\xf4\x4d\xd4\xa1\x1c\x53\x47\x96\xd2\x75\xac\xbe\x5f\xa9\xfa\x16\xac\x9f\xff\x4f\x26\xdc\x7f\xfd\xed\x94\xdc\x3d\x10\x3d\x09\x84\xa0\x24\x62\x38\x3c\x98\x78\x8e\x48\x4a\xea\x44\x10\x30\x11\xa4\xcd\x03\xdb\xc6\x9c\x6b\x17\x8b\xbf\xcd\xe8\x7d\x3c\xa8\x94\x84\xe3\x90\xc8\x22\x7e\x64\xc9\x69\x6a\x77\xbb\x0c\xa2\x46\x02\x4e\x5c\xac\x5d\x26\xbb\x18\x84\xff\xb7\xb9\x60\x8e\x8f\x11\x40\x50\x40\x75\x1c\x89\x36\xc3\xdc\xa7\x84\xcb\xab\x67\x42\xef\x19\x5c\x9f\xa3\x33\x4e\xd1\x23\x31\xc3\x10\x65\x69\xc7\x32\x06\x4d\xcc\xce\x56\x2e\xab\x62\x48\x89\x59\x01\x01\x3f\x13\xcc\xee\xe2\x52\x3f\x61\xc0\x5a\x9e\xfa\xc5\x96\x97\xdd\xf9\x64\xab\xc9\xe7\x4e\x00\xf3\x27\x87\x20\xf3\x9c\x92\xa9\x73\x67\xbe\x95\xa3\x8e\x9f\xd3\x80\x08\xd0\x91\xf2\x74\x0b\xae\x02\x97\x63\x35\x30\xc1\x77\x21\x55\x24\x8e\x9b\xfc\xeb\xea\x76\x31\x78\x0f\x9a\xaa\x97\x37\xe2\x81\x7f\xd6\x1f\x59\xf2\x0f\xb0\x80\x2f\xa5\x70\x03\x98\xad\xd8\xde\x64\x5e\x2b\xc9\xf0\x6e\x3e\xc3\x7b\xb5\x31\xbc\x97\xcf\xf0\x7e\x6d\x0c\xef\xe7\x33\x7c\xf0\x15\x0c\x1f\x59\x59\x86\xa9\x14\x9a\x71\xd0\x4f\x28\x7a\x78\xba\x5d\xe8\x10\xb9\xc3\xe0\xd4\x79\x05\x4e\xb9\x80\x02\x0c\xc7\xc0\x94\x3b\x3c\x93\xd9\xd9\x8b\x4b\x06\xab\x35\xab\x14\xd3\x3c\x4d\xe3\xef\xb9\x26\x9a\x38\xc5\xa1\x6f\xa6\xac\x6a\x66\x48\xec\xcd\xdf\x04\x73\xc8\x1d\x38\x0d\x33\x6c\x20\xc8\x67\x13\x0a\x19\x0a\xc9\xec\xe3\xa3\xde\xfe\x06\x43\x96\x47\x6d\xfc\xf5\xef\xba\x0b\x09\xad\xcf\xeb\x80\x66\xcb\x05\x7c\x88\x0c\x7c\x2e\xaf\x72\x9a\x9f\xed\x97\x20\x44\xed\xc0\xc3\x44\x98\xf7\xcc\x11\xb8\x89\xa0\xc0\xd7\x54\xf9\xd2\x6c\xac\xda\xad\x7f\x13\xd3\xee\x74\xdb\x9d\xde\x75\xf8\x4d\xcc\xb0\xf3\xfd\x9f\x9d\xbf\x0e\x3b\x1d\xe9\x6b\xa3\xd5\x5a\xfe\x0a\x94\xc7\xc3\xec\x55\x66\x64\x65\x45\x74\x2e\xe8\x17\x8a\x97\xfe\xd3\x59\x12\x2d\x35\x01\x83\xc5\xa2\x60\x2c\x54\x0d\xd5\x65\x5d\x33\x19\x9f\x8e\xd9\xc9\x0f\x02\xed\xcb\x43\x17\x4e\xb0\x0b\xc2\xff\xdb\x48\xd6\x1e\x56\x84\xd3\x97\x1c\xa6\x0b\xec\x0a\xb8\x1a\x2b\x60\x3d\xbb\x55\x2a\xe0\xc5\x32\x08\xd4\x05\x72\xae\xef\x5b\xb5\xca\xe5\x56\x9d\xfa\xe4\x2a\xe6\xd9\xa3\x7c\xcc\x3d\xd8\x9c\xb5\x2a\xcd\xbd\x43\xa6\x59\x7e\xb6\xdb\x94\x77\x4c\x7c\x06\x7b\x8a\x27\x7e\xad\xde\xab\xf8\x94\x5a\xef\xf1\x14\x06\xee\xae\x1f\xa0\xb7\x8b\xac\x3c\xf7\x95\x47\xb9\x0a\x72\x91\xed\xba\xb8\xce\x3c\x25\xbc\xf6\xea\xfe\x41\xdd\xc0\xc3\xeb\x83\x11\xac\xb5\xca\x49\x58\x75\x48\x2b\x01\x07\x49\x61\x94\x6b\x75\xab\x66\x7a\xc0\x9f\x97\xc2\x54\x95\xfa\x3a\x50\x98\x63\xee\x97\x5b\x1a\x85\xa9\x2a\xf7\xcf\x4e\x61\x8e\x89\x5f\x6e\x69\x14\x46\x8f\xcf\xa1\x51\x98\xad\xb9\x7f\xa9\x14\xa6\xf4\xef\xd3\x6b\x4f\x78\x7a\x99\x08\x4f\x6f\x5f\xc2\xd3\x3b\x5c\xc2\xd3\xab\x65\xed\xeb\xd5\x86\xf0\x54\x90\xfa\xda\x10\x9e\x63\xee\xc3\x6d\x2b\xe1\xa9\x20\xf7\xf5\x20\x3c\xc7\xc4\x87\xdb\x56\xc2\xd3\x3b\x60\xc2\x93\x96\xfb\x23\xe1\x89\x7e\x87\xaf\x3d\xe1\xe9\x67\x22\x3c\xfd\x7d\x09\x4f\xff\x70\x09\x4f\xbf\x96\xb5\xaf\x5f\x1b\xc2\x53\x41\xea\x6b\x43\x78\x8e\xb9\x0f\xb7\xad\x84\xa7\x82\xdc\xd7\x83\xf0\x1c\x13\x1f\x6e\x5b\x09\x4f\xff\x80\x09\x4f\x5a\xee\x8f\x84\x27\xba\x7f\xaf\xf6\x84\x67\x90\x89\xf0\x0c\xf6\x25\x3c\x83\xc3\x25\x3c\x83\x5a\xd6\xbe\x41\x6d\x08\x4f\x05\xa9\xaf\x0d\xe1\x39\xe6\x3e\xdc\xb6\x12\x9e\x0a\x72\x5f\x0f\xc2\x73\x4c\x7c\xb8\x6d\x25\x3c\x83\x03\x26\x3c\x69\xb9\x3f\x70\xc2\x93\xed\xbe\xff\x5c\xf2\x9e\xbe\xf3\x7f\x64\x85\x8b\x91\x76\x37\xca\x78\xc3\x77\xbd\x17\x3f\x81\x3c\x6b\x14\xc0\xfa\x1a\xa6\xcb\xe5\x23\x68\xf2\xae\x57\xda\x90\xf5\x87\x44\x7d\xee\x15\x55\xcf\xb3\x2a\x04\xe4\x8f\x1a\x5a\x5d\x3a\x06\x20\x41\x40\x38\xde\xd2\xe3\xdc\xcb\x3f\xc2\x67\x2f\x48\x11\xe6\xcf\x8c\xd1\x5c\x6b\x15\x22\x93\x12\x50\xe2\x2f\x22\x21\xb5\xf1\x53\x1d\x96\x92\x13\xf9\xb9\xad\x2c\xb4\x20\x22\x8f\x8e\xa4\x53\x29\xab\x28\x96\x7e\x87\x60\xac\x70\x29\x45\xbc\xa9\x4c\x12\xac\xa9\x8e\xa6\xaf\xbc\x61\x53\x51\x10\x8c\x92\xbb\xd4\xb4\xe6\x16\x06\x56\xae\x34\xcb\x30\x4f\x97\xda\xfd\x91\x5c\xb9\x01\x83\x2e\x30\xfe\xf2\x1d\x02\x1c\xdb\x94\x20\x43\xff\xc0\x8d\x0d\xad\xa7\x2b\xab\xce\xd6\xcf\x16\xb4\xa8\x20\x4c\x77\x38\xa4\xfb\xf3\x2c\xee\x64\x9f\xb1\xf5\x6d\x64\x29\xf8\x14\x42\x71\x01\x9d\xf9\xab\x49\x2e\x26\x92\x79\xdd\x5d\xd1\x32\x7e\x8d\x3d\x1f\x33\x28\x02\x16\x3e\xe5\xab\x78\x1d\x17\x4b\x41\xb7\x0e\x29\xbf\x9a\xa7\xc9\xff\xfa\x35\xbd\x0c\x2a\xbc\xee\x4a\x58\xa6\xd7\x2e\x85\x92\xfc\xfc\xf7\x3f\xe7\x46\x21\x07\xeb\x0b\x33\x1a\x88\x92\x70\x46\x03\x51\x2d\xd0\x12\x05\x07\x80\x34\xe9\xcb\xb7\x06\x35\x24\x27\xa1\x92\xc0\x16\xca\xaa\x16\x6e\x9a\x8a\x03\x00\x9c\xf2\xe6\x5b\x80\xdc\x15\xbd\xc7\x6c\x0f\x98\xf9\xb2\x7f\xf9\xd0\xd2\xc4\xbe\x50\x38\x29\x0f\x76\x42\xe8\x17\x1b\xba\xd6\xec\x10\x50\xb4\xf2\x2c\x95\x22\x30\xc2\xa1\x80\xf2\x71\xa4\xcb\x7d\xa1\x40\x8a\x5c\x78\x12\x49\x87\x80\xa3\x73\xe8\x43\xdb\x11\xfb\x20\xc9\x8e\x44\x94\x8f\xa5\x55\xc9\x2f\x14\x4d\x89\x13\x5b\xf0\xb4\xed\xe9\x31\x46\xeb\x10\xe0\x45\x09\x0f\x3c\x5f\x3d\xa6\xb8\x38\xc2\x96\x52\x2a\x00\xd9\xba\xf0\x97\x8a\x33\xcd\x8f\x9c\x50\xb3\x66\x35\x02\x5b\xa9\xcb\x97\x0b\x93\xb4\xa7\x1f\x14\x56\x88\xbb\x05\xdc\x95\x97\xf1\x7e\x20\x6e\xbb\x15\x70\xb8\x4d\xf1\x2f\x14\xcc\xab\x9e\xec\x9c\x89\xe3\x47\x6c\xd5\x08\xbf\xcf\xb5\x76\xad\x1a\xb4\xf7\xca\x40\x7b\xaf\x5a\xb4\xf7\x0e\x06\xed\xbd\x6f\x1b\xed\x39\x16\x2e\x54\x83\xf6\x7e\x19\x68\xef\x57\x8b\xf6\xfe\xc1\xa0\xbd\xff\x6d\xa3\x3d\xc7\x5d\xab\xd5\xa0\x7d\x50\x06\xda\x07\xd5\xa2\x7d\x70\x30\x68\x1f\x1c\x32\xda\x8b\x43\xf4\xd7\xf0\x5b\x60\x87\xdc\xed\x7b\x7b\x08\x8d\x05\xdd\x56\x73\x93\x48\x9a\xfc\xaf\x0f\xcb\x14\x4b\xd4\xcd\x1b\xd1\x93\x3e\xeb\x00\x9f\x72\xef\x39\xdb\x6d\xdd\x8e\xc7\x71\x6f\x39\x95\x72\x78\xed\x90\xf6\x31\xda\x8d\xfe\x2c\xcd\x39\xd1\x5e\x74\x37\xc3\x10\x25\x8f\x71\xcd\xf6\x7a\xab\xc7\x47\xc0\x05\x14\x8e\xfd\xe6\xfa\xf2\x1d\x68\xaa\xfd\xdf\xdf\xbf\x03\x86\x95\x3c\xa3\xd5\x82\x9c\x63\xc1\xad\x39\x26\x88\x32\x6e\x4d\x28\x15\x5c\x30\xe8\x87\xef\xb5\x09\x9f\xd2\xeb\x3b\xf6\xbf\x30\xb3\x6c\xce\xad\xb5\x63\xa6\xe7\x10\xd3\xe6\xdc\x00\x53\xe8\x72\xdc\xd2\xcc\x8b\x3c\x48\xf7\xe5\x13\xff\x0a\x9e\x78\x54\x96\x4c\xeb\x53\xbc\x17\x1a\xfb\x69\xc3\xd6\xf2\x03\xf5\x29\x3d\x4e\xab\xaa\x97\x30\xc8\x34\x03\xac\x00\xe9\xb4\x19\x4f\x08\x2d\x93\x61\x88\x1e\x9a\xc9\xeb\x0c\x9b\xfa\x2b\x0c\x97\xed\x1b\xff\xa7\xbf\xad\xa8\xd1\x32\xd7\x0c\x6c\x6e\x76\x92\x9b\x1c\xf8\x57\x61\x83\xb7\xc4\x56\x77\x24\x0e\xc1\x0f\x9d\x57\xa9\x8d\x3d\x87\x5c\x40\x81\x87\x40\x85\xbb\xd9\x32\x79\x30\x11\x0c\xda\xa2\xf9\xfd\x2b\xd0\x78\xc0\x90\x35\x5a\x5b\xba\xc2\x2f\x6b\x5d\x31\x41\xbf\x4e\x9b\x0d\x04\x1f\xb6\xf5\x91\x91\x7a\xf8\x29\x7c\xed\xc0\xb9\xac\xa5\x98\x0f\x41\x43\x7b\x51\x41\x23\xbd\x9b\x4b\x6d\xe8\xe2\x61\x4a\x94\xe2\x4d\xbd\xd9\x71\x08\x1a\x37\x37\x37\x37\xe6\xe5\xa5\x79\x71\x01\xde\xbc\x19\x7a\x5e\x23\xb5\xcb\x22\x5d\x4f\x18\x5c\xbe\x4b\x4f\x63\xf9\x0b\x31\x45\x30\xfa\x76\xbc\x31\x04\x1f\xe2\x20\xbc\x4a\xc2\xf1\x31\x5d\xc7\xaa\x94\x1b\xcc\x05\x66\xa9\x92\x96\x99\xe8\xbe\x02\x32\xa8\xbc\xa1\x49\x4f\x3b\x9b\x49\xe3\xf5\xcc\xe1\x20\x7c\x44\x76\x9a\x4a\x01\x99\x90\x39\x0c\x1b\xac\xe8\x8b\x92\x1b\x9d\xc8\xa4\xea\x1d\xe4\x62\xbb\x2a\xdd\xfe\x48\xea\x2e\xfd\xa9\xed\x0b\x18\x15\xfa\x2f\x71\xbd\xcb\xfd\x08\xf7\x1b\xde\xab\xe3\xd9\x9d\xdf\xa6\x47\xf7\x45\xc9\xdc\xa1\x3b\xad\xf5\xaa\x3d\x59\x31\xbe\x68\xbd\x3e\xd9\x59\x68\xe4\x30\x6a\x84\x1a\x3d\x47\x68\x05\x0a\xa7\x55\x28\xb9\xcd\x21\x03\xc8\x07\xe3\x2d\xe5\x0a\xca\x6a\xb0\x52\xb4\x1a\x69\x26\xa4\x99\xa1\x2e\x4d\x3e\x68\x6f\x1f\xfc\xd8\x68\x99\x73\xe8\x36\xa3\xc0\x20\x5f\xc5\x4c\x16\xa1\xe4\xd5\xae\xe1\xf8\x6f\x5f\x5e\xb6\x2f\x2e\x3e\x5c\x7f\x0c\x2b\xc0\x90\xf3\x3f\x1b\xad\x56\xfa\x4b\x65\x76\x6a\x15\x34\x45\x27\x26\xa8\xb0\xc6\xc5\xda\x31\xfd\xf3\xea\x9d\xb3\x29\x93\xf1\xff\x02\x00\x00\xff\xff\x03\x81\x46\xd2\x40\x77\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x5b\x6c\x54\x55\x17\xfe\xf8\xe7\x30\x67\xfe\xf9\xb9\xf6\x57\xf1\x06\x6e\x50\x50\x83\x43\x67\x8a\x1a\x32\x74\x8a\x52\x2e\x1a\x69\x6c\x70\xc4\x98\xe8\xc3\xb1\xb3\x9d\x39\x3a\x73\xce\xe4\x5c\x80\x31\xa8\xed\x34\xd8\x60\x09\x10\x95\x68\x0c\x8a\xf8\x82\x0f\x62\x86\xd2\x09\x43\xe9\x4c\xe3\x8b\x31\x26\x26\x6b\xbf\xf9\x64\xa2\xaf\x24\x3e\x9a\x98\xa8\x31\xfb\xec\x4d\xdb\x29\xc1\xf3\xd0\xbd\xd6\xb7\xd6\xfa\xd6\xb7\xd6\xde\xd3\x9f\x7b\x8c\xb3\x00\xf0\x10\x80\xfb\x01\xf4\x2f\x03\x9e\x00\xf0\xca\x7f\x10\x7d\xe9\x18\x70\x07\x80\x4c\x0c\xb8\x0b\xc0\xbe\x18\x60\x02\x78\x35\x06\x24\x00\xf0\x18\xf0\x3f\x00\x8e\xce\x7b\x2b\x06\x2c\x07\x70\x3a\x06\x18\x00\xce\xc6\x80\x95\x00\x3e\x8d\x01\x49\x00\x5f\xc5\x80\x38\x80\x2b\x3a\x3e\xa3\xfd\x39\x7d\x7e\xa7\xf3\x7e\x8c\x01\xff\x05\xf0\x93\xe6\xff\x55\xf7\xfd\x2d\x06\xac\x02\xf0\xbb\xce\x5f\x6e\xa8\x7e\x2b\x0c\x85\xf7\x18\x8a\x77\xa3\x01\xac\x05\xb0\x45\xe3\x3b\x0c\x60\x35\x80\xfd\x86\xe2\x7f\xc9\x50\xfc\xaf\xe9\xfa\xb2\x3e\x3d\x8d\x1f\x35\x94\xee\xba\xa1\xe6\x3e\xa3\xeb\x2f\x1a\xaa\xef\x55\x03\xd8\xb5\x0c\xe8\x18\xc0\x76\x00\x7f\x2f\x07\x9e\x04\xd0\x17\x57\xfc\xb6\x3e\x83\x38\xb0\x02\xc0\xbb\x71\xe0\x41\x00\x27\xe3\xc0\x1a\x00\x8d\xb8\xda\xdf\xb7\x71\xc5\xff\x43\x1c\x58\x07\xe0\x97\xb8\xd2\xfb\x87\x8e\x27\x4c\x35\xff\x5a\x53\xe1\xeb\x4d\xe0\x01\x00\x8f\x99\xc0\x7d\x00\x0e\x98\x6a\xef\x25\x53\xf1\xbe\x6d\x02\xeb\x01\x9c\x32\x55\xdf\xaf\x35\x7e\xcd\x04\x98\xec\xa3\xfd\x1b\x26\xb0\x11\xc0\x9f\xa6\xd2\xb5\x21\x01\x3c\x0c\x60\x77\x02\xf8\x3f\x80\x37\x12\x6a\xde\x77\x12\xaa\xef\xa9\x84\xaa\xfb\x2c\xa1\xe6\xfa\x46\xe3\xd7\x12\xc0\x26\x00\xdf\x27\xd4\xbe\x6f\x24\x80\x1e\x00\x7f\x25\x80\x65\x00\xee\xc5\xc2\x77\x37\x80\x18\xd4\xbc\xf2\x79\xc9\x3e\xa6\x8e\xc9\x5a\x39\x8f\x9c\xc5\xd0\x98\xbc\x0f\xa9\x4d\xce\x23\x77\xb0\x41\xe3\x77\x42\xed\x66\xdd\x22\x6e\x39\x8b\x9c\x6f\x8d\xf6\xe5\x1d\xad\xd4\xf6\x26\x7d\xca\xbd\xc9\xbb\x5d\xa5\xdf\xbb\xfc\x7a\x16\x71\x24\xf5\x29\x7f\x07\xab\x17\xe1\xf7\x40\xed\x32\xfa\x36\x17\x98\xcf\x47\x5c\xa7\xb0\x60\xf9\xd8\xba\x80\x6e\x5d\x04\x3f\xed\x8d\x94\xec\xc3\x1c\x83\x56\xd5\x1a\xb1\x83\x1a\x06\x5d\xc7\x0f\x2b\xd5\xc0\x76\x1d\x0c\x86\x9e\xc7\x9d\x80\x55\xb8\xe5\x87\x1e\xaf\x70\x27\xf0\xb1\xc7\xb2\xcb\x35\xec\xb1\x02\x1e\xfd\x61\x96\x53\x60\x81\x5d\xd1\x9e\x67\x39\x45\x8e\xbd\x0e\xf7\x8a\x35\xec\x1f\xb1\xca\xd1\x9f\xde\x12\x9e\x71\x43\xaf\x5c\xc3\x01\xcb\x0f\x58\xc5\x75\x82\x92\x32\x6b\xdc\xf2\x30\xb4\xc0\x8f\x21\x19\x2b\xd7\xf0\x7c\x95\x7b\x56\x60\x3b\x45\x45\x3e\xcc\x3d\xdb\x2d\x60\xd8\x3d\xc2\x3d\x0c\x87\x65\x9f\x33\xdb\xa9\x86\x01\xdb\x5c\xc0\x0b\x25\xf7\x08\xf2\xbc\x12\x55\x84\x1e\x67\x05\x5e\x0e\xac\x2e\xc4\x76\xba\x5c\x37\x0c\x90\x2f\xd9\xbe\x56\x12\x99\x91\x92\xbc\x5b\xb0\x6a\x38\x64\x95\x43\x8e\x97\xb9\x1f\x70\x4f\xfa\x95\x7e\x3f\xac\x0e\x6c\xef\xef\x95\x47\xb7\xc7\x7a\x59\x55\xaa\xf1\xbb\xe1\xde\x12\x34\x7c\x90\x57\x5d\x2f\x48\x0d\xf9\x45\xbb\x90\xda\x1d\x16\xfd\x54\xde\xcd\xb2\x02\x3f\xfc\xd4\x9b\x76\xc9\xaa\xb8\xdb\xbc\x30\x29\x37\x91\xca\x7b\x96\xe3\x97\xad\xc0\xf5\xb2\xec\xb9\x28\xc4\x86\x42\xcf\xaa\xb8\x05\x97\xf5\x77\xe5\x0f\x24\x0f\x58\x4e\x31\xb4\x8a\x3c\x95\xe7\x56\x25\xcb\xe6\xfd\x2c\x3b\x18\xfa\xbe\x6d\x39\xc9\xa1\x67\x87\xf6\xa6\x0e\x71\xcf\xb7\x5d\x27\xcb\x32\xdb\xd2\xc9\x41\xd7\x09\xb8\x13\xa4\xf2\xb5\x2a\xcf\xb2\x80\x1f\x0d\x7a\xab\x65\xcb\x76\x76\xb2\x91\x92\xe5\xf9\x3c\xc8\xbd\x98\xdf\x97\xda\xb1\x90\x27\xf5\xbc\xce\xbd\xd4\x5e\x67\xc4\x2d\xd8\x4e\x31\xcb\x92\xc3\xe5\xd0\xb3\xca\xa9\x7d\xae\x57\xf1\xb3\xcc\xa9\x46\xae\x9f\xdb\xbe\x93\x29\x33\xe7\x6c\xce\xa4\x73\xb9\x0c\xdb\xb2\x85\x49\x33\xbd\x31\x97\xc9\xb0\x5d\x2c\xcd\xb2\x91\x3f\x90\xeb\xbb\x19\xea\xcf\x3d\x2e\xcd\x47\xa2\xb4\xfe\x4c\x9a\x1d\x3b\xa6\x4a\x06\x72\x7d\xe9\x47\xd9\x2e\x96\x61\x59\xd6\xb7\x53\x3e\x61\x31\x46\x4d\x9a\x11\xe3\xd4\xa6\x69\x6a\x2c\x45\xc4\xe4\x52\x24\x7a\xe0\x4b\x8a\x96\x42\x62\xf2\x16\x08\x74\x46\x8c\x8a\xe3\xd4\xa2\x29\xd0\xe7\x74\x59\xbc\x4f\x4d\x9a\x05\x7d\x41\x0d\x31\x26\x8e\x53\x47\xa6\x7c\xa9\xf2\xc5\x09\x6a\x51\x93\xd1\x1c\x75\x68\x86\x1a\x74\x95\x1a\xa2\x4e\x4d\xba\x4e\x2d\xd0\x05\x31\x2e\xea\xd4\x11\x13\xd4\xa6\x86\x38\x0d\xfa\x28\x8a\x36\xe6\x0d\x46\x2d\x46\x53\x62\x54\xf2\xab\x78\x8b\x1a\x34\x17\xf1\x74\xa8\xcd\xa4\x62\x51\x07\x5d\xa2\x36\x35\xc5\x28\x5d\xa1\x96\x4c\xfb\x30\x6a\x75\x7d\xde\xe8\x15\x13\xa0\x8b\x52\x1d\x75\x68\x4a\xb5\x3a\x1f\xb1\x4e\x8b\x49\x9a\xd6\x2a\xaf\x31\x9a\xa5\xa6\x18\x13\xa7\xc5\x7b\xb7\x89\x5f\x51\xb3\x9d\x5f\x3a\x8c\x38\x09\x3a\xa7\x6b\xe7\x87\xf9\xe0\xa6\x6e\x16\x21\xa3\xd4\xa0\xcb\xd4\x11\x75\x9a\x91\xb3\x9f\x8f\x04\xb7\x14\xe1\x39\xea\x88\x13\xd4\xa6\x8e\x18\x13\x75\x49\xf6\x09\xcd\xd2\x9c\x18\x97\xcc\x62\x8c\xda\x62\x52\x76\x9f\x52\xbb\x95\xbf\xe4\x6e\x09\xb2\x42\xf1\x35\xa3\xe5\x4c\xb3\x48\xd6\x2c\xcd\x45\xa0\xcc\x18\x57\x37\xd2\x05\xc9\x53\xdd\x8c\x5c\xe3\x84\x54\x75\x9b\x9c\x0e\x5d\x56\xc0\xcd\xd9\x2e\x45\xf7\x56\xef\xda\xd8\x3c\xa6\xb7\x74\x81\x9a\xca\xa4\xb6\x2c\xf9\x38\xaa\x9d\xa0\x26\xb5\xe5\x93\x90\xfb\x99\x50\x7d\x40\xb3\xff\xfa\x7f\x83\x5a\x5d\xdb\xe8\xc8\x67\xd7\x55\x11\xdd\xef\xad\x49\xff\x04\x00\x00\xff\xff\xe3\x6f\x7f\x4c\x10\x09\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
