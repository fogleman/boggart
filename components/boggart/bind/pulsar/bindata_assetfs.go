// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x61\x6f\x9b\x46\x18\xfe\x9e\x5f\xf1\x0a\xa5\x6a\xac\xcd\x80\xb1\xbb\x55\x29\xc9\x34\xb5\x5d\x35\x69\x9d\xa2\x2e\xab\xb4\x7d\x89\xce\x70\x8e\x6f\x3a\x1f\xf4\xee\xb0\x13\x59\xfe\x4f\xfb\x0d\xfb\x65\xd3\x01\xc6\xd8\x31\x36\x60\xd3\x60\xca\x49\x49\x1c\x38\x9e\x7b\xdf\xf7\x79\x7c\x3c\x48\x77\xcc\xe7\xe0\xe2\x11\x61\x18\x34\xc7\x63\x12\x33\xa9\xc1\x62\x71\x66\x0b\x87\x13\x5f\x82\x7c\xf4\xf1\x95\x86\x7c\x9f\x12\x07\x49\xe2\x31\xe3\x1f\x34\x45\xd1\x49\xed\xfa\x0c\x00\x60\x14\x30\x47\x9d\x81\x29\xa2\x01\xfe\xc5\xe3\x13\x24\x2f\x58\x07\xe6\xe1\x59\xd5\x38\x96\x01\x67\xc0\xf0\x0c\x7e\x65\x92\xea\xbf\x07\x93\x21\xe6\x71\xcf\x8e\x3e\x5a\x5e\xf2\x26\xbc\x62\x71\x66\x1b\xd1\x00\xd7\x67\xb6\x4b\xa6\xe0\x50\x24\xc4\x95\xc6\xbd\x59\x3c\x62\xfa\xa8\xe3\xd1\xee\xc4\xed\xf6\x2c\x50\x9f\xc4\x64\xf9\xe9\x41\x74\x7b\x56\xdc\x7f\xf3\x9a\x87\x3b\x1f\x31\x4c\x53\x67\x9f\xf6\x58\x16\x63\xbd\x4f\xd2\x8f\x7b\x14\x5f\x69\x12\x0d\xb7\x21\x25\x3d\x03\xba\x04\x64\x68\x0a\x0c\x4d\xbb\x12\x0d\x05\x0c\x11\xbf\x53\x1f\xb4\x15\x0c\x25\x62\xdb\x58\x09\x12\x25\x71\x5f\x9f\x63\x81\x99\x0c\xb9\xd0\xe6\x73\x20\x23\xc0\x5f\x40\x47\x11\x05\x9a\x22\x6f\x39\xa6\x3a\x36\xc5\xaa\x13\x66\x2e\x2c\x16\xd7\x36\x82\x31\xc7\xa3\xab\x8c\xeb\x56\xcc\x5e\x4e\x3d\xe2\x5e\x98\x9d\x37\xea\x5a\x2a\x30\x2c\x16\xf3\x39\xe8\x9f\xf0\x97\x00\x0b\xa9\xff\xf9\xe9\x37\xfd\x06\xc9\x71\x74\x38\x02\xd7\xae\x15\x68\xef\x35\x03\xed\x6d\xc0\x39\x66\x12\x26\x18\x89\x80\xe3\x09\x66\x52\x68\xa0\xc3\x62\x61\x1b\xe8\xda\x36\x28\x39\x42\xa2\x88\x3b\x63\x95\x5d\xc9\x7c\x53\x97\x97\x49\xfb\xa7\x08\xe7\x2a\x86\xd9\x56\x85\x9f\x97\x23\xec\x4f\xdc\x36\x02\x9a\x71\x26\xa5\x49\x89\x86\xdd\x6c\x55\xee\x52\x67\x1a\x41\x1d\x81\x11\x72\x31\x44\xe5\x02\xc2\x76\xa0\xa9\xb6\xb3\x78\x3b\xaf\xb4\x95\xb0\x71\x6a\x74\x8a\x21\xfc\xdd\x15\x92\x13\x1f\xbb\xe0\x22\x89\xa2\xe3\xae\xec\x72\x2c\x7c\x8f\x09\x15\x14\xf3\x66\x1c\xf9\x1a\x08\xf9\xa8\x32\x99\x11\x57\x8e\x2f\x7b\xa6\xf9\x62\x4f\xac\xd1\xa8\x63\x8c\xdc\x3c\xfd\xf8\xfe\x4e\x31\xe0\x8a\xd6\x77\x48\x26\x9c\xca\x71\x09\x80\xf7\x0c\xf3\xfb\xc7\x18\x62\xc8\xc1\x58\x9d\xfa\xe0\x20\x7a\x10\xf6\x4d\xa0\x54\x4b\x98\x1f\x48\x78\xe1\x2a\x28\x46\x68\xf2\xd3\x4b\x8f\xc8\xd1\x0c\x2e\xa2\xab\x26\xb6\x08\xfc\xeb\xbe\x6d\xa8\x3f\x60\x80\xaf\x50\xd4\x37\xb6\x53\x55\x24\x56\x6d\x22\xe9\xd7\x26\x92\x41\x75\x91\xd8\x46\x1e\xa9\x2b\xac\x9c\x5f\x9c\xa1\xe7\x3e\xee\xef\x17\xe6\xc1\xee\x31\x9c\x93\xef\xe1\x5c\x48\x24\xe1\xf2\x0a\x74\xf5\x41\xec\x9b\x3a\xa0\xd8\x17\x34\x47\xd4\xa9\xa8\xa2\xe9\xec\x5c\xf7\x31\x27\x9e\x0b\xda\xc4\x63\x72\x4c\x1f\xf7\xce\x67\xdb\xa0\x14\x47\x61\x6e\xba\x9a\x19\xf4\x8f\x0a\x4a\xff\x43\x72\xc2\xee\xe1\x5c\xdd\x9c\xe6\xf3\xf4\xf9\xbf\x30\xe2\x45\x86\x59\xde\x89\x36\x43\x76\x11\x29\x17\x70\x2a\x96\x77\xe8\x31\x0e\xf0\x6b\x65\x51\x30\xdc\x7c\x26\xd4\xf5\x9c\x40\x79\x0c\x7d\xc6\x89\xc4\x17\x2e\x92\xf8\xd6\x8b\x62\xbf\x78\xb9\x1e\x77\x64\x39\x41\xb3\x4c\xf3\x87\xae\xd9\xeb\x9a\xd6\x6d\xef\xd5\xa5\x39\xb8\x34\x5f\xfd\x6d\xfe\x78\x69\x9a\xaa\xa2\x2f\x3b\x9d\x95\x01\x2d\x92\x61\xe8\x00\xf2\x09\xd6\xc8\xab\xd8\x42\xd2\x2e\x55\xaf\xb4\x6b\x4f\xaa\x15\xdd\xa4\x60\xb1\x28\x59\x0b\x32\x82\x7b\xb9\x86\x75\xcb\x55\x7d\x4c\xdd\x2c\x2e\x02\x1f\xb1\xa5\x87\xa0\x68\x88\x29\x84\xbf\xbb\xae\x9a\x5b\x78\x0e\x43\x50\x75\x99\xde\x61\x2a\xd1\x7a\xad\xc0\x78\xf6\xa8\xa2\x82\x97\x63\x30\x8c\xc7\x50\x85\x2f\xf6\x0d\x88\x67\x2a\x5a\x35\xf5\x22\x70\x1c\x2c\x44\xcb\x7d\xfd\xb8\x57\x77\xa9\x4a\xb9\x27\x6c\xe4\xb5\xc4\xd7\x8f\xf8\x8d\xf9\x3e\xaa\xcf\x51\xe7\x7b\x3c\x42\x01\xdd\xf5\xec\x9b\x0d\x59\x39\xf7\x95\x57\xb9\x41\xe6\x22\x7c\x0e\xea\x7d\xf6\x68\x30\xc1\x9b\xdf\x20\xd8\xe8\x55\xd0\x65\xa6\x75\x18\x01\x34\xd2\x77\x44\xa9\xd5\x6d\x0a\x4a\x17\xfc\x79\x7d\x47\x55\xd4\xd7\xc1\x77\xb4\xdc\xaf\xda\x36\xdf\x51\x15\xf7\xcf\xee\x3b\x5a\xe2\x57\x6d\x9b\xef\x48\xd7\xa7\x69\xbe\x23\x93\xfb\xd6\x77\x14\x2c\xa2\x95\xcb\x77\x58\x87\xfa\x0e\xab\xb9\xbe\xc3\xaa\xe5\x14\x64\xd5\xc6\x77\x54\x40\x7d\x6d\x7c\x47\xcb\x7d\xd8\x32\x7d\x47\x05\xdc\xd7\xc3\x77\xb4\xc4\x87\x2d\xd3\x77\x58\x0d\xf6\x1d\xdb\xb8\x6f\x7d\x47\xc1\x22\xf6\x73\xf9\x8e\xfe\xa1\xbe\xa3\xdf\x5c\xdf\xd1\xaf\xe5\x14\xd4\xaf\x8d\xef\xa8\x80\xfa\xda\xf8\x8e\x96\xfb\xb0\x65\xfa\x8e\x0a\xb8\xaf\x87\xef\x68\x89\x0f\x5b\xa6\xef\xe8\x37\xd8\x77\x6c\xe3\xbe\xf5\x1d\x05\x8b\x38\xc8\xe5\x3b\x06\x87\xfa\x8e\x41\x73\x7d\xc7\xa0\x96\x53\xd0\xa0\x36\xbe\xa3\x02\xea\x6b\xe3\x3b\x5a\xee\xc3\x96\xe9\x3b\x2a\xe0\xbe\x1e\xbe\xa3\x25\x3e\x6c\x99\xbe\x63\xd0\x60\xdf\xb1\x8d\xfb\x93\xf3\x1d\xf9\xd6\x7c\xe7\x1f\xd9\x36\x72\xac\xfa\xb6\x8d\x70\x33\xc7\xde\xfd\x24\x79\x16\x03\xd7\x7b\xf3\x08\x14\x59\x9f\x0e\x9b\x3b\x01\x3e\xae\x76\x46\x15\xdd\xef\xf1\x04\xeb\xb3\xd2\x71\xe1\x5d\x23\xcf\xb3\x23\x00\x8a\x57\xcd\x5d\xdf\x7a\x03\x88\xb9\x20\xc9\x64\x95\x71\xe1\xa5\xff\xba\x8b\x24\x56\x10\xfa\x7b\xce\xbd\x42\xeb\xd8\xe3\x90\x12\x51\xe2\x07\x99\xd8\xd4\xf9\x7c\x13\x39\xc1\x2f\x1c\x65\xa9\xc5\xf2\x45\xc6\x48\x2e\x3a\xca\x0a\xfb\x55\xde\xa1\x18\x2b\x5c\x66\xbf\x6c\x11\x93\x0c\xa7\x86\x8e\x6f\x48\x45\xcb\x16\x55\x41\x72\x8f\xdd\x6f\xa5\xb5\x30\x18\xa4\x9f\x90\x8e\x12\x5e\x1a\xb5\xf7\x9a\xdd\xd0\x80\x23\x0a\xda\x77\x2f\x5c\x10\xd8\xf1\x98\xab\xa5\xff\x11\xda\x93\x51\xcf\xd7\x36\x1a\x6d\x9e\x2d\x19\x51\x49\x99\xee\x48\x28\x9d\xcf\xb3\xa4\x93\xff\x1e\x9c\x6e\xb6\x11\xc9\xa7\x94\x8a\x4b\x8c\x59\x7c\x36\x29\xe4\x2d\x72\xef\xb9\x2a\x3b\x8d\xdf\xe2\x89\x8f\x39\x92\x01\x0f\x37\x9f\x96\x9f\xc7\xe5\x0a\xe8\x8e\xb0\xe3\xcf\xe6\xdb\xf0\xbf\xfe\x9c\x7e\x0c\x73\xbb\x99\x4a\x38\x4d\x6f\x3c\xdc\x24\xfc\xfc\xf7\xef\x5b\xad\x54\x82\xf5\x95\x99\x17\xc8\x23\xe9\xcc\x0b\x64\xb5\x42\x4b\x06\x68\x80\xd2\x54\x2e\xdf\x9a\xd4\x5c\x75\x13\x3a\x92\xd8\x42\xac\x6a\xe5\x96\x1a\xa2\x01\x82\x8b\xb2\xf9\x16\x24\x77\xe3\xcd\x30\x3f\x40\x66\xbe\xba\xfe\xf8\xd2\x4a\xc1\x9e\xa8\x9c\xa2\x0c\x76\x4a\xe8\x83\x83\xa8\x31\x6e\x82\x8a\xd6\xde\x45\x51\x46\x46\x38\x04\x38\xbe\x8e\xd2\xb8\x27\x2a\xa4\x38\x85\xbd\x4a\x6a\x82\x8e\xde\x22\x1f\x39\x44\x1e\xa2\x24\x27\x86\x38\xbe\x96\xd6\x91\x4f\x54\x4d\x49\x12\x19\x7a\xca\x7a\x61\x88\xd6\x69\x82\xbc\x3c\x26\x82\x89\x1f\xbe\x09\xea\x00\x85\xad\x50\x2a\x10\xd9\x26\xf8\xa9\xea\x2c\x95\x47\x41\xa9\x19\xe3\x46\x88\x2d\xc7\x3b\x94\x4a\x19\xae\x40\x50\xf5\xec\xed\x07\xf2\xae\x57\x81\xf1\x7a\x0a\x7f\xa2\x0a\x5c\xcf\x64\xe7\xed\x73\xf9\x2a\xa4\xa6\x8b\xce\x3a\x86\xe8\xac\x6a\x45\x67\x35\x46\x74\x56\x2b\xba\xe4\xcd\x68\x87\x8a\xae\x5f\xad\xe8\xfa\x8d\x11\x5d\xbf\x15\x5d\xf2\x12\xbc\x43\x45\x37\xa8\x56\x74\x83\xc6\x88\x6e\x70\x3a\xa2\x3b\xee\xf2\x93\xdd\xd1\xd9\x86\x4b\xa6\xdb\x41\x32\x4e\x6d\x39\xbc\x71\x28\xf5\x6f\xfc\x31\xfe\x93\x84\xf3\x7f\x00\x00\x00\xff\xff\x7d\x01\x5c\xf9\x89\x59\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xcd\x8f\x53\xd5\x1b\x7e\xe0\x96\xb6\xf4\xf7\x13\x05\x11\xbf\xe1\xa0\x0e\x6a\xc8\xa5\xed\x0c\xa0\x76\xa6\x83\x38\x80\xe1\xa3\x42\xa0\x12\x77\x78\x69\x8f\xed\x8d\xed\xbd\x37\xf7\x03\x9c\x48\xe2\x7c\x84\x8c\x88\x11\x12\x35\xb8\x40\x40\xa3\x3b\x8c\x65\x98\xc6\x01\xa6\x9d\x8d\x0b\x17\x2e\xde\x13\xdd\x19\x8d\x1b\x37\xfa\x07\x18\x5d\x99\x73\xcf\x81\x99\x0e\xd1\x2e\xee\xfb\xbe\xcf\x79\x3f\x9e\xf7\x39\xa7\xbf\xac\x49\x7c\x0c\x00\x4f\x02\x78\x0c\xc0\xd6\x65\x40\x16\xc0\x81\xe5\x88\x7f\x69\x03\x58\x0b\x60\xa5\x01\xac\x03\xb0\xde\x00\x56\x00\xd8\x66\x00\x29\x00\x83\x06\x90\x04\x30\x62\x00\x69\x00\xfb\x0c\xe0\x7f\x00\x8e\xe8\xba\x63\x06\x90\x00\x10\x1a\xc0\x3d\x00\x46\x75\xde\x94\xae\x3b\xaf\xe3\x0b\x3a\xef\x8a\xc6\xbf\xd4\xfd\xaf\x6a\x7c\x46\xdb\x1b\x7a\x7e\xd7\x00\x0c\x00\xdf\xea\x79\xdf\xe9\x3e\x3f\xea\xba\x9f\x75\xde\x6f\x06\xb0\x0a\xc0\x1f\x06\xb0\x12\xc0\xdf\x06\xb0\x1a\x40\x22\xa1\xf0\x75\x09\xe0\x5e\x00\x7d\x09\xbd\x57\x42\xf1\x1c\x4c\xa8\x7d\xf7\xea\xf3\xd7\x13\x8a\x97\x97\x00\xea\xcb\x80\x93\x09\x60\x00\xc0\xaf\x2b\x80\xed\x00\xd6\x26\x81\xff\x03\xd8\x9f\x04\x32\x00\x5e\xd3\x71\x45\xc7\x9e\x8e\xdf\x4e\x2a\xad\xdf\x4d\x2a\xbe\x57\x93\x6a\x4e\x3b\xa9\xf8\x7c\xaf\xed\x4f\xda\xfe\xae\xf3\xfe\x4a\xaa\x3d\x97\xa7\x54\x9f\x55\x29\x85\x3f\xaa\xed\x53\xda\x9a\x29\xc5\x73\x7b\x4a\xe9\x5f\xd4\xf9\x87\x53\xaa\xdf\xb1\x14\x70\x1f\x00\x27\x05\x30\x00\xef\xe8\xf8\x4a\x0a\xd8\x08\xe0\x5a\x4a\xf1\xfb\x21\x05\x3c\x0d\xe0\x4f\x7d\xbe\x21\xad\xea\x73\x69\xe0\x09\x00\x3b\xd2\x4a\xc7\xe3\x69\x60\x8d\xbc\xdf\x34\xb0\x0c\xbd\x3f\xf9\x9e\xe4\x1d\x49\xfd\x1e\x06\xf0\xc8\xa2\xb3\x07\xa0\xf6\x91\x5a\x4b\x1e\x52\x03\xc9\xfb\x71\x7d\x2e\x39\xac\x5e\x94\x7f\xbf\xdc\x55\xfb\xf2\x1d\xc8\x9d\xe4\xbe\x1b\xa0\xe6\x3f\x04\xc5\x4b\xee\x20\xf5\x7e\x50\xe7\xae\xd5\x76\xa5\xb6\xf2\x8e\xe5\x3e\xf2\x79\xcb\x77\x22\x77\x5a\x2f\x0f\xfa\xaa\x2c\xe0\x15\xd7\xa9\x2e\x78\x01\x36\x2f\xa0\x9b\x17\xc1\x3b\x3d\xdf\x6e\x60\xa7\x5f\xa9\xdb\x27\x38\x76\x46\xb5\x28\x08\x31\x62\x79\x56\xc5\x0e\x47\x31\xe2\x3a\x41\xd4\xf4\x42\xdb\x75\x30\x12\xf9\x3e\x77\x42\xd6\xe4\x56\x10\xf9\xbc\xc9\x9d\x30\xc0\x2e\x2b\xe4\xf1\x87\x59\x4e\x95\x85\x76\x93\x63\x17\xaf\xf0\xe6\x71\xee\x63\xb7\xc3\xfd\xda\x28\xf6\xf0\xe3\x7e\x64\xf9\xa3\x78\xb9\x62\x35\xe2\x4f\xb6\x8e\x7d\x96\x13\x63\xfb\xa2\x86\xfc\x38\x1c\x25\xcb\xaf\xd4\x51\xb2\x46\x51\x5a\x18\x80\x57\xdc\x13\xaa\xd9\xc1\x4a\xe8\x4a\x7b\xc8\x3d\x29\xbf\x51\x23\xe0\xcc\x76\xbc\x28\x64\x7d\x55\x1c\xe1\x5e\xa8\xd2\xca\xbc\xe9\x71\xdf\x0a\x23\x9f\xb3\x2a\x6f\x84\x56\x0f\x62\x3b\x3d\xa1\x1b\x85\x38\x6a\x35\x22\x8e\xe6\x50\x10\x79\xc3\x03\x43\x59\x69\x7a\x23\x96\x65\x9e\x9c\x16\xf4\xc2\xd9\x3a\x34\x7c\x98\x7b\xae\x1f\x9a\xa5\xa0\x66\x57\xcd\x97\xa2\x5a\x60\x96\xdd\x02\xab\xf2\x13\x2f\xbe\x69\xd7\xad\xa6\xbb\xc5\x8f\x32\x87\x0e\x96\xcd\x11\x9f\x5b\x52\x48\x53\xca\x55\x60\xfd\xb9\xfc\x0b\x66\x6e\xc0\xec\x7f\x8e\xf5\x0f\x14\xb6\x6d\xdb\x9c\x1b\xc8\xe5\x32\x07\xac\x20\x34\xcb\xbe\xe5\x04\x0d\x2b\x74\xfd\x02\xdb\x1f\xf7\x60\xa5\xc8\xb7\x9a\x6e\xd5\x65\x43\x3d\x8d\x87\x33\x07\x2c\xa7\x16\x59\x35\x6e\x96\xb9\xd5\x2c\xb0\x3b\x71\x81\x1d\x8e\x82\xc0\xb6\x9c\x4c\x69\x6f\x69\xb7\x79\x94\xfb\x81\xed\x3a\x05\x96\xdf\x92\xcb\x8c\xb8\x4e\xc8\x9d\xd0\x2c\x8f\x7a\xbc\xc0\x42\xfe\x56\x98\xf5\x1a\x96\xed\x0c\xb2\x4a\xdd\xf2\x03\x1e\x16\x5f\x2d\xef\x31\x9f\x5f\xc8\x93\x7c\xde\xe0\xbe\xb9\xdb\xa9\xb8\x55\xdb\xa9\x15\x58\xe6\x50\x23\xf2\xad\x86\xb9\xc7\xf5\x9b\x41\x81\x39\x5e\x1c\x06\xc5\x81\x41\xa6\xdc\xa2\xd3\x97\xcf\x15\x8b\x79\xb6\x69\x13\x93\x6e\x6e\x63\x31\x9f\x67\x3b\x58\x8e\x15\xe2\x78\xb8\xd8\x7f\xfb\x68\xa8\xb8\x55\xba\xcf\xc4\x69\x43\xf9\x1c\x3b\x75\x4a\x95\x0c\x17\xfb\x73\xcf\xb2\x1d\x2c\xcf\x0a\xac\x7f\x50\x3e\x66\x31\x4e\x6d\xba\x29\x26\xa9\x43\x33\xd4\x5a\x8a\x88\xb3\x4b\x91\xf8\xa9\x2f\x29\x5a\x0a\x89\xb3\x77\x41\xa0\xf3\x34\x2f\xc6\xa8\x4d\xb7\xc4\xfb\xa0\xf3\x62\x4c\x9c\xa6\x59\x9a\x96\xf8\x34\x5d\x17\x93\x62\x5c\x4c\x80\x2e\xd1\x35\xf1\x1e\xb5\x69\x0e\x74\x85\x5a\x62\x5c\x9c\xa6\xae\x2c\xfe\x5c\x75\x12\x67\x68\x96\xda\x8c\xe6\xa9\x4b\x37\xa9\x45\xdf\x50\x4b\x4c\xc8\x9e\x34\x0b\xfa\x28\x0e\x5a\x77\x1c\x46\xb3\x8c\xa6\xe3\x99\x73\xe2\x9c\x84\xdb\x71\xd1\x35\x31\x26\x29\x7c\x45\x1d\x6a\x8b\x31\xba\x4e\xb3\xf2\xf4\x0b\x6a\xc7\xc9\x2d\x45\xf0\xc3\x38\xf5\xd6\x1d\x27\x2b\xa6\x40\x5f\x53\x87\xa6\xa9\xa5\xea\x3f\x11\x1f\xa8\x54\xe9\x74\xa4\x73\x31\x3e\x9a\x88\x1d\xba\x01\xba\xbc\x94\xa5\x4c\xfa\x94\xba\xe2\xdc\x6d\x0e\x97\xe8\xa6\x98\x58\x08\x2f\x52\x57\x9c\xa1\x0e\x75\xa5\x18\x71\x6b\x9a\xa3\x79\x31\x29\x2b\xc5\x38\x75\xc4\x59\xba\x21\x57\x8a\x45\x91\xff\x52\xfa\x8c\xda\xd4\x59\xdc\xe2\x72\xbc\x53\x9b\xe6\xa9\x45\x33\x2c\x1e\x3b\x47\xf3\x31\xd8\x12\x13\x62\x52\x49\xd9\x03\x49\xab\x24\x9d\xa1\x96\x98\x92\x52\xfe\x4b\x4e\x57\x4e\x89\x97\xe9\x50\x4b\x8a\x76\x21\x76\xa6\x24\x09\x79\x31\xa0\xb9\xff\xfc\xd7\xd3\x6c\xcf\x3e\x5d\x79\xfd\x3d\x15\xb1\xca\x77\x27\xfd\x13\x00\x00\xff\xff\x78\x10\x91\x8b\x87\x08\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
