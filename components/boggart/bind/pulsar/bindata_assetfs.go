// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xff\x72\xdb\x36\xf2\xff\x3f\x4f\x81\xe1\x37\xfd\x4a\x9a\x8b\x48\xfd\x6a\xaf\xa3\x48\xbe\xb9\xda\xbd\x26\x33\x71\xe3\x49\xdd\xde\xf8\x3a\x1d\x0f\x44\x42\x12\x13\x12\x60\x01\x50\x8e\xcf\xa3\x77\xba\x67\xb8\x27\xbb\x01\x40\x52\x90\x44\xc9\x24\x45\xc6\xb4\x22\xce\xb4\xa1\x49\x60\xf1\xd9\xdd\x0f\x16\x4b\x0a\x20\x1e\x1e\x80\x83\xa6\x2e\x46\xc0\xb0\x09\xe6\x08\x73\x03\x2c\x97\x2f\x46\xcc\xa6\x6e\xc0\x01\xbf\x0f\xd0\xd8\x80\x41\xe0\xb9\x36\xe4\x2e\xc1\xd6\x47\xb8\x80\xea\xa6\x71\xf6\x02\x00\x00\xa6\x21\xb6\xc5\x1d\xb0\x80\x5e\x88\xfe\x41\xa8\x0f\x79\x13\xb7\xc0\x83\xbc\x2b\x0e\x8a\x78\x48\x31\xc0\xe8\x0e\xbc\xc5\xdc\x33\x7f\x0e\xfd\x09\xa2\x51\xc9\x96\x39\x8d\xab\xbc\x96\x35\x96\x2f\x46\x96\x6a\xe0\xec\xc5\xc8\x71\x17\xc0\xf6\x20\x63\x63\x83\x92\xbb\xa8\x45\xfd\xaa\x4d\xbc\xb6\xef\xb4\xbb\x3d\x20\xce\x98\x1f\x9f\x7d\x66\xed\x6e\x2f\x2a\xbf\x59\xe7\xf3\x6d\x00\x31\xf2\xb4\xbb\xdb\x25\x62\x63\xac\x97\x49\xca\x51\xe2\xa1\xb1\xc1\xe1\x24\x4d\x52\x52\x32\xf4\x62\x81\x18\x2e\x00\x86\x8b\x36\x87\x13\x06\x26\x90\xde\x8a\x13\x63\x25\xc6\x73\x59\x5a\x5b\x89\x24\xcf\x8d\xca\x06\x14\x31\x84\xb9\xf4\x85\xf1\xf0\x00\xdc\x29\x40\x7f\x02\x13\x2a\x17\x18\xc2\x79\x71\x9b\xe2\xda\x02\x89\x42\x08\x3b\x60\xb9\x3c\x1b\x41\x30\xa7\x68\x3a\xde\x51\x6f\xe5\xd9\xe1\x82\xb8\x4e\xb3\xd3\x7a\x2d\xea\x7a\x0c\x81\xe5\xf2\xe1\x01\x98\x1f\xd0\x9f\x21\x62\xdc\xfc\xf5\xc3\x3b\xf3\x0a\xf2\xb9\xba\xac\x84\x1b\x67\x42\x68\xf7\x7b\x0c\x8c\xf3\x90\x52\x84\x39\xf0\x11\x64\x21\x45\x3e\xc2\x9c\x19\xc0\x04\xcb\xe5\xc8\x82\x67\x23\xcb\x73\x4b\x50\x14\x52\x7b\x2e\xb4\x2b\xa8\xaf\x56\xbd\x88\xda\x7f\x53\x72\xc6\x91\x98\x34\x2b\xfc\x3d\x6e\xe1\x71\xc5\x47\x56\xe8\xed\xb8\xa3\x71\x92\xc3\x49\x7b\x37\x2b\xf7\xb1\x53\x97\x20\xae\x80\x29\x74\x10\x50\xe6\x02\x2e\xde\x23\x4d\x1c\x7b\x8d\xb7\xb7\xa6\x8e\xfe\x0e\x79\x9e\x01\x18\xbf\x17\xc8\xc8\x02\xd1\xa9\x47\xee\x86\x00\x86\x9c\x3c\xd2\xbe\x94\x24\x62\x44\x2c\x4a\x9c\xb7\xe7\x84\xba\xff\x26\x98\x43\x2f\xee\x45\xe2\xb2\x01\x7c\xc4\xe7\xc4\x19\x1b\x33\xc4\x0d\x10\x79\xc9\xd8\xe1\x45\x03\xb8\xce\x38\xd6\xa6\xad\xea\x63\xb2\x80\x9e\xeb\x40\x8e\x1e\x47\x25\x91\xb9\x38\x08\xe3\x38\x39\x77\x1d\x07\x61\x43\x45\xc2\xf1\xca\x4e\x18\xfa\x48\xf1\x93\x60\x03\x58\x87\x4b\x8e\x45\x4e\x29\xf1\x4b\x15\xc8\x49\x76\x71\xdb\x51\x78\x90\xc1\x95\xf1\x91\x74\x94\x0b\xc8\x11\xa0\x10\xcf\xa2\xbe\x92\x59\xc2\x68\xea\x22\xcf\x61\x88\x67\x6f\x74\x1b\x37\xe6\x94\x78\xed\x19\x25\x61\x90\x03\xfc\x1e\x59\xac\x80\x98\x4d\x51\xd2\x51\xed\x80\xa2\x40\x84\x15\xf5\x57\x51\x88\x89\x7c\x16\x40\x9c\x84\x4a\xc7\x69\x13\xac\x4b\x6e\x43\xc7\x21\xd8\x38\x1b\xb9\x49\x37\x83\x60\x0a\xdb\x36\xf4\x10\x76\x20\x35\xce\x46\x96\x7b\x36\xb2\x84\x94\x03\x40\xe8\x14\xe4\xe8\x33\x5f\xef\x82\xa2\xdb\x19\x6b\xdd\x3c\x32\x6a\xc2\x53\xd1\x93\x45\xa9\x5b\xc1\x7c\x53\xa5\x10\xc0\xe8\x75\x3a\xdf\x99\x9d\xae\xd9\xe9\x81\xee\xb7\xc3\xce\x40\x8e\x0a\x6d\x90\x14\xe6\x64\x6f\xd1\xcc\x94\xdf\x52\xc7\x72\xdc\x45\x01\xd6\xe4\xaf\x96\xb3\xca\xc8\xca\xd7\x37\x72\x88\x2f\xab\xdb\x5f\x21\xea\x12\xe7\xd4\xe5\x1f\xed\xf2\xf1\xa0\x79\xe7\x3a\x7c\x3e\x04\xdd\x4e\xe7\x9b\x83\xc2\x00\xf2\x90\xcd\x65\xb7\x0b\x22\x17\xa8\xd0\x1f\xff\x95\xd2\xfd\x80\xaa\xd4\x33\x00\x45\x7f\x86\x2e\x45\xce\xd8\x88\xcf\x0e\xc0\x22\xf1\x90\x60\xf5\xf0\x30\x36\x7c\x82\xf9\xdc\xbb\xd7\x32\x36\x05\x0b\x24\x77\x44\xd7\x56\x70\x04\x8a\xf8\x4c\xcb\xfa\x12\x86\x5d\xc6\x35\x54\x06\xa6\x1a\x2a\x15\xad\x03\xdd\x54\xac\xea\x7a\x76\xa4\x17\xaa\x7c\x65\x38\xe7\x24\xa4\xa9\x40\xa3\x1b\xd9\x91\xbe\x89\x2a\x94\x03\x75\x64\xa9\xb6\x4e\xd1\xf7\x80\xe8\xdb\xcb\xd1\x03\xff\x1f\x4f\x58\xf0\xfa\x14\x6e\xab\xc9\xb0\x26\x21\xe7\x04\x47\xd9\x0d\x0b\x27\xbe\xcb\x93\x70\x3a\xe1\x18\x4c\x38\x6e\xb3\xd0\xb6\x11\x63\xda\x83\xe2\x2f\x73\x72\x17\x77\x28\x25\xe1\xd4\x1d\xb2\x88\x1f\x59\x62\x88\xda\x5f\x2e\x83\xa8\x11\x87\x13\x0f\x69\x8f\xc8\x1e\x02\xf2\xff\x6d\xc6\xa9\x1b\x20\x07\x38\x90\x43\x75\xdd\xe1\x6d\x8a\x58\x40\x30\x13\x4f\xce\x98\xdc\x51\xb8\x39\x3e\x67\x1c\x9e\x47\x7c\x8e\xa0\x93\xa5\x1c\xcd\x68\x34\x3e\x3f\x5b\x7b\xa4\x8a\x29\xc5\xe7\x05\x04\xfc\x88\x11\x9d\xc5\x61\x7e\x42\x81\xb5\xba\xf5\x93\x2d\x1e\xb9\xf3\xc9\x56\x03\xcf\x8c\x03\xf3\x07\x17\x3b\xe6\x39\xc1\x53\x77\x66\xbe\x15\xbd\x8e\x9d\x93\x10\x73\xd0\x11\xf2\x74\x04\x57\xa1\xc7\x90\xea\x98\xe0\x1b\x99\x26\x62\xd7\x4b\xfe\xeb\xea\xb8\x28\xbc\x03\x4d\x55\xcb\x1f\xb1\x30\x38\xeb\x8f\x2c\xf1\x0f\xb0\x40\x20\xa4\x30\x03\x98\xad\x18\x6f\x32\xa6\x95\x04\xbc\x9b\x0f\x78\xaf\x36\xc0\x7b\xf9\x80\xf7\x6b\x03\xbc\x9f\x0f\xf8\xe0\x0b\x00\x1f\x59\x59\xba\xa9\x10\x9a\xb1\xd3\x4f\x88\x73\xff\x78\x39\xa9\x10\x9e\x21\xf0\xd2\x7d\x05\x5e\x32\x0e\x39\x18\x8e\x81\x29\x4e\x58\x26\xd8\xd9\x83\x4b\x06\xd4\x1a\x2a\x95\x65\xbe\x4c\xcb\xdd\x73\x0d\x34\xb1\x8b\xa5\x6e\xa6\x88\x6a\xa6\x4c\xea\xcd\x5f\x38\x75\xf1\x0c\xbc\x94\x1e\x36\x1c\xc8\xe6\x13\x02\xa9\x23\x13\xd9\x87\x07\xbd\xfc\x0d\x82\x34\x4f\xb3\xf1\xab\xdf\x4d\x15\x92\x94\x3e\xaf\x02\x1a\x96\x0b\x78\x1f\x01\x7c\x2a\xad\x72\xc2\xcf\xf6\x2b\x90\x43\xec\xd0\x47\x98\x9b\x77\xd4\xe5\xa8\xe9\x40\x8e\xae\x89\xd2\xa5\xd9\x58\xc7\xad\xbf\x85\x69\x77\xba\xed\x4e\xef\x5a\xbe\x85\x19\x76\xbe\x6d\x77\xfe\x3a\xec\x74\x84\xae\x8d\x56\x6b\xf5\x0b\x50\x1e\x0d\xb3\x47\x99\x91\x95\x95\xd1\xb9\xa8\x5f\xc8\x5e\xfa\xcf\x66\x89\xb5\xd4\x00\x0c\x96\xcb\x82\xb6\x50\x31\x54\x97\x75\x4d\x85\x7d\x3a\x66\x27\x3f\x09\xb4\x17\x87\x1e\x9c\x20\x0f\xc8\xff\xb7\x1d\x11\x7b\x68\x91\x9c\xbe\x64\x33\x5d\x20\x8f\xc3\x75\x5b\x01\xeb\xc9\x51\x29\x83\x17\xf3\x20\x50\x0f\xc7\xb9\xde\xb5\x6a\x91\xcb\xab\xda\xf5\xc9\x53\xcc\x93\x5b\xf9\xe4\x7b\xb0\x3d\x6a\x55\xea\x7b\x17\x4f\xb3\xfc\x64\xb7\x2d\xef\xe4\xf8\x0c\x78\x8a\x3b\x7e\x23\xde\x2b\xfb\x94\x1a\xef\xd1\x14\x86\xde\xbe\x1f\x9f\x77\x8b\xac\xdc\xf7\x95\x5b\xb9\x8a\xe4\x62\x35\x50\xef\x7d\x30\xae\x73\xa2\x22\x1f\xbe\xba\xbf\x11\x2f\xf4\xd1\x66\x6f\x04\x1b\xa5\x72\x66\xac\x3a\xa7\x95\x80\xa3\xcc\x61\x94\x6a\x75\x0b\x67\xba\xc1\x9f\x36\x87\xa9\xca\xf5\x75\xc8\x61\x4e\xbe\x5f\x1d\x69\x39\x4c\x55\xbe\x7f\xf2\x1c\xe6\xe4\xf8\xd5\x91\x96\xc3\xe8\xf6\x39\xb6\x1c\x66\xa7\xef\x9f\x6b\x0e\x53\xe4\xf5\xee\xee\x8c\x27\x73\x9a\xf0\x94\x19\x4f\x2f\x53\xc6\xd3\x3b\x34\xe3\xe9\x1d\x6f\xc6\xd3\xab\x65\xf0\xeb\xd5\x26\xe3\xa9\xc0\xf5\xb5\xc9\x78\x4e\xbe\x97\xc7\xce\x8c\xa7\x02\xdf\xd7\x23\xe3\x39\x39\x5e\x1e\x3b\x33\x9e\xde\x11\x67\x3c\x69\xbe\x3f\x65\x3c\xf1\x4f\xf1\xb5\xcf\x78\xfa\x99\x32\x9e\xfe\xa1\x19\x4f\xff\x78\x33\x9e\x7e\x2d\x83\x5f\xbf\x36\x19\x4f\x05\xae\xaf\x4d\xc6\x73\xf2\xbd\x3c\x76\x66\x3c\x15\xf8\xbe\x1e\x19\xcf\xc9\xf1\xf2\xd8\x99\xf1\xf4\x8f\x38\xe3\x49\xf3\xfd\x29\xe3\x89\xe7\xf0\xd5\x3e\xe3\x19\x64\xca\x78\x06\x87\x66\x3c\x83\xe3\xcd\x78\x06\xb5\x0c\x7e\x83\xda\x64\x3c\x15\xb8\xbe\x36\x19\xcf\xc9\xf7\xf2\xd8\x99\xf1\x54\xe0\xfb\x7a\x64\x3c\x27\xc7\xcb\x63\x67\xc6\x33\x38\xe2\x8c\x27\xcd\xf7\x47\x9e\xf1\x64\x9b\xfb\x9f\x4b\xde\xe3\xb3\xff\x47\x96\x5c\x90\xb4\xbf\x50\xc6\x49\xdf\xf5\x5e\x00\x05\xf2\xac\x53\x00\x9b\xeb\x98\x2e\x57\x9f\xa0\xc9\xbb\x66\x69\x4b\xd6\x6f\x82\xf5\xb9\x57\x55\x3d\xcd\xca\x10\x90\xdf\x6a\xce\xfa\xf2\x31\x00\xb1\x03\xb8\xeb\xaf\x34\xce\xbd\x04\x44\x7e\x7b\x41\x88\x30\x7f\xa4\x94\xe4\x5a\xaf\x10\x41\x4a\x48\x89\x3e\xf3\x24\xa9\x8d\xbf\xea\xb0\x92\x9c\xc8\xcf\x8d\xb2\xd0\xa2\x88\x3c\x6d\x24\x95\x4a\x59\x49\xb1\xd2\x5b\x92\xb1\xc2\xe5\x14\xf1\xa1\x3c\x89\x91\xd6\x74\x34\x7c\xe5\x35\x9b\xb2\x02\xa7\x04\xcf\x52\xdd\x9a\x5b\x18\x58\x5b\x2d\x56\x06\x3c\x5d\x6a\xf7\x7b\x7c\xe5\x85\x14\x7a\xc0\xf8\xcb\x37\x0e\x60\xc8\x26\xd8\x31\xf4\x3f\x98\xb1\xd5\xea\xcb\xb5\x95\x67\x9b\x77\x0b\x22\x2a\x48\xd3\x3d\x0a\xe9\xfa\x3c\x89\x3a\xd9\x47\x6c\xfd\x18\x59\x8a\x3e\x85\x58\x5c\xa0\xcd\xfc\xd1\x24\x57\x26\x92\x79\xed\x5d\xd1\x30\x7e\x8d\xfc\x00\x51\xc8\x43\x2a\xbf\xf2\x55\x3c\x8e\xf3\x95\xa0\x5b\x17\x97\x1f\xcd\xd3\xe4\x7f\xf9\x98\x5e\x46\x2a\xbc\xa9\x8a\x0c\xd3\x1b\x8f\x42\x89\x7f\xfe\xfb\x9f\x73\xa3\x90\x82\xf5\xa5\x19\x09\x79\x49\x3c\x23\x21\xaf\x96\x68\x49\x03\x47\xc0\x34\xa1\xcb\xd7\x46\x35\x47\x0c\x42\x25\x91\x4d\xca\xaa\x96\x6e\x5a\x13\x47\x40\x38\xa5\xcd\xd7\x40\xb9\x2b\x72\x87\xe8\x01\x34\x0b\x44\xfd\xf2\xa9\xa5\x89\x7d\xa6\x74\x52\x1a\xec\xa5\xd0\x4f\x36\xf4\xac\xf9\x31\xb0\x68\xed\x7b\x2a\x45\x68\x84\xa4\x80\xf2\x79\xa4\xcb\x7d\xa6\x44\x8a\x54\x78\x94\x49\xc7\xc0\xa3\x73\x18\x40\xdb\xe5\x87\x30\xc9\x8e\x44\x94\xcf\xa5\x75\xc9\xcf\x94\x4d\x89\x12\x3b\xf8\xb4\xeb\x0b\x32\x46\xeb\x18\xe8\x45\x30\x0b\xfd\x40\x7d\xa6\xb8\x38\xc3\x56\x52\x2a\x20\xd9\xa6\xf0\xe7\xca\x33\x4d\x8f\x9c\x54\xb3\xe6\x35\x22\x5b\xb6\x4f\x7b\x55\x9d\xa4\x3d\xfe\xb1\xb0\x42\xb9\x5b\xc8\x3c\xf1\x18\x1f\x84\xfc\xb6\x5b\x41\x0e\xb7\x2d\xfe\x99\x92\x79\x5d\x93\xbd\x23\x71\xfc\x99\xad\x1a\xf1\xb7\xf4\xef\xc1\x3d\x29\xdb\x7b\x65\xb0\xbd\x57\x2d\xdb\x7b\x47\xc3\xf6\xde\xd7\xcd\xf6\x1c\x2b\x17\xaa\x61\x7b\xbf\x0c\xb6\xf7\xab\x65\x7b\xff\x68\xd8\xde\xff\xba\xd9\x9e\x63\xd6\x6a\x35\x6c\x1f\x94\xc1\xf6\x41\xb5\x6c\x1f\x1c\x0d\xdb\x07\xc7\xcc\xf6\xe2\x14\x7d\x2f\xdf\x02\xbb\x78\x76\xe8\xf4\x10\x12\x0b\xba\xad\x66\x92\x48\x9a\xfc\x2f\x4f\xcb\x14\x24\x6a\xf2\x46\xf4\xb5\xcf\xba\xd0\x27\xef\x24\x2b\x60\x13\x8f\x05\x10\x8f\x8d\x9e\xb1\xe6\x02\x1b\x61\x1e\xb9\x20\x9a\x4e\xe4\xc2\x19\x26\x8c\xbb\x76\x35\xb3\xa7\x80\x36\xe3\x28\x69\xea\x76\x02\x39\x47\x34\xe7\x6b\xae\xbc\xbd\x62\xa7\x11\x14\x0f\xc1\xa6\x41\x76\x02\x2c\xc0\xcb\x7c\x91\x21\x07\x7b\x0f\x78\xcd\xed\x07\xfc\x1e\x44\x8a\x1d\x32\x71\x6c\xdb\x4a\x71\x28\x2e\x2b\x3a\x28\xc0\x37\x88\x15\x84\x59\x30\x1c\xac\xc1\xd9\xde\x0b\xe0\x67\x52\x14\x4e\x0d\x42\x82\x4e\x84\x1f\xaf\x3e\xbc\xbf\x04\x14\x41\x6a\xc9\x81\x16\x20\xc1\xef\x72\x28\x81\x50\x40\x89\x7f\x62\xc4\x23\x70\xea\xc5\x88\x0f\x88\x21\x0e\x6c\x91\x47\x23\x5a\xd4\xc4\x1b\x44\x88\xa5\x9d\xa8\xf0\x08\x9c\x7a\x51\xe1\x7a\x8e\xa8\x4f\x7c\xc4\x11\x05\x6f\x31\x98\x50\xf2\xe9\xa0\x59\xc6\x2b\x42\xf0\x95\x64\x7d\xf6\xd5\x89\x16\xe9\x70\xea\x4b\x8b\xf7\x21\xaf\x8a\x17\xfa\x5c\xa9\x13\x31\xd2\xe1\xd4\x8b\x18\x3f\xa3\x19\x94\x5b\xd5\x6a\x33\x90\xd8\xc1\xf3\xbf\x34\x7a\xe0\xa8\x81\x8d\x69\x4d\x27\x76\xa4\xc3\x79\xda\x97\x17\xe5\xae\x8f\xda\xdf\xe6\x9e\xed\xa3\x76\xdc\x4a\xb9\xbc\x71\x49\xfb\x33\x3a\x8d\xfe\x59\xc1\x79\xa1\x6d\xca\x3e\x47\xd0\x49\xb6\x1d\xc9\xb6\x15\xf3\xc3\x03\x60\x1c\x72\xd7\x7e\x73\x7d\xf9\x0e\x34\xd5\xf9\xaf\x1f\xde\x01\xc3\x4a\xf6\x14\xb1\x20\x63\x88\x33\x6b\x81\xb0\x43\x28\xb3\x26\x84\x70\xc6\x29\x0c\xe4\x1e\xac\x72\x57\x99\xc0\xb5\x3f\x21\x6a\xd9\x8c\x59\x1b\xd7\x4c\xdf\xc5\xa6\xcd\x98\x01\xa6\xd0\x63\xa8\xa5\xc1\x8b\x34\x48\xd7\xe5\x23\xfb\x02\x9a\x88\x38\x8f\xb9\xf5\x31\x3e\x93\x60\x3f\x6e\x61\x2d\xdf\x50\x1f\xd3\xed\xb4\xde\xf4\x8a\x06\x99\xde\x56\xae\x11\xe9\x65\x33\x7e\x79\xd9\x32\x29\x82\xce\x7d\x33\xd9\x7a\xbf\xa9\x6f\xb7\xbf\x2a\xdf\xf8\x3f\x7d\x67\xdd\x46\xcb\xdc\x00\xd8\xdc\xae\x24\x0e\xee\xfa\xe8\x4a\x16\x78\x8b\x6d\xb5\x7a\x6e\x08\xbe\xeb\xbc\x4a\x2d\xec\xbb\xf8\x02\x72\x34\x04\xca\xdc\xcd\x96\xc9\xc2\x09\xa7\xd0\xe6\xcd\x6f\x5f\x81\xc6\x3d\x82\xb4\xd1\xda\x51\x15\x7e\xde\xa8\x8a\xb0\xf3\x7e\xda\x6c\x38\xf0\x7e\x57\x1d\x61\xa9\xfb\x1f\xe4\x36\x79\xe7\x22\xbe\x21\x36\x04\x0d\x6d\x63\xbd\x46\x7a\x35\x8f\xd8\xd0\x43\xc3\x14\x2b\xc5\xc7\x54\xbe\x04\x1e\x82\xc6\xcd\xcd\xcd\x8d\x79\x79\x69\x5e\x5c\x80\x37\x6f\x86\xbe\xdf\x48\xad\xb2\x4c\x6f\x47\x1a\x97\xed\x6b\xa7\xb1\x4a\x78\x88\x03\xe5\x5b\x12\x63\xc3\x2d\x06\x30\x26\x64\x36\x83\x94\xcb\xf5\x5b\x43\xf0\xfb\xca\xb6\x1c\x52\xbe\x32\x51\x62\xb9\x3f\xd2\xe1\xac\x37\x78\x83\x18\x47\xb4\x40\xa3\xb1\x43\xbb\xaf\x80\x68\x98\x35\x76\x03\x49\x2d\xac\xbb\x35\x13\xd2\xeb\xb9\xcb\xc0\x1d\x42\x9f\x8a\x9a\xc7\x65\xe4\x9f\x08\x7d\x5a\x43\x16\xa1\x48\x6e\x65\x42\xf2\x0e\x32\x5e\x08\x89\x6e\x86\xa4\xc9\xfd\x00\x77\xd4\x29\x84\x5b\x5a\x50\xee\xbb\x55\xd4\x84\xb2\x72\x9a\x01\xa3\x1b\xd9\xcd\x57\x08\x86\x6e\x8b\xa8\xc5\x7d\xd8\x52\xcb\x17\x00\x2c\xed\x26\x82\x56\x51\xb3\x45\x01\x6f\xcb\x6a\xea\x7a\x76\xa3\x15\xc1\xa0\xdb\x40\xb5\xb7\x07\x57\x5a\xe9\x75\xac\x59\x03\xdf\xb2\xf5\xfa\xc5\xde\xd1\x47\xc4\xd6\x86\x6c\xd1\x77\xb9\x36\x6a\xa1\xb4\x61\x4b\x1c\x0b\x48\x81\x13\x80\xf1\x8e\x31\x0c\x8a\x58\xb2\x66\x95\x46\x1a\x84\x34\x18\xea\xb7\xd5\xdf\xd5\x96\xd7\x53\x4a\x7c\xe3\x8f\x46\xcb\x5c\x40\xaf\x19\x19\xc6\x09\x94\xcd\xc4\xc8\xd4\x32\xd5\xa8\xd0\x94\x83\x42\xfb\xf2\xb2\x7d\x71\xf1\xfb\xf5\x1f\x72\x58\x18\x32\xf6\xaf\x46\xab\x95\xbe\x99\xee\xde\x56\x39\x49\x69\x13\x61\xa7\x70\x8b\xcb\x8d\x6b\xfa\xdf\xeb\x4b\x7f\x53\x32\xb4\xff\x05\x00\x00\xff\xff\x23\x2b\x80\x37\x01\x88\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x6c\x1b\x45\x14\xfe\xe2\xad\x6d\x30\x29\x3f\xe5\xa7\xe5\xa7\xd5\x94\x2a\x85\x52\xb9\xb6\x93\xaa\x42\x8e\x9d\x00\x69\x5a\x2a\x6a\x11\x5a\xd3\x33\x8b\x3d\xd8\x2b\xec\x5d\x6b\x7f\x1a\x2c\xe5\x10\x27\x54\xa1\x04\xa9\x88\x82\xe0\x50\x91\xb6\x07\x2a\x21\x21\x39\x69\x0d\x6e\x1a\x3b\x12\x42\xdc\x90\xde\x1c\x38\xd2\x1b\x1c\x90\xb8\x21\xb8\x20\x81\x66\x67\x13\xd7\xa9\xe8\x1c\x76\xde\xfb\xde\x9b\xef\x7d\xef\xcd\xec\xed\x1d\xdb\x3e\x03\x80\x3d\x00\x9e\x01\x30\x38\x00\x1c\x00\xf0\xcf\x00\xfc\x75\x39\x04\x3c\x06\xe0\x4a\x08\x78\x02\xc0\xb7\x21\x20\x0a\xe0\xa7\x10\x70\x1f\x80\x9f\x43\xc0\x03\x00\x6e\x07\x79\xbf\x87\x80\x30\x80\x7f\x43\xc0\x36\x00\x61\x0d\xd8\x0e\x20\xa6\x01\x31\x00\xbb\x34\x20\x02\x60\x9f\xa6\xe2\x2f\x04\x7e\x22\xd8\x8f\x68\x8a\x2f\xab\xa9\x3a\x27\x34\xe0\x41\x00\x6f\x04\xf1\xb7\x34\xc5\x5f\x0a\xf0\x6a\xc0\x33\xa3\x01\x8f\x00\x68\x04\xf8\x45\x0d\x78\x08\xc0\xd5\x20\x7f\x25\xd0\xd1\xd6\x54\x1f\x3f\x06\xf1\x5f\x02\xde\x3f\x34\x60\x7c\x00\xf8\x53\x03\x46\x00\x1c\x0e\x03\x47\x00\x94\xc3\x4a\xf7\x52\xb0\x7f\x1d\x06\x06\x01\xb4\xc2\xc0\x3e\x00\xdf\x87\x81\x87\x01\xfc\x16\x56\xf3\xf8\x3b\xac\xf8\x25\xe9\x4e\x00\x3b\x23\x4a\x4f\x22\xa2\xe2\x63\x11\xd5\xdf\xf1\x00\x3f\x1d\x51\x73\x7b\x3b\xa2\x78\xa6\x23\xc0\x6e\x00\x1f\x44\x54\x9d\xaf\x02\xfc\x7a\x04\x60\x00\x7e\x08\xfc\x5f\x23\xc0\x5e\x00\x7f\x45\x94\x8e\x5d\x51\xe0\x39\x00\x99\xa8\x8a\x17\xa3\x8a\xdf\x8b\x02\xcf\x02\x78\x3f\xaa\xe6\x73\x2d\x0a\xec\x00\x70\x33\x0a\xc8\x2b\x96\x1a\xe5\xfc\x06\x95\x64\x7f\x85\xa0\x38\xa4\xde\xa7\xa0\x78\x9e\x04\xf0\xb4\xac\x03\x35\xcf\x3d\xe8\xad\x68\xb0\xcb\xbe\x65\x2f\x72\x4e\x8f\x42\xf5\x29\x97\xac\xb7\x3b\xb0\xb7\x07\xef\xec\xfe\x3b\xce\x3f\x8e\xfe\x25\x75\x6a\x50\xf7\x83\xa1\x22\x73\x78\xc1\x32\x8b\x3d\xcb\xc1\xc1\x1e\x7a\xf0\x0e\xf8\x65\xbb\x50\x36\xce\x72\x4c\xe8\x35\xbd\x60\xb8\x75\x4c\x58\xa6\xe3\x55\x6b\xae\x61\x99\x98\xf0\x6c\x9b\x9b\x2e\xab\x72\xdd\xf1\x6c\x5e\xe5\xa6\xeb\xe0\xa8\x6e\x54\xea\x38\xaa\xbb\xdc\xff\x30\xdd\x2c\x32\xd7\xa8\x06\x9e\xad\x9b\x25\x8e\x49\x93\xdb\xa5\x3a\x8e\x17\xf4\x8a\xff\x49\x94\xf1\xaa\xe5\xd9\x95\x3a\x72\x3d\x2a\xe4\x2c\xd3\x2d\x57\xea\x78\xbd\xc6\x6d\xdd\x35\xcc\x92\xe2\x99\xe2\xb6\x61\x15\x31\x65\x4d\x73\x1b\x53\x5e\xc5\xe1\xcc\x30\x6b\x9e\xcb\x86\x8a\x38\x5d\xb6\xa6\x91\xe7\x55\xff\x84\x67\x73\x56\xe4\x15\x57\xef\x43\x0c\xb3\xcf\xb5\x3c\x17\x67\xf4\x8a\xc7\x51\xcd\x38\x5e\x6d\x6c\x24\x93\x90\x5b\xbf\xc7\x12\xac\x26\x0b\x39\xfd\x70\xa2\x8c\x00\x3e\xc5\x6b\x96\xed\xc6\x73\x4e\xc9\x28\xc6\x5f\xf1\x4a\x4e\x3c\x6f\xa5\x59\x91\x9f\x7d\xe9\x5d\xa3\xac\x57\xad\x43\xb6\x17\x3b\xa9\x3b\x6e\x3c\x6f\xeb\xa6\x53\xd1\x5d\xcb\x4e\xb3\xd7\xfc\x10\xcb\x79\xb6\x5e\xb5\x8a\x16\xcb\xf4\xe5\x8f\xc5\x4e\xea\x66\xc9\xd3\x4b\x3c\x9e\xe7\x7a\x35\xcd\x36\xfd\x34\x3b\xe5\x39\x8e\xa1\x9b\xb1\xdc\x89\xdc\x64\xfc\x0c\xb7\x1d\xc3\x32\xd3\x2c\x75\x28\x19\x9b\xb0\x4c\x97\x9b\x6e\x3c\x5f\xaf\xf1\x34\x73\xf9\x7b\x6e\xa2\x56\xd1\x0d\x73\x94\x15\xca\xba\xed\x70\x37\xfb\x66\xfe\x58\xfc\xc5\x5e\x9e\xd4\xf3\x0e\xb7\xe3\x93\x66\xc1\x2a\x1a\x66\x29\xcd\x62\x53\x15\xcf\xd6\x2b\xf1\x63\x96\x5d\x75\xd2\xcc\xac\xf9\xae\x93\x1d\x19\x65\xca\xcc\x9a\x43\xa9\x64\x36\x9b\x62\xfb\xf7\x33\x69\x26\xf7\x66\x53\x29\x36\xce\x92\x2c\xed\xfb\x63\xd9\xe1\x8d\x50\x26\x7b\x58\x9a\xcf\xfb\x69\x99\x54\x92\xcd\xcc\xa8\x23\x63\xd9\xe1\xe4\x01\x36\xce\x52\x2c\xcd\x86\x47\xe5\x43\x14\x0d\x6a\xd1\xaa\x98\xa7\x0e\xdd\xa0\xe6\x56\x44\x2c\x6e\x45\xfc\x67\xba\xe5\xd0\x56\x48\x2c\xde\x05\x81\x3e\x16\xb3\xe2\x1c\xb5\x69\x05\xf4\x25\x2d\x8b\x0f\xa9\x45\x6b\xa0\xcb\xd4\x14\x0d\x71\x8e\xba\x32\xe5\xaa\xca\x17\xe7\xa9\x4d\x2d\x46\xeb\xd4\xa5\x55\x6a\xd2\x77\xd4\x14\x73\xd4\xa2\x5b\xd4\x06\x5d\x11\xf3\x62\x8e\xba\x62\x81\x3a\xd4\x14\x17\x40\x9f\xfa\xd1\xe6\xa6\xc1\xa8\xcd\x68\x45\xcc\x4a\x7e\x15\x6f\x53\x93\xd6\x7d\x9e\x2e\x75\x98\x54\x2c\xe6\x40\xdf\x50\x87\x5a\x62\x96\xae\x53\x5b\xa6\x5d\xf4\x4b\xdd\xda\x34\x12\x62\x01\x74\x4d\xaa\xa3\x2e\xad\xa8\x52\x4b\x5b\x05\x89\x8f\x40\x97\xa8\x25\x1a\xe2\x42\x4f\xd0\x27\x1b\xb5\x99\x8f\xcc\x52\x93\x96\xa9\x2b\xe6\x68\x55\xea\x5f\xf2\x8b\xb6\x55\xc3\x97\xa8\x2b\xce\x53\x87\xba\xa2\x21\xe6\x24\xd9\x17\xb4\x46\xeb\x62\x5e\x32\x8b\x06\x75\xc4\x22\xdd\x94\xcd\xf8\xf3\x91\x3f\x5a\xbf\x04\x79\x42\xf1\xb5\xfc\x06\x6f\x30\x5f\xd6\x1a\xad\xfb\xa0\xcc\x98\x57\x53\xed\x83\xe4\xae\xa6\x2b\x47\xb1\x20\x55\xfd\x4f\x4e\x97\x96\x15\xb0\xd1\xdb\xe7\xbe\xb1\x40\x2d\xea\xc8\x3b\x02\xad\xdd\xf3\xef\xa5\x76\x5f\x3f\x5d\x79\xf9\x7d\x27\xfc\x29\xdf\x9d\xf4\x5f\x00\x00\x00\xff\xff\x78\x91\x38\x72\xcc\x07\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
