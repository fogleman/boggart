// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7f\x6f\xe2\x38\x1a\xfe\xbf\x9f\xc2\xca\x75\x0f\xd0\x0d\x09\x50\x76\x6f\xc5\x84\x9e\xee\xa6\x7b\x3b\x2b\x4d\x6f\xab\xdd\xee\x4a\xdd\xd1\xa8\x32\xb1\x29\x99\x4b\xec\x8c\xed\xd0\xe9\x55\x7c\xa7\xfb\x0c\xf7\xc9\x4e\xb6\x93\x60\x20\xd0\x24\x90\x29\x65\xb0\x34\xd3\x90\xd8\xcf\xfb\xeb\xf1\x9b\x37\x90\x38\x8f\x8f\x00\xe1\xb1\x4f\x30\xb0\x3c\x4a\x04\x26\xc2\x02\xb3\xd9\x89\xcb\x3d\xe6\x47\x02\x88\x87\x08\x0f\x2d\x18\x45\x81\xef\x41\xe1\x53\xe2\x7c\x84\x53\xa8\x0f\x5a\xe7\x27\x00\x00\x30\x8e\x89\x27\x8f\x80\x29\x0c\x62\xfc\x4f\xca\x42\x28\x9a\xa4\x05\x1e\xd5\x51\xd9\x18\x16\x31\x23\x80\xe0\x7b\xf0\x13\x11\x81\xfd\xaf\x38\x1c\x61\x96\xf4\x6c\xd9\xe3\x74\xc8\x6b\x35\x62\x76\xe2\x3a\x5a\xc0\xf9\x89\x8b\xfc\x29\xf0\x02\xc8\xf9\xd0\x62\xf4\x3e\x91\x68\xee\xf5\x68\xd0\x0e\x51\xbb\xdb\x03\x72\x8b\x87\xe9\xd6\x67\xde\xee\xf6\x92\xfe\xcb\x63\x3e\xdf\x46\x90\xe0\xc0\x38\xba\xda\x23\x75\xc6\x62\x9f\xac\x1f\xa3\x01\x1e\x5a\x02\x8e\xf2\x90\xb2\x9e\x71\x90\x02\x12\x38\x05\x04\x4e\xdb\x02\x8e\x38\x18\x41\x76\x2b\x37\xac\x39\x4c\xe0\xf3\x3c\x59\x19\x52\xe0\x27\x7d\x23\x86\x39\x26\x42\xc5\xc2\x7a\x7c\x04\xfe\x18\xe0\x4f\xc0\x86\x3a\x04\x96\x0c\x5e\x2a\x53\xee\x9b\x62\xd9\x09\x13\x04\x66\xb3\x73\x17\x82\x09\xc3\xe3\xe1\x9a\x71\xf3\xc8\x0e\xa6\xd4\x47\xcd\x4e\xeb\xb5\x1c\x1b\x70\x0c\x66\xb3\xc7\x47\x60\xff\x82\x3f\xc5\x98\x0b\xfb\xb7\x5f\xde\xd9\x57\x50\x4c\xf4\x6e\x0d\x6e\x9d\x4b\xd0\xee\xf7\x04\x58\x6f\x62\xc6\x30\x11\x20\xc4\x90\xc7\x0c\x87\x98\x08\x6e\x01\x1b\xcc\x66\xae\x03\xcf\x5d\x27\xf0\x77\x60\x28\x64\xde\x44\x5a\x57\xd1\x5e\x63\x78\x15\xb3\xff\xa6\x71\x86\x09\x4c\x9e\x17\xfe\x9e\x4a\x78\xda\x70\xd7\x89\x83\x35\x47\x0c\x4e\x0a\x38\x6a\xaf\x67\xe5\x26\x76\x9a\x08\x72\x0f\x18\x43\x84\x81\x76\x17\xf0\xc9\x06\x34\xd9\x36\x3a\x6f\xe3\x48\x53\xfb\x7b\x1c\x04\x16\xe0\xe2\x41\x6a\x46\xa7\x98\x8d\x03\x7a\x3f\x00\x30\x16\xf4\x09\xf9\x0a\x49\xe6\x88\x14\x4a\x6e\xb7\x27\x94\xf9\xff\xa1\x44\xc0\x20\x9d\x45\x72\xb7\x05\x42\x2c\x26\x14\x0d\xad\x3b\x2c\x2c\x90\x44\xc9\x5a\x13\x45\x0b\xf8\x68\x98\x5a\xd3\xd6\xe3\x09\x9d\xc2\xc0\x47\x50\xe0\xa7\xb5\x52\x9a\xf9\x24\x8a\xd3\x3c\x39\xf1\x11\xc2\xc4\xd2\x99\x70\x38\xf7\x13\x81\x21\xd6\xfc\xa4\xc4\x02\xce\xf6\xc8\x29\xe4\x98\xd1\x70\xa7\x80\x82\x16\x87\x5b\xcd\xc2\xfd\x02\xa1\x4c\x5b\x36\x51\x2e\xa0\xc0\x80\x41\x72\x97\xcc\x95\xc2\x08\xee\xd8\xc7\x01\xe2\x58\x14\x17\xba\xaa\x37\x11\x8c\x06\xed\x3b\x46\xe3\xa8\x84\xf2\x1b\xb0\x78\x05\x98\x65\x28\x15\xa8\x76\xc4\x70\x24\xd3\x8a\xfe\x54\x55\xc5\x0c\x9f\x47\x90\x64\xa9\x12\xa1\x36\x25\x26\x72\x1b\x22\x44\x89\x75\xee\xfa\xd9\x34\x83\x60\x0c\xdb\x1e\x0c\x30\x41\x90\x59\xe7\xae\xe3\x9f\xbb\x8e\x44\xd9\x42\x09\x93\x82\x02\x7f\x16\x8b\x53\x50\x4e\x3b\x6b\x61\x9a\x27\x4e\xcd\x78\x2a\x67\xb2\xec\x75\x2b\x99\x6f\xeb\x12\x02\x58\xbd\x4e\xe7\x3b\xbb\xd3\xb5\x3b\x3d\xd0\xfd\x76\xd0\xe9\xab\xb3\x42\x1b\x64\x9d\x05\xdd\xd8\xb5\x30\xe5\x57\xcc\x71\x90\x3f\xad\xc0\x9a\xf2\xc3\x4a\x0e\x71\x9d\x72\x73\xa3\x04\xfc\xae\xa6\xfd\x15\x66\x3e\x45\xc7\x29\xff\xe4\x94\x4f\x4f\x9a\xf7\x3e\x12\x93\x01\xe8\x76\x3a\xdf\x6c\x95\x06\x70\x80\x3d\xa1\xa6\x5d\x94\x84\x40\xa7\xfe\xf4\x53\xce\xf4\x03\x7a\x50\xcf\x02\x0c\x7f\x8a\x7d\x86\xd1\xd0\x4a\xb7\xb6\xd0\x45\xe9\x43\xa3\xf9\xc5\xc3\xd0\x0a\x29\x11\x93\xe0\xc1\xa8\xd8\xb4\x5a\x20\x3b\x22\xa7\xb6\x56\x47\x6a\x91\x6e\x19\x55\x5f\xc6\xb0\xcb\x74\x84\xae\xc0\xb4\xa0\x9d\x6a\x8b\xa0\x9f\xab\xab\xde\x5f\x5c\xd3\x0b\xdd\xbf\x36\x3d\x27\x34\x66\xb9\x8a\x26\x07\x8a\x6b\xfa\x36\x19\xb0\x1b\x55\x5d\x47\xcb\x3a\x66\xdf\x2f\x94\x7d\x2b\xe6\xcf\x3f\x93\x11\x8f\x5e\x7f\x3d\x29\x77\x0b\x46\x8f\x62\x21\x28\x49\x2a\x1c\x1e\x8f\x42\x5f\x64\x29\x75\x24\x08\x18\x09\xd2\xe6\xb1\xe7\x61\xce\x8d\x8b\xc5\x5f\x27\xf4\x3e\x9d\x54\x1a\xe1\x38\x25\x8a\xc0\xbb\x8e\x3c\x4d\x6d\xee\x57\x00\xca\x15\x70\x14\x60\xe3\x32\x39\xc0\x40\xfd\xdf\xe6\x82\xf9\x11\x46\x00\x41\x01\xf5\x7e\x24\xda\x0c\xf3\x88\x12\x2e\xaf\x9e\x09\xbd\x67\x70\xf9\x1c\x5d\xf0\x14\xed\x8a\x09\x86\xa8\x48\x3f\x56\xd0\x69\x62\x72\xbe\x70\x59\x95\x52\x4a\x4c\x2a\x00\xfc\x40\x30\xbb\x4b\x53\xfd\x88\x01\x67\x7e\xe8\x47\x4f\x5e\x76\x6f\x81\x7d\x15\x07\x1c\xeb\x29\x07\xbe\x51\x45\x20\xf1\x83\xec\x5f\xd7\x94\xc8\xe0\x3d\x68\xea\x51\xa1\xcb\xe3\xe8\xfc\xcc\x75\xe4\x1f\xe0\x80\x48\xa2\x70\x0b\xd8\xad\xba\x34\xe9\xed\x8d\x26\x67\x7b\xa3\x49\xbf\x3e\x4d\x5c\xa7\x08\xd5\x25\x56\xc1\x89\x33\xa2\xe8\xe1\xe9\x7e\xca\x0e\x72\x87\xc1\xa9\xff\x0a\x9c\x72\x01\x05\x18\x0c\x81\x2d\x37\x78\x91\xab\x93\x12\x13\xb4\x80\xd6\x86\x56\xba\x5a\x3b\xcd\xab\x81\x4b\x25\xeb\x34\xb2\xca\x36\x5b\x66\x06\x5b\x15\xc7\xf6\xaf\x82\xf9\xe4\x0e\x9c\xaa\xc0\x5a\x08\xf2\xc9\x88\x42\x86\x54\x41\xf8\xf8\x68\xf6\xbf\xc1\x90\x95\x11\x9b\x7e\x85\xba\x6c\x42\x56\x1a\x97\x35\xc0\xd0\xe5\x02\x3e\x24\x0a\x3e\x97\x55\x25\xd5\x2f\xf6\x6b\x0a\xa2\x5e\x1c\x62\x22\xec\x7b\xe6\x0b\xdc\x44\x50\xe0\x6b\xaa\x6d\x69\x36\x16\xf5\x36\xbf\xcd\x68\x77\xba\xed\x4e\xef\x5a\x7d\x9b\x31\xe8\x7c\xfb\x47\xe7\xaf\x83\x4e\x47\xda\xda\x68\xb5\xe6\xbf\xa4\x94\xb1\x50\xd5\xfc\x05\x4f\xd3\x45\x19\x5d\x8a\xfa\x95\xfc\x65\xfe\xfc\x94\x79\x4b\x9f\xc4\xc0\x6c\x56\xd1\x17\xfe\x18\xdc\x89\x05\xac\x6b\x26\xfd\xd3\xb1\x3b\xe5\x49\x60\x7c\x01\x17\xc0\x11\x0e\x80\xfa\xbf\x8d\x64\xee\x61\x55\xea\xe2\x1d\xbb\xe9\x02\x07\x02\x2e\xfa\x0a\x38\xcf\xae\x95\x76\x78\xb5\x08\x02\x7d\x91\x59\xea\x3b\x4b\x23\x73\x05\x75\x87\x3e\xbb\x12\x78\x76\x2f\x1f\x63\x0f\x56\xcf\x5a\xb5\xc6\xde\x27\xe3\x22\x3f\x7d\xad\xe2\x1d\x03\x5f\x40\x9f\xea\x81\x5f\xca\xf7\xda\x3f\x3b\xcd\xf7\x78\x0c\xe3\x60\xd3\x8f\xb8\xeb\x21\x6b\x8f\x7d\xed\x5e\x3e\xa0\xe2\x42\x5d\x27\x75\x7f\xa7\x41\x1c\xe2\xe5\x19\x04\x96\x7a\x95\xac\x32\x4d\x1e\x6a\x80\x83\xac\x3b\xb4\x69\xfb\x96\x82\x4c\x87\x3f\x6f\xdd\x51\x57\xe8\xf7\xa1\xee\x38\xc6\x7e\xde\xf2\xea\x8e\xba\x62\xff\xec\x75\xc7\x31\xf0\xf3\x96\x57\x77\x98\xfe\x39\xb4\xba\x63\x6d\xec\x8f\x75\x47\x49\x27\xf6\x0a\xd5\x1d\xbd\x6d\xeb\x8e\xde\xe1\xd6\x1d\xbd\xbd\x4c\x41\xbd\xbd\xa9\x3b\x6a\x08\xfd\xde\xd4\x1d\xc7\xd8\xab\xb6\xb6\xee\xa8\x21\xf6\xfb\x51\x77\x1c\x03\xaf\xda\xda\xba\xa3\x77\xc0\x75\x47\x5e\xec\x8f\x75\x47\x49\x27\x9e\x15\xaa\x3b\xce\xb6\xad\x3b\xce\x0e\xb7\xee\x38\xdb\xcb\x14\x74\xb6\x37\x75\x47\x0d\xa1\xdf\x9b\xba\xe3\x18\x7b\xd5\xd6\xd6\x1d\x35\xc4\x7e\x3f\xea\x8e\x63\xe0\x55\x5b\x5b\x77\x9c\x1d\x70\xdd\x91\x17\xfb\x63\xdd\x51\xd2\x89\xfd\x42\x75\x47\x7f\xdb\xba\xa3\x7f\xb8\x75\x47\x7f\x2f\x53\x50\x7f\x6f\xea\x8e\x1a\x42\xbf\x37\x75\xc7\x31\xf6\xaa\xad\xad\x3b\x6a\x88\xfd\x7e\xd4\x1d\xc7\xc0\xab\xb6\xb6\xee\xe8\x1f\x70\xdd\x91\x17\xfb\x17\x57\x77\x14\xbb\x27\xbc\xb8\x64\xd7\x29\x70\x57\xb8\xeb\xa8\x87\x3d\x36\x77\x2a\x78\x33\xf0\x7e\x3f\x5c\x02\xca\xdc\xbf\x0e\x96\x9f\x14\xb8\x9c\x2f\xf1\x51\xf6\x79\x90\x15\xac\xdf\x25\x8f\x4b\x3f\x55\xf2\x3c\x4f\x0c\x80\xf2\x5e\x43\x8b\x8f\xe6\x00\x48\x10\x10\x7e\x38\xb7\xb8\xf4\xa3\x01\xea\xd9\x76\x09\x61\xff\xc0\x18\x2d\x75\x1f\x7b\xa2\x52\x46\x4a\xfc\x59\x64\x65\x6a\xfa\xd4\xfc\x1c\x39\xc3\x2f\xad\x65\xa5\x9b\xe5\xcb\xc8\xc8\x06\xed\xe4\x0e\xfb\xb9\xdd\x8a\x8c\x35\xde\x66\x9f\x36\x1d\x49\x82\x0d\xd1\xc9\x09\xa9\xac\xdb\xb4\x17\x04\xa3\xe4\x2e\x37\xac\xa5\xc1\x80\x79\x85\xb4\x13\xf5\x4c\xd4\xee\xf7\xe4\x2a\x88\x19\x0c\x80\xf5\x97\x6f\x10\xe0\xd8\xa3\x04\x59\xe6\x07\x6e\xad\x48\x3d\x5d\x78\x10\x69\xf9\x68\x45\x8d\x2a\xd2\x74\x83\x41\xa6\x3d\xcf\x62\x4e\xf1\x73\xb0\xd9\x5c\x47\xd3\xa7\x12\x8b\x2b\xc8\x2c\x9f\x4d\x4a\xd5\x16\x85\x9f\xc9\xaa\x9a\xc6\xaf\x71\x18\x61\x06\x45\xcc\xd4\x2a\x4a\xd5\xf3\xb8\x98\x03\xdd\xfa\x64\xf7\xd9\x3c\x0f\xff\xcb\xe7\xf4\x5d\x14\xb7\xcb\xa6\xa8\x34\xbd\x74\x71\x93\xc5\xe7\x7f\xff\x7d\x63\x55\x32\x70\x7f\x69\x46\x63\xb1\x23\x9e\xd1\x58\xd4\x4b\xb4\x4c\xc0\x01\x30\x4d\xda\xf2\xb5\x51\x0d\xc9\x93\xd0\x8e\xc8\xa6\xb0\xea\xa5\x9b\x21\xe2\x00\x08\xa7\xad\xf9\x1a\x28\x77\x45\xef\x31\xdb\x82\x66\x91\x1c\xbf\x7b\x6a\x19\xb0\x2f\x94\x4e\xda\x82\x8d\x14\xfa\xd1\x83\x81\x33\x39\x04\x16\x2d\xac\x55\x51\x85\x46\x58\x01\xec\x9e\x47\x26\xee\x0b\x25\x52\x62\xc2\x93\x4c\x3a\x04\x1e\xbd\x81\x11\xf4\x7c\xb1\x0d\x93\xbc\x04\x62\xf7\x5c\x5a\x44\x7e\xa1\x6c\xca\x8c\x58\xc3\xa7\x75\x0b\x8a\x58\xad\x43\xa0\x17\x25\x3c\x0e\x23\xbd\x0c\x6c\x75\x86\xcd\x51\x6a\x20\xd9\x32\xf8\x4b\xe5\x99\x61\x47\x49\xaa\x39\x93\x83\x20\x5b\x81\x35\x96\x2a\x15\x5c\x31\x0f\xe4\xb5\x77\x14\x8b\xdb\x6e\x0d\x85\xd7\x2a\xfc\x0b\x65\xe0\xa2\x25\x1b\x4f\x9f\xe9\x52\x49\x87\x4e\xba\xde\x2e\x48\xd7\xab\x97\x74\xbd\x83\x21\x5d\xef\x48\xba\x6c\xe5\xb4\x6d\x49\x77\x56\x2f\xe9\xce\x0e\x86\x74\x67\x47\xd2\x65\x8b\xe4\x6d\x4b\xba\x7e\xbd\xa4\xeb\x1f\x0c\xe9\xfa\x5f\x0b\xe9\x7e\x56\xdf\x10\xfa\xe4\x6e\xdb\x5b\x07\x68\x0a\x74\x5b\xcf\x0d\x04\x79\xf8\x5f\x9e\x68\x39\x9a\xe8\x1f\xf6\x93\x15\x02\xf7\x81\x10\xbb\xbd\x1f\x69\xb3\x76\x1b\x96\xc2\x5d\x73\x28\x67\xf7\xd2\x2e\xe3\x63\xb2\x99\xfc\x99\xab\x73\x62\xbc\x64\x6a\x82\x21\xca\x96\x7f\x2c\xf6\x6a\x99\xc7\x47\xc0\x05\x14\xbe\xf7\xf6\xfa\xf2\x1d\x68\xea\xed\xdf\x7e\x79\x07\x2c\x27\x5b\xdb\xd1\x81\x9c\x63\xc1\x9d\x29\x26\x88\x32\xee\x8c\x28\x15\x5c\x30\x18\xa9\x77\x4a\xa8\xd5\x3d\x23\xdf\xfb\x37\x66\x8e\xc7\xb9\xb3\xb4\xcf\x0e\x7d\x62\x7b\x9c\x5b\x60\x0c\x03\x8e\x5b\x86\x7a\x89\x05\xf9\xb6\x7c\xe4\x5f\xc0\x92\x90\xca\x24\xe8\x7c\x4c\xb7\x94\xb2\x1f\x57\x74\xdd\xbd\xa3\x3e\xe6\xfb\x69\x51\xf4\x9c\x06\x85\x72\xfa\x02\x91\x4e\x9b\x69\x8a\x6f\xd9\x0c\x43\xf4\xd0\xcc\x5e\x25\xd6\x34\x5f\x1f\x36\xef\xdf\xf8\x93\xf9\xa6\x90\x46\xcb\x5e\x52\xb0\xb9\x3a\x48\x36\x39\xf1\xaf\x54\x87\x9f\x88\xa7\xef\x56\x1b\x80\xef\x3a\xaf\x72\x3b\x87\x3e\xb9\x80\x02\x0f\x80\x76\x77\xb3\x65\xf3\x78\x24\x18\xf4\x44\xf3\xdb\x57\xa0\xf1\x80\x21\x6b\xb4\xd6\x0c\x85\x9f\x97\x86\x62\x82\x7e\x1e\x37\x1b\x08\x3e\xac\x1b\x23\x3d\xf5\xf0\x0f\xb5\xe4\xf7\x1b\x99\x4b\x31\x1f\x80\x86\xb1\x48\x78\x23\x7f\x58\x40\x3d\x18\xe0\x41\x8e\x97\xd2\xa6\xdf\xaa\x36\x00\x8d\x9b\x9b\x9b\x1b\xfb\xf2\xd2\xbe\xb8\x00\x6f\xdf\x0e\xc2\xb0\x91\x3b\x64\x96\x2f\x47\x39\x97\x6f\x92\xd3\x98\xff\x7a\x48\x11\x4c\xbe\x39\x6d\x0c\xc0\xfb\xd4\x09\xaf\x32\x77\x7c\xc8\x97\xb1\x88\x72\x83\xb9\xc0\x2c\x17\x69\x1e\x89\xee\x2b\x20\x9d\xca\x1b\x06\x7a\xde\xd1\x42\x12\xaf\x27\x3e\x07\x6a\x69\xdd\x3c\x91\x02\x32\x21\x63\xa8\x3a\x2c\xc8\x4b\x82\x9b\x1c\x28\x24\xea\x1d\xe4\x62\xbd\x28\x53\xff\x04\x75\x93\xfc\xdc\xfe\x15\x94\x52\xf6\x4b\x5e\x6f\x32\x3f\xe1\xfd\x8a\xf5\x7a\x7f\x71\xe3\xd7\xc9\x31\x6d\xd1\x98\x1b\x64\xe7\xf5\x5e\xd4\xa7\x28\xc7\x67\xad\xd7\x27\x1b\x13\x8d\x9c\x46\x0d\x25\x31\xf4\x85\x91\xa0\x70\x5e\x86\x92\x6d\x0a\x19\x40\x11\x18\xae\x49\x57\x50\x66\x83\x85\xa4\xd5\xc8\x53\x21\x4f\x0d\x7d\xb1\xf1\xde\x78\xf3\xd7\x87\x46\xcb\x9e\xc2\xa0\x99\x38\x06\x45\xda\x67\x32\x09\x65\xaf\x55\x54\xf3\xbf\x7d\x79\xd9\xbe\xb8\x78\x7f\xfd\x41\x65\x80\x01\xe7\x7f\x34\x5a\xad\xfc\x17\x3a\x6c\x94\x2a\x68\x8e\x4c\x4c\x50\x65\x89\xb3\xa5\x7d\xe6\xe7\xc5\xbb\x2a\x73\x4e\xc6\xff\x0f\x00\x00\xff\xff\x48\x52\xa8\x91\xbc\x72\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x8c\x53\xd5\x17\xff\xf1\xef\xa3\x2d\xfd\xf3\xe5\x88\xe2\xb7\x17\x74\x40\x43\x1e\xd3\xce\x88\x62\x99\x0e\xea\xc0\xa0\x91\x09\x13\x2c\x18\xa3\x2e\x9e\xd3\x6b\xfb\x42\xfb\x5e\xf3\x3e\x80\x1a\x16\xf3\x11\x9c\xe0\x98\x80\x20\xd1\x18\x14\x71\x21\x6e\x48\xca\x30\x0d\x75\x98\x76\x76\xec\x4c\xce\x5d\x18\x75\xe3\x82\xa5\x0b\x13\x63\xe2\xda\xdc\x77\x2f\x33\xd3\x21\x78\x17\xbd\xe7\xfc\xee\x39\xbf\x73\xce\xef\xde\xd7\xdf\xbb\x8c\x8b\x00\xf0\x2c\x80\x27\x00\xf4\xaf\x02\x76\x01\x78\xef\x7f\x88\x56\x3a\x06\x6c\x02\x90\x89\x01\x0f\x03\x18\x8a\x01\x09\x00\xef\xc7\x80\x24\x00\x1e\x03\xfe\x0f\xc0\xd1\x71\x1f\xc5\x80\xd5\x00\xce\xc6\x00\x03\xc0\xc5\x18\xb0\x0e\xc0\x57\x31\x20\x05\xe0\x87\x18\x10\x07\x70\x43\x9f\xcf\x69\x7f\x41\xef\xb7\x75\xdc\x4f\x31\x60\x0d\x80\x5f\x35\xff\x1d\x5d\xf7\xcf\x18\xb0\x1e\xc0\x3f\x3a\x7e\xb5\xa1\xea\xad\x35\x14\xde\x65\x28\xde\x2d\x06\xf0\x00\x80\x6d\x1a\xdf\x6d\x00\x1b\x00\x1c\x30\x14\xff\xdb\x86\xe2\xff\x40\xe7\x97\xf5\xee\x69\xfc\xa4\xa1\xfa\x9e\x30\xd4\xdc\xe7\x74\xfe\x55\x43\xd5\xbd\x69\x00\xa5\x55\x40\xdb\x00\xfa\x00\x6c\x8f\x03\x2f\x02\x78\x37\xae\xf8\xcf\xeb\xfd\xeb\x38\xb0\x56\xce\x1d\x07\x9e\x01\xd0\x88\x03\x1b\x01\xfc\x16\x57\xfa\xfd\x11\x57\xfc\x7f\xc7\x81\xcd\x00\x52\x09\xd5\xef\xd6\x84\x3a\xcf\x24\xd4\xfc\x59\x8d\x0f\x25\x80\xa7\x01\x1c\x49\x00\x8f\x03\x08\x13\x4a\xf7\xcf\x12\x8a\xf7\xfb\x04\xf0\xa4\xec\x2f\xa1\xea\xfe\xac\xf1\x3b\x09\x80\xc9\x3a\xda\xdf\x94\x04\xb6\x00\xe8\x4e\xaa\xbe\x0e\x24\x81\xed\x00\x8e\x25\x81\x07\x01\x5c\x48\xea\x79\x93\xaa\xee\xcd\xa4\xca\xbb\x9d\x54\x73\xfd\xa2\xf1\x3b\x49\x60\x2b\x80\xbf\x92\x4a\xef\x4d\x6b\x80\x2e\xa9\xfb\x1a\x60\x15\x80\xc7\xb0\xb4\x1e\x01\x10\x83\x9a\x57\x3e\x2f\x59\x27\xa1\xcf\x64\xae\x9c\x47\xce\x62\x68\x4c\xde\x87\xec\x4d\xce\x23\x35\x78\x4a\xe3\x0f\x41\x69\xb3\x79\x19\xb7\x9c\x45\xce\xb7\x51\xfb\xf2\x8e\xd6\x69\x7b\xab\xde\xa5\x6e\xf2\x6e\xd7\xeb\xf7\x2e\x57\xd7\x32\x8e\x94\xde\xe5\x77\xb0\x61\x19\xfe\x28\x94\x96\xd1\xea\x2e\x30\x9f\x8f\xba\x4e\x61\xc9\xf2\xb1\x63\x09\xdd\xb1\x0c\x7e\xd5\x1b\x2d\xd9\xc7\x39\x06\xad\xaa\x35\x6a\x07\x35\x0c\xba\x8e\x1f\x56\xaa\x81\xed\x3a\x18\x0c\x3d\x8f\x3b\x01\xab\x70\xcb\x0f\x3d\x5e\xe1\x4e\xe0\x63\x9f\x65\x97\x6b\xd8\x67\x05\x3c\xfa\x61\x96\x53\x60\x81\x5d\xd1\x9e\x67\x39\x45\x8e\xfd\x0e\xf7\x8a\x35\x1c\x18\xb5\xca\xd1\x4f\x4f\x09\xaf\xbb\xa1\x57\xae\xe1\xa0\xe5\x07\xac\xe2\x3a\x41\x49\x99\x35\x6e\x79\x18\x5e\xe2\xc7\xb0\x3c\x2b\xd7\x70\xa8\xca\x3d\x2b\xb0\x9d\xa2\x22\x1f\xe1\x9e\xed\x16\x30\xe2\x9e\xe0\x1e\x46\xc2\xb2\xcf\x99\xed\x54\xc3\x80\x75\x17\xf0\x56\xc9\x3d\x81\x3c\xaf\x44\x19\xa1\xc7\x59\x81\x97\x03\xab\x03\xb1\x9d\x0e\xd7\x0d\x03\xe4\x4b\xb6\xaf\x3b\x89\xcc\xa8\x93\xbc\x5b\xb0\x6a\x38\x6a\x95\x43\x8e\x77\xb8\x1f\x70\x4f\xfa\x95\x7e\x3f\xac\x0e\xf4\xf5\xf7\xc8\xad\xd3\x63\x3d\xac\x2a\xbb\xf1\x3b\xe1\x9e\x12\x34\x7c\x98\x57\x5d\x2f\x30\x87\xfd\xa2\x5d\x30\x5f\x0b\x8b\xbe\x99\x77\xb3\xac\xc0\x8f\xbf\x72\xcc\x2e\x59\x15\x77\xa7\x17\xa6\x46\x0e\xe5\xcd\x41\x8f\x5b\x52\x74\x53\xca\x98\x65\xbd\xe9\xcc\xcb\x66\xba\xcf\xec\x7d\x89\xf5\xf6\x65\x77\xed\xda\x91\xee\x4b\xa7\x53\x52\x32\x33\xef\x59\x8e\x5f\xb6\x02\xd7\xcb\xb2\x37\x23\x0e\x36\x1c\x7a\x56\xc5\x2d\xb8\xac\xbf\x83\x78\x20\x75\xd0\x72\x8a\xa1\x55\xe4\x66\x9e\x5b\x95\x2c\x5b\xf4\xb3\xec\x70\xe8\xfb\xb6\xe5\xa4\x86\xdf\x18\xde\x6f\x1e\xe5\x9e\x6f\xbb\x4e\x96\x65\x76\xa6\x53\x83\xae\x13\x70\x27\x30\xf3\xb5\x2a\xcf\xb2\x80\x9f\x0c\x7a\xaa\x65\xcb\x76\xf6\xb0\xd1\x92\xe5\xf9\x3c\xc8\x1d\xc9\x0f\x99\xbb\x97\xe2\x64\x3f\x1f\x72\xcf\xdc\xef\x8c\xba\x05\xdb\x29\x66\x59\x6a\xa4\x1c\x7a\x56\xd9\x1c\x72\xbd\x8a\x9f\x65\x4e\x35\x72\xfd\x5c\xdf\x1e\xa6\xcc\x9c\xd3\x9d\x49\xe7\x72\x19\xb6\x6d\x1b\x93\x66\x7a\x4b\x2e\x93\x61\x7b\x59\x9a\x65\x23\x7f\x20\xd7\x7b\xf7\xa8\x3f\xf7\x82\x34\x9f\x8b\xc2\xfa\x33\x69\x76\xea\x94\x4a\x19\xc8\xf5\xa6\x9f\x67\x7b\x59\x86\x65\x59\xef\x1e\xf9\xd6\xc5\x38\x35\x68\x4e\x4c\x52\x8b\x66\xa9\xbe\x12\x11\xd3\x2b\x91\xe8\x4b\x58\x91\xb4\x12\x12\xd3\xf7\x40\xa0\x73\x62\x4c\x9c\xa6\x26\xcd\x80\xbe\xa1\xeb\xe2\x13\x6a\xd0\x3c\xe8\x5b\xaa\x8b\x71\x71\x9a\xda\x32\xe4\x3b\x15\x2f\xce\x50\x93\x1a\x8c\x16\xa8\x4d\x73\x54\xa7\x9b\x54\x17\x13\xd4\xa0\x5b\xd4\x04\x5d\x11\x93\x62\x82\xda\x62\x8a\x5a\x54\x17\x67\x41\x9f\x47\xa7\xf5\x45\x83\x51\x93\xd1\x8c\x18\x93\xfc\xea\xbc\x49\x75\x5a\x88\x78\xda\xd4\x62\xb2\x63\x31\x01\xba\x46\x2d\x6a\x88\x31\xba\x41\x4d\x19\x76\x21\x2a\x75\x6b\xd1\xe8\x11\x53\xa0\xab\xb2\x3b\x6a\xd3\x8c\x2a\x75\x39\x62\x9d\x15\xd3\x34\xab\xbb\xfc\x91\xd1\x3c\x35\xc4\xb8\x38\x2b\x3e\xbe\xcf\xf9\x0d\x35\xdb\xe5\x95\xc3\x88\x4f\x41\x97\x74\xee\xe2\x30\xe7\xef\xf6\xcd\x22\x64\x8c\xea\x74\x9d\xda\x62\x82\xe6\xe4\xec\x97\xa3\x86\x9b\x8a\xf0\x12\xb5\xc5\x19\x6a\x51\x5b\x8c\x8b\x09\x49\xf6\x25\xcd\xd3\x82\x98\x94\xcc\x62\x9c\x5a\x62\x5a\x56\x9f\x51\xda\xca\x4f\xbe\xb3\x05\x99\xa1\xf8\x1a\x91\x38\xb3\x2c\x6a\x6b\x9e\x16\x22\x50\x46\x4c\xaa\x1b\xe9\x80\xe4\xae\x6e\x46\xca\x38\x25\xbb\xba\x4f\x4c\x9b\xae\x2b\xe0\xee\x6c\xd7\xa2\x7b\x9b\xe8\x50\x6c\x11\xd3\x2a\x5d\xa1\x86\x32\xa9\x25\x53\xbe\x88\x72\xa7\xa8\x41\x2d\xf9\x24\xa4\x3e\x53\xaa\x0e\x68\xfe\x3f\xff\x60\xa8\xd9\xa1\x46\x5b\x3e\xbb\x8e\x8c\xe8\x7e\xef\x0d\xfa\x37\x00\x00\xff\xff\x76\x39\x4a\x83\x39\x09\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
