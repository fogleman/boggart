// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xed\x6e\xdb\x38\xd6\xfe\x9f\xab\x20\xf4\x66\x5e\xdb\xd8\x5a\xf2\xd7\xcc\x0e\x5c\x3b\x8b\x9d\x64\x76\x5a\xa0\xd9\x09\x3a\x99\x01\x32\x45\x11\xd0\x22\x1d\xab\x2b\x91\x2a\x49\x39\xcd\x06\xbe\xa7\xbd\x86\xbd\xb2\x05\x45\x49\xa6\x6d\xd9\x91\x64\xa9\x51\x5c\x13\x68\x23\x4b\xe4\xe1\xf9\x78\x78\xf8\xc8\x16\xa9\xc7\x47\x80\xf0\xd4\x21\x18\x18\x36\x25\x02\x13\x61\x80\xc5\xe2\x64\xc4\x6d\xe6\xf8\x02\x88\x07\x1f\x8f\x0d\xe8\xfb\xae\x63\x43\xe1\x50\x62\x7d\x82\x73\xa8\x2e\x1a\x67\x27\x00\x00\x30\x0d\x88\x2d\xaf\x80\x39\x74\x03\xfc\x0f\xca\x3c\x28\x9a\xa4\x05\x1e\xc3\xab\xb2\x30\x2c\x02\x46\x00\xc1\xf7\xe0\x2d\x11\xae\xf9\xcf\xc0\x9b\x60\x16\xd5\x6c\x99\xd3\xb8\xc9\xeb\xb0\xc5\xe2\x64\x64\xa9\x0e\xce\x4e\x46\xc8\x99\x03\xdb\x85\x9c\x8f\x0d\x46\xef\xa3\x1e\xf5\xb3\x36\x75\xdb\x1e\x6a\x77\x7b\x40\x1e\x71\x2f\x3e\xfa\xc2\xdb\xdd\x5e\x54\x7f\xbd\xcd\x97\x5b\x1f\x12\xec\x6a\x57\x37\x6b\xc4\xce\x58\xad\x93\xd4\x63\xd4\xc5\x63\x43\xc0\x49\x9a\xa4\xa4\x66\xe0\xc6\x02\x09\x9c\x03\x02\xe7\x6d\x01\x27\x1c\x4c\x20\xbb\x95\x07\xc6\x52\x8c\xeb\xf0\xb4\xbe\x12\x49\xae\x13\xd5\xf5\x19\xe6\x98\x88\x30\x16\xc6\xe3\x23\x70\xa6\x00\x7f\x06\x26\x54\x21\x30\x64\xf0\xe2\x3e\xe5\xb9\x39\x96\x95\x30\x41\x60\xb1\x38\x1b\x41\x30\x63\x78\x3a\xde\xd2\x6e\x19\xd9\xe1\x9c\x3a\xa8\xd9\x69\xbd\x96\x6d\x5d\x8e\xc1\x62\xf1\xf8\x08\xcc\xf7\xf8\x73\x80\xb9\x30\x7f\x7f\xff\xce\xbc\x82\x62\xa6\x4e\x2b\xe1\xc6\x99\x14\xda\xfd\x91\x00\xe3\x3c\x60\x0c\x13\x01\x3c\x0c\x79\xc0\xb0\x87\x89\xe0\x06\x30\xc1\x62\x31\xb2\xe0\xd9\xc8\x72\x9d\x12\x0c\x85\xcc\x9e\x49\xeb\x0a\xda\xab\x35\x2f\x62\xf6\xdf\x94\x9c\x71\x24\x26\xcd\x0b\x7f\x8f\x7b\x78\xda\xf0\x91\x15\xb8\x5b\xae\x68\x98\x14\x70\xd2\xde\x8e\xca\x5d\xe8\xd4\x25\xc8\x33\x60\x0a\x11\x06\xca\x5d\xc0\x21\x3b\xa4\xc9\xb2\xd3\x79\x3b\x5b\xea\xda\xdf\x63\xd7\x35\x00\x17\x0f\x52\x33\x3a\xc7\x6c\xea\xd2\xfb\x21\x80\x81\xa0\x4f\xf4\x1f\x4a\x92\x39\x22\x16\x25\x8f\xdb\x33\xca\x9c\x7f\x53\x22\xa0\x1b\x8f\x22\x79\xda\x00\x1e\x16\x33\x8a\xc6\xc6\x1d\x16\x06\x88\xa2\x64\x6c\x89\xa2\x01\x1c\x34\x8e\xad\x69\xab\xf6\x84\xce\xa1\xeb\x20\x28\xf0\xd3\x5a\x85\x9a\x39\xc4\x0f\xe2\x3c\x39\x73\x10\xc2\xc4\x50\x99\x70\xbc\xf4\x13\x81\x1e\x56\xf8\xa4\xc4\x00\xd6\xfe\x92\x63\x91\x53\x46\xbd\x52\x05\x0a\x9a\x5d\xdc\x66\x16\x1e\x64\x08\x65\x5c\x92\x81\x72\x01\x05\x06\x0c\x92\xbb\x68\xac\x64\x96\x30\x9a\x3a\xd8\x45\x1c\x8b\xec\x9d\x6e\xea\x4d\x04\xa3\x6e\xfb\x8e\xd1\xc0\xcf\xa1\xfc\x0e\x59\xbc\x80\x98\x75\x51\x61\xa0\xda\x3e\xc3\xbe\x4c\x2b\xea\x53\x51\x15\x13\xf9\xdc\x87\x24\x49\x95\x08\xb5\x29\xd1\x25\xb7\x21\x42\x94\x18\x67\x23\x27\x19\x66\x10\x4c\x61\xdb\x86\x2e\x26\x08\x32\xe3\x6c\x64\x39\x67\x23\x4b\x4a\xd9\x43\x09\x1d\x82\x02\x7f\x11\xab\x43\x50\x0e\x3b\x63\x65\x98\x47\x4e\x4d\x70\x2a\x47\xb2\xac\x75\x2b\x91\x6f\x2a\x0a\x01\x8c\x5e\xa7\xf3\x83\xd9\xe9\x9a\x9d\x1e\xe8\x7e\x3f\xec\x0c\xc2\x59\xa1\x0d\x92\xca\x82\xee\xac\x9a\x19\xf2\x1b\xe6\x58\xc8\x99\x17\x40\x4d\xfe\x66\x39\x9b\x8c\xac\x7c\x63\x23\x87\xf8\xb2\x86\xfd\x15\x66\x0e\x45\xc7\x21\xff\xe4\x90\x8f\x27\xcd\x7b\x07\x89\xd9\x10\x74\x3b\x9d\xef\xf6\x4a\x03\xd8\xc5\xb6\x08\x87\x9d\x1f\x85\x40\xa5\xfe\xf8\x53\xca\xf0\x03\xaa\x51\xcf\x00\x0c\x7f\x0e\x1c\x86\xd1\xd8\x88\x8f\xf6\xd0\x25\xd4\x87\xfa\xcb\x9b\x87\xb1\xe1\x51\x22\x66\xee\x83\xc6\xd8\x94\x5a\x20\xb9\x22\x87\xb6\x52\x47\x6a\x11\x1f\x69\xac\x2f\x41\xd8\x65\xdc\x42\x31\x30\xd5\x51\xa9\xda\x22\xe8\xa4\xea\xaa\xce\x67\xd7\xf4\x42\xd5\xaf\x4c\xcf\x19\x0d\x58\xaa\xa2\xd1\x85\xec\x9a\xbe\x89\x1a\x94\xa3\xea\xc8\x52\x7d\x1d\xb3\xef\x57\xca\xbe\x05\xf3\xe7\xff\x93\x09\xf7\x5f\x7f\x3b\x29\x77\x0f\x44\x4f\x02\x21\x28\x89\x18\x0e\x0f\x26\x9e\x23\x92\x94\x3a\x11\x04\x4c\x04\x69\xf3\xc0\xb6\x31\xe7\xda\xcd\xe2\x6f\x33\x7a\x1f\x0f\x2a\x25\xe1\x38\x24\xb2\x88\x1f\x59\x72\x9a\xda\x5d\x2f\x83\xa8\x91\x80\x13\x17\x6b\xb7\xc9\x2e\x06\xe1\xff\x6d\x2e\x98\xe3\x63\x04\x10\x14\x50\x9d\x47\xa2\xcd\x30\xf7\x29\xe1\xf2\xee\x99\xd0\x7b\x06\xd7\xe7\xe8\x8c\x53\xf4\x48\xcc\x30\x44\x59\xea\xb1\x8c\x4e\x13\xb3\xb3\x95\xdb\xaa\x18\x52\x62\x56\x40\xc0\xcf\x04\xb3\xbb\x38\xd5\x4f\x18\xb0\x96\x97\x7e\xb1\xe5\x6d\x77\x3e\xd9\x6a\xf2\xb9\x13\xc0\xfc\xc9\x21\xc8\x3c\xa7\x64\xea\xdc\x99\x6f\xe5\xa8\xe3\xe7\x34\x20\x02\x74\xa4\x3c\x5d\x83\xab\xc0\xe5\x58\x0d\x4c\xf0\x5d\x48\x15\x89\xe3\x26\xff\xba\xba\x5e\x0c\xde\x83\xa6\x6a\xe5\x8d\x78\xe0\x9f\xf5\x47\x96\xfc\x03\x2c\xe0\x4b\x29\xdc\x00\x66\x2b\xd6\x37\x99\xd7\x4a\x52\xbc\x9b\x4f\xf1\x5e\x6d\x14\xef\xe5\x53\xbc\x5f\x1b\xc5\xfb\xf9\x14\x1f\x7c\x05\xc5\x47\x56\x96\x61\x2a\x85\x66\x1c\xf4\x13\x8a\x1e\x9e\xae\x17\x1a\x44\xee\x30\x38\x75\x5e\x81\x53\x2e\xa0\x00\xc3\x31\x30\xe5\x01\xcf\xa4\x76\xf6\xe4\x92\x41\x6b\x4d\x2b\xc5\x34\x4f\xd3\xf8\x7b\xae\x89\x26\x0e\x71\x68\x9b\x29\xb3\x9a\x19\x12\x7b\xf3\x37\xc1\x1c\x72\x07\x4e\xc3\x08\x1b\x08\xf2\xd9\x84\x42\x86\x42\x32\xfb\xf8\xa8\xd7\xbf\xc1\x90\xe5\xe9\x36\xfe\xfa\x77\xdd\x84\x84\xd6\xe7\x35\x40\xd3\xe5\x02\x3e\x44\x0a\x3e\x97\x55\x39\xd5\xcf\xf6\x4b\x10\xa2\x76\xe0\x61\x22\xcc\x7b\xe6\x08\xdc\x44\x50\xe0\x6b\xaa\x6c\x69\x36\x56\xf5\xd6\xbf\x89\x69\x77\xba\xed\x4e\xef\x3a\xfc\x26\x66\xd8\xf9\xfe\xcf\xce\x5f\x87\x9d\x8e\xb4\xb5\xd1\x6a\x2d\x7f\x05\xca\x63\x61\xf6\x2c\x33\xb2\xb2\x22\x3a\x17\xf4\x0b\xf9\x4b\xff\xe9\x2c\xf1\x96\x9a\x80\xc1\x62\x51\xd0\x17\x2a\x87\xea\xb2\xae\x99\xf4\x4f\xc7\xec\xe4\x07\x81\xf6\xe5\xa1\x0b\x27\xd8\x05\xe1\xff\x6d\x24\x73\x0f\x2b\xc2\xe9\x4b\x76\xd3\x05\x76\x05\x5c\xf5\x15\xb0\x9e\x5d\x2b\xe5\xf0\x62\x11\x04\xea\x06\x39\xd7\xf7\xad\x5a\xe6\x72\xab\x0e\x7d\x72\x17\xf3\xec\x5e\x3e\xc6\x1e\x6c\xce\x5a\x95\xc6\xde\x21\xd3\x2c\x3f\xdb\x6d\xca\x3b\x06\x3e\x83\x3e\xc5\x03\xbf\x96\xef\x95\x7f\x4a\xcd\xf7\x78\x0a\x03\x77\xd7\x0f\xd0\xdb\x45\x56\x1e\xfb\xca\xbd\x5c\x05\xb9\x58\x4e\xd4\x3b\x6f\x8c\xeb\x4c\x54\xc2\x9b\xaf\xee\x1f\xd4\x0d\x3c\xbc\x3e\x1a\xc1\x5a\xad\x9c\x8c\x55\xc7\xb4\x12\x70\x90\x1c\x46\x99\x56\xb7\x74\xa6\x3b\xfc\x79\x39\x4c\x55\xa1\xaf\x03\x87\x39\xc6\x7e\x59\xd2\x38\x4c\x55\xb1\x7f\x76\x0e\x73\x0c\xfc\xb2\xa4\x71\x18\xdd\x3f\x87\xc6\x61\xb6\xc6\xfe\xa5\x72\x98\x22\x5f\xef\x6e\x67\x3c\x99\x69\xc2\x73\x32\x9e\x5e\x26\xc6\xd3\xdb\x97\xf1\xf4\x0e\x97\xf1\xf4\x6a\x99\xfc\x7a\xb5\x61\x3c\x15\x84\xbe\x36\x8c\xe7\x18\xfb\xb0\x6c\x65\x3c\x15\xc4\xbe\x1e\x8c\xe7\x18\xf8\xb0\x6c\x65\x3c\xbd\x03\x66\x3c\x69\xb1\x3f\x32\x9e\xf8\xa7\xf8\xda\x33\x9e\x7e\x26\xc6\xd3\xdf\x97\xf1\xf4\x0f\x97\xf1\xf4\x6b\x99\xfc\xfa\xb5\x61\x3c\x15\x84\xbe\x36\x8c\xe7\x18\xfb\xb0\x6c\x65\x3c\x15\xc4\xbe\x1e\x8c\xe7\x18\xf8\xb0\x6c\x65\x3c\xfd\x03\x66\x3c\x69\xb1\x3f\x32\x9e\xf8\x19\xbe\xda\x33\x9e\x41\x26\xc6\x33\xd8\x97\xf1\x0c\x0e\x97\xf1\x0c\x6a\x99\xfc\x06\xb5\x61\x3c\x15\x84\xbe\x36\x8c\xe7\x18\xfb\xb0\x6c\x65\x3c\x15\xc4\xbe\x1e\x8c\xe7\x18\xf8\xb0\x6c\x65\x3c\x83\x03\x66\x3c\x69\xb1\x3f\x70\xc6\x93\xed\xd9\xff\x5c\xf2\x9e\x7e\xfa\x7f\x64\x85\x0b\x92\x76\x57\xca\xf8\xd0\x77\xbd\x17\x40\x81\x3c\xeb\x14\xc0\xfa\x3a\xa6\xcb\xe5\x36\x34\x79\xd7\x2c\x6d\xc8\xfa\x43\xa2\x3e\xf7\xaa\xaa\xe7\x59\x19\x02\xf2\x7b\x0d\xad\x2e\x1f\x03\x90\x20\x20\x1c\x6f\x69\x71\xee\x25\x20\xe1\xfe\x0b\x52\x84\xf9\x33\x63\x34\xd7\x7a\x85\x48\xa5\x04\x94\xf8\x8b\x48\x48\x6d\xbc\xb3\xc3\x52\x72\x22\x3f\xb7\x96\x85\x16\x45\xe4\xe9\x23\x69\x54\xca\x4a\x8a\xa5\xdd\x21\x18\x2b\x5c\x4e\x11\x17\x15\x49\x82\xb5\xae\xa3\xe9\x2b\xaf\xdb\x94\x17\x04\xa3\xe4\x2e\x35\xac\xb9\x85\x81\x95\xd5\x62\x65\xa8\xa7\x4b\xed\xfe\x48\xae\xdc\x80\x41\x17\x18\x7f\xf9\x0e\x01\x8e\x6d\x4a\x90\xa1\x7f\xe0\xc6\x46\xaf\xa7\x2b\x2b\xcf\xd6\xaf\x16\xd4\xa8\x20\x4c\x77\x18\xa4\xdb\xf3\x2c\xe6\x64\x9f\xb1\xf5\x32\xb2\x14\x7c\x0a\xa1\xb8\x40\x9f\xf9\xb3\x49\x2e\x26\x92\x79\xed\x5d\xd1\x34\x7e\x8d\x3d\x1f\x33\x28\x02\x16\xee\xf4\x55\x3c\x8f\x8b\xa5\xa0\x5b\x87\x94\x9f\xcd\xd3\xe4\x7f\xfd\x9c\x5e\x06\x15\x5e\x37\x25\x4c\xd3\x6b\xb7\x42\x49\x7c\xfe\xfb\x9f\x73\xa3\x90\x81\xf5\x85\x19\x0d\x44\x49\x38\xa3\x81\xa8\x16\x68\x49\x07\x07\x80\x34\x69\xcb\xb7\x06\x35\x24\x27\xa1\x92\xc0\x16\xca\xaa\x16\x6e\x5a\x17\x07\x00\x38\x65\xcd\xb7\x00\xb9\x2b\x7a\x8f\xd9\x1e\x30\xf3\x65\xfb\xf2\xa1\xa5\x89\x7d\xa1\x70\x52\x16\xec\x84\xd0\x2f\x36\x74\xad\xd9\x21\xa0\x68\x65\x3f\x95\x22\x30\xc2\xa1\x80\xf2\x71\xa4\xcb\x7d\xa1\x40\x8a\x4c\x78\x12\x49\x87\x80\xa3\x73\xe8\x43\xdb\x11\xfb\x20\xc9\x8e\x44\x94\x8f\xa5\x55\xc9\x2f\x14\x4d\x89\x11\x5b\xf0\xb4\x6d\x07\x19\xa3\x75\x08\xf0\xa2\x84\x07\x9e\xaf\xb6\x2a\x2e\x8e\xb0\xa5\x94\x0a\x40\xb6\x2e\xfc\xa5\xe2\x4c\xb3\x23\x27\xd4\xac\x59\x8d\xc0\x96\x6d\x6b\xaf\xaa\x49\xda\xd3\x9b\x85\x15\xe2\x6e\x01\x77\xe5\x6d\xbc\x1f\x88\xdb\x6e\x05\x1c\x6e\x53\xfc\x0b\x05\xf3\xaa\x25\x3b\x67\xe2\x78\x9b\xad\x1a\xe1\xb7\xf4\xfd\xe0\x9e\x15\xed\xbd\x32\xd0\xde\xab\x16\xed\xbd\x83\x41\x7b\xef\xdb\x46\x7b\x8e\x95\x0b\xd5\xa0\xbd\x5f\x06\xda\xfb\xd5\xa2\xbd\x7f\x30\x68\xef\x7f\xdb\x68\xcf\xf1\xd4\x6a\x35\x68\x1f\x94\x81\xf6\x41\xb5\x68\x1f\x1c\x0c\xda\x07\x87\x8c\xf6\xe2\x10\xfd\x35\xfc\x16\xd8\x21\x77\xfb\x3e\x1e\x42\x63\x41\xb7\xd5\x3c\x24\x92\x26\xff\xeb\xc3\x32\x45\x13\xf5\xf0\x46\xb4\xdb\x67\x1d\xe0\x53\xee\x33\x67\xbb\xb5\xdb\xb1\x25\xf7\x96\x4b\x29\xa7\xd7\x4e\x69\x1f\xa3\xc3\xe8\xcf\x52\x9d\x13\xed\x65\x77\x33\x0c\x51\xb2\x95\x6b\xb6\x57\x5c\x3d\x3e\x02\x2e\xa0\x70\xec\x37\xd7\x97\xef\x40\x53\x1d\xff\xfe\xfe\x1d\x30\xac\x64\x9f\x56\x0b\x72\x8e\x05\xb7\xe6\x98\x20\xca\xb8\x35\xa1\x54\x70\xc1\xa0\x1f\xbe\xdb\x26\xdc\xa9\xd7\x77\xec\x7f\x61\x66\xd9\x9c\x5b\x6b\xe7\x4c\xcf\x21\xa6\xcd\xb9\x01\xa6\xd0\xe5\xb8\xa5\xa9\x17\x59\x90\x6e\xcb\x27\xfe\x15\x2c\xf1\xa8\x4c\x99\xd6\xa7\xf8\x28\x54\xf6\xd3\x86\xae\xe5\x3b\xea\x53\xba\x9f\x56\xbb\x5e\xc2\x20\xd3\x0c\xb0\x02\xa4\xd3\x66\x3c\x21\xb4\x4c\x86\x21\x7a\x68\x26\xaf\x34\x6c\xea\xaf\x31\x5c\xd6\x6f\xfc\x9f\xfe\xc6\xa2\x46\xcb\x5c\x53\xb0\xb9\xd9\x48\x16\x39\xf0\xaf\xc2\x0a\x6f\x89\xad\x9e\x48\x1c\x82\x1f\x3a\xaf\x52\x2b\x7b\x0e\xb9\x80\x02\x0f\x81\x72\x77\xb3\x65\xf2\x60\x22\x18\xb4\x45\xf3\xfb\x57\xa0\xf1\x80\x21\x6b\xb4\xb6\x34\x85\x5f\xd6\x9a\x62\x82\x7e\x9d\x36\x1b\x08\x3e\x6c\x6b\x23\x3d\xf5\xf0\x53\xf8\xea\x81\x73\x99\x4b\x31\x1f\x82\x86\xf6\xb2\x82\x46\x7a\x33\x97\xda\xd0\xc5\xc3\x14\x2f\xc5\x45\xbd\xdd\x71\x08\x1a\x37\x37\x37\x37\xe6\xe5\xa5\x79\x71\x01\xde\xbc\x19\x7a\x5e\x23\xb5\xc9\x22\xbd\x9f\xd0\xb9\x7c\x57\x3f\x8d\xe5\x2f\xc4\x14\xc1\xe8\xdb\xf1\xc6\x10\x7c\x88\x9d\xf0\x2a\x71\xc7\xc7\xf4\x3e\x56\xa5\xdc\x60\x2e\x30\x4b\x95\xb4\x8c\x44\xf7\x15\x90\x4e\xe5\x0d\x4d\x7a\xda\xd5\x4c\x3d\x5e\xcf\x1c\x0e\xc2\x6d\xb2\xd3\xba\x14\x90\x09\x19\xc3\xb0\xc2\x4a\x7f\x51\x70\xa3\x0b\x99\xba\x7a\x07\xb9\xd8\xde\x95\xae\x7f\x24\x75\x57\xff\xa9\xf5\x0b\x28\x15\xda\x2f\x71\xbd\xcb\xfc\x08\xf7\x1b\xd6\xab\xf3\xd9\x8d\xdf\xd6\x8f\x6e\x8b\x92\xb9\xa3\xef\xb4\xda\xab\xfa\x64\xc5\xf8\xa2\xf5\xfa\x64\x67\xa2\x91\xc3\xa8\x11\xf6\xe8\x39\x42\x4b\x50\x38\x2d\x43\xc9\x32\x87\x0c\x20\x1f\x8c\xb7\xa4\x2b\x28\xb3\xc1\x4a\xd2\x6a\xa4\xa9\x90\xa6\x86\xba\x35\xf9\xa0\xbd\x81\xf0\x63\xa3\x65\xce\xa1\xdb\x8c\x1c\x83\x7c\xe5\x33\x99\x84\x92\xd7\xbb\x86\xe3\xbf\x7d\x79\xd9\xbe\xb8\xf8\x70\xfd\x31\xcc\x00\x43\xce\xff\x6c\xb4\x5a\xe9\x2f\x96\xd9\xd9\xab\xa0\x29\x7d\x62\x82\x0a\xf7\xb8\x58\x3b\xa7\x7f\x5e\x7d\x72\x36\x65\x32\xfe\x5f\x00\x00\x00\xff\xff\x43\x06\x4c\xb0\x44\x77\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x5b\x6c\x54\x55\x17\xfe\xf8\xe7\x30\x67\xfe\xf9\xb9\xf6\x57\xf1\x06\x6e\x50\x50\x83\x43\x67\x8a\x1a\x32\x74\x8a\x52\x2e\x1a\x69\x6c\x70\xc4\x98\xe8\xc3\xb1\xb3\x9d\x39\x3a\x73\xce\xe4\x5c\x80\x31\xa8\xed\x34\xd8\x60\x09\x10\x95\x68\x0c\x8a\xf8\x82\x0f\x62\x86\xd2\x09\x43\xe9\x4c\xe3\x8b\x31\x26\x26\x6b\xbf\xf9\x64\xa2\xaf\x24\x3e\x9a\x98\xa8\x31\xfb\xec\x4d\xdb\x29\xc1\xf3\xd0\xbd\xd6\xb7\xd6\xfa\xd6\xb7\xd6\xde\xd3\x9f\x7b\x8c\xb3\x00\xf0\x10\x80\xfb\x01\xf4\x2f\x03\x9e\x00\xf0\xca\x7f\x10\x7d\xe9\x18\x70\x07\x80\x4c\x0c\xb8\x0b\xc0\xbe\x18\x60\x02\x78\x35\x06\x24\x00\xf0\x18\xf0\x3f\x00\x8e\xce\x7b\x2b\x06\x2c\x07\x70\x3a\x06\x18\x00\xce\xc6\x80\x95\x00\x3e\x8d\x01\x49\x00\x5f\xc5\x80\x38\x80\x2b\x3a\x3e\xa3\xfd\x39\x7d\x7e\xa7\xf3\x7e\x8c\x01\xff\x05\xf0\x93\xe6\xff\x55\xf7\xfd\x2d\x06\xac\x02\xf0\xbb\xce\x5f\x6e\xa8\x7e\x2b\x0c\x85\xf7\x18\x8a\x77\xa3\x01\xac\x05\xb0\x45\xe3\x3b\x0c\x60\x35\x80\xfd\x86\xe2\x7f\xc9\x50\xfc\xaf\xe9\xfa\xb2\x3e\x3d\x8d\x1f\x35\x94\xee\xba\xa1\xe6\x3e\xa3\xeb\x2f\x1a\xaa\xef\x55\x03\xd8\xb5\x0c\xe8\x18\xc0\x76\x00\x7f\x2f\x07\x9e\x04\xd0\x17\x57\xfc\xb6\x3e\x83\x38\xb0\x02\xc0\xbb\x71\xe0\x41\x00\x27\xe3\xc0\x1a\x00\x8d\xb8\xda\xdf\xb7\x71\xc5\xff\x43\x1c\x58\x07\xe0\x97\xb8\xd2\xfb\x87\x8e\x27\x4c\x35\xff\x5a\x53\xe1\xeb\x4d\xe0\x01\x00\x8f\x99\xc0\x7d\x00\x0e\x98\x6a\xef\x25\x53\xf1\xbe\x6d\x02\xeb\x01\x9c\x32\x55\xdf\xaf\x35\x7e\xcd\x04\x98\xec\xa3\xfd\x1b\x26\xb0\x11\xc0\x9f\xa6\xd2\xb5\x21\x01\x3c\x0c\x60\x77\x02\xf8\x3f\x80\x37\x12\x6a\xde\x77\x12\xaa\xef\xa9\x84\xaa\xfb\x2c\xa1\xe6\xfa\x46\xe3\xd7\x12\xc0\x26\x00\xdf\x27\xd4\xbe\x6f\x24\x80\x1e\x00\x7f\x25\x80\x65\x00\xee\xc5\xc2\x77\x37\x80\x18\xd4\xbc\xf2\x79\xc9\x3e\xa6\x8e\xc9\x5a\x39\x8f\x9c\xc5\xd0\x98\xbc\x0f\xa9\x4d\xce\x23\x77\xb0\x41\xe3\x77\x42\xed\x66\xdd\x22\x6e\x39\x8b\x9c\x6f\x8d\xf6\xe5\x1d\xad\xd4\xf6\x26\x7d\xca\xbd\xc9\xbb\x5d\xa5\xdf\xbb\xfc\x7a\x16\x71\x24\xf5\x29\x7f\x07\xab\x17\xe1\xf7\x40\xed\x32\xfa\x36\x17\x98\xcf\x47\x5c\xa7\xb0\x60\xf9\xd8\xba\x80\x6e\x5d\x04\x3f\xed\x8d\x94\xec\xc3\x1c\x83\x56\xd5\x1a\xb1\x83\x1a\x06\x5d\xc7\x0f\x2b\xd5\xc0\x76\x1d\x0c\x86\x9e\xc7\x9d\x80\x55\xb8\xe5\x87\x1e\xaf\x70\x27\xf0\xb1\xc7\xb2\xcb\x35\xec\xb1\x02\x1e\xfd\x61\x96\x53\x60\x81\x5d\xd1\x9e\x67\x39\x45\x8e\xbd\x0e\xf7\x8a\x35\xec\x1f\xb1\xca\xd1\x9f\xde\x12\x9e\x71\x43\xaf\x5c\xc3\x01\xcb\x0f\x58\xc5\x75\x82\x92\x32\x6b\xdc\xf2\x30\xb4\xc0\x8f\x21\x19\x2b\xd7\xf0\x7c\x95\x7b\x56\x60\x3b\x45\x45\x3e\xcc\x3d\xdb\x2d\x60\xd8\x3d\xc2\x3d\x0c\x87\x65\x9f\x33\xdb\xa9\x86\x01\xdb\x5c\xc0\x0b\x25\xf7\x08\xf2\xbc\x12\x55\x84\x1e\x67\x05\x5e\x0e\xac\x2e\xc4\x76\xba\x5c\x37\x0c\x90\x2f\xd9\xbe\x56\x12\x99\x91\x92\xbc\x5b\xb0\x6a\x38\x64\x95\x43\x8e\x97\xb9\x1f\x70\x4f\xfa\x95\x7e\x3f\xac\x0e\x6c\xef\xef\x95\x47\xb7\xc7\x7a\x59\x55\xaa\xf1\xbb\xe1\xde\x12\x34\x7c\x90\x57\x5d\x2f\x48\x0d\xf9\x45\xbb\x90\xda\x1d\x16\xfd\x54\xde\xcd\xb2\x02\x3f\xfc\xd4\x9b\x76\xc9\xaa\xb8\xdb\xbc\x30\x29\x37\x91\xca\x7b\x96\xe3\x97\xad\xc0\xf5\xb2\xec\xb9\x28\xc4\x86\x42\xcf\xaa\xb8\x05\x97\xf5\x77\xe5\x0f\x24\x0f\x58\x4e\x31\xb4\x8a\x3c\x95\xe7\x56\x25\xcb\xe6\xfd\x2c\x3b\x18\xfa\xbe\x6d\x39\xc9\xa1\x67\x87\xf6\xa6\x0e\x71\xcf\xb7\x5d\x27\xcb\x32\xdb\xd2\xc9\x41\xd7\x09\xb8\x13\xa4\xf2\xb5\x2a\xcf\xb2\x80\x1f\x0d\x7a\xab\x65\xcb\x76\x76\xb2\x91\x92\xe5\xf9\x3c\xc8\xbd\x98\xdf\x97\xda\xb1\x90\x27\xf5\xbc\xce\xbd\xd4\x5e\x67\xc4\x2d\xd8\x4e\x31\xcb\x92\xc3\xe5\xd0\xb3\xca\xa9\x7d\xae\x57\xf1\xb3\xcc\xa9\x46\xae\x9f\xdb\xbe\x93\x29\x33\xe7\x6c\xce\xa4\x73\xb9\x0c\xdb\xb2\x85\x49\x33\xbd\x31\x97\xc9\xb0\x5d\x2c\xcd\xb2\x91\x3f\x90\xeb\xbb\x19\xea\xcf\x3d\x2e\xcd\x47\xa2\xb4\xfe\x4c\x9a\x1d\x3b\xa6\x4a\x06\x72\x7d\xe9\x47\xd9\x2e\x96\x61\x59\xd6\xb7\x53\x3e\x61\x31\x46\x4d\x9a\x11\xe3\xd4\xa6\x69\x6a\x2c\x45\xc4\xe4\x52\x24\x7a\xe0\x4b\x8a\x96\x42\x62\xf2\x16\x08\x74\x46\x8c\x8a\xe3\xd4\xa2\x29\xd0\xe7\x74\x59\xbc\x4f\x4d\x9a\x05\x7d\x41\x0d\x31\x26\x8e\x53\x47\xa6\x7c\xa9\xf2\xc5\x09\x6a\x51\x93\xd1\x1c\x75\x68\x86\x1a\x74\x95\x1a\xa2\x4e\x4d\xba\x4e\x2d\xd0\x05\x31\x2e\xea\xd4\x11\x13\xd4\xa6\x86\x38\x0d\xfa\x28\x8a\x36\xe6\x0d\x46\x2d\x46\x53\x62\x54\xf2\xab\x78\x8b\x1a\x34\x17\xf1\x74\xa8\xcd\xa4\x62\x51\x07\x5d\xa2\x36\x35\xc5\x28\x5d\xa1\x96\x4c\xfb\x30\x6a\x75\x7d\xde\xe8\x15\x13\xa0\x8b\x52\x1d\x75\x68\x4a\xb5\x3a\x1f\xb1\x4e\x8b\x49\x9a\xd6\x2a\xaf\x31\x9a\xa5\xa6\x18\x13\xa7\xc5\x7b\xb7\x89\x5f\x51\xb3\x9d\x5f\x3a\x8c\x38\x09\x3a\xa7\x6b\xe7\x87\xf9\xe0\xa6\x6e\x16\x21\xa3\xd4\xa0\xcb\xd4\x11\x75\x9a\x91\xb3\x9f\x8f\x04\xb7\x14\xe1\x39\xea\x88\x13\xd4\xa6\x8e\x18\x13\x75\x49\xf6\x09\xcd\xd2\x9c\x18\x97\xcc\x62\x8c\xda\x62\x52\x76\x9f\x52\xbb\x95\xbf\xe4\x6e\x09\xb2\x42\xf1\x35\xa3\xe5\x4c\xb3\x48\xd6\x2c\xcd\x45\xa0\xcc\x18\x57\x37\xd2\x05\xc9\x53\xdd\x8c\x5c\xe3\x84\x54\x75\x9b\x9c\x0e\x5d\x56\xc0\xcd\xd9\x2e\x45\xf7\x56\xef\xda\xd8\x3c\xa6\xb7\x74\x81\x9a\xca\xa4\xb6\x2c\xf9\x38\xaa\x9d\xa0\x26\xb5\xe5\x93\x90\xfb\x99\x50\x7d\x40\xb3\xff\xfa\x7f\x83\x5a\x5d\xdb\xe8\xc8\x67\xd7\x55\x11\xdd\xef\xad\x49\xff\x04\x00\x00\xff\xff\xe3\x6f\x7f\x4c\x10\x09\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
