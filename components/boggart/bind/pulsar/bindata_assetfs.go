// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xff\x6e\x9b\xc8\x16\xfe\x3f\x4f\x71\x84\x12\x35\xd6\xbd\xfc\x30\x76\xef\xad\x52\x92\xab\xab\xb6\x5b\xad\xb4\x5d\x45\x6d\xb6\xd2\xae\x2a\x45\x63\x18\xc7\xac\x60\x86\x0e\x83\xdd\xc8\xf2\x3b\xed\x33\xec\x93\xad\x06\x30\x1e\x3b\xc6\x06\x6c\x1a\x4c\x19\xa9\x09\x81\xe1\x9b\xf3\xe3\xe3\xcc\x47\x35\xc3\x7c\x0e\x0e\x1e\xbb\x04\x83\x62\x53\xc2\x31\xe1\x0a\x2c\x16\x67\x56\x68\x33\x37\xe0\xc0\x1f\x03\x7c\xad\xa0\x20\xf0\x5c\x1b\x71\x97\x12\xfd\x4f\x34\x45\xc9\x45\xe5\xe6\x0c\x00\x60\x1c\x11\x5b\x5c\x81\x29\xf2\x22\xfc\x13\x65\x3e\xe2\x97\xa4\x07\xf3\xf8\xaa\x68\x0c\xf3\x88\x11\x20\x78\x06\x3f\x13\xee\x69\xbf\x46\xfe\x08\xb3\xb4\x67\x4f\x1b\x2f\x6f\x79\x1d\xdf\xb1\x38\xb3\xf4\x64\x80\x9b\x33\xcb\x71\xa7\x60\x7b\x28\x0c\xaf\x15\x46\x67\xe9\x88\xf2\x59\x9b\x7a\xaa\xef\xa8\x7d\x13\xc4\x51\xe8\x2f\x8f\xbe\x85\x6a\xdf\x4c\xfb\x6f\xde\xf3\xed\x3e\x40\x04\x7b\xd2\xd5\xa7\x3d\x96\xc1\x58\xef\x93\xf5\x63\xd4\xc3\xd7\x0a\x47\xa3\x6d\x48\x59\xcf\xc8\x5b\x02\x12\x34\x05\x82\xa6\x2a\x47\xa3\x10\x46\x88\xdd\x8b\x03\x65\x05\xe3\xb9\xe1\xb6\xb1\x32\x24\xcf\x4d\xfb\x06\x0c\x87\x98\xf0\x38\x17\xca\x7c\x0e\xee\x18\xf0\x57\xd0\x50\x92\x02\x45\x24\x6f\x39\xa6\x38\x37\xc5\xa2\x13\x26\x0e\x2c\x16\x37\x16\x82\x09\xc3\xe3\xeb\x9c\xfb\x56\x99\xbd\x9a\x52\xd7\xb9\x34\x7a\xaf\xc5\xbd\x5e\x88\x61\xb1\x98\xcf\x41\xfb\x88\xbf\x46\x38\xe4\xda\x6f\x1f\x7f\xd1\x6e\x11\x9f\x24\xa7\x13\x70\xe5\x46\x80\xf6\x5f\x11\x50\xde\x44\x8c\x61\xc2\xc1\xc7\x28\x8c\x18\xf6\x31\xe1\xa1\x02\x1a\x2c\x16\x96\x8e\x6e\x2c\xdd\x73\x8f\xe0\x28\x62\xf6\x44\x78\x57\xd1\x5f\xe9\xf6\x2a\x6e\xff\x2f\xc1\xb9\x4e\x61\xb6\x45\xe1\xff\xcb\x11\xf6\x3b\x6e\xe9\x91\x97\x73\x45\xe2\x24\x47\x23\x35\x9f\x95\xbb\xd8\x29\x23\x88\x33\x30\x46\x0e\x86\x24\x5c\xe0\x92\x1d\x68\xa2\xed\x0c\xde\xce\x3b\xad\x20\x1b\x19\x7f\xe3\xaa\x1f\x71\xec\xc0\x98\x12\xae\xf6\x07\xe0\xab\x23\x75\x60\xec\x19\x3b\x1d\x9f\xa1\x19\x5c\x26\x61\xfd\x34\xa1\x33\x18\x33\xea\xc3\x45\x08\x9c\xc2\x45\x4c\x2d\xe2\x7a\xd9\xbf\xcb\x80\xb9\x84\x83\xb2\x56\xc2\xbe\xe4\xd4\xb0\x2f\xca\x8d\x43\xed\x48\x70\x54\x9b\x31\x97\xe3\x4b\x07\x71\x7c\x47\x3f\x71\xe6\x92\x87\xcb\x17\x0a\x5c\x6a\xe2\xcc\xbd\x18\x52\x4b\x4a\x16\x28\xa6\x61\xfc\x47\x35\xfa\xaa\x61\xde\xf5\x5f\x5e\x19\xc3\x2b\xe3\xe5\x1f\xc6\x7f\xaf\x0c\x43\xe9\x81\xf2\xa2\xd7\xcb\x0a\x98\xd2\xab\xc9\x1c\x4e\xab\x18\xd3\xdb\x9b\x31\x3d\xd8\x9d\x10\x4b\xd4\x2a\x2c\x11\xca\xc3\x10\xff\x54\x43\xce\xdc\x00\x3b\xe0\x20\x8e\x92\xf3\x0e\x57\x19\x0e\x03\x4a\x42\xc1\x33\x42\x67\x0c\x05\x0a\x84\xfc\x51\x90\x73\xe6\x3a\x7c\x72\xd5\x37\x8c\x8b\x02\x14\xb0\xf8\x04\x23\xa7\x48\x3f\xb6\xbf\x53\x0a\xb8\x7a\x52\xdf\x22\x9e\x3d\xa6\x7c\x52\x01\xe0\x1d\xc1\xec\xe1\x31\x85\x18\x31\xd0\x57\x97\xde\xdb\xc8\x3b\x08\xfb\x36\x12\x85\xc8\x25\x41\xc4\xe1\xc2\xd9\xe4\x7a\x5f\x1e\x51\x7a\x4a\x7c\x2b\x8c\x82\x9b\x81\xa5\x8b\x5f\xa0\x43\x20\x50\xc4\x93\xd2\xab\xcb\x12\xb3\x31\x96\x0c\x1a\x63\xc9\xb0\x3e\x4b\x2c\xbd\x08\xd5\x05\x56\xc1\x07\x67\x44\x9d\xc7\x82\xb5\x98\x3c\x60\x38\x77\xff\x0d\xe7\x21\x47\x1c\xae\xae\x41\x13\x07\xe1\xbe\xda\x02\xe5\x1e\xd0\x02\x56\x4b\x56\x25\x33\xd4\xb9\x16\x60\xe6\x52\x07\x14\x9f\x12\x3e\xf1\x1e\xf7\x4e\x51\xdb\xa0\x44\x8e\x62\xdf\x34\x51\x19\xb4\x0f\x02\x4a\x4b\x2a\x30\x9c\x0b\xbd\x31\x9f\xcb\xd7\x7f\xc7\x88\x95\x19\x66\x29\x2e\x36\x4d\x76\x90\x5b\xcd\x60\xc9\x96\xb7\xe8\x31\x35\xf0\x7b\x79\x51\xd2\xdc\x62\xef\x15\x3b\xe7\xc0\x75\xbb\xf7\xcf\x82\xb0\x58\xc8\xb3\x60\x29\x0f\x63\x51\x57\x8c\xb0\x7a\x51\xc6\x96\xa2\x76\xa5\x78\xc9\x2f\x62\x59\xb4\x92\x49\x0a\x16\x8b\x8a\xb1\x70\xc7\xf0\xc0\xd7\xb0\xee\x98\x88\x8f\xa1\x19\xe5\x49\x10\x20\xb2\xd4\x10\x1e\x1a\x61\x0f\xe2\x9f\xaa\x23\x6a\x0b\x2b\x20\x08\xea\x0e\xd3\x5b\xec\x71\xb4\x1e\x2b\xd0\x9f\xdd\xaa\x24\xe0\xd5\x32\x18\xdb\xa3\x8b\xc0\x97\x7b\x02\xd2\x4a\xe5\xd5\x9d\xfa\x30\xb2\x6d\x1c\x86\x5d\xee\x9b\x97\x7b\x31\x4b\xd5\x9a\x7b\x97\x8c\x69\x97\xf8\xe6\x25\x7e\xa3\xde\x27\xf1\x39\x6a\xbd\xc7\x63\x14\x79\xbb\xfe\x3b\x23\x1f\xb2\xf6\xdc\xd7\x1e\xe5\x16\x89\x8b\xf8\x3d\xa8\xff\x99\x7a\x91\x8f\x37\x9f\x20\xd8\xe8\x55\x52\x65\xca\x3c\x4c\x00\x5a\xa9\x3b\x12\xd7\x9a\x56\x82\xe4\x80\x3f\xaf\xee\xa8\x2b\xf5\x4d\xd0\x1d\x5d\xee\x57\x6d\x9b\xee\xa8\x2b\xf7\xcf\xae\x3b\xba\xc4\xaf\xda\x36\xdd\x21\xc7\xa7\x6d\xba\x23\x37\xf7\x9d\xee\x28\x19\x44\xb3\x90\xee\x30\x0f\xd5\x1d\x66\x7b\x75\x87\xd9\xc8\x12\x64\x36\x46\x77\xd4\x90\xfa\xc6\xe8\x8e\x2e\xf7\x71\xcb\xd5\x1d\x35\xe4\xbe\x19\xba\xa3\x4b\x7c\xdc\x72\x75\x87\xd9\x62\xdd\xb1\x2d\xf7\x9d\xee\x28\x19\xc4\x41\x21\xdd\x31\x38\x54\x77\x0c\xda\xab\x3b\x06\x8d\x2c\x41\x83\xc6\xe8\x8e\x1a\x52\xdf\x18\xdd\xd1\xe5\x3e\x6e\xb9\xba\xa3\x86\xdc\x37\x43\x77\x74\x89\x8f\x5b\xae\xee\x18\xb4\x58\x77\x6c\xcb\x7d\xa7\x3b\x4a\x06\x71\x58\x48\x77\x0c\x0f\xd5\x1d\xc3\xf6\xea\x8e\x61\x23\x4b\xd0\xb0\x31\xba\xa3\x86\xd4\x37\x46\x77\x74\xb9\x8f\x5b\xae\xee\xa8\x21\xf7\xcd\xd0\x1d\x5d\xe2\xe3\x96\xab\x3b\x86\x2d\xd6\x1d\xdb\x72\x7f\x72\xba\xa3\xd8\x9a\xef\xe2\x23\x5b\x7a\x81\x55\xdf\x96\x1e\x6f\xe6\xd8\xbb\x45\xa8\xc8\x62\xe0\x66\x6f\x1e\x81\x32\xeb\xd3\x61\x73\x27\xc0\x87\xd5\x66\xb7\xb2\xfb\x3d\x9e\x60\x7d\x16\x3c\x2e\xbd\x6b\xe4\x79\x76\x04\x40\xf9\xa8\x39\xeb\x5b\x6f\x00\x11\x07\xb8\xeb\xaf\x3c\x2e\xbd\xf4\x3f\xde\x13\x25\x20\xb4\x77\x8c\xd1\x52\xeb\xd8\x53\x93\xd6\x36\xaa\x2d\x65\xea\x7c\xbe\x89\x9c\xe1\x97\xb6\xb2\xd2\x62\xf9\x32\x63\x64\x37\x1d\x65\x85\xfd\xca\xef\x98\x8c\x35\x2e\xb3\x5f\xb6\x24\x93\x04\x4b\x43\xa7\x13\x52\xd9\xb0\x25\x51\xe0\x8c\x92\x87\xad\x69\x2d\x0d\x06\xf2\x1b\xd2\x51\xcc\x93\x51\xfb\xaf\xc8\xad\x17\x31\xe4\x81\xf2\xaf\x0b\x07\x42\x6c\x53\xe2\x28\xf2\x1f\xa1\xf2\x64\xd4\xf3\xb5\x8d\x46\x9b\x57\x2b\x5a\x54\x91\xa6\x3b\x1c\x92\xfd\x79\x16\x77\x8a\xcf\xc1\x72\xb3\xf4\x84\x3e\x95\x58\x5c\x61\xcc\xf2\xd5\xa4\x94\xb6\x28\xbc\xe7\xaa\x6a\x19\xbf\xc3\x7e\x80\x19\xe2\x11\x8b\xf7\x13\x57\xaf\xe3\x7c\x05\x74\xef\x92\xe3\x57\xf3\x6d\xf8\xdf\xbf\xa6\x1f\x43\xdc\x6e\xba\x12\x97\xe9\x8d\x97\x9b\x2c\x3f\x7f\xff\xf5\x46\xa9\xe4\x60\x73\x69\x46\x23\x7e\x24\x9e\xd1\x88\xd7\x4b\xb4\x6c\x80\x16\x30\x4d\xf8\xf2\xa3\x51\xcd\x11\x93\xd0\x91\xc8\x16\x63\xd5\x4b\x37\x69\x88\x16\x10\x2e\xf1\xe6\x47\xa0\xdc\x2d\x9d\x61\x76\x00\xcd\x02\x71\xff\xf1\xa9\x25\xc1\x9e\x28\x9d\x12\x0f\x76\x52\xe8\xbd\x8d\x3c\x7d\xd2\x06\x16\xad\x7d\x8b\xa2\x0a\x8d\x70\x0c\x70\x7c\x1e\xc9\xb8\x27\x4a\xa4\xd4\x85\xbd\x4c\x6a\x03\x8f\xde\xa0\x00\xd9\x2e\x3f\x84\x49\x76\x0a\x71\x7c\x2e\xad\x23\x9f\x28\x9b\x32\x27\x72\xf8\x94\xf7\xc1\x10\xa5\xd7\x06\x7a\x51\x12\x46\x7e\x10\x7f\xdc\xeb\x00\x86\xad\x50\x6a\x20\xd9\x26\xf8\xa9\xf2\x4c\xf2\xa3\x24\xd5\xf4\x49\x2b\xc8\x56\xe0\x1b\x4a\x95\x04\x57\x14\x7a\xe2\xdd\x3b\x88\xf8\x7d\xbf\x06\xe1\xf5\x14\xfe\x44\x19\xb8\xee\xc9\xce\xe9\x73\xf9\x29\xa4\xb6\x93\xce\x3c\x06\xe9\xcc\x7a\x49\x67\xb6\x86\x74\x66\x47\xba\xec\xcb\x68\x87\x92\x6e\x50\x2f\xe9\x06\xad\x21\xdd\xa0\x23\x5d\xf6\x11\xbc\x43\x49\x37\xac\x97\x74\xc3\xd6\x90\x6e\x78\x3a\xa4\x3b\xee\xf2\x93\xdd\xd6\x59\xba\xe3\x4e\xb7\x83\xe4\x5c\xda\x72\x7a\xe3\x94\xf4\x67\x7a\x98\xfe\xca\xcc\xf9\x27\x00\x00\xff\xff\xd3\x0d\x56\x57\x5c\x5b\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xcd\x8f\x53\xd5\x1b\x7e\xe0\x96\xb6\xf4\xf7\x13\x05\x11\xbf\xe1\xa0\x0e\x6a\xc8\xa5\xed\x0c\xa0\x76\xa6\x83\x38\x80\xe1\xa3\x42\xa0\x12\x77\x78\x69\x8f\xed\x8d\xed\xbd\x37\xf7\x03\x9c\x48\xe2\x7c\x84\x8c\x88\x11\x12\x35\xb8\x40\x40\xa3\x3b\x8c\x65\x98\xc6\x01\xa6\x9d\x8d\x0b\x17\x2e\xde\x13\xdd\x19\x8d\x1b\x37\xfa\x07\x18\x5d\x99\x73\xcf\x81\x99\x0e\xd1\x2e\xee\xfb\xbe\xcf\x79\x3f\x9e\xf7\x39\xa7\xbf\xac\x49\x7c\x0c\x00\x4f\x02\x78\x0c\xc0\xd6\x65\x40\x16\xc0\x81\xe5\x88\x7f\x69\x03\x58\x0b\x60\xa5\x01\xac\x03\xb0\xde\x00\x56\x00\xd8\x66\x00\x29\x00\x83\x06\x90\x04\x30\x62\x00\x69\x00\xfb\x0c\xe0\x7f\x00\x8e\xe8\xba\x63\x06\x90\x00\x10\x1a\xc0\x3d\x00\x46\x75\xde\x94\xae\x3b\xaf\xe3\x0b\x3a\xef\x8a\xc6\xbf\xd4\xfd\xaf\x6a\x7c\x46\xdb\x1b\x7a\x7e\xd7\x00\x0c\x00\xdf\xea\x79\xdf\xe9\x3e\x3f\xea\xba\x9f\x75\xde\x6f\x06\xb0\x0a\xc0\x1f\x06\xb0\x12\xc0\xdf\x06\xb0\x1a\x40\x22\xa1\xf0\x75\x09\xe0\x5e\x00\x7d\x09\xbd\x57\x42\xf1\x1c\x4c\xa8\x7d\xf7\xea\xf3\xd7\x13\x8a\x97\x97\x00\xea\xcb\x80\x93\x09\x60\x00\xc0\xaf\x2b\x80\xed\x00\xd6\x26\x81\xff\x03\xd8\x9f\x04\x32\x00\x5e\xd3\x71\x45\xc7\x9e\x8e\xdf\x4e\x2a\xad\xdf\x4d\x2a\xbe\x57\x93\x6a\x4e\x3b\xa9\xf8\x7c\xaf\xed\x4f\xda\xfe\xae\xf3\xfe\x4a\xaa\x3d\x97\xa7\x54\x9f\x55\x29\x85\x3f\xaa\xed\x53\xda\x9a\x29\xc5\x73\x7b\x4a\xe9\x5f\xd4\xf9\x87\x53\xaa\xdf\xb1\x14\x70\x1f\x00\x27\x05\x30\x00\xef\xe8\xf8\x4a\x0a\xd8\x08\xe0\x5a\x4a\xf1\xfb\x21\x05\x3c\x0d\xe0\x4f\x7d\xbe\x21\xad\xea\x73\x69\xe0\x09\x00\x3b\xd2\x4a\xc7\xe3\x69\x60\x8d\xbc\xdf\x34\xb0\x0c\xbd\x3f\xf9\x9e\xe4\x1d\x49\xfd\x1e\x06\xf0\xc8\xa2\xb3\x07\xa0\xf6\x91\x5a\x4b\x1e\x52\x03\xc9\xfb\x71\x7d\x2e\x39\xac\x5e\x94\x7f\xbf\xdc\x55\xfb\xf2\x1d\xc8\x9d\xe4\xbe\x1b\xa0\xe6\x3f\x04\xc5\x4b\xee\x20\xf5\x7e\x50\xe7\xae\xd5\x76\xa5\xb6\xf2\x8e\xe5\x3e\xf2\x79\xcb\x77\x22\x77\x5a\x2f\x0f\xfa\xaa\x2c\xe0\x15\xd7\xa9\x2e\x78\x01\x36\x2f\xa0\x9b\x17\xc1\x3b\x3d\xdf\x6e\x60\xa7\x5f\xa9\xdb\x27\x38\x76\x46\xb5\x28\x08\x31\x62\x79\x56\xc5\x0e\x47\x31\xe2\x3a\x41\xd4\xf4\x42\xdb\x75\x30\x12\xf9\x3e\x77\x42\xd6\xe4\x56\x10\xf9\xbc\xc9\x9d\x30\xc0\x2e\x2b\xe4\xf1\x87\x59\x4e\x95\x85\x76\x93\x63\x17\xaf\xf0\xe6\x71\xee\x63\xb7\xc3\xfd\xda\x28\xf6\xf0\xe3\x7e\x64\xf9\xa3\x78\xb9\x62\x35\xe2\x4f\xb6\x8e\x7d\x96\x13\x63\xfb\xa2\x86\xfc\x38\x1c\x25\xcb\xaf\xd4\x51\xb2\x46\x51\x5a\x18\x80\x57\xdc\x13\xaa\xd9\xc1\x4a\xe8\x4a\x7b\xc8\x3d\x29\xbf\x51\x23\xe0\xcc\x76\xbc\x28\x64\x7d\x55\x1c\xe1\x5e\xa8\xd2\xca\xbc\xe9\x71\xdf\x0a\x23\x9f\xb3\x2a\x6f\x84\x56\x0f\x62\x3b\x3d\xa1\x1b\x85\x38\x6a\x35\x22\x8e\xe6\x50\x10\x79\xc3\x03\x43\x59\x69\x7a\x23\x96\x65\x9e\x9c\x16\xf4\xc2\xd9\x3a\x34\x7c\x98\x7b\xae\x1f\x9a\xa5\xa0\x66\x57\xcd\x97\xa2\x5a\x60\x96\xdd\x02\xab\xf2\x13\x2f\xbe\x69\xd7\xad\xa6\xbb\xc5\x8f\x32\x87\x0e\x96\xcd\x11\x9f\x5b\x52\x48\x53\xca\x55\x60\xfd\xb9\xfc\x0b\x66\x6e\xc0\xec\x7f\x8e\xf5\x0f\x14\xb6\x6d\xdb\x9c\x1b\xc8\xe5\x32\x07\xac\x20\x34\xcb\xbe\xe5\x04\x0d\x2b\x74\xfd\x02\xdb\x1f\xf7\x60\xa5\xc8\xb7\x9a\x6e\xd5\x65\x43\x3d\x8d\x87\x33\x07\x2c\xa7\x16\x59\x35\x6e\x96\xb9\xd5\x2c\xb0\x3b\x71\x81\x1d\x8e\x82\xc0\xb6\x9c\x4c\x69\x6f\x69\xb7\x79\x94\xfb\x81\xed\x3a\x05\x96\xdf\x92\xcb\x8c\xb8\x4e\xc8\x9d\xd0\x2c\x8f\x7a\xbc\xc0\x42\xfe\x56\x98\xf5\x1a\x96\xed\x0c\xb2\x4a\xdd\xf2\x03\x1e\x16\x5f\x2d\xef\x31\x9f\x5f\xc8\x93\x7c\xde\xe0\xbe\xb9\xdb\xa9\xb8\x55\xdb\xa9\x15\x58\xe6\x50\x23\xf2\xad\x86\xb9\xc7\xf5\x9b\x41\x81\x39\x5e\x1c\x06\xc5\x81\x41\xa6\xdc\xa2\xd3\x97\xcf\x15\x8b\x79\xb6\x69\x13\x93\x6e\x6e\x63\x31\x9f\x67\x3b\x58\x8e\x15\xe2\x78\xb8\xd8\x7f\xfb\x68\xa8\xb8\x55\xba\xcf\xc4\x69\x43\xf9\x1c\x3b\x75\x4a\x95\x0c\x17\xfb\x73\xcf\xb2\x1d\x2c\xcf\x0a\xac\x7f\x50\x3e\x66\x31\x4e\x6d\xba\x29\x26\xa9\x43\x33\xd4\x5a\x8a\x88\xb3\x4b\x91\xf8\xa9\x2f\x29\x5a\x0a\x89\xb3\x77\x41\xa0\xf3\x34\x2f\xc6\xa8\x4d\xb7\xc4\xfb\xa0\xf3\x62\x4c\x9c\xa6\x59\x9a\x96\xf8\x34\x5d\x17\x93\x62\x5c\x4c\x80\x2e\xd1\x35\xf1\x1e\xb5\x69\x0e\x74\x85\x5a\x62\x5c\x9c\xa6\xae\x2c\xfe\x5c\x75\x12\x67\x68\x96\xda\x8c\xe6\xa9\x4b\x37\xa9\x45\xdf\x50\x4b\x4c\xc8\x9e\x34\x0b\xfa\x28\x0e\x5a\x77\x1c\x46\xb3\x8c\xa6\xe3\x99\x73\xe2\x9c\x84\xdb\x71\xd1\x35\x31\x26\x29\x7c\x45\x1d\x6a\x8b\x31\xba\x4e\xb3\xf2\xf4\x0b\x6a\xc7\xc9\x2d\x45\xf0\xc3\x38\xf5\xd6\x1d\x27\x2b\xa6\x40\x5f\x53\x87\xa6\xa9\xa5\xea\x3f\x11\x1f\xa8\x54\xe9\x74\xa4\x73\x31\x3e\x9a\x88\x1d\xba\x01\xba\xbc\x94\xa5\x4c\xfa\x94\xba\xe2\xdc\x6d\x0e\x97\xe8\xa6\x98\x58\x08\x2f\x52\x57\x9c\xa1\x0e\x75\xa5\x18\x71\x6b\x9a\xa3\x79\x31\x29\x2b\xc5\x38\x75\xc4\x59\xba\x21\x57\x8a\x45\x91\xff\x52\xfa\x8c\xda\xd4\x59\xdc\xe2\x72\xbc\x53\x9b\xe6\xa9\x45\x33\x2c\x1e\x3b\x47\xf3\x31\xd8\x12\x13\x62\x52\x49\xd9\x03\x49\xab\x24\x9d\xa1\x96\x98\x92\x52\xfe\x4b\x4e\x57\x4e\x89\x97\xe9\x50\x4b\x8a\x76\x21\x76\xa6\x24\x09\x79\x31\xa0\xb9\xff\xfc\xd7\xd3\x6c\xcf\x3e\x5d\x79\xfd\x3d\x15\xb1\xca\x77\x27\xfd\x13\x00\x00\xff\xff\x78\x10\x91\x8b\x87\x08\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
