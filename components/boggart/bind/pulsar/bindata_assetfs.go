// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7f\x73\xda\x38\xde\xff\x3f\xaf\x42\xe3\x27\x7d\x80\xb9\x62\x03\xa1\x7b\x3b\xd4\xe4\xe6\xae\xd9\xdb\xee\x4c\x73\x97\xe9\x66\x77\x26\xdb\xe9\x74\x84\x25\x82\x7b\xb6\xe4\x4a\x32\x69\x2e\xc3\x7b\xba\xd7\x70\xaf\xec\x46\x92\x6d\x04\x18\x62\x1b\xdc\x10\x8a\x66\xda\x18\x5b\xfa\xfe\xfc\xe8\xeb\x8f\xc1\x96\x1f\x1e\x00\xc2\x63\x9f\x60\x60\x79\x94\x08\x4c\x84\x05\x66\xb3\x13\x97\x7b\xcc\x8f\x04\x10\xf7\x11\x1e\x5a\x30\x8a\x02\xdf\x83\xc2\xa7\xc4\xf9\x0c\xa7\x50\x1f\xb4\xce\x4f\x00\x00\x60\x1c\x13\x4f\x1e\x01\x53\x18\xc4\xf8\xef\x94\x85\x50\x34\x49\x0b\x3c\xa8\xa3\xb2\x31\x2c\x62\x46\x00\xc1\x77\xe0\x17\x22\x02\xfb\x1f\x71\x38\xc2\x2c\xe9\xd9\xb2\xc7\xe9\x90\xd7\x6a\xc4\xec\xc4\x75\xb4\x82\xf3\x13\x17\xf9\x53\xe0\x05\x90\xf3\xa1\xc5\xe8\x5d\xa2\xd1\xdc\xeb\xd1\xa0\x1d\xa2\x76\xb7\x07\xe4\x16\x0f\xd3\xad\xaf\xbc\xdd\xed\x25\xfd\x97\xc7\x7c\xfd\x14\x41\x82\x03\xe3\xe8\x6a\x8f\x34\x18\x8b\x7d\xb2\x7e\x8c\x06\x78\x68\x09\x38\xca\x93\x94\xf5\x8c\x83\x54\x20\x81\x53\x40\xe0\xb4\x2d\xe0\x88\x83\x11\x64\x9f\xe4\x86\x35\x17\x13\xf8\x3c\x4f\x57\x26\x29\xf0\x93\xbe\x11\xc3\x1c\x13\xa1\x72\x61\x3d\x3c\x00\x7f\x0c\xf0\x17\x60\x43\x9d\x02\x4b\x26\x2f\xd5\x29\xf7\x4d\xb1\xec\x84\x09\x02\xb3\xd9\xb9\x0b\xc1\x84\xe1\xf1\x70\xcd\xb8\x79\x66\x07\x53\xea\xa3\x66\xa7\xf5\x5a\x8e\x0d\x38\x06\xb3\xd9\xc3\x03\xb0\xdf\xe3\x2f\x31\xe6\xc2\xfe\xed\xfd\x3b\xfb\x0a\x8a\x89\xde\xad\x85\x5b\xe7\x52\x68\xf7\x47\x02\xac\x37\x31\x63\x98\x08\x10\x62\xc8\x63\x86\x43\x4c\x04\xb7\x80\x0d\x66\x33\xd7\x81\xe7\xae\x13\xf8\x3b\x70\x14\x32\x6f\x22\xbd\xab\xe8\xaf\x31\xbc\x8a\xdb\x7f\xd1\x72\x86\x89\x98\xbc\x28\xfc\x35\xd5\xf0\xb8\xe3\xae\x13\x07\x6b\x8e\x18\x98\x14\x70\xd4\x5e\x8f\xca\x4d\xe8\x34\x25\xc8\x3d\x60\x0c\x11\x06\x3a\x5c\xc0\x27\x1b\xa4\xc9\xb6\x31\x78\x1b\x47\x9a\xd6\xdf\xe1\x20\xb0\x00\x17\xf7\xd2\x32\x3a\xc5\x6c\x1c\xd0\xbb\x01\x80\xb1\xa0\x8f\xe8\x57\x92\x64\x8d\x48\x45\xc9\xed\xf6\x84\x32\xff\xdf\x94\x08\x18\xa4\xb3\x48\xee\xb6\x40\x88\xc5\x84\xa2\xa1\x75\x8b\x85\x05\x92\x2c\x59\x6b\xb2\x68\x01\x1f\x0d\x53\x6f\xda\x7a\x3c\xa1\x53\x18\xf8\x08\x0a\xfc\xb8\x55\xca\x32\x9f\x44\x71\x5a\x27\x27\x3e\x42\x98\x58\xba\x12\x0e\xe7\x71\x22\x30\xc4\x1a\x9f\x94\x58\xc0\xd9\x5e\x72\x2a\x72\xcc\x68\xb8\x53\x81\x82\x16\x17\xb7\x5a\x85\xfb\x05\x52\x99\xb6\x6c\xa2\x5c\x40\x81\x01\x83\xe4\x36\x99\x2b\x85\x25\xb8\x63\x1f\x07\x88\x63\x51\x5c\xe9\xaa\xdd\x44\x30\x1a\xb4\x6f\x19\x8d\xa3\x12\xc6\x6f\x90\xc5\x2b\x88\x59\x16\xa5\x12\xd5\x8e\x18\x8e\x64\x59\xd1\x9f\xaa\x9a\x98\xc9\xe7\x11\x24\x59\xa9\x44\xa8\x4d\x89\x29\xb9\x0d\x11\xa2\xc4\x3a\x77\xfd\x6c\x9a\x41\x30\x86\x6d\x0f\x06\x98\x20\xc8\xac\x73\xd7\xf1\xcf\x5d\x47\x4a\xd9\xc2\x08\x13\x82\x02\x7f\x15\x8b\x53\x50\x4e\x3b\x6b\x61\x9a\x27\x41\xcd\x70\x2a\x67\xb2\xec\xf5\x49\x22\xdf\xd6\x14\x02\x58\xbd\x4e\xe7\x07\xbb\xd3\xb5\x3b\x3d\xd0\x7d\x35\xe8\xf4\xd5\x59\xa1\x0d\xb2\xce\x82\x6e\xec\x5a\x18\xf2\x2b\xee\x38\xc8\x9f\x56\x40\x4d\xf9\x61\x25\x87\xb8\x4e\xb9\xb9\x51\x42\xfc\xae\xa6\xfd\x15\x66\x3e\x45\xc7\x29\xff\xe8\x94\x4f\x4f\x9a\x77\x3e\x12\x93\x01\xe8\x76\x3a\x2f\xb6\x2a\x03\x38\xc0\x9e\x50\xd3\x2e\x4a\x52\xa0\x4b\x7f\xfa\x29\x67\xfa\x01\x3d\xa8\x67\x01\x86\xbf\xc4\x3e\xc3\x68\x68\xa5\x5b\x5b\xd8\xa2\xec\xa1\xd1\xfc\xe2\x61\x68\x85\x94\x88\x49\x70\x6f\x30\x36\x6d\x16\xc8\x8e\xc8\xa9\xad\xcd\x91\x56\xa4\x5b\x06\xeb\xcb\x10\x76\x99\x8e\xd0\x0c\x4c\x2b\xda\xa9\xb5\x08\xfa\xb9\xb6\xea\xfd\xc5\x2d\xbd\xd0\xfd\x6b\xb3\x73\x42\x63\x96\x6b\x68\x72\xa0\xb8\xa5\x6f\x93\x01\xbb\x31\xd5\x75\xb4\xae\x63\xf5\xfd\x46\xd5\xb7\x62\xfd\xfc\x7f\x32\xe2\xd1\xeb\xef\xa7\xe4\x6e\x81\xe8\x51\x2c\x04\x25\x09\xc3\xe1\xf1\x28\xf4\x45\x56\x52\x47\x82\x80\x91\x20\x6d\x1e\x7b\x1e\xe6\xdc\xb8\x58\xfc\x75\x42\xef\xd2\x49\xa5\x25\x1c\xa7\x44\x11\xf1\xae\x23\x4f\x53\x9b\xfb\x15\x10\xe5\x0a\x38\x0a\xb0\x71\x99\x1c\x60\xa0\xfe\x6f\x73\xc1\xfc\x08\x23\x80\xa0\x80\x7a\x3f\x12\x6d\x86\x79\x44\x09\x97\x57\xcf\x84\xde\x31\xb8\x7c\x8e\x2e\x78\x8a\x76\xc5\x04\x43\x54\xa4\x1f\x2b\x18\x34\x31\x39\x5f\xb8\xac\x4a\x21\x25\x26\x15\x04\xfc\x44\x30\xbb\x4d\x4b\xfd\x88\x01\x67\x7e\xe8\x67\x4f\x5e\x76\x6f\x21\xfb\x2a\x0e\x38\xd6\x53\x0e\xbc\x50\x24\x90\xf8\x41\xf6\xaf\x6b\x6a\x64\xf0\x0e\x34\xf5\xa8\xd0\xe5\x71\x74\x7e\xe6\x3a\xf2\x0f\x70\x40\x24\xa5\x70\x0b\xd8\xad\xba\x2c\xe9\xed\x8d\x25\x67\x7b\x63\x49\xbf\x3e\x4b\x5c\xa7\x08\xd4\xa5\xac\x82\x13\x67\x44\xd1\xfd\xe3\xfd\x94\x1f\xe4\x16\x83\x53\xff\x25\x38\xe5\x02\x0a\x30\x18\x02\x5b\x6e\xf0\x22\x57\x27\x25\x26\x68\x01\xab\x0d\xab\x34\x5b\x3b\xcd\xe3\xc0\xa5\x8a\x75\x9a\x59\xe5\x9b\x2d\x2b\x83\xad\xc8\xb1\xfd\xab\x60\x3e\xb9\x05\xa7\x2a\xb1\x16\x82\x7c\x32\xa2\x90\x21\x45\x08\x1f\x1e\xcc\xfe\x37\x18\xb2\x32\x6a\xd3\xaf\x50\x97\x5d\xc8\xa8\x71\x59\x07\x0c\x5b\x2e\xe0\x7d\x62\xe0\x53\x79\x55\xd2\xfc\x62\xbf\xa6\x20\xea\xc5\x21\x26\xc2\xbe\x63\xbe\xc0\x4d\x04\x05\xbe\xa6\xda\x97\x66\x63\xd1\x6e\xf3\xdb\x8c\x76\xa7\xdb\xee\xf4\xae\xd5\xb7\x19\x83\xce\xab\x3f\x3a\x7f\x1e\x74\x3a\xd2\xd7\x46\xab\x35\xff\x25\xa5\x8c\x87\x8a\xf3\x17\x3c\x4d\x17\x45\x74\x29\xe8\x57\x8a\x97\xf9\xf3\x53\x16\x2d\x7d\x12\x03\xb3\x59\xc5\x58\xf8\x63\x70\x2b\x16\x64\x5d\x33\x19\x9f\x8e\xdd\x29\x0f\x02\xe3\x0b\xb8\x00\x8e\x70\x00\xd4\xff\x6d\x24\x6b\x0f\xab\xc2\x8b\x77\x1c\xa6\x0b\x1c\x08\xb8\x18\x2b\xe0\x3c\xb9\x55\x3a\xe0\xd5\x32\x08\xf4\x45\x66\xa9\xef\x2c\x8d\xca\x15\xd4\x9d\xfa\xec\x4a\xe0\xc9\xa3\x7c\xcc\x3d\x58\x3d\x6b\xd5\x9a\x7b\x9f\x8c\x8b\xfc\xf4\xb5\x2a\xef\x98\xf8\x02\xf6\x54\x4f\xfc\x52\xbd\xd7\xf1\xd9\x69\xbd\xc7\x63\x18\x07\x9b\x7e\xc4\x5d\x2f\xb2\xf6\xdc\xd7\x1e\xe5\x03\x22\x17\xea\x3a\xa9\xfb\x3b\x0d\xe2\x10\x2f\xcf\x20\xb0\xd4\xab\x24\xcb\x34\x71\xa8\x05\x1c\x24\xef\xd0\xae\xed\x5b\x09\x32\x03\xfe\xb4\xbc\xa3\xae\xd4\xef\x03\xef\x38\xe6\x7e\xde\xf2\x78\x47\x5d\xb9\x7f\x72\xde\x71\x4c\xfc\xbc\xe5\xf1\x0e\x33\x3e\x87\xc6\x3b\xd6\xe6\xfe\xc8\x3b\x4a\x06\xb1\x57\x88\x77\xf4\xb6\xe5\x1d\xbd\xc3\xe5\x1d\xbd\xbd\x2c\x41\xbd\xbd\xe1\x1d\x35\xa4\x7e\x6f\x78\xc7\x31\xf7\xaa\xad\xe5\x1d\x35\xe4\x7e\x3f\x78\xc7\x31\xf1\xaa\xad\xe5\x1d\xbd\x03\xe6\x1d\x79\xb9\x3f\xf2\x8e\x92\x41\x3c\x2b\xc4\x3b\xce\xb6\xe5\x1d\x67\x87\xcb\x3b\xce\xf6\xb2\x04\x9d\xed\x0d\xef\xa8\x21\xf5\x7b\xc3\x3b\x8e\xb9\x57\x6d\x2d\xef\xa8\x21\xf7\xfb\xc1\x3b\x8e\x89\x57\x6d\x2d\xef\x38\x3b\x60\xde\x91\x97\xfb\x23\xef\x28\x19\xc4\x7e\x21\xde\xd1\xdf\x96\x77\xf4\x0f\x97\x77\xf4\xf7\xb2\x04\xf5\xf7\x86\x77\xd4\x90\xfa\xbd\xe1\x1d\xc7\xdc\xab\xb6\x96\x77\xd4\x90\xfb\xfd\xe0\x1d\xc7\xc4\xab\xb6\x96\x77\xf4\x0f\x98\x77\xe4\xe5\xfe\xd9\xf1\x8e\x62\xf7\x84\x17\xd7\xec\x3a\x05\xee\x0a\x77\x1d\xf5\xb0\xc7\xe6\x4e\x05\x6f\x06\xde\xef\x87\x4b\x40\x99\xfb\xd7\xc1\xf2\x93\x02\x97\xf3\x25\x3e\xca\x3e\x0f\xb2\x22\xeb\x77\x89\xe3\xd2\x4f\x95\x3c\xcd\x13\x03\xa0\x7c\xd4\xd0\xe2\xa3\x39\x00\x12\x04\x84\x1f\xce\x3d\x2e\xfd\x68\x80\x7a\xb6\x5d\x8a\xb0\x7f\x62\x8c\x96\xba\x8f\x3d\x31\x29\x03\x25\xfe\x2a\x32\x9a\x9a\x3e\x35\x3f\x97\x9c\xc9\x2f\x6d\x65\xa5\x9b\xe5\xcb\xe8\xc8\x06\xed\xe4\x0e\xfb\xb9\xdf\x0a\x8c\x35\xde\x66\x9f\x36\x9d\x49\x82\x0d\xd5\xc9\x09\xa9\x6c\xd8\x74\x14\x04\xa3\xe4\x36\x37\xad\xa5\x85\x01\xf3\x0a\x69\x27\xe6\x99\x52\xbb\x3f\x92\xab\x20\x66\x30\x00\xd6\x9f\x5e\x20\xc0\xb1\x47\x09\xb2\xcc\x0f\xdc\x5a\xd1\x7a\xba\xf0\x20\xd2\xf2\xd1\x8a\x16\x55\x84\xe9\x06\x87\x4c\x7f\x9e\xc4\x9d\xe2\xe7\x60\xb3\xb9\x8e\x86\x4f\x25\x14\x57\xd0\x59\xbe\x9a\x94\xe2\x16\x85\x9f\xc9\xaa\x5a\xc6\xaf\x71\x18\x61\x06\x45\xcc\xd4\x2a\x4a\xd5\xeb\xb8\x98\x0b\xfa\xe4\x93\xdd\x57\xf3\x3c\xf9\xdf\xbe\xa6\xef\x82\xdc\x2e\xbb\xa2\xca\xf4\xd2\xc5\x4d\x96\x9f\xff\xfe\xe7\x8d\x55\xc9\xc1\xfd\x85\x19\x8d\xc5\x8e\x70\x46\x63\x51\x2f\xd0\x32\x05\x07\x80\x34\xe9\xcb\xf7\x06\x35\x24\x4f\x42\x3b\x02\x9b\x92\x55\x2f\xdc\x0c\x15\x07\x00\x38\xed\xcd\xf7\x00\xb9\x2b\x7a\x87\xd9\x16\x30\x8b\xe4\xf8\xdd\x43\xcb\x10\xfb\x4c\xe1\xa4\x3d\xd8\x08\xa1\x9f\x3d\x18\x38\x93\x43\x40\xd1\xc2\x5a\x15\x55\x60\x84\x95\x80\xdd\xe3\xc8\x94\xfb\x4c\x81\x94\xb8\xf0\x28\x92\x0e\x01\x47\x6f\x60\x04\x3d\x5f\x6c\x83\x24\x2f\x11\xb1\x7b\x2c\x2d\x4a\x7e\xa6\x68\xca\x9c\x58\x83\xa7\x75\x0b\x8a\x58\xad\x43\x80\x17\x25\x3c\x0e\x23\xbd\x0c\x6c\x75\x84\xcd\xa5\xd4\x00\xb2\x65\xe1\xcf\x15\x67\x86\x1f\x25\xa1\xe6\x4c\x0e\x02\x6c\x05\xd6\x58\xaa\x44\xb8\x62\x1e\xc8\x6b\xef\x28\x16\x9f\xba\x35\x10\xaf\x55\xf1\xcf\x14\x81\x8b\x9e\x6c\x3c\x7d\xa6\x4b\x25\x1d\x3a\xe8\x7a\xbb\x00\x5d\xaf\x5e\xd0\xf5\x0e\x06\x74\xbd\x23\xe8\xb2\x95\xd3\xb6\x05\xdd\x59\xbd\xa0\x3b\x3b\x18\xd0\x9d\x1d\x41\x97\x2d\x92\xb7\x2d\xe8\xfa\xf5\x82\xae\x7f\x30\xa0\xeb\x3f\x1f\xd0\xed\xf6\xf6\x93\xcd\xd6\x6d\x58\xf9\x74\xcd\xa1\x9c\xdd\x4b\xbb\x8c\x8f\xc9\x66\xf2\x67\x6e\xce\x89\xf1\x4e\xa1\x09\x86\x28\x5b\xed\xaf\xd8\x9b\x44\x1e\x1e\x00\x17\x50\xf8\xde\xdb\xeb\xcb\x77\xa0\xa9\xb7\x7f\x7b\xff\x0e\x58\x4e\xb6\x94\x9f\x03\x39\xc7\x82\x3b\x53\x4c\x10\x65\xdc\x19\x51\x2a\xb8\x60\x30\x52\xaf\x10\x50\x8b\x39\x46\xbe\xf7\x2f\xcc\x1c\x8f\x73\x67\x69\x9f\x1d\xfa\xc4\xf6\x38\xb7\xc0\x18\x06\x1c\xb7\x0c\xf3\x12\x0f\xf2\x7d\xf9\xcc\xbf\x81\x27\x21\x95\x98\x77\x3e\xa7\x5b\xca\xd8\xcf\x2b\xb6\xee\x3e\x50\x9f\xf3\xe3\xb4\xa8\x7a\x0e\x83\x42\x53\x78\x01\x48\xa7\xcd\x74\x46\xb7\x6c\x86\x21\xba\x6f\x66\x6f\x8e\x6a\x9a\x6f\x8b\x9a\xf7\x6f\xfc\x9f\xf9\x62\x88\x46\xcb\x5e\x32\xb0\xb9\x3a\x48\x36\xe1\x87\xf8\x4a\x75\xf8\x85\x78\xfa\xe6\xa4\x01\xf8\xa1\xf3\x32\xb7\x73\xe8\x93\x0b\x28\xf0\x00\xe8\x70\x37\x5b\x36\x8f\x47\x82\x41\x4f\x34\x5f\xbd\x04\x8d\x7b\x0c\x59\xa3\xb5\x66\x28\xfc\xba\x34\x14\x13\xf4\xcf\x71\xb3\x81\xe0\xfd\xba\x31\x32\x52\xf7\x7f\x53\x2b\x3c\xbf\x91\x25\x1a\xf3\x01\x68\x18\x6b\x42\x37\xf2\x87\x05\xd4\x83\x01\x1e\xe4\x44\x29\x6d\xfa\x25\x5a\x03\xd0\xb8\xb9\xb9\xb9\xb1\x2f\x2f\xed\x8b\x0b\xf0\xf6\xed\x20\x0c\x1b\xb9\x43\x66\xf9\x7a\x54\x70\xf9\x26\x3d\x8d\xf9\x8f\x45\x14\xc1\xe4\x8b\xb2\xc6\x00\x7c\x48\x83\xf0\x32\x0b\xc7\xc7\x7c\x1d\x8b\x52\x6e\x30\x17\x98\xe5\x4a\x9a\x67\xa2\xfb\x12\xc8\xa0\xf2\x86\x21\x3d\xef\x68\x21\x8d\xd7\x13\x9f\x03\xb5\x92\x6a\x9e\x4a\x01\x99\x90\x39\x54\x1d\x16\xf4\x25\xc9\x4d\x0e\x14\x52\xf5\x0e\x72\xb1\x5e\x95\x69\x7f\x22\x75\x93\xfe\xdc\xfe\x15\x8c\x52\xfe\x4b\x5c\x6f\x72\x3f\xc1\xfd\x8a\xf7\x7a\x7f\x71\xe7\xd7\xe9\x31\x7d\xd1\x32\x37\xe8\xce\xeb\xbd\x68\x4f\x51\x8c\xcf\x5a\xaf\x4f\x36\x16\x1a\x39\x8d\x1a\x4a\x63\xe8\x0b\xa3\x40\xe1\xbc\x0a\x25\xdb\x14\x32\x80\x22\x30\x5c\x53\xae\xa0\xac\x06\x0b\x45\xab\x91\x67\x42\x9e\x19\x9a\x5b\x7e\x30\x5e\xf4\xf4\xb1\xd1\xb2\xa7\x30\x68\x26\x81\x41\x91\x8e\x99\x2c\x42\xd9\x5b\xf4\xd4\xfc\x6f\x5f\x5e\xb6\x2f\x2e\x3e\x5c\x7f\x54\x15\x60\xc0\xf9\x1f\x8d\x56\x2b\x7f\xfd\xfe\x8d\x5a\x05\xcd\xd1\x89\x09\xaa\xac\x71\xb6\xb4\xcf\xfc\xbc\x78\x13\x5d\xce\xc9\xf8\x7f\x01\x00\x00\xff\xff\x67\x62\x9d\x1c\xab\x70\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcd\x8f\x53\x55\x14\xff\x8d\xaf\xb4\xa5\xa2\x7c\xa8\xe0\x27\x5e\x54\x50\x33\x79\xb4\x9d\x61\xfc\xe8\x4c\x07\x71\x00\x35\x30\x71\x32\x56\x12\x74\xf5\x9c\x5e\xda\x17\xdb\xf7\xca\xfb\x00\x9b\x10\x33\x1f\xc1\x09\x8e\x04\x83\x1a\x5c\x10\x10\x12\xe3\x8a\xa4\x0c\xd3\x58\x87\x69\xbb\x73\x69\xce\x8d\x71\x65\xe2\x1f\xa0\x0b\x8d\x4b\x57\xe6\xbe\x7b\x99\xb1\x43\xf0\x2d\x7a\xcf\xf9\x9d\x73\x7e\xe7\x9c\xdf\xbd\x33\xbf\x6d\x8b\x7d\x05\x00\xcf\x02\x78\x12\xc0\xbe\x3e\x20\x0d\xe0\xe8\x7d\x88\xbe\xa4\x01\x3c\x0c\x60\xa3\x01\x6c\x07\xb0\xd3\x00\x12\x00\x86\x0c\x20\x09\x20\x6f\x00\xf7\x03\x38\xac\xf3\x26\x0d\x60\x03\x80\x92\x01\xc4\x00\x54\x0d\xe0\x01\x00\x9e\x01\xa4\x00\x4c\x1b\x40\x1c\xc0\x82\x8e\x5f\xd4\xfe\x25\x7d\x5e\xd1\x79\xdf\x1a\xc0\x46\x00\x0d\xcd\xbf\xac\xfb\xfe\xa8\xf3\x7e\xd2\x7d\x7e\x31\x80\x07\x01\xfc\xaa\xf9\x7e\x37\x80\xad\x00\xfe\xd4\x78\x5f\x0c\xd8\x0c\x60\x4b\x4c\xf1\xb2\x98\xe2\xed\x8f\xa9\xfa\x21\x7d\x0e\x6b\xfc\x40\x4c\xcd\x7b\x24\xa6\xf6\x3d\xae\xeb\x6b\x31\xd5\x77\x3a\x06\x94\xfb\x80\xf9\x18\x30\x08\xe0\xaf\x0d\xc0\x4b\x00\x9e\x8b\x2b\xfe\xf7\xf5\x79\x22\x0e\x6c\x02\x70\x32\xae\xb4\xfd\x38\x0e\x6c\x01\x70\x3d\xae\x74\xbb\x15\x57\xfc\x2b\x71\x60\x07\x80\x9f\xe3\x6a\xde\x3f\x74\xfc\x9f\xb8\xda\xdb\x48\x28\x7c\x73\x02\x78\x5a\xea\x9f\x00\x9e\x00\x30\x9a\x50\x7a\xbf\x97\x50\xbc\x6e\x42\xf5\x9b\xd6\xfe\xf9\x04\xc0\xa4\x9e\xda\xef\x26\x80\x5d\x00\x28\xa1\xe6\xf9\x3b\x01\x3c\x0f\x60\x7b\x12\x78\x48\xf2\x25\xd5\x9e\x93\x49\xd5\xef\x83\xa4\xaa\x3b\x99\x54\xfb\xcc\x6a\xfc\x7c\x12\x78\x06\xc0\xe5\xa4\xd2\xb9\x9b\x04\xb6\x01\x10\x49\xa0\x0f\x6a\x46\xe8\xb7\xf4\xa8\x9c\x1f\x4a\x4f\xb9\xcb\x23\x3a\x26\xe7\x7f\x1c\x8a\x57\xf6\xde\xa5\xf1\x1d\xfa\x94\xf3\xc9\x59\xb6\x62\xed\x93\xb3\x30\x6d\x6f\xd2\xa7\xbc\x8f\x9d\x50\xf3\xc8\x4f\xea\x19\xbd\x55\x28\x0d\xe5\xb7\x4d\x9f\x09\x7d\xca\x37\x22\xf7\x90\xcf\x5b\xde\xfb\x63\x00\x9e\x92\x81\xdd\x45\xe6\xf3\x29\xd7\x29\xae\x59\x3e\xfa\xd7\xd0\xfe\xff\xc0\x07\xbc\xa9\xb2\x7d\x8a\x63\xcc\xaa\x59\x53\x76\x50\xc7\x98\xeb\xf8\x61\xb5\x16\xd8\xae\x83\xb1\xd0\xf3\xb8\x13\xb0\x2a\xb7\xfc\xd0\xe3\x55\xee\x04\x3e\x0e\x5a\x76\xa5\x8e\x83\x56\xc0\xa3\x1f\x66\x39\x45\x16\xd8\x55\xed\x79\x96\x53\xe2\x38\xe4\x70\xaf\x54\xc7\x1b\x53\x56\x25\xfa\x49\x97\xf1\xa6\x1b\x7a\x95\x3a\x8e\x5a\x7e\xc0\xaa\xae\x13\x94\x95\x59\xe7\x96\x87\xf1\x35\x7e\x8c\xcb\x58\xa5\x8e\x09\xee\xd9\x6e\x11\x13\xee\x69\xee\x61\x22\xac\xf8\x9c\xd9\x4e\x2d\x0c\xd8\xee\x22\xde\x29\xbb\xa7\x51\xe0\xd5\x1a\xf7\xac\x20\xf4\x38\x2b\xf2\x4a\x60\xf5\x20\xb6\xd3\xe3\xba\x61\x80\x42\xd9\xf6\x75\xeb\xc8\x8c\x5a\x17\xdc\xa2\x55\xc7\x31\xab\x12\x72\x1c\xe7\x7e\xc0\x3d\xe9\x57\x47\xfc\xb0\x36\x3a\x38\x92\x96\x47\xaf\xc7\xd2\xac\x26\xa7\xf1\x7b\xe1\x74\x19\x1a\x9e\xe4\x35\xd7\x0b\xcc\x71\xbf\x64\x17\xcd\xd7\xc3\x92\x6f\x16\xdc\x1c\x2b\xf2\x53\xaf\x7d\x68\x97\xad\xaa\xbb\xd7\x0b\x53\x13\x6f\x17\xcc\x31\x8f\x5b\x52\x65\x53\xea\x96\x63\x03\x99\xec\xab\x66\x66\xd0\x1c\x78\x99\x0d\x0c\xe6\x86\x86\xfa\x33\x83\x99\x4c\x4a\x6a\x64\x16\x3c\xcb\xf1\x2b\x56\xe0\x7a\x39\x76\x24\xe2\x60\xe3\xa1\x67\x55\xdd\xa2\xcb\x46\x7a\x88\x47\x53\x47\x2d\xa7\x14\x5a\x25\x6e\x16\xb8\x55\xcd\xb1\x55\x3f\xc7\x26\x43\xdf\xb7\x2d\x27\x35\xfe\xd6\xf8\x21\xf3\x18\xf7\x7c\xdb\x75\x72\x2c\xbb\x37\x93\x1a\x73\x9d\x80\x3b\x81\x59\xa8\xd7\x78\x8e\x05\xfc\xa3\x20\x5d\xab\x58\xb6\x33\xcc\xa6\xca\x96\xe7\xf3\x20\xff\x6e\xe1\xb0\xf9\xca\x5a\x9e\x9c\xe7\x04\xf7\xcc\x43\xce\x94\x5b\xb4\x9d\x52\x8e\xa5\x26\x2a\xa1\x67\x55\xcc\xc3\xae\x57\xf5\x73\xcc\xa9\x45\xae\x9f\x1f\x1c\x66\xca\xcc\x3b\xbb\xb3\x99\x7c\x3e\xcb\xf6\xec\x61\xd2\xcc\xec\xca\x67\xb3\x6c\x3f\xcb\xb0\x5c\xe4\x8f\xe6\x07\xee\x84\x46\xf2\xfb\xa4\xf9\x42\x94\x36\x92\xcd\xb0\x33\x67\x54\xc9\x68\x7e\x20\xf3\x22\xdb\xcf\xb2\x2c\xc7\x06\x86\xe5\xe3\x16\x33\xd4\xa4\x65\x31\x47\x6d\x5a\xa2\xc6\x7a\x44\x2c\xac\x47\xa2\xa7\xbf\xae\x68\x3d\x24\x16\xee\x82\x40\x9f\x8b\x69\x71\x96\x5a\xb4\x08\xba\x42\x37\xc5\xa7\xd4\xa4\x15\xd0\x37\xd4\x10\x33\xe2\x2c\x75\x64\xca\x75\x95\x2f\xce\x51\x8b\x9a\x8c\xba\xd4\xa1\x65\x6a\xd0\xf7\xd4\x10\xb3\xd4\xa4\xdb\xd4\x02\x5d\x13\x73\x62\x96\x3a\x62\x9e\xda\xd4\x10\x17\x40\x5f\x46\xd1\xc6\xaa\xc1\xa8\xc5\x68\x51\x4c\x4b\x7e\x15\x6f\x51\x83\xba\x11\x4f\x87\xda\x4c\x4e\x2c\x66\x41\x37\xa8\x4d\x4d\x31\x4d\xb7\xa8\x25\xd3\xbe\x88\x5a\xdd\x5e\x35\xd2\x62\x1e\xf4\x9d\x9c\x8e\x3a\xb4\xa8\x5a\x5d\x8d\x58\x97\xc4\x02\x2d\xe9\x29\x7f\x60\xb4\x42\x4d\x31\x23\x2e\x88\x4f\xee\x11\xbf\xa5\x76\xbb\xba\x7e\x19\xf1\x19\xe8\xb2\xae\x5d\x5d\xe6\x6a\x34\x52\x4b\x95\x5c\xa6\x8e\x38\x47\x6d\xea\x88\x19\x31\x2b\xd3\xbf\xa6\x15\xea\x8a\x39\x59\x2b\x66\xa8\x2d\x16\x24\xff\xa2\x52\x4f\xfe\x51\xf7\x36\x91\x15\x8a\xaf\x19\xad\xbf\xc4\xa2\xc6\x2b\xd4\x8d\x40\x99\x31\xa7\x34\xef\x81\xe4\xa9\xb4\x97\x42\xcd\x4b\xcd\xef\x91\xd3\xa1\x9b\x0a\xb8\x33\xfd\x8d\xe8\x66\x66\x7b\x34\x59\xc5\xb4\x0e\xd7\xa8\xa9\x4c\x6a\xcb\x92\x4b\x51\xed\x3c\x35\xa9\x2d\x2f\x1d\x74\x51\x3a\x92\x16\xb4\xf2\xbf\xff\x42\xa8\xd5\xa3\x46\x47\x3e\xac\x9e\x8a\xe8\x06\xef\x4e\xfa\x37\x00\x00\xff\xff\xf5\x4d\xb7\x17\xe4\x08\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
