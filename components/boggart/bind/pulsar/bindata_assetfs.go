// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7f\x6f\xdb\xb8\x19\xfe\x3f\x9f\x82\xd0\x72\xb3\x8d\xd5\x92\x7f\xdd\xed\xe0\xda\x19\x76\xc9\xed\x7a\x40\xb3\x0b\xee\x72\x37\x64\x45\x11\xd0\x22\x6d\xab\x95\x49\x95\xa4\x9c\x66\x81\xbf\xd3\x3e\xc3\x3e\xd9\x40\x52\x92\x69\x5b\x76\x24\xc5\x6a\x14\xd7\x02\xda\xc8\x12\xf9\xf2\xe1\xfb\x3e\x7c\xf9\xc8\x96\xa8\x87\x07\x80\xf0\xd8\x23\x18\x58\x2e\x25\x02\x13\x61\x81\xc5\xe2\x64\xc0\x5d\xe6\x05\x02\x88\xfb\x00\x0f\x2d\x18\x04\xbe\xe7\x42\xe1\x51\xe2\x7c\x80\x73\xa8\x4f\x5a\x67\x27\x00\x00\x30\x0e\x89\x2b\xcf\x80\x39\xf4\x43\xfc\x0f\xca\x66\x50\xd4\x49\x03\x3c\xa8\xb3\x72\x63\x58\x84\x8c\x00\x82\xef\xc0\xcf\x44\xf8\xf6\x3f\xc3\xd9\x08\xb3\xa8\x64\xc3\x1e\xc7\x55\x5e\xab\x1a\x8b\x93\x81\xa3\x1b\x38\x3b\x19\x20\x6f\x0e\x5c\x1f\x72\x3e\xb4\x18\xbd\x8b\x5a\x34\x8f\xba\xd4\x6f\xce\x50\xb3\xdd\x01\x72\x8f\xcf\xe2\xbd\xcf\xbc\xd9\xee\x44\xe5\xd7\xeb\x7c\xbe\x0d\x20\xc1\xbe\x71\x76\xb3\x44\xec\x8c\xd5\x32\x49\x39\x46\x7d\x3c\xb4\x04\x1c\xa5\x59\x4a\x4a\x86\x7e\x6c\x90\xc0\x39\x20\x70\xde\x14\x70\xc4\xc1\x08\xb2\x5b\xb9\x63\x2d\xcd\xf8\x1e\x4f\x6b\x2b\xb1\xe4\x7b\x51\xd9\x80\x61\x8e\x89\x50\xb1\xb0\x1e\x1e\x80\x37\x06\xf8\x13\xb0\xa1\x0e\x81\x25\x83\x17\xb7\x29\x8f\xcd\xb1\x2c\x84\x09\x02\x8b\xc5\xd9\x00\x82\x29\xc3\xe3\xe1\x96\x7a\xcb\xc8\xf6\xe7\xd4\x43\xf5\x56\xe3\xb5\xac\xeb\x73\x0c\x16\x8b\x87\x07\x60\xff\x8a\x3f\x85\x98\x0b\xfb\xf7\x5f\xdf\xda\x57\x50\x4c\xf5\x61\x6d\xdc\x3a\x93\x46\xdb\xdf\x13\x60\x9d\x87\x8c\x61\x22\xc0\x0c\x43\x1e\x32\x3c\xc3\x44\x70\x0b\xd8\x60\xb1\x18\x38\xf0\x6c\xe0\xf8\xde\x1e\x3a\x0a\x99\x3b\x95\xbd\x2b\xd8\x5f\xa3\x7a\x91\x6e\xff\x4d\xdb\x19\x46\x66\xd2\xbc\xf0\xf7\xb8\x85\xc7\x3b\x3e\x70\x42\x7f\xcb\x19\x83\x93\x02\x8e\x9a\xdb\x59\xb9\x8b\x9d\xa6\x05\x79\x04\x8c\x21\xc2\x40\xbb\x0b\x78\x64\x87\x35\xb9\xed\x74\xde\xce\x9a\x26\xfa\x3b\xec\xfb\x16\xe0\xe2\x5e\x22\xa3\x73\xcc\xc6\x3e\xbd\xeb\x03\x18\x0a\xfa\x48\xfb\xca\x92\xcc\x11\xb1\x29\xb9\xdf\x9c\x52\xe6\xfd\x87\x12\x01\xfd\x78\x14\xc9\xc3\x16\x98\x61\x31\xa5\x68\x68\x4d\xb0\xb0\x40\x14\x25\x6b\x4b\x14\x2d\xe0\xa1\x61\xdc\x9b\xa6\xae\x4f\xe8\x1c\xfa\x1e\x82\x02\x3f\x8e\x4a\x21\xf3\x48\x10\xc6\x79\x72\xea\x21\x84\x89\xa5\x33\xe1\x70\xe9\x27\x02\x67\x58\xf3\x93\x12\x0b\x38\x4f\xb7\x1c\x9b\x1c\x33\x3a\xdb\xab\x41\x41\xb3\x9b\xdb\xcc\xc2\xbd\x0c\xa1\x8c\xb7\x64\xa0\x5c\x40\x81\x01\x83\x64\x12\x8d\x95\xcc\x16\x06\x63\x0f\xfb\x88\x63\x91\xbd\xd1\x4d\xdc\x44\x30\xea\x37\x27\x8c\x86\x41\x0e\xf0\x3b\x6c\xf1\x02\x66\xd6\x4d\xa9\x40\x35\x03\x86\x03\x99\x56\xf4\xa7\xa2\x10\x13\xfb\x3c\x80\x24\x49\x95\x08\x35\x29\x31\x2d\x37\x21\x42\x94\x58\x67\x03\x2f\x19\x66\x10\x8c\x61\xd3\x85\x3e\x26\x08\x32\xeb\x6c\xe0\x78\x67\x03\x47\x5a\x79\x02\x08\x93\x82\x02\x7f\x16\xab\x43\x50\x0e\x3b\x6b\x65\x98\x47\x4e\x4d\x78\x2a\x47\xb2\x2c\x75\x2b\x99\x6f\x6b\x09\x01\xac\x4e\xab\xf5\x9d\xdd\x6a\xdb\xad\x0e\x68\x7f\xdb\x6f\xf5\xd4\xac\xd0\x04\x49\x61\x41\x77\x16\xcd\x4c\xf9\x8d\xee\x38\xc8\x9b\x17\x60\x4d\xfe\x6a\x39\xab\x0c\x9c\x7c\x63\x23\x87\xf9\x7d\x0d\xfb\x2b\xcc\x3c\x8a\x8e\x43\xfe\xd1\x21\x1f\x4f\x9a\x77\x1e\x12\xd3\x3e\x68\xb7\x5a\xdf\x3c\x29\x0d\x60\x1f\xbb\x42\x0d\xbb\x20\x0a\x81\x4e\xfd\xf1\xa7\x94\xe1\x07\x74\xa5\x8e\x05\x18\xfe\x14\x7a\x0c\xa3\xa1\x15\xef\x3d\x01\x8b\xc2\x43\x83\xe5\xc5\xc3\xd0\x9a\x51\x22\xa6\xfe\xbd\xa1\xd8\x34\x2c\x90\x9c\x91\x43\x5b\xc3\x91\x28\xe2\x3d\x43\xf5\x25\x0c\xbb\x8c\x6b\x68\x05\xa6\x1b\xda\x2b\x5a\x04\xbd\x54\xac\xfa\x78\x76\xa4\x17\xba\x7c\x69\x38\xa7\x34\x64\xa9\x40\xa3\x13\xd9\x91\xbe\x89\x2a\xec\x07\xea\xc0\xd1\x6d\x1d\xb3\xef\x13\xb2\x6f\x27\xc7\x08\xfc\x33\x19\xf1\xe0\xf5\x31\xdd\x96\xa3\xb0\x46\xa1\x10\x94\x44\xea\x86\x87\xa3\x99\x27\x92\x74\x3a\x12\x04\x8c\x04\x69\xf2\xd0\x75\x31\xe7\xc6\x85\xe2\x6f\x53\x7a\x17\x0f\x28\x6d\xe1\x38\x1c\xb2\x98\x1f\x38\x72\x8a\xda\x5d\x2e\x83\xa9\x81\x80\x23\x1f\x1b\x97\xc8\x3e\x06\xea\xff\x26\x17\xcc\x0b\x30\x02\x08\x0a\xa8\x8f\x23\xd1\x64\x98\x07\x94\x70\x79\xe5\x4c\xe8\x1d\x83\xeb\xf3\x73\xc6\xe9\x79\x20\xa6\x18\xa2\x2c\xe5\x58\x46\xa7\x89\xe9\xd9\xca\x25\x55\x4c\x29\x31\x2d\x60\xe0\x47\x82\xd9\x24\x4e\xf3\x23\x06\x9c\xe5\xa9\x9f\x5c\x79\xc9\x9d\xcf\xb6\x9e\x78\x26\x02\xd8\x3f\x78\x04\xd9\xe7\x94\x8c\xbd\x89\xfd\xb3\x1c\x75\xfc\x9c\x86\x44\x80\x96\xb4\x67\x22\xb8\x0a\x7d\x8e\xf5\xc0\x04\xdf\x28\x99\x48\x3c\x3f\xf9\xd7\x36\x71\x31\x78\x07\xea\xba\xd6\x6c\xc0\xc3\xe0\xac\x3b\x70\xe4\x1f\xe0\x80\x40\x5a\xe1\x16\xb0\x1b\x31\xde\x64\x4e\xdb\x13\xf0\x76\x3e\xe0\x9d\xca\x00\xef\xe4\x03\xde\xad\x0c\xf0\x6e\x3e\xe0\xbd\x2f\x00\x7c\xe0\x64\x19\xa6\xd2\x68\xc6\x41\x3f\xa2\xe8\xfe\xf1\x72\xaa\x43\x64\x82\xc1\xa9\xf7\x0a\x9c\x72\x01\x05\xe8\x0f\x81\x2d\x77\x78\x26\xd8\xd9\x93\x4b\x06\xd4\x06\x2a\xad\x32\x4f\xd3\xb4\x7b\xae\x89\x26\x0e\xb1\xea\x9b\x2d\xb3\x9a\xad\x44\xbd\xfd\x9b\x60\x1e\x99\x80\x53\x15\x61\x0b\x41\x3e\x1d\x51\xc8\x90\x12\xb2\x0f\x0f\x66\xf9\x1b\x0c\x59\x9e\x66\xe3\xaf\x7e\xd7\xbb\x90\x48\xfa\xbc\x1d\x30\xb0\x5c\xc0\xfb\x08\xe0\x73\xf5\x2a\x27\xfc\x6c\xbf\x02\x21\xea\x86\x33\x4c\x84\x7d\xc7\x3c\x81\xeb\x08\x0a\x7c\x4d\x75\x5f\xea\xb5\x55\xdc\xe6\xb7\x30\xcd\x56\xbb\xd9\xea\x5c\xab\x6f\x61\xfa\xad\x6f\x9b\xad\xbf\xf6\x5b\x2d\xd9\xd7\x5a\xa3\xb1\xfc\x05\x28\x4f\x0f\xb3\x67\x99\x81\x93\x95\xd1\xb9\xa8\x5f\xc8\x5f\xe6\xcf\x66\x89\xb7\xf4\x04\x0c\x16\x8b\x82\xbe\xd0\x39\xd4\xb4\x75\xcd\xa4\x7f\x5a\x76\x2b\x3f\x09\x8c\x2f\x0e\x7d\x38\xc2\x3e\x50\xff\x37\x91\xcc\x3d\xac\x88\xa6\xdf\xb3\x9b\x2e\xb0\x2f\xe0\xaa\xaf\x80\xf3\xec\xa8\xb4\xc3\x8b\x45\x10\xe8\x8b\xe3\x5c\xdf\xb5\x1a\x99\xcb\x2f\x3b\xf4\xc9\x55\xcc\xb3\x7b\xf9\x18\x7b\xb0\x39\x6b\x95\x1a\x7b\x8f\x8c\xb3\xfc\x64\xb7\x69\xef\x18\xf8\x0c\x78\x8a\x07\x7e\x2d\xdf\x6b\xff\xec\x35\xdf\xe3\x31\x0c\xfd\x5d\x3f\x3e\x6f\x37\x59\x7a\xec\x4b\xf7\x72\x19\xe2\x62\x39\x51\xef\xbc\x30\xae\xb2\x50\x51\x17\x5f\xed\x3f\xa8\x1f\xce\xf0\xfa\x68\x04\x6b\xa5\x72\x2a\x56\x93\xd3\xda\xc0\x41\x6a\x18\xdd\xb5\xaa\xa5\x33\xd3\xe1\xcf\xab\x61\xca\x0a\x7d\x15\x34\xcc\x31\xf6\xcb\x2d\x4d\xc3\x94\x15\xfb\x67\xd7\x30\xc7\xc0\x2f\xb7\x34\x0d\x63\xfa\xe7\xd0\x34\xcc\xd6\xd8\xbf\x54\x0d\x53\xe4\xeb\xdd\xed\x8a\x27\xb3\x4c\x78\x4e\xc5\xd3\xc9\xa4\x78\x3a\x4f\x55\x3c\x9d\xc3\x55\x3c\x9d\x4a\x26\xbf\x4e\x65\x14\x4f\x09\xa1\xaf\x8c\xe2\x39\xc6\x5e\x6d\x5b\x15\x4f\x09\xb1\xaf\x86\xe2\x39\x06\x5e\x6d\x5b\x15\x4f\xe7\x80\x15\x4f\x5a\xec\x8f\x8a\x27\xfe\x29\xbe\xf2\x8a\xa7\x9b\x49\xf1\x74\x9f\xaa\x78\xba\x87\xab\x78\xba\x95\x4c\x7e\xdd\xca\x28\x9e\x12\x42\x5f\x19\xc5\x73\x8c\xbd\xda\xb6\x2a\x9e\x12\x62\x5f\x0d\xc5\x73\x0c\xbc\xda\xb6\x2a\x9e\xee\x01\x2b\x9e\xb4\xd8\x1f\x15\x4f\x7c\x0f\x5f\xe5\x15\x4f\x2f\x93\xe2\xe9\x3d\x55\xf1\xf4\x0e\x57\xf1\xf4\x2a\x99\xfc\x7a\x95\x51\x3c\x25\x84\xbe\x32\x8a\xe7\x18\x7b\xb5\x6d\x55\x3c\x25\xc4\xbe\x1a\x8a\xe7\x18\x78\xb5\x6d\x55\x3c\xbd\x03\x56\x3c\x69\xb1\x3f\x70\xc5\x93\xed\xde\xff\x5c\xf6\x1e\xbf\xfb\x7f\xe0\xa8\x07\x92\x76\x17\xca\x78\xd3\x77\xb5\x1f\x80\x02\x79\x9e\x53\x00\xeb\xcf\x31\x5d\x2e\x97\xa0\xc9\xfb\xcc\xd2\x86\xad\x3f\x24\xeb\x73\x3f\x55\xf5\x3c\x4f\x86\x80\xfc\x5e\x43\xab\x8f\x8f\x01\x48\x10\x10\xde\x6c\xd9\xe3\xdc\x8f\x80\xa8\xb5\x17\xa4\x09\xfb\x47\xc6\x68\xae\xe7\x15\x22\x48\x09\x29\xf1\x67\x91\x88\xda\x78\x55\x87\xa5\xe5\xc4\x7e\x6e\x94\x85\x1e\x8a\xc8\xd3\x46\x52\x69\x2f\x4f\x52\x2c\xfb\xad\xc8\x58\xe2\xe3\x14\xf1\xa6\x23\x49\xb0\xd1\x74\x34\x7d\xe5\x75\x9b\xf6\x82\x60\x94\x4c\x52\xc3\x9a\xdb\x18\x58\x79\x5a\x6c\x1f\xf0\x4c\xab\xed\xef\xc9\x95\x1f\x32\xe8\x03\xeb\x2f\xdf\x20\xc0\xb1\x4b\x09\xb2\xcc\x0f\xdc\xda\x68\xf5\x74\xe5\xc9\xb3\xf5\xb3\x05\x11\x15\xa4\xe9\x8e\x0e\x99\xfd\x79\x96\xee\x64\x9f\xb1\xcd\x6d\xe0\x68\xfa\x14\x62\x71\x81\x36\xf3\x67\x93\x5c\x4a\x24\xf3\xb3\x77\x45\xd3\xf8\x35\x9e\x05\x98\x41\x11\x32\xb5\xca\x57\xf1\x3c\x2e\x96\x86\x6e\x3d\xb2\xff\x6c\x9e\x66\xff\xcb\xe7\xf4\x7d\x48\xe1\xf5\xae\xa8\x34\xbd\x76\x29\x94\xc4\xe7\x7f\xff\x3d\xb7\x0a\x75\xb0\xba\x34\xa3\xa1\xd8\x13\xcf\x68\x28\xca\x25\x5a\xd2\xc0\x01\x30\x4d\xf6\xe5\x6b\xa3\x1a\x92\x93\xd0\x9e\xc8\xa6\x6c\x95\x4b\x37\xa3\x89\x03\x20\x9c\xee\xcd\xd7\x40\xb9\x2b\x7a\x87\xd9\x13\x68\x16\xc8\xfa\xfb\xa7\x96\x61\xf6\x85\xd2\x49\xf7\x60\x27\x85\x7e\x72\xa1\xef\x4c\x0f\x81\x45\x2b\xeb\xa9\x14\xa1\x11\x56\x06\xf6\xcf\x23\xd3\xee\x0b\x25\x52\xd4\x85\x47\x99\x74\x08\x3c\x3a\x87\x01\x74\x3d\xf1\x14\x26\xb9\x91\x89\xfd\x73\x69\xd5\xf2\x0b\x65\x53\xd2\x89\x2d\x7c\xda\xb6\x82\x8c\xd5\x38\x04\x7a\x51\xc2\xc3\x59\xa0\x97\x29\x2e\xce\xb0\xa5\x95\x12\x48\xb6\x6e\xfc\xa5\xf2\xcc\xe8\x47\x4e\xaa\x39\xd3\x0a\x91\x2d\xdb\xd2\x5e\x65\x8b\xb4\xc7\x17\x0b\x2b\xa4\xdd\x42\xee\xcb\xcb\xf8\x20\x14\xb7\xed\x12\x34\xdc\xa6\xf9\x17\x4a\xe6\xd5\x9e\xec\x9c\x89\xe3\x65\xb6\x2a\xc4\xdf\xbd\xaf\x07\xf7\xac\x6c\xef\xec\x83\xed\x9d\x72\xd9\xde\x39\x18\xb6\x77\xbe\x6e\xb6\xe7\x78\x72\xa1\x1c\xb6\x77\xf7\xc1\xf6\x6e\xb9\x6c\xef\x1e\x0c\xdb\xbb\x5f\x37\xdb\x73\xdc\xb5\x5a\x0e\xdb\x7b\xfb\x60\x7b\xaf\x5c\xb6\xf7\x0e\x86\xed\xbd\x43\x66\x7b\x71\x8a\xfe\xa2\xbe\x05\xf6\xc8\xe4\xa9\xb7\x87\xd0\xd8\xd0\x6d\x39\x37\x89\xa4\xd9\xff\xf2\xb4\x4c\x41\xa2\x6f\xde\x88\x56\xfb\xac\x02\x7d\xf6\x7b\xcf\xd9\x6e\x74\x3b\x96\xe4\xde\x72\x2a\xe5\xf0\xda\x21\xe3\x63\xb4\x1b\xfd\x59\xc2\x39\x31\x5e\x74\x37\xc5\x10\x25\x4b\xb9\x66\x7b\xbd\xd5\xc3\x03\xe0\x02\x0a\xcf\x7d\x73\x7d\xf9\x16\xd4\xf5\xfe\xef\xbf\xbe\x05\x96\x93\xac\xd3\xea\x40\xce\xb1\xe0\xce\x1c\x13\x44\x19\x77\x46\x94\x0a\x2e\x18\x0c\xd4\x7b\x6d\xd4\x4a\xbd\x81\xe7\x7e\xc4\xcc\x71\x39\x77\xd6\x8e\xd9\x33\x8f\xd8\x2e\xe7\x16\x18\x43\x9f\xe3\x86\x01\x2f\xea\x41\x7a\x5f\x3e\xf0\x2f\xd0\x93\x19\x95\x29\xd3\xf9\x10\xef\x29\xb0\x1f\x36\xb0\xee\xdf\x51\x1f\xd2\xfd\xb4\xda\xf4\x92\x06\x99\x66\x80\x15\x22\x9d\xd6\xe3\x09\xa1\x61\x33\x0c\xd1\x7d\x3d\x79\x9d\x61\xdd\x7c\x85\xe1\xb2\x7c\xed\x4f\xe6\xdb\x8a\x6a\x0d\x7b\x0d\x60\x7d\xb3\x92\xdc\xe4\xc0\xbf\x52\x05\x7e\x26\xae\xbe\x23\xb1\x0f\xbe\x6b\xbd\x4a\x2d\x3c\xf3\xc8\x05\x14\xb8\x0f\xb4\xbb\xeb\x0d\x9b\x87\x23\xc1\xa0\x2b\xea\xdf\xbe\x02\xb5\x7b\x0c\x59\xad\xb1\xa5\x2a\xfc\xbc\x56\x15\x13\xf4\xcb\xb8\x5e\x43\xf0\x7e\x5b\x1d\xe9\xa9\xfb\x1f\xd4\xab\x07\xce\x65\x2e\xc5\xbc\x0f\x6a\xc6\xcb\x0a\x6a\xe9\xd5\x7c\xea\x42\x1f\xf7\x53\xbc\x14\x6f\xfa\xcd\x8e\x7d\x50\xbb\xb9\xb9\xb9\xb1\x2f\x2f\xed\x8b\x0b\xf0\xe6\x4d\x7f\x36\xab\xa5\x56\x59\xa4\xb7\xa3\x9c\xcb\x77\xb5\x53\x5b\xfe\x42\x4c\x11\x54\xdf\x8e\x5b\x6b\x61\xb1\x80\x35\xa2\x93\x09\x64\xea\xfd\x96\xb5\x3e\x78\xb7\xf4\xad\x80\x4c\x2c\x5d\x94\x78\xee\x7d\x3a\x9c\xd5\x06\x6f\x30\x17\x98\x15\x68\x34\x0e\x68\xfb\x15\x90\x0d\xf3\xda\x76\x20\xa9\x85\xcd\xb0\x66\x42\x7a\x3d\xf5\x38\xb8\xc3\xf8\x63\x51\xf7\x78\x9c\xfe\x0b\xe3\x8f\x2b\xc8\x22\x14\xc9\xa9\x4c\x48\xde\x42\x2e\x0a\x21\x31\xdd\x90\x34\xb9\x1b\xe0\x96\x3a\x85\x70\x2b\x0f\xaa\xb5\xcc\x8b\xba\x50\x55\x4e\x73\x60\x74\x22\xbb\xfb\x0a\xc1\x30\x7d\x11\xb5\xb8\x0b\x5b\x6a\xf9\x02\x80\x95\xdf\x64\xd2\x2a\xea\xb6\x28\xe1\x6d\x78\x4d\x1f\xcf\xee\xb4\x22\x18\x4c\x1f\xe8\xf6\x76\xe0\x4a\x2b\xbd\x8a\x35\x6b\xe2\x5b\x34\x5e\x9f\xec\x9c\x7d\x64\x6e\xad\xa9\x16\x67\x9e\x30\x66\x2d\x9c\x36\x6d\xc9\x6d\x0e\x19\x40\x01\x18\x6e\x99\xc3\xa0\xcc\x25\x2b\x5e\xa9\xa5\x41\x48\x83\xa1\xaf\x57\xdf\x19\xaf\xa4\x7c\x5f\x6b\xd8\x73\xe8\xd7\x23\xc7\xa0\x40\xfb\x4c\xce\x4c\xc9\xfb\x7e\xd5\xa4\xd0\xbc\xbc\x6c\x5e\x5c\xbc\xbb\x7e\xaf\xa6\x85\x3e\xe7\xff\xae\x35\x1a\xe9\x2f\x28\xda\xd9\xaa\xa0\x29\x6d\x62\x82\x0a\xb7\xb8\x58\x3b\x66\x7e\x5e\xbd\x9d\x3a\x45\xa1\xfd\x3f\x00\x00\xff\xff\x3e\xd2\xb2\x9f\x55\x79\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x6c\x1b\x45\x14\xfe\xe2\xad\x6d\x30\x29\x3f\xe5\xa7\xe5\xa7\xd5\x94\x2a\x85\x52\xb9\xb6\x93\xaa\x42\x8e\x9d\x00\x69\x5a\x2a\x6a\x11\x5a\xd3\x33\x8b\x3d\xd8\x2b\xec\x5d\x6b\x7f\x1a\x2c\xe5\x10\x27\x54\xa1\x04\xa9\x88\x82\xe0\x50\x91\xb6\x07\x2a\x21\x21\x39\x69\x0d\x6e\x1a\x3b\x12\x42\xdc\x90\xde\x1c\x38\xd2\x1b\x1c\x90\xb8\x21\xb8\x20\x81\x66\x67\x13\xd7\xa9\xe8\x1c\x76\xde\xfb\xde\x9b\xef\x7d\xef\xcd\xec\xed\x1d\xdb\x3e\x03\x80\x3d\x00\x9e\x01\x30\x38\x00\x1c\x00\xf0\xcf\x00\xfc\x75\x39\x04\x3c\x06\xe0\x4a\x08\x78\x02\xc0\xb7\x21\x20\x0a\xe0\xa7\x10\x70\x1f\x80\x9f\x43\xc0\x03\x00\x6e\x07\x79\xbf\x87\x80\x30\x80\x7f\x43\xc0\x36\x00\x61\x0d\xd8\x0e\x20\xa6\x01\x31\x00\xbb\x34\x20\x02\x60\x9f\xa6\xe2\x2f\x04\x7e\x22\xd8\x8f\x68\x8a\x2f\xab\xa9\x3a\x27\x34\xe0\x41\x00\x6f\x04\xf1\xb7\x34\xc5\x5f\x0a\xf0\x6a\xc0\x33\xa3\x01\x8f\x00\x68\x04\xf8\x45\x0d\x78\x08\xc0\xd5\x20\x7f\x25\xd0\xd1\xd6\x54\x1f\x3f\x06\xf1\x5f\x02\xde\x3f\x34\x60\x7c\x00\xf8\x53\x03\x46\x00\x1c\x0e\x03\x47\x00\x94\xc3\x4a\xf7\x52\xb0\x7f\x1d\x06\x06\x01\xb4\xc2\xc0\x3e\x00\xdf\x87\x81\x87\x01\xfc\x16\x56\xf3\xf8\x3b\xac\xf8\x25\xe9\x4e\x00\x3b\x23\x4a\x4f\x22\xa2\xe2\x63\x11\xd5\xdf\xf1\x00\x3f\x1d\x51\x73\x7b\x3b\xa2\x78\xa6\x23\xc0\x6e\x00\x1f\x44\x54\x9d\xaf\x02\xfc\x7a\x04\x60\x00\x7e\x08\xfc\x5f\x23\xc0\x5e\x00\x7f\x45\x94\x8e\x5d\x51\xe0\x39\x00\x99\xa8\x8a\x17\xa3\x8a\xdf\x8b\x02\xcf\x02\x78\x3f\xaa\xe6\x73\x2d\x0a\xec\x00\x70\x33\x0a\xc8\x2b\x96\x1a\xe5\xfc\x06\x95\x64\x7f\x85\xa0\x38\xa4\xde\xa7\xa0\x78\x9e\x04\xf0\xb4\xac\x03\x35\xcf\x3d\xe8\xad\x68\xb0\xcb\xbe\x65\x2f\x72\x4e\x8f\x42\xf5\x29\x97\xac\xb7\x3b\xb0\xb7\x07\xef\xec\xfe\x3b\xce\x3f\x8e\xfe\x25\x75\x6a\x50\xf7\x83\xa1\x22\x73\x78\xc1\x32\x8b\x3d\xcb\xc1\xc1\x1e\x7a\xf0\x0e\xf8\x65\xbb\x50\x36\xce\x72\x4c\xe8\x35\xbd\x60\xb8\x75\x4c\x58\xa6\xe3\x55\x6b\xae\x61\x99\x98\xf0\x6c\x9b\x9b\x2e\xab\x72\xdd\xf1\x6c\x5e\xe5\xa6\xeb\xe0\xa8\x6e\x54\xea\x38\xaa\xbb\xdc\xff\x30\xdd\x2c\x32\xd7\xa8\x06\x9e\xad\x9b\x25\x8e\x49\x93\xdb\xa5\x3a\x8e\x17\xf4\x8a\xff\x49\x94\xf1\xaa\xe5\xd9\x95\x3a\x72\x3d\x2a\xe4\x2c\xd3\x2d\x57\xea\x78\xbd\xc6\x6d\xdd\x35\xcc\x92\xe2\x99\xe2\xb6\x61\x15\x31\x65\x4d\x73\x1b\x53\x5e\xc5\xe1\xcc\x30\x6b\x9e\xcb\x86\x8a\x38\x5d\xb6\xa6\x91\xe7\x55\xff\x84\x67\x73\x56\xe4\x15\x57\xef\x43\x0c\xb3\xcf\xb5\x3c\x17\x67\xf4\x8a\xc7\x51\xcd\x38\x5e\x6d\x6c\x24\x93\x90\x5b\xbf\xc7\x12\xac\x26\x0b\x39\xfd\x70\xa2\x8c\x00\x3e\xc5\x6b\x96\xed\xc6\x73\x4e\xc9\x28\xc6\x5f\xf1\x4a\x4e\x3c\x6f\xa5\x59\x91\x9f\x7d\xe9\x5d\xa3\xac\x57\xad\x43\xb6\x17\x3b\xa9\x3b\x6e\x3c\x6f\xeb\xa6\x53\xd1\x5d\xcb\x4e\xb3\xd7\xfc\x10\xcb\x79\xb6\x5e\xb5\x8a\x16\xcb\xf4\xe5\x8f\xc5\x4e\xea\x66\xc9\xd3\x4b\x3c\x9e\xe7\x7a\x35\xcd\x36\xfd\x34\x3b\xe5\x39\x8e\xa1\x9b\xb1\xdc\x89\xdc\x64\xfc\x0c\xb7\x1d\xc3\x32\xd3\x2c\x75\x28\x19\x9b\xb0\x4c\x97\x9b\x6e\x3c\x5f\xaf\xf1\x34\x73\xf9\x7b\x6e\xa2\x56\xd1\x0d\x73\x94\x15\xca\xba\xed\x70\x37\xfb\x66\xfe\x58\xfc\xc5\x5e\x9e\xd4\xf3\x0e\xb7\xe3\x93\x66\xc1\x2a\x1a\x66\x29\xcd\x62\x53\x15\xcf\xd6\x2b\xf1\x63\x96\x5d\x75\xd2\xcc\xac\xf9\xae\x93\x1d\x19\x65\xca\xcc\x9a\x43\xa9\x64\x36\x9b\x62\xfb\xf7\x33\x69\x26\xf7\x66\x53\x29\x36\xce\x92\x2c\xed\xfb\x63\xd9\xe1\x8d\x50\x26\x7b\x58\x9a\xcf\xfb\x69\x99\x54\x92\xcd\xcc\xa8\x23\x63\xd9\xe1\xe4\x01\x36\xce\x52\x2c\xcd\x86\x47\xe5\x43\x14\x0d\x6a\xd1\xaa\x98\xa7\x0e\xdd\xa0\xe6\x56\x44\x2c\x6e\x45\xfc\x67\xba\xe5\xd0\x56\x48\x2c\xde\x05\x81\x3e\x16\xb3\xe2\x1c\xb5\x69\x05\xf4\x25\x2d\x8b\x0f\xa9\x45\x6b\xa0\xcb\xd4\x14\x0d\x71\x8e\xba\x32\xe5\xaa\xca\x17\xe7\xa9\x4d\x2d\x46\xeb\xd4\xa5\x55\x6a\xd2\x77\xd4\x14\x73\xd4\xa2\x5b\xd4\x06\x5d\x11\xf3\x62\x8e\xba\x62\x81\x3a\xd4\x14\x17\x40\x9f\xfa\xd1\xe6\xa6\xc1\xa8\xcd\x68\x45\xcc\x4a\x7e\x15\x6f\x53\x93\xd6\x7d\x9e\x2e\x75\x98\x54\x2c\xe6\x40\xdf\x50\x87\x5a\x62\x96\xae\x53\x5b\xa6\x5d\xf4\x4b\xdd\xda\x34\x12\x62\x01\x74\x4d\xaa\xa3\x2e\xad\xa8\x52\x4b\x5b\x05\x89\x8f\x40\x97\xa8\x25\x1a\xe2\x42\x4f\xd0\x27\x1b\xb5\x99\x8f\xcc\x52\x93\x96\xa9\x2b\xe6\x68\x55\xea\x5f\xf2\x8b\xb6\x55\xc3\x97\xa8\x2b\xce\x53\x87\xba\xa2\x21\xe6\x24\xd9\x17\xb4\x46\xeb\x62\x5e\x32\x8b\x06\x75\xc4\x22\xdd\x94\xcd\xf8\xf3\x91\x3f\x5a\xbf\x04\x79\x42\xf1\xb5\xfc\x06\x6f\x30\x5f\xd6\x1a\xad\xfb\xa0\xcc\x98\x57\x53\xed\x83\xe4\xae\xa6\x2b\x47\xb1\x20\x55\xfd\x4f\x4e\x97\x96\x15\xb0\xd1\xdb\xe7\xbe\xb1\x40\x2d\xea\xc8\x3b\x02\xad\xdd\xf3\xef\xa5\x76\x5f\x3f\x5d\x79\xf9\x7d\x27\xfc\x29\xdf\x9d\xf4\x5f\x00\x00\x00\xff\xff\x78\x91\x38\x72\xcc\x07\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
