// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
package pulsar

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xff\x6e\xe3\x36\xb6\xfe\x7f\x9e\xe2\x40\x37\xbd\xb6\x71\x63\xc9\xbf\xda\x5b\x78\xec\x2c\xb6\x93\xb6\x33\xc0\xa4\x13\x4c\xd3\x2e\xb2\x45\x11\xd0\x12\x6d\x6b\x46\x22\x55\x92\x72\x26\x6b\xf8\x9d\xf6\x19\xf6\xc9\x16\x14\x25\x59\xb6\x65\x5b\x52\xac\x44\xf1\x58\x40\x3b\x8a\x44\x1e\x7e\xe7\x9c\x8f\x87\x47\x34\x29\xcd\xe7\x60\xe1\xb1\x4d\x30\x68\x26\x25\x02\x13\xa1\xc1\x62\xf1\x6a\xc0\x4d\x66\x7b\x02\xc4\x83\x87\x87\x1a\xf2\x3c\xc7\x36\x91\xb0\x29\x31\x3e\xa1\x19\x52\x37\xb5\x8b\x57\x00\x00\x63\x9f\x98\xf2\x0e\xcc\x90\xe3\xe3\x9f\x28\x73\x91\xa8\x93\x73\xa0\x9e\xbc\xca\x1b\x30\x0f\x8a\xc9\xc3\x1e\x43\x5d\x4a\xa4\xe3\xe8\x2e\x0c\x87\x43\xa8\xf9\x44\x61\xb0\x6a\xc9\xd2\xf2\x88\x8b\xad\x5d\x97\x87\x6b\x13\xdb\xf5\xdd\x9f\x18\x0a\xda\xbf\xb4\x27\xb6\xe0\x7d\xe8\x9e\xaf\x94\x5c\xbc\x5a\x9e\xc5\xa7\x0c\x0b\x9f\x11\x20\xf8\x1e\xde\x11\xe1\xe8\xbf\xf8\xee\x08\xb3\x10\x7b\x8c\x66\xa9\x83\x3e\x0e\xd5\x6a\xbc\x7e\xa5\x44\x0d\x0c\x65\x84\x8b\x57\x03\xcb\x9e\x81\xe9\x20\xce\x87\x1a\xa3\xf7\xa1\x55\x92\x57\x4d\xea\x34\x5d\xab\xd9\xee\x80\x3c\xe3\x6e\x74\xf6\x85\x37\xdb\x9d\xb0\xfc\x7a\x9d\x2f\x77\x1e\x22\xd8\x49\xdc\xdd\x2c\x11\x39\xec\x62\xc3\x34\x41\x39\x46\x1d\x3c\xd4\x04\x1a\xa5\x49\x8a\x4b\xfa\x4e\x24\x90\xa0\x19\x10\x34\x6b\x0a\x34\xe2\x30\x42\xec\x4e\x9e\x68\x4b\x31\x8e\xcd\xd3\xda\x8a\x25\x39\x76\x58\xd6\x63\x98\x63\x22\x02\xbe\x68\xf3\xb9\x74\x3b\xfe\x0b\x74\xe5\x26\xd0\x24\xc1\xa2\x36\xe5\xb5\x19\x96\x85\x30\xb1\x60\xb1\xb8\x18\x20\x98\x32\x3c\x1e\x6e\xa9\xb7\x64\x5f\x7f\x46\x6d\xab\xde\x6a\xbc\x96\x75\x1d\x8e\x61\xb1\x98\xcf\x41\xff\x88\xff\xf2\x31\x17\xfa\x6f\x1f\xdf\xeb\xd7\x48\x4c\xd5\x65\x25\x5c\xbb\x90\x42\xdb\xdf\x13\xd0\xde\xf8\x8c\x61\x22\xc0\xc5\x88\xfb\x0c\xbb\x98\x08\xae\x81\x0e\x8b\xc5\xc0\x40\x17\x03\xc3\xb1\x0f\xa0\x28\x62\xe6\x54\x6a\x57\x50\xdf\x44\xf5\x22\x6a\xff\x4d\xc9\x19\x86\x62\xd2\xac\xf0\xf7\xa8\x85\xfd\x8a\x0f\x0c\xdf\xd9\x72\x27\xc1\x49\x81\x46\xcd\xed\xac\xdc\xc5\xce\xa4\x04\x79\x05\xc6\xc8\xc2\xa0\xcc\x05\x36\xd9\x21\x4d\x1e\x3b\x8d\xb7\xb3\x66\x12\xfd\x3d\x76\x1c\x0d\xb8\x78\x90\xc8\xe8\x0c\xb3\xb1\x43\xef\xfb\x80\x7c\x41\xf7\xb4\x1f\x48\x92\x31\x22\x12\x25\xcf\x9b\x53\xca\xec\x7f\x51\x22\x90\x13\xf5\x22\x79\x59\x03\x17\x8b\x29\xb5\x86\xda\x04\x0b\x0d\x42\x2f\x69\x5b\xbc\xa8\x81\x6d\x0d\x23\x6d\x9a\xaa\x3e\xa1\x33\xe4\xd8\x16\x12\x78\x3f\xaa\x00\x99\x4d\x3c\x3f\x8a\xe5\x53\xdb\xb2\x30\xd1\x54\xb4\x1e\x2e\xed\x44\x90\x8b\x15\x3f\x29\xd1\xc0\x78\xbc\xe4\x48\xe4\x98\x51\xf7\xa0\x02\x05\xcd\x2e\x6e\x33\x0a\xf7\x32\xb8\x32\x3a\xe2\x8e\x72\x89\x04\x06\x86\xc8\x24\xec\x2b\x99\x25\x0c\xc6\x36\x76\x2c\x8e\x45\xf6\x46\x37\x71\x13\xc1\xa8\xd3\x9c\x30\xea\x7b\x39\xc0\xef\x90\xc5\x0b\x88\x59\x17\x15\x38\xaa\xe9\x31\xec\xc9\xb0\xa2\xfe\x2a\x0a\x31\x96\xcf\x3d\x44\xe2\x50\x69\x59\x4d\x4a\x92\x92\x9b\xc8\xb2\x28\xd1\x2e\x06\x76\xdc\xcd\x10\x8c\x51\xd3\x44\x0e\x26\x16\x62\xda\xc5\xc0\xb0\x2f\x06\x86\x94\xf2\x08\x10\x49\x0a\x0a\xfc\x45\xac\x76\x41\xd9\xed\xb4\x95\x6e\x1e\x1a\x35\xe6\xa9\xec\xc9\xb2\xd4\x9d\x64\xbe\xae\x92\x0a\xd0\x3a\xad\xd6\x77\x7a\xab\xad\xb7\x3a\xd0\xfe\xb6\xdf\xea\x05\xa3\x42\x13\xe2\xc2\x82\xee\x2c\x9a\x99\xf2\x1b\xea\x18\x96\x3d\x2b\xc0\x9a\xfc\xd5\x72\x56\x19\x18\xf9\xfa\x46\x0e\xf1\x87\xea\xf6\xd7\x98\xd9\xd4\x3a\x75\xf9\xbd\x5d\x3e\x1a\x34\xef\x6d\x4b\x4c\xfb\xd0\x6e\xb5\xbe\x79\x54\x18\xc0\x0e\x36\x45\xd0\xed\xbc\xd0\x05\x2a\xf4\x47\x7f\xa5\x74\x3f\x50\x95\x3a\x1a\x30\xfc\x97\x6f\x33\x6c\x0d\xb5\xe8\xec\x11\x58\x02\x3c\xea\x31\x20\xea\xdf\x2e\x25\x62\xea\x3c\x24\x32\x36\x05\x0b\xe2\x3b\xb2\x6b\x2b\x38\x12\x45\x74\x96\xc8\xfa\x62\x86\x5d\x45\x35\x54\x06\xa6\x1a\x3a\x28\x5a\x0b\xd9\xa9\x58\xd5\xf5\xec\x48\x2f\x55\xf9\xd2\x70\x4e\xa9\xcf\x52\x81\x86\x37\xb2\x23\x7d\x1b\x56\x38\x0c\xd4\x81\xa1\xda\x3a\x45\xdf\x47\x44\xdf\x4e\x8e\x1e\xf8\xbf\x64\xc4\xbd\xd7\xa7\x70\x5b\x4e\x86\x35\xf2\x85\xa0\x24\xcc\x6e\xb8\x3f\x72\x6d\x11\x87\xd3\x91\x20\x30\x12\xa4\xc9\x7d\xd3\xc4\x9c\x27\x1e\x14\x7f\x9d\xd2\xfb\xa8\x43\x29\x09\xa7\xee\x90\x45\xfc\xc0\x90\x43\xd4\xee\x72\x19\x44\x0d\x04\x1a\x39\x38\xf1\x88\xec\x60\x08\xfe\xdf\xe4\x82\xd9\x1e\xb6\xc0\x42\x02\xa9\xeb\x96\x68\x32\xcc\x3d\x4a\xb8\x7c\x72\x26\xf4\x9e\xa1\xf5\xf1\x39\xe3\xf0\x3c\x10\x53\x8c\xac\x2c\xe5\x58\x46\xa3\x89\xe9\xc5\xca\x23\x55\x44\x29\x31\x2d\x20\xe0\x47\x82\xd9\x24\x0a\xf3\x23\x06\xc6\xf2\xd6\xcf\xa6\x7c\xe4\xce\x27\x5b\x0d\x3c\x13\x01\xfa\x0f\x36\xb1\xf4\x37\x94\x8c\xed\x89\xfe\x4e\xf6\x3a\xfe\x86\xfa\x44\x40\x4b\xca\x4b\x22\xb8\xf6\x1d\x8e\x55\xc7\x84\x6f\x82\x34\x91\xd8\x4e\xfc\x5f\x3b\x89\x8b\xa1\x7b\xa8\xab\x5a\xee\x80\xfb\xde\x45\x77\x60\xc8\x7f\xc0\x00\x4f\x4a\xe1\x1a\xe8\x8d\x08\x6f\x3c\xa6\x1d\x08\x78\x3b\x1f\xf0\x4e\x65\x80\x77\xf2\x01\xef\x56\x06\x78\x37\x1f\xf0\xde\x13\x00\x1f\x18\x59\xba\xa9\x14\x9a\xb1\xd3\x8f\xa8\xf5\xb0\xbf\x5c\xa0\x10\x99\x60\x38\xb3\xcf\xe1\x8c\x0b\x24\xa0\x3f\x04\x5d\x9e\xf0\x4c\xb0\xb3\x07\x97\x0c\xa8\x13\xa8\x54\x96\x79\x96\x96\xbb\xe7\x1a\x68\x22\x17\x07\xba\xe9\x32\xaa\xe9\x41\x52\xaf\xff\x2a\x98\x4d\x26\x70\x16\x78\x58\xb3\x10\x9f\x8e\x28\x62\x56\x90\xc8\xce\xe7\xc9\xf2\xb7\x18\xb1\x3c\xcd\x46\x53\xbf\xeb\x2a\xc4\x29\x7d\x5e\x05\x12\x58\x2e\xd1\x43\x08\xf0\xb9\xb4\xca\x09\x3f\xdb\x2f\x55\x16\x35\x7d\x17\x13\xa1\xdf\x33\x5b\xe0\xba\x85\x04\xbe\xa1\x4a\x97\x7a\x6d\x15\x77\x72\x16\xa6\xd9\x6a\x37\x5b\x9d\x9b\x60\x16\xa6\xdf\xfa\xb6\xd9\xfa\xff\x7e\xab\x25\x75\xad\x35\x1a\xcb\x5f\x80\xf2\x68\x98\x3d\xca\x0c\x8c\xac\x8c\xce\x45\xfd\x42\xf6\x4a\xfe\xb4\x17\x5b\x4b\x0d\xc0\xb0\x58\x14\xb4\x85\x8a\xa1\x49\x59\x37\x4c\xda\xa7\xa5\xb7\xf2\x93\x20\x31\x71\xe8\xa0\x11\x76\x20\xf8\x7f\xd3\x92\xb1\x87\x15\xc9\xe9\x0f\x6c\xa6\x4b\xec\x08\xb4\x6a\x2b\x30\x9e\x1d\x95\x32\x78\x31\x0f\x82\x7a\x38\xce\x35\xd7\x9a\x88\x5c\x4e\xd9\xae\x8f\x9f\x62\x9e\xdd\xca\x27\xdf\xc3\xe6\xa8\x55\xaa\xef\x6d\x32\xce\xf2\x93\xdd\xa6\xbc\x93\xe3\x33\xe0\x29\xee\xf8\xb5\x78\xaf\xec\x73\xd0\x78\x8f\xc7\xc8\x77\x76\xfd\xf8\xbc\x5d\x64\xe9\xbe\x2f\xdd\xca\x65\x24\x17\xcb\x81\x7a\xe7\x83\x71\x95\x13\x95\xe0\xe1\xab\xfd\x3b\x75\x7c\x17\x17\xee\x8d\x87\x86\x03\x8b\xc5\xf9\x3c\x7d\x09\x53\xeb\x10\x19\x95\x6a\xe5\x28\x33\x2a\xa5\x5a\xd5\x82\x6b\xd2\xe0\xcf\x9b\x51\x95\xe5\xfa\x2a\x64\x54\x27\xdf\x2f\x8f\xb4\x8c\xaa\x2c\xdf\x3f\x7b\x46\x75\x72\xfc\xf2\x48\xcb\xa8\x92\xf6\x39\xb6\x8c\x6a\xab\xef\x5f\x6a\x46\x55\x64\xb2\x79\x7b\xfe\xd5\x7e\x09\xf9\x57\xa7\x5a\xf9\x57\xe7\x49\xf2\xaf\xce\xf1\xe6\x5f\x9d\x4a\x86\xe2\x4e\x65\xf2\xaf\x12\x5c\x5f\x99\xfc\xeb\xe4\xfb\xe0\xd8\x9a\x7f\x95\xe0\xfb\x6a\xe4\x5f\x27\xc7\x07\xc7\xd6\xfc\xab\x73\xc4\xf9\x57\x9a\xef\x4f\xf9\x57\xb4\x4c\xa1\xf2\xf9\x57\xb7\x5a\xf9\x57\xf7\x49\xf2\xaf\xee\xf1\xe6\x5f\xdd\x4a\x86\xe2\x6e\x65\xf2\xaf\x12\x5c\x5f\x99\xfc\xeb\xe4\xfb\xe0\xd8\x9a\x7f\x95\xe0\xfb\x6a\xe4\x5f\x27\xc7\x07\xc7\xd6\xfc\xab\x7b\xc4\xf9\x57\x9a\xef\x4f\xf9\x57\xb4\xda\xb2\xf2\xf9\x57\xaf\x5a\xf9\x57\xef\x49\xf2\xaf\xde\xf1\xe6\x5f\xbd\x4a\x86\xe2\x5e\x65\xf2\xaf\x12\x5c\x5f\x99\xfc\xeb\xe4\xfb\xe0\xd8\x9a\x7f\x95\xe0\xfb\x6a\xe4\x5f\x27\xc7\x07\xc7\xd6\xfc\xab\x77\xc4\xf9\x57\x9a\xef\x8f\x3c\xff\xca\xb6\x67\x24\x97\xbc\xfd\xbb\x46\x06\x46\xb0\x91\x6d\x77\xa1\x8c\x9b\x05\xaa\xbd\x71\x0e\xf2\xec\x6f\x81\xf5\xfd\x6f\x57\xcb\x57\x17\xe5\xdd\xeb\xb6\x21\xeb\x77\xc9\xfa\xdc\xbb\xf1\x9e\x67\x47\x11\xe4\xb7\x9a\xb5\xba\xed\x10\x10\xb1\x40\xd8\xee\x52\xe3\xdc\x5b\x87\x82\x77\x76\x48\x11\xfa\x8f\x8c\xd1\x5c\xfb\x5c\x42\x48\x31\x29\xf1\x17\x11\x27\xb5\xd1\xdb\x40\x96\x92\x63\xf9\xb9\x51\x16\xda\x4c\x93\xa7\x8d\xb8\x52\x91\x38\xbb\xb1\x03\x67\xa9\x77\x40\xc6\x12\xb7\xe1\x44\x87\xf2\x24\xc1\x89\xa6\xc3\xe1\x2b\xaf\xd9\x94\x15\x04\xa3\x64\x92\xea\xd6\xdc\xc2\x60\x65\x97\xe1\x21\xe0\x25\xa5\xb6\xbf\x27\xd7\x8e\xcf\x90\x03\xda\xff\x7d\x63\x01\xc7\x26\x25\x96\x96\xfc\x83\x6b\x1b\xad\x9e\xad\xec\x58\x5c\xbf\x5b\x10\x51\x41\x9a\xee\x50\x28\xa9\xcf\xb3\xa8\x93\x7d\xc4\x4e\x1e\x03\x43\xd1\xa7\x10\x8b\x0b\xb4\x99\x3f\x9a\xe4\xca\x44\x32\xef\xd9\x2c\x1a\xc6\x6f\xb0\xeb\x61\x86\x84\xcf\x82\xb7\xc3\x15\x8f\xe3\x62\x29\xe8\xce\x26\x87\x8f\xe6\x69\xf2\x9f\x3e\xa6\x1f\x22\x15\x5e\x57\x25\x08\xd3\x3b\x66\x91\x3a\x2b\x0f\x49\xb1\xe7\xfe\xf3\xef\x37\x5a\x21\xd5\xab\x4b\x40\xea\x8b\x03\x31\x90\xfa\xa2\x5c\x0a\xc6\x0d\x1c\x01\x07\xa5\x2e\x27\x12\x46\x24\xb4\xe4\xc0\x75\x20\x1a\x06\xb2\xca\x25\x62\xa2\x89\x23\xa0\xa2\xd2\xe6\xeb\x26\xe3\x35\xbd\xc7\xec\x11\x04\xf4\x64\xfd\xc3\x93\x2e\x21\xf6\x85\x12\x4d\x69\xb0\x8f\x5c\xbd\x74\x72\xfd\x6c\x22\xc7\x98\x1e\x03\xbf\x56\xde\xf7\x53\x84\x60\x38\x10\x70\x78\x86\x25\xe5\xbe\x50\x8a\x85\x2a\x44\x1c\xdb\xca\xa4\x63\xe0\xd1\x1b\xe4\x21\xd3\x16\x8f\x61\x92\x19\x8a\x38\x3c\x97\x56\x25\xbf\x50\x36\xc5\x4a\x6c\xe1\xd3\xb6\x37\x1c\x69\x8d\x63\xa0\x17\x25\xdc\x77\x3d\xf5\x1a\xed\xe2\x0c\x5b\x4a\x29\x81\x64\xeb\xc2\x5f\x2a\xcf\x12\x7a\xe4\xa4\x9a\x31\xad\x10\xd9\xb2\xbd\x7a\xae\xec\xf4\x6d\xff\xcb\xec\x0a\x65\x75\x3e\x77\xf0\x5d\x20\xf6\xae\x5d\x42\x76\xb7\x29\xfe\x58\x67\xcc\x37\xd2\xc2\x15\xd5\xf7\xa5\x87\xad\xf4\x41\x3d\x7a\xa3\x5c\x81\x29\x4b\xe3\x30\x6a\xcc\x82\x65\x51\x99\xf5\x58\x7d\x86\x5a\xe9\xd3\x2f\x70\x02\xb4\x8c\x37\x3d\x3e\x6b\x9c\xe8\x1c\x22\x4e\x74\xca\x8d\x13\x9d\xaf\x37\x4e\x74\x8e\x24\x4e\xec\xd7\xe3\x14\x27\xf6\xbd\x58\xf5\x59\xe3\x44\xf7\x10\x71\xa2\x5b\x6e\x9c\xe8\x7e\xbd\x71\xa2\x7b\x24\x71\x62\xbf\x1e\xa7\x38\xb1\xef\x3d\xc6\xcf\x1a\x27\x7a\x87\x88\x13\xbd\x72\xe3\x44\xef\xeb\x8d\x13\xbd\x23\x89\x13\xfb\xf5\xf8\x9a\xe3\x44\xf1\xce\xfd\x21\xf8\x85\xcc\x26\x93\xc7\x2e\xb7\xa3\x91\xa0\xbb\x72\x16\xdd\xa5\xc9\x7f\xfa\x0e\x9d\x82\x44\x2d\x86\x0b\xdf\xba\x5d\x95\x09\xab\xbc\x8b\x56\xc1\xa4\x0e\xf7\x10\x19\x6a\x1d\x6d\xc5\x05\x26\x26\x22\x74\x41\xb8\x3c\xd3\x46\x13\x42\xb9\xb0\xcd\x72\x56\xa3\x42\x62\x05\x67\xdc\xd4\xdd\x08\x09\x81\x59\xce\xe9\xfc\xbc\xbd\x62\xab\x11\x14\x0f\x61\xdd\x20\x5b\x01\x16\xe0\x65\xbe\xc8\x90\x83\xbd\xc5\x43\xc3\x0f\x4a\x25\xb0\x39\x38\xcb\x8f\xcb\x14\x59\x89\xbb\x69\xa6\x28\x98\x1f\x2a\x3c\x28\xc4\xb7\x98\x17\x84\x59\x30\x1e\xac\xc0\xd9\xfc\x28\xcf\x2f\xb4\x28\x9c\x0a\xc4\x84\xe4\x0f\xbb\x3f\x5e\x7f\xfc\x70\x05\x0c\x23\x66\x04\x63\x35\x60\x49\xf0\xc3\x50\x02\x63\x8f\x51\xf7\xc4\x88\x3d\x70\xaa\xc5\x88\x8f\x98\x63\x01\xa6\x7c\x04\xc1\xac\xa8\x89\xd7\x88\x10\x49\x3b\x51\x61\x0f\x9c\x6a\x51\xe1\x66\x8a\x99\x4b\x5d\x2c\x30\x83\x77\x04\x46\x8c\x7e\x7e\xd4\xb6\x8d\x25\x21\xc4\x52\x72\x72\x39\xeb\x89\x16\xe9\x70\xaa\x4b\x8b\x0f\xbe\x28\x8b\x17\xc9\x25\xa6\x27\x62\xa4\xc3\xa9\x16\x31\x7e\xc1\x13\x14\x7c\x33\x3e\xb1\x3c\x93\x3f\x7a\x71\x6c\x82\x1e\x24\x6c\x60\x6d\xcd\xe7\x89\x1d\xe9\x70\x9e\x77\xf6\xe2\xb0\x1b\x4e\x77\xb7\xb9\xe3\x3b\x8e\x5b\x6e\xa5\x5c\x5e\xbb\x94\xf8\x33\x3c\x0d\xff\x59\xc2\x91\xa7\x16\x1e\xdb\x04\x83\x36\xc5\xc8\x8a\xe7\xd4\x96\x5f\xd2\x55\x13\x59\xb0\xfc\xd6\x7f\x42\x8b\xf9\x1c\xb8\x40\xc2\x36\xdf\xde\x5c\xbd\x87\xba\x3a\xff\xed\xe3\x7b\xd0\x8c\xf8\xe3\x5e\x06\xe2\x1c\x0b\x6e\xcc\x30\xb1\x28\xe3\xc6\x88\x52\xc1\x05\x43\x5e\xf0\x31\xf4\xe0\xf3\x6e\x9e\x6d\x7e\xc6\xcc\x30\x39\x37\xd6\xae\xe9\xae\x4d\x74\x93\x73\x0d\xc6\xc8\xe1\xb8\x91\x80\x17\x6a\x90\xae\xcb\x27\xfe\x04\x9a\xc8\x38\x4f\x84\xf1\x29\x3a\x0b\xc0\x7e\xda\xc0\x7a\x78\x43\x7d\x4a\xb7\xd3\x6a\xd3\x4b\x1a\x64\x9a\xf0\x5c\x21\xd2\x59\x3d\x9a\xff\x6c\xe8\x0c\x23\xeb\xa1\x3e\xf6\x89\xb2\x5e\xbd\x01\xf3\x0d\x2e\x9e\xd5\x6b\xff\x93\xfc\xc4\x7d\xad\xa1\xaf\x01\xac\x6f\x56\x92\x87\xb0\x5d\x7c\x1d\x14\x78\x47\x4c\xb5\x1d\xb9\x0f\xdf\xb5\xce\x53\x0b\xbb\x36\xb9\x44\x02\xf7\x41\x99\xbb\xde\xd0\xb9\x3f\x12\x0c\x99\xa2\xfe\xed\x39\xd4\x1e\x30\x62\xb5\xc6\x96\xaa\xe8\xcb\x5a\x55\x4c\xac\x0f\xe3\x7a\xcd\x42\x0f\xdb\xea\x48\x4b\x3d\xfc\x10\x7c\xaf\xf6\x8d\x8c\x6f\x98\xf7\xa1\x96\xf8\xc2\x6d\x2d\xbd\x9a\x43\x4d\xe4\xe0\x7e\x8a\x95\xa2\x63\x1c\xcc\x23\xf7\xa1\x76\x7b\x7b\x7b\xab\x5f\x5d\xe9\x97\x97\xf0\xf6\x6d\xdf\x75\x6b\xa9\x55\x16\xe9\xed\x04\xc6\xe5\xbb\xda\xa9\x2d\x13\x1e\x6a\xa1\x60\xc9\xaa\xb6\xe6\x16\x0d\xb4\x11\x9d\x4c\x10\x13\xc1\x86\xd8\x3e\xfc\xb1\xb4\xad\x40\x4c\x2c\x4d\x14\x5b\xee\xcf\x74\x38\xab\x0d\xde\x62\x2e\x30\x2b\xd0\x68\xe4\xd0\xf6\x39\xc8\x86\x79\x6d\x3b\x90\xd4\xc2\x49\xb7\x66\x42\x7a\x33\xb5\x39\xdc\x63\xfc\xb9\xa8\x79\x6c\x4e\xff\x81\xf1\xe7\x15\x64\x21\x8a\xf8\x56\x26\x24\xef\x11\x17\x85\x90\x24\xcd\x10\x37\xb9\x1b\xe0\x96\x3a\x85\x70\x07\x16\x0c\x3e\x80\x59\xd4\x84\x41\xe5\x34\x03\x86\x37\xb2\x9b\xaf\x10\x8c\xa4\x2d\xc2\x16\x77\x61\x4b\x2d\x5f\x00\x70\x60\x37\x19\xb4\x8a\x9a\x2d\x0c\x78\x1b\x56\x53\xd7\xb3\x1b\xad\x08\x86\xa4\x0d\x54\x7b\x3b\x70\xa5\x95\x5e\xc5\x9a\x35\xf0\x2d\x1a\xaf\x5f\xed\x1c\x7d\x64\x6c\xad\x05\x2d\xba\xb6\x48\x8c\x5a\x38\x6d\xd8\x92\xc7\x0c\x31\xb0\x3c\x18\x6e\x19\xc3\x90\x8c\x25\x2b\x56\xa9\xa5\x41\x48\x83\xa1\x7e\x96\xfe\x83\x20\x17\x0f\xb5\x31\xa3\xae\xf6\x67\xad\xa1\xcf\x90\x53\x0f\x0d\x63\x79\xca\x66\x72\x64\x6a\xe8\x6a\x54\xa8\x07\x83\x42\xf3\xea\xaa\x79\x79\xf9\xc7\xcd\x9f\xc1\xb0\xd0\xe7\xfc\x9f\xb5\x46\x23\xfd\xab\xf6\x3b\x5b\x15\x34\xa5\x4d\x4c\xac\xc2\x2d\x2e\xd6\xae\x25\xff\x5e\x7d\x97\x42\x4a\x86\xf6\xdf\x00\x00\x00\xff\xff\x73\x12\xb3\x47\x2e\x90\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x4d\x6c\x1b\x45\x14\xfe\xe2\xad\x6d\x30\x29\x3f\xe5\xa7\x50\x68\x35\x50\xa5\x50\x2a\xd7\x76\x52\x55\xc8\x89\x13\x20\x4d\x4b\x45\x2d\x42\x6b\x7a\x66\xb1\xa7\xf6\x0a\x7b\xd7\xda\x9f\x06\x4b\x39\xc4\x89\x4a\x28\x41\x2a\xa2\x20\x38\x54\xa4\xed\x01\x04\x12\x92\x93\xd6\x60\x92\xd8\x91\x10\xe2\x86\xf4\xe6\xc0\x91\xde\xe0\x80\xc4\x0d\xc1\x05\x09\x34\x3b\x9b\xb8\x76\x05\x73\xd8\x79\xef\x7b\x6f\xbe\xf7\xbd\x37\xb3\xb7\x76\xed\xf8\x08\x00\xf6\x01\x78\x02\xc0\xe0\x00\x70\x10\xc0\xdf\x03\xf0\xd7\xd5\x10\xf0\x10\x80\x6b\x21\xe0\x11\x00\x5f\x87\x80\x28\x80\x1f\x43\xc0\x5d\x00\x7e\x0a\x01\xf7\x00\xb8\x15\xe4\xfd\x16\x02\xc2\x00\xfe\x09\x01\x3b\x00\x84\x35\x60\x27\x80\x98\x06\xc4\x00\x3c\xaa\x01\x11\x00\xfb\x35\x15\x7f\x36\xf0\x13\xc1\x7e\x54\x53\x7c\x19\x4d\xd5\x39\xa9\x01\xf7\x02\x78\x35\x88\xbf\xae\x29\xfe\x62\x80\x57\x02\x9e\x59\x0d\x78\x00\x40\x3d\xc0\x2f\x6b\xc0\x7d\x00\xae\x07\xf9\xab\x81\x8e\x96\xa6\xfa\xf8\x21\x88\xff\x1c\xf0\xfe\xae\x01\x13\x03\xc0\x1f\x1a\x30\x02\xe0\x48\x18\x38\x0a\xa0\x14\x56\xba\x97\x83\xfd\xcb\x30\x30\x08\xa0\x19\x06\xf6\x03\xf8\x2e\x0c\xdc\x0f\xe0\xd7\xb0\x9a\xc7\x5f\x61\xc5\x2f\x49\x77\x03\xd8\x1d\x51\x7a\x12\x11\x15\x1f\x8f\xa8\xfe\x4e\x04\xf8\x99\x88\x9a\xdb\x1b\x11\xc5\x33\x13\x01\xf6\x02\x78\x27\xa2\xea\x7c\x16\xe0\x37\x22\x00\x03\xf0\x7d\xe0\xff\x12\x51\xf5\xff\x0c\xf6\x3d\x51\xe0\x69\xc9\x1f\x55\xf1\x73\x51\xc5\x3f\x13\x05\x9e\x02\xf0\x76\x54\xcd\xe7\x8b\x28\xb0\x0b\xc0\x7a\x14\x90\x57\x2c\x35\xca\xf9\x0d\x2a\xc9\xfe\x0a\x41\x71\x48\xbd\x7b\xa0\x78\x1e\x03\xf0\xb8\xbc\x3f\xa8\x79\xee\x43\x77\x45\x83\x5d\xf6\x2d\x7b\x91\x73\x7a\x10\xaa\x4f\xb9\x64\xbd\xbd\x81\xbd\x33\x78\x67\x77\xdf\x76\xfe\x61\xf4\x2e\xa9\x53\x83\xba\x1f\x0c\x15\x98\xc3\xf3\x96\x59\xe8\x5a\x0e\x0e\x75\xd1\x43\xb7\xc1\x2f\xd8\xf9\x92\x71\x9e\x63\x52\xaf\xea\x79\xc3\xad\x61\xd2\x32\x1d\xaf\x52\x75\x0d\xcb\xc4\xa4\x67\xdb\xdc\x74\x59\x85\xeb\x8e\x67\xf3\x0a\x37\x5d\x07\xc7\x74\xa3\x5c\xc3\x31\xdd\xe5\xfe\x87\xe9\x66\x81\xb9\x46\x25\xf0\x6c\xdd\x2c\x72\x4c\x99\xdc\x2e\xd6\x70\x22\xaf\x97\xfd\x4f\xa2\x84\x97\x2c\xcf\x2e\xd7\x90\xed\x52\x21\x6b\x99\x6e\xa9\x5c\xc3\x2b\x55\x6e\xeb\xae\x61\x16\x15\xcf\x34\xb7\x0d\xab\x80\x69\x6b\x86\xdb\x98\xf6\xca\x0e\x67\x86\x59\xf5\x5c\x36\x54\xc0\x99\x92\x35\x83\x1c\xaf\xf8\x27\x3c\x9b\xb3\x02\x2f\xbb\x7a\x0f\x62\x98\x3d\xae\xe5\xb9\x38\xab\x97\x3d\x8e\xca\x98\xe3\x55\xc7\x47\xc6\x12\x72\xeb\xf5\x58\x82\x55\x65\x21\xa7\x17\x4e\x94\x10\xc0\xa7\x79\xd5\xb2\xdd\x78\xd6\x29\x1a\x85\xf8\x8b\x5e\xd1\x89\xe7\xac\x34\x2b\xf0\xf3\xcf\xbf\x69\x94\xf4\x8a\x75\xd8\xf6\x62\xa7\x74\xc7\x8d\xe7\x6c\xdd\x74\xca\xba\x6b\xd9\x69\xf6\xb2\x1f\x62\x59\xcf\xd6\x2b\x56\xc1\x62\x63\x3d\xf9\xe3\xb1\x53\xba\x59\xf4\xf4\x22\x8f\xe7\xb8\x5e\x49\xb3\x6d\x3f\xcd\x4e\x7b\x8e\x63\xe8\x66\x2c\x7b\x32\x3b\x15\x3f\xcb\x6d\xc7\xb0\xcc\x34\x4b\x1d\x4e\xc6\x26\x2d\xd3\xe5\xa6\x1b\xcf\xd5\xaa\x3c\xcd\x5c\xfe\x96\x9b\xa8\x96\x75\xc3\x1c\x65\xf9\x92\x6e\x3b\xdc\xcd\xbc\x96\x3b\x1e\x7f\xae\x9b\x27\xf5\x9c\xe3\x76\x7c\xca\xcc\x5b\x05\xc3\x2c\xa6\x59\x6c\xba\xec\xd9\x7a\x39\x7e\xdc\xb2\x2b\x4e\x9a\x99\x55\xdf\x75\x32\x23\xa3\x4c\x99\x19\x73\x28\x95\xcc\x64\x52\xec\xc0\x01\x26\xcd\xe4\x93\x99\x54\x8a\x4d\xb0\x24\x4b\xfb\xfe\x78\x66\x78\x2b\x34\x96\x39\x22\xcd\x67\xfc\xb4\xb1\x54\x92\xcd\xce\xaa\x23\xe3\x99\xe1\xe4\x41\x36\xc1\x52\x2c\xcd\x86\x47\xe5\x43\x14\x75\x6a\xd2\x9a\x58\xa0\x36\xdd\xa4\x46\x3f\x22\x96\xfa\x11\xff\x99\xf6\x1d\xea\x87\xc4\xd2\x1d\x10\xe8\x7d\x31\x27\x2e\x50\x8b\x56\x41\x9f\xd2\x8a\x78\x97\x9a\xb4\x01\xba\x4a\x0d\x51\x17\x17\xa8\x23\x53\xae\xab\x7c\x71\x91\x5a\xd4\x64\xb4\x49\x1d\x5a\xa3\x06\x7d\x43\x0d\x31\x4f\x4d\x5a\xa7\x16\xe8\x9a\x58\x10\xf3\xd4\x11\x8b\xd4\xa6\x86\xb8\x04\xfa\xd0\x8f\x36\xb6\x0d\x46\x2d\x46\xab\x62\x4e\xf2\xab\x78\x8b\x1a\xb4\xe9\xf3\x74\xa8\xcd\xa4\x62\x31\x0f\xfa\x8a\xda\xd4\x14\x73\x74\x83\x5a\x32\xed\xb2\x5f\x6a\x7d\xdb\x48\x88\x45\xd0\xe7\x52\x1d\x75\x68\x55\x95\x5a\xee\x17\x24\xde\x03\x5d\xa1\xa6\xa8\x8b\x4b\x5d\x41\x1f\x6c\xd5\x66\x3e\x32\x47\x0d\x5a\xa1\x8e\x98\xa7\x35\xa9\x7f\xd9\x2f\xda\x52\x0d\x5f\xa1\x8e\xb8\x48\x6d\xea\x88\xba\x98\x97\x64\x9f\xd0\x06\x6d\x8a\x05\xc9\x2c\xea\xd4\x16\x4b\xf4\xad\x6c\xc6\x9f\x8f\xfc\xd1\x7a\x25\xc8\x13\x8a\xaf\xe9\x37\x78\x93\xf9\xb2\x36\x68\xd3\x07\x65\xc6\x82\x98\x53\x73\xed\x03\xe5\x9c\xe4\x7c\xe5\x30\x16\xa5\xae\xff\xc8\xe9\xd0\x8a\x02\xb6\xba\xfb\xd8\x37\x16\xa9\x49\x6d\x79\x4b\xa0\x8d\xff\xfd\x7f\xa9\xd5\xd3\x51\x47\x5e\x7f\xcf\x09\x7f\xce\x77\x26\xfd\x1b\x00\x00\xff\xff\x28\x66\x1a\xe2\xce\x07\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
