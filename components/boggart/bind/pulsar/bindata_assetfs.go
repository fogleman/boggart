// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package pulsar

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7f\x73\xda\x38\xfa\xff\x3f\xaf\xe2\x19\x7f\xd3\x2f\x30\x57\x6c\x20\x74\x6f\x87\x42\x6e\xee\x9a\xbd\xed\xce\x34\x77\x99\x6e\x76\x67\xb2\x9d\x4e\x47\x58\x22\xb8\x67\x4b\xae\x24\x93\xe6\x32\xbc\xa7\x7b\x0d\xf7\xca\x6e\x64\xd9\x46\x80\x21\xb6\x81\x86\x50\x34\xd3\xc6\xd8\xd2\xf3\xf3\xa3\xc7\x1f\x83\x2d\x3f\x3c\x00\x26\x23\x8f\x12\xb0\x5c\x46\x25\xa1\xd2\x82\xe9\xf4\xa4\x2f\x5c\xee\x85\x12\xe4\x7d\x48\x06\x16\x0a\x43\xdf\x73\x91\xf4\x18\x75\x3e\xa3\x09\xd2\x07\xad\xf3\x13\x00\x80\x51\x44\x5d\x75\x04\x26\xc8\x8f\xc8\xdf\x19\x0f\x90\xac\xd3\x06\x3c\xc4\x47\x55\xe3\x44\x46\x9c\x02\x25\x77\xf0\x0b\x95\xbe\xfd\x8f\x28\x18\x12\x9e\xf4\x6c\xd8\xa3\x74\xc8\xeb\x78\xc4\xf4\xa4\xef\x68\x05\xe7\x27\x7d\xec\x4d\xc0\xf5\x91\x10\x03\x8b\xb3\xbb\x44\xa3\xb9\xd7\x65\x7e\x33\xc0\xcd\x76\x07\xd4\x96\x08\xd2\xad\xaf\xa2\xd9\xee\x24\xfd\x17\xc7\x7c\xfd\x14\x22\x4a\x7c\xe3\xe8\x72\x8f\x34\x18\xf3\x7d\xb2\x7e\x9c\xf9\x64\x60\x49\x34\xcc\x93\x94\xf5\x8c\xfc\x54\x20\x45\x13\xa0\x68\xd2\x94\x68\x28\x60\x88\xf8\x27\xb5\x61\xcd\xc4\xf8\x9e\xc8\xd3\x95\x49\xf2\xbd\xa4\x6f\xc8\x89\x20\x54\xc6\xb9\xb0\x1e\x1e\xc0\x1b\x01\xf9\x02\x36\xd2\x29\xb0\x54\xf2\x52\x9d\x6a\xdf\x84\xa8\x4e\x84\x62\x98\x4e\xcf\xfb\x08\xc6\x9c\x8c\x06\x2b\xc6\xcd\x32\xdb\x9b\x30\x0f\xd7\x5b\x8d\xd7\x6a\xac\x2f\x08\x4c\xa7\x0f\x0f\x60\xbf\x27\x5f\x22\x22\xa4\xfd\xdb\xfb\x77\xf6\x15\x92\x63\xbd\x5b\x0b\xb7\xce\x95\xd0\xf6\x8f\x14\xac\x37\x11\xe7\x84\x4a\x08\x08\x12\x11\x27\x01\xa1\x52\x58\x60\xc3\x74\xda\x77\xd0\x79\xdf\xf1\xbd\x2d\x38\x8a\xb8\x3b\x56\xde\x55\xf4\xd7\x18\x5e\xc5\xed\xbf\x68\x39\x83\x44\x4c\x5e\x14\xfe\x9a\x6a\x78\xdc\xf1\xbe\x13\xf9\x2b\x8e\x18\x98\x94\x68\xd8\x5c\x8d\xca\x75\xe8\x34\x25\xa8\x3d\x30\x42\x98\x80\x0e\x17\x78\x74\x8d\x34\xd5\xd6\x06\x6f\xed\x48\xd3\xfa\x3b\xe2\xfb\x16\x08\x79\xaf\x2c\x63\x13\xc2\x47\x3e\xbb\xeb\x01\x8a\x24\x7b\x44\x7f\x2c\x49\xd5\x88\x54\x94\xda\x6e\x8e\x19\xf7\xfe\xcd\xa8\x44\x7e\x3a\x8b\xd4\x6e\x0b\x02\x22\xc7\x0c\x0f\xac\x5b\x22\x2d\x48\xb2\x64\xad\xc8\xa2\x05\x1e\x1e\xa4\xde\x34\xf5\x78\xca\x26\xc8\xf7\x30\x92\xe4\x71\xab\x62\xcb\x3c\x1a\x46\x69\x9d\x1c\x7b\x18\x13\x6a\xe9\x4a\x38\x98\xc5\x89\xa2\x80\x68\x7c\x32\x6a\x81\xb3\xb9\xe4\x54\xe4\x88\xb3\x60\xab\x02\x25\x2b\x2e\x6e\xb9\x0a\x77\x0b\xa4\x32\x6d\xd9\x44\xb9\x40\x92\x00\x47\xf4\x36\x99\x2b\x85\x25\xf4\x47\x1e\xf1\xb1\x20\xb2\xb8\xd2\x65\xbb\xa9\xe4\xcc\x6f\xde\x72\x16\x85\x25\x8c\x5f\x23\x4b\x54\x10\xb3\x28\x2a\x4e\x54\x33\xe4\x24\x54\x65\x45\x7f\xaa\x6a\x62\x26\x5f\x84\x88\x66\xa5\x12\xe3\x26\xa3\xa6\xe4\x26\xc2\x98\x51\xeb\xbc\xef\x65\xd3\x0c\xc1\x08\x35\x5d\xe4\x13\x8a\x11\xb7\xce\xfb\x8e\x77\xde\x77\x94\x94\x0d\x8c\x30\x21\x28\xc9\x57\x39\x3f\x05\xd5\xb4\xb3\xe6\xa6\x79\x12\xd4\x0c\xa7\x6a\x26\xab\x5e\x9f\x14\xf2\x6d\x4d\x21\xc0\xea\xb4\x5a\x3f\xd8\xad\xb6\xdd\xea\x40\xfb\x55\xaf\xd5\x8d\xcf\x0a\x4d\xc8\x3a\x4b\xb6\xb6\x6b\x61\xc8\x2f\xb9\xe3\x60\x6f\x52\x01\x35\xe5\x87\x95\x1c\xd2\x77\xca\xcd\x8d\x12\xe2\xb7\x35\xed\xaf\x08\xf7\x18\x3e\x4e\xf9\x47\xa7\x7c\x7a\xd2\xbc\xf3\xb0\x1c\xf7\xa0\xdd\x6a\xbd\xd8\xa8\x0c\x10\x9f\xb8\x32\x9e\x76\x61\x92\x02\x5d\xfa\xd3\x4f\x39\xd3\x0f\xf4\xa0\x8e\x05\x9c\x7c\x89\x3c\x4e\xf0\xc0\x4a\xb7\x36\xb0\x25\xb6\x87\x85\xb3\x8b\x87\x81\x15\x30\x2a\xc7\xfe\xbd\xc1\xd8\xb4\x59\x90\x1d\x51\x53\x5b\x9b\xa3\xac\x48\xb7\x0c\xd6\x97\x21\xec\x32\x1d\xa1\x19\x98\x56\xb4\x55\x6b\x31\xf2\x72\x6d\xd5\xfb\x8b\x5b\x7a\xa1\xfb\xef\xcc\xce\x31\x8b\x78\xae\xa1\xc9\x81\xe2\x96\xbe\x4d\x06\x6c\xc7\xd4\xbe\xa3\x75\x1d\xab\xef\x37\xaa\xbe\x15\xeb\xe7\xff\xd3\xa1\x08\x5f\x7f\x3f\x25\x77\x03\x44\x0f\x23\x29\x19\x4d\x18\x8e\x88\x86\x81\x27\xb3\x92\x3a\x94\x14\x86\x92\x36\x45\xe4\xba\x44\x08\xe3\x62\xf1\xd7\x31\xbb\x4b\x27\x95\x96\x70\x9c\x12\x45\xc4\xf7\x1d\x75\x9a\x5a\xdf\xaf\x80\xa8\xbe\x44\x43\x9f\x18\x97\xc9\x3e\x81\xf8\xff\xa6\x90\xdc\x0b\x09\x06\x8c\x24\xd2\xfb\xb1\x6c\x72\x22\x42\x46\x85\xba\x7a\xa6\xec\x8e\xa3\xc5\x73\x74\xc1\x53\x74\x5f\x8e\x09\xc2\x45\xfa\xf1\x82\x41\x93\xe3\xf3\xb9\xcb\xaa\x14\x52\x72\x5c\x41\xc0\x4f\x94\xf0\xdb\xb4\xd4\x0f\x39\x38\xb3\x43\x3f\xbb\xea\xb2\x7b\x03\xd9\x57\x91\x2f\x88\x9e\x72\xf0\x22\x26\x81\xd4\xf3\xb3\x7f\x6d\x53\x23\x47\x77\x50\xd7\xa3\x82\xbe\x88\xc2\xf3\xb3\xbe\xa3\xfe\x80\x03\xa1\x92\x22\x2c\xb0\x1b\xbb\xb2\xa4\xb3\x37\x96\x9c\xed\x8d\x25\xdd\xdd\x59\xd2\x77\x8a\x40\x5d\xc9\x2a\x38\x71\x86\x0c\xdf\x3f\xde\x2f\xf6\x83\xde\x12\x38\xf5\x5e\xc2\xa9\x90\x48\x42\x6f\x00\xb6\xda\x10\x45\xae\x4e\x4a\x4c\xd0\x02\x56\x1b\x56\x69\xb6\x76\x9a\xc7\x81\x4b\x15\xeb\x34\xb3\xb1\x6f\xb6\xaa\x0c\x76\x4c\x8e\xed\x5f\x25\xf7\xe8\x6d\x92\x60\x0b\x23\x31\x1e\x32\xc4\xb1\x05\xa7\x8a\x12\x3e\x3c\x98\x23\x6e\x08\xe2\x65\x14\xa7\x5f\xa2\x2e\x3a\x91\x91\xe3\xb2\x2e\x18\xb6\x5c\xa0\xfb\xc4\xc0\xa7\xf3\xab\xa4\x03\xc5\x7e\x51\xc1\xcc\x8d\x02\x42\xa5\x7d\xc7\x3d\x49\xea\x18\x49\x72\xcd\xb4\x37\xf5\xda\xbc\xdd\xe6\x37\x1a\xcd\x56\xbb\xd9\xea\x5c\xc7\xdf\x68\xf4\x5a\xaf\xfe\x68\xfd\xb9\xd7\x6a\xa9\x18\xd7\x1a\x8d\xd9\xaf\x29\x65\x3c\x8c\x79\x7f\xc1\x53\x75\x51\x54\x97\x82\x7f\xa5\x78\x99\x3f\x41\x65\xd1\xd2\x27\x32\x98\x4e\x2b\xc6\xc2\x1b\xc1\xad\x9c\x93\x75\xcd\x55\x7c\x5a\x76\xab\x3c\x08\x8c\x2f\xe1\x7c\x34\x24\x3e\xc4\xff\x37\xb1\xaa\x3f\xbc\x0a\x37\xde\x72\x98\x2e\x88\x2f\xd1\x7c\xac\xc0\x79\x72\xab\x74\xc0\xab\x65\x10\xf4\x85\x66\xa9\xef\x2d\x8d\xda\xe5\xef\x3a\xf5\xd9\xd5\xc0\x93\x47\xf9\x98\x7b\x58\x3e\x6f\xed\x34\xf7\x1e\x1d\x15\xf9\xf9\x6b\x59\xde\x31\xf1\x05\xec\xa9\x9e\xf8\x85\x7a\xaf\xe3\xb3\xd5\x7a\x4f\x46\x28\xf2\xd7\xfd\x90\xbb\x5a\xe4\xce\x73\xbf\xf3\x28\x1f\x10\xb9\x88\xaf\x95\xda\xbf\x33\x3f\x0a\xc8\xe2\x0c\x82\x85\x5e\x25\x59\xa6\x89\x43\x2d\xe0\x20\x79\x87\x76\x6d\xdf\x4a\x90\x19\xf0\xa7\xe5\x1d\xbb\x4a\xfd\x3e\xf0\x8e\x63\xee\x67\x2d\x8f\x77\xec\x2a\xf7\x4f\xce\x3b\x8e\x89\x9f\xb5\x3c\xde\x61\xc6\xe7\xd0\x78\xc7\xca\xdc\x1f\x79\x47\xc9\x20\x76\x0a\xf1\x8e\xce\xa6\xbc\xa3\x73\xb8\xbc\xa3\xb3\x97\x25\xa8\xb3\x37\xbc\x63\x07\xa9\xdf\x1b\xde\x71\xcc\x7d\xdc\x56\xf2\x8e\x1d\xe4\x7e\x3f\x78\xc7\x31\xf1\x71\x5b\xc9\x3b\x3a\x07\xcc\x3b\xf2\x72\x7f\xe4\x1d\x25\x83\x78\x56\x88\x77\x9c\x6d\xca\x3b\xce\x0e\x97\x77\x9c\xed\x65\x09\x3a\xdb\x1b\xde\xb1\x83\xd4\xef\x0d\xef\x38\xe6\x3e\x6e\x2b\x79\xc7\x0e\x72\xbf\x1f\xbc\xe3\x98\xf8\xb8\xad\xe4\x1d\x67\x07\xcc\x3b\xf2\x72\x7f\xe4\x1d\x25\x83\xd8\x2d\xc4\x3b\xba\x9b\xf2\x8e\xee\xe1\xf2\x8e\xee\x5e\x96\xa0\xee\xde\xf0\x8e\x1d\xa4\x7e\x6f\x78\xc7\x31\xf7\x71\x5b\xc9\x3b\x76\x90\xfb\xfd\xe0\x1d\xc7\xc4\xc7\x6d\x25\xef\xe8\x1e\x30\xef\xc8\xcb\xfd\xb3\xe3\x1d\xc5\xee\x0b\x2f\xae\xb9\xef\x14\xb8\x33\xbc\xef\xc4\x0f\x7c\xac\xef\x54\xf0\x66\xe0\xfd\x7e\xc0\x04\xca\xdc\xc3\x0e\x8b\x4f\x0b\x5c\xce\x96\xf9\x28\xfb\x4c\xc8\x92\xac\xdf\x15\x8e\x4b\x3f\x59\xf2\x34\x4f\x0d\x40\xf9\xa8\xe1\xf9\xc7\x73\x00\x51\x0c\xd2\x0b\x66\x1e\x97\x7e\x3c\x20\x7e\xbe\x5d\x89\xb0\x7f\xe2\x9c\x95\xba\x8f\x3d\x31\x29\x03\x25\xf9\x2a\x33\x9a\x9a\x3e\x39\x3f\x93\x9c\xc9\x2f\x6d\x65\xa5\x9b\xe5\xcb\xe8\xc8\x06\x6d\xe5\x0e\xfb\x99\xdf\x31\x18\x77\x78\x9b\x7d\xda\x74\x26\x29\x31\x54\x27\x27\xa4\xb2\x61\xd3\x51\x90\x9c\xd1\xdb\xdc\xb4\x96\x16\x06\xe6\x15\xd2\x56\xcc\x33\xa5\xb6\x7f\xa4\x57\x7e\xc4\x91\x0f\xd6\x9f\x5e\x60\x10\xc4\x65\x14\x5b\xe6\x07\x61\x2d\x69\x3d\x9d\x7b\x18\x69\xf1\x68\x45\x8b\x2a\xc2\x74\x8d\x43\xa6\x3f\x4f\xe2\x4e\xf1\x73\xb0\xd9\xfa\x8e\x86\x4f\x25\x14\x57\xd0\x59\xbe\x9a\x94\xe2\x16\x85\x9f\xcb\xaa\x5a\xc6\xaf\x49\x10\x12\x8e\x64\xc4\xe3\x95\x94\xaa\xd7\x71\x39\x13\xf4\xc9\xa3\xdb\xaf\xe6\x79\xf2\xbf\x7d\x4d\xdf\x06\xb9\x5d\x74\x25\x2e\xd3\x0b\x17\x37\x59\x7e\xfe\xfb\x9f\x37\x56\x25\x07\xf7\x17\x66\x2c\x92\x5b\xc2\x19\x8b\xe4\x6e\x81\x96\x29\x38\x00\xa4\x29\x5f\xbe\x37\xa8\x61\x75\x12\xda\x12\xd8\x62\x59\xbb\x85\x9b\xa1\xe2\x00\x00\xa7\xbd\xf9\x1e\x20\x77\xc5\xee\x08\xdf\x00\x66\xa1\x1a\xbf\x7d\x68\x19\x62\x9f\x29\x9c\xb4\x07\x6b\x21\xf4\xb3\x8b\x7c\x67\x7c\x08\x28\x9a\x5b\xaf\xa2\x0a\x8c\x48\x2c\x60\xfb\x38\x32\xe5\x3e\x53\x20\x25\x2e\x3c\x8a\xa4\x43\xc0\xd1\x1b\x14\x22\xd7\x93\x9b\x20\xc9\x4d\x44\x6c\x1f\x4b\xf3\x92\x9f\x29\x9a\x32\x27\x56\xe0\x69\xd5\xa2\x22\x56\xe3\x10\xe0\xc5\xa8\x88\x82\x50\x2f\x05\x5b\x1d\x61\x33\x29\x3b\x00\xd9\xa2\xf0\xe7\x8a\x33\xc3\x8f\x92\x50\x73\xc6\x07\x01\xb6\x02\xeb\x2c\x55\x22\x5c\x91\xf0\xd5\xb5\x77\x18\xc9\x4f\xed\x1d\x10\xaf\x65\xf1\xcf\x14\x81\xf3\x9e\xac\x3d\x7d\xa6\xcb\x25\x1d\x3a\xe8\x3a\xdb\x00\x5d\x67\xb7\xa0\xeb\x1c\x0c\xe8\x3a\x47\xd0\x65\xab\xa7\x6d\x0a\xba\xb3\xdd\x82\xee\xec\x60\x40\x77\x76\x04\x5d\xb6\x50\xde\xa6\xa0\xeb\xee\x16\x74\xdd\x83\x01\x5d\xf7\xf9\x80\x6e\xbb\xb7\x9f\xac\xb7\x6e\xcd\xea\xa7\x2b\x0e\xe5\xec\x5e\xd8\x65\x7c\x4c\x36\x93\x3f\x33\x73\x4e\x8c\xf7\x0a\x8d\x09\xc2\xd9\x7a\x7f\xc5\xde\x26\xf2\xf0\x00\x42\x22\xe9\xb9\x6f\xaf\x2f\xdf\x41\x5d\x6f\xff\xf6\xfe\x1d\x58\x4e\xb6\x98\x9f\x83\x84\x20\x52\x38\x13\x42\x31\xe3\xc2\x19\x32\x26\x85\xe4\x28\x8c\x5f\x23\x10\x2f\xe8\x18\x7a\xee\xbf\x08\x77\x5c\x21\x9c\x85\x7d\x76\xe0\x51\xdb\x15\xc2\x82\x11\xf2\x05\x69\x18\xe6\x25\x1e\xe4\xfb\xf2\x59\x7c\x03\x4f\x02\xa6\x30\xef\x7c\x4e\xb7\x62\x63\x3f\x2f\xd9\xba\xfd\x40\x7d\xce\x8f\xd3\xbc\xea\x19\x0c\x0a\x4d\xe1\x39\x20\x9d\xd6\xd3\x19\xdd\xb0\x39\x41\xf8\xbe\x9e\xbd\x3d\xaa\x6e\xbe\x31\x6a\xd6\xbf\xf6\x7f\xe6\xcb\x21\x6a\x0d\x7b\xc1\xc0\xfa\xf2\x20\xd5\xa4\x17\x90\xab\xb8\xc3\x2f\xd4\xd5\x37\x27\xf5\xe0\x87\xd6\xcb\xdc\xce\x81\x47\x2f\x90\x24\x3d\xd0\xe1\xae\x37\x6c\x11\x0d\x25\x47\xae\xac\xbf\x7a\x09\xb5\x7b\x82\x78\xad\xb1\x62\x28\xfa\xba\x30\x94\x50\xfc\xcf\x51\xbd\x86\xd1\xfd\xaa\x31\x2a\x52\xf7\x7f\x8b\x57\x79\x7e\xa3\x4a\x34\x11\x3d\xa8\x19\xeb\x42\xd7\xf2\x87\xf9\xcc\x45\x3e\xe9\xe5\x44\x29\x6d\xfa\x45\x5a\x3d\xa8\xdd\xdc\xdc\xdc\xd8\x97\x97\xf6\xc5\x05\xbc\x7d\xdb\x0b\x82\x5a\xee\x90\x69\xbe\x9e\x38\xb8\x62\x9d\x9e\xda\xec\xc7\x22\x86\x51\xf2\x45\x59\xad\x07\x1f\xd2\x20\xbc\xcc\xc2\xf1\x31\x5f\xc7\xbc\x94\x1b\x22\x24\xe1\xb9\x92\x66\x99\x68\xbf\x04\x15\x54\x51\x33\xa4\xe7\x1d\x2d\xa4\xf1\x7a\xec\x09\x88\x57\x53\xcd\x53\x29\x11\x97\x2a\x87\x71\x87\x39\x7d\x49\x72\x93\x03\x85\x54\xbd\x43\x42\xae\x56\x65\xda\x9f\x48\x5d\xa7\x3f\xb7\x7f\x05\xa3\x62\xff\x15\xae\xd7\xb9\x9f\xe0\x7e\xc9\x7b\xbd\xbf\xb8\xf3\xab\xf4\x98\xbe\x68\x99\x6b\x74\xe7\xf5\x9e\xb7\xa7\x28\xc6\xa7\x8d\xd7\x27\x6b\x0b\x8d\x9a\x46\xb5\x58\x63\xe0\x49\xa3\x40\x91\xbc\x0a\xa5\xda\x04\x71\xc0\x21\x0c\x56\x94\x2b\xa4\xaa\xc1\x5c\xd1\xaa\xe5\x99\x90\x67\x86\xe6\x96\x1f\x8c\x97\x3d\x7d\xac\x35\xec\x09\xf2\xeb\x49\x60\x70\xa8\x63\xa6\x8a\x50\xf6\x26\xbd\x78\xfe\x37\x2f\x2f\x9b\x17\x17\x1f\xae\x3f\xc6\x15\xa0\x27\xc4\x1f\xb5\x46\x23\x7f\x0d\xff\xb5\x5a\x25\xcb\xd1\x49\x28\xae\xac\x71\xba\xb0\xcf\xfc\x3c\x7f\x13\x5d\xce\xc9\xf8\x7f\x01\x00\x00\xff\xff\x23\x9a\xb8\x1c\xaf\x70\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x8c\x53\x55\x14\xfe\xc6\x57\xda\x52\x41\x01\x51\xfc\xc5\x8b\x0a\x6a\x26\x8f\xb6\x33\x8c\x3f\x9d\xe9\x20\x0e\xa0\x06\x26\x4e\xb0\x12\x89\x1b\x5f\xda\x4b\xfb\x62\xfb\x5e\x7d\x3f\x60\x13\x42\x66\x86\xe0\x04\x6b\x82\x41\x0d\xc6\x10\x50\x12\xe3\x8a\xa4\x0c\xd3\x58\x87\x69\x67\xe7\x52\xcf\x5d\xb8\x32\x71\xaf\x1b\x59\xba\x34\xf7\xdd\x3b\x33\x76\x08\xbe\x45\xef\x39\xdf\x39\xe7\x3b\xe7\x7c\xf7\xce\xfc\xb1\x2d\xf6\x15\x00\x3c\x0b\xe0\x49\x00\xfb\x06\x80\x34\x80\xa3\xf7\x21\xfa\x92\x06\xb0\x1d\xc0\x46\x03\x78\x04\xc0\x4e\x03\x48\x00\x18\x31\x80\x24\x80\xbc\x01\xdc\x0f\xe0\xb0\xce\x3b\x66\x00\x1b\x00\x94\x0d\x20\x06\xa0\x66\x00\x9b\x01\x78\x06\x90\x02\x30\x6d\x00\x71\x00\x4d\x1d\xbf\xa4\xfd\xcb\xfa\xbc\xaa\xf3\xbe\x37\x80\x8d\x00\x5a\x9a\x7f\x51\xf7\xfd\x59\xe7\xfd\xa2\xfb\xfc\x66\x00\x0f\x00\xf8\x5d\xf3\xfd\x65\x00\x5b\x01\xfc\xad\xf1\x81\x18\xf0\x20\x80\x2d\x31\xc5\xcb\x62\x8a\x77\x30\xa6\xea\x47\xf4\x39\xaa\xf1\x03\x31\x35\xef\x91\x98\xda\xf7\x84\xae\xaf\xc7\x54\xdf\xe9\x18\x50\x19\x00\xe6\x62\xc0\x30\x80\x3b\x1b\x80\x97\x00\x3c\x17\x57\xfc\xef\xeb\xf3\x64\x1c\xd8\x04\xe0\xa3\xb8\xd2\xf6\x6c\x5c\xcd\x73\x3d\xae\x74\xbb\x19\x57\xfc\x8b\x71\x60\x07\x00\xa1\xe3\x7f\xea\xf8\x3f\x71\xb5\xf7\x40\x42\xe1\x9b\x13\xc0\xd3\xf2\x8e\x12\xc0\x13\x00\xc6\x12\x4a\xef\xf7\x12\xc0\x16\xa9\x73\x42\xf5\x3b\xab\xfd\x66\x02\x60\x00\xae\x68\xbf\x9b\x00\x76\x49\xdd\x12\x6a\x9e\x3b\x09\xe0\x79\x00\xdb\x93\xc0\x43\x92\x2f\xa9\xf6\x9c\x4a\xaa\x7e\x1f\x24\x55\x9d\x9b\xd4\xf7\xa6\xf1\x66\x12\x78\x06\xc0\x37\x49\xa5\x73\x37\x09\x6c\x03\xf0\x6b\x12\x18\x80\x9a\x11\xfa\x2d\x3d\x0a\xc0\x80\xd2\x53\xee\xf2\xb0\x8e\xc9\xf9\x1f\x87\xe2\x95\xbd\x77\x69\x7c\x87\x3e\xe5\x7c\x72\x96\xad\x58\xfb\xe4\x2c\x4c\xdb\x9b\xf4\x29\xef\x63\x27\xd4\x3c\xf2\x93\x7a\x46\x6f\x15\x4a\x43\xf9\x6d\xd3\x67\x42\x9f\xf2\x8d\xc8\x3d\xe4\xf3\x96\xf7\xfe\x18\x80\xa7\x64\x60\x77\x89\xf9\xbc\xe8\x3a\xa5\x35\xcb\xc7\xe0\x1a\x3a\xf8\x1f\xf8\x80\x57\xac\xd8\xa7\x38\x26\xac\xba\x55\xb4\x83\x06\x26\x5c\xc7\x0f\x6b\xf5\xc0\x76\x1d\x4c\x84\x9e\xc7\x9d\x80\xd5\xb8\xe5\x87\x1e\xaf\x71\x27\xf0\x71\xd0\xb2\xab\x0d\x1c\xb4\x02\x1e\xfd\x30\xcb\x29\xb1\xc0\xae\x69\xcf\xb3\x9c\x32\xc7\x21\x87\x7b\xe5\x06\xde\x28\x5a\xd5\xe8\x27\x5d\xc1\x9b\x6e\xe8\x55\x1b\x38\x6a\xf9\x01\xab\xb9\x4e\x50\x51\x66\x83\x5b\x1e\x26\xd7\xf8\x31\x29\x63\xd5\x06\xa6\xb8\x67\xbb\x25\x4c\xb9\xa7\xb9\x87\xa9\xb0\xea\x73\x66\x3b\xf5\x30\x60\xbb\x4b\x78\xa7\xe2\x9e\x46\x81\xd7\xea\xdc\xb3\x82\xd0\xe3\xac\xc4\xab\x81\xd5\x87\xd8\x4e\x9f\xeb\x86\x01\x0a\x15\xdb\xd7\xad\x23\x33\x6a\x5d\x70\x4b\x56\x03\xc7\xad\x6a\xc8\x71\x82\xfb\x01\xf7\xa4\x5f\x1b\xf3\xc3\xfa\xf8\xf0\x58\x5a\x1e\xfd\x1e\x4b\xb3\xba\x9c\xc6\xef\x87\xd3\x15\x68\xf8\x18\xaf\xbb\x5e\x60\x4e\xfa\x65\xbb\x64\xbe\x1e\x96\x7d\xb3\xe0\xe6\x58\x89\x9f\x7a\xed\x43\xbb\x62\xd5\xdc\xbd\x5e\x98\x9a\x7a\xbb\x60\x4e\x78\xdc\x92\x2a\x9b\x52\xb7\x1c\x1b\xca\x64\x5f\x35\x33\xc3\xe6\xd0\xcb\x6c\x68\x38\x37\x32\x32\x98\x19\xce\x64\x52\x52\x23\xb3\xe0\x59\x8e\x5f\xb5\x02\xd7\xcb\xb1\x23\x11\x07\x9b\x0c\x3d\xab\xe6\x96\x5c\x36\xd6\x47\x3c\x9e\x3a\x6a\x39\xe5\xd0\x2a\x73\xb3\xc0\xad\x5a\x8e\xad\xfa\x39\x76\x2c\xf4\x7d\xdb\x72\x52\x93\x6f\x4d\x1e\x32\x8f\x73\xcf\xb7\x5d\x27\xc7\xb2\x7b\x33\xa9\x09\xd7\x09\xb8\x13\x98\x85\x46\x9d\xe7\x58\xc0\x3f\x0e\xd2\xf5\xaa\x65\x3b\xa3\xac\x58\xb1\x3c\x9f\x07\xf9\x77\x0b\x87\xcd\x57\xd6\xf2\xe4\x3c\x27\xb9\x67\x1e\x72\x8a\x6e\xc9\x76\xca\x39\x96\x9a\xaa\x86\x9e\x55\x35\x0f\xbb\x5e\xcd\xcf\x31\xa7\x1e\xb9\x7e\x7e\x78\x94\x29\x33\xef\xec\xce\x66\xf2\xf9\x2c\xdb\xb3\x87\x49\x33\xb3\x2b\x9f\xcd\xb2\xfd\x2c\xc3\x72\x91\x3f\x9e\x1f\x5a\x09\x8d\xe5\xf7\x49\xf3\x85\x28\x6d\x2c\x9b\x61\x67\xce\xa8\x92\xf1\xfc\x50\xe6\x45\xb6\x9f\x65\x59\x8e\x0d\x8d\xca\xc7\x2d\x66\xa8\x4d\x8b\xe2\x1c\x75\x69\x81\x5a\xeb\x11\xd1\x5c\x8f\x44\x4f\x7f\x5d\xd1\x7a\x48\x34\xef\x82\x40\x9f\x8b\x69\x71\x9e\x3a\x34\x0f\xba\x4a\x37\xc5\xa7\xd4\xa6\x25\xd0\xb7\xd4\x12\x33\xe2\x3c\xf5\x64\xca\x75\x95\x2f\x2e\x50\x87\xda\x8c\x96\xa9\x47\x8b\xd4\xa2\x1f\xa9\x25\x66\xa9\x4d\xb7\xa9\x03\xfa\x92\xba\xd4\xa6\x79\xea\x52\x4b\x5c\x94\xae\x8c\xb5\x56\x0d\x46\x1d\x46\xf3\x62\x5a\xb2\xab\x78\x87\x5a\xb4\x1c\xb1\xf4\xa8\xcb\xe4\xbc\x62\x16\x74\x43\xd2\x88\x69\xba\x45\x1d\x99\xf6\x45\xd4\xe8\xf6\xaa\x91\x16\x73\xa0\x1f\xe4\x6c\xd4\xa3\x79\xd5\xea\x5a\xc4\xba\x20\x9a\xb4\xa0\x67\xfc\x89\xd1\x12\xb5\xc5\x8c\xb8\x28\x3e\xb9\x47\xfc\x96\xda\xec\xda\xfa\x55\xc4\x67\xa0\x2b\xba\x76\x6e\x65\x99\x6b\xd1\x48\x1d\x55\x72\x85\x7a\xe2\x02\x75\xa9\x27\x66\xc4\xac\x4c\xff\x9a\x96\x68\x59\x9c\x93\xb5\x62\x86\xba\xa2\x29\xf9\xe7\x95\x76\xf2\x4f\xba\xbf\x89\xac\x50\x7c\xed\x68\xfd\x05\x16\x35\x5e\xa2\xe5\x08\x94\x19\xe7\x94\xe2\x7d\x90\x3c\x95\xf2\x52\xa8\x39\xa9\xf8\x3d\x72\x7a\x74\x53\x01\x2b\xd3\xdf\x10\xb3\xd4\x13\xb3\x7d\x9a\xac\x62\x5a\x87\xef\xa8\xad\x4c\xea\xca\x92\xcb\x51\xed\x1c\xb5\xa9\x2b\xaf\x1c\x74\x49\x3a\x92\x16\xb4\xf4\xbf\xff\x40\xa8\xd3\xa7\x46\x4f\x3e\xab\xbe\x8a\xe8\x06\xef\x4e\xfa\x37\x00\x00\xff\xff\x8a\x1d\x03\xa4\xe2\x08\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
