// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package openweathermap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\x38\x08\x2d\x90\x02\x8e\x5c\xa7\x2f\x43\x61\x07\xd8\xe2\xad\x2b\x90\x74\xc5\x9c\xad\xd8\x53\x71\x11\xcf\x12\x31\xfe\x11\x48\xca\x7f\x66\xe4\xbb\x0f\x94\xe5\xd8\x4e\xec\x44\x8e\xe4\x30\x2f\x89\x45\x1e\x8f\xf7\x3b\xfe\xee\x78\xa4\xb4\x58\x00\xa3\x31\x57\x04\x51\xa2\x95\x23\xe5\x22\xb8\xbd\x7d\xd3\x67\x7c\x02\x89\x40\x6b\x07\x91\xd1\xd3\xe8\xfc\x0d\x00\xc0\x66\x6b\xa2\xc5\xa9\x64\xa7\xbd\x33\xf0\xbf\xac\x5c\xfd\x9a\xd9\xd3\xde\x59\x25\x7f\x7f\xcc\xec\x47\x8e\x8a\xc4\x46\xef\x43\x09\xc7\x9d\xa0\x7b\x12\xa5\x54\x76\x76\xbe\x58\x00\xef\xfd\xa4\x20\xfa\x4e\xe8\x32\x32\x11\xc4\x70\x7b\xdb\xef\x66\x67\x3b\xe4\x37\x6d\x15\x84\x66\xcc\x67\xd1\x79\xbf\xcb\xf8\xe4\xde\xf4\x3b\x9a\xb6\x2c\x5a\xf9\x65\xc7\x1c\x0e\x6f\x04\xad\x24\x97\x0f\xe5\xdf\x53\xeb\x0c\xcf\x89\x01\x73\xa7\x86\x6c\xae\x95\xe5\x13\x02\xa5\xa7\x06\xf3\x08\xac\x9b\x0b\x1a\x44\x53\xce\x5c\xf6\xa9\xf7\xe1\xc3\xbb\x1d\xba\x97\xfa\x33\x42\xb6\xaf\xcf\xec\xee\xa8\x06\xae\x9d\xf5\x0d\x0d\x4a\x72\x6b\x77\xb9\xac\xe6\xc8\xbf\x51\x14\xf4\xd4\xa8\x7e\x77\x9f\x25\x7e\xcc\x23\xf6\xdf\x68\x36\xdf\x6f\x88\x37\x62\x0c\x71\x52\x18\x43\xca\x79\x4e\xee\x93\x84\xa7\xbc\xb1\x81\xcd\x53\xd4\xe6\xa8\x06\xd1\x59\xb4\xc6\x79\xc1\xdd\xbc\x8e\x73\xe0\x51\xb8\xbb\x2d\x8f\x2f\xb4\x36\xac\x25\xfb\xd9\xda\xe6\x4b\x74\xdc\x15\x6c\xbd\x3c\x7b\xfc\xbc\x43\xc1\xb6\x69\xf1\x25\xba\x5a\x1a\x9e\x46\xfe\x0c\x14\x5a\xa5\x6d\xc1\xd0\xaa\x25\x18\x8b\x05\x90\x3a\xc2\x92\x7d\x19\x36\x41\xf9\x65\x18\x6c\x95\xbe\xa2\x6c\xb4\x40\x7e\x7c\x7b\x6b\xb3\x19\x5c\xa3\xb9\x3d\x6e\x6a\x18\xcd\xad\x23\xd9\x5e\x72\x78\x69\xd6\x8c\xe6\x36\x24\x73\xae\xc8\x5a\x4c\x1b\x91\xc7\x23\xa8\xd4\x04\x83\x71\xa1\x0b\xe5\xcc\x1c\x12\xdd\x2c\x53\x79\x2c\x2b\x5d\xa1\xb0\x8c\x0a\x65\xb8\x25\x70\xbc\x59\x50\x7b\x2c\x2b\x5d\x01\xb1\x58\x72\x6d\x41\xf1\xaa\x5e\xe1\x0e\xb2\x27\x33\x0d\xd1\xd1\x16\xf0\x00\xb9\xe9\x9a\x4b\x02\x3d\x06\x86\x0e\x21\x41\x91\x14\x02\x1d\xd7\xaa\xc9\x62\x0c\xc3\x55\x23\xa3\x8c\x8f\x1d\x70\x05\x96\x12\xad\x98\x85\xb1\xd1\x12\xfe\xba\xbe\x68\x82\xc7\xfb\xe8\x3f\xad\x5e\x38\x48\xf6\x90\xe6\x8f\xcd\x63\x53\x08\xc6\x5c\x68\xd6\xac\xd4\x63\xc1\xd8\xf1\x0b\xda\x46\x59\xc6\x8f\x3f\x4e\x15\xf4\x9d\x1f\x3b\xd9\xf8\x19\x42\xd2\xa6\x44\x68\x73\xa2\x46\xec\xf1\x5a\xe2\x91\xd7\x12\x8c\x44\x25\x10\xc6\x0d\x25\x3e\x4f\x76\x80\x51\x6a\x88\x2c\x9c\xf8\x13\xba\x36\x5a\xe8\x94\x27\x28\xde\x37\x86\x39\xa4\x34\x2c\xc8\xb4\xb0\xae\x31\x8a\xcf\x85\x7d\xd9\x3d\xf9\x5e\x64\xfd\x89\x5c\x1d\x37\xb2\xfc\x0c\x21\x23\xab\x44\x38\xd1\xa2\x90\x04\x63\x6d\xc0\x65\x04\x02\xad\x83\x1e\x64\xba\x30\x1d\x90\xb2\xc9\x2a\x7a\xf5\xf1\x57\xd3\xcb\x82\x91\x71\x2f\xc0\x8f\x25\x40\xdb\x12\xc2\x8f\x6d\x21\x7c\x16\x4f\x47\x4a\x4f\x8f\x7c\x10\xce\xf4\x34\x24\x4f\x4b\x84\xc7\xe3\xa9\x57\x1f\x96\xa7\x7b\x01\xb6\xc4\xd3\x0a\x61\x58\x9e\x56\x17\xf7\x47\x2e\x56\xb6\xdf\x0e\x34\x67\x6b\x05\xc4\xa0\x4a\x09\xde\x4e\xe1\xd3\xe0\x60\x44\xb5\x51\xc1\x83\xcd\xb4\x9a\xc0\x9f\x48\xb8\x2f\x1a\x80\x1f\x54\x04\x6d\x28\x7c\x3b\xad\x7b\x17\x04\xb5\xfd\xf2\x3c\x50\x9f\x8d\x2e\x72\x7f\x72\x9c\x56\xe8\xf2\xd5\x4b\x0a\x0b\x27\x3e\xa3\x76\xc0\xf3\xb5\x03\xbf\xce\x9c\x21\x49\x40\x2e\x89\x0f\x2a\x8a\xb6\x61\x5f\x2d\xf7\xf1\xf0\xc0\x1f\xae\xe6\x94\xbb\x8c\xab\x32\xdc\x53\xef\x95\x18\xfe\xd1\x05\x24\xa8\x20\x25\x57\x36\xeb\xc2\xe5\x45\x79\x2e\x9d\xeb\xc2\x80\x40\x95\x16\x07\x5e\xaa\x6d\x7b\x63\x48\x36\x31\x3c\x2f\xa7\x6f\xd7\x29\x70\x17\xf2\x8a\x4a\xba\x25\x5a\x41\x14\xd5\x89\x0e\x38\xc4\xa7\xb0\xcf\xaf\x3c\x79\x56\x80\xac\xf4\xf5\xb9\x4c\x01\x85\x1b\x44\x55\xb8\x24\xa5\x8b\x22\x28\x5f\x4b\x3e\x68\xb5\x26\x19\x44\xdd\xae\xce\x49\x55\x44\x96\x98\xc7\xda\xa4\x5d\x2e\xd3\xee\xb4\xbb\x25\x1e\xe7\x2a\x8d\xa0\x7b\x7e\xc0\x8a\x1d\xe2\xf3\x1a\xc9\xb8\xbe\xe4\xb3\x92\xfb\xd5\xd1\x8b\xe5\xab\xc0\xc5\xf2\x35\xc9\x9c\x0c\xba\xc2\x34\xba\x09\xf0\x30\x62\xaf\x2b\x58\xb1\xb1\x01\x24\x86\xeb\x8c\x5b\x70\xeb\x96\x75\x32\x06\x4c\x12\x5d\x28\x67\xef\x2a\x92\xac\x90\xa8\x20\x27\x93\xd0\x32\x7f\xac\x73\x78\x63\x8f\xfc\x46\x24\xec\x25\xff\x37\xdc\x7d\xf2\xcf\x4e\x6a\x9b\x67\x64\x78\x02\xb9\x21\x6b\xbd\x37\x4e\xf4\x32\x3b\x5b\x42\x10\x34\x21\xd1\xf1\xac\xf7\x88\x09\xb8\x05\xa5\x7d\xcf\x8f\xb2\x07\xb4\x81\xd4\x28\x56\x3d\x31\x74\xf8\xbe\x03\xd9\x37\x6c\xec\x9b\x6f\x2b\x6b\x42\xb9\xe6\xf7\x42\x72\xc6\xdd\xbc\x03\xef\x1a\x83\x59\xe9\x0a\xf7\x5a\x8a\x2b\x2e\x0b\xb9\x45\x7a\x5c\x6e\xb6\x52\x4b\x6f\xe7\x32\x28\xb8\x05\xe9\x45\x51\x40\x05\x40\xcc\x41\xdf\x58\x32\x13\x62\x5b\xa3\x4f\xaa\x6d\x5c\xa0\x49\x09\x24\xa5\x28\x74\xae\x05\xb7\x64\x01\x15\x83\xc2\xdc\xa0\x02\x34\x84\xb6\xd1\xdd\xce\x5d\xea\xb8\xaa\x59\xd0\x1c\xc5\x7d\x38\xab\xed\x3e\x2f\xfa\x1a\xdd\x87\xb3\xd7\x95\x65\x1e\x26\x99\x36\xd2\xc6\x88\xf0\xb2\x4c\x45\xaf\x11\xab\x2f\x77\x15\x6b\x13\xee\x67\xa3\x58\x9b\x78\x9f\x2e\x83\x1e\x97\xe8\x77\xf7\x7c\xe5\xd4\xef\x96\xdf\x89\x6d\x77\xdc\xfb\x12\x6d\xe3\xb1\xfa\x59\xfd\xbb\x9b\xf3\xff\x00\x00\x00\xff\xff\x43\xbb\xa3\x45\xbd\x27\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
