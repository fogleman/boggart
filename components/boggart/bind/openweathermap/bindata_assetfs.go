// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package openweathermap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5b\x6d\x6f\xe2\x3a\x16\xfe\x7e\x7f\xc5\x51\xb6\x57\x02\xa9\x85\x02\x85\x76\xbb\xb4\xd2\x6c\x99\x97\xae\xda\xce\x68\xe8\x6c\x35\x9f\x2a\x37\x39\x10\xdf\x9b\xd8\x91\xed\x40\xb3\x88\xff\xbe\x72\x5e\x20\x80\x81\x50\xe8\x64\xe6\xc3\x14\x1c\xfb\xf8\x3c\x8f\xcf\x79\x7c\xe2\x84\xc9\x04\x1c\x1c\x50\x86\x60\xd9\x9c\x29\x64\xca\x82\xe9\xf4\x8f\xae\x43\x47\x60\x7b\x44\xca\x2b\x4b\xf0\xb1\x75\xfd\x07\x00\x40\xbe\xd5\xe6\xde\x89\xef\x9c\x34\x9a\xa0\x3f\x49\x3f\xfb\xf4\x2a\x4f\x1a\xcd\xb4\xff\xf2\x98\xd7\xe7\x80\x30\xf4\x72\x57\x57\x7b\x28\xaa\x3c\x5c\xea\x11\xf7\x72\x9b\xd7\x93\x09\xd0\xc6\x05\x03\xab\x47\xa8\x17\x59\x50\x83\xe9\xb4\x5b\x77\x9b\x86\xde\x79\x4f\x3d\x24\x62\x40\x5f\xad\xeb\x6e\xdd\xa1\xa3\xa5\xc9\x0d\x4d\x0b\xfe\x64\xac\x6c\x9e\x63\xce\xd1\x46\x4f\x32\xa6\xd6\xf4\x5d\xee\xaf\xd0\x0f\x50\x10\x15\x0a\xb4\xae\xbb\x2f\x33\xfc\x95\x9a\x1d\x0a\x81\x4c\x3d\x3b\x44\xa1\xa2\x3e\xd6\x3e\x71\xe1\x13\x05\xd6\x3d\x67\x0e\x89\xac\x6a\xca\xcd\xcb\xf5\x31\x4c\x26\xb0\xbe\x7f\xa3\x7d\x79\x7a\x66\xc5\x7d\x57\x88\xd8\xc0\xd1\xa6\xe6\xb7\xd2\x72\x56\x90\x95\x31\x12\xe5\xa2\x38\xa1\x36\x67\x1b\x86\xc4\xc3\x6c\xc2\x46\x44\x82\x8b\x74\xe8\xaa\x2b\xeb\xe2\xcc\x82\x31\x75\x94\x9b\x7c\xa4\xce\x95\x25\xff\x8e\x6c\xce\xe4\x73\xca\x90\x0e\x92\x64\xd0\x06\x67\x76\xa6\x6a\x0d\xe2\x8b\x1d\x11\x2b\x7c\x35\x05\xe2\xc2\xb0\x24\x4d\xb2\x05\xaf\x3d\x10\x1f\xf5\xea\xbe\x88\xeb\x2e\xd5\x57\x04\x61\x43\x84\xa3\x31\x5c\x5e\xcd\x7b\x3d\x25\x13\xc0\x74\x0a\x59\x8c\x1d\x8d\x6b\x3d\x94\xb6\xa0\x81\xa2\x9c\xc1\x11\x4c\xa7\x93\x09\x20\x73\xe2\x58\xa1\xd7\xe6\xbc\x7b\x3b\x45\x05\xa2\x69\x5b\xfa\xac\xa3\x0c\x82\xd0\xf3\x4e\x84\x0e\x81\x4d\x84\xbb\xad\x6c\xb0\x83\x43\x81\x28\xad\x05\x26\xef\x09\x65\xb5\x47\xf4\x83\x44\x74\x5a\x07\x47\xb7\x49\xa6\x96\x3b\x0b\x3e\x86\x0c\xa2\x43\x22\x69\x81\x54\x91\x87\x57\x96\x4f\xc4\x90\xb2\x13\x0f\x07\xea\xb2\xd1\xfe\xd3\x80\x77\x1e\x03\x0e\x89\x8e\xe1\x88\x2a\xf4\xe3\x60\x18\x70\x81\x36\x91\x4a\xeb\xff\x36\x7a\xd3\xa5\x28\x2a\x64\x8e\xd6\xeb\x93\xd4\xe1\x99\xaf\x7a\x6d\x4e\x88\x47\x87\xec\xd2\x46\xa6\x50\x6c\x8f\xed\xb9\xc1\x28\x5e\x1d\x8d\x61\xa6\x65\xa7\x4d\x2b\x1f\xc1\x95\x85\x8b\xff\x21\x2c\x24\x42\x2b\xe3\xd1\xda\x5d\x63\x71\x32\x63\x38\xc4\x74\xd5\xee\x29\x2b\x18\x0f\xc5\xcc\x91\xd7\x5d\xcd\xa5\xc2\x96\x57\xb0\x8c\x8e\x1e\x89\x60\x3a\x9d\x09\x5d\xab\x69\xcd\xf4\xaf\xd5\x2c\xa2\x6f\x89\xbf\xed\x45\xff\x9e\x28\x73\x6a\xfd\x00\x51\x0b\x00\x74\xe9\xb5\x5f\x97\xa9\x0e\xb4\x0f\xa9\x03\x33\x91\xd9\x1e\x83\x5b\x13\x66\xeb\x76\x9f\xfb\x9a\x7e\xcc\xfe\xfc\xde\xf5\xcf\x53\x96\x49\x25\x57\x40\x8a\xbc\x78\x38\xab\x56\xe2\x2f\xf1\xff\x27\x52\x09\x1a\xa0\x03\x8e\x3a\x11\x28\x03\xce\x24\x1d\x21\x30\x3e\x16\x24\x98\xe5\x7f\x1c\xa0\x97\x8d\xd3\x53\x93\x4c\x25\xf6\x5d\x24\xce\xba\x6b\x62\x43\xd8\x29\x77\x4e\xd6\x37\x22\x88\x8f\x6a\x4e\x97\x72\x0b\x8e\xfc\x2f\xf1\x42\xdc\x36\xaa\x5b\x5f\xe7\x89\x1e\xb3\xc1\xff\x17\xee\x44\xeb\x1d\xd1\x4e\x0c\x66\xbb\xcf\xba\x7c\x98\x5b\xdb\xc0\x46\x0e\x9b\x0e\x51\x19\x10\x76\x65\x35\xad\x39\xce\x1b\xaa\xa2\x22\xe4\xc0\x46\xb8\x66\xcf\x6b\x37\x9c\x8b\xb5\xf9\xbc\xa3\xff\xce\xdc\xe7\x3b\xa2\xa8\x0a\x9d\xf9\xf2\xac\xe1\xd9\x60\x60\xd1\xb5\xda\x1d\x51\x85\x2c\x6c\x47\xfe\x06\x14\x9c\x0d\x0f\x05\x83\xb3\x03\xc1\xd8\x2c\xc1\x73\x2f\x76\x05\x7b\xdb\xdb\x07\xe5\x6d\xaf\xb4\x55\xd2\x45\xf4\x3e\xae\x67\x45\xf8\x61\xd6\x26\x9f\x5c\xfd\x48\xbe\xaf\x34\xf4\x23\xa9\xd0\x3f\x9c\x38\xfc\xea\xa8\xe9\x47\xb2\xcc\xc8\xb9\x47\x29\xc9\x70\xaf\xe0\xd1\x08\x52\x33\xa5\xc1\xb8\xe1\x21\x53\x22\x02\x9b\xef\xa7\x54\x1a\x4b\x66\xab\x2c\x2c\xfd\x90\x09\x2a\x11\x14\xdd\x2f\xa9\x35\x96\xcc\x56\x89\x58\x24\xaa\x43\x41\xd1\xa6\x7e\xc3\x1d\x64\x8d\x32\xf5\xd2\xa3\xac\x32\xb5\xe9\x91\xfa\x08\x7c\x00\x0e\x51\x04\x6c\xe2\xd9\xa1\x47\x14\xe5\x6c\x9f\xc5\xe8\x95\x57\x8d\xf4\x5d\x3a\x50\x40\x19\x48\xb4\x39\x73\x24\x0c\x04\xf7\xe1\xc7\xe3\xcd\x3e\x78\x34\x47\xff\xe3\xec\x17\x27\xc9\x9a\xa0\xf9\x9a\xbf\x6d\x2a\x23\x62\x6e\xb8\xb3\x5f\xa9\xe7\x94\x16\x1d\xff\x26\x72\x2f\x95\xd1\xe3\xdf\xa7\x0a\x7a\xa2\xef\x2d\x36\x7a\x86\x32\xc3\x26\x46\x28\x03\xc4\xbd\xa2\x67\xe1\x0c\xa7\x9c\x20\x8a\x81\x38\x54\xa0\xad\x75\xf2\x18\xd2\xc3\x30\xa8\xe8\x3b\x74\x2e\xb8\xc7\x87\xd4\x26\x5e\x75\x6f\x98\x3d\x1c\x96\x0b\x72\x18\x4a\xb5\x37\x8a\xcf\xa1\xfc\xb5\x7b\xf2\x52\x66\x7d\x27\x94\xbd\x6f\x66\xe9\x19\xca\xcc\xac\x18\xe1\x88\x7b\xa1\x8f\x30\xe0\x02\x94\x8b\xe0\x11\xa9\xa0\x01\x2e\x0f\xc5\x31\xf8\xfe\x3e\xab\xa8\xcd\xd7\x1e\x44\xc3\x2d\x2d\x18\xd7\x02\x6c\xc5\x00\xe5\x81\x10\xb6\x0e\x85\xf0\x4d\x71\xda\x67\x7c\xfc\xce\x37\xc2\x2e\x1f\x97\x19\xa7\x31\xc2\xf7\x8b\x53\x6d\xbe\xdc\x38\x5d\x0b\xf0\x40\x71\x9a\x22\x2c\x37\x4e\xe7\x0f\x5a\xdf\xb3\x58\x59\x7c\x3a\xb0\x7f\xb4\xc2\xc2\x63\xc3\x75\x8f\x8e\x0b\x38\x5c\x60\x1e\x58\xd9\x4c\xd3\x09\xf4\x1d\x09\x8d\x9f\x45\xd3\x9d\x8a\xa0\x9c\xc1\xa3\x71\xd1\xb3\x20\x28\xcc\xcb\xdb\x40\x7d\x16\x3c\x0c\xf4\x9d\x63\xfa\x4c\x14\x82\xec\x21\x85\x84\x8a\x56\xd4\x63\xd0\xf1\x7a\x0c\x1f\x5f\x95\x40\x1f\x01\x95\x5d\xdb\xa9\x28\x5a\x84\x7d\x9f\xec\xe3\xe5\x03\x5f\x5d\xcd\x31\x55\x2e\x65\x71\xba\x0f\x35\x2b\x35\xf8\xc9\x43\xb0\x09\x83\x21\xaa\xb8\x99\x87\x2a\x08\xe3\xfb\xd2\x88\x87\x02\x3c\xc2\x86\xe1\x8e\x87\x6a\x8b\x6c\xe4\x5f\x6c\x38\x2c\x29\x30\x4b\x79\x86\x71\xb8\xd9\x9c\x81\x65\x15\xc9\x0e\xd8\x85\x53\x58\xc7\x2b\xb5\xdf\x94\x20\x99\xbd\x2e\xf5\x87\x40\x3c\x75\x65\xa5\xe9\x62\xc7\x14\x59\x10\x3f\x96\x5c\x69\x95\xc2\x8e\xdb\x04\x19\x43\xc5\x26\x9e\x07\x47\xb5\xd8\x83\xb4\x53\x35\xee\x55\xbf\xde\x61\x91\x76\xa1\xb9\x80\xfe\x16\xef\xf9\x26\x3d\xbf\x7f\xf7\xfa\xf8\xbe\xe4\xfa\xf8\x31\xf7\x0e\xda\x1e\xbb\xef\xe2\xeb\x0d\x65\xd4\x17\x39\x20\x35\x78\x74\xa9\x84\xdc\xeb\x75\x73\xfd\x05\x62\xdb\x3c\x64\x4a\xce\x8a\x10\x37\xf4\x09\x83\x00\x85\x8d\x89\x64\xcc\x65\x7b\x6f\x46\x3e\x21\x7a\xf2\x8e\xfe\x5d\xde\x11\xf2\x07\xe5\x73\x19\xb8\x28\xa8\x0d\x81\x40\x29\x35\x1b\x15\x9e\x08\xb2\x44\x02\x1e\x8e\xd0\x3b\xd6\x51\xaf\x11\x23\x50\x09\x8c\xeb\x2b\xcf\xf1\x15\xe0\x02\x86\x82\x39\xe9\x37\x87\x28\x52\x3d\x06\xf7\x1b\xd9\x9b\x9b\x6f\x99\x37\x65\x51\xf3\x25\xf4\xa9\x43\x55\x74\x0c\x7f\xee\x0d\x26\xb3\x55\xde\x93\x28\xca\xa8\x1f\xfa\x0b\x41\x4f\x92\xfd\xd5\xe7\xbe\xf6\x33\x49\x0a\x2a\xc1\xd7\x5d\x89\x07\x29\x00\x2f\x02\xfe\x22\x51\x8c\xd0\x59\x18\x5d\x49\x77\x6e\x8f\x88\x21\x82\x8f\x43\xe2\xf1\x80\x7b\x54\xa2\x04\xc2\x1c\x08\xc5\x0b\x61\x40\x04\x12\xb9\xd7\x71\xce\x4c\x3a\xee\x0b\xd6\x30\xef\x42\x1f\x79\x2d\x4c\x9f\xee\xfa\x3b\xd2\x47\x5e\x7f\x2f\x95\x59\x15\x99\x43\xc8\x46\x1f\xc9\x5d\x2c\x45\xbf\x23\x56\x5d\xe1\x32\xe7\x90\x70\x3f\x0b\xe6\x1c\x12\xef\xf6\x32\x68\xcb\x1b\x7a\xf5\x35\x2f\x36\x75\xeb\xf1\xab\x61\x8b\x17\x8a\xbe\x8f\x37\x9f\xf3\x8f\xdc\x2f\x16\xfe\x92\x71\x65\x3d\x99\x80\x54\x44\x51\xfb\xcb\xe3\xfd\x1d\x54\x92\xcf\x3f\xbe\xdf\x81\x55\x7f\xe1\xc3\x21\x11\xaa\x4e\xa4\x44\x25\xeb\x23\x64\x0e\x17\xf5\xf4\x8d\xc9\xec\x6f\x4d\xdb\x19\x10\x4f\x62\x35\x9e\xa1\x9b\xdc\x1d\x80\x8a\x02\xbc\xb2\x48\x10\x78\xd4\x8e\x1f\xeb\xd5\xff\x22\x23\x92\x5c\x4c\xdf\x58\x1b\x84\x2c\x3e\xc8\xd6\xf7\x33\x23\x14\xaa\x9f\x58\xac\xa4\xf5\xc1\xad\x53\x85\xc9\x0c\x9d\x1c\x53\x65\xbb\x60\xbe\xa8\xff\xd5\xeb\x20\x50\x85\x82\x41\x6a\xa7\x76\x73\xf7\xf1\xc3\xf7\xe7\x87\xdb\xcf\x5f\x1e\xff\xb5\xa5\xeb\xb7\x0f\xdf\x1f\xef\x7e\x3e\xdf\xdc\x7d\xfd\xd1\xfb\xf9\xdc\xfb\xf0\x73\xb7\x01\xe9\x1c\x0b\x63\x6c\x22\x11\x2e\x4e\x1b\x97\xa6\xd6\xa6\xb1\xb5\x65\x6c\x3d\xbb\x5c\x09\x87\x15\xa0\xda\x0b\xd3\xfc\xcd\xd3\x53\x83\xcd\xa6\xd1\xab\xa6\xd1\xab\x66\xcb\x68\xa1\x65\xb4\xd0\x32\x59\x68\x19\x7d\x68\x19\x7d\x68\x19\x7d\x68\x35\x8c\x16\x1a\x46\x0b\x0d\xb3\x05\x13\xb7\xad\xc6\x99\xa9\xb5\x69\xb2\xdb\x36\xa2\x68\x1b\x51\xb4\x8d\x28\xda\xc6\xf5\x6d\x2f\xaf\x6f\xd2\x6a\xc4\xd6\x6e\x1a\x7d\x30\xfb\xdb\x34\xfa\xb0\xbc\x6e\xb0\x1a\x4d\xdf\x3f\xdc\x3e\x98\x62\xa9\x63\xf4\xa9\x63\xe4\xbb\xb3\xcc\xb7\x61\x9e\xfe\xdd\xc7\x8f\xc6\xa4\xe9\x18\xa9\xee\x18\xa9\xee\x18\xa9\xee\x34\xda\xc6\xd6\x8e\xa9\xd5\x48\x6a\xc7\x48\x6a\x67\x99\x54\x13\xac\x87\xaf\x4f\x26\x54\xe7\xc6\x94\x39\xbf\xd8\xbe\x20\x4f\xb7\x0f\x3d\xa3\x45\x23\x23\xe7\xc6\x65\x3a\x37\xe2\x39\x3f\x33\xb6\xb6\x8d\xad\x1d\x73\xab\x89\xff\xf3\xf3\xed\xa8\x3e\x7d\xfd\x6c\x56\xcc\xa5\xe5\x70\x70\x40\x42\x4f\x15\x10\x41\xad\xf6\x0b\xd2\x9d\x6c\xb2\xd3\x64\x96\xa3\x8a\xc3\xed\x50\x57\x9b\xd5\x9a\x40\xe2\x44\x95\xd9\xfe\x53\xc9\xef\x25\x23\x92\x1c\x04\x49\xb8\x02\x86\xe3\xcc\x7e\x65\x62\xd9\xdc\xe3\xc2\xba\x04\xeb\x1f\xe7\xad\x8b\xf3\x7f\xde\x58\xd3\xea\x7c\xae\x78\x48\x4d\xa2\xaa\xac\xfc\x2a\xea\x78\x79\x83\x9b\x4c\xa0\x42\x99\x83\xaf\xab\x27\xc1\xa7\xd5\xe4\x94\xb5\x5a\xcd\x91\xb3\xf3\xaf\x4e\x0c\xce\x2c\xfd\xc0\x61\x83\x4f\xb9\x9f\x2d\x18\x9c\xca\xf9\x94\x15\x15\x8b\xb3\x06\x1e\x89\x2a\x69\x47\x4d\x50\xb7\x9e\x6c\xfa\xb9\x3a\xe4\xff\x01\x00\x00\xff\xff\x3e\xe6\x00\x99\x38\x39\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
