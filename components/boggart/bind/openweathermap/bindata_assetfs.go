// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package openweathermap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xdd\x4f\x23\x37\x10\x7f\xbf\xbf\x62\xb4\xba\x93\x38\x29\x24\x17\xee\xa5\x3a\x05\xa4\x96\xb4\xf4\x24\xb8\xa2\x86\xf6\xd4\xa7\xd3\xb0\x9e\xec\x5a\xf5\xc7\xca\x1f\xf9\x68\xc4\xff\x5e\x79\xb3\x21\x09\x24\x90\xb0\x1b\xcc\x0b\x64\xed\xf1\x78\x7e\xe3\xdf\x8c\xc7\xde\x9d\xcd\x80\xd1\x90\x2b\x82\x24\xd5\xca\x91\x72\x09\xdc\xdd\xbd\xeb\x31\x3e\x82\x54\xa0\xb5\xa7\x89\xd1\xe3\xe4\xec\x1d\x00\xc0\x6a\x6b\xaa\xc5\xb1\x64\xc7\xdd\x13\x08\xbf\xac\x5c\xfc\x9a\xd8\xe3\xee\x49\x25\xff\x70\xcc\xe4\x47\x81\x8a\xc4\x4a\xef\x63\x09\xc7\x9d\xa0\x07\x12\xa5\x54\x7e\x72\x36\x9b\x01\xef\xfe\xa4\x20\xf9\x4e\xe8\x72\x32\x09\xb4\xe1\xee\xae\xd7\xc9\x4f\x36\xc8\xaf\xda\x2a\x08\xcd\x90\x4f\x92\xb3\x5e\x87\xf1\xd1\x83\xe9\x37\x34\xad\x59\xb4\xf0\xcb\x86\x39\x1c\xde\x0a\x5a\x48\xce\x1f\xca\xbf\xc7\xd6\x19\x5e\x10\x03\xe6\x8e\x0d\xd9\x42\x2b\xcb\x47\x04\x4a\x8f\x0d\x16\x09\x58\x37\x15\x74\x9a\x8c\x39\x73\xf9\x97\xee\xa7\x4f\x1f\x36\xe8\x9e\xeb\xcf\x09\xd9\xb6\x3e\xb3\xb9\xa3\x1a\xb8\x74\xd6\x35\x1a\x94\xe4\x96\xee\x72\xf9\x8e\x23\xff\x46\xe1\xe9\xb9\x51\xbd\xce\x36\x4b\xc2\x98\x27\xec\xbf\xd5\x6c\xba\xdd\x90\x60\xc4\x10\xda\xa9\x37\x86\x94\x0b\x9c\xdc\x26\x09\xcf\x79\x63\x05\x5b\xa0\xa8\x2d\x50\x9d\x26\x27\xc9\x12\xe7\x39\x77\xd3\x5d\x9c\x03\x4f\xc2\xdd\x6c\x79\xfb\x5c\x6b\xc3\x1a\xb2\x9f\x2d\x6d\xbe\x44\xc7\x9d\x67\xcb\xe5\xd9\xe2\xe7\x0d\x0a\xd6\x4d\x6b\x5f\xa2\xdb\x49\xc3\xf3\xc8\x5f\x80\x42\xab\xac\x29\x18\x5a\x35\x04\x63\x36\x03\x52\x07\x58\xb2\xaf\xfd\x3a\x28\xbf\xf6\xa3\xad\xd2\x37\x94\xb5\x16\x28\x8c\x6f\x6e\x6d\x56\x83\x6b\x30\xb5\x87\x4d\x0d\x83\xa9\x75\x24\x9b\x4b\x0e\xaf\xcd\x9a\xc1\xd4\xc6\x64\xce\x15\x59\x8b\x59\x2d\xf2\x04\x04\x95\x9a\x68\x30\xce\xb5\x57\xce\x4c\x21\xd5\xf5\x32\x55\xc0\xb2\xd0\x15\x0b\xcb\xc0\x2b\xc3\x2d\x81\xe3\xf5\x82\x3a\x60\x59\xe8\x8a\x88\xc5\x92\x6b\x0a\x4a\x50\xf5\x06\x77\x90\x2d\x99\xa9\x8f\x8e\xd6\x80\x47\xc8\x4d\x37\x5c\x12\xe8\x21\x30\x74\x08\x29\x8a\xd4\x0b\x74\x5c\xab\x3a\x8b\xd1\x8f\x57\x8d\x0c\x72\x3e\x74\xc0\x15\x58\x4a\xb5\x62\x16\x86\x46\x4b\xf8\xeb\xe6\xbc\x0e\x9e\xe0\xa3\xff\xb4\x7a\xe5\x20\xd9\x42\x9a\x3f\x56\x8f\x4d\x31\x18\x73\xae\x59\xbd\x52\x8f\x45\x63\xc7\x2f\x68\x6b\x65\x99\x30\xfe\x30\x55\xd0\x77\x7e\xe8\x64\x13\x66\x88\x49\x9b\x12\xa1\x2d\x88\x6a\xb1\x27\x68\x69\x0f\x82\x96\x68\x24\x2a\x81\x30\x6e\x28\x0d\x79\xb2\x05\x8c\x32\x43\x64\xe1\x28\x9c\xd0\xb5\xd1\x42\x67\x3c\x45\xf1\xb1\x36\xcc\x3e\x65\x71\x41\x66\xde\xba\xda\x28\x2e\xbc\x7d\xdd\x3d\xf9\x41\x64\xfd\x89\x5c\x1d\x36\xb2\xc2\x0c\x31\x23\xab\x44\x38\xd2\xc2\x4b\x82\xa1\x36\xe0\x72\x02\x81\xd6\x41\x17\x72\xed\x4d\x0b\xa4\xac\xb3\x8a\x41\x7d\xfb\x9b\xe9\xe6\xd1\xc8\xb8\x15\xe0\xe7\x12\xa0\x6d\x08\xe1\xe7\xa6\x10\xbe\x88\xa7\x03\xa5\xc7\x07\x3e\x08\xe7\x7a\x1c\x93\xa7\x25\xc2\xc3\xf1\x34\xa8\x8f\xcb\xd3\xad\x00\x1b\xe2\x69\x85\x30\x2e\x4f\xab\x8b\xfb\x03\x17\x2b\xeb\x6f\x07\xea\xb3\xb5\x02\x62\x50\x65\x04\xef\xc7\xf0\xe5\x74\x6f\x44\x3b\xa3\x82\x47\x9b\x69\x35\x41\x38\x91\xf0\x50\x34\x00\xdf\xab\x08\x5a\x51\xf8\x7e\xbc\xeb\x5d\x10\xec\xec\x97\x97\x81\xba\x30\xda\x17\xe1\xe4\x38\xae\xd0\x15\x8b\x97\x14\x16\x8e\x42\x46\x6d\x41\xe0\x6b\x0b\x7e\x9d\x38\x43\x92\x80\x5c\xda\xde\xab\x28\x5a\x87\x7d\x35\xdf\xc7\xe3\x03\x7f\xbc\x9a\x63\xee\x72\xae\xca\x70\xcf\x82\x57\xda\xf0\x8f\xf6\x90\xa2\x82\x8c\x5c\xd9\xac\xbd\x2b\x7c\x79\x2e\x9d\x6a\x6f\x40\xa0\xca\xfc\x9e\x97\x6a\xeb\xde\xe8\x93\x4d\x0d\x2f\xca\xe9\x9b\x75\x0a\xdc\x87\xbc\xa2\x92\x6e\xa9\x56\x90\x24\xbb\x44\x07\xec\xe3\x53\xd8\xe6\x57\x9e\xbe\x28\x40\x16\xfa\x7a\x5c\x66\x80\xc2\x9d\x26\x55\xb8\xa4\xa5\x8b\x12\x28\x5f\x4b\x3e\x6a\xb5\x26\x2d\xdb\x0c\x8e\xe1\x28\x45\x21\xe0\x7d\xbb\xb4\xa0\x12\xfa\x58\x4a\x75\xce\xf6\x58\xa4\x7d\xdc\xbc\x43\xfe\xdd\x5d\xf2\x45\xf9\xfc\xea\xe0\xf5\xf1\x55\xe4\xfa\xf8\x86\x64\x41\x06\x9d\x37\xb5\x0e\xff\x01\x46\x3b\xe8\x8a\x56\x5f\xac\x00\x69\xc3\x4d\xce\x2d\xb8\x65\xcb\x32\xff\x02\xa6\xa9\xf6\xca\xd9\xfb\x22\x24\xf7\x12\x15\x14\x64\x52\x9a\xa7\x8c\x65\xda\xae\xed\x91\xdf\x88\x84\xbd\xe4\xff\xc6\xbb\x42\xfe\xd9\x49\x6d\x8b\x9c\x0c\x4f\xa1\x30\x64\x6d\xf0\xc6\x91\x9e\x27\x64\x4b\x08\x82\x46\x24\x5a\x81\xf5\x01\x31\x01\xb7\xa0\x74\xe8\xf9\x51\xf6\x80\x36\x90\x19\xc5\xaa\x27\x86\x0e\x3f\xb6\x20\xbf\xc6\xda\xbe\xb9\x5e\x58\x13\xcb\x35\xbf\x7b\xc9\x19\x77\xd3\x16\x7c\xa8\x0d\x66\xa1\x2b\xde\x9b\x28\xae\xb8\xf4\x72\x8d\xf4\x38\xdf\x5f\xa5\x96\xc1\xce\x79\x50\x70\x0b\x32\x88\xa2\x80\x0a\x80\x98\x82\xbe\xb5\x64\x46\xc4\xd6\x46\x1f\x55\x3b\xb7\x40\x93\x11\x48\xca\x50\xe8\x42\x0b\x6e\xc9\x02\x2a\x06\xde\xdc\xa2\x02\x34\x84\xb6\xd6\x75\xce\x7d\xea\xb8\xda\xb1\x86\x39\x88\xfb\x70\xb2\xb3\xfb\x82\xe8\x5b\x74\x1f\x4e\xde\x56\x96\x79\x9c\x64\x9a\x48\x1b\x03\xc2\xcb\x32\x15\xbd\x45\xac\xa1\xc2\x55\xac\x49\xb8\x17\x46\xb1\x26\xf1\x3e\x5f\x06\x3d\x2d\xd1\xeb\x6c\xf9\xb0\xa9\xd7\x29\x3f\x0d\x5b\xef\x78\xf0\xf1\xd9\xca\x63\xf5\xb3\xfa\x77\x3f\xe7\xff\x01\x00\x00\xff\xff\xbf\xd2\xeb\x1c\xb0\x27\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
