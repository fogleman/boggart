// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package chromecast

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xdb\x3c\x0c\xbe\xf7\x57\x10\x3c\xbc\x78\x37\xc0\x71\x93\x0e\xc5\x80\xd9\x39\x0e\x3b\x74\xc0\xb0\xaf\x6b\xa1\x44\x74\xa3\x42\x1f\x9e\x28\xa7\x69\x83\xfc\xf7\x41\xfe\x68\xbc\xc6\x71\xdb\x0d\x05\xb6\x4b\x22\xc9\x24\xf5\xf0\xd1\x23\x52\xdb\x2d\x48\x2a\x94\x25\xc0\xa5\xb3\x81\x6c\x40\xd8\xed\x4e\x32\xa9\xd6\xb0\xd4\x82\x39\x47\xef\x6e\x70\x7e\x02\x00\xd0\x5f\x5d\x3a\x9d\x18\x99\x4c\x67\x10\x47\x6c\xba\xd1\x86\x93\xe9\xac\xb5\x7f\xe8\xb3\xb9\x2c\x85\x25\xdd\xfb\x7a\x68\x11\x54\xd0\xf4\xc0\xa2\xb6\x5a\xcd\xe6\xdb\x2d\xa8\xe9\x5b\x0b\xf8\x49\x8b\x5b\x28\x94\x26\x84\x09\xec\x76\x59\xba\x9a\x0d\x78\xf4\xd1\x6a\x12\xbe\x50\x1b\x9c\x67\xa9\x54\xeb\x07\x00\x06\x96\x7e\xc1\xd4\x31\x73\xb8\x47\x44\x54\xc0\x84\xbc\x77\x3e\xf2\x36\x86\x41\x68\xf2\x01\xea\xdf\x44\x0a\x7b\x45\xbe\x9b\x28\x36\x8a\x59\x2c\x06\x13\xaf\xc3\x2c\xaa\x10\x9c\x85\x70\x5b\x52\x8e\xcd\x04\xf7\xb9\x39\x26\x04\x29\x82\xe8\x42\xb5\x9b\x21\x08\xaf\x44\xb2\x52\x52\x92\xcd\x31\xf8\x8a\x70\xfe\x5f\x50\x86\xf8\x5d\x96\x36\x61\x06\x73\x1a\x49\xe8\x90\xab\xd6\x87\xac\x8c\x0e\xc7\x28\x32\xc4\x2c\xae\xe8\x39\x24\x29\x5b\xb8\xbf\x97\xa2\xb1\x84\x9e\x4d\x52\x56\x38\x6f\x3a\xb4\x71\x9c\xac\x9c\x57\x77\xce\x06\xa1\xa1\x9e\x6b\xb1\x20\x9d\x68\x2a\x02\x82\x77\x9a\x1a\x33\x04\x43\x61\xe5\x64\x8e\xa5\xe3\x80\xa0\x64\x8e\x4c\x56\x22\x58\xb7\x16\x5a\x49\x11\xe8\x08\x5f\x3d\xd2\x55\x20\xd3\xec\x72\xe5\x5d\x55\x1e\x61\xb8\xf6\xaa\x61\x44\xdb\x1c\xd7\x4e\x57\x86\xf6\x1c\x3b\x1b\xbc\xd3\x0d\x50\x68\xcb\xc3\x59\x57\x1d\xce\x06\x8b\xc3\x00\x43\xcd\x05\xff\xde\xc6\x8e\xb7\x1b\x32\x2e\x85\xbd\xaf\x46\xf4\xa3\x52\x9e\x24\xce\x5f\x67\x69\xfc\x30\x02\x36\xad\xb1\x8c\x18\x1c\xd6\xb3\xf3\x0e\xf0\xf9\x93\x00\xd7\x51\x94\x2d\xab\xd0\x0a\xcf\xc7\x8b\x8d\x60\x94\xcd\x71\x8a\x60\xc4\x26\xc7\xe9\xe9\x29\x02\x07\x2a\xeb\xa5\xfe\x21\xb7\x9c\x35\xe7\xd6\xf1\x69\x85\xa1\xfd\x6c\x2d\x74\x45\x39\x46\xc5\x35\x4b\xb0\xdb\x21\x74\x2c\xf4\xf9\x18\xe1\x61\x50\x8e\x8f\x7d\xfa\x63\x81\x94\x5a\xdc\x92\x7f\x19\x81\xbc\x57\x9a\xa0\xf2\xfa\x1f\x91\x48\xa0\x4d\x10\x9e\xc4\xd0\xe9\x83\x27\x56\x77\xb1\xb4\x5d\x76\x66\xf1\x8a\xdf\x70\x8e\x6f\x3a\x35\xd4\x99\x46\x91\x44\x8b\xe1\xe3\x8f\x0a\xa9\xbc\xae\xdb\x61\x17\xe7\x25\x35\xa1\xed\x25\x3b\xad\xe4\x60\x4b\x1d\x72\x78\x9a\x7e\x8e\xf1\x6d\x64\xe2\x8a\x82\x29\x24\x67\x8f\x91\xdd\x76\x82\x7d\x2d\x6c\xae\x26\x57\x0b\xa3\xc2\xbd\x1c\x17\xc1\xc2\x22\xd8\x84\xab\xe5\x92\x98\x71\xff\xba\xf8\x52\x3b\x35\x0f\x8b\x63\x1d\xe0\xf7\x79\xcc\xd2\x48\xc4\xe8\x0b\xa4\x37\x6d\x87\xed\x5f\xaf\x83\xf4\x1e\x6e\xd7\x8c\x5d\x17\xda\x6e\x81\x83\x08\x6a\xf9\xe1\xeb\xc7\x0b\xf8\xbf\x19\x7f\xfb\x7c\x01\x98\x4a\xc1\xab\x85\x13\x5e\xa6\x82\x99\x02\xa7\x6b\xb2\xd2\x79\x4e\xdb\x3e\xe1\x7c\x7a\xdd\x9b\x4c\x8c\xb2\x93\x18\xb9\x10\x9a\xe9\x55\xdc\xe0\x7e\xf7\x9f\x01\x00\x00\xff\xff\x62\x4d\xd8\x4c\x35\x0a\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbf\x4f\x14\x41\x1c\xc5\x1f\x27\xfe\x3a\x8d\x26\xb4\x5a\x7c\x89\x91\x68\xcc\xe0\xee\x9e\x24\x64\x60\x41\x45\x48\x8c\x5c\x24\xb8\x50\x9a\x4c\xd8\x61\xd9\xb8\x37\x73\x99\xdd\x35\x5e\x42\x01\xc4\x4e\x12\x0b\x63\xab\x85\xfc\x01\x17\x08\x06\xd4\x60\x6d\xe5\x6c\x63\xa9\x89\x9d\x8d\x9d\xbd\xb9\x3d\x84\x5c\xe3\xb7\x99\xf7\xe6\x7d\xe6\xcd\xf7\xfb\x40\xff\x6b\x00\x38\x0d\xe0\x32\x80\x00\xc0\x39\x00\x9b\xe8\xce\x1e\x80\x8b\x00\xf6\x01\x9c\x07\xf0\x05\xc0\x19\x00\xdf\x00\x9c\x05\xf0\x03\x40\x3f\x80\x5f\x00\x4e\x01\xf8\x0d\x60\xa5\x0f\xf8\x03\x60\x10\xc0\xe3\x0a\x70\x05\xc0\x5a\x05\xb8\x00\x60\xab\x02\x5c\x02\xb0\x53\x01\x06\x00\x7c\x3d\x3c\x7f\x56\x80\x3e\x00\x15\xf4\xce\x89\xc3\xde\xce\x7e\x27\x0f\xff\x2a\xe7\x4e\x62\xa4\x08\x5b\xd4\x4c\x44\x2b\x56\x11\x66\xe2\x44\xf6\x9a\xdc\x24\x98\x4b\x44\x8b\x96\xe3\x44\xe2\x91\x54\x21\x16\x75\x92\x37\x24\xe6\x65\x53\x9b\x8c\xd5\xd3\x28\x0e\xd9\xdd\x3c\x4a\x59\xa0\x39\x85\xf2\xe9\xed\x27\xf1\x8a\x68\xe8\x61\x93\x57\xe7\x1e\x06\x6c\xca\x48\x91\xc5\x5a\xb1\x7b\x22\x93\x9c\x3c\xc7\x1d\x65\x4e\x8d\x79\x35\xf2\x6a\x7c\x64\xe4\x86\x53\x73\x9c\xea\xac\x48\x33\x16\x18\xa1\xd2\x44\x64\xda\x70\x7a\x50\x76\x50\x3d\x37\xa2\xa1\x43\x4d\xe3\x3d\xc5\x13\xd5\x59\xa1\xa2\x5c\x44\x92\x05\x52\x34\x38\x1d\x79\x4e\xf3\x79\x9a\xc6\x42\x55\xeb\xf7\xeb\xd3\x6c\x51\x9a\x34\xd6\x8a\x93\x3b\xec\x54\xa7\xb4\xca\xa4\xca\x58\xd0\x6a\x4a\x4e\x99\x7c\x96\xdd\x6c\x26\x22\x56\x63\xb4\xb4\x22\x4c\x2a\x33\x7f\x21\x98\x61\xa3\xc7\x5c\x67\x9f\x65\x69\xd8\xb4\x5a\xd2\x61\xac\x22\x4e\xd5\xb9\x24\x37\x22\x61\x33\xda\x34\x52\x4e\xaa\x59\xda\xd4\xaf\x8d\x51\x57\xfa\xea\xaa\xeb\xf8\xbe\x4b\x43\x43\xd4\x91\xce\xa0\xef\xba\x34\x49\x0e\xf1\xd2\x4f\xf8\xde\xbf\x68\xdc\xbf\xd5\x91\xd7\x4a\x6c\xdc\x75\x68\x75\xb5\xfb\x64\xc2\xf7\x9c\xeb\x34\x49\x2e\x71\xf2\xc6\x60\xdf\xd9\xf7\x76\x97\xec\xe7\x62\xcd\x1e\xd8\x3d\xbb\x53\xac\x15\x2f\xec\xb6\x6d\xdb\xdd\x62\xa3\x58\x2f\x5e\xc2\x6e\xd9\xb6\xdd\xb7\x1f\xff\xc7\x2c\xcc\xcf\x52\xf1\xbc\xcb\xd9\x36\xec\xdb\x63\xd2\xb6\x8b\x8d\x62\xf3\x28\x85\x7d\x53\x6c\x94\x4d\x6d\xbb\x6d\xf7\x3a\x19\xec\xab\x12\xff\x64\x3f\xd8\x83\x62\xbd\xbc\xfa\x1b\x00\x00\xff\xff\x95\xa0\x3b\x19\xf5\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
