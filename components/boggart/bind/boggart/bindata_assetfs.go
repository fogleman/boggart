// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
package boggart

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcb\x8e\xab\x30\x0c\xdd\xf7\x2b\x2c\xef\xb9\xa8\x54\xaa\xee\x02\xba\xb8\xbf\x70\x3f\x60\x14\x48\x28\x91\x42\x8c\x12\x43\x3b\x83\xf8\xf7\x11\xaf\x29\x43\xe9\x83\x0d\x76\x7c\x62\x1f\x9d\xe3\xb4\x2d\x48\x95\x6b\xab\x00\x33\xb2\xac\x2c\x23\x74\xdd\x2e\x96\xba\x81\xcc\x08\xef\x13\x74\x74\xc1\xd3\x0e\x00\x60\x79\x9a\x91\x09\x4a\x19\xec\x23\xe8\x23\x5f\xce\xd1\xd5\x07\xfb\x68\xc2\xaf\xef\x5c\x3f\x2a\x61\x95\x59\x54\xef\x11\xac\xd9\xa8\x15\x62\x40\x15\xd1\xa9\x6d\x41\xef\xff\x5a\xc0\x7f\x74\x3e\x0b\xc7\x08\x7f\xa0\xeb\xe2\xb0\x88\x36\xf0\x4b\xae\x46\x09\x97\xeb\x2b\x9e\xe2\x50\xea\x66\x35\x7e\xe3\xe8\x17\xa3\x59\x97\x8d\x19\x39\xb9\x72\x06\xf6\x71\x50\x90\xd3\x5f\x64\x59\x18\x18\x72\x23\x52\x65\x02\xa3\x72\x46\x70\x64\xd4\x08\x43\x28\x15\x17\x24\x13\xac\xc8\x6f\x35\x5e\x93\x18\x7a\x9d\x1d\xd5\xd5\x03\xf0\x70\x61\x18\xd6\xcf\x4d\xb0\x21\x53\x97\x0a\x6f\x66\x59\x76\x64\x46\x3a\x30\x59\x77\x98\x9d\x3b\x6c\x1a\xb7\xf5\xfd\x18\xf0\xbf\xa8\x59\xd2\xc5\x82\xa8\x2a\xa3\x33\xc1\x9a\xec\xe8\xc6\x63\x7a\xe1\x30\xfd\x09\xff\xfb\xed\x3a\xce\x14\x8f\x6f\x53\x5c\x76\x79\x01\xbd\x89\xf6\x1a\x37\x60\xb5\xad\x6a\x06\xfe\xac\x54\x82\xbe\x4e\x4b\xcd\x08\x56\x94\x7d\x36\xe9\x81\xa0\xe5\x32\x9b\x88\xa4\x6c\x21\x65\x1b\xf8\x3a\xcb\x94\xf7\x08\x8d\x30\xb5\x4a\xf0\x4e\xcf\x51\x43\x84\xf0\x0d\xe6\xaf\xf4\x84\xed\xe5\x7e\xb3\xfc\xa0\x14\x87\xfd\x2e\x3e\x7d\x41\x8b\x74\x0a\xa7\x5f\xdb\x82\xb2\x12\xba\xee\x3b\x00\x00\xff\xff\x28\x78\xb4\xd3\x75\x04\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
