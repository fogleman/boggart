// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package pass24online

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdf\x6f\xdb\x46\x0c\x7e\xcf\x5f\x41\x68\x19\x2c\x01\xd1\x49\x0e\xd6\x6d\x70\xad\x0c\x19\x8a\x21\x03\xda\x3d\x6c\xde\x53\x51\x0c\x67\x1d\x6d\x9f\x61\xdf\x69\x47\xc6\x8e\x61\xf8\x7f\x1f\x4e\xb2\x22\x59\xfe\xb1\xb4\x68\xea\x07\x81\xe2\x7d\xe4\xf7\x89\xa4\x28\x6f\xb7\xa0\x70\xa2\x0d\x42\x90\x5b\xc3\x68\x38\x80\xdd\xee\x0a\x00\x60\xbb\x05\x3d\x01\x31\x41\x54\xb5\x6b\xa8\xf4\x0a\xf2\x85\x24\xca\x02\x67\xd7\xc1\x5d\xe9\xed\x9e\xe4\x76\x11\x2f\x55\xdc\xbf\x05\x6f\xd1\xb2\xb6\x9e\x28\xee\xdf\xb6\x62\xba\x71\x4f\xff\x14\xd2\xe0\xa2\x83\x38\x46\xd5\x42\x8f\x71\x25\x96\xe5\x78\x81\x35\xba\xba\x29\xaf\xf1\xcc\xae\xd0\xed\x6d\x62\xa7\x0b\x54\xa0\x24\xcb\x0a\xa3\x38\x76\x48\x85\x35\xa4\x57\x08\xc6\xae\x9d\x2c\x02\xd0\x2a\x0b\x7c\x05\x02\x20\xde\x2c\x30\x0b\xd6\x5a\xf1\x6c\xd0\x4f\xd3\xef\xcf\xf0\x57\x1a\x66\x28\xd5\xf9\xf3\x0a\xe3\x2e\x03\xf6\x89\xee\x7c\x1f\xfa\x3f\x1b\x08\xde\x49\xc6\x00\x04\xec\x76\xc3\x84\x67\x9f\x19\xfc\x01\x89\xe4\xf4\xcb\xe3\xef\x1f\x79\x66\xdd\x4b\xc3\x87\xc9\xa5\xa7\xf3\xf1\x17\xeb\x33\xe4\xb1\x55\x9b\xcb\x14\xdb\x2d\x38\x69\xa6\x08\xd7\x9a\x71\x09\x83\xec\x70\x54\xcf\xa7\x7e\x51\xd9\x95\x7f\xf2\x32\xb3\x78\x90\x45\x81\x06\xd5\x3d\x8b\x91\x5e\xa2\xf8\xcd\xba\xa5\x64\x08\x6e\xd3\xf4\xc7\x38\xed\xc7\xe9\xed\xa8\xff\x66\x90\xfe\x30\x48\xdf\xc4\xe9\x4f\x83\x34\x0d\xaa\x12\xfd\x4f\xff\x8f\x78\xf6\x1d\xfa\xdc\x60\x3d\xd9\xc7\xff\x6e\x34\x6b\xc9\xa8\x7e\xdd\xc0\x6e\xf7\x9c\xb6\xe5\x16\x7f\xc8\x25\x56\x67\x68\xd4\x8b\x88\x2e\x37\x12\xaa\x3e\x54\xc9\x2e\xb5\xfb\x7c\x3b\x87\x49\xf9\xfa\x9d\x78\xe7\x13\xa5\x57\x9d\x65\x71\xe8\x6a\xdd\xb6\xcc\x46\x4f\x63\x5d\xb5\xd6\x9c\x9f\xbc\xf6\x8e\x23\x96\xac\xf3\x87\xd1\x87\xf7\x10\x56\xf6\xdf\x7f\xbe\x87\x20\x51\x92\x66\x63\x2b\x9d\x4a\x24\x11\x32\x25\x2b\x34\xca\x3a\x4a\x9e\x57\x06\x09\x83\x1c\x8f\x29\xc9\xa9\xf2\x8e\x2a\xef\xd8\x5a\x26\x76\xb2\x10\x4b\x6d\x44\x4e\x14\xc0\x44\x2e\x08\xa3\xaf\xc8\x3a\xd1\x4f\xa8\xfc\xa3\xa0\xab\x15\x94\xae\x87\xd2\xf5\x4d\x24\x34\xdb\xb2\x56\xd0\x78\x2e\x0b\x38\xdd\x98\x39\x7d\xc5\xb6\x24\x73\x4a\xe6\xff\x3e\xa2\xdb\x88\x56\x67\xbc\x96\xf9\x6b\xd4\x62\x4c\x9e\xf0\xec\x0c\xbc\x0a\x67\x6b\x04\x3a\xe4\xed\x49\x78\x35\xfa\xa6\xd9\x1d\xf6\xd6\x14\x7c\x03\xf2\x7d\xe9\xcf\x8e\xde\x21\x7d\xb5\x2c\x28\x77\xba\x60\xe0\x4d\x81\x59\x20\x8b\x62\xa1\x73\xc9\xda\x9a\x64\x2e\x57\xb2\x3a\x6c\x7d\xdc\xaf\x43\x65\xf3\xc7\x25\x1a\x8e\x84\x43\xa9\x36\xe1\xe4\xd1\xe4\x1e\x0f\x61\x04\xdb\x83\x0d\xb5\x92\xfb\x3f\x18\x90\xc1\x75\xd8\xfb\xce\x7f\x91\x7a\xd1\xdb\xab\x03\x50\x09\x10\xd6\x60\xd8\xd3\x46\xb3\x50\xdc\xbb\x81\x26\x27\xde\x00\x21\xb3\x36\x53\xea\xa6\xaf\x29\x64\xa1\x21\x03\x83\x6b\xb8\x16\x13\xd3\x4c\xb8\xb8\x2f\x74\xf8\x1c\xfc\xf6\x28\x56\x16\x5a\x58\xa7\xd0\x85\x1f\xd3\x1b\xe8\x29\xa4\xbc\xf7\x29\x12\xca\xc9\x75\xd8\x55\xd9\x28\x7d\x57\xa7\x0f\x23\xe1\xec\x9a\xc2\x48\xe0\x0a\x5d\xbb\x0e\xfa\x94\xd2\x5a\xad\x97\x07\x19\xf0\x4c\x53\x29\x35\x3c\xa1\xcc\xff\xfc\xd9\xc7\xf4\x13\x64\xb5\x25\x16\x68\xa6\x3c\x83\x3b\x48\xe1\x17\xef\xc4\x91\xfd\x8b\x9d\x36\xd3\x70\x8f\x88\x60\x00\xbd\xde\xe9\x74\x25\x9f\xb3\xeb\x50\x47\x15\xad\xbf\x9c\xa0\xde\x75\x7c\xed\xfb\xda\x1e\x26\xd5\x58\xdc\xb5\x76\xd7\x7f\x01\x00\x00\xff\xff\x88\x96\x42\x63\x3b\x0b\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
