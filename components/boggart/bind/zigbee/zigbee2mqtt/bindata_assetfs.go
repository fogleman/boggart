// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package zigbee2mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x6d\x73\x1a\x39\xf2\x7f\x9f\x4f\xd1\xff\xf9\xfb\x0a\xa8\x0d\x33\xd8\x7b\xb9\xdb\x22\x26\x5b\xbb\xb1\xf7\x92\x3b\x27\xeb\xb3\xbd\xb9\xaa\xdb\xda\x4a\x89\x51\x03\xb2\x07\x69\x22\x09\x30\xa1\xf8\xee\x57\x92\xe6\x01\xcc\x3c\x80\xc1\xb9\xe4\xe6\x45\x32\xd6\xb4\xfa\xe1\xa7\xee\x56\xab\x67\x58\x2c\x80\xe2\x80\x71\x04\x2f\x14\x5c\x23\xd7\x1e\x2c\x97\xcf\x4e\x29\x9b\x42\x18\x11\xa5\x7a\x9e\x14\x33\xef\xd5\x33\x00\x80\xd5\xd1\x50\x44\xed\x31\x6d\x1f\x9f\x80\xb9\x53\xe3\xf4\xee\x5e\xb5\x8f\x4f\x12\xfa\x87\x73\xee\x3f\xc6\x84\x63\xb4\xf2\x74\x93\x22\xd5\x62\x9d\x26\xa3\x93\x22\xc2\x9e\xa7\x49\xbf\x88\x53\x46\x39\x89\x52\x86\x9c\x4c\x81\x93\x69\x5b\x93\xbe\x82\x3e\x91\x1f\xcd\x8d\x97\xb3\x89\x98\x2a\x92\x95\x71\x8a\x58\x42\x1b\x4b\x54\xc8\x35\xd1\x4c\x70\x6f\xb1\x00\x36\x00\xfc\x04\x3e\x09\xcd\x00\x78\x06\xb5\x54\xa6\x19\x9b\xa2\x21\x42\x4e\x61\xb9\x7c\x75\x4a\x60\x24\x71\xd0\x2b\x99\x77\x4b\xa6\x44\x85\x92\xc5\xba\x3b\x15\x8c\x36\x3b\xad\x97\x66\x6e\xa4\x10\x96\xcb\xc5\x02\xfc\x2b\xfc\x34\x41\xa5\xfd\xdf\xae\x2e\xfc\x4b\xa2\x47\x6e\xd8\x31\xf7\x5e\x19\xa6\xc7\x3f\x70\xf0\xae\x51\x6b\xc6\x87\xca\x03\x1f\x96\xcb\xd3\x80\xbc\x3a\x0d\x22\x76\x00\xe3\xc6\x24\x7e\xac\x7d\xc9\xd4\xc7\x98\xf8\xa3\xe3\xd1\x1b\x93\xb8\xc8\xda\xf7\xa8\x67\x42\xde\x81\x95\x50\x6f\xf0\x69\x30\x89\x4a\x9e\xac\xf8\x9f\x26\xfd\x76\xb9\x07\x56\x79\xe2\x2a\x07\x33\x02\x03\x42\x11\x1c\x54\xc0\x78\x05\xb7\x52\xd0\x4a\x67\x64\x3a\x30\xda\xf3\xb8\xc3\xa1\x6d\x27\x29\x3d\x37\x5a\xcd\x18\xd5\xa3\x2e\x1c\x77\x3a\x7f\x7a\xe9\xbd\x3a\x0d\x28\x9b\x56\xca\x4f\x16\xa2\x52\xa0\x53\xd3\x57\x89\x93\xd5\x91\x5b\x1d\x07\x42\x8e\x13\xa0\xcc\xad\x07\xc9\x92\x7a\xe9\xda\xaa\xcc\x65\xc7\xa8\x47\x82\xf6\xbc\x58\x28\xed\x59\xc3\xb2\x67\xe5\xaa\xaf\x09\x33\xd1\x8c\x2b\xcb\x10\x21\xd8\x7f\xdb\x4a\x4b\x16\x23\x05\xaa\xdb\x12\x55\x2c\xb8\x32\x6b\xc2\xc5\x4c\x6e\x40\x66\x10\xdb\x52\x9e\x93\x39\x42\x42\x77\xa1\x97\xdb\x13\x27\x02\x52\x8b\xc6\xb4\x6d\xf2\xeb\xc9\x4a\x08\x7c\x20\x92\x19\x0b\x53\xff\xd7\xa3\xc3\x72\x8f\x26\x8f\x62\x7d\x1a\xec\x62\xa6\xe1\xbd\x23\x88\x7d\x41\xe7\x4f\x0a\x3a\xcd\x51\xb8\x44\x39\x66\x1a\x6e\x05\xe3\x19\x16\x3b\x28\x9b\xf2\xdb\x69\x82\x9d\xc4\x78\x3c\xd1\xa0\xe7\x31\xf6\xbc\x70\x84\xe1\x5d\x5f\xdc\x67\x59\xe6\x56\xb5\xd5\x8c\xe9\x70\xe4\x01\x27\x63\x93\xc1\xad\x9a\x6d\xa7\xa6\x89\x9e\xb5\x81\xa9\x59\xca\x9e\x27\xb8\x97\x67\x9b\x66\x2c\x19\xd7\x79\x40\xfb\xce\xd2\xbf\x0b\xc6\x5b\xe0\x69\x69\xd6\xde\xe4\x7c\x23\x1a\x69\x96\x81\x21\xd8\xd1\xf8\x9d\xe0\xda\xd1\x75\xf6\x5a\xd9\x0b\x31\x84\x08\xa7\x26\x77\x7f\xc9\x75\x55\x18\x61\xa8\xed\x1a\x45\x62\xd8\x4e\x34\x48\xd6\xd5\x64\x49\xbb\x01\x49\x11\x81\xa3\x3c\xf1\x40\xe2\xa7\x09\x93\x48\x7b\x5e\x7a\xb7\x43\x8e\x5a\x13\x2e\x62\xbb\xc3\x24\xfe\x40\xb1\x3f\x19\xae\x6c\xda\x99\x2b\x5c\x88\xe1\x85\xd1\x0b\x12\x12\xb3\xee\x4e\x1b\xb4\x89\xd9\xdd\xad\x54\x00\x19\xa8\x67\x8e\xde\x01\xea\xa4\x1d\x44\x55\xc6\x07\xa2\x5a\x53\x4b\xb1\xbd\xa2\x6f\xb9\xc1\xda\x56\x3c\x24\x7a\x02\x85\x67\x44\xf2\x6a\x85\x2d\xc5\xf6\x0a\xff\x8b\x48\xce\xf8\x53\x60\x8b\x52\x0a\x59\xad\xab\x23\xd9\x5e\xd9\x73\x47\xbf\x9f\xaa\xa7\x81\x13\xf1\xbf\x92\x70\xfe\xcd\x86\x7d\xc4\x93\xf1\x27\xad\x61\x8a\x52\x99\x62\x7b\x8f\xd4\x93\x55\xdd\x23\xad\x63\xd5\x0d\x82\x21\xd3\xa3\x49\xdf\x0f\xc5\x38\xf8\x87\x40\x7e\x77\x17\x7c\xce\x25\x06\x12\x23\x24\x0a\x55\xa0\xc9\x30\x30\x25\x77\xb6\xcc\x1f\x9c\x2e\xa6\xbc\x06\x4d\xe4\x10\x75\xcf\xfb\xd8\x8f\x08\xbf\xb3\xd5\x40\x11\xa1\xab\xb5\xbf\x05\xa0\x43\x31\x1e\x33\xfd\x05\x71\x76\x02\xd7\x11\x7e\x6d\xc7\xea\x01\xce\xe8\xbe\x6e\x7c\x6f\x24\xe1\x2a\x16\x52\x83\xc4\x29\xdb\xd7\x8f\x1f\x20\x20\x24\x65\x9c\x68\x21\xfd\x77\xa8\x89\x9f\xc9\xba\x4a\x44\xed\x2c\xe7\x4b\x22\x73\x29\x05\x9d\x84\x7b\xb9\x5b\x35\x1c\x89\x80\xaf\x1a\x84\x0f\xfb\xe7\xb6\xa9\x0f\xd5\x38\xbc\x23\xb7\x42\x5e\xb9\x94\x06\xcb\xa5\x5f\x43\xcd\xf8\x2a\xf5\xd7\x0b\xdd\x3b\xc2\x38\x68\xb9\x5f\x4d\x5a\x87\x1c\xe3\x37\x12\xa3\xaf\x1a\x87\x37\x44\xd2\x19\x91\xf8\x05\x12\x4c\x2a\xea\x9b\xc8\x2f\x69\xd3\xeb\xf2\xa7\xf7\xf0\xf6\xec\x60\xa0\x24\x6c\xfd\x4b\xc2\xdf\x9e\x7d\x13\x00\xe0\xbd\x46\x4e\x91\x3e\x15\x12\xe7\x09\xff\x6f\x07\x91\x70\x44\x38\x3f\x60\xe2\x48\x91\x78\xed\xf8\x3e\x31\x06\x0f\xba\x8b\xfe\x6b\xc1\x07\x6c\xb8\x4d\x93\x31\x37\x60\x1f\x14\xcf\x98\xb2\x1d\xc3\x08\xe9\x9e\x08\x16\x98\xe1\x5f\xa3\x64\x24\xf2\x13\x21\x17\x68\x0e\x4b\xd4\xfd\x41\xf3\xf6\x2b\xf2\x6c\xc0\x1e\xa7\xbe\x5e\x9f\xbb\x14\xf2\x90\x35\xce\x2a\x46\x86\xf5\xd3\xfb\x9a\x03\x78\x17\xfe\xdb\xf7\x1c\x4f\x03\xdb\x76\xae\x27\x3e\x0d\x06\x42\x8e\xab\xe9\x72\x5d\xab\xdf\x06\xd4\x37\xbf\x89\x26\x6e\xfc\x70\x6d\xf0\x5d\xda\xdf\x3b\x39\xdc\xa9\x1e\xe5\xce\xf6\x8b\x64\xc8\x69\x34\x87\xf7\x64\xfc\xb8\x7e\xf4\x2a\xb7\x34\x5d\x12\x4a\x25\x2a\xb5\x37\xbf\xb7\xe7\xe7\xe7\x07\x63\x76\x86\x53\x16\xa2\x6d\xfa\xee\xcd\xeb\x82\x28\x0d\x0a\x91\xef\xca\x69\xbb\x60\xda\xba\x6d\xbf\x4b\xbb\x7e\xb1\x00\x49\xf8\x10\xe1\x88\x3a\x24\xba\x3d\xf0\xdd\xed\x56\x2f\x9c\x60\x77\x47\xb3\xc9\x28\x11\xe7\xa7\xae\x66\x3c\x6d\xf7\x24\xb4\xce\x2b\x71\xb4\x9f\x9c\x6b\xec\xcb\xcd\xb8\xd9\x81\x58\xdd\xcc\xe3\xc7\x19\x77\xea\xde\xe0\x26\xef\x24\x48\x1c\x47\x2c\xb4\x0d\xd4\x20\x7f\xbd\xeb\xbd\xa2\x22\x9c\x8c\x91\x6b\x7f\x26\x99\xc6\x26\x25\x1a\x6f\xc4\xb5\x96\x8c\x0f\x9b\x8d\x15\x35\x8c\x7f\x5e\x23\x72\xff\x17\xdb\x87\x05\xef\xa4\xd3\xf9\x4b\xbb\x73\xdc\xee\x9c\xdc\x1c\xbf\xe8\x76\xfe\xdc\xed\xbc\x68\x77\xfe\xda\xed\x74\x3c\x58\x2e\x1b\xad\xd6\x69\xe0\x44\xec\xd0\x18\xd9\x7e\x5f\xd8\x7e\x4f\xd8\x6a\x2f\xa8\xdd\x03\xea\xe5\x55\xbc\xb5\x2d\x79\x54\x30\xfc\x60\x68\xe5\xcf\xe4\x36\xf9\x6f\x65\x9b\x59\xf9\x22\xc4\x04\x78\xf6\x22\xda\x95\x36\x1c\xcb\x5f\x53\x2f\x16\xa0\x34\xd1\x2c\x7c\x73\xf3\xee\x02\x9a\xee\xfe\xb7\xab\x0b\xf0\x02\x4a\xd4\xa8\x2f\x88\xa4\x01\x51\x0a\xb5\x0a\xa6\xc8\xa9\x90\x2a\xc8\xb6\x25\xe5\x73\xd4\xed\xbe\x0a\x42\xe5\x46\x6f\xdc\x68\x5f\x08\xad\xb4\x24\xb1\x3f\x66\xdc\x0f\x4d\x92\x1d\x90\x48\x61\xeb\xc0\x92\xf3\x2d\x31\x55\x22\x1f\xa9\x57\x22\xc7\xaf\x18\xc9\x5b\x95\x21\xb5\x5d\x14\x65\xa6\x1d\x35\xd3\x80\x6a\xf9\x12\x09\x9d\x37\x07\x13\xee\x16\xa0\xd9\x82\xc5\xb3\x07\x4e\x65\xaa\x4f\xdb\xac\x2f\xcc\x97\x8e\x60\x88\xd0\x8c\x90\xa7\x84\x2d\xe8\x94\xf9\x61\x9e\x8f\x2d\xa9\x4d\xc7\xe5\xdc\xd3\x8b\xe3\x0c\x2e\xdf\x0b\xcd\x06\xf3\xe6\xa2\x32\x4c\x34\xd3\x11\x76\xa1\x61\x5f\x17\x34\x9e\x57\xd3\xe2\xbd\xee\x82\xcd\x20\x4e\x99\xe5\xb2\x6e\xc6\x3c\x36\xcc\x71\x0b\xe6\x23\x46\xb1\xeb\xd6\xb4\x9a\xd0\x94\x49\x8c\x0f\xbb\xd0\xc8\x7c\xe2\xfb\x46\xe9\x8c\x65\xeb\x65\x19\xae\x25\xd1\x5f\xfc\x64\x73\x34\xe5\x9c\x25\xc5\x67\x2b\x41\x5a\xf5\x2d\x49\xe2\x23\xc9\x57\x23\x1f\xc7\x24\xde\x32\x90\xfa\x62\x38\x24\x52\xaf\x87\x51\x30\x65\xea\x56\x05\xb7\xca\xdc\xb4\x13\xa6\x36\x48\x6e\xd7\x62\x24\xcf\x40\xbb\x79\x3f\xec\x18\x01\xe6\x9a\x12\x59\x08\x3a\x17\x14\xd5\x19\xd1\x04\x7a\xf0\xfb\x1f\xc5\xcb\x8c\x74\x58\x4b\x93\x58\x59\xfc\x30\x22\x73\x94\xd0\x83\x6c\x17\x1c\xa2\x3e\x8f\xd0\xdc\xfe\x3c\x7f\x4b\x9b\x8d\x95\xcf\x75\x1a\xad\x0d\x16\x2f\x37\xcb\xfc\x3c\x06\x8d\x01\x36\x04\x57\x16\xcf\x7f\x6f\xac\x2a\x8b\xc6\xcc\x64\x3f\x9e\xa8\x51\x45\x30\x66\x7e\x63\x85\xb8\x12\xc1\x5b\x69\x95\xd5\x7e\x8e\xa4\x46\xc4\x06\xdb\x08\xef\xc9\x50\xf0\x9a\x70\x1b\x13\xa5\xba\xf0\x43\x39\x51\x7a\x28\xde\x54\xea\x9c\x53\x57\x25\x6f\xad\x12\x46\x11\x8b\x15\x6e\xa5\xd2\x71\xbd\x4a\x5b\x4a\xed\x8b\xfb\xad\x24\xbe\xa8\x96\x58\x73\xf6\x63\xb4\x6b\xc8\x1c\x40\xeb\x35\x62\x39\xdf\x88\xf4\x31\x4a\x52\xa9\x9d\xf8\xa0\xec\x2d\xce\x67\x45\xb9\xac\x42\xc3\xdc\x6d\x23\xc6\xef\x36\xdc\xf6\x82\xf1\xbb\x52\xb7\xcd\xa2\xb0\xce\x6d\x07\x52\x8c\x1d\x00\x46\x88\x7f\x2d\x26\x72\xa3\x56\x2e\xc7\x41\x8b\x95\xb9\x37\xf6\xbd\xdc\xa3\x30\xb4\xf3\x8d\x41\xff\x9c\x90\x88\xe9\x79\xf5\xce\x64\x0a\x12\x54\xdd\x7c\x2f\x76\xf3\xaf\x30\xb2\x79\x50\x8d\x58\x0c\xdf\xc3\x72\xa9\xe5\x04\x73\x9f\xb3\xa9\x34\x83\xbb\x9c\x7b\x28\x22\x21\xbb\x05\x59\x71\xf5\xaa\x13\x5d\x5b\x03\x27\x52\x1a\x12\x69\xf9\xe6\x07\x9b\x71\x5c\xb6\x4a\x47\x7e\x98\xe7\x9a\x8f\x24\xc3\x7f\x6b\x45\x86\x12\x91\xd7\xab\x52\x5d\x71\x57\xc0\x4a\xa4\x14\x33\x55\x87\xab\x75\xa8\x5a\x9d\x93\x36\x5f\x17\xcc\x0a\x57\x52\x3f\x4a\xd5\x81\xe0\xba\x4e\x0d\xc5\x3e\x63\x17\x8e\x3b\x8f\xe1\x1f\x21\x1f\x26\x1f\x97\x76\x20\x80\xe6\x3b\xa2\x47\x7e\x2c\x66\xcd\x92\x50\x80\xef\xe0\xf8\x39\x1c\xfb\x27\x2f\x5a\x2d\xf8\x0e\x4e\x5e\x1c\x22\xbb\x84\x82\x2b\x0d\x82\x5f\xa1\x31\x05\x7a\x50\x5d\x12\x98\x4b\x62\xa8\xa1\xe7\x36\x68\xb3\x2b\xff\x2c\x26\x9c\x32\x3e\x7c\x1d\x31\xe4\xfa\x0a\x43\xdd\x2c\xa9\xd6\x9c\x30\x3b\xf1\x0d\xb2\xe1\xc8\xb0\xb1\x56\x8f\xc9\x7d\xb3\x79\x74\xf5\xf6\x6f\x6f\x6e\x3e\xbe\xfe\xf5\xc2\x17\x13\x9d\x92\x34\x5b\xd0\xb6\x22\x7d\x2d\x62\x73\x7f\xf4\xcb\xaf\xbf\xde\x9c\x5f\xad\xd3\x3c\x87\x93\x4e\xa7\x55\xb0\xe9\x43\x5a\x4a\xf8\xb6\x2f\xe7\x8f\x52\xb9\xab\x5a\x7c\x07\x8d\xf8\xbe\x51\xac\x33\x1b\x40\x33\xc9\xb7\x65\x80\x40\x5e\xcb\xf8\x03\x56\x6a\xfd\xa6\x13\x2e\x0b\x14\x4e\x97\xa2\x88\xcb\x8c\x71\x2a\x66\x3e\xa1\xf4\x7c\x8a\x5c\x5f\x30\xa5\x91\xa3\x6c\x36\xa4\x9d\xd2\x78\x9e\xcd\x2e\x82\x22\x51\x11\x7a\xf6\x5c\x31\x65\xd9\x9b\x89\xa6\xc5\xe2\x79\x89\x75\xb6\xf4\xe9\x66\x73\xcc\x6e\x72\x8d\xba\x99\x55\x44\xad\x8a\x02\x70\x73\x5a\xb6\x23\x15\x4c\x5b\x96\xa9\x40\x26\x5a\x38\xbb\x5c\xac\x17\x4b\x8c\x47\x73\xc5\xc2\xca\xdc\xb2\x96\x31\xca\x23\x73\xcc\xf8\x07\x8c\x44\xc8\xf4\xbc\xb2\x92\x19\x93\xfb\x9c\xee\x45\xa7\x9c\x50\x62\x3c\x89\x14\x13\xbc\x2e\x9f\x18\x54\xcf\x98\xd2\x84\x87\xd8\x35\x3e\xfd\x98\xc4\xa2\x34\xe9\xb3\x88\x7d\xb6\x7b\x51\x9d\xc4\x2d\x21\x31\x17\xd3\x28\xdd\xfe\xf6\xd8\x94\xa7\x44\x34\x45\xb7\xdf\x25\x80\x94\x94\x48\x9b\xbe\xb1\x5e\xe2\xaf\x66\xb9\xfc\xe4\x96\x8e\xac\xef\x50\x05\xf5\xe6\xfe\x6d\x0e\x73\x52\xbb\xfd\x34\x41\x39\xf7\x57\x7a\x2c\x9b\xe7\xb5\xc3\x49\x6c\xf7\xed\xf1\xb0\xb4\xa3\xf3\x64\x72\xf3\xf6\xcd\x03\xf9\x2b\x7d\x9d\x2f\xa4\x40\x82\x41\x69\x43\xe9\xbf\x77\x56\xce\x9e\xaa\x49\x18\xa2\x52\x6f\x08\xa7\x11\xca\xa6\x2c\xdb\x34\xcc\xbe\x22\x0d\x84\x93\x48\x43\xaf\xd7\x83\xc6\x80\xb0\x08\x69\xa3\x7a\x97\x79\xba\x86\x90\xf4\xc7\xa8\x14\x19\xd6\x24\x81\xaf\xb7\x17\xb4\xcc\x2a\xe4\x66\x66\x0b\xfc\x9f\x41\x76\xc2\x5d\xfb\xf0\xd0\xe0\x5e\xbb\xb5\x7e\x02\x78\xd5\x56\x9c\xbf\x34\xc0\x9b\x59\x79\xb3\xca\x38\x6a\x36\xfe\x3f\xfb\x69\x93\xfd\xe9\xc5\xef\x8c\xfe\xf1\x3c\x1f\x73\x9f\x22\x37\x5a\x7e\x38\x32\xc7\xda\x2c\xae\x4a\xeb\xcd\xb2\x36\x54\x7a\x0d\xa0\xb7\x26\xb5\x51\x52\x91\xa4\x17\x5a\x7a\x3d\x62\xaa\x86\x90\xba\xf6\xd5\xa2\xf8\xf4\x50\x52\x6c\x1a\xf7\x43\x3f\x96\x22\x6e\x36\xcc\x62\x36\x5a\x2e\xba\xd3\x5f\x9e\x54\xba\xa0\x91\xf8\x7b\x3a\x9b\xd1\x46\xeb\x0f\xe8\x41\xfa\x77\xf2\x03\x92\x46\x0b\x7e\x84\x86\xe0\x0d\xe8\x42\x43\x0c\x06\x25\x75\x6b\x12\x0d\x3b\xcb\x9a\x92\xa8\xbc\x80\x2d\x1c\x3e\xf2\xc9\x2d\xb9\xaf\x08\x19\xe7\xd3\x83\x44\x94\xfb\x7d\x5a\xd5\x22\x4d\x64\x94\x93\xbb\xf6\x6b\x15\xb9\x31\xa4\x6b\xff\xad\x28\x3c\x5c\x3c\x75\x1f\xa4\xe7\xad\x4f\x50\x0f\xc7\xca\xeb\x8f\x82\x17\x18\xff\x09\x00\x00\xff\xff\x74\xe1\x19\x6c\x1b\x3c\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
