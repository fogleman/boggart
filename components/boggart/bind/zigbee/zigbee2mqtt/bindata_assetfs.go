// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package zigbee2mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x6d\x6f\xe3\xb8\x11\xfe\xbe\xbf\x62\xaa\x6e\x21\x1b\x38\x4b\x4e\xda\x6b\x0b\x9f\x95\xc3\x61\x93\xc3\x6e\x9b\x5d\x04\xbb\xe9\x16\xe8\xe1\x70\xa0\xc5\xb1\x45\x47\x26\xb5\x24\x6d\xc7\x35\xfc\xdf\x0f\x24\x25\x5b\x71\xac\x97\x73\x9c\xbd\x9c\x3f\x18\x14\x35\x9c\x97\xe7\x21\x87\xd4\x48\xeb\x35\x50\x1c\x33\x8e\xe0\xc5\x82\x6b\xe4\xda\x83\xcd\xe6\x15\x00\xc0\x7a\x0d\x6c\x0c\x81\x42\xad\x19\x9f\xa8\xbc\x77\x48\xd9\x02\xe2\x94\x28\x15\x79\x52\x2c\xbd\x0b\xdb\xbb\x7f\x27\x16\x69\x6f\x46\x7b\x67\xe7\x60\x5a\x6a\x56\xb4\xee\x55\xef\xec\xbc\x34\x66\x7f\xdc\xfd\x2f\x19\xe1\x98\xee\x49\x3c\x96\xd2\x4c\xa7\x78\x40\xca\x4a\x26\xe7\x17\xc6\xf7\xb3\x7f\x72\xf0\xde\x08\x3e\x66\x93\xb9\x24\x9a\x09\xee\x41\x00\x9b\xcd\x30\x4c\xce\x2b\x46\x96\x23\x48\x91\xc8\x31\xbb\xf7\x2e\x86\x21\x65\x8b\x03\x0e\x55\x74\x3f\xf0\xb3\xc0\xb4\xc2\xde\x58\xc8\x19\x48\x91\x62\xe4\x99\xa6\x07\x24\x36\x7e\x46\xde\xf7\x79\xa3\x00\xdf\x83\x19\xea\x44\xd0\xc8\xcb\x84\xd2\x1e\x30\x1a\x79\xdb\x7b\x87\x95\x5b\x03\x9a\x8c\x52\x2c\xdc\x71\x17\xf6\xbf\xa7\xb4\x64\x19\x52\xa0\xba\x27\x51\x65\x82\x2b\xb6\x40\xe0\x62\x29\x49\xe6\x81\xd2\x2b\xe3\xd3\x92\x51\x9d\x0c\xce\xfa\xfd\xbf\xd4\xd8\x70\x76\x12\x24\xb4\x49\x46\xd6\x0b\xe4\x8a\x0a\x6f\x67\xb4\x67\x66\xcc\xb9\xb7\x23\xf3\x33\x91\xcc\x78\x5f\xf0\xa8\x93\xa7\x6b\x4c\xe7\xad\xd5\x0d\xc3\xa6\x10\x8c\x8e\x16\x40\x8c\x04\x5d\xb5\xf1\xbc\x05\x60\x4e\x90\xee\x22\xba\x41\x39\x63\x1a\xa6\x82\x6d\xa7\xbb\x6e\x70\xa8\xac\xa7\x95\xa0\x15\x66\x3c\x9b\x6b\xd0\xab\x0c\x23\x2f\x4e\x30\xbe\x1b\x89\x7b\xaf\x80\x7a\xaa\x7a\x6a\xc9\x74\x9c\x78\xc0\xc9\x0c\x23\x2f\xb3\x6e\xf5\x9c\x5b\x66\xf6\x3e\xe8\x58\x18\x1a\x22\xcf\xac\x50\x97\x75\xf0\x0b\x74\x32\xc9\xb8\xde\xe5\x9f\xc0\x45\xf6\x2f\xc1\x78\x17\x3c\x2d\x0d\x6f\x9b\x0d\x58\xd3\x48\xd7\x6b\x40\x4e\x4d\x47\xd8\x32\xd8\x56\xb0\x34\x53\x0e\x47\x33\x75\x2d\x26\x90\xe2\x02\xd3\xe7\xe5\x49\x61\x8a\xb1\xb6\x98\xa7\x62\xd2\xcb\x2d\xe6\x3c\x99\xac\xd3\x33\x49\x4a\x8a\x14\x9c\xe4\xb9\x07\x12\xbf\xcc\x99\x44\x1a\x79\x45\xab\x61\xfd\x3f\x32\x2a\x32\x93\xbe\x0a\x5e\x29\x8e\xe6\x13\x6f\xcb\xec\x8e\xd2\x6b\x31\xb9\x36\xfe\x40\x2e\x62\xf8\x73\x5e\xa0\x4d\x70\xae\xe5\x6d\xc9\xdd\x81\x77\xe9\xe4\x1d\x70\xce\xda\x93\x5c\x64\x7c\x2c\xea\x3d\xb4\x12\xed\x1d\x7c\xc7\x0d\xb6\x76\xdb\x21\xe9\x09\x1d\x5d\x12\xc9\xeb\x1d\xb5\x12\xed\x1d\xfd\x2f\x91\x9c\xf1\x53\x62\x89\x52\x0a\x59\xef\xa3\x13\x69\xef\xe4\x95\x93\x3f\xce\xc5\x61\xe8\x54\xff\x51\x12\xc3\xff\xd8\x64\x84\x78\x3e\xfb\xa2\x35\x2c\x50\xaa\xd2\xc9\xe5\xb7\xa4\x88\x21\x81\x44\xe2\x38\xf2\x12\xad\x33\x35\x08\xc3\x09\xd3\xc9\x7c\x14\xc4\x62\x16\xfe\x5b\x20\xbf\xbb\x0b\xff\xbf\xb3\x14\x4a\x4c\x91\x28\x54\xa1\x26\x93\x70\xbd\x2e\xd1\xf6\xd9\xf9\x00\x9b\x8d\x07\x9a\xc8\x09\xea\xc8\xfb\x65\x94\x12\x7e\x67\x77\xd2\x43\x82\xc3\x90\x5c\xbc\x2c\x20\x63\x31\x9b\x31\xfd\x15\x70\x74\x86\x1e\x22\xf8\xc6\xf6\x35\x03\xb8\x95\x7b\x19\xf8\xdd\x4a\xc2\x55\x26\xa4\x06\x89\x0b\x76\xec\x3c\xdc\x8b\x50\x48\xca\x38\xd1\x42\x06\xef\x51\x93\x60\x6b\xe3\x63\x6e\xa2\xb5\xfe\xe7\x8c\xfc\x46\x0a\x3a\x8f\x8f\x9a\x2e\xf5\xe1\xe6\x8a\x5f\x44\x90\x9f\x8f\xcf\x2d\x8b\x00\xea\xe3\x7c\x4f\xa6\x42\x7e\x74\x29\x05\x36\x9b\xa0\x41\x9a\xf1\xb2\xf4\xef\x0f\xcd\x7b\xc2\x38\x68\x79\xdc\xd9\xac\x09\x19\xc6\x6f\x25\xa6\x2f\x22\xce\xb7\x44\xd2\x25\x91\xf8\x8c\x0b\xbc\x30\xf1\xa2\xd6\xf7\x07\xd4\x4b\x21\xef\xe0\xe6\x87\x0f\xf0\xee\xf2\xc9\x41\xe7\xea\x82\x1b\xc2\xdf\x5d\xbe\xa8\x00\xf1\x5e\x23\xa7\x48\x4f\x1d\xe9\x55\xae\xf7\xe5\x45\x1c\x27\x84\xf3\x13\x2c\xdc\x22\xd2\x37\x4e\xdf\x89\x63\xdc\x2b\xae\x05\xae\x4e\x55\x94\xde\xea\x1d\x3d\x06\x9d\x4b\xa6\x6c\xf5\x27\x45\x7a\x24\x32\x07\xdc\x0d\x3e\xa1\x64\x24\x0d\x72\xe5\xd7\x68\x0e\xed\xd4\x5d\xd8\x27\xf2\xd4\xa6\x73\xe4\xdb\x0e\x7b\xac\xff\xfd\xe7\xca\x8d\x90\xa7\xd8\xdb\xcb\x18\x18\x95\xa7\x9f\x23\x0e\xb0\xa6\x9a\x53\x7d\x3d\x69\x18\xda\x92\x5f\x45\x09\x32\x34\x8f\xa9\xad\xaa\x9b\x7b\x5d\xa5\xcb\x52\x73\xe7\xf3\x1f\xb1\x5a\x7c\x89\x0b\x16\xa3\x7a\x71\x75\xe2\xe6\x32\x2e\xd1\xc4\xf5\x3f\xbd\xa0\xdb\x54\xcc\x6d\x5c\x72\x43\x9d\xec\x20\xfd\x51\x32\xe4\x34\x5d\xc1\x07\x32\x6b\x5f\x69\x2d\x6b\x28\x12\x3b\xa1\x54\xa2\x52\x47\xe9\x78\x77\x75\x75\xf5\x24\x05\x6e\x66\xd8\x72\xe7\x51\xe3\xaf\x89\xd2\xa0\x10\x79\x9b\xd1\xf5\xe9\xa1\xb1\xc8\xdc\x54\x60\x5e\xaf\x41\x12\x3e\x41\x78\x4d\x5d\x54\x83\x08\x02\xd7\x54\x75\xd9\xa6\x05\xf1\x36\x45\xe6\x6a\x83\x82\x7a\xc3\x7c\xab\xd4\xb8\x37\x3e\x27\xfe\x07\x47\xdb\x31\x1a\x0c\xed\x4f\x18\x7e\xbb\xca\xda\x3b\x3e\x54\xb1\x64\x59\x51\x11\x27\x59\x96\xb2\xd8\x96\xff\xc2\x29\x59\x10\x77\xd3\xbb\xa0\x22\x9e\xcf\x90\xeb\x60\x29\x99\xc6\x0e\x25\x1a\x6f\xc5\x27\x2d\x19\x9f\x74\xfc\x92\x69\x33\x5f\x3e\x21\xf2\xe0\x47\x5b\x45\x04\xef\xbc\xdf\xff\x7b\xaf\x7f\xd6\xeb\x9f\xdf\x9e\x7d\x3b\xe8\xff\x6d\xd0\xff\xb6\xd7\xff\xc7\xa0\xdf\xf7\x60\xb3\xf1\xbb\xdd\x61\xe8\x4c\x34\x94\x0d\xea\xa7\x56\xf3\x8e\x53\xbb\xdb\x54\xee\x34\xc7\xec\x26\xa5\x9d\xa4\xf4\x92\xd2\xcc\xfc\xf2\x1b\x4a\xa5\x89\x66\xf1\xdb\xdb\xf7\xd7\xd0\x71\xed\xff\x7c\xbc\x06\x2f\xa4\x44\x25\x23\x41\x24\x0d\x89\x52\xa8\x55\xb8\x40\x4e\x85\x54\xe1\x36\x53\xaa\x80\xa3\xee\x8d\x54\x18\x2b\xd7\x7b\xeb\x7a\x47\x42\x68\xa5\x25\xc9\x82\x19\xe3\x41\x6c\xf2\xc5\x98\xa4\x0a\xbb\x27\xb4\xba\xcb\xd0\x85\x03\xbb\x9e\x7a\x07\x0e\xa3\x32\x55\x27\xc4\x24\x9c\xaa\x70\xfa\x65\x8e\x72\x15\x94\x60\x31\xbe\x4c\x9f\x03\x8b\x91\x32\x06\x2b\x09\x78\x16\x9b\x3b\xb4\xf7\x6c\x97\x68\xf8\x0a\xc6\xf3\xd8\x2b\xb9\x7f\x68\xde\x2d\x8e\x56\x59\x66\xbb\xac\x5e\x77\x8a\x84\xd3\x0d\x24\x12\xba\xea\x8c\xe7\xdc\xbe\x5a\x86\x4e\x17\xd6\xaf\xf6\x16\xbf\x39\xe3\xdb\xd2\xfc\xc1\x7d\xc0\x09\x4c\x10\x3a\x29\xf2\x42\xb0\x0b\xfd\xaa\x7c\xb1\xdb\x67\xac\xa8\xdd\x66\xaa\xb5\x17\x3f\x8e\x4b\xb8\xf9\x20\x34\x1b\xaf\x3a\xeb\xda\xac\x6b\x8f\x75\x03\xf0\xed\xcb\x01\xff\x9b\x7a\x59\xbc\xd7\x03\xb0\x19\xd6\x39\xb3\xd9\x34\x8d\x58\x65\x46\x39\xb6\x50\x9e\x30\x8a\x03\xc7\x54\xbd\xa0\x39\x86\x31\x3e\x19\x80\xbf\x25\xfa\xaf\x7e\xe5\x88\x4d\xf7\xbb\x2a\x5c\x2b\xb2\xf4\xe1\x3b\x7b\x67\xf2\xe2\xb7\x9d\x09\x6a\x1e\xc7\xa8\xd4\x5b\xc2\x69\x8a\xb2\x23\xf7\x27\x86\xf9\xb1\x31\x74\xa4\x59\x1e\xf3\x54\x43\x14\x45\xe0\x8f\x09\x4b\x91\xfa\x87\x84\xa1\x35\x8d\x6d\x29\x74\xf4\xc9\x60\x86\x4a\x91\x49\x0d\xca\x2d\x59\x6b\xc5\x58\x7b\xb6\x0e\x31\xb5\x71\x8f\xbf\x0e\xb8\xdc\x6f\xf8\x93\x41\x6e\xce\x5d\xde\x3e\x15\x78\x9f\x1c\x7f\x27\x84\x4f\x35\x6a\xfc\x1a\x00\xbe\x7a\x78\xf5\xe0\xf2\x75\xc7\xff\x73\xf1\x24\x0e\xf6\x53\x84\x9f\x18\xfd\xf9\x9b\x5d\x9f\x7b\xe5\xe7\x77\x83\x38\x31\x39\x68\x9b\xf7\x1e\xa5\x3d\xf3\x5b\x10\x59\x19\xc4\x18\xa2\x07\xd6\xfc\x6e\x75\xc0\x68\x65\x75\xc2\x54\x8d\x90\xd9\x0e\x20\x82\xf5\xe3\xe5\xfb\xdd\xab\x83\xeb\x0e\x83\x4c\x8a\xac\xe3\x1b\x72\xfc\xae\x5b\x7d\xc5\x17\x17\x95\x53\xc8\x58\xf9\xa9\x18\xc9\xa8\xdf\xfd\x19\x22\x28\xae\xf3\x8f\x26\xfc\x2e\x7c\x0f\xbe\xe0\x3e\x0c\xc0\x17\xe3\xb1\x5f\x39\x8b\x7f\x93\x8d\x05\x49\x3b\x07\xf9\x7c\xd4\xf5\x3a\x20\x53\x72\x5f\x31\xc5\xdd\x5c\x1c\xe7\xea\xdd\xf7\x4f\x55\xe0\xcf\x65\xba\x13\x75\xdf\x4e\x55\x89\x1a\xa7\x07\xf6\xff\xf0\xfd\x7c\xee\x0f\xf6\xd2\xe2\xe3\x70\xf6\x42\x2c\x5f\x17\xed\xed\xa1\x7c\x77\x6e\xfb\x35\x00\x00\xff\xff\xd3\xc4\x49\x76\x71\x27\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
