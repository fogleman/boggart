// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
package zigbee2mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x6b\x73\x1a\x39\xd6\xfe\x3e\xbf\xe2\xbc\xfd\x7a\x0b\xa8\x09\xdd\xd8\xb3\xd9\x9d\x22\x26\x53\x33\xb1\x67\x93\x5d\x27\xe3\xb5\x3d\xd9\xaa\x9d\x9a\x4a\x89\xd6\x01\x64\x37\x52\x47\x12\x60\x86\xe2\xbf\x6f\x49\xea\x0b\x98\xbe\x80\xc1\x59\x67\xf9\x90\xb4\xc5\xd1\xb9\x3c\x3a\xb7\x3e\xdd\x2c\x16\x40\x71\xc0\x38\x82\x17\x0a\xae\x91\x6b\x0f\x96\xcb\x6f\x4e\x29\x9b\x42\x18\x11\xa5\x7a\x9e\x14\x33\xef\xf5\x37\x00\x00\xab\xab\xa1\x88\xda\x63\xda\x3e\x3e\x01\x73\xa5\xc6\xe9\xd5\xbd\x6a\x1f\x9f\x24\xf4\x0f\xf7\xdc\x7f\x8a\x09\xc7\x68\xe5\xdb\x4d\x8a\x54\x8b\x75\x9a\x8c\x4e\x8a\x08\x7b\x9e\x26\xfd\x22\x4e\x19\xe5\x24\x4a\x19\x72\x32\x05\x4e\xa6\x6d\x4d\xfa\x0a\xfa\x44\x7e\x32\x17\x5e\xce\x26\x62\xaa\x48\x56\xc6\x29\x62\x09\x6d\x2c\x51\x21\xd7\x44\x33\xc1\xbd\xc5\x02\xd8\x00\xf0\x33\xf8\x24\x34\x0b\xe0\x19\xd4\x52\x99\x66\x6d\x8a\x86\x08\x39\x85\xe5\xf2\xf5\x29\x81\x91\xc4\x41\xaf\x64\xdf\x2d\x99\x12\x15\x4a\x16\xeb\xee\x54\x30\xda\xec\xb4\x5e\x99\xbd\x91\x42\x58\x2e\x17\x0b\xf0\xaf\xf0\xf3\x04\x95\xf6\x7f\xbd\xba\xf0\x2f\x89\x1e\xb9\x65\xc7\xdc\x7b\x6d\x98\x1e\x7f\xcf\xc1\xbb\x46\xad\x19\x1f\x2a\x0f\x7c\x58\x2e\x4f\x03\xf2\xfa\x34\x88\xd8\x01\x8c\x1b\x93\xf8\xb1\xf6\x25\x5b\x1f\x63\xe2\x0f\x8e\x47\x6f\x4c\xe2\x22\x6b\x3f\xa0\x9e\x09\x79\x07\x56\x42\xbd\xc1\xa7\xc1\x24\x2a\xf9\x66\xc5\xff\x34\xe9\xb7\xcb\x3d\xb0\xca\x13\x57\x39\x98\x15\x18\x10\x8a\xe0\xa0\x02\xc6\x2b\xb8\x95\x82\x56\xba\x23\xd3\x81\xd1\x9e\xc7\x1d\x0e\x6d\xbb\x49\xe9\xb9\xd1\x6a\xc6\xa8\x1e\x75\xe1\xb8\xd3\xf9\xd3\x2b\xef\xf5\x69\x40\xd9\xb4\x52\x7e\x72\x10\x95\x02\x9d\x9a\xbe\x4a\x9c\xac\x8e\xdc\xea\x38\x10\x72\x9c\x00\x65\x2e\x3d\x48\x8e\xd4\x4b\xcf\x56\x65\x2e\x3b\x46\x3d\x12\xb4\xe7\xc5\x42\x69\xcf\x1a\x96\x7d\x57\xae\xfa\x9a\x30\x13\xcd\xb8\x72\x0c\x11\x82\xfd\xb7\xad\xb4\x64\x31\x52\xa0\xba\x2d\x51\xc5\x82\x2b\x73\x26\x5c\xcc\xe4\x06\x64\x06\xb1\x2d\xe5\x39\x99\x23\x24\x74\x17\x7a\xb9\x3d\x71\x22\x20\xb5\x68\x4c\xdb\x26\xbf\x9e\xac\x84\xc0\x47\x22\x99\xb1\x30\xf5\x7f\x3d\x3a\x2c\xf7\x68\xf2\x28\xd6\xa7\xc1\x2e\x66\x1a\xde\x3b\x82\xd8\x17\x74\xfe\xa4\xa0\xd3\x1c\x85\x4b\x94\x63\xa6\xe1\x56\x30\x9e\x61\xb1\x83\xb2\x29\xbf\x9d\x36\xd8\x4d\x8c\xc7\x13\x0d\x7a\x1e\x63\xcf\x0b\x47\x18\xde\xf5\xc5\x7d\x96\x65\x6e\x55\x5b\xcd\x98\x0e\x47\x1e\x70\x32\x36\x19\xdc\xaa\xd9\x76\x6a\x9a\xe8\x59\x5b\x98\x9a\xa3\xec\x79\x82\x7b\x79\xb6\x69\xc6\x92\x71\x9d\x07\xb4\xef\x2c\xfd\xbb\x60\xbc\x05\x9e\x96\xe6\xec\x4d\xce\x37\xa2\x91\x66\x19\x18\x82\x1d\x8d\xdf\x09\xae\x1d\x5d\x67\xaf\x93\xbd\x10\x43\x88\x70\x6a\x72\xf7\x97\x3c\x57\x85\x11\x86\xda\x9e\x51\x24\x86\xed\x44\x83\xe4\x5c\x4d\x96\xb4\x05\x48\x8a\x08\x1c\xe5\x89\x07\x12\x3f\x4f\x98\x44\xda\xf3\xd2\xab\x1d\x72\xd4\x9a\x70\x11\xdb\x0a\x93\xf8\x03\xc5\xfe\x64\xb8\x52\xb4\x33\x57\xb8\x10\xc3\x0b\xa3\x17\x24\x24\xe6\xdc\x9d\x36\x68\x13\xb3\xbb\x5a\xe9\x00\x32\x50\xcf\x1c\xbd\x03\xd4\x49\x3b\x88\xaa\x8c\x0f\x44\xb5\xa6\x96\x62\x7b\x45\xdf\x71\x83\xb5\xed\x78\x48\xf4\x04\x0a\xcf\x88\xe4\xd5\x0a\x5b\x8a\xed\x15\xfe\x17\x91\x9c\xf1\xa7\xc0\x16\xa5\x14\xb2\x5a\x57\x47\xb2\xbd\xb2\xe7\x8e\x7e\x3f\x55\x4f\x03\x27\xe2\x7f\x25\xe1\xfc\x9b\x0d\xfb\x88\x27\xe3\xcf\x5a\xc3\x14\xa5\x32\xcd\xf6\x1e\xa9\x27\xeb\xba\x47\x5a\xc7\xaa\x1b\x04\x43\xa6\x47\x93\xbe\x1f\x8a\x71\xf0\x0f\x81\xfc\xee\x2e\xf8\x23\x97\x18\x48\x8c\x90\x28\x54\x81\x26\xc3\xc0\xb4\xdc\xd9\x31\x7f\x74\xba\x98\xf6\x1a\x34\x91\x43\xd4\x3d\xef\x53\x3f\x22\xfc\xce\x76\x03\x45\x84\xae\xd7\xfe\x1a\x80\x0e\xc5\x78\xcc\xf4\x17\xc4\xd9\x09\x5c\x47\xf8\x8d\x5d\xab\x07\x38\xa3\x7b\xde\xf8\xde\x48\xc2\x55\x2c\xa4\x06\x89\x53\xb6\xaf\x1f\x3f\x40\x40\x48\xca\x38\xd1\x42\xfa\xef\x51\x13\x3f\x93\x75\x95\x88\xda\x59\xce\x97\x44\xe6\x52\x0a\x3a\x09\xf7\x72\xb7\x6a\x38\x12\x01\xcf\x1a\x84\x8f\xfb\xe7\xb6\xa9\x0f\xd5\x38\xbc\x27\xb7\x42\x5e\xb9\x94\x06\xcb\xa5\x5f\x43\xcd\xf8\x2a\xf5\xf3\x85\xee\x3d\x61\x1c\xb4\xdc\xaf\x27\xad\x43\x8e\xf1\x1b\x89\xd1\xb3\xc6\xe1\x2d\x91\x74\x46\x24\x7e\x81\x04\x93\x8a\xfa\x2a\xf2\x4b\x3a\xf4\xba\xfc\xf1\x03\xbc\x3b\x3b\x18\x28\x09\x5b\xff\x92\xf0\x77\x67\x5f\x05\x00\x78\xaf\x91\x53\xa4\x4f\x85\xc4\x79\xc2\xff\xeb\x41\x24\x1c\x11\xce\x0f\x98\x38\x52\x24\xde\x38\xbe\x4f\x8c\xc1\x83\xe9\xa2\xff\x46\xf0\x01\x1b\x6e\x33\x64\xcc\x0d\xd8\x07\xc5\x33\xa6\xec\xc4\x30\x42\xba\x27\x82\x05\x66\xf8\xd7\x28\x19\x89\xfc\x44\xc8\x05\x9a\x9b\x25\xea\xfe\xa0\xf9\xf8\x15\x79\xb6\x60\x6f\xa7\x9e\xaf\xcf\x5d\x0a\x79\xc8\x1e\x67\x15\x23\xc3\xfa\xe9\x7d\xcd\x01\xbc\x0b\xff\xed\x67\x8e\xa7\x81\x1d\x3b\xd7\x13\x9f\x06\x03\x21\xc7\xd5\x74\xb9\xae\xd5\x4f\x03\xea\x87\xdf\x44\x13\xb7\x7e\xb8\x31\xf8\x2e\xe3\xef\x9d\x1c\xee\x54\x8f\x72\x67\xfb\x59\x32\xe4\x34\x9a\xc3\x07\x32\x7e\xdc\x3c\x7a\x95\x5b\x9a\x2e\x09\xa5\x12\x95\xda\x9b\xdf\xbb\xf3\xf3\xf3\x83\x31\x3b\xc3\x29\x0b\xd1\x0e\x7d\xf7\xe6\x75\x41\x94\x06\x85\xc8\x77\xe5\xb4\x5d\x30\x6d\x3d\xb6\xdf\x65\x5c\xbf\x58\x80\x24\x7c\x88\x70\x44\x1d\x12\xdd\x1e\xf8\xee\x72\xab\x07\x4e\xb0\xbb\xa3\xd9\x64\x94\x88\xf3\x53\x57\x33\x9e\xb6\x7b\x12\x5a\xe7\x95\x38\xda\x8f\xce\x35\xf6\xe5\x66\xdc\xec\x40\xac\x6e\xe6\xf1\xe3\x8c\xdb\x29\xcd\xbb\x4a\x98\xca\x34\xce\x78\x8d\xc8\x77\x49\xba\x56\xac\x7b\x68\x9c\x3c\x06\x21\x71\x1c\xb1\xd0\xce\x6c\x83\xfc\x89\xb2\xf7\x9a\x8a\x70\x32\x46\xae\xfd\x99\x64\x1a\x9b\x94\x68\xbc\x11\xd7\x5a\x32\x3e\x6c\x36\x56\x2c\x4f\xb5\xf0\x7f\xb6\xa3\x5f\xf0\x4e\x3a\x9d\xbf\xb4\x3b\xc7\xed\xce\xc9\xcd\xf1\xcb\x6e\xe7\xcf\xdd\xce\xcb\x76\xe7\xaf\xdd\x4e\xc7\x83\xe5\xb2\xd1\x6a\x9d\x06\x4e\xc4\xce\xa6\xef\x5e\x5f\xb6\x4d\xa3\x5b\x57\xba\xed\xb5\xd8\xaa\xba\xd5\x56\xb5\x7a\x79\x15\xcf\xa1\x4b\xbe\x2a\x58\x7e\xb0\xb4\xf2\x67\x72\x99\xfc\xb7\x52\x38\x57\xde\x71\x31\x29\x2b\x7b\xb4\xee\x5c\x94\x63\xf9\x83\xf7\xc5\x02\x94\x26\x9a\x85\x6f\x6f\xde\x5f\x40\xd3\x5d\xff\x7a\x75\x01\x5e\x40\x89\x1a\xf5\x05\x91\x34\x20\x4a\xa1\x56\xc1\x14\x39\x15\x52\x05\x59\xa1\x55\x3e\x47\xdd\xee\xab\x20\x54\x6e\xf5\xc6\xad\xf6\x85\xd0\x4a\x4b\x12\xfb\x63\xc6\xfd\xd0\x94\x8d\x01\x89\x14\xb6\x0e\x2c\x39\x2f\xf2\xa9\x12\xf9\x4a\xbd\x12\x39\x7e\xc5\x48\xde\xaa\x0c\xa9\xed\x82\x34\x33\xed\xa8\x99\xc6\x6b\xcb\x97\x48\xe8\xbc\x39\x98\x70\x77\x00\xcd\x16\x2c\xbe\x79\xe0\x54\xa6\x9f\xb6\x8f\x1f\x0a\x2b\x80\x23\x18\x22\x34\x23\xe4\x29\x61\x0b\x3a\x65\x7e\x98\x57\x18\x4b\x6a\x0b\x4c\x39\xf7\xf4\xc3\x71\x06\x97\x1f\x84\x66\x83\x79\x73\x51\x19\x26\x9a\xe9\x08\xbb\xd0\xb0\x0f\x40\x1a\x2f\xaa\x69\xf1\x5e\x77\xc1\x26\x28\xa7\xcc\x72\x59\xb7\x63\x1e\x1b\xe6\xb8\x05\xf3\x11\xa3\xd8\x75\x67\x5a\x4d\x68\x1a\x3f\xc6\x87\x5d\x68\x64\x3e\xf1\x5d\xa3\x74\xc7\xb2\xf5\xaa\x0c\xd7\x92\xe8\x2f\xfe\x66\x73\x35\xe5\x9c\xe7\xdc\x95\x20\xad\x7a\x3b\x26\xf1\x91\xe4\x3d\x98\x4f\x63\x12\x6f\x19\x48\x7d\x31\x1c\x12\xa9\xd7\xc3\x28\x98\x32\x75\xab\x82\x5b\x65\x2e\xda\x09\x53\x1b\x24\xb7\x6b\x31\x92\x67\xa0\xdd\xbc\x1f\x76\x8c\x00\xf3\x99\x12\x59\x08\x3a\x17\x14\xd5\x19\xd1\x04\x7a\xf0\xdb\xef\xc5\xc7\x8c\x74\x58\x4b\x93\x58\x59\xfc\x65\x44\xe6\x28\xa1\x07\x59\x91\x1d\xa2\x3e\x8f\xd0\x5c\xfe\x34\x7f\x47\x9b\x8d\x95\x17\x90\x1a\xad\x0d\x16\xaf\x36\x6f\x5c\xf2\x18\x34\x06\xd8\x10\x5c\x39\x3c\xff\x83\xb1\xaa\x2c\x1a\x33\x93\xfd\x78\xa2\x46\x15\xc1\x98\xf9\x8d\x15\xe2\x9a\x1e\x6f\x65\xf8\x57\xfb\x82\x95\x1a\x11\x1b\x6c\x23\xbc\x27\x43\xc1\x6b\xc2\x6d\x4c\x94\xea\xc2\xf7\xe5\x44\xe9\x6d\xfe\xa6\x52\xe7\x9c\xba\xbe\x7f\x6b\x95\x30\x8a\x58\xac\x70\x2b\x95\x8e\xeb\x55\xda\x52\x6a\x5f\xdc\x6f\x25\xf1\x65\xb5\xc4\x9a\xbb\x59\x46\xbb\x86\xcc\x01\xb4\xde\xf5\x96\xf3\x8d\x48\x1f\xa3\x24\x95\xda\x8d\x0f\x1a\xf9\xe2\x7c\x56\x94\xcb\x2a\x34\xcc\xdd\x36\x62\xfc\x6e\xc3\x6d\x2f\x18\xbf\x2b\x75\xdb\x2c\x0a\xeb\xdc\x76\x20\xc5\xd8\x01\x60\x84\xf8\xd7\x62\x22\x37\xba\xff\x72\x1c\xb4\x58\xd9\x7b\x63\x9f\x34\x3e\x0a\x43\xbb\xdf\x18\xf4\xcf\x09\x89\x98\x9e\x57\x57\x26\xd3\x90\xa0\xea\xe6\xb5\xd8\xed\xbf\xc2\xc8\xe6\x41\x35\x62\x31\x7c\x07\xcb\xa5\x96\x13\xcc\x7d\xce\xa6\xd2\x0c\xee\x72\xee\xa1\x88\x84\xec\x16\x64\xc5\xd5\x4f\x9d\xe8\xda\x1e\x38\x91\xd2\x90\x48\xcb\x8b\x1f\x6c\xc6\x71\xd9\x29\x1d\xf9\x61\x9e\x6b\x3e\x91\x0c\xff\xad\x15\x19\x4a\x44\x5e\xaf\x4a\x75\xc7\x5d\x01\x2b\x91\x52\xcc\x54\x1d\xae\xd6\xa1\x6a\x75\x4e\x06\x97\x5d\x30\x27\x5c\x49\xfd\x28\x55\x07\x82\xeb\x3a\x35\x14\xfb\x03\xbb\x70\xdc\x79\x0c\xff\x08\xf9\x30\x79\x5d\xb6\x03\x01\x34\xdf\x13\x3d\xf2\x63\x31\x6b\x96\x84\x02\x7c\x0b\xc7\x2f\xe0\xd8\x3f\x79\xd9\x6a\xc1\xb7\x70\xf2\xf2\x10\xd9\x25\x14\x5c\x69\x10\xfc\x0a\x8d\x29\xd0\x83\xea\x96\xc0\x7c\x24\x86\x1a\x7a\xae\x40\x9b\xaa\xfc\x93\x98\x70\xca\xf8\xf0\x4d\xc4\x90\xeb\x2b\x0c\x75\xb3\xa4\x5b\x73\xc2\xec\xc6\xb7\xc8\x86\x23\xc3\xc6\x5a\x3d\x26\xf7\xcd\xe6\xd1\xd5\xbb\xbf\xbd\xbd\xf9\xf4\xe6\x97\x0b\x5f\x4c\x74\x4a\xd2\x6c\x41\xdb\x8a\xf4\xb5\x88\xcd\xf5\xd1\xcf\xbf\xfc\x72\x73\x7e\xb5\x4e\xf3\x02\x4e\x3a\x9d\x56\x41\xd1\x87\xb4\x95\xf0\xed\xa4\xd1\x1f\xa5\x72\x57\xb5\xf8\x16\x1a\xf1\x7d\xa3\x58\x67\x36\x80\x66\x92\x6f\xcb\x00\x81\xbc\x97\xf1\x07\xac\xd4\xfa\x4d\x27\x5c\x16\x28\x9c\x1e\x45\x11\x97\x19\xe3\x54\xcc\x7c\x42\xe9\xf9\x14\xb9\xbe\x60\x4a\x23\x47\xd9\x6c\x48\xbb\xa5\xf1\x22\xdb\x5d\x04\x45\xa2\x22\xf4\xec\x7d\xc5\x94\x65\xcf\x5a\x9a\x16\x8b\x17\x25\xd6\xd9\xd6\xa7\x9b\xed\x31\xd5\xe4\x1a\x75\x33\xeb\x88\x5a\x15\x0d\xe0\xe6\xb6\xac\x22\x15\x6c\x5b\x96\xa9\x40\x26\x5a\x38\xbb\x5c\xac\x17\x4b\x8c\x47\x73\xc5\xc2\xca\xdc\xb2\x96\x31\xca\x23\x73\xcc\xf8\x47\x8c\x44\xc8\xf4\xbc\xb2\x93\x19\x93\xfb\x9c\xee\x65\xa7\x9c\x50\x62\x3c\x89\x14\x13\xbc\x2e\x9f\x18\x54\xcf\x98\xd2\x84\x87\xd8\x35\x3e\xfd\x98\xc4\xa2\x34\xe9\xb3\x88\xfd\x61\x6b\x51\x9d\xc4\x2d\x21\x31\x1f\xa6\x51\xba\xfa\xf6\xd8\x94\xa7\x44\x34\x45\x57\xef\x12\x40\x4a\x5a\xa4\x4d\xdf\x58\x6f\xf1\x57\xb3\xdc\xe6\xb4\x6c\xbd\x42\x15\xf4\x9b\xfb\x8f\x39\xcc\x9d\xda\xed\xe7\x09\xca\xb9\xbf\x32\x63\xd9\xbc\x5f\x3b\x9c\xc4\x76\xdf\xde\x1e\x96\x4e\x74\x9e\x4c\x6e\x3e\xbe\x79\x20\x7f\x65\xae\xf3\x85\x14\x48\x30\x28\x1d\x28\xfd\xf7\xee\x95\xb3\x6f\xd5\x24\x0c\x51\xa9\xb7\x84\xd3\x08\x65\x53\x96\x15\x0d\x53\x57\xa4\x81\x70\x12\x69\xe8\xf5\x7a\xd0\x18\x10\x16\x21\x6d\x54\x57\x99\xa7\x1b\x08\x49\x7f\x8c\x4a\x91\x61\x4d\x12\x78\xbe\xb3\xa0\x65\xd6\x21\x37\x33\x5b\xe0\xff\x0c\xb2\x13\xee\xc6\x87\x87\x06\xf7\xda\x9d\xf5\x13\xc0\xab\xb6\xe2\xfc\xa5\x01\xde\xcc\xca\x9b\x5d\xc6\x51\xb3\xf1\xff\xd9\x8f\xb5\xec\x8f\x49\x7e\x63\xf4\xf7\x17\xf9\x9a\x7b\xb9\xba\xd1\xf2\xc3\x91\xb9\xad\xcd\xe2\xaa\xb4\xdf\x2c\x1b\x43\xa5\x9f\x01\xf4\xd6\xa4\x36\x4a\x3a\x92\xf4\x83\x96\x5e\x8f\x98\xaa\x21\xa4\x6e\x7c\xb5\x28\xbe\x7b\x28\x69\x36\x8d\xfb\xa1\x1f\x4b\x11\x37\x1b\xe6\x30\x1b\x2d\x17\xdd\xe9\x6f\x69\x2a\x5d\xd0\x48\xfc\x2d\xdd\xcd\x68\xa3\xf5\x3b\xf4\x20\xfd\x3b\xf9\x49\x4c\xa3\x05\x3f\x40\x43\xf0\x06\x74\xa1\x21\x06\x83\x92\xbe\x35\x89\x86\x9d\x65\x4d\x49\x54\xde\xc0\x16\x2e\x1f\xf9\xe4\x96\xdc\x57\x84\x8c\xf3\xe9\x41\x22\xca\xfd\xe2\xae\xea\x90\x26\x32\xca\xc9\xdd\xf8\xb5\x8a\xdc\x18\xd2\xb5\xff\x56\x34\x1e\x2e\x9e\xba\x0f\xd2\xf3\xd6\x77\x50\x0f\xd7\xca\xfb\x8f\x82\x07\x18\xff\x09\x00\x00\xff\xff\xbe\xb8\x7e\xb8\xed\x3c\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
