// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package z_stack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x79\x6f\xdb\x38\x16\xff\x3f\x9f\xe2\xad\x36\x85\x64\x60\x2d\x39\xd9\xed\xce\xc0\xb5\x53\x74\xda\x0c\x5a\x20\x29\x82\x36\x53\x0c\x5a\x14\x01\x2d\x3e\xd9\x74\x65\x52\x25\xe9\x6b\x0c\x7f\xf7\x01\x75\xd8\xb2\x23\xc9\x56\xed\xb8\x93\x3f\x1c\x8a\x7c\xc7\xef\x1d\x7c\xbc\x16\x0b\xa0\x18\x30\x8e\x60\xf9\x82\x6b\xe4\xda\x82\xe5\xf2\xac\x43\xd9\x04\xfc\x90\x28\xd5\xb5\xa4\x98\x5a\x57\x67\x00\x00\xf9\x5e\x5f\x84\xcd\x11\x6d\x5e\x5c\x82\x69\xa9\x51\xd6\x9a\xa9\xe6\xc5\x65\x4a\xbf\xcd\x33\x7b\x88\x08\xc7\x30\x37\xfa\x98\x42\x33\x1d\xe2\x16\x45\x4c\x35\xb8\xbc\x5a\x2c\x80\x5d\xfc\xca\xc1\xfa\xcc\xfa\xbf\x21\x02\xc5\x09\xf3\x51\x59\xe0\xc2\x72\xd9\xf1\x06\x97\x05\x6c\x79\xc8\x21\x12\x19\xb0\x99\x75\xd5\xf1\x28\x9b\x6c\xa1\x28\xe8\xda\x00\x96\xb9\xa7\x40\x47\x20\xe4\x08\xa4\x08\xb1\x6b\x99\xa6\x05\xc4\xd7\x4c\xf0\xae\xf5\x32\x6d\x28\xd4\x9a\xf1\xbe\xb2\x60\x84\x7a\x20\x68\xd7\x8a\x84\xd2\x16\x30\xda\xb5\x56\x63\x8f\x05\xc7\xc2\x35\xe9\x85\x98\xc1\x48\x3e\xe2\xdf\xa6\xd2\x92\x45\x48\x81\xea\xa6\x44\x15\x09\xae\xd8\x04\x81\x8b\xa9\x24\x91\x05\x4a\xcf\x0d\x9e\x29\xa3\x7a\xd0\xbe\x68\xb5\x9e\x95\xc8\x4f\x74\x0c\x90\xd0\xaa\x71\x59\x3e\x98\x0a\xc8\x10\x8e\x68\xd3\xa4\xc1\xa5\xb5\x8e\xd6\x27\x22\x99\x41\x9c\xc5\x49\x0f\x0e\x93\x16\x8e\xf7\x12\xd5\xf1\xaa\x60\x1b\xde\x1d\x46\xf7\x04\x9d\x1f\xe4\x14\xba\x46\x7d\x87\x72\xc4\x34\x0c\x05\xe3\x2b\xec\x15\xca\x33\xfe\x4a\x82\x98\x88\xf1\x68\xac\x41\xcf\x23\xec\x5a\xfe\x00\xfd\x6f\x3d\x31\xb3\x32\xf7\x0d\x55\x53\x4d\x99\xf6\x07\x16\x70\x32\xc2\xae\x15\xc5\x30\x9a\x09\x0c\x93\x7d\x1b\x1d\x13\xe3\xda\xae\x25\xb8\x05\x06\x78\x00\xf8\x1d\x9c\x48\x32\xae\xc1\x4d\x08\x1f\x0c\x61\x03\x2c\x2d\x4d\x0c\x96\x4b\x88\x55\x22\x5d\x2c\x00\x39\x35\x1d\xde\x0e\xa3\x2a\xcd\xde\x11\xb2\x5a\x1e\xbf\xb9\x7e\x03\xc8\x4d\xde\xd1\xa3\x7a\x3c\xf1\x8c\x1b\x22\x7d\x50\xe3\x28\x12\x52\x9b\x82\xb9\x8b\x0b\xea\xc7\x2a\x06\x6e\x62\x14\x37\xaa\x62\x63\xb0\xa4\xa6\x1e\x12\x9b\xd4\x3a\x0c\x15\xee\x6d\x52\xea\xf1\x60\x03\x04\x2c\x97\x69\x6b\x2d\x8e\x32\xb5\xea\x89\xd1\xec\x0e\x47\x86\x27\x26\x7f\xb2\xac\x4a\xe1\x4f\x50\x2a\x26\x78\x95\xa6\x7a\xf9\x77\x2f\x09\x57\x71\x7a\x48\x9c\x30\x23\xbb\x4e\x1a\x2e\x16\x2b\x48\xee\x4a\xd2\x87\x54\xd0\x4e\x29\xc7\x9c\x47\x77\x52\xd0\xb1\xaf\x7f\x14\x7c\xca\x6e\xd2\xcf\xd9\x30\x6a\x1e\x99\xb4\x68\x9c\xce\x90\x4f\x89\xe6\x3a\x86\x4c\x5c\xc8\x63\xbe\x25\x43\x21\x3f\x60\x88\x24\x4e\x69\x77\x63\x8c\xf1\xfc\xd8\xe9\xcc\xba\x25\x8c\x83\x96\x18\xfe\x68\x84\x8c\x80\x7b\x89\xe1\x49\x51\xbf\x25\x92\x4e\x89\xc4\x83\x27\x47\x26\xe8\x48\x73\x63\x77\xbd\x49\xeb\x05\xe3\x81\x38\x5e\xb1\x78\x13\xef\x64\xe3\xa5\xa1\xae\x23\x0c\x10\x37\xd9\x09\x3f\xe8\x64\x52\x9d\x2e\x8c\x29\x6e\xa5\x89\x3e\x08\x78\x2c\xe0\x67\x20\x7f\x77\x7d\x7d\x0d\x84\x52\x89\x4a\xfd\x90\x01\x0c\x11\x1f\x52\x01\xa7\xca\x3d\x8e\x7a\x2a\xe4\xb7\xe3\xa5\xdf\xfb\x54\xe0\xdd\xab\xf7\xf0\xee\x4d\x5d\x3f\xa4\x70\xdc\x88\xf0\x07\xb6\x7b\x69\x3f\x66\x14\x33\xe0\x38\xd3\xc8\x29\xd2\x03\x2d\xc8\xc4\x3c\xfc\x44\x53\xfc\x01\xe1\xbc\x7e\x35\xcf\x4c\x48\xd9\x4f\x95\x8a\xf1\x1e\x53\x1d\x2f\x13\xdf\x71\xa6\x19\x09\xd9\x5f\xc4\x1c\x9c\x93\x2d\x6c\x4d\x57\xac\x61\xb9\x8c\x33\xb3\xf3\x98\x90\x90\xe5\xb6\xa2\x5c\x68\x58\x75\xed\xb1\x17\x3d\xd4\x55\x1d\xaf\xe2\x28\xd9\xf1\xe2\xd3\x7c\xc1\xad\x82\x17\x08\x39\x2a\xe8\xdf\x7d\x21\x40\x34\x49\xfa\x0f\xbb\x1a\xa8\xba\x16\xa8\x8c\x6a\x47\x0f\x1e\xe7\xf5\x76\x91\xad\x3a\xb9\xe7\xf9\x0b\x2b\xf4\xbe\xcc\xaf\x49\x44\x7a\x2c\x64\x9a\x61\x7d\xe6\xa2\x45\x79\x5f\xde\x5b\xc2\xc7\x01\xf1\xf5\x58\xa2\x04\x5f\xd0\xfa\x12\x6e\x88\xd2\xa0\x10\xf9\x2e\xce\xf2\xf4\xac\xbc\xe3\xa8\xba\xdf\x58\x2c\x40\x12\xde\x47\x38\x4f\xd6\x67\x68\x77\x21\x5d\xaa\x4b\xe7\xfa\x8e\x8c\x88\xa7\x66\x2a\xce\x4d\x73\xe2\xd5\xbe\xcb\xe6\x26\xb7\xc9\x88\x94\xf5\x95\xfa\xa8\x25\xe3\xfd\xba\x22\xf2\x79\x51\x97\x37\x49\x0b\x73\x7e\xa9\xab\x3d\x3e\xae\x07\x60\xb5\x66\xcf\xfe\xb4\x56\xf2\xf2\xa9\xf2\x5a\xd0\x3d\xb6\x41\x9a\x5e\x75\x94\x2f\x59\x94\x5d\x26\x90\x28\x0a\x99\x1f\x97\x4c\x6f\x48\x26\x24\x19\xb4\xae\xa8\xf0\xc7\x23\xe4\xda\x9d\x4a\xa6\xd1\xa1\x44\xe3\xbd\x48\x30\x3b\x76\xce\x24\x93\x6b\x1f\x11\xb9\xfb\xbb\x90\x23\xa2\xc1\xba\x6c\xb5\xfe\xdf\x6c\x5d\x34\x5b\x97\xf7\x17\xcf\xdb\xad\xff\xb5\x5b\xcf\x3f\xb7\x7e\x69\xb7\x5a\x16\x2c\x97\x76\xa3\xd1\xf1\x12\x15\x57\xe5\x48\xcb\xd3\xb2\xba\x62\x96\x56\xcb\xc2\x4a\xb9\x75\x6d\x9b\xfb\x4c\x9b\xe9\xbf\xb5\xce\xb3\xdc\x95\xb7\x99\x1d\x56\x06\x64\xb1\x88\xf7\xb1\xcc\x7f\x7b\x7f\x7b\x03\x4e\xd2\xfe\xe3\xc3\x0d\x58\x1e\x25\x6a\xd0\x13\x44\x52\x8f\x28\x85\x5a\x79\x13\xe4\x54\x48\xe5\xad\x4a\xad\x32\x0b\x70\xb3\xa7\x3c\x5f\x25\xbd\xf7\x49\x6f\x4f\x08\xad\xb4\x24\x91\x3b\x62\xdc\xf5\x4d\x09\x0b\x48\xa8\xb0\x71\x44\xad\xeb\x12\x9f\x01\x58\xf7\x54\x03\x28\xf6\xca\x50\x1d\xd1\x27\xde\x50\x79\xc3\xef\x63\x94\x73\x37\xe7\x16\x83\x65\xf8\x14\xbe\xe8\x29\xa3\xb0\x34\x00\x4f\xa2\x73\xed\xed\x2d\xdd\xb9\x30\x9c\x40\x79\x6a\x7b\x69\xec\x37\xd5\x27\x73\x64\xaf\x2a\xb2\x9a\x5d\xe7\x4e\x56\x50\x1a\xae\x44\x42\xe7\x4e\x30\xe6\xf1\x0b\x07\x38\x0d\x58\x9c\x6d\x4d\x72\x16\x00\xe1\x14\x5c\x94\x52\x48\x05\x4e\x1f\xc1\x09\x91\x67\x1d\x0d\x68\x35\x8a\x8a\xc0\x7a\xf1\x89\xe9\xe2\xb5\x27\x15\x51\x52\x32\x38\x4e\xe1\xee\xbd\xd0\x2c\x98\x3b\x8b\xd2\xb2\x19\xbf\x2c\xb5\xc1\xbe\x36\xb2\xec\xff\x94\xd3\xe1\x4c\xb7\x21\x2e\x8f\x09\x80\xe5\xb2\x8a\x7a\x1e\x19\xa1\xb8\x43\xe8\x80\x51\x6c\x27\xee\x2f\x27\x32\x1b\x33\xc6\xfb\x6d\xb0\x57\x91\xfb\xaf\x5d\x48\xbd\x6c\xbc\x28\xf2\x5b\x41\x59\xcd\x4d\xf1\x7c\xf7\x2a\x70\x6a\xec\xfb\xa8\xd4\x5b\xc2\x69\x88\xd2\x91\xdb\x71\x34\x7f\x2c\x00\x47\x9a\x6c\x1e\x87\x1a\xba\xdd\x2e\xd8\x01\x61\x21\x52\xbb\x88\x18\x9e\x28\x20\xd2\x1d\xa1\x52\xa4\x5f\xe1\xbf\x7f\x4e\x2c\x96\xc9\x59\x23\x71\x5c\x8a\x1b\xfe\x65\x3c\x37\xe6\x49\x99\x3d\x96\xf3\x3e\x26\xf1\x3b\xa2\xfb\xd4\x4e\x89\xa7\x70\xe0\xd9\xe6\xd7\xc6\xe7\xb9\x63\xff\x3b\x7b\x36\x85\xf8\x51\xe5\x0b\xa3\x5f\xed\x46\x7c\xf8\xed\xe3\xaa\x2a\x3d\x2a\x4a\xe6\x6f\x42\x64\x29\xe6\x00\xba\x1b\xc2\xed\x46\xb9\x7d\x18\xd3\xea\x01\x53\x15\x44\xa6\x58\x43\x17\x16\x8f\xeb\xd6\x8b\xb3\xc2\x69\x86\x6e\x24\x45\xe4\xd8\x26\x16\x76\x23\x99\x6c\xd9\x53\x51\x69\xc6\x18\x2d\x5f\x32\x4e\x46\xed\xc6\x57\xe8\x42\xf6\x9d\xbe\x02\xd9\x0d\x78\x09\xb6\xe0\x36\xb4\xc1\x16\x41\x60\x97\x26\x6d\x2d\x1d\x13\x12\x3a\x85\xe1\x7b\xd4\x75\xee\x92\x21\x99\x95\x64\x74\x92\x7a\x41\x2a\x3e\x79\x24\x2f\x73\xfe\x58\x86\x6b\xd2\xe4\x81\xbd\x8c\xd4\x80\x6e\xc7\xbf\xc5\xe3\x69\xaa\xb7\xb7\xaa\xe0\x63\x73\xb6\x4c\xcc\x7f\x67\xed\xd5\x96\x78\xbd\xab\xfa\x3b\x00\x00\xff\xff\x87\x8d\x1d\x32\x5d\x21\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
