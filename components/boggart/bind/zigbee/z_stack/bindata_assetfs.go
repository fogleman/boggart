// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package z_stack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x0c\x84\x2d\x6c\x03\xb5\x94\xb8\x97\xc2\x55\x02\xa4\xdd\x00\x5d\x60\x1b\x04\xed\xb6\x87\x5e\x0c\x5a\x1c\x59\xe3\x95\x49\x95\xa4\x5f\x15\xf4\xdf\x0b\xea\x61\xa9\x8e\xe4\xac\x5f\x8b\xf6\x92\x88\xa3\x99\xf9\xbe\xf9\x46\x1c\xd2\x69\x0a\x1c\x43\x12\x08\x4e\x20\x85\x41\x61\x1c\xc8\xb2\x1b\x9f\xd3\x0a\x82\x98\x69\x7d\xef\x28\xb9\x76\x1e\x6e\x00\x00\x9a\xd6\x40\xc6\xc3\x05\x1f\xde\x8d\xc0\x3e\xe9\x45\xf5\xb4\xd1\xc3\xbb\x51\xe9\xbf\x1f\xb3\x99\x24\x4c\x60\xdc\x78\xfb\xda\xc3\x90\x89\x71\xcf\x23\xf7\x8a\x46\x0f\x69\x0a\x74\xf7\xbd\x00\xe7\x4f\x9a\xfd\x88\x08\x1c\x57\x14\xa0\x76\xc0\x85\x2c\xf3\xbd\x68\xd4\x12\xd6\xa4\x1c\x23\x53\x21\x6d\x9c\x07\xdf\xe3\xb4\xda\x63\xd1\x62\xfa\x17\xb1\x4a\x9e\x16\x0c\xc3\xa6\x31\x56\x9e\xc5\x22\xff\x3b\xd4\x46\x51\x82\x1c\x38\x33\xac\xb0\x73\x33\x54\xa8\x13\x29\x34\xad\x10\x84\x5c\x2b\x96\x38\xa0\xcd\x36\xc6\x7b\x67\x4d\xdc\x44\xe3\xbb\xdb\xdb\x6f\x5a\x50\x0a\xa4\x08\x19\xef\x7a\xa7\xda\x5f\x94\x81\x15\xbf\x05\x1f\xda\x3e\x8d\x9c\x5a\xce\x3f\x98\x22\xcb\xae\x12\xd2\x44\xa7\x67\x8a\x97\x6f\xa6\xf1\xbd\x2e\xaa\x36\xe6\x40\x81\x53\xc9\xb7\x27\x15\xcf\x6b\x86\x2f\xa8\x16\x64\x60\x2e\x49\xec\x78\x76\x00\x36\x63\x43\x70\x93\x3c\x72\x62\x23\x21\xcb\x50\x58\xc5\x78\x9a\x02\xc6\x1a\x21\xcb\x38\xe9\x9d\x45\xf0\x83\x89\xbb\x05\x28\xa1\x48\x84\xd2\x6e\xc3\xf3\x4a\x7d\x9f\x6f\x0f\xf8\xf0\xf4\xf4\x04\x8c\x73\x85\x5a\x1f\x51\x72\x4e\xc2\x25\x44\x9c\x94\xc1\xa7\xd7\x54\x08\x72\xa8\x62\x81\x66\x2d\xd5\xe7\xf3\x8b\x7e\x2e\x13\xbd\x3c\x3e\xc3\x87\xf7\xc7\xd4\x5b\x52\x70\x13\x26\x26\x74\x6a\x03\x8f\x27\x8a\x1b\x83\x82\x23\x3f\x83\x71\x95\x62\xf2\x95\xa9\x07\x11\x13\x76\x9e\x9f\x40\xb9\x0c\xbd\xca\x27\xe5\x7b\x1d\x93\xc2\xf7\xf2\x21\xfc\x7f\x9d\xe0\xaf\x1b\xb0\xbf\xab\x0f\xcf\xed\x3a\xbe\x75\x24\x7c\x69\xf0\x4f\x2c\x61\x53\x8a\xc9\x10\xbe\x19\x7c\x85\x51\x9f\xa6\xa0\x98\x98\x21\xbc\x2b\x8e\x7f\x18\xdf\x83\x5b\xde\x04\xce\x19\x1f\x65\x3a\xb7\xd4\xf6\xf1\x0b\x66\x5e\x4b\xb4\x55\xb6\x0c\x7d\xd4\xbf\x19\x45\x62\x76\x6c\x8a\xa6\xbe\xff\x81\xfd\xb1\x77\x31\x6a\x2c\xcb\xc7\xf2\x5f\x8d\x79\xd3\xb8\x54\xda\x1e\x3b\x15\x91\x34\x05\x6d\x98\xa1\xe0\xe7\x4f\xbf\x7c\x84\x7e\xf1\xfc\xfb\xaf\x1f\xc1\xf1\x38\xd3\xd1\x54\x32\xc5\x3d\xa6\x35\x1a\xed\xad\x50\x70\xa9\xb4\xb7\xdb\x78\xda\xce\x8e\xe1\x54\x7b\x81\x2e\xac\x9f\x0a\xeb\x54\x4a\xa3\x8d\x62\x89\xbb\x20\xe1\x06\xf6\x83\x0e\x59\xac\x71\x70\x41\xd4\x7a\xc3\x57\x04\x6a\xcb\x61\x02\xed\xaa\xcc\xf5\x05\x35\xf1\xe6\xda\x9b\xff\xb5\x44\xb5\x75\x1b\xb2\x58\x2e\xf3\x6b\x68\x31\xd5\x16\xb0\xb3\x01\x57\xc1\xac\xd5\xde\xc3\x6e\xb4\xe1\x2b\x80\x97\xb5\x77\xf6\xfe\x32\xf0\x11\xcd\xa2\x98\x66\x91\x99\xe7\x68\xbb\xa5\x9b\xb0\xe0\xf3\x05\x71\x56\x2c\x26\xce\x8c\x54\x16\x65\xb7\xb8\xa4\x8e\x4a\x26\x7f\x4b\x81\x45\x1d\xd5\xaa\x03\xc0\xd7\x81\xa2\xc4\x80\xd9\x26\x78\xef\xb0\x24\x89\x29\x60\x86\xa4\xf0\xe6\x6c\xc5\x8a\x97\x8d\x33\xf5\x5d\x9f\xcb\x60\xb9\x40\x61\x06\xae\x42\xc6\xb7\xfd\x70\x29\x02\xeb\x0f\xfd\x01\xa4\x37\x7b\xd3\x90\x42\x60\x82\x83\x8b\x4a\x49\xa5\xa1\x3f\x43\xe8\xc7\x28\x2a\xc3\x00\x6e\x07\x6d\xd3\xb2\x3e\x6b\x72\xbf\xfc\xa8\x29\x53\x74\xcc\x56\x81\x6b\x78\x79\x96\x86\xc2\x6d\x3f\xed\x9c\xf8\xf9\x8f\xdc\x31\xf4\x9e\x6c\xae\xde\xb7\xdd\x7e\xb8\x31\x63\xe8\xd9\xc3\xa1\x20\x90\x65\x87\xbc\xb7\x89\x4d\x8a\x6f\x24\x8d\x88\xe3\xb8\x50\xbf\xdb\xc9\xde\x67\x48\xcc\xc6\xd0\xdb\x7d\xe2\xdf\xf5\x5a\xbd\xb3\xc1\x0f\x6d\xba\xb5\x9c\x3f\xaf\xad\x55\xac\xef\x15\x0d\x6e\x9c\x22\xff\x04\x00\x00\xff\xff\xb3\x77\xc6\x8c\x99\x10\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
