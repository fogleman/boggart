// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package z_stack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x6f\xdb\xb6\x17\x7f\xcf\xa7\x38\x7f\xfd\x33\x48\x06\x66\xa9\xc9\x5e\x06\xd7\x6a\xd1\xad\x01\x5a\xa0\x2d\x82\x34\xeb\xc3\x8a\x22\xa0\xc5\x23\x9b\xae\x4c\xaa\x24\x7d\x83\xa1\xef\x3e\x50\xa2\x6c\xd9\x96\xe4\xb8\x71\xbc\xf9\x21\xe1\xe5\x5c\x7e\xe7\x6a\x92\x5e\xad\x80\x62\xcc\x38\x82\x13\x09\xae\x91\x6b\x07\xb2\xec\xa2\x4f\xd9\x0c\xa2\x84\x28\x15\x3a\x52\xcc\x9d\x57\x17\x00\x00\xd5\xd5\x48\x24\xdd\x09\xed\x5e\x5d\x83\x19\xa9\x49\x39\x5a\xa8\xee\xd5\xb5\xa5\xdf\xe5\x59\x3c\xa4\x84\x63\x52\xd9\xdd\xa7\xd0\x4c\x27\xb8\x43\x91\x53\x8d\xae\x5f\xad\x56\xc0\xae\x7e\xe7\xe0\xfc\xcd\x86\x7f\x20\x02\xc5\x19\x8b\x50\x39\xe0\x43\x96\xf5\x83\xd1\x75\x0d\x5b\x15\x72\x82\x44\xc6\x6c\xe1\xbc\xea\x07\x94\xcd\x76\x50\xd4\x2c\x6d\x01\x2b\xdd\x53\xa3\x23\x16\x72\x02\x52\x24\x18\x3a\x66\xe8\x00\x89\x34\x13\x3c\x74\x5e\xdb\x81\x42\xad\x19\x1f\x2a\x07\x26\xa8\x47\x82\x86\x4e\x2a\x94\x76\x80\xd1\xd0\x59\xef\xed\x0b\xce\x85\x6b\x32\x48\xb0\x84\x51\x4c\xf2\xbf\x5d\xa5\x25\x4b\x91\x02\xd5\x5d\x89\x2a\x15\x5c\xb1\x19\x02\x17\x73\x49\x52\x07\x94\x5e\x1a\x3c\x73\x46\xf5\xa8\x77\xf5\xe2\xc5\x2f\x0d\xf2\x0b\x1d\x23\x24\xb4\x6d\x5f\x36\x6f\x5a\x01\x25\xc2\x09\xed\x9a\x34\xb8\x76\x36\xd1\xfa\x42\x24\x33\x88\xcb\x38\xe9\xd1\xd3\xa4\x25\xd3\x47\x89\xea\x07\x6d\xb0\x0d\xef\x01\xa3\x07\x82\x2e\x9f\xe4\x14\xba\x41\x7d\x8b\x72\xc2\x34\x8c\x05\xe3\x6b\xec\x2d\xca\xab\xfc\x31\xf8\x69\xce\xfd\x60\xb8\x21\xcb\x90\x1b\x6f\xd2\xd5\x0a\x30\x51\x08\x59\x46\x99\x5a\xaf\x70\x7a\x50\xf8\x01\xc7\x1c\x65\xd7\x87\x9b\xb7\x60\xf1\x1c\x63\x57\x2b\x81\xf9\x58\xc3\x13\xa4\x0f\x6a\x9a\xa6\x42\x6a\xd3\x96\x0e\x71\xe5\xe2\x19\x4f\xa7\x1a\xf4\x32\xc5\xd0\x89\x46\x18\x7d\x1f\x88\x85\x53\x26\xd4\x58\x75\xd5\x9c\xe9\x68\xe4\x00\x27\x13\x0c\x9d\x1c\xb8\xa9\xc3\x7c\x30\x33\xc9\x15\x3a\x82\x3b\x16\x01\xfe\x00\x2f\x95\x8c\xeb\x02\x8b\x35\xb5\x03\x8e\x96\x26\x0b\xb3\x0c\x72\x15\x15\xdf\x43\xf0\x28\xeb\x6c\xe8\x1e\x67\xd2\x26\x13\x2a\x20\x4e\x90\x09\x55\x3c\x39\x79\x7b\xe0\x9e\x90\x55\x16\xfe\x0c\xa5\x62\x82\xb7\x69\x3a\x2e\xff\xee\x25\xe1\x2a\x4f\x0f\x89\x33\x66\x64\x1f\x59\x5e\x25\x24\x7f\x2d\xe9\xce\x0a\x3a\x6b\x1d\xdd\x4a\x41\xa7\x91\xfe\x59\xf0\x96\xdd\xa4\x9f\xb7\x65\xd4\x32\x35\x69\xd1\x39\x9f\x21\x5f\x0a\xcd\xc7\x18\x32\xf3\xa1\x8a\xf9\x23\x19\x0b\x79\x87\x09\x92\x3c\xa5\xfd\xad\x3d\xc6\xab\x7b\xe7\x33\xeb\x23\x61\x1c\xb4\xc4\xe4\x67\x23\x64\x04\xdc\x4b\x4c\xce\x8a\xfa\x1d\x91\x74\x4e\x24\x3e\xb9\x38\x4a\x41\x27\xaa\x8d\xc3\xfd\xc6\xf6\x0b\xc6\x63\x71\xba\x66\xf1\x36\x3f\x2f\xc2\xfb\x9b\x9b\x1b\x20\x94\x4a\x54\xea\x58\x87\x18\x40\x3e\x43\xc4\x07\x2b\xe0\x5c\x9e\xe0\xa8\xe7\x42\x7e\x3f\x9d\x33\x3e\x59\x81\xb7\x6f\x3e\xc1\xfb\xb7\xc7\xfa\xc1\xc2\xf1\x53\xc2\x1f\xd8\x79\x8f\x1c\x25\x70\x5c\x68\xe4\x14\xe9\x13\x2d\x28\xc5\x3c\xfc\x8b\xa6\x44\x23\xc2\xf9\xf1\xbd\xa5\x34\xc1\xb2\x3f\x7b\x2a\xf6\x83\x96\x33\x71\x3f\xc8\xaf\x25\x35\xd7\xa3\xc0\x5c\x8a\x6a\xd6\x0f\xdf\x6c\x88\x26\xc5\xfa\xd3\xee\x38\x6d\xf7\x9b\xd6\x80\xf5\xf5\x68\x3f\x58\xbb\x9d\xa3\xed\x0a\x52\xe5\xaf\x6d\x3b\x8f\x65\xfe\x93\xa4\x64\xc0\x12\xa6\x19\x1e\xcf\x6c\xfb\x9e\x39\x12\x1f\xe2\x6d\x4e\x91\xd6\x0b\x53\xdb\x65\x69\xb5\x02\x49\xf8\x10\xe1\xb2\xb8\xaf\x43\x2f\x04\xdf\x5e\xdd\x9b\xb2\xed\x40\x54\xf2\xf4\xb7\xe2\x7c\x1b\x97\x37\x8f\xed\xc7\xdb\xdc\x26\x2a\x96\xf5\x8d\xfa\xac\x25\xe3\xc3\x63\x45\x54\x63\x73\x2c\x6f\x11\x1a\x73\x4c\x7b\x94\xf6\xe6\xf0\xb4\x57\x6f\x63\xe5\xd6\x56\xed\xce\x5b\x48\x65\x6a\x87\xf6\xdf\x46\xe7\x45\xe5\x1d\xc9\x64\x89\x53\x02\x59\xad\x40\x69\xa2\x59\xf4\xee\xfe\xe3\x07\xf0\x8a\xf1\x5f\x77\x1f\xc0\x09\x28\x51\xa3\x81\x20\x92\x06\x44\x29\xd4\x2a\x98\x21\xa7\x42\xaa\x60\x5d\xf6\xca\x74\xb8\xee\x40\x05\x91\x2a\x56\xef\x8b\xd5\x81\x10\x5a\x69\x49\x52\x7f\xc2\xb8\x1f\x99\x72\x8a\x49\xa2\xb0\x73\x42\xad\x9b\x76\x53\x02\xd8\xac\xb4\x03\xa8\xf7\xca\x58\x9d\xd0\x27\xc1\x58\x05\xe3\x1f\x53\x94\x4b\xbf\xe2\x16\x83\x65\xfc\x1c\xbe\x18\x28\xa3\xb0\x31\x00\xcf\xa2\x73\xe3\xed\x1d\xdd\x95\x30\x9c\x41\xb9\xb5\xbd\x31\xf6\xdb\xea\x8b\x1a\x51\x91\x64\x69\xf9\x02\x41\xd2\x34\x61\x11\xd1\x4c\xf0\x60\x4c\x66\xa4\xd8\xac\x7c\x51\x5d\x7a\x54\x44\xd3\x09\x72\xdd\xf1\x25\x12\xba\xf4\xe2\x29\xcf\x9f\x0d\xc1\xeb\xc0\xea\x62\xa7\xc8\x59\x0c\x84\x53\xf0\x51\x4a\x21\x15\x78\x43\x04\x2f\x41\x5e\x2e\x74\xe0\x45\xa7\xae\x09\x6c\x9a\x70\x4e\x97\xf7\x60\x2b\xa2\xa1\x65\x70\x9c\xc3\xed\x27\xa1\x59\xbc\xf4\x56\x8d\xed\x2c\x7f\xae\xed\x81\x7b\x63\x64\xb9\xbf\x36\xd3\xe1\x42\xf7\xc0\x35\x9d\xaf\x00\x90\x65\x6d\xd4\xcb\xd4\x08\xc5\x03\x42\x47\x8c\x62\xaf\x70\x7f\x33\x91\x39\x24\x30\x3e\xec\x81\xbb\x8e\xdc\x6f\x6e\x2d\x75\xd6\x79\x59\xe7\xb7\x9a\xb6\x5a\x29\xf1\xea\xf2\x3a\x70\x6a\x1a\x45\xa8\xd4\x3b\xc2\x69\x82\xd2\x93\xbb\x71\x34\x1f\x16\x83\x27\x4d\x36\x4f\x13\x0d\x61\x18\x82\x1b\x13\x96\x20\x75\xeb\x88\xe1\x99\x02\x22\xfd\x09\x2a\x45\x86\x2d\xfe\xfb\xef\xc4\x22\x2b\x5e\xb9\x0a\xc7\x59\xdc\xf0\x3f\xe3\xb9\x29\x2f\xda\xec\xa9\x9c\xf7\xb9\x88\xdf\x09\xdd\xa7\x0e\x4a\x3c\x87\x03\x2f\xb6\x67\x5b\xd3\x4b\xcf\xfd\x7f\xf9\x5b\x04\xe4\x6f\xa8\x5f\x19\xfd\xe6\x76\xf2\xdb\xc5\x10\xd7\x5d\x69\xaf\x29\x99\xcf\x8c\xc8\x46\xcc\x31\x84\x5b\xc2\xdd\x4e\xb3\x7d\x98\xd3\xea\x11\x53\x2d\x44\xa6\x59\x43\x08\xab\xfd\xbe\xf5\xf2\xa2\xb6\xcc\xd0\x4f\xa5\x48\x3d\xd7\xc4\xc2\xed\x14\xc5\x56\xbe\x0c\x37\x66\x8c\xd1\xf2\xb5\xe4\x64\xd4\xed\x7c\x83\x10\xca\xb9\x7d\xf4\x75\x3b\xf0\x1a\x5c\xc1\x5d\xe8\x81\x2b\xe2\xd8\x6d\x4c\xda\xa3\x74\xcc\x48\xe2\xd5\x86\x6f\x6f\xe9\xd2\x27\x63\xb2\x68\xc8\xe8\x22\xf5\x62\x2b\xbe\xf8\xe5\xa9\xc9\xf9\x53\x99\x6c\x48\x8b\x5f\xad\x9a\x48\x0d\xe8\x5e\xfe\xb7\x7e\xdf\xa6\x7a\x6f\xa7\x0b\xee\x9b\xb3\x63\x62\x75\x5e\x8e\xfb\x41\xf1\x7d\x59\x39\x6b\xfe\x13\x00\x00\xff\xff\xd6\xf4\x43\x45\xb2\x1c\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
