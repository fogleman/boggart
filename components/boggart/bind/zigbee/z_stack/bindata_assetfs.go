// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package z_stack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xcd\x6e\xe2\x30\x10\xc7\xef\x3c\xc5\xc8\xda\x3d\x86\x90\x9c\x56\x28\x20\xb1\x2b\x0e\x7b\xe9\xa5\xb7\x5e\x2a\x13\x0f\x64\x54\xe3\x44\xb6\x95\x80\xac\xbc\x7b\x15\x62\x68\x4a\x9d\xf4\xe3\x02\xe3\x99\xf9\xcf\xc7\x4f\x13\xe7\x40\xe0\x9e\x14\x02\xcb\x4b\x65\x51\x59\x06\x6d\x3b\xcb\x04\xd5\x90\x4b\x6e\xcc\x8a\xe9\xb2\x61\xeb\x19\x00\xc0\xd0\x9b\x97\x32\x3a\x8a\x28\x49\xa1\xb3\xcc\xf1\x6a\x9d\x4c\x94\xa4\x3e\xff\x5e\x73\x7a\xae\xb8\x42\x39\x88\x7e\xcc\xb0\x64\x25\xde\x65\x5c\xb2\x8a\x74\xed\x1c\x50\xf2\x47\x01\x7b\xa2\xc3\x5f\x44\x10\x58\x53\x8e\x86\xc1\x1c\xda\x36\x8b\x8b\x34\x20\x1b\x8e\x2c\x91\xeb\x3d\x9d\xd8\x3a\x8b\x05\xd5\x77\x53\x04\x5c\xef\x06\xbb\xe2\x09\xf4\xb0\x7c\x27\xf1\x9a\xd9\x3f\x2e\xbf\x91\xb1\x9a\x2a\x14\x20\xb8\xe5\xbd\x5f\xd8\x48\xa3\xa9\x4a\x65\xa8\x46\x50\x65\xa3\x79\xc5\xc0\xd8\xb3\xc4\x15\x6b\x48\xd8\x62\x99\x2c\x16\xbf\x03\x5d\xfa\x4e\x05\x72\x31\x16\xd3\xe1\x80\x17\xbe\xd1\x7b\x40\xdb\x94\xfa\x05\xb8\x10\x1a\xcd\x0d\x9f\x2d\xbe\xa8\xff\xbf\xdd\x6e\x7f\x2c\xfe\xc7\x2b\xbe\x23\x49\x96\xf0\x53\x71\x16\x8f\xed\xd4\x69\x26\x48\xec\x4a\x71\x0e\xc7\x9c\x03\xcd\xd5\x01\xe1\x57\x7f\x3c\xb0\x5c\xc1\xdc\xdf\x51\x77\xf8\xe1\x7a\x93\x64\x45\xb7\x9c\x2f\x37\xf7\x6c\x37\x3d\x9d\x7e\xbb\x91\x31\x03\xea\x8e\xac\x97\x6e\xcc\xa3\xd5\xa4\x0e\xdf\x2d\x31\xe4\x3b\xa9\x1d\x87\xeb\x1c\xa0\x12\xa3\x34\xe2\x11\xbc\x59\x7c\x39\xf1\xc9\xcf\x6a\xf0\xf4\xa6\xff\xbb\xf5\x7c\x0d\x00\x00\xff\xff\x99\xe8\x7d\x9c\x91\x04\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
