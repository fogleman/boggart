// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package z_stack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5d\x6f\xdb\x36\x17\xbe\xcf\xaf\x38\xaf\xde\x0c\xb2\x81\x59\x6a\xb2\x9b\xc1\xb5\x5a\x74\x6b\x80\x16\x68\x8b\xa0\xcd\x7a\xb1\xa2\x08\x68\xf1\xc8\xa6\x2b\x93\x2a\x49\x3b\xf1\x04\xff\xf7\x81\x22\x65\xcb\x8e\x24\xc7\xb5\xe3\x2e\x17\x0e\x45\x9e\x8f\xe7\x7c\x92\xa2\xf2\x1c\x28\x26\x8c\x23\x78\xb1\xe0\x1a\xb9\xf6\x60\xb9\x3c\x1b\x50\x36\x87\x38\x25\x4a\x45\x9e\x14\x77\xde\x8b\x33\x00\x80\xea\x6c\x2c\xd2\xde\x94\xf6\x2e\x2e\xc1\x8c\xd4\xb4\x1c\xdd\xab\xde\xc5\xa5\xa3\xdf\xe6\xb9\xbf\xcd\x08\xc7\xb4\xb2\xfa\x90\x42\x33\x9d\xe2\x16\x45\x41\x35\xbe\x7c\x91\xe7\xc0\x2e\x7e\xe7\xe0\xfd\xcd\x46\x7f\x20\x02\xc5\x39\x8b\x51\x79\x10\xc0\x72\x39\x08\xc7\x97\x35\x6c\x55\xc8\x29\x12\x99\xb0\x7b\xef\xc5\x20\xa4\x6c\xbe\x85\xa2\x66\x6a\x03\x58\xe9\x9e\x1a\x1d\x89\x90\x53\x90\x22\xc5\xc8\x33\x43\x0f\x48\xac\x99\xe0\x91\xf7\xd2\x0d\x14\x6a\xcd\xf8\x48\x79\x30\x45\x3d\x16\x34\xf2\x32\xa1\xb4\x07\x8c\x46\xde\x6a\xed\xa1\xe0\x42\xb8\x26\xc3\x14\x4b\x18\xf6\xa1\xf8\xed\x29\x2d\x59\x86\x14\xa8\xee\x49\x54\x99\xe0\x8a\xcd\x11\xb8\xb8\x93\x24\xf3\x40\xe9\x85\xc1\x73\xc7\xa8\x1e\xf7\x2f\x9e\x3d\xfb\xa5\x41\xbe\xd5\x31\x46\x42\xdb\xd6\x65\xf3\xa2\x13\x50\x22\x9c\xd2\x9e\x49\x83\x4b\x6f\x1d\xad\xcf\x44\x32\x83\xb8\x8c\x93\x1e\x1f\x26\x2d\x9d\x3d\x4a\xd4\x20\x6c\x83\x6d\x78\x77\x18\x3d\x14\x74\x71\x90\x53\xe8\x1a\xf5\x35\xca\x29\xd3\x30\x11\x8c\xaf\xb0\xb7\x28\x2f\xf9\x5b\x09\x0a\x22\xc6\xb3\x99\x06\xbd\xc8\x30\xf2\xe2\x31\xc6\xdf\x86\xe2\xde\x2b\xdd\x37\x51\x3d\x75\xc7\x74\x3c\xf6\x80\x93\x29\x46\x5e\x56\xc0\xe8\x59\x18\x26\xfb\x36\x26\xe6\xc6\xb5\x91\x27\xb8\x07\x06\x78\x02\xf8\x1d\x3a\x99\x64\x5c\x43\x60\x09\x6f\x0d\x61\x17\x3c\x2d\x4d\x0c\x96\x4b\x28\x54\x22\xcd\x73\x40\x4e\xcd\x44\xb8\xc3\xa8\x56\xb3\x77\x84\x6c\x2f\x8f\xbf\xbb\x7a\x0d\xc8\x4d\xde\xd1\xa3\x7a\xdc\x7a\x26\x48\x91\xde\xaa\x59\x96\x09\xa9\x4d\xc3\xdc\xc5\x05\xfb\xc7\xaa\x00\x6e\x62\x54\x0c\xda\x62\x63\xb0\x38\x53\x0f\x89\x8d\xb3\x0e\x53\x85\x8f\x36\xc9\x79\x3c\xd9\x00\x01\xcb\xa5\x1b\xad\xc5\x51\xa6\x56\x33\x05\x9a\xdd\xe1\x28\xf1\x14\xe4\x4f\x96\x55\x0e\xfe\x1c\xa5\x62\x82\xb7\x69\xda\x2f\xff\x6e\x24\xe1\xaa\x48\x0f\x89\x73\x66\x64\xef\x93\x86\x79\xbe\x82\x14\xac\x24\x7d\x74\x82\x76\x4a\x39\x66\x1d\x5d\x4b\x41\x67\xb1\xfe\x51\xf0\x8e\xdd\xa4\x5f\x67\xc3\xa8\x45\x66\xd2\xa2\x7b\x3a\x43\x3e\x5b\xcd\xfb\x18\x32\x0f\xa0\x8a\xf9\x3d\x99\x08\xf9\x11\x53\x24\x45\x4a\x07\x1b\x6b\x8c\x57\xd7\x4e\x67\xd6\x7b\xc2\x38\x68\x89\xe9\x8f\x46\xc8\x08\xb8\x91\x98\x9e\x14\xf5\x1b\x22\xe9\x1d\x91\x78\x70\x71\x94\x82\x8e\x54\x1b\xbb\xfb\x8d\xeb\x17\x8c\x27\xe2\x78\xcd\xe2\x75\x71\x92\x2d\xb6\x86\x7d\x1d\x61\x80\x04\xf6\x24\x7c\xab\x6d\x51\x9d\x2e\x8c\x0e\xb7\xd2\x44\x1f\x04\xbc\x10\xf0\x33\x90\xbf\xbd\xba\xba\x02\x42\xa9\x44\xa5\x7e\xc8\x00\x86\x88\xb7\x4e\xc0\xa9\x72\x8f\xa3\xbe\x13\xf2\xdb\xf1\xd2\xef\x83\x13\x78\xfd\xea\x03\xbc\x7d\xbd\xaf\x1f\x1c\x9c\x20\x23\xfc\x96\xed\xde\xda\x8f\x19\xc5\x12\x38\xde\x6b\xe4\x14\xe9\x81\x16\x94\x62\x6e\x7f\xa2\x29\xf1\x98\x70\xbe\x7f\x37\x2f\x4d\x70\xec\xa7\x4a\xc5\xe2\x8c\xa9\x8e\x97\x89\x6f\x39\xd3\x8c\xa4\xec\x1f\x62\x5e\x9c\xed\x11\x76\x4f\x57\xac\x61\x05\x8c\x33\x73\xf2\x98\x93\x94\x55\x8e\xa2\x5c\x68\x58\x4d\x3d\xe2\x2c\x7a\xa8\xab\x06\x61\xcb\xab\xe4\x20\x2c\xde\xe6\x6b\x6e\x15\xc2\x44\xc8\x69\xcd\xfc\xee\x0b\x01\xa2\x89\x9d\x3f\xec\x6a\xa0\xed\x5a\xa0\x35\xaa\x03\x3d\x7e\x98\xd7\xdb\x4d\xb6\xed\xcd\xbd\xca\x5f\xdb\xa1\x1f\xcb\xfc\x27\xc9\xc8\x90\xa5\x4c\x33\xdc\x9f\xb9\x6e\x53\x6e\xe0\x6d\x4e\x91\xd6\x7b\x86\xb6\x3b\x86\x3c\x07\x49\xf8\x08\xe1\xdc\xee\x91\xd0\x8f\xc0\x6d\x97\x8d\xf5\xb6\x23\x2a\x45\x79\x38\x71\x81\x8b\xcb\xab\xc7\x6e\x5d\x9b\xdc\x26\x2a\x8e\xf5\x95\xfa\xa4\x25\xe3\xa3\x7d\x45\x54\x63\xb3\x2f\xaf\x0d\x8d\x79\x87\x78\x94\xf6\xe6\xf0\xb4\x57\x6f\x63\xe5\xd6\x56\xed\xd6\x15\x62\xe5\xd1\x0d\xdd\xbf\xb5\xce\xb3\xca\xf5\xab\xc9\x12\xaf\x04\x92\xe7\xc5\x99\x8a\xc5\x6f\x6e\xde\xbf\x83\x8e\x1d\xff\xf5\xf1\x1d\x78\x21\x25\x6a\x3c\x14\x44\xd2\x90\x28\x85\x5a\x85\x73\xe4\x54\x48\x15\xae\xca\x5e\x99\xcd\xa0\x37\x54\x61\xac\xec\xec\x8d\x9d\x1d\x0a\xa1\x95\x96\x24\x0b\xa6\x8c\x07\xb1\x29\xa7\x84\xa4\x0a\xbb\x47\xd4\xba\x6e\x37\x25\x80\xf5\x4c\x3b\x80\x7a\xaf\x4c\xd4\x11\x7d\x12\x4e\x54\x38\xf9\x3e\x43\xb9\x08\x2a\x6e\x31\x58\x26\x4f\xe1\x8b\xa1\x32\x0a\x1b\x03\xf0\x24\x3a\xd7\xde\xde\xd2\x5d\x09\xc3\x09\x94\x3b\xdb\x1b\x63\xbf\xa9\xde\xd6\x88\x8a\x25\xcb\xca\xeb\x31\x92\x65\x29\x8b\x8b\x43\x40\x38\x21\x73\x62\x17\x2b\x1b\xd5\x79\x87\x8a\x78\x36\x45\xae\xbb\x81\x44\x42\x17\x9d\x64\xc6\x8b\xdb\x76\xe8\x74\x21\x3f\xdb\x2a\x72\x96\x00\xe1\x14\x02\x94\x52\x48\x05\x9d\x11\x42\x27\x45\x5e\x4e\x74\xe1\x59\xb7\xae\x09\xac\x9b\x70\x41\x57\xf4\x60\x27\xa2\xa1\x65\x70\xbc\x83\xeb\x0f\x42\xb3\x64\xd1\xc9\x1b\xdb\x59\xf1\x95\xa3\x0f\xfe\x95\x91\xe5\xff\xda\x4c\x87\xf7\xba\x0f\xbe\xe9\x7c\x16\xc0\x72\xd9\x46\xbd\xc8\x8c\x50\xdc\x21\x74\xcc\x28\xf6\xad\xfb\x9b\x89\xcc\x21\x81\xf1\x51\x1f\xfc\x55\xe4\x7e\xf3\x6b\xa9\x97\xdd\xe7\x75\x7e\xab\x69\xab\x95\x12\xaf\x4e\xaf\x02\xa7\x66\x71\x8c\x4a\xbd\x21\x9c\xa6\x28\x3b\x72\x3b\x8e\xe6\x8f\x25\xd0\x91\x26\x9b\x67\xa9\x86\x28\x8a\xc0\x4f\x08\x4b\x91\xfa\x75\xc4\xf0\x44\x01\x91\xc1\x14\x95\x22\xa3\x16\xff\xfd\x77\x62\xb1\xb4\xe7\x5e\xeb\x38\x87\x1b\xfe\x67\x3c\x37\xe3\xb6\xcd\x1e\xcb\x79\x9f\x6c\xfc\x8e\xe8\x3e\xb5\x53\xe2\x29\x1c\x78\xb6\xf9\xb4\xf1\x78\xde\xf1\xff\x5f\x7e\xc2\x83\xe2\x82\xff\x0b\xa3\x5f\xfd\x6e\xf1\x22\x36\xc2\x55\x57\x7a\xd0\x94\xcc\xdf\x9c\xc8\x46\xcc\x09\x44\x1b\xc2\xfd\x6e\xb3\x7d\x58\xd0\xea\x31\x53\x2d\x44\xa6\x59\x43\x04\xf9\xc3\xbe\xf5\xfc\xac\xb6\xcc\x30\xc8\xa4\xc8\x3a\xbe\x89\x85\xdf\xb5\xc5\x56\x7e\xb6\x68\xcc\x18\xa3\xe5\x4b\xc9\xc9\xa8\xdf\xfd\x0a\x11\x94\xcf\xee\x8b\x84\xdf\x85\x97\xe0\x0b\xee\x43\x1f\x7c\x91\x24\x7e\x63\xd2\xee\xa5\x63\x4e\xd2\x4e\x6d\xf8\x1e\x4c\x9d\x07\x64\x42\xee\x1b\x32\xda\xa6\x5e\xe2\xc4\xdb\x0f\xb6\x4d\xce\x9f\xc9\x74\x4d\x6a\x3f\xf6\x36\x91\x1a\xd0\xfd\xe2\xb7\x7e\xdd\xa5\x7a\x7f\xab\x0b\x3e\x34\x67\xcb\xc4\xea\x73\x39\x1e\x84\x76\xbf\xac\x9c\x35\xff\x0d\x00\x00\xff\xff\x76\xac\xe3\x77\xe9\x1f\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
