// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package z_stack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xe3\x36\x0c\x7f\xef\xa7\x20\x8c\x1b\x92\x00\x8b\xdd\x66\x2f\x43\x96\x16\xe8\x76\x05\xee\x80\x6b\x51\x74\xdd\x3d\xec\x25\x50\x2c\x26\x66\xce\x91\x3c\x49\x71\x92\x19\xfe\xee\x83\xfc\x27\x71\x53\x3b\x6d\xfe\xdd\xee\xe5\xce\xa2\xc8\x1f\x7f\x24\x25\x8a\x69\x92\x00\xc7\x31\x09\x04\xc7\x97\xc2\xa0\x30\x0e\xa4\xe9\xc5\x80\x53\x0c\x7e\xc8\xb4\xbe\x76\x94\x5c\x38\x37\x17\x00\x00\x55\xa9\x2f\xc3\xee\x8c\x77\xaf\x7a\x60\xbf\xf4\xac\xfc\x5a\xea\xee\x55\xaf\xd0\xdf\xb6\x59\x0e\x23\x26\x30\xac\xec\xbe\xd6\x30\x64\x42\xdc\xd2\xc8\xb4\x82\xde\x4d\x92\x00\x5d\xfd\x2a\xc0\xf9\x9b\x26\xbf\x23\x02\xc7\x98\x7c\xd4\x0e\xb8\x90\xa6\x03\x2f\xe8\xd5\x98\x55\x29\x87\xc8\xd4\x98\x96\xce\xcd\xc0\xe3\x14\x6f\xb1\xa8\x11\xbd\x20\x56\xa6\xa7\xc6\x87\x61\xa3\x10\x4b\xcd\x7c\x91\xfd\xdb\xd5\x46\x51\x84\x1c\xb8\xe9\x2a\xd4\x91\x14\x9a\x62\x04\x21\x17\x8a\x45\x0e\x68\xb3\x0a\xf1\xda\x59\x10\x37\x41\xff\xea\xf2\xf2\xa7\x1a\xec\x1c\x3f\x40\xc6\x9b\xf6\x54\xfd\x46\x61\x58\xb2\x9a\xf1\xae\xad\x4e\xcf\xd9\x24\xf1\x2b\x53\x64\x59\x96\xe9\x33\xc1\xe1\x48\xe1\xfc\x4d\x98\x81\xd7\x44\xd5\xda\xec\x08\x70\x24\xf9\xea\xa0\xe0\xf9\x86\xe1\x23\xaa\x19\x19\x98\x4a\x12\x6b\x9e\x0d\x0e\xab\xb6\x63\x70\xa3\xcc\x72\x68\x2d\x21\x4d\x51\xd8\x8c\xf1\x24\x01\x0c\x35\x42\x9a\x72\xd2\x6b\x89\xe0\x3b\x81\x9b\x13\x50\xb8\x8a\x51\x69\x92\xd6\xcd\x91\xd1\x3e\x2b\x26\x74\x24\x95\x01\x85\x31\x59\xcc\x3d\x82\x2e\x69\xb8\x6b\x94\xa7\x02\xe4\xc0\xe8\xf6\xa8\x92\x92\x7c\xee\x9b\x43\xc8\x16\xa6\x90\xa6\xd0\x7e\x11\xc4\x2a\xb2\x65\xea\x9c\x97\xf8\xd7\xdc\xdb\x7b\x89\xc7\x2e\x54\x39\xde\xb3\xa9\x54\x4f\x18\x22\xcb\x8e\x94\xfb\x62\x8f\x44\x75\xef\xbc\x61\xdc\x33\x12\x60\x14\x86\x87\x54\xc0\x1a\x3f\x2b\x0c\xcf\xce\xf2\x13\x53\x7c\xc1\x14\x1e\x75\xb8\x4b\x90\x23\xcf\xf6\xfa\xda\xef\xba\xd7\x24\xc6\xf2\xf8\x4b\xfd\x31\x7b\xec\xe0\xf3\xdd\xdd\x1d\x30\xce\x15\x6a\xbd\x4f\xe0\x96\x84\x4b\x88\x38\x2c\x8c\xcf\x19\xb1\x40\xb3\x90\xea\xdb\xf1\x41\x3f\x14\x40\x8f\xb7\x0f\xf0\xf9\xe3\x3e\xf1\x16\x14\xdc\x88\x89\x21\x1d\xda\x98\xf7\x27\x8a\x4b\x83\x82\x23\x3f\x82\x71\x09\x31\xfc\xce\xd4\xfd\x80\x09\xb1\xdf\xdd\x2f\x29\x17\xa6\x67\x39\x52\x03\xaf\x61\x02\x18\x78\xd9\x90\x75\xd0\x3c\xc6\x0c\xcb\xe5\xff\xdf\x64\xf6\xba\x00\xdb\xb7\x7a\xf7\x3c\xb6\xb1\xaf\x6d\x09\xef\x35\xfe\x83\x45\x6c\x44\x21\x19\xc2\x37\x8d\xcf\x30\xc2\x25\x09\x28\x26\x26\x08\x1f\xf2\x61\x1e\xfa\xd7\xe0\x16\x73\xfd\x31\xed\xa3\x80\x73\x8b\xdc\xde\xbe\xa3\xe7\xd5\x58\xdb\xcc\x16\xa6\xb7\xfa\x4f\xa3\x48\x4c\xf6\x85\xa8\xe6\xf7\x07\xb8\x1f\x5b\x3f\x73\x2a\xcb\xe2\xb3\xf8\x6f\xe3\xf3\xa2\xf2\x13\xd1\xd6\xd8\x29\x89\x24\x09\x68\xc3\x0c\xf9\x9f\x9e\xef\xbf\x40\x3b\xff\xfe\xeb\xe9\x0b\x38\x1e\x67\x3a\x18\x49\xa6\xb8\xc7\xb4\x46\xa3\xbd\x18\x05\x97\x4a\x7b\xeb\x8b\xa7\x6d\xef\xe8\x8e\xb4\xe7\xeb\x5c\xfa\x9c\x4b\x47\x52\x1a\x6d\x14\x8b\xdc\x19\x09\xd7\xb7\x07\x7a\xcc\x42\x8d\x9d\x13\x7a\xdd\x5c\xf8\x92\xc0\x46\xb2\x9b\x40\x7d\x56\xa6\xfa\x84\x39\xf1\xa6\xda\x9b\xfe\x33\x47\xb5\x72\x2b\x69\xb1\x5c\xa6\xe7\xc8\xc5\x48\x5b\x87\x8d\x05\x38\x8b\xcf\x4d\xb6\xb7\x7c\x57\xca\xf0\x1d\x9c\x17\xb1\x37\xd6\xfe\x34\xee\x03\x9a\x04\x21\x4d\x02\x33\xcd\xbc\xad\x97\x6e\xc4\xfc\x6f\x27\xf4\x13\xb3\x90\x38\x33\x52\x59\x2f\xeb\xc5\x29\xf3\xa8\x64\xf4\xaf\x14\x98\xc7\x51\xae\x1a\x1c\x0c\xb4\xaf\x28\x32\x60\x56\x11\x5e\x3b\x2c\x8a\x42\xf2\x99\x21\x29\xbc\x29\x8b\x59\xbe\x59\x79\x53\x3f\xb4\xb9\xf4\xe7\x33\x14\xa6\xe3\x2a\x64\x7c\xd5\x1e\xcf\x85\x6f\xf5\xa1\xdd\x81\xe4\x62\xab\x1b\xd2\x18\x98\xe0\xe0\xa2\x52\x52\x69\x68\x4f\x10\xda\x21\x8a\x52\xd0\x81\xcb\x4e\x5d\xb7\xdc\xbc\x35\x99\x5e\xf6\xd4\x14\x10\x0d\xbd\x55\xe0\x02\x1e\x1f\xa4\xa1\xf1\xaa\x9d\x34\x76\xfc\xec\x4f\x56\x7d\x68\xdd\x59\xac\xd6\xcf\xcd\x7a\xb8\x34\x7d\x68\xd9\xc7\x21\x27\x90\xa6\xbb\xb4\x57\x91\x05\xc5\x37\x40\x03\xe2\xd8\xcf\xb3\xdf\xac\x64\xe7\x19\x12\x93\x3e\xb4\xd6\x47\xfc\x97\x56\xad\x76\xda\xf9\xad\x2e\x6f\x35\xef\xcf\x6b\x69\x69\x3b\xf0\xf2\x02\x57\x5e\x91\xff\x02\x00\x00\xff\xff\xfb\xe1\xcd\xf7\x67\x14\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
