// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package z_stack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x5f\x6f\xe2\x38\x10\x7f\xef\xa7\x18\x45\x7b\x02\xa4\x23\x69\xb9\x97\x13\x47\x2b\xf5\x6e\x2b\xed\x4a\xdb\xaa\xea\xf5\xf6\xe1\x5e\x90\x89\x07\x32\x6c\xb0\x73\xb6\x09\x70\x51\xbe\xfb\xca\xf9\x03\x29\x4d\xd8\xf2\xaf\xfb\xd2\xc6\xe3\xf9\xcd\xfc\x66\xc6\x1e\xdb\x24\x09\x70\x1c\x93\x40\x70\x7c\x29\x0c\x0a\xe3\x40\x9a\x5e\x0c\x38\xc5\xe0\x87\x4c\xeb\x6b\x47\xc9\x85\x73\x73\x01\x00\x50\x95\xfa\x32\xec\xce\x78\xf7\xaa\x07\xf6\x4b\xcf\xca\xaf\xa5\xee\x5e\xf5\x0a\xfd\x6d\xcc\x72\x18\x31\x81\x61\x65\xf6\xb5\x86\x21\x13\xe2\x96\x46\xa6\x15\xf4\x6e\x92\x04\xe8\xea\x77\x01\xce\xbf\x34\xf9\x13\x11\x38\xc6\xe4\xa3\x76\xc0\x85\x34\x1d\x78\x41\xaf\x06\x56\xa5\x1c\x22\x53\x63\x5a\x3a\x37\x03\x8f\x53\xbc\xc5\xa2\x46\xf4\x82\x58\x99\x9e\x1a\x1f\x86\x8d\x42\x2c\x35\xf3\x41\xf6\xb7\xab\x8d\xa2\x08\x39\x70\xd3\x55\xa8\x23\x29\x34\xc5\x08\x42\x2e\x14\x8b\x1c\xd0\x66\x15\xe2\xb5\xb3\x20\x6e\x82\xfe\xd5\xe5\xe5\x2f\x35\xb6\x73\xfb\x01\x32\xde\x34\xa7\xea\x27\x0a\x60\xc9\x6a\xc6\xbb\xb6\x3a\x3d\x67\x93\xc4\xaf\x4c\x91\x65\x59\xa6\xcf\x04\x87\x5b\x0a\xe7\x3f\x34\x33\xf0\x9a\xa8\x5a\xcc\x8e\x00\x47\x92\xaf\x0e\x0a\x9e\x6f\x18\x3e\xa2\x9a\x91\x81\xa9\x24\xb1\xe6\xd9\xe0\xb0\x8a\x1d\x83\x1b\x65\xc8\xa1\x45\x42\x9a\xa2\xb0\x19\xe3\x49\x02\x18\x6a\x84\x34\xe5\xa4\xd7\x12\xc1\x77\x1a\x6e\x4e\x40\xe1\x2a\x46\xa5\x49\x5a\x37\x47\x46\xfb\xac\x98\xd0\x91\x54\x06\x14\xc6\x64\x6d\xee\x11\x74\x49\xc3\x5d\x5b\x79\x2a\x8c\x1c\x18\xdd\x1e\x55\x52\x92\xcf\x7d\x73\x08\xd9\x02\x0a\x69\x0a\xed\x17\x41\xac\x22\x5b\xa6\xce\x79\x89\x7f\xcd\xbd\xbd\x95\x78\xec\x42\x95\xe3\x3d\x9b\x4a\xf5\x84\x21\xb2\x6c\x49\xb9\x2f\xe6\x48\x54\xe7\xce\x1b\xc6\x3d\x23\x01\x46\x61\x78\x48\x05\x2c\xf8\x59\x61\x78\x76\x96\x9f\x98\xe2\x0b\xa6\xf0\xa8\xc5\x5d\x1a\x39\x72\x6d\xaf\xb7\xfd\xae\x7d\x4d\x62\x2c\x8f\xdf\xd4\x1f\xb3\xc3\x0e\x3e\xdf\xdd\xdd\x01\xe3\x5c\xa1\xd6\xfb\x04\x6e\x49\xb8\x84\x88\xc3\x02\x7c\xce\x88\x05\x9a\x85\x54\xdf\x8e\x0f\xfa\xa1\x30\xf4\x78\xfb\x00\x9f\x3f\xee\x13\x6f\x41\xc1\x8d\x98\x18\xd2\xa1\x8d\x79\x7f\xa2\xb8\x34\x28\x38\xf2\x23\x18\x97\x26\x86\xef\x4c\xdd\x0f\x98\x10\xfb\xed\xfd\x92\x72\x01\x3d\xcb\x92\x1a\x78\x0d\x37\x80\x81\x97\x5d\xb2\x0e\xba\x8f\x31\xc3\x72\xf9\xcf\xbb\x99\xbd\x2e\xc0\xf6\xae\xde\x7d\x1f\xdb\xe0\x6b\x5b\xc2\x5b\xc1\x7f\xb1\x88\x8d\x28\x24\x43\xb8\x3f\xb8\xe8\x49\x66\x15\xfd\x8c\xeb\x5f\x92\x80\x62\x62\x82\xf0\x21\x7f\x08\x40\xff\x1a\xdc\xe2\x4d\x70\x4c\xeb\x29\xcc\xb9\x45\x5d\x6e\xdf\xd0\x2f\x6b\xd0\xb6\x2a\x05\xf4\x56\xff\x6d\x14\x89\xc9\xbe\x26\xaa\xb5\xd9\x17\x9b\x97\xc6\x5e\x7f\xde\xe4\xfd\x7d\x76\xe7\xd6\x23\xab\x32\x2c\x3e\x8b\x7f\x1b\x9f\x17\x95\x07\xaa\x5d\x25\x4e\x49\x24\x49\x40\x1b\x66\xc8\xff\xf4\x7c\xff\x05\xda\xf9\xf7\x3f\x4f\x5f\xc0\xf1\x38\xd3\xc1\x48\x32\xc5\x3d\xa6\x35\x1a\xed\xc5\x28\xb8\x54\xda\x5b\x6f\x7b\x6d\x3b\x57\x77\xa4\x3d\x5f\xe7\xd2\xe7\x5c\x3a\x92\xd2\x68\xa3\x58\xe4\xce\x48\xb8\xbe\xdd\x4e\x63\x16\x6a\xec\x9c\xd0\xeb\xa6\xdd\x94\x04\x36\x92\xdd\x04\xea\xb3\x32\xd5\x27\xcc\x89\x37\xd5\xde\xf4\xbf\x39\xaa\x95\x5b\x49\x8b\xe5\x32\x3d\x47\x2e\x46\xda\x3a\x6c\x2c\xc0\x59\x7c\x6e\xb2\xbd\xe5\xbb\x52\x86\x77\x70\x5e\xc4\xde\x58\xfb\xd3\xb8\x0f\x68\x12\x84\x34\x09\xcc\x34\xf3\xb6\x1e\xba\x11\xf3\xbf\x9d\xd0\x4f\xcc\x42\xe2\xcc\x48\x65\xbd\xac\x07\xa7\xcc\xa3\x92\xd1\xff\x52\x60\x1e\x47\x39\x6a\x70\x30\xd0\xbe\xa2\xc8\x64\xe7\xd2\xb5\xc3\xa2\x28\x24\x9f\x19\x92\xc2\x9b\xb2\x98\xe5\x93\x95\x13\xfd\x43\x9b\x4b\x7f\x3e\x43\x61\x3a\xae\x42\xc6\x57\xed\xf1\x5c\xf8\x56\x1f\xda\x1d\x48\x2e\xb6\xba\x21\x8d\x81\x09\x0e\x2e\x2a\x25\x95\x86\xf6\x04\xa1\x1d\xa2\x28\x05\x1d\xb8\xec\xd4\x75\xcb\xcd\x69\x95\xe9\x65\x87\x55\x61\xa2\xa1\xb7\x0a\x5c\xc0\xe3\x83\x34\x34\x5e\xb5\x93\xc6\xbe\x9f\xfd\x60\xd6\x87\xd6\x9d\xb5\xd5\xfa\xb5\x59\x0f\x97\xa6\x0f\x2d\x7b\x44\xe4\x04\xd2\x74\x97\xf6\x2a\xb2\x46\xf1\x07\x46\x03\xe2\xd8\xcf\xb3\xdf\xac\x64\x6f\x53\x24\x26\x7d\x68\xad\x97\xf8\x6f\xad\x5a\xed\xb4\xf3\x47\x5d\xde\x6a\xce\x9f\xd7\xd2\x12\x3b\xf0\xf2\x02\x57\x4e\x91\xef\x01\x00\x00\xff\xff\x91\x7a\x71\xc8\xe5\x14\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
