// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package z_stack

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x6f\xdb\xb8\x12\x7e\xcf\xaf\x98\xa3\x93\x03\xc9\xc0\xb1\xd4\xe4\xbc\x1c\xb8\x56\x8b\xee\x36\x40\x0b\xb4\x45\xd0\x66\xfb\xb0\x45\x11\xd0\xe2\xc8\xa6\x2b\x93\x2a\x49\xdf\x20\xf8\xbf\x2f\x28\x51\xb6\x6c\xeb\x12\x37\x4e\x76\xf3\xe0\x50\xe4\x5c\xbe\x99\x6f\x38\x16\xe9\x2c\x03\x8a\x31\xe3\x08\x4e\x24\xb8\x46\xae\x1d\xd8\x6c\x2e\x86\x94\x2d\x20\x4a\x88\x52\xa1\x23\xc5\xd2\x79\x75\x01\x00\x50\x9d\x8d\x44\xd2\x9f\xd1\xfe\xd5\x35\x98\x91\x9a\x95\xa3\x95\xea\x5f\x5d\x5b\xf9\x43\x9d\xd5\x7d\x4a\x38\x26\x95\xd5\x63\x09\xcd\x74\x82\x07\x12\xb9\xd4\xe4\xfa\x55\x96\x01\xbb\xfa\x3f\x07\xe7\x4f\x36\xfe\x0d\x11\x28\x2e\x58\x84\xca\x01\x1f\x36\x9b\x61\x30\xb9\xae\x51\xab\x42\x4e\x90\xc8\x98\xad\x9c\x57\xc3\x80\xb2\xc5\x01\x8a\x9a\xa9\x3d\x60\x65\x7a\x6a\x7c\xc4\x42\xce\x40\x8a\x04\x43\xc7\x0c\x1d\x20\x91\x66\x82\x87\xce\x6b\x3b\x50\xa8\x35\xe3\x63\xe5\xc0\x0c\xf5\x44\xd0\xd0\x49\x85\xd2\x0e\x30\x1a\x3a\xdb\xb5\x63\xc3\xb9\x71\x4d\x46\x09\x96\x30\x8a\x87\xfc\xb3\xaf\xb4\x64\x29\x52\xa0\xba\x2f\x51\xa5\x82\x2b\xb6\x40\xe0\x62\x29\x49\xea\x80\xd2\x6b\x83\x67\xc9\xa8\x9e\x0c\xae\x5e\xbc\xf8\x4f\x83\xfd\xc2\xc7\x04\x09\x6d\x5b\x97\xcd\x8b\xd6\x40\x89\x70\x46\xfb\xa6\x0c\xae\x9d\x1d\x5b\x5f\x89\x64\x06\x71\xc9\x93\x9e\x3c\xce\x5a\x32\x7f\x90\xa9\x61\xd0\x06\xdb\xe8\x76\x04\x3d\x12\x74\xfd\xa8\xa4\xd0\x1d\xea\x5b\x94\x33\xa6\x61\x2a\x18\xdf\x62\x6f\x71\x5e\xea\xb7\x0a\xe4\x42\x8c\xa7\x73\x0d\x7a\x9d\x62\xe8\x44\x13\x8c\x7e\x8c\xc4\xca\x29\xd3\x37\x55\x7d\xb5\x64\x3a\x9a\x38\xc0\xc9\x0c\x43\x27\xcd\x61\xf4\x0b\x18\xa6\xfa\xf6\x26\x16\x26\xb5\xa1\x23\xb8\x03\x06\x78\x0c\xf8\x13\xbc\x54\x32\xae\xc1\x2f\x04\xef\x8d\x60\x0f\x1c\x2d\x0d\x07\x9b\x0d\xe4\x2e\x91\x66\x19\x20\xa7\x66\x22\xe8\x08\xaa\x35\xec\x0e\xca\x4e\xca\xf8\x87\x9b\xb7\x80\xdc\xd4\x1d\x3d\x6b\xc6\x8b\xcc\xf8\x09\xd2\x7b\x35\x4f\x53\x21\xb5\x69\x98\x5d\x5a\x70\x3a\x57\x39\x70\xc3\x51\x3e\x68\xe3\xc6\x60\xb1\xa1\x3e\x86\x1b\x1b\x1d\x26\x0a\x1f\x1c\x92\xcd\x78\xbc\x07\x02\x36\x1b\x3b\xda\x99\xa3\x4c\x6d\x67\x72\x34\xdd\x74\x94\x78\x72\xf1\x27\xab\x2a\x0b\x7f\x81\x52\x31\xc1\xdb\x3c\x9d\x56\x7f\x77\x92\x70\x95\x97\x87\xc4\x05\x33\xb6\x4f\x29\xc3\x2c\xdb\x42\xf2\xb7\x96\x3e\x5b\x43\x9d\x56\xce\xb9\x8f\x6e\xa5\xa0\xf3\x48\xff\x2a\x78\xab\x6e\xca\xcf\xdb\x0b\x6a\x9d\x9a\xb2\xe8\x3d\x5f\x20\x5f\x0b\xcf\xa7\x04\xb2\xf0\xa1\x8a\xf9\x23\x99\x0a\xf9\x19\x13\x24\x79\x49\xfb\x7b\x6b\x8c\x57\xd7\x9e\x2f\xac\x8f\x84\x71\xd0\x12\x93\x5f\x65\xc8\x18\xb8\x93\x98\x3c\x2b\xea\x77\x44\xd2\x25\x91\xf8\xe8\xcd\x51\x1a\x3a\xd3\xde\xe8\xee\x37\xb6\x5f\x30\x1e\x8b\xf3\x35\x8b\xb7\xf9\x9b\x2c\xbc\xbf\xb9\xb9\x01\x42\xa9\x44\xa5\x4e\x4d\x88\x01\xe4\x33\x44\xbc\xb7\x06\x9e\x2b\x13\x1c\xf5\x52\xc8\x1f\xe7\x4b\xc6\x27\x6b\xf0\xf6\xcd\x27\x78\xff\xf6\xd4\x3c\x58\x38\x7e\x4a\xf8\x3d\xeb\xfe\xa2\x39\x67\x51\x97\xc0\x71\xa5\x91\x53\xa4\x8f\x8c\xa0\x34\x73\xff\x37\x86\x12\x4d\x08\xe7\xa7\xf7\x96\x32\x04\xab\xfe\xe4\xa5\x38\x0c\x5a\xde\xd6\x87\x41\x7e\x60\xaa\x39\xb8\x05\xe6\xb8\x56\x33\xdf\x7d\xe6\x22\x9a\x14\xf3\x8f\x3b\x7d\xb5\x9d\xbc\x5a\x09\x1b\xea\xc9\x31\x59\x87\x9d\xa3\xed\x70\x54\xd5\xaf\x6d\x3b\x0f\x55\xfe\x9d\xa4\x64\xc4\x12\xa6\x19\x9e\xae\x6c\xfb\x9e\x79\x25\xee\xd2\x6d\x2e\x91\xd6\xa3\x5c\xdb\x31\x2e\xcb\x40\x12\x3e\x46\xb8\x2c\x6e\x12\x60\x10\x82\x6f\x2f\x15\x9a\xaa\xad\x83\x95\xbc\xfc\xad\x39\xdf\xf2\xf2\xe6\xa1\xfd\x78\x5f\xdb\xb0\x62\x55\xdf\xa8\x2f\x5a\x32\x3e\x3e\xd5\x44\x95\x9b\x53\x75\x0b\x6a\xcc\x6b\xda\x83\xbc\x37\xd3\xd3\xbe\x7b\x1b\x77\x6e\xed\xae\x3d\xb8\xa5\xa9\x3c\xda\xa1\xfd\xb7\xf3\x79\x51\xb9\xe1\x32\x55\xe2\x94\x40\xb2\x0c\x94\x26\x9a\x45\xef\xee\x3e\x7e\x00\xaf\x18\xff\xf1\xf9\x03\x38\x01\x25\x6a\x32\x12\x44\xd2\x80\x28\x85\x5a\x05\x0b\xe4\x54\x48\x15\x6c\xb7\xbd\x32\x1d\xae\x3f\x52\x41\xa4\x8a\xd9\xbb\x62\x76\x24\x84\x56\x5a\x92\xd4\x9f\x31\xee\x47\x66\x3b\xc5\x24\x51\xd8\x3b\xa3\xd7\x5d\xbb\x29\x01\xec\x66\xda\x01\xd4\x67\x65\xaa\xce\x98\x93\x60\xaa\x82\xe9\xcf\x39\xca\xb5\x5f\x49\x8b\xc1\x32\x7d\x8a\x5c\x8c\x94\x71\xd8\x48\xc0\x93\xf8\xdc\x65\xfb\xc0\x77\x85\x86\x67\x70\x6e\x63\x6f\xe4\x7e\xdf\x7d\xb1\x47\x54\x24\x59\x5a\xde\x40\x90\x34\x4d\x58\x44\x34\x13\x3c\x98\x92\x05\x29\x16\x2b\x5f\x54\x97\x1e\x15\xd1\x7c\x86\x5c\xf7\x7c\x89\x84\xae\xbd\x78\xce\xf3\x0b\x4d\xf0\x7a\x90\x5d\x1c\x6c\x72\x16\x03\xe1\x14\x7c\x94\x52\x48\x05\xde\x18\xc1\x4b\x90\x97\x13\x3d\x78\xd1\xab\x6b\x02\xbb\x26\x9c\xcb\xe5\x3d\xd8\x9a\x68\x68\x19\x1c\x97\x70\xfb\x49\x68\x16\xaf\xbd\xac\xb1\x9d\xe5\x17\xc9\x03\x70\x6f\x8c\x2d\xf7\xbf\xcd\x72\xb8\xd2\x03\x70\x4d\xe7\x2b\x00\x6c\x36\x6d\xd2\xeb\xd4\x18\xc5\x0e\xa3\x13\x46\x71\x50\xa4\xbf\x59\xc8\xbc\x24\x30\x3e\x1e\x80\xbb\x65\xee\x7f\x6e\xad\xf4\xa6\xf7\xb2\x2e\x6f\x35\x6d\xb5\xb2\xc5\xab\xd3\x5b\xe2\xd4\x3c\x8a\x50\xa9\x77\x84\xd3\x04\xa5\x27\x0f\x79\x34\x7f\x2c\x06\x4f\x9a\x6a\x9e\x27\x1a\xc2\x30\x04\x37\x26\x2c\x41\xea\xd6\x09\xc3\x13\x11\x22\xfd\x19\x2a\x45\xc6\x2d\xf9\xfb\xe7\x70\xb1\x29\x6e\xb9\x8a\xc4\x59\xdc\xf0\x2f\x93\xb9\x39\x2f\xda\xec\xb9\x92\xf7\xa5\xe0\xef\x8c\xe9\x53\x9d\x16\x9f\x23\x81\x17\xfb\x4f\x7b\x8f\x97\x9e\xfb\xef\xf2\x57\x12\xc8\xef\x50\xbf\x31\xfa\xdd\xed\xe5\xa7\x8b\x31\x6e\xbb\xd2\x51\x53\x32\x7f\x0b\x22\x1b\x31\xc7\x10\xee\x19\x77\x7b\xcd\xf1\x61\x2e\xab\x27\x4c\xb5\x08\x99\x66\x0d\x21\x64\xc7\x7d\xeb\xe5\x45\xed\x36\x43\x3f\x95\x22\xf5\x5c\xc3\x85\xdb\x2b\x36\x5b\x79\x33\xdc\x58\x31\xc6\xcb\xb7\x52\x93\x51\xb7\xf7\x1d\x42\x28\x9f\xed\xa5\xaf\xdb\x83\xd7\xe0\x0a\xee\xc2\x00\x5c\x11\xc7\x6e\x63\xd1\x9e\xe4\x63\x41\x12\xaf\x96\xbe\xa3\xa9\x4b\x9f\x4c\xc9\xaa\xa1\xa2\x8b\xd2\x8b\xad\xf9\xe2\x37\xb1\xa6\xe4\xcf\x65\xb2\x13\x2d\x7e\x4f\x6b\x12\x35\xa0\x07\xf9\x67\xfd\xba\x2d\xf5\xc1\x41\x17\x3c\x0e\xe7\x20\xc4\xea\x73\x39\x1e\x06\xc5\xf7\x65\xe5\x5d\xf3\xaf\x00\x00\x00\xff\xff\xee\x65\x62\x42\x4c\x1d\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
