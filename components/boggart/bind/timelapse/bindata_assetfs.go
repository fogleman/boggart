// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package timelapse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x7b\x6f\xdb\xba\x15\xff\x3f\x9f\xe2\x80\x4b\x63\x0b\xa8\x24\x3b\x7d\x6c\x70\x6c\x0f\xd8\x82\x8b\x0e\x68\xb6\xa2\xcd\xc5\x90\x15\x45\x40\x8b\x94\xc5\x94\x22\x55\x92\x72\xea\x0a\xfe\xee\x03\xf5\x8a\x6c\xc9\xb2\xe3\xee\x9f\x15\xd7\x40\x63\x99\x3c\xcf\x1f\xcf\x8b\x6a\x96\x01\xa1\x21\x13\x14\x50\x20\x85\xa1\xc2\x20\xd8\x6c\xce\xa6\x84\xad\x20\xe0\x58\xeb\x19\x52\xf2\x11\xcd\xcf\x00\x00\x9a\xab\x81\xe4\x6e\x4c\xdc\xf1\x25\xd8\x27\x1d\x57\x4f\xdf\xb5\x3b\xbe\x2c\xe9\x77\x79\xbe\xdf\x27\x58\x50\xde\xd8\x6d\x53\x54\x56\x6c\xd3\xec\xd2\x3d\x52\xce\x11\x68\xb3\xe6\x74\x86\xe4\x8a\xaa\x90\xcb\xc7\x09\xe0\xd4\xc8\x0e\xce\x9c\x3b\x94\x2a\xae\xd8\xed\xb3\x1b\x49\xc5\x7e\x48\x61\x30\x47\xa0\xa4\x15\x64\x97\x11\xc4\xd4\x44\x92\xcc\xd0\x92\x1a\x04\x38\x30\x4c\x8a\x19\xca\x32\xf0\x3e\xd2\x6f\x29\xd5\xc6\xfb\xfd\xe3\x7b\xef\x03\x36\x11\x6c\x36\x08\x18\x99\x21\x4d\xb1\x0a\x22\xb7\x60\x17\x72\x85\x39\x23\xd8\xd0\x6e\x43\x72\x63\x98\x48\x52\x03\x66\x9d\xd0\x19\x8a\x18\x21\x54\x20\x58\x61\x9e\xd2\x19\x42\x20\x70\x6c\x8d\x51\x32\x46\xe0\xff\x9c\x10\x23\xfb\x45\xb4\x0f\xf4\xed\x1e\xfc\xaa\x4f\x96\x01\x1b\xff\x45\x00\xba\xc6\x86\x82\xc2\x62\x49\x11\x78\x36\x66\xfa\xb8\xa6\x21\xa3\x9c\x68\x6a\xfa\x85\xb7\x6d\x12\x46\x49\xee\x2e\x95\x4c\x93\x03\x86\xf5\xf0\xeb\x23\x59\x77\xd9\x73\x80\xdd\x44\xd1\x84\x0a\x02\xc5\xaf\xe7\x98\x52\xcb\xd4\x09\x16\x95\x50\x4c\x88\x2b\x45\x53\x9a\x8b\x09\x91\x02\xcd\xa7\xac\x8e\x4f\x0c\x21\x76\x03\xcc\xa9\x20\x58\xa1\xf9\xd4\x67\xf3\xa9\x6f\xa5\x3c\x53\x71\x33\x44\x0c\xfd\x6e\xb6\xe2\xd5\xc6\x28\xda\x4a\x89\x12\xaf\x3a\x8c\xec\x61\x87\x80\x05\x01\xcf\x12\xdf\xdb\x98\x2c\x1f\x8d\x84\xcd\xc6\x66\x45\xbd\xe1\xfd\x26\x55\x8c\x0d\xa0\xcb\xd1\xe8\xad\x37\x1a\x7b\xa3\x4b\x18\xbf\x99\x8c\x5e\xdb\x8a\x02\x2e\xd4\xc4\x46\xf6\x92\x66\x19\x58\xb8\x6d\x72\xf5\x84\x6e\xcb\x55\x9f\xb0\xd5\x91\x11\x72\x1c\xe9\x11\x64\x53\xff\x70\x5c\x1f\x10\xd3\x91\x82\x97\x07\xc2\xeb\x42\x2c\x74\x72\xf5\x47\xbe\xed\x97\xb9\x48\x8d\x91\xa2\x8c\x7b\x9d\x2e\x62\x66\xea\x40\x5f\x18\x01\x0b\x23\x5c\x9d\x06\x01\xd5\x1a\xcd\xeb\x8a\xf6\x29\x4f\x8b\xa2\x9a\x4d\xfd\x42\xc6\xaf\x1d\x80\x53\xdf\xa6\x7d\x47\xab\xed\x66\x29\xca\x81\x17\x32\x4e\xf5\xbe\x8a\x9f\x65\xb0\xe0\x32\xf8\x0a\x28\xc1\x4b\x26\xb0\x91\xaa\x40\x14\xea\xbc\xee\x36\xa5\x73\xe2\xe8\xa4\x4c\x2a\x3a\x5b\xd1\xdc\x80\x0a\x43\x55\xf3\x18\x23\xf9\xc8\xc4\x12\x5e\x10\x30\xd2\xfe\x95\xa1\xfd\x4b\x85\x51\x8c\x6a\x18\x1a\x69\x30\x07\xcd\x7e\x50\x78\xa1\x1d\x6b\x9c\x60\xbc\xfe\x37\xc4\x84\x80\x27\xc3\x50\x53\x73\xcf\x69\x68\x60\xec\xd4\xbf\x15\x5b\x46\xa6\x04\xe0\xbe\x90\x33\x8c\xd2\x18\x8b\xfb\xc5\xda\x50\x0d\x9e\x95\x5a\x6c\x38\x79\x10\x25\xfb\xdd\xc8\xb2\xa2\x7b\xc2\xb9\x15\x07\x93\xd9\x01\x60\x77\x41\x2a\xc7\xae\xb7\x50\x56\x8d\xd7\x07\x92\xa4\xc9\x6b\xa2\x34\x5e\x08\xcc\x76\x47\xb1\x4e\x3e\x16\x2f\xab\x49\xeb\x91\x11\x13\x4d\x60\x3c\x1a\xbd\xb8\x02\xc2\x74\xc2\xf1\x7a\x52\x9c\xf7\x15\x02\xad\x82\x19\xfa\x6b\x39\x31\xd5\x2a\x2e\xac\x57\xb3\x2c\x2b\xfc\xf4\xfe\x89\x63\x9a\xd7\x76\xcc\xcd\x0c\xb1\x18\xdb\xf9\xe1\x88\x3a\xbf\xe5\x3a\x4e\xac\x0e\xd8\x3a\xff\xe3\x32\x2f\x7a\x35\xdf\x35\x65\xea\x47\xaf\x8e\xe4\x4e\xe6\x53\x0c\x91\xa2\xe1\x93\x9f\x44\x3e\x0a\x2e\x31\xd9\xe7\xe6\x4e\xd5\x49\x14\x8b\xb1\x5a\x57\x13\x67\x51\x64\x1a\xc1\x7b\x5d\x8a\x83\x17\x1a\xc1\xf9\x76\x64\x36\x23\xad\xd0\xf2\x89\xfd\xa0\x45\xa0\xe1\x79\x6f\xb0\xd5\x1e\x1c\x53\x52\xfa\xfb\x55\xff\x76\x7f\x92\xc3\xaf\x91\xbe\x3d\x18\x9c\x52\xfe\xba\x77\x76\x94\x34\x7e\x96\x8f\xe5\xd7\x13\xf7\x59\xe3\x32\xd7\xd0\xde\xbe\xce\x75\x24\xce\x54\xe0\x15\x60\xc5\xb0\xcb\xf1\x82\xf2\x19\xfa\x80\x97\x14\x04\x5e\xb1\x25\xb6\x71\xde\xbc\xd1\xa5\xbc\x92\x55\x6a\xd9\xde\x2f\xba\xc4\xd2\x80\x97\x58\x19\xe3\x96\x63\x9c\x35\xd2\xc8\xd2\xcc\xc6\x65\x67\x79\x1a\x32\x37\x9b\x0b\xfb\x3d\xdb\x3f\x61\xba\xa3\xb1\x3b\xba\xbc\xcd\xc7\xc6\xc9\xe8\x8d\x3b\xfa\xf3\x64\x34\xda\x9a\x1f\x9b\x42\xf3\x71\xf5\xc2\xc8\xd9\xbe\x29\xf4\xb0\x38\xb4\x85\xcf\x6f\x4c\x69\x83\xe6\xc5\x68\x9f\x6f\x14\x57\xb0\x19\x32\x2a\xa5\x68\x7e\xc1\xf1\xb7\x54\x5e\x95\x53\x7b\x91\xa0\x9c\x6d\xa1\x54\x1d\x5b\x63\xa9\xec\x08\xc2\xb6\x83\x54\x18\xc6\x3f\x19\x9a\xc0\x90\x09\x03\x43\x9d\x2e\x4a\x48\x5f\x39\x4e\xb9\x96\x47\x7b\xbe\xf6\xda\x71\xda\x50\x3f\xcd\xef\xc3\xa5\xb1\x62\x47\x0e\x0c\x79\xae\xe0\x3c\x67\xd3\xce\x9e\x80\x64\x21\xd0\x6f\x25\x91\x25\xdf\xd7\xb5\x79\x7d\x67\xb1\xf5\x70\x45\x4b\x44\xf2\x22\x2b\xf2\x1c\x2a\xfd\x6f\xfa\xde\xc4\x80\x6b\xda\x23\x7c\x37\x50\x2a\xb1\x85\x85\xe7\xdd\x01\x73\xfe\x93\x11\x73\xde\x0e\x99\xf3\x53\x63\xa6\x01\xc4\x6e\x04\xf4\xa7\x7f\x7b\xb5\x3b\x62\x58\x08\x7c\x2b\x10\x6c\xbd\xcb\x8f\xf6\x88\xbc\xb3\xc9\x50\xd1\xfe\xff\xa5\xe0\x7b\xdc\x9f\x81\xea\xd8\x0c\xac\x11\xf2\x53\x5e\x95\x58\x81\x0f\x95\xd8\x88\x62\x82\x2a\xf6\x2c\x03\x6d\xb0\x61\xc1\xbb\xdb\x9b\xf7\x30\x2c\x9e\x7f\xff\xf8\x1e\x90\x4f\xb0\x8e\x16\x12\x2b\xe2\x63\xad\xa9\xd1\xfe\x8a\x0a\x22\x95\xf6\x17\x52\x1a\x6d\x14\x4e\xf2\x9b\x78\x9e\xfa\x09\x0b\xbe\x52\xe5\x07\x5a\xfb\x3b\x6b\x5e\xcc\x84\x17\x68\x8d\x20\xc4\x5c\xe7\x5d\xff\xec\x6c\x9a\xcf\x65\x8d\xfb\xbd\xe5\x2c\x4b\xb1\x57\x4f\x60\x90\xd5\x1e\x46\xd4\xb6\xc0\xe2\x45\x59\x71\x83\xdc\x9c\x4d\xfd\x5c\xca\x3e\x37\x1f\xf4\x4f\x39\x19\xcb\x98\x0a\xe3\x3f\x54\x4f\xb9\x1f\x0f\x5b\x6e\xfc\xef\xf1\x7b\xe8\x86\x6f\x5b\x6d\x71\xd0\x3a\x50\x2c\xa9\x5e\x91\xe0\x24\xe1\x2c\xc8\x1b\x9a\xff\x80\x57\xb8\xd8\x6c\xf4\xb6\xf3\x21\x91\x41\x6a\xfd\x70\x3c\x45\x31\x59\x0f\xc3\x54\xe4\x83\x20\x0c\x9d\x06\xce\x05\xed\xe0\x4f\x8d\x37\x2d\x03\xc7\xdb\xb1\x69\x98\xb5\x6a\x81\x61\x31\xfd\x90\x6f\xfe\x43\x04\x8a\x5a\x45\x13\x78\x3b\x7a\xd9\x22\x8c\x99\xb8\xc6\x86\x4e\xa0\x40\x75\xe8\x78\x3a\x5d\x18\x85\x03\x33\x7c\xf3\x12\x06\x6b\x8a\xd5\xc0\xe9\x60\xc3\xdf\x77\xd8\xa8\x20\xff\x0a\x87\x03\x82\xd7\x5d\xf4\x16\x90\xf5\xdf\xf2\x21\xf5\xef\xb6\xcc\x53\x3d\x81\x41\xe3\xf6\x3c\x68\xb3\x70\x19\x60\x4e\x27\xd0\x76\xce\x7e\xc2\x3c\xdf\x27\x30\xb8\xbb\xbb\xbb\xf3\x6e\x6e\xbc\xeb\x6b\x78\xf7\x6e\x12\xc7\x83\x16\xf9\xa6\x2d\x3b\x07\x4f\xef\x93\x3d\xa8\x67\xc8\x5b\x49\xf0\xda\xce\x5d\x68\x07\x72\x04\x68\x21\x97\x4b\xac\xf2\xd7\xdc\x83\x09\x7c\x7e\xc2\xcf\x60\x65\x9e\xa0\xa8\x11\xfa\xd2\x36\x63\x5b\xd9\x1d\xd5\x86\xaa\x13\x14\x56\x07\x36\x7e\x09\x56\xa9\x1e\xec\x37\xa2\x93\xb8\x79\x74\x07\xad\xbc\x8d\x98\x86\x47\x4a\xbf\x9e\x0a\x0b\xd3\xf2\xdf\x94\x7e\xdd\xb2\xaa\xb4\xa0\xde\x3a\x68\x85\x2d\xd9\x27\x59\xd1\x74\xbf\x56\xd7\x6f\xdc\x1e\x9e\x67\xdb\x9c\x23\x17\x4b\x61\xa2\x53\xa1\xcb\x99\xbb\x80\x2b\x37\x8e\x83\xed\x24\x13\x9a\x18\x94\xda\xfa\xec\xea\xa4\x7f\xa6\xb1\x39\x5e\xb6\x00\x9d\x0a\x57\x59\xbc\x5a\x68\x15\xeb\xc7\x81\x75\x8a\xfe\xa6\xef\x85\xae\x1e\x9b\xba\xa8\xb7\xed\x3c\x54\xd0\x36\xce\xd5\xd9\xbe\x86\x61\xcb\xe4\x20\x57\x12\x33\xd3\xe8\x31\x74\xb7\xc9\xd8\xcf\x0a\x2b\x20\x09\xcc\xba\x3b\x0e\xb6\x15\x62\x0b\x83\xc1\xae\xe2\x0e\xe5\xc5\xdb\xd7\xcf\x8d\xff\x8a\xfa\x32\x70\xbc\x15\xe6\xc3\x12\x01\x92\x14\xe0\xd8\x76\xe2\x78\x45\x59\x1f\xe6\x55\xdd\xbd\xb9\x71\xaf\xaf\x3f\xdf\x7e\xc9\xeb\xfa\x44\xeb\xff\x0c\x1c\xa7\xfd\xba\xba\x4f\xa1\x91\x1d\xea\xa8\x20\x27\x29\xdb\x34\x7e\x57\xcf\x53\xbf\x68\xed\x8d\xa1\xe7\xbf\x01\x00\x00\xff\xff\x2d\xc5\xd2\xcd\x0a\x1d\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
