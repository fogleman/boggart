// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package timelapse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xeb\x6f\xdb\xba\x15\xff\x9e\xbf\xe2\x80\xcb\x62\x0b\xa8\x24\x3b\x7d\x6c\x70\x2c\x0f\xd8\x82\x8b\x0e\x68\xb6\xa2\xcd\xc5\x90\x15\x45\x71\x2c\xd2\x16\x53\x8a\x54\x49\xca\xa9\xaf\xe1\xff\x7d\xa0\x24\x2b\xb2\x25\x3f\xea\xee\xcb\x86\xeb\x2f\xa1\xc9\xf3\xfc\xf1\xbc\xe8\xac\x56\x40\xd9\x8c\x4b\x06\x24\x56\xd2\x32\x69\x09\xac\xd7\x17\x63\xca\x17\x10\x0b\x34\x26\x22\x5a\x3d\x91\xc9\x05\x00\x40\x73\x37\x56\xc2\x4f\xa9\x3f\xbc\x06\xb7\x32\xe9\x66\xf5\xdd\xf8\xc3\xeb\x8a\x7e\x97\xe7\xfb\x97\x0c\x25\x13\x8d\xd3\x36\xc5\xc6\x8a\x6d\x9a\x5d\xba\x27\x26\x04\x01\x63\x97\x82\x45\x44\x2d\x98\x9e\x09\xf5\x34\x02\xcc\xad\xea\xe0\x2c\xb8\x67\x4a\xa7\x1b\x76\xb7\xf6\x13\xa5\xf9\x6f\x4a\x5a\x14\x04\xb4\x72\x82\xdc\x36\x81\x94\xd9\x44\xd1\x88\xcc\x99\x25\x80\xb1\xe5\x4a\x46\x64\xb5\x82\xe0\x03\xfb\x96\x33\x63\x83\x5f\x3f\xbc\x0b\xde\xa3\x4d\x60\xbd\x26\xc0\x69\x44\x0c\x43\x1d\x27\x7e\xc9\x2e\xd5\x02\x05\xa7\x68\x59\xb7\x21\x85\x31\x5c\x66\xb9\x05\xbb\xcc\x58\x44\x12\x4e\x29\x93\x04\x16\x28\x72\x16\x11\x02\x12\x53\x67\x8c\x56\x29\x81\xf0\xe7\x84\x58\x75\x58\x44\xfb\x42\xdf\xec\xc1\x6f\xf3\x59\xad\x80\x0f\xff\x2c\x81\xdc\xa2\x65\xa0\x51\xce\x19\x81\xc0\xc5\xcc\x21\xae\xf1\x8c\x33\x41\x0d\xb3\x87\x85\xb7\x6d\x92\x56\x2b\xe1\xcf\xb5\xca\xb3\x23\x86\x1d\xe0\x37\x27\xb2\xee\xb2\x17\x00\xfb\x99\x66\x19\x93\x14\xca\x6f\x3f\x62\x4a\x2d\xd3\x64\x28\x37\x42\x91\x52\x5f\xc9\xa6\x34\x1f\x29\x55\x92\x4c\xc6\xbc\x8e\x4f\x84\x19\xfa\x31\x0a\x26\x29\x6a\x32\x19\x87\x7c\x32\x0e\x9d\x94\x1f\x54\xdc\x0c\x11\xcb\xbe\xdb\xad\x78\x75\x31\x4a\xb6\x52\xa2\xc2\xab\x0e\x23\x77\xd9\x33\x40\x49\x21\x70\xc4\x5f\x5c\x4c\x56\x4b\xab\x60\xbd\x76\x59\x51\x1f\x04\xbf\x28\x9d\xa2\x05\x72\x3d\x18\xbc\x09\x06\xc3\x60\x70\x0d\xc3\xd7\xa3\xc1\x2b\x57\x51\xc0\x87\x9a\xd8\xaa\x83\xa4\xab\x15\x38\xb8\x5d\x72\x1d\x08\xdd\x96\xab\x21\xe5\x8b\x13\x23\xe4\x34\xd2\x13\xc8\xc6\xe1\xf1\xb8\x3e\x22\xa6\x23\x05\xaf\x8f\x84\xd7\x95\x9c\x9a\xec\xe6\xf7\x7c\xdb\x2f\x73\x9a\x5b\xab\x64\x15\xf7\x26\x9f\xa6\xdc\xd6\x81\x3e\xb5\x12\xa6\x56\xfa\x26\x8f\x63\x66\x0c\x99\xd4\x15\xed\x63\x91\x16\x65\x35\x1b\x87\xa5\x8c\xff\xef\x00\x1c\x87\x2e\xed\x3b\x5a\x6d\x37\x4b\x59\x0e\x82\x19\x17\xcc\xec\xab\xf8\xab\x15\x4c\x85\x8a\xbf\x02\xc9\x70\xce\x25\x5a\xa5\x4b\x44\xa1\xce\xeb\x6e\x53\x3a\x27\x8e\x3d\x1a\x8a\xb6\x03\x97\xce\x10\x18\x45\x47\x2c\xda\x95\x5e\xcd\x2b\x6f\xa0\x4a\xb7\x57\x47\xa2\xab\xc9\x6b\x93\x3c\x9d\x4a\xe4\xbb\x33\x4c\x27\x1f\x4f\xe7\x9b\x11\xe5\x89\x53\x9b\x8c\x60\x38\x18\xfc\xf1\x06\x28\x37\x99\xc0\xe5\xa8\x04\xea\x86\x80\xd1\x71\x44\xfe\x52\x8d\x1a\xb5\x8a\x2b\xe7\x55\xb4\x5a\x95\x7e\x06\xff\xc0\x94\x15\x45\x11\x85\x8d\x08\x4f\xd1\x35\xde\x13\x0a\xe4\x96\xeb\x98\x39\x1d\xe0\x5a\x81\x1f\x33\x69\x99\x3e\x35\xcb\x93\x97\x93\x5d\x53\xc6\x61\xf2\xf2\x44\xee\xcc\x31\x27\x79\x8a\xf2\xcb\x74\x69\x99\xa9\x04\x7d\xe4\xbf\x95\x82\xb2\x93\xe5\x8c\x11\x12\xcd\x66\xcf\x78\x51\xf5\x24\x85\x42\xba\x0f\xae\x9d\xb4\xcf\x34\x4f\x51\x2f\x37\x23\x5f\x99\xe5\x8d\x22\x70\x5b\x89\x23\x70\x59\x58\x86\x93\x93\xac\x3b\x29\x57\x0f\x37\x82\xc3\xc7\x47\xb2\x67\x3f\xf3\x39\x09\xd9\x7d\xb2\xa3\xa4\xf1\xb5\x5a\x56\x7f\x9e\xb9\x2f\x1a\xcf\x8b\x86\xf6\xf6\x03\xa3\x23\x22\xc7\x12\x17\x80\x9a\xa3\x2f\x70\xca\x44\x44\xde\xe3\x9c\x81\xc4\x05\x9f\xa3\xbb\xf8\xe6\x1b\x23\x17\x1b\x59\x95\x96\xed\xf3\xb2\x6e\xcd\x2d\x04\x99\x93\x31\x6c\x39\x26\x78\x23\xae\x1c\x4d\x34\xac\x6a\xdd\xf3\xd8\xb3\x5e\x5f\xb9\xbf\xd1\xfe\x99\xc7\x1f\x0c\xfd\xc1\xf5\x7d\x31\xc8\x8c\x06\xaf\xfd\xc1\x9f\x46\x83\xc1\xd6\x44\xd3\x14\x5a\x0c\x50\x57\x56\x45\xfb\xe6\xa2\xe3\xe2\xc8\x16\x3e\xbf\x70\x6d\x2c\x99\x94\xc3\x66\x71\x50\x3e\x0a\x22\x62\x75\xce\xc8\xe4\x4a\xe0\xb7\x5c\xdd\x54\x73\x64\x19\xd9\x82\x6f\xa1\xb4\xb9\xb6\xc6\x56\x55\x6a\xa5\xab\xb3\xb9\xb4\x5c\x7c\xb4\x2c\x83\x3e\x97\x16\xfa\x26\x9f\x56\x90\xbe\xf4\xbc\x6a\x0f\x29\xad\xf6\x5e\x79\x5e\x1b\xea\xe7\x89\xb2\x3f\xb7\x4e\xec\xc0\x83\xbe\x28\x14\x5c\x16\x6c\xc6\xdb\x13\x90\x7c\x06\xec\x5b\x45\xe4\xc8\xf7\x65\x82\xa8\xa7\x68\x57\x20\x16\xac\x42\xa4\xa8\x5e\xb2\x48\xe9\xca\xff\xa6\xef\x4d\x0c\x84\x61\x07\x84\xef\x06\xca\x46\x6c\x69\xe1\x65\x77\xc0\x5c\xfe\x64\xc4\x5c\xb6\x43\xe6\xf2\xdc\x98\x69\x00\xb1\x1b\x01\x87\xd3\xbf\xbd\xdb\x1d\x31\x7c\x06\x62\x2b\x10\x86\x5e\xb9\x68\x75\xe8\x6e\x38\x6b\xda\xff\xbd\x14\x7c\x87\x87\x33\x50\x9f\x9a\x81\x35\x42\x61\x2e\x36\x25\x56\xe2\xb1\x12\x9b\x30\xd7\xb7\x2a\xf6\xd5\x0a\x8c\x45\xcb\xe3\xb7\xf7\x77\xef\xa0\x5f\xae\x7f\xfd\xf0\x0e\x48\x48\xd1\x24\x53\x85\x9a\x86\x68\x0c\xb3\x26\x5c\x30\x49\x95\x36\xe1\x54\x29\x6b\xac\xc6\xac\x78\x1b\x16\xa9\x9f\xf1\xf8\x2b\xd3\x61\x6c\x4c\xb8\xb3\x17\xa4\x5c\x06\xb1\x31\x04\x66\x28\x0c\x2b\xf2\xf6\x62\x5c\x0c\x3c\x8d\x17\xa7\xe3\xac\x4a\x71\x50\x8f\x36\xb0\xaa\x3d\x4c\x18\x9f\x27\xb6\xfc\xe9\xa6\x7c\xd3\xac\x2f\xc6\x61\x21\x65\x9f\x9b\x8f\xe6\xa7\x9c\x4c\x55\xca\xa4\x0d\x1f\x37\xab\xc2\x8f\xc7\x2d\x37\xfe\xfb\xf8\x3d\x76\xc3\xb7\xad\xb6\xbc\x68\x13\x6b\x9e\x6d\x1e\xed\x98\x65\x82\xc7\x45\x43\x0b\x1f\x71\x81\xe5\x61\xa3\xb7\x5d\xf6\xa9\x8a\x73\xe7\x87\x17\x68\x86\x74\xd9\x9f\xe5\xb2\x98\x8c\xa0\xef\x35\x70\x2e\x69\x7b\x7f\x68\xbc\xfd\x7b\x5e\xb0\x63\x53\x7f\xd5\xaa\x05\x96\xa7\xec\x7d\x71\xf8\x77\x19\x6b\xe6\x14\x8d\xe0\xcd\xe0\x45\x8b\x30\xe5\xf2\x16\x2d\x1b\x41\x89\x6a\xdf\x0b\x4c\x3e\xb5\x1a\x63\xdb\x7f\xfd\x02\x7a\x4b\x86\xba\xe7\x75\xb0\xe1\xf7\x1d\x36\x26\xe9\x3f\x67\xfd\x1e\xc5\x65\x17\xbd\x03\x64\xf9\xd7\x62\x6a\xfb\x9b\x2b\xf3\xcc\x8c\xa0\xd7\x78\xcf\xf5\xda\x2c\x42\xc5\x28\xd8\x08\xda\xce\xb9\xcf\xac\xc8\xf7\x11\xf4\x1e\x1e\x1e\x1e\x82\xbb\xbb\xe0\xf6\x16\xde\xbe\x1d\xa5\x69\xaf\x45\xbe\x6e\xcb\x2e\xc0\x33\xfb\x64\xf7\xea\xb1\xf2\x5e\x51\x5c\xba\xb9\x8b\xec\x40\x4e\x80\x4c\xd5\x7c\x8e\xba\xf8\xe1\xb5\x37\x82\x4f\xcf\xf8\x59\xd4\xf6\x19\x8a\x1a\xa1\xcf\x6d\x33\xb6\x95\x3d\x30\x63\x99\x3e\x43\xe1\xe6\xc2\x86\x2f\xc0\x29\x35\xbd\xfd\x46\x74\x12\x37\xaf\xee\xa8\x95\xf7\x09\x37\xf0\xc4\xd8\xd7\x73\x61\xe1\x46\xfd\x8b\xb1\xaf\x5b\x56\x55\x16\xd4\x47\x47\xad\x70\x25\xfb\x2c\x2b\x9a\xee\xd7\xea\x0e\x1b\xb7\x87\xe7\x87\x6d\x2e\x90\x4b\x95\xb4\xc9\xb9\xd0\x15\xcc\x5d\xc0\x55\x07\xa7\xc1\x76\x96\x09\x4d\x0c\x2a\x6d\x87\xec\xea\xa4\xff\x41\x63\x0b\xbc\x5c\x01\x3a\x17\xae\xaa\x78\xb5\xd0\x2a\xf7\x4f\x03\xeb\x1c\xfd\x4d\xdf\x4b\x5d\x07\x6c\xea\xa2\xde\xb6\xf3\x58\x41\x5b\x7b\x37\x17\xfb\x1a\x86\x2b\x93\xbd\x42\x49\xca\x6d\xa3\xc7\xb0\xdd\x26\xe3\x3e\x0b\xd4\x40\x33\x88\xba\x3b\x0e\xba\x0a\xb1\x85\x41\x6f\x57\x71\x87\xf2\xf2\xf7\xc0\x4f\x8d\x7f\x8e\x7c\xee\x79\xc1\x02\x45\xbf\x42\x80\x66\x25\x38\xae\x9d\x78\x41\x59\xd6\xfb\x45\x55\xf7\xef\xee\xfc\xdb\xdb\x4f\xf7\x9f\x8b\xba\x3e\x32\xe6\xdf\x3d\xcf\x6b\xff\x80\x7a\x48\xa1\x55\x1d\xea\x98\xa4\x67\x29\x5b\x37\xbe\x6f\xd6\xe3\xb0\x6c\xed\x8d\xa1\xe7\x3f\x01\x00\x00\xff\xff\x79\x95\xc4\xbc\x9c\x1b\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
