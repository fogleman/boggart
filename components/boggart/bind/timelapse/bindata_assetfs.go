// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package timelapse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xdd\x6e\xda\x30\x14\xbe\xe7\x29\x8e\xac\xae\x82\x0b\xa0\xb4\xdd\x34\x41\xc2\x6e\xa6\x5d\x4d\xd5\xa4\x3e\x40\x75\x12\x9b\xc4\x9a\xe3\xa4\xb6\x43\x61\x11\xef\x3e\x39\x71\xa8\x81\x10\xe8\xd6\x9b\x06\x9f\xbf\xef\x7c\xe7\xf8\x73\x55\x01\x65\x2b\x2e\x19\x90\x38\x97\x86\x49\x43\x60\xb7\x1b\x04\x94\xaf\x21\x16\xa8\x75\x48\x54\xfe\x46\x96\x03\x00\x00\xff\x34\xce\xc5\x38\xa3\xe3\xd9\x3d\xd8\x2f\x9d\xb5\x5f\x1b\x3d\x9e\xdd\x3b\xff\xe3\x98\xcd\x4b\x81\x92\x09\xcf\x7a\xea\xd1\xa2\x38\xf4\xb1\x7f\x55\x05\x7c\x05\x93\x15\x17\x4c\x5b\x8c\x1d\xf6\x48\xe4\xf1\x6f\x20\x05\x26\x5c\xa2\xc9\x15\x81\x09\xec\x76\xd6\xc2\x24\xed\x8a\xe9\xee\xb3\x23\xb3\x42\x99\x30\xb8\xb1\xc5\x61\x1e\xf6\xa0\xe8\xe2\x49\x67\xe3\x2f\xe0\x08\x7b\x3c\x53\xe3\x38\xce\xa4\x65\x16\x49\xe4\xc7\x6c\x9d\xc4\xf0\x2c\x01\x6d\xb6\x82\x85\xe4\x8d\x53\x93\xce\x61\x76\x77\xf7\x69\x01\x94\xeb\x42\xe0\x76\xde\x90\xb2\x20\xa0\x55\x1c\x92\x6f\x18\x1b\x9e\xcb\x70\x9f\xfe\xd6\x76\x12\x56\x55\xd3\xdb\xe4\x09\x33\x06\xbb\x1d\x01\x14\x26\x24\x3c\xc3\x84\x11\x98\x5e\x80\xe0\xb7\x8b\x85\xcd\x0f\x86\x6d\xcc\x38\x66\xd2\x30\x75\xa1\x81\x3a\x43\xfa\xb0\x3c\x86\x10\x4c\xd3\x87\x2b\x22\x0b\x1b\x98\x96\x19\xca\x97\x68\x6b\x98\x76\x49\x9e\xf9\x9f\x26\x49\x71\x55\x8e\x00\x21\x55\x6c\xf5\xce\x0f\xcd\xdf\xa4\xc8\x91\x9e\xa3\xc7\xb5\x1b\x19\x09\x91\x91\xe3\x42\xf1\x0c\xd5\x96\x80\xca\xed\x20\xa2\xd2\x98\x5c\x12\x0b\x8d\xcf\xbe\x4a\x20\xdf\x5d\x3a\x02\x37\x35\x2a\x5c\x5e\x44\x16\x4c\x29\x5f\xf7\xec\xca\x79\x73\x8f\xa9\xe7\x26\x74\x07\xfd\xcb\xa5\xea\xb6\x1c\x15\xf0\x7e\xba\x4f\xf7\xef\x3d\x7a\xe0\x89\x93\x57\xfd\x54\x9e\x3a\xb6\x2d\x90\xb8\x06\x54\x1c\xc7\x02\x23\x26\x42\xf2\x0b\x13\x06\x12\xd7\x3c\x41\x3b\x60\x5f\xa1\x4a\xd1\xe6\x72\x55\x0e\xed\x8d\xee\x24\x06\x26\x85\xcd\x31\x3b\x69\x4c\x70\x6f\x7f\xac\x4f\x38\x23\x07\xb5\x7f\x70\xa5\x0d\x59\x06\xba\x40\xd9\x18\x52\x4e\x29\x93\x21\x31\xaa\x64\x64\x79\x2b\xf0\xb5\xcc\x17\xc1\xd4\x3a\x2c\x9b\xed\x10\xfc\x70\x18\x7b\x14\x43\x5d\x46\x2d\x94\xd1\x55\x68\xaa\x0a\xbc\x98\xe6\x76\xfb\xcc\x28\xb6\xe6\x79\xa9\x7b\x01\xea\xab\x10\x1e\x8d\xdd\x1b\xa5\x77\xe4\xa4\x54\x5a\x1d\x2d\xa5\xe1\xe2\xd9\xb0\x02\x86\x5c\x1e\xf4\xf6\x38\x1a\xb9\x33\xa4\xd4\x9d\x7d\x1e\x75\x34\xdc\x10\x83\x92\xc2\x30\x31\x36\xed\xdd\x08\x86\xa2\x2e\x70\x53\x87\xe9\xd1\x99\x25\xe5\x2b\x60\xaf\xce\xc9\xba\x9f\x53\x73\xc1\xdb\xfd\xb0\xe2\xb0\x66\x8e\xa8\x5a\xb1\x64\x7d\x9d\x1d\x2b\xc7\x8c\xb4\x1c\x08\xcd\x7a\x92\x77\x8c\xab\x4e\x4b\xbc\x02\x5d\x7c\x77\x73\xfe\x91\x49\xf0\x15\x88\x76\xad\x1b\xaa\xae\xdb\xa6\xf7\x89\x9c\x6e\xd3\x13\xdb\xf4\xae\xba\xba\x6e\x93\x1a\x68\xde\xec\x67\xa3\x0f\x41\xdc\xfb\x1e\xa2\xfb\x89\xfd\x17\x51\xfd\xdf\x9a\xef\x31\x4d\x4b\xd1\x6a\x9b\xc4\x4b\xda\x96\x32\xfb\x30\x58\x59\xab\xdf\x71\x30\xdb\x82\x85\xc4\x6a\xda\x34\xd6\xda\x29\xd1\x64\xff\x62\x43\xb5\xaf\x93\x32\x9e\xa4\x66\x0e\x58\x9a\x7c\x51\x9f\xee\x06\xc1\xb4\xce\xe2\x15\xfb\x1b\x00\x00\xff\xff\xce\x65\xe5\xae\xe4\x09\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
