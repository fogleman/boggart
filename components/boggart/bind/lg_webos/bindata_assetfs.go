// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package lg_webos

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4d\x6f\xdb\x30\x0c\xbd\xf7\x57\x10\x3c\x0c\xdb\x00\xc7\x68\x3a\x14\x03\x66\xe7\xbc\x43\x7b\xd9\xba\x73\x21\x47\x74\xa3\x42\x96\x32\x91\x49\xb3\x1a\xf9\xef\x83\xfc\xd1\xb8\x8d\xe3\xb6\x3b\xed\x92\x48\x16\x3f\x1e\x9f\xc8\xa7\xba\x06\x4d\xa5\x71\x04\xb8\xf4\x4e\xc8\x09\xc2\x7e\x7f\x96\x69\xb3\x85\xa5\x55\xcc\x39\x06\xff\x80\x8b\x33\x00\x80\xe1\xd7\xa5\xb7\x49\xa5\x93\xf3\x39\xc4\x15\x57\xfd\x6a\xc7\xc9\xf9\xbc\xb3\x7f\xe9\xb3\xbb\x5d\x2b\x47\x76\x70\x7a\x6c\x21\x46\x2c\xbd\xb0\x68\xac\x56\xf3\x45\x5d\x83\x39\xff\xea\x00\x6f\xbc\x62\x41\x98\xc1\x7e\x9f\xa5\xab\xf9\x88\xf5\x10\xa9\x25\x15\x4a\xb3\xc3\x45\x96\x6a\xb3\x7d\x91\x7c\xe4\xd3\x33\x3c\x3d\x2b\xc7\x39\x22\x9a\x12\x66\x14\x82\x0f\x91\xb3\x29\x0c\xca\x52\x10\x68\x7e\x13\xad\xdc\x1d\x85\x7e\x63\xb8\x32\xcc\xaa\x18\x2d\xba\x09\x53\x6c\x44\xbc\x03\xf9\xb3\xa6\x1c\xdb\x0d\x1e\x6a\xf3\x4c\x08\x5a\x89\xea\x43\x75\xc9\x10\x54\x30\x2a\x59\x19\xad\xc9\xe5\x28\x61\x43\xb8\xf8\x20\xa6\x22\xfe\x96\xa5\x6d\x98\xd1\x9a\x26\x0a\x3a\xe6\xaa\xf3\x21\xa7\xa3\xc3\x29\x8a\x2a\x62\x56\x77\xf4\x1e\x92\x8c\x2b\xfd\xff\x4b\xd1\x54\x41\xef\x26\x29\x2b\x7d\xa8\x7a\xb4\x71\x9d\xac\x7c\x30\x8f\xde\x89\xb2\xd0\xec\xad\x2a\xc8\x26\x96\x4a\x41\x08\xde\x52\x6b\x86\x50\x91\xac\xbc\xce\x71\xed\xe3\x34\x18\x9d\x23\x93\xd3\x08\xce\x6f\x95\x35\x5a\x09\x9d\xe0\x6b\x40\xba\x11\xaa\xda\x2c\x77\xc1\x6f\xd6\x27\x18\x6e\xbc\x1a\x18\xd1\x36\xc7\x8e\x80\x03\xc9\xde\x49\xf0\xb6\x45\x0a\x9d\x36\x5c\xf4\xd2\x70\x31\xaa\x0c\x23\x14\xb5\xd3\x7d\xdd\x07\x8f\xf3\x0d\x19\xaf\x95\x7b\xd2\x22\xfa\xbd\x31\x81\x34\x2e\x3e\x67\x69\x3c\x98\x80\x9b\x36\x60\x26\x0c\x8e\xd5\xec\xb2\x47\x7c\xf9\x26\xc4\x4d\x14\xa1\x9d\xa8\x40\xea\xd9\x0d\x76\x7c\x40\x20\x36\x8f\xb1\x73\x6f\x7b\xb3\x78\x83\x0f\x9c\xe3\x17\x04\xa7\x2a\xca\x51\x5a\x2d\x8b\xb7\xd7\x2d\xfb\x22\x87\xe5\xc6\xae\x6b\x8e\x1b\xc9\xeb\x83\x4d\x55\x3f\xda\x86\xaf\x1d\x0d\x28\xb1\xee\x96\xbd\x35\x7a\x54\x36\xc7\x1c\xde\xd6\x44\xa7\x48\xaf\x74\xe2\xcb\x92\x49\x92\x8b\xd7\x18\xef\xa6\xfd\xd0\xef\xed\xdc\xf3\xa6\xa8\x8c\x3c\xb5\x64\x21\x0e\x0a\x71\x09\x6f\x96\x4b\x62\xc6\xc3\xeb\xf1\xb3\x71\x6a\x1f\x8f\x53\x53\xfe\xef\x3c\x66\x69\x24\x62\xf2\x95\x19\x6c\xbb\x65\xf7\x37\x50\x89\xc1\xc3\x7c\xcf\xd8\x2b\x4d\x5d\x03\x8b\x12\xb3\xfc\x7e\x73\x7d\x05\x1f\xdb\xf5\xaf\x1f\x57\x80\xa9\x56\xbc\x2a\xbc\x0a\x3a\x55\xcc\x24\x9c\x6e\xc9\x69\x1f\x38\xed\xb4\xc0\x87\xf4\x7e\xb0\x99\x55\xc6\xcd\x62\xe4\x52\x59\xa6\x4f\x31\xc1\x53\xf6\xbf\x01\x00\x00\xff\xff\x97\x9b\x23\x66\x15\x08\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6b\x14\x31\x1c\xc5\xdf\x6a\x45\x98\x63\xcf\x1e\xfe\x1e\x2c\x8a\xa4\x66\x66\x5b\x58\xb2\x9b\xad\x58\x5b\x10\x77\xb0\xd4\xd1\xb3\xa1\x13\x67\x07\x77\x93\x25\xc9\x88\x42\x0f\xd2\x9b\xe0\xd5\xab\xe0\x37\x50\xa1\xd0\x8b\xf5\x2b\x64\x4e\xde\xfc\x00\x7e\x0a\xd9\x1d\xab\xf4\x1d\x92\xf7\xf8\xbf\xff\x8f\xff\xaf\xf5\xb5\x8f\x00\x70\x15\xc0\x0d\x00\x5b\x00\xae\x01\x98\xa0\xd3\x0b\x00\xd7\x01\x28\x00\x6b\x00\x6a\x00\xd3\x1e\x60\x00\xac\x03\xf8\xd9\xeb\xfe\xdf\x3d\xa0\xf7\x97\x73\xa1\x2b\xcb\x27\xd7\xde\xab\x4a\xe3\xa9\x36\x25\x0e\xf5\xc2\xba\xc0\x72\x5f\xd5\x25\x7b\xd0\x54\x9e\x15\x56\x50\xa9\x5f\xdf\x7f\x55\x4f\xd5\xdc\x6e\xba\x26\x39\x78\x52\xb0\x5d\xa7\x55\xa8\xad\x61\x0f\x55\xd0\x82\x32\x9e\x0e\x18\xef\xb3\x6c\x40\x59\x5f\x6c\x6f\xdf\xe5\x7d\xce\x93\x89\xf2\x81\x15\x4e\x19\x3f\x53\xc1\x3a\x41\x8f\x57\x0c\xca\x1b\xa7\xe6\xb6\xb4\x34\xba\x04\x1e\x27\x13\x65\xaa\x46\x55\x9a\x15\x5a\xcd\x05\xfd\xcb\x82\x0e\x1b\xef\x6b\x65\x92\xfc\x51\xbe\xc7\x9e\x6b\xe7\x6b\x6b\x04\xa5\x9b\x3c\xd9\xb5\x26\x68\x13\x58\xf1\x76\xa1\x05\x05\xfd\x26\xdc\x5b\xcc\x54\x6d\x86\x74\x34\x55\xce\xeb\x20\x9f\x15\xfb\x6c\xf0\xbf\xb7\xbc\xe7\xa5\x76\x6c\xcf\x1c\xd9\xb2\x36\x95\xa0\xe4\x60\xd6\x38\x35\x63\xfb\xd6\xcd\xbd\x20\xb3\x58\x45\x2f\xfb\x43\xea\xac\x34\xb7\x52\x2e\x65\x4a\x1b\x1b\xb4\xb4\xfc\xa6\x4c\x53\xda\x21\x4e\x62\x95\xc7\x32\xbb\x18\x8d\xe4\xd6\xd2\xde\x5e\xd5\x46\x29\xa7\xe3\xe3\x6e\x65\x2c\x33\x7e\x87\x76\x28\x25\x41\xd9\x10\xf1\x73\x3c\x8f\xe7\xf1\x6b\xfb\x3e\x9e\xc6\xef\xf1\x2c\x9e\x22\x7e\x6a\x4f\xe2\x8f\xf6\x5d\xfc\x12\xbf\xc5\xb3\xf6\xa4\xfd\x80\x3f\x01\x00\x00\xff\xff\xf0\x6d\xfd\x25\xfd\x01\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
