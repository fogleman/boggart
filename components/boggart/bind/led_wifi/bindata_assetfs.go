// Code generated by go-bindata.
// sources:
// templates/views/index.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package led_wifi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xbb\x8e\xdb\x30\x10\xec\xfd\x15\x0b\xf6\xb4\x60\x1b\x38\xa4\x90\x0d\x04\x48\x52\xa5\x08\x90\x22\xe5\x81\x12\x57\x11\x13\x3e\x04\x71\x65\xfb\x22\xf8\xdf\x03\xea\x75\x8a\x2c\x5b\x2a\xc2\xc6\x7c\x0c\x77\xc7\x33\x43\xd5\x35\x48\xcc\x94\x45\x60\xa9\xb3\x84\x96\x18\xdc\x6e\x9b\x58\xaa\x33\xa4\x5a\x78\x7f\x64\xa5\xbb\xb0\xd3\x06\x00\x60\xbc\x9b\x3a\xcd\x8d\xe4\xbb\x3d\x84\x99\x37\xfd\xec\xea\xf9\x6e\xdf\xe1\xa7\x77\xae\xaf\x85\xb0\xa8\x47\xa7\xf7\x08\x52\xa4\x71\x82\x68\x50\xf9\xfe\xf4\xf5\xf3\x27\xf8\xa1\xbe\xa8\x38\xca\xf7\x33\x88\x31\x3b\x8d\xa2\xcc\xd4\x95\x9d\xe2\x48\xaa\xf3\xa4\xe1\xcc\xd6\x3f\x1c\x7a\x25\x66\x7a\x64\xae\x34\x3d\x30\xcc\x79\xee\x4a\xf5\xc7\x59\x12\x1a\x9a\xb5\x16\x09\x6a\xae\x31\x23\x06\xa5\xd3\xd8\xc2\x18\x18\xa4\xdc\xc9\x23\x2b\x9c\x27\x06\x4a\x06\x05\x8d\x11\x56\x32\xb0\xee\x2c\xb4\x92\x82\xf0\xbe\xe1\x94\x9c\x22\x34\x6d\xa3\x9f\xa5\xab\x8a\x19\x8a\xc3\xad\x86\x49\xc0\x1e\x99\x27\x41\xc8\xde\xad\xb3\x54\x3a\xdd\x52\x85\xce\xc8\x43\xef\xe3\x61\xd6\xc6\xe9\xa8\x6b\x50\xbb\x0f\x16\xd8\xf7\xb6\xf4\x36\xa4\xe6\x21\x95\xa8\x69\xf5\x84\xeb\x7d\xb0\x5e\x7a\x3e\x2f\xab\xf8\x4c\xab\x2c\x40\xdf\x05\x5a\xc6\x35\x58\x65\x8b\x8a\x80\xde\x0a\x3c\xb2\x34\xc7\xf4\x77\xe2\xae\x83\xa0\xbf\x3c\xf7\x17\x45\x69\xce\xc0\x0a\x83\xbd\xde\xab\x2a\x77\x23\x04\xa2\x73\x29\x48\x9b\xc1\xb6\x59\x6d\xbf\xb9\x0b\x96\x70\xbb\x41\xd3\x14\x65\x5d\x03\x5a\x19\x36\xa2\x15\xff\x70\x49\x77\x98\x7f\x0d\x2b\x8f\x9f\x1d\x8d\xac\xd0\xf6\xd5\x3b\xad\xe4\xec\x5b\x9c\xbb\xb0\x2e\xde\x8f\x22\x63\x24\x77\x59\xe6\x91\xf8\x61\x29\x2f\x49\x45\xe4\x6c\xab\x3d\x86\x97\xd8\xfa\xeb\xab\xc4\x28\x1a\xdc\x4d\xc8\x42\x42\x96\xfb\x2a\x4d\xd1\x7b\x76\x1a\xb2\xff\xb1\x28\xf4\x5b\x9b\xfd\x38\x6a\x8b\xfd\x4f\x21\xe3\x28\x28\xf1\xf4\xdb\x35\x5a\x76\xd3\xee\x67\xc8\xc9\xe6\x6f\x00\x00\x00\xff\xff\xa9\x00\xf1\xbf\xe2\x05\x00\x00"

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xbd\x6e\xd5\x30\x1c\xc5\x4f\xf8\x58\x32\x76\x66\xf8\x33\x50\xc1\xe0\x92\x5c\x3a\x20\xdf\xeb\x7b\xf9\x50\x2b\x21\x6e\x24\x54\x02\x33\x56\x63\xd2\x88\xc4\x8e\x6c\x07\x51\xa9\x03\x74\x46\x62\x62\x46\x3c\x00\x63\xa5\x0e\x50\xf1\x08\xce\x0b\xf0\x2c\x28\xc9\x85\xaa\x67\x39\xe7\xe7\x73\x6c\xf9\xcf\xd6\x8d\xaf\x00\x70\x1d\xc0\x2d\x00\xbb\x00\x6e\x02\x58\x63\xd2\x9b\x0d\xcb\x8d\x97\x00\x56\x11\xd0\x00\xd8\x02\xf0\x23\x9a\xfc\x77\x04\x44\xb8\xd4\xb5\xcd\x9b\x78\xdc\xb6\xf5\x31\x5e\x7a\xe9\x15\x0e\x54\x6b\xac\x67\x99\x2b\xab\x82\x3d\xe9\x4a\xc7\x72\xc3\xa9\x50\xef\x1f\xbd\xab\x8e\x64\x63\x76\x6c\x17\xaf\xa5\xf3\x2c\xb7\x52\xbb\x5a\x7a\x63\x39\x3d\x1f\x2b\xca\x3a\x2b\x1b\x53\x18\x5a\x5c\xd9\x2f\xe3\xb5\xd4\x65\x27\x4b\xc5\x72\x25\x1b\x4e\xff\x99\xd3\x41\xe7\x5c\x25\x75\x9c\x3d\xcb\xf6\xd8\x6b\x65\x5d\x65\x34\xa7\x74\x27\x89\x9f\x1a\xed\x95\xf6\x2c\x3f\x6e\x15\x27\xaf\x3e\xf8\xfb\x6d\x2d\x2b\x3d\xa7\xc3\x23\x69\x9d\xf2\xe2\x55\xbe\xcf\x1e\x5e\xee\x86\xff\xbc\x55\x96\xed\xe9\x43\x53\x54\xba\xe4\x14\xbf\xa8\x3b\x2b\x6b\xb6\x6f\x6c\xe3\x38\xe9\x76\x44\x27\x1e\xcc\x69\x8a\x42\xdf\x49\x13\x21\x52\xda\xde\xa6\x21\x26\xb7\x45\x9a\xd2\x8a\x12\xe2\x23\x2f\xc5\xec\x5f\xb5\x10\xbb\x43\xbc\x3b\xce\x16\x69\x42\x27\x27\xd3\x95\xa5\x98\x25\xf7\x68\x45\x29\x71\x9a\xcd\x11\xbe\xf5\x1f\xc3\x79\xf8\x19\xce\xc2\xaf\x70\xde\x9f\xf6\x9f\x11\xbe\x87\x8b\xfe\x53\x7f\x1a\x2e\xfa\x2f\xc3\x61\x38\xc3\xdf\x00\x00\x00\xff\xff\x4e\x02\x3e\x89\xd3\x01\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html":       templatesViewsIndexHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
