// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x93\xdb\xb6\x11\xfe\xee\x5f\xb1\xc3\xb9\xd4\xa7\x24\xd4\x7b\xdc\xf6\x22\x29\x1f\xea\x74\x9a\x99\xa4\x93\xb1\xaf\xed\xb4\x49\x7a\x03\x89\xd0\x09\x31\x09\xd0\x00\xa8\xf3\xf5\x46\xff\xbd\x03\x80\x2f\xa0\x4e\x2f\x24\x45\xde\x59\x36\x35\xe3\xb3\x48\x00\xbb\xc0\xb3\x0f\x76\x21\x70\x89\x87\x07\xf0\xf0\x92\x50\x0c\xce\x82\x51\x89\xa9\x74\x60\xb3\x79\x31\x11\x0b\x4e\x42\x09\xf2\x3e\xc4\x53\x07\x85\xa1\x4f\x16\x48\x12\x46\x7b\xbf\xa3\x35\x32\x85\xce\xec\x05\x00\xc0\x32\xa2\x0b\x55\x02\x6b\xe4\x47\xf8\xaf\x8c\x07\x48\x5e\xd2\x0e\x3c\xe8\x52\xf5\xe1\x58\x46\x9c\x02\xc5\x77\xf0\x03\x95\x7e\xf7\xef\x51\x30\xc7\x3c\xae\xd9\xe9\x2e\x93\x26\xdf\xea\x16\x9b\x17\x93\x9e\x51\x30\x7b\x31\xf1\xc8\x1a\x16\x3e\x12\x62\xea\x70\x76\x17\x6b\xb4\xef\x2e\x98\xef\x06\x9e\x3b\x18\x82\xfa\x26\x82\xe4\xdb\x07\xe1\x0e\x86\x71\xfd\xed\x36\x1f\x6e\x42\x44\xb1\x6f\x95\x3e\xae\x91\x80\x91\xaf\x93\xd6\xe3\xcc\xc7\x53\x47\xa2\xf9\x2e\x49\x69\xcd\xc8\x4f\x04\x52\xb4\x06\x8a\xd6\xae\x44\x73\x01\x73\xc4\x6f\xd4\x17\x27\x13\xe3\x13\xb1\x4b\x57\x2a\xc9\x27\x71\xdd\x90\x63\x81\xa9\xd4\xb6\x70\x1e\x1e\x80\x2c\x01\xbf\x87\x2e\x32\x26\x70\x94\xf1\x12\x9d\xea\xde\x1a\xab\x4a\x98\x7a\xb0\xd9\xcc\x26\x08\x56\x1c\x2f\xa7\x7b\xda\x65\x96\xbd\x5a\x33\xe2\x5d\xf6\x3b\xdf\xaa\xb6\xbe\xc0\xb0\xd9\x3c\x3c\x40\xf7\x0d\x7e\x1f\x61\x21\xbb\xff\x78\xf3\x63\xf7\x67\x24\x57\xe6\xb6\x11\xee\xcc\x94\xd0\xc1\x9f\x28\x38\x7f\x89\x38\xc7\x54\x42\x80\x91\x88\x38\x0e\x30\x95\xc2\x81\x2e\x6c\x36\x93\x1e\x9a\x4d\x7a\x3e\xa9\x61\xa0\x01\xa3\x72\xe5\xdf\x57\x1d\xaf\xd5\xbc\xca\xb0\xbf\x33\x72\xa6\xb1\x98\x3f\x20\xdf\x9f\x0e\x76\x61\xf1\x93\xa9\x00\x42\x0d\x44\x48\xb2\xa8\x1f\x09\x8f\x88\xd0\x47\x95\x91\xb0\x9a\x9f\x82\x44\x2c\x66\x17\x06\xaf\x13\x0d\x35\x0f\x1c\xaf\x15\xb3\x5c\x46\x5d\xb6\x5c\x56\x1d\xfe\x23\x21\xa7\x80\x90\x13\xb6\x0b\x8a\xef\x75\x05\x60\xb4\xa7\xb5\x35\x04\x48\x88\xa9\xbb\xf0\x99\xc0\xa7\x82\x92\x13\x54\x07\x30\xa9\xc0\x43\xe0\x84\x98\xf6\x62\xad\x35\x03\xb4\x62\x3e\xf1\xd0\xbd\xa8\x8a\x8b\xdd\xfe\x14\x38\x12\x39\xbb\x50\xf8\x5b\xaa\xe3\xf8\xe0\x27\xbd\xc8\xdf\x53\x62\x05\x33\x89\xe6\xee\xfe\x70\x96\x6b\xb1\x15\xd6\x6c\x09\xea\x0e\x2c\x91\x87\xc1\x20\x06\x84\x1e\x90\xa6\x3e\x07\xbd\xee\xc1\x96\xba\x3f\x61\xaa\x1d\x7f\x90\x6e\x10\x49\xec\xc1\x92\x51\xe9\x0e\x46\x10\xb8\x73\x77\xd4\x3f\xa2\xdf\xea\x07\x47\x77\x70\x99\x8f\x4e\x1e\x92\x18\x24\x09\x30\x30\x0a\x1e\x5e\x93\x05\x86\x2f\x34\xea\x94\xf8\xe9\xbf\xcb\x90\x13\x2a\xc1\xc9\xad\x87\x7e\xdd\xb3\x20\xfa\xd5\x99\x79\x6c\x11\xa9\x80\xd7\xbd\xe3\x44\xe2\x4b\xa5\xe4\x9a\xbd\x95\x9c\xd0\xdb\xcb\x97\x0e\x5c\x76\xd5\x9d\xae\x59\xfa\x80\x33\xec\xf7\x5f\xb9\xfd\x81\xdb\x1f\x5e\x0f\xbe\xb9\xea\x8f\xaf\xfa\xdf\xfc\xa7\xff\xc7\xab\x7e\xdf\xe9\x80\xf3\xb2\xd3\x49\x17\x42\x4e\xa7\x53\x08\xb3\x5e\x38\x7b\x71\xbc\x96\x5a\x6f\x60\xcb\xb6\x3e\x06\xfd\xd7\x15\x92\x93\x10\x7b\x0a\x1b\x64\xee\x7b\xd2\xe5\x58\x84\x8c\x0a\x65\x72\xca\xee\x38\x0a\x1d\x10\xf2\x5e\xf1\xe4\x8e\x78\x72\x75\x35\xe8\xf7\xbf\x28\x68\x89\x89\x5c\x61\xe4\x15\xad\xcb\x8b\x55\x8c\x05\x6f\xc5\xdc\x64\xfa\xc8\x55\x45\x29\xd7\x03\xe8\xc1\xbf\x6a\x90\x33\xac\x49\xce\xa8\x26\x39\xe3\x4a\x72\x26\xbd\xa2\xf6\x50\x32\x4b\x58\x79\xce\xbc\xfb\x12\xf3\x98\xde\x62\xb8\x20\x5f\xc3\x85\x5a\x51\x09\xb8\x9a\x42\xd7\x7c\x2b\x30\x3d\x8c\x42\x6e\xfc\x12\xa2\x1e\x5c\xe2\xf7\xb1\xa0\xae\x26\x0d\x5c\x98\xf9\xa9\x2f\x3a\x76\xf1\xbf\x31\xe2\x49\xa9\xfa\xde\xb1\x22\x88\x88\x16\x0b\x2c\x84\x15\x42\x4a\x58\xc6\x4b\x2d\x63\x77\xa4\x6b\x5c\x06\x5c\x68\x27\xe4\x78\x48\xac\xe6\x0c\x71\x4f\x07\xae\x87\x87\x5c\xaf\xb4\x15\x0b\xc2\x9d\xe8\x2c\x5c\x59\x37\x28\xf4\x5b\x70\xcb\xf3\xd9\x3f\x06\xb3\x0e\x5f\x0f\x60\xb3\xb1\xfc\x5a\xa9\x7e\x18\xbb\xdd\xca\x4c\xd8\x35\x57\x80\xf7\x8b\xda\x3e\x3f\xa8\x10\xd1\xc4\x82\x3e\x9a\x63\x1f\xf4\x5f\xd7\x53\x14\xe3\xce\xac\xd6\x51\xbf\xc6\xbe\x44\xf9\xa1\x43\xaf\x5e\x60\x0d\x16\x39\x15\x93\x9e\x1a\x64\x69\x90\xf5\x1a\x86\x2c\xc1\x6f\x18\xe9\x64\xde\xb4\x50\x43\xe6\x68\x9a\x81\x9a\xd0\x25\x6b\x71\xce\x3b\x0f\x33\x80\x9a\x9d\x07\x5e\xa2\xc8\x97\xcd\x43\x5d\x15\x07\x8d\x67\xf1\x50\x71\x3e\x81\x65\x58\x67\x60\x19\x9e\x4b\x60\x19\x36\x3f\x0b\x87\x8d\x06\x96\x46\x90\x6e\x24\xb0\x9c\x27\xd4\x56\x60\x69\x04\xea\xfa\x03\xcb\x79\xe2\x6c\x3b\x8f\xb3\x09\x2c\xbb\xa0\x6e\x03\xcb\x16\x48\xa3\x3a\x03\xcb\xe8\x5c\x02\xcb\xa8\xf9\x59\x38\x6a\x34\xb0\x34\x82\x74\x23\x81\xe5\x3c\xa1\xb6\x02\x4b\x23\x50\xd7\x1f\x58\xce\x13\x67\xdb\x79\x9c\x4d\x60\xd9\x05\x75\x1b\x58\xb6\x40\x1a\xd7\x19\x58\xc6\xe7\x12\x58\xc6\xcd\xcf\xc2\x71\xa3\x81\xa5\x11\xa4\x1b\x09\x2c\xe7\x09\xb5\x15\x58\x1a\x81\xba\xfe\xc0\x72\x9e\x38\xdb\xce\xe3\x6c\x02\xcb\x2e\xa8\x3f\xb6\xc0\x52\xfc\x49\x59\xb9\x5e\x4c\x7a\x05\x9f\x95\x4d\x7a\xfa\xd9\xed\xd1\x87\xf3\xd6\x8c\xdb\x9f\x0e\x73\x50\xc8\xf3\x3c\x49\x7e\x9a\xa7\xc8\xaf\x91\xc4\x27\x3f\x6c\x7d\x2b\x2b\x48\x29\x46\xa0\xc2\x8f\x59\xab\x3f\x62\xd5\x64\xd0\x8f\x58\x0d\x2d\x4a\x3c\x63\x2d\xb7\x06\xab\xe4\x22\xf2\xb9\x15\xca\x49\xe8\x5e\x76\xaf\x49\x50\x24\xc3\x02\x36\x9b\x97\x39\x2f\x52\x76\xe1\x68\xd6\x60\xb1\x52\x6d\x68\x93\xf8\x63\x2c\xcf\xa8\x03\x17\x71\x82\x64\x9a\x13\x14\x17\xa9\x99\x75\x61\x27\x4f\x3e\xaf\x73\x29\xe4\x58\xea\x70\x2a\xb9\x74\xb2\xd6\xb1\xb4\x8e\xa5\x75\x2c\xbb\x3a\x7d\xc4\xb1\x84\x78\xbf\x6b\x89\x67\xd7\xe7\xe4\x5c\xac\xfc\xe5\xe3\x9d\x59\x32\x1e\x00\xf1\xa6\x59\xab\xd8\xc5\xa8\x02\x77\xc5\x38\xf9\x1f\xa3\x12\xf9\xa0\xaf\xcd\x42\xd6\xc7\x4b\xe9\x68\x7f\xe3\x4a\x76\x7b\xab\xbc\xca\x1a\xf9\xc4\x43\x92\x71\x07\x02\x2c\x57\xcc\x9b\x3a\x21\x3b\x98\xc0\x9f\xeb\x85\x95\x9b\xa9\xf5\xdc\x72\x16\x85\x05\x1b\x6b\x01\x66\x9d\x9d\xbe\x01\x41\x25\x67\xbe\x1b\xdf\x34\xef\x43\x8c\x93\xd7\x21\xc6\xd6\xdb\x10\x6a\x54\x53\x27\x60\x1e\xbe\x91\x83\x12\xfa\x20\xde\x71\x30\x9e\x67\xc5\xee\xe0\x7a\x60\x7c\x4f\x7e\xf9\xcf\xf1\xfb\x88\x70\xec\x39\xb3\x2f\xcb\x2e\xca\x27\x3d\xdd\xfd\x12\x0d\x1e\xbf\x03\xf2\x2a\x19\xf3\xab\x9d\x6f\x80\x14\x92\x4a\x68\x18\x25\xee\x62\xb1\xc2\x8b\x77\x73\xf6\x21\x25\xc9\xef\xc2\x15\x77\x44\x2e\x56\x0e\x50\x14\xe0\x0c\x4a\x4d\xa9\xf4\x22\xcd\x7b\x8d\x93\x47\xbb\x71\x49\x07\x1c\xc9\xa3\x38\x29\x5b\xc9\xc6\x5e\x3a\x8f\xa0\x57\x06\x2b\x8f\xac\x8b\xce\xe8\xe2\x55\x3f\x06\x56\x96\xb5\xd7\x16\x2b\x87\x2d\x2b\x71\x06\xa5\xc5\xca\xe1\x5e\x56\x0e\x5b\x56\x1e\x65\xe5\xe8\x34\x56\x8e\x5a\x56\xe2\x0c\x4a\x8b\x95\xa3\xbd\xac\x1c\xb5\xac\x3c\xca\xca\xf1\x69\xac\x1c\xb7\xac\xc4\x19\x94\x16\x2b\xc7\x7b\x59\x39\x6e\x59\x79\x8c\x95\x28\x60\xd1\xc1\xd7\x8c\x76\x7d\xf2\xcc\x8c\x45\xb4\xec\xcc\x43\x9a\x31\x34\xb9\xb1\x9b\xa5\xa6\xb4\x65\xea\x31\xa6\x86\xec\x0e\xf3\x93\x88\x6a\x24\xb4\x3c\xcd\x01\x9a\xd1\x34\xbe\xde\xcd\x52\x5d\xd8\x92\xf4\x68\x90\x27\x01\x3e\x89\xa3\x5a\x40\x4b\x51\x1b\x4e\x2b\xd4\xeb\xcb\x3d\xc1\x9e\x04\xb8\xe5\xe7\x31\x7e\x7a\x48\x9e\xc6\x4f\x2f\xdd\xc6\x6e\xf9\x19\xc3\x99\xf1\xd3\x5c\x3e\xe2\xa7\xba\xdd\x52\xf3\x00\x35\xd5\xdc\x3d\x61\x87\xf3\x07\x2a\x31\x5f\x9b\x4d\x60\xa0\x4c\xc2\x22\x7e\x65\x5c\x22\x4e\x92\x63\x1b\x3e\x69\xba\x52\x7d\x40\x4f\x42\xcd\x04\x4e\x4d\xcc\xf4\x42\x67\x68\xe8\x43\x12\xba\xf1\x3d\xd8\x6c\x1c\x08\x91\x94\x98\xd3\xa9\xf3\xdf\x5f\xdc\xaf\x7e\xfb\xee\x97\xbe\xfb\xe7\xdf\xbe\xbc\x70\x5a\x4a\x06\xa7\x6c\x6f\xe6\x28\xd9\xd2\x31\xdb\xde\x4c\x2f\x1e\xd1\x71\xd8\xd2\xf1\x18\x1d\x2b\xef\x6b\xe6\xe8\xa8\x97\xf2\x5f\x9b\xa3\x34\x10\xf5\x3e\x97\x90\xbe\x8b\x94\x23\x9b\x94\xa3\x1d\xa4\x1c\xb5\xa4\x3c\x46\xca\xca\xdb\x9a\x39\x52\xa2\xa5\xc4\x1c\x42\x8e\x85\x80\x39\x5a\xbc\x83\x79\x24\x25\xa3\x9f\x29\x2f\xc7\x36\x2f\xc7\x3b\x78\x39\x7e\x36\x5e\x96\x26\xa6\x4f\x6f\x04\xf3\x89\xe7\xcc\x9e\x94\xd9\xc5\x0c\x97\xb0\x9c\x2d\x97\x02\x4b\xb7\xac\x83\x9d\x18\x96\xc6\x96\xe4\x58\x60\x99\xfe\x62\x98\x4b\x0a\x73\x49\x4d\xfe\x72\x62\x41\x53\x25\x4b\x0b\x7a\x63\x9a\x98\xb4\x20\x23\xec\x94\x1e\x88\x68\x1e\x90\xc7\x5d\x48\xb2\xd5\x93\x5e\x08\xb4\xc6\x56\x27\xde\xaa\xcb\x8a\x7d\xa8\xdf\xb1\x4d\x7a\xca\xe0\x95\x52\x4b\xec\xe3\xbe\x0a\x64\x43\x7d\xda\xa7\x2a\xbd\xce\x4e\xf0\xab\x9c\xb5\x56\xe9\x64\xa6\x8f\xe0\xe4\x21\x78\x94\xc1\xe6\xa1\x7b\x9d\xbf\x96\x50\xa4\x54\x2a\x79\x19\x1b\x40\x96\x14\xa6\x94\x66\xf9\x67\x4e\xe9\x83\x7f\x2c\x51\xe6\xc0\x21\x25\xef\xe8\x71\x43\x25\xf3\xd7\x0a\x1b\x0b\x3e\x92\x04\xf8\xcf\x76\x6a\x27\xe3\x09\x3c\x57\x45\xad\xa1\x7d\x6a\x69\x76\x72\x6b\xc5\x39\x7f\x40\xf8\x3f\x55\xd0\x38\xd9\x95\xbc\xc6\x26\xbf\x92\x24\x8b\xba\xb3\x73\x28\x55\xdd\x40\x96\x45\xac\x7f\x6e\x65\x3b\xfc\xe5\xbd\x81\xd9\x5a\xd4\x1b\x8a\x4a\x4c\x17\x73\xce\x78\xa5\xb7\x80\xa4\x97\x3b\xad\x31\x79\x73\x50\xad\x30\xf3\xd2\xbb\xdf\xc7\x3a\x2a\xf5\xb6\xe8\x8c\xdd\xd1\xbf\x72\xba\xd2\x86\xb5\x24\x10\x67\x18\xe8\x15\x53\xf9\x24\xe2\x4a\x7d\x37\xd6\xa5\xd8\x52\xef\x55\x7f\xd1\x2b\x43\x44\x72\x46\x6f\x77\x9a\xbb\xb2\xd0\xf4\x7d\xd6\x5a\xbb\x0a\xd9\xcf\xc3\x9f\xfd\x88\x23\x1f\x9c\xaf\xbe\xf0\x40\xe0\x05\xa3\x9e\x63\x5f\x08\xe7\x91\xe6\x8b\xdc\x39\xa0\xdb\xa5\x27\xf4\xea\x04\x1a\x1f\x18\x98\x3d\xae\x67\x1b\x56\xb9\x57\xea\xb6\x3f\x93\x9e\xa1\x56\x65\xb6\x57\xd4\x5f\xcd\x13\x95\xd7\x95\xf3\xdf\xb9\x63\x68\x13\x3f\x0e\x8c\x42\x80\x65\x92\x55\xd0\xe4\xd2\xeb\xb4\xe8\xf3\x13\x7a\x87\xad\x8d\xbe\xca\x91\x27\x40\xef\xcc\x63\xae\x66\x42\xcf\x96\xf8\xe7\x8b\x3d\xf9\xce\xec\x0b\x02\xd5\x96\xf4\x35\x90\xf1\x24\x73\x3e\x25\xef\x7e\x44\x42\x9a\x0d\x67\xb0\x0e\x50\xaf\x48\x3e\x1f\x09\x69\x12\x51\x6e\xd8\x72\x79\xd3\xec\x2a\xe8\xa0\xb2\xe7\x23\x66\x4d\xeb\x9b\x7d\xa3\xab\xb8\xdc\x79\xca\x49\x70\x1e\x64\xa7\x35\x72\x9d\x3e\x21\xd5\xb7\x75\x7d\x52\x4c\xa7\x2d\xd1\x1b\xd9\x96\x39\x3c\xbe\x03\xfb\xbe\x7b\x8a\x76\xdc\xde\xba\x65\x5d\xc6\x5f\xe3\xff\xd2\xee\xfc\x3f\x00\x00\xff\xff\x46\xcf\x27\xb1\x28\x69\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6c\x5c\x57\xf5\xff\xe5\x1f\xcf\x4c\xed\x49\x6c\xb7\x7f\x28\x9f\x6d\x6f\x49\x6d\x5a\x92\xb1\x3d\xb6\x85\xd0\x38\x76\x50\x6b\xb7\x24\xc4\x50\x25\xa6\xa8\x42\x50\x5e\x67\xee\x78\x9e\x32\xf3\xde\xf0\xde\x9b\x18\x4b\x15\x78\x6c\xdc\x34\xb8\x60\xa8\x1a\x85\x05\x50\x85\x2c\xd9\x4c\x5c\x4f\x33\xb1\x3d\x63\xc1\x82\x15\x42\xe7\x4a\x48\x08\x16\xdd\xb0\x40\xb0\x62\xc9\x0e\x74\xde\xbd\x1e\xcf\xd8\x63\x64\x16\x79\x92\x7d\x3e\xef\x39\xe7\x9e\xdf\x39\x57\xf3\xe1\x63\x5d\xb7\x00\x60\x0c\xc0\xa7\x01\x6c\x9e\x00\x5e\x02\x70\xf9\x24\xc2\x2f\xd7\x05\x7c\x04\x80\xdd\x05\x3c\x0e\xe0\x7b\x5d\xc0\xb3\x00\x6e\x75\x01\x9f\x02\xd0\x30\xf2\x5f\x8c\x7c\x32\x02\x3c\x09\xe0\x29\x43\xa7\x22\xfa\xfc\x37\x23\x40\x17\x00\x2f\x02\x9c\x06\xb0\x10\x01\x38\xc5\x6a\x04\x88\x03\xb8\x19\x01\x62\x1c\xd7\xd8\x7f\x11\x01\x1e\x05\xf0\xeb\x08\x30\x00\xa0\x6e\xe8\x5f\x23\xc0\xd3\x00\xba\xa3\xc0\x23\x00\xce\x46\x81\x67\x00\x8c\x47\x75\xfe\x57\xa3\xc0\x53\x00\x4a\x51\xed\x77\x2b\x0a\xf4\x02\xb8\x1f\xd5\x71\x7f\x17\x05\xba\x01\xfc\x31\xaa\xf3\x7e\x18\x05\x22\x00\xfe\x11\x05\x1e\x03\xf0\x4f\x23\x9f\x8c\xe9\x7a\xbb\x63\xba\xae\x5e\x43\x1f\x37\xf4\x49\x43\x07\x63\x3a\xce\x50\x4c\xc7\x4d\xc5\x80\x1e\x00\xd3\x46\xfe\x6a\x4c\xc7\x7b\xd5\xf8\xbf\x66\xe8\xbc\xa1\xae\xa1\x0b\xc6\xef\xfb\x86\xae\xc6\x74\x7f\xd6\x62\xc0\xff\x01\x58\x37\xf5\xbc\x13\x03\x2e\x9c\x00\x6e\xc7\x34\x66\x7f\x7a\x04\xf8\x3c\x80\x78\x37\xf0\x6d\x00\xcf\x77\x03\x17\x00\xdc\xed\x06\xb2\xdc\xaf\x6e\x60\x06\xc0\xa5\x1e\x60\x02\xc0\x4f\x7a\x80\x71\x00\xbf\xef\x01\xce\x00\x38\x11\xd7\x7d\x1c\x88\x6b\x7c\x87\x8c\x3c\x13\x07\xfa\x01\x7c\x25\xae\xfb\xf2\x5a\x5c\xe3\xe9\xc5\x81\x11\x00\x3f\x8d\xeb\x7c\xbf\x8d\xeb\x3c\x67\x4e\x01\xdf\x02\xf0\xc3\x53\xc0\x13\x00\xfe\x7e\x0a\xb8\x04\x20\x76\x1a\x78\x19\xc0\x95\xd3\xc0\x1c\xd7\x65\xe4\x7f\x9d\x06\x3e\x0b\xe0\x62\xaf\xc6\xf5\x3b\xbd\x1a\xaf\xdb\xbd\x7a\x5e\x1e\xf4\xea\x3e\xfe\xc1\xd8\xff\xdc\xab\xeb\xf9\x77\xaf\xae\xa7\xbf\x0f\xf8\x18\xe7\x35\x74\xc2\xd0\xab\x86\x5e\xeb\xd3\x73\xb0\xd2\xa7\xeb\xb9\xdb\xa7\xe3\xfc\xc6\xe8\xff\xd6\xa7\xe3\xc4\xfa\x35\x7e\x9f\x34\x74\xd0\xd0\x51\x43\xa7\xfa\x75\xde\x4b\x86\x7e\xa3\x5f\xd7\x97\xef\xd7\xe7\xcb\x46\xff\x6e\x3f\x70\x42\xaf\x4c\x98\xff\x13\x86\xe7\x5e\x7e\x94\xe3\x43\xc7\x3b\x05\x8d\xe7\xde\x77\xce\x50\x9e\x15\xc6\x3b\x6a\xe4\x8f\x43\xe3\xcd\xbb\x95\x80\xee\x39\xef\x27\xcf\xca\x19\xe3\xf3\x0c\xda\xbf\xff\x87\xc6\x88\xeb\xe1\xbb\x9e\x35\xfa\x47\xcd\x7e\xf7\x1a\x39\x09\xe0\xb9\x96\x73\xa2\x85\x1f\x84\xbe\x17\x7f\xdc\x27\xde\x99\x3e\x00\xc3\xd0\xf3\xc1\x1f\xe3\xc4\x33\xca\xf8\x70\x2f\x3e\x07\xe0\x33\xdc\x33\xe8\x1d\x7c\xc2\xf8\x0d\x19\xca\x38\x63\x20\x23\x7c\x99\x76\x9d\xcc\x3e\xe7\xe3\xec\xbe\xf6\x6c\x8b\xfa\x85\x9c\xe5\xcc\x4b\x91\xb1\xfd\x62\xde\x5a\x14\x05\x37\x23\x45\xd6\xb2\xf3\x32\x23\x16\xec\x20\x27\xa4\xe7\xb9\x9e\x18\xe8\xec\xe8\x97\xd2\x69\xe9\x1f\xb2\x05\x76\xe1\x78\x41\x42\xc7\x66\x90\x92\xe7\x49\x27\x10\x19\x2b\x90\xc2\x72\x32\xda\xea\x3a\xa2\x20\x03\xe9\xb5\x9b\xf7\x4c\x19\x79\xdd\x4e\xcb\x30\xb2\x31\x17\xa4\xe5\x97\x3c\x59\x90\x4e\xe0\x63\xda\x0a\x64\xf8\xaf\x19\x0f\xd3\xd6\x22\xa6\xa5\x9f\xf6\xec\x62\x60\xbb\x0e\xa6\x75\x29\x98\xb9\xce\x27\x84\xeb\x0c\xbb\xd9\x6c\x53\x2a\x4a\x67\x38\x9d\x77\x7d\x89\x97\x64\x70\x8c\x26\xb5\x7a\x1d\xdd\x05\xf6\xca\xb9\x79\x3b\x63\x2d\xfa\x9d\x3d\xbe\x64\xac\xb8\xe8\x04\xd2\xbb\x6e\xe5\x45\xd6\xf5\x84\x95\x0d\xa4\x27\x8a\x9e\xf4\x7d\xf1\xba\x95\xbe\x26\x5e\x2f\x05\x81\xeb\xb4\x3b\xa5\x4d\x23\x02\xcb\xb3\xb3\xd9\x76\x9b\xe3\x06\xff\xd5\x5e\x74\x17\xa4\x77\x4e\x57\xce\x1d\xe3\x5e\xe3\xb2\xe5\x07\xda\x22\xb8\x35\xad\xa2\x83\x59\xeb\x9a\xd4\x6e\xb3\xfb\x8d\xc7\xac\xeb\x04\x39\xfd\x3f\xbf\x28\xfc\xc0\x0a\x6c\x3f\xb0\xd3\x3e\xae\x48\x5f\x06\xb8\x6a\x5d\x97\xb8\x9a\x73\x17\xc4\x5c\xd2\xd0\x51\x43\xc7\x0c\x1d\xd7\xd4\x2a\xb8\x25\x27\xd0\x7c\x98\x25\xe4\xc2\xec\x9a\x0d\x31\xbd\x1a\xb0\x69\x2e\x29\x86\xc5\xd7\x73\x98\x1b\x35\x74\xcc\xd0\x71\x4d\x5f\xb1\xf2\x25\x09\x8d\x26\x5f\xc4\x75\xc0\xf8\xe2\x8a\x2c\xba\x5e\x90\x98\xf5\xe7\xed\x4c\xe2\xf9\xd2\xbc\x9f\x98\x73\x53\x3c\x59\x5f\xbc\x66\xe7\xac\x82\x3b\xe4\x95\x7a\xf8\xd2\x89\x39\xcf\x72\xfc\xbc\x15\xb8\x5e\x4a\x7c\x39\x34\x89\xd9\x92\x67\x15\xdc\x8c\x2b\xce\xb7\xf9\x4f\xf5\x5c\xb6\x9c\xf9\x92\x35\x2f\x13\x73\xd2\x2a\xa4\x44\x53\x4e\x89\x2b\x25\xdf\xb7\x2d\xa7\x67\xf6\xe2\xec\x4c\xe2\x15\xe9\xf9\xb6\xeb\xa4\x44\x72\x68\xa4\xe7\x05\xd7\x09\xa4\x13\x24\xe6\x16\x8b\x32\x25\x02\xf9\xdd\x60\xb8\x98\xb7\x6c\x67\x42\xa4\x73\x96\xe7\xcb\x60\xf2\x6b\x73\x2f\x26\xbe\xb0\xef\xc7\xf5\x64\xa5\x97\x98\x71\xd2\x6e\xc6\x76\xe6\x53\xa2\xe7\xe5\x7c\xc9\xb3\xf2\x89\x17\x5d\xaf\xe0\xa7\x84\x53\x0c\x45\x7f\x72\x6c\x42\x68\x76\xd2\x19\x48\x8e\x4c\x4e\x26\xc5\xe0\xa0\x60\x76\xe4\xe9\xc9\x64\x52\x5c\x10\x23\x22\x15\xca\x53\x93\xa3\x7b\xa6\xf3\x93\xe3\xcc\x3e\x1b\xba\x9d\x4f\x8e\x88\x37\xde\xd0\x47\xa6\x26\x47\x47\x9e\x13\x17\x44\x52\xa4\xc4\xe8\x04\xbf\x31\xaa\x4c\x55\xda\x52\x2b\x54\xa7\x4d\xaa\x1c\xd4\xa8\xb5\x83\x9a\xf0\x05\x3a\x70\xe8\xa0\x4a\xad\x1d\x52\x81\x7e\x46\xf7\x69\x87\xaa\x54\x0f\xff\x6a\x54\x15\x6a\x89\xaa\xf4\x01\xd5\x68\x87\x1a\xb4\x21\xa8\x16\x86\xab\xd1\x16\x55\xd4\x9b\x54\xa3\x9a\xa0\xfb\x54\xa1\x0d\xaa\xaa\x25\xf5\x16\xd5\x68\x9b\x1a\xaa\xac\xde\x16\xaa\x2c\xa8\x11\x6a\xee\xd1\x16\x35\xe8\x01\xef\x1d\xdd\x55\x65\xda\xa5\xaa\x7a\x8b\xea\xd4\xe0\x68\x2d\xf9\xd4\x5a\x4b\x36\xb5\xd6\x21\x57\xa7\x02\xd9\x4b\x2d\x73\x7a\xda\xa0\x0a\xa7\x7f\xf8\x65\x1e\xcc\x79\x44\xb1\xbf\xd2\xad\x55\x37\x75\xa1\x9b\x54\x51\xcb\x54\x11\x5c\xcc\x46\x78\xd3\x1d\xb5\x2e\xa8\x4e\x15\xa1\xca\xea\x06\x55\xd5\xb2\xba\x11\x46\xa8\xb6\x9e\xad\xb0\x53\xf3\x6c\xe8\xbd\xa2\xca\x6a\x59\x2d\x71\xb9\xcc\xf1\xb5\xc2\xb2\x0f\x24\xdc\xa5\x06\x97\xc3\x37\xe7\x6a\x69\x9b\x8b\x7a\x57\x47\x6a\x32\xed\xe5\xb0\x9a\xef\xf8\x36\xe8\x97\xb4\x4b\x35\x55\xa6\x8a\x6e\x34\xf7\xbe\xed\x86\xec\x7c\x87\x1a\x74\x4f\xad\xa9\x65\x16\x05\x6d\xd0\x16\x6d\x0f\xd3\x86\x5a\x63\xe6\x90\xb9\xa1\x96\x69\x4b\x2d\x69\x05\x55\x87\x43\x48\x5a\x14\xa0\xf7\xa8\x41\xdb\x6a\x85\x9b\xf1\x70\xe6\xef\x70\x82\x87\x32\x3f\x1d\xd2\xec\xaa\xa5\x10\x8a\x4d\x56\xa8\x1b\x3c\x47\x6a\x55\x84\x62\x95\x1e\xfc\x8f\xe1\x0f\xc7\xd2\x03\x56\xd7\x3b\xd2\x76\xa1\x8e\x97\xd9\xe5\xf8\xb4\xcd\xa7\xea\x54\xa1\x0f\xc2\x59\x08\x41\xda\xe2\x91\xa7\x5d\xda\x3a\x66\x28\xf5\x23\xbe\x81\x5a\xa2\xf7\xb5\xb8\xdc\x9c\xc1\x2a\xbd\x4f\x0d\x56\x54\xd4\x12\xd5\xd4\x0f\x78\xe8\x8e\x53\x5b\x9d\x61\xdf\x0f\x53\x53\xab\xad\x41\x34\x3c\xbc\x31\x2b\xb4\xc3\xef\xc4\xf1\x82\xee\x50\x43\xdd\xe4\xab\x85\x0b\x53\x3b\xd7\x9c\x79\x8d\x50\xb8\x05\xe1\x92\x71\xc0\xf7\xf6\xba\x63\xe0\xa9\x9a\xd9\xa5\x6d\xf5\xe3\x7d\x4c\x3b\xfa\x6d\x1c\xf6\x6a\x2e\xda\x6e\xb8\xb2\xfc\x98\x6c\x50\x83\x36\xcd\xea\x56\xf4\xb8\xb4\x2d\x2a\xef\xdf\xcf\xa9\xaa\xca\x6a\x5d\xbd\xb9\xcf\xde\x60\xb0\xd4\xba\x08\x4f\x6a\xc4\xc2\xdb\xf0\x61\xde\xb6\x7b\x9c\x40\x95\xa9\xa6\x96\x39\xc2\x1d\x6a\xa8\xd5\x70\x54\xea\x7b\xaa\x66\x26\xb5\xc6\xa9\x59\xc9\x3f\x12\x3a\xeb\x47\x8f\xd0\x8f\x1d\xa1\x1f\xef\xac\x6f\x42\xb5\xd2\xd9\x6e\xfa\x7e\x94\xb5\x0d\xb9\xa3\xee\xd0\xfa\x82\xdd\x31\x20\x37\xd4\xba\x81\x20\xfc\xe9\x42\xef\xf0\xfb\xaa\x7f\xbe\xec\xf1\x63\x2d\xfc\xf8\x3e\x4f\xb7\xc3\x46\xb7\x60\x78\xe8\xa5\x32\x6f\x5c\x3b\xd2\x1d\xc0\x3f\xf0\xe6\xe1\x3f\x01\x00\x00\xff\xff\x56\x5f\x2a\x25\xa5\x10\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
