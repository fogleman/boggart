// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package v1

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7b\x6f\xe3\x36\x12\xff\x7f\x3f\xc5\x40\xc8\x5e\xe3\xb6\xf2\xbb\xbd\xbb\xd4\x4e\x51\xdc\xf6\x70\x05\xda\x43\xb1\x9b\xdb\xe2\xae\xed\x05\xb4\x49\xc7\xea\x4a\xa4\x96\xa2\x9c\xcd\x05\xfe\xee\x07\x92\x7a\x50\x8e\x6c\xeb\x99\xc4\xbb\x32\xd0\xd4\x92\xc8\x21\xf9\x9b\x1f\x67\xc6\xe2\x90\x7b\x7f\x0f\x98\xac\x1c\x4a\xc0\x5a\x32\x2a\x08\x15\x16\x6c\xb7\x2f\x66\xc1\x92\x3b\xbe\x00\x71\xe7\x93\xb9\x85\x7c\xdf\x75\x96\x48\x38\x8c\x0e\xfe\x40\x1b\xa4\x1f\x5a\x97\x2f\x00\x00\x56\x21\x5d\xca\x27\xb0\x41\x6e\x48\xfe\xce\xb8\x87\xc4\x39\xed\xc1\xbd\x7a\x2a\x3f\x9c\x88\x90\x53\xa0\xe4\x16\x7e\xa0\xc2\xed\xff\x33\xf4\x16\x84\x47\x25\x7b\xfd\x55\x5c\xe5\x1b\x55\x63\xfb\x62\x36\xd0\x0d\x5c\xbe\x98\x61\x67\x03\x4b\x17\x05\xc1\xdc\xe2\xec\x36\x6a\xd1\xbc\xbb\x64\xae\xed\x61\x7b\x34\x06\xf9\x2d\xf0\xe2\x6f\x1f\x02\x7b\x34\x8e\xca\xef\xd6\xf9\x70\xed\x23\x4a\x5c\xe3\xe9\xc3\x12\x31\x18\xd9\x32\x49\x39\xce\x5c\x32\xb7\x04\x5a\xe4\x49\x4a\x4a\x86\x6e\x2c\x90\xa2\x0d\x50\xb4\xb1\x05\x5a\x04\xb0\x40\xfc\x5a\x7e\xb1\x52\x31\xae\x13\xe4\xb5\x95\x48\x72\x9d\xa8\xac\xcf\x49\x40\xa8\x50\xba\xb0\xee\xef\xc1\x59\x01\x79\x0f\x7d\xa4\x55\x60\x49\xe5\xc5\x6d\xca\x7b\x1b\x22\x0b\x11\x8a\x61\xbb\xbd\x9c\x21\x58\x73\xb2\x9a\xef\xa9\x97\x6a\xf6\x62\xc3\x1c\x7c\x3e\xec\x7d\x23\xeb\xba\x01\x81\xed\xf6\xfe\x1e\xfa\xaf\xc9\xfb\x90\x04\xa2\xff\xaf\xd7\x3f\xf6\x7f\x46\x62\xad\x6f\x6b\xe1\xd6\xa5\x14\x3a\xfa\x0b\x05\xeb\x6f\x21\xe7\x84\x0a\xf0\x08\x0a\x42\x4e\x3c\x42\x45\x60\x41\x1f\xb6\xdb\xd9\x00\x5d\xce\x06\xae\xd3\xc0\x40\x3d\x46\xc5\xda\xbd\xab\x3a\x5e\xa3\x7a\x95\x61\x7f\xab\xe5\xcc\x23\x31\x7f\x42\xae\x3b\x1f\xe5\x61\xf1\x93\x2e\x00\x81\x1c\x48\x20\x9c\x65\xf3\x48\x60\x27\xf0\x5d\x54\x19\x09\xa3\x7a\x1d\x24\x22\x31\x79\x18\xbc\x8a\x5b\x68\x78\xe0\x64\x23\x99\x65\x33\x6a\xb3\xd5\xaa\xea\xf0\x1f\x08\xa9\x03\x42\x46\x58\x1e\x14\xdf\xab\x02\xc0\xe8\x40\xb5\xd6\x12\x20\x3e\xa1\xf6\xd2\x65\x01\xa9\x0b\x4a\x46\x50\x13\xc0\x24\x02\x0f\x81\xe3\x13\x3a\x88\x5a\x6d\x18\xa0\x35\x73\x1d\x8c\xee\x82\xaa\xb8\x98\xf5\xeb\xc0\x11\xcb\xc9\x43\xe1\x1f\x49\x1b\xc7\x07\x3f\x1b\x84\xee\x9e\x27\x86\x33\x13\x68\x61\xef\x77\x67\x99\x1a\x3b\x6e\xcd\x94\x20\xef\xc0\x0a\x61\x02\x1a\x31\x70\xe8\x01\x69\xf2\x73\xd0\xea\x1e\xac\xa9\xfa\xe3\x27\xad\x93\x0f\xc2\xf6\x42\x41\x30\xac\x18\x15\xf6\x68\x02\x9e\xbd\xb0\x27\xc3\x23\xed\x1b\xfd\xe0\xe8\x16\xce\xb3\xde\x09\x23\x41\x40\x38\x1e\x01\x46\x01\x93\x8d\xb3\x24\xf0\x52\xa1\x4e\x1d\x37\xf9\xef\xdc\xe7\x0e\x15\x60\x65\xe2\xa1\xdf\xf6\x04\x44\xbf\x59\x97\x98\x2d\x43\xe9\xf0\xfa\xb7\xdc\x11\xe4\x5c\x36\x72\xc5\xde\x08\xee\xd0\x9b\xf3\xcf\x2c\x38\xef\xcb\x3b\x7d\x1d\xfa\x80\x35\x1e\x0e\xbf\xb6\x87\x23\x7b\x38\xbe\x1a\x7d\x75\x31\x9c\x5e\x0c\xbf\xfa\xcf\xf0\xcf\x17\xc3\xa1\xd5\x03\xeb\xb3\x5e\x2f\x09\x84\xac\x5e\xaf\x10\x66\x03\xff\xf2\xc5\xf1\x52\x32\xde\x20\x86\x6e\x5d\x02\xea\xaf\x1d\x08\xee\xf8\x04\x4b\x6c\x90\xbe\x8f\x85\xcd\x49\xe0\x33\x1a\x48\x95\x53\x76\xcb\x91\x6f\x41\x20\xee\x24\x4f\x6e\x1d\x2c\xd6\x17\xa3\xe1\xf0\x65\x41\x4d\xcc\xc4\x9a\x20\x5c\xb4\x2c\x2f\x56\x30\x12\xbc\xe3\x73\xe3\xe9\x23\xd6\x15\xa5\x5c\x8d\x60\x00\xbf\x34\x20\x67\xdc\x90\x9c\x49\x43\x72\xa6\x95\xe4\xcc\x06\x45\xf5\x21\x65\x96\xd0\xf2\x82\xe1\xbb\x12\xf3\x98\xde\x10\x38\x73\xbe\x84\x33\x19\x51\x05\x70\x31\x87\xbe\xfe\x56\x60\x7a\xe8\x06\xb9\xb6\x4b\x88\x62\x38\x27\xef\x23\x41\x7d\x45\x1a\x38\xd3\xf3\x53\x5d\xf4\xcc\xc7\xff\x26\x88\xc7\x4f\xe5\xf7\x9e\xe1\x41\x82\x70\xb9\x24\x41\x60\xb8\x90\x12\x9a\xc1\x89\x66\xcc\x8e\xf4\xb5\xc9\x80\x33\x65\x84\x2c\x8c\x82\xf5\x82\x21\x8e\x95\xe3\xba\xbf\xcf\xf4\x4a\x69\xb1\x20\xdc\x71\x9b\x85\x0b\xab\x0a\x85\x7e\x0b\xee\x58\x3e\xf3\xc7\x60\xda\xe1\xab\x11\x6c\xb7\x86\x5d\x2b\xd5\x0f\xad\xb7\x1b\x91\x0a\xbb\xe2\x12\xf0\x61\x51\xdd\x67\x07\xe5\x23\x1a\x6b\xd0\x45\x0b\xe2\x82\xfa\x6b\x63\x49\x31\x6e\x5d\x36\x3a\xea\x57\xc4\x15\x28\x3b\x74\x18\x34\x0b\xac\xc6\x22\xd3\xc4\x6c\x20\x07\x59\x1a\x64\x15\xc3\x38\x2b\x70\x5b\x46\x3a\x9e\x37\x1d\xd4\x90\x1a\x9a\x76\xa0\x76\xe8\x8a\x75\x38\x67\x8d\x87\x1e\x40\xc3\xc6\x83\xac\x50\xe8\x8a\xf6\xa1\xae\x8a\x83\xc2\xb3\xb8\xab\x38\x1d\xc7\x32\x6e\xd2\xb1\x8c\x4f\xc5\xb1\x8c\xdb\x9f\x85\xe3\x56\x1d\x4b\x2b\x48\xb7\xe2\x58\x4e\x13\x6a\xc3\xb1\xb4\x02\x75\xf3\x8e\xe5\x34\x71\x36\x8d\xc7\xc9\x38\x96\x3c\xa8\x3b\xc7\xb2\x03\xd2\xa4\x49\xc7\x32\x39\x15\xc7\x32\x69\x7f\x16\x4e\x5a\x75\x2c\xad\x20\xdd\x8a\x63\x39\x4d\xa8\x0d\xc7\xd2\x0a\xd4\xcd\x3b\x96\xd3\xc4\xd9\x34\x1e\x27\xe3\x58\xf2\xa0\xee\x1c\xcb\x0e\x48\xd3\x26\x1d\xcb\xf4\x54\x1c\xcb\xb4\xfd\x59\x38\x6d\xd5\xb1\xb4\x82\x74\x2b\x8e\xe5\x34\xa1\x36\x1c\x4b\x2b\x50\x37\xef\x58\x4e\x13\x67\xd3\x78\x9c\x8c\x63\xc9\x83\xfa\xb9\x39\x96\xe2\x2b\x65\xe5\x7a\x31\x1b\x14\x5c\x2b\x9b\x0d\xd4\xda\xed\xd1\xc5\x79\x63\xc6\xed\x4f\x87\x39\x28\xe4\x69\x56\x92\x1f\x67\x15\xf9\x15\x12\xa4\xf6\x62\xeb\x1b\x51\x41\x4a\x31\x02\x15\x5e\x66\xad\xbe\xc4\xaa\xc8\xa0\x96\x58\x35\x2d\x4a\xac\xb1\x96\x8b\xc1\x2a\x99\x88\x6c\x6e\x85\x34\x12\xaa\x97\xfd\x2b\xc7\x2b\x92\x61\x01\xdb\xed\x67\x19\x2b\x52\x36\x70\xd4\x31\x58\xd4\xa8\x52\xb4\x4e\xfc\xd1\x9a\x67\xd4\x82\xb3\x28\x41\x32\xc9\x09\x8a\x1e\xc9\x99\x75\x66\x26\x4f\x3e\xad\x71\x29\x64\x58\x9a\x30\x2a\x99\x74\xb2\xce\xb0\x74\x86\xa5\x33\x2c\x79\x9d\x3e\x62\x58\x7c\xb2\xdf\xb4\x44\xb3\xeb\x53\x32\x2e\x46\xfe\xf2\xf1\xce\xac\x18\xf7\xc0\xc1\xf3\xb4\x56\x64\x62\xe4\x03\x7b\xcd\xb8\xf3\x3f\x46\x05\x72\x41\x5d\xeb\x40\xd6\x25\x2b\x61\x29\x7b\x63\x0b\x76\x73\x23\xad\xca\x06\xb9\x0e\x46\x82\x71\x0b\x3c\x22\xd6\x0c\xcf\x2d\x9f\x1d\x4c\xe0\xcf\xf4\xc2\xc8\xcd\x54\xed\xdc\x70\x16\xfa\x05\x2b\x2b\x01\x3a\xce\x4e\x76\x40\x50\xc1\x99\x6b\x47\x37\xf5\x7e\x88\x69\xbc\x1d\x62\x6a\xec\x86\x90\xa3\x9a\x5b\x1e\xc3\xe4\x5a\x8c\x4a\xb4\x07\xd1\x1b\x07\x6d\x79\xd6\xec\x16\xae\x46\xda\xf6\x64\xc3\x7f\x4e\xde\x87\x0e\x27\xd8\xba\xfc\xbc\x6c\x50\x3e\x1b\xa8\xee\x97\xa8\xf0\x70\x0f\xc8\xd7\xf1\x98\xbf\xce\xdd\x01\x52\x48\xaa\x43\xfd\x30\x36\x17\xcb\x35\x59\xbe\x5b\xb0\x0f\x09\x49\xfe\x08\xec\xe0\xd6\x11\xcb\xb5\x05\x14\x79\x24\x85\x52\x51\x2a\xb9\x48\xf2\x5e\xa3\xe4\xd1\x7e\xf4\xa4\x07\x96\xe0\x61\x94\x94\x2d\x65\x13\x9c\xcc\x23\x18\x94\xc1\x0a\x3b\x9b\xa2\x33\xba\x78\xd1\xe7\xc0\xca\xb2\xfa\xda\x61\xe5\xb8\x63\x25\x49\xa1\x34\x58\x39\xde\xcb\xca\x71\xc7\xca\xa3\xac\x9c\xd4\x63\xe5\xa4\x63\x25\x49\xa1\x34\x58\x39\xd9\xcb\xca\x49\xc7\xca\xa3\xac\x9c\xd6\x63\xe5\xb4\x63\x25\x49\xa1\x34\x58\x39\xdd\xcb\xca\x69\xc7\xca\x63\xac\x44\x1e\x0b\x0f\x6e\x33\xca\xfb\x64\x99\x19\x89\xe8\xd8\x99\x85\x34\x65\x68\x7c\x23\x9f\xa5\xfa\x69\xc7\xd4\x63\x4c\xf5\xd9\x2d\xe1\xb5\x88\xaa\x25\x74\x3c\xcd\x00\x9a\xd2\x34\xba\xce\x67\xa9\x7a\xd8\x91\xf4\xa8\x93\x77\x3c\x52\x8b\xa3\x4a\x40\x47\x51\x13\x4e\xc3\xd5\xab\xcb\x3d\xce\xde\xf1\x48\xc7\xcf\x63\xfc\xc4\x48\xd4\xe3\x27\x4e\x5e\x63\x77\xfc\x8c\xe0\x4c\xf9\xa9\x2f\x1f\xf0\x53\xde\xee\xa8\x79\x80\x9a\x72\xee\xd6\x78\xc3\xf9\x03\x15\x84\x6f\xf4\x4b\x60\xa0\x4c\xc0\x32\xda\x32\x2e\x10\x77\xe2\x63\x1b\x3e\x6a\xba\x52\x75\x40\x4f\x4c\xcd\x18\x4e\x45\xcc\xe4\x42\x65\x68\xa8\x43\x12\xfa\xd1\x3d\xd8\x6e\x2d\xf0\x91\x10\x84\xd3\xb9\xf5\xdf\x5f\xed\x2f\x7e\xff\xf6\xd7\xa1\xfd\xd7\xdf\x3f\x3f\xb3\x3a\x4a\x7a\x75\x5e\x6f\x66\x28\xd9\xd1\x31\x7d\xbd\x99\x5c\x3c\xa0\xe3\xb8\xa3\xe3\x31\x3a\x56\x7e\xaf\x99\xa1\xa3\x0a\xe5\xbf\xd4\x47\x69\x20\x8a\x3f\x15\x97\x9e\x47\xca\x89\x49\xca\x49\x0e\x29\x27\x1d\x29\x8f\x91\xb2\xf2\x6b\xcd\x0c\x29\xd1\x4a\x10\x0e\x3e\x27\x41\x00\x0b\xb4\x7c\x07\x8b\x50\x08\x46\x3f\x51\x5e\x4e\x4d\x5e\x4e\x73\x78\x39\x7d\x32\x5e\x96\x26\xa6\x4b\xaf\x03\xe6\x3a\xd8\xba\x7c\x54\x66\x17\x53\x5c\xcc\x72\xb6\x5a\x05\x44\xd8\x65\x0d\xec\x4c\xb3\x34\xd2\x24\x27\x01\x11\xc9\x2f\x86\x85\xa0\xb0\x10\x54\xe7\x2f\xc7\x1a\xd4\x45\xd2\xb4\xa0\xd7\xba\x8a\x4e\x0b\xd2\xc2\xea\xf4\x20\x08\x17\x9e\xf3\xb0\x0b\x71\xb6\x7a\xdc\x8b\x00\x6d\x88\xd1\x89\x37\xf2\xb2\x62\x1f\x9a\x37\x6c\xb3\x81\x54\x78\xa5\xd4\x12\xf3\xb8\xaf\x02\xd9\x50\x1f\xf7\xa9\x4a\xaf\xd2\x13\xfc\x2a\x67\xad\x55\x3a\x99\xe9\x19\x9c\x3c\x04\x0f\x32\xd8\x30\xba\x53\xf9\x6b\x31\x45\x4a\xa5\x92\x97\xd1\x01\xa4\x49\x61\xb2\xd1\x34\xff\xcc\x2a\x7d\xf0\x8f\x21\x4a\x1f\x38\x24\xe5\x1d\x3d\x6e\xa8\x64\xfe\x5a\x61\x65\xc1\x33\x49\x80\xff\x64\xa7\x76\x3c\x1e\x0f\xdb\xd2\x6b\x8d\xcd\x53\x4b\xd3\x93\x5b\x2b\xce\xf9\x03\xc2\xdf\x4a\xa7\x51\xdb\x94\xbc\x22\x3a\xbf\xd2\x89\x83\xba\x93\x33\x28\x55\xcd\x40\x9a\x45\xac\x7e\x6e\xa5\x6f\xf8\xcb\x5b\x03\xfd\x6a\x51\xbd\x50\x94\x62\xfa\x84\x73\xc6\x2b\xed\x02\x12\x38\x73\x5a\x63\xbc\x73\x50\x46\x98\x59\xe9\xfd\xef\xa3\x36\x2a\xf5\xb6\xe8\x8c\xcd\xe9\x5f\xb9\xb6\x92\x8a\x8d\x24\x10\xa7\x18\xa8\x88\xa9\x7c\x12\x71\xa5\xbe\x6b\xed\x52\x62\x34\x8f\xab\x6f\xf4\x4a\x11\x11\x9c\xd1\x9b\x5c\x75\x57\x16\x9a\xec\x67\x6d\xb4\xab\x90\xfe\x3c\xfc\xd9\x0d\x39\x72\xc1\xfa\xe2\x25\x86\x80\x2c\x19\xc5\x96\x79\x11\x58\x0f\x5a\x3e\xcb\x9c\x03\xba\xfb\xb4\x46\xaf\x6a\xd0\xf8\xc0\xc0\xcc\x71\x3d\xd9\xb0\xca\x6d\xa9\xdb\xfd\xcc\x06\x9a\x5a\x95\xd9\x5e\xb1\xfd\x6a\x96\xa8\x7c\x5b\x19\xfb\x9d\x39\x86\x36\xb6\xe3\xc0\x28\x78\x44\xc4\x59\x05\x6d\x86\x5e\xf5\xbc\xcf\x4f\xe8\x1d\x31\x5e\xf4\x55\xf6\x3c\x1e\x7a\xa7\x97\xb9\xda\x71\x3d\x3b\xe2\x9f\xce\xf7\x64\x3b\xb3\xcf\x09\x54\x0b\xe9\x1b\x20\x63\x2d\x75\x3e\x26\xef\x7e\x44\x81\xd0\x2f\x9c\xc1\x38\x40\xbd\x22\xf9\x5c\x14\x08\x9d\x88\x72\xcd\x56\xab\xeb\x76\xa3\xa0\x83\x8d\x3d\x1d\x31\x1b\x8a\x6f\xf6\x8d\xae\x62\xb8\xf3\x98\x93\xe0\x34\xc8\x4e\x1b\xe4\x3a\x7d\x44\xaa\xef\xb6\xf5\x51\x31\x9d\x76\x44\x4f\xe4\xd7\x26\xba\xda\xba\x08\x4b\xe4\x37\xc1\x74\x25\xec\x7a\x89\xfc\xc7\xa0\xfa\xbe\xc6\x3e\x0e\xae\xe7\x8c\xae\x23\x7b\x0d\xb2\xbf\x65\xae\x40\x37\x75\x03\xe7\x8d\x96\xd2\x0e\xab\x33\xc2\x9f\x34\x68\xd6\x90\xbd\xc4\xf0\x76\xf7\x1f\xe6\x48\x3a\xa9\xc8\x08\x4f\x15\x39\xc7\x3f\xe3\x36\xd5\xb5\xfa\x98\xe4\xfb\xce\xf3\x09\xaf\xcf\x3e\x14\x89\x69\x87\x7e\x59\xe9\xcf\x81\x7f\xfd\xf1\x0a\xbe\x7b\xc0\xc0\xa4\x9f\xcf\x83\x82\xa8\x86\x6e\x1f\x93\x83\x3f\xa7\xdb\x26\x2a\x13\x50\x05\x60\xed\xb0\xcf\x10\xfd\x1c\xa8\x87\xe1\x97\x07\xc4\xd3\x5d\x7c\x1e\xac\xf3\xab\x6a\xb3\xd4\x2a\x4c\xc3\xeb\x7e\x87\xc7\x7e\x20\xb1\x60\xcf\xa3\x9c\xdb\x3b\xb7\x8c\xcb\xe8\x6b\xf4\xbf\xb4\x3b\xff\x0f\x00\x00\xff\xff\x3c\xb1\x19\x08\x8a\x73\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6c\x5b\x67\x15\xff\x6d\x6b\x6c\xd7\x4d\xda\x24\x6c\x63\x14\xd8\xbe\x8d\xb5\xac\xb4\x6e\xe2\x24\x63\xad\xdb\xb4\x6b\x97\x8c\x6e\x34\x52\xd5\x9a\x0e\x21\xfe\xdd\xd9\xd7\x89\xa9\x7d\xaf\x75\xef\x75\x4a\x60\x88\x24\xa5\x4b\xa7\xb4\x6b\x85\x36\xd1\x87\xee\x4f\x8b\x90\x78\xd9\x70\xd3\xba\xf3\x92\xc6\x11\x12\x08\x24\x84\x74\x3e\x1e\x78\x40\x08\x24\x24\xde\x00\x89\x07\x24\x1e\xf6\x80\xce\xf7\x7d\xfe\x1b\x17\x75\x0f\xbd\x92\xef\xf9\x7b\xcf\x39\xdf\x39\xbf\xef\xc8\x7f\xe9\xdf\xf0\x26\x00\x8c\x02\xf8\x0c\x80\x0d\xf7\x03\x27\x00\xfc\xe3\x01\xa8\x67\x4f\x17\x10\x02\xb0\xb7\x0b\xd8\x00\xe0\x59\x43\xc7\xbb\x80\x07\x01\xbc\xd8\x05\x3c\x0c\xe0\x5b\x5d\x40\x04\xc0\x74\x17\xf0\x14\x80\x1f\x76\x01\x9f\x06\xf0\x73\x23\xff\xca\xc8\xff\xec\x02\x7a\x01\x6c\x0c\x01\x8f\x02\xd8\x6a\xe8\xde\x90\x8e\xf7\xd5\x10\xd0\x03\x20\x1f\x02\xb6\x00\xf8\x7e\x48\xe7\x5b\x34\xfa\x4b\x21\x80\x4b\x7b\x3b\x04\x6c\x02\x70\x2d\x04\x84\x01\xbc\x6f\xec\xb7\x42\x40\x1f\xe7\x0b\x01\xdb\x00\xfc\xd1\xd0\x8f\x42\xc0\xe3\x00\x9e\x08\xeb\x3a\xc7\xc2\xc0\x93\x00\x26\xc2\xba\x2e\x2f\x0c\x3c\x06\xe0\xf5\xb0\xf6\x7b\x3f\x0c\x6c\x06\x40\x86\xfe\x35\xac\xe3\xff\x2b\x0c\x6c\xe4\x78\x61\x9d\x3f\x14\x01\xba\x00\xf4\x47\x80\x7e\x00\x8f\x18\x79\xa7\xa1\xf1\x88\xae\xff\x99\x88\xae\x73\xbf\xa1\x63\x86\x1e\x35\x34\x19\xd1\xf1\xbe\x1e\xd1\xf1\xa7\x22\x40\x94\xeb\x32\xf2\x0f\x4c\xbc\x05\xe3\x7f\xc1\xd0\x37\x0d\x7d\xcb\xd0\x9f\x19\xbf\xf7\x8c\x7c\xc3\xc8\x2b\x11\xdd\xb7\x5f\x46\x80\xfb\x01\xfc\xda\xd4\xf5\xdb\x08\x70\xf0\x3e\xe0\xf7\xc6\xbf\x27\xaa\xf5\x0f\x45\xb5\xbc\x35\x0a\x0c\x73\xdf\xa2\xc0\x17\x01\x9c\x8c\x6a\x3c\x5c\x88\x02\xdf\x06\xf0\x46\x14\x38\x08\xe0\x3f\x51\x20\x03\xe0\xe9\x4d\xc0\x38\x80\x2b\x9b\x00\x01\xe0\x6f\x9b\x80\x7d\x00\x1e\xe8\x06\x46\x00\x1c\xec\x06\x3e\x07\x20\xe8\xd6\xfd\xbe\x6c\xe4\x4a\xb7\x9e\xcb\x9f\xbb\x35\x9e\xfe\x6e\xe4\x8f\xba\x35\x5e\xba\x7a\x74\x7f\x1f\xee\xd1\x78\xd9\xd1\x03\x0c\x02\x38\xd2\xa3\xeb\x98\xe9\xd1\xf9\xff\xd4\x03\x7c\x13\xc0\xa1\xcd\xc0\x67\x01\xbc\xbb\x19\x78\x11\x40\x75\x33\x70\x8c\x71\xb7\x05\x48\x02\xf8\xda\x16\x2d\xff\x62\x0b\x70\x88\x81\xde\x0b\x7c\x1e\xc0\xe1\x5e\x8d\x97\xef\xf4\x6a\x1c\x5c\xea\xd5\xb8\x5c\xea\xd5\xf3\xf8\x8d\xb1\xff\xa1\x57\xd7\xf5\x5f\x43\x37\xf6\xe9\xfa\xb6\xf6\x01\x9f\x04\x10\x33\x74\xdc\xd0\x6f\x18\x5a\xec\xd3\xe7\xbe\xd0\xa7\xeb\x7b\xaf\x4f\xc7\xfb\x9d\xd1\xff\xdb\xc4\xe9\xeb\xd7\x78\x78\xd2\xd0\x41\x43\xf7\x1b\x7a\xa4\x5f\xe7\x4d\xf6\xeb\xfa\x6c\x23\x7f\xcf\xc8\x8b\xfd\x3a\xce\xbb\x46\x7f\xa3\x1f\xb8\x8f\xbf\x37\x77\xfd\x51\x7d\xbd\xd5\x9d\x8f\x18\x7e\x17\xf4\x5d\x88\x01\xd8\x0e\xe0\x0b\x68\x3c\x3d\x86\x7e\x02\x1a\x8f\xb5\x87\x67\xbb\xc3\xf0\x8c\x13\xbe\xeb\x03\xd0\x98\xdb\x6a\xf4\x61\x43\xf9\x1e\x3d\x04\x3d\xdf\xdd\xd0\xf3\xe3\xda\x1e\x34\x76\xbe\x8f\x7c\x36\xee\x33\xd7\xce\xb8\xd8\x63\x6c\x8c\x5d\xc6\xe5\xd3\xd0\xb8\xe2\x59\x3d\xd2\x54\x47\x37\x34\xae\xf9\x61\x7c\x0e\x41\xf7\x97\x1f\xc6\xdd\x4e\xe8\x3e\x3f\xd3\xf4\x0d\xe3\xf9\x31\xc3\xf3\xac\xf7\x42\xef\x8e\x2d\x46\xf7\x04\x80\x44\x93\x7f\x1c\x7a\x86\x9f\x62\x61\xdb\xee\xa1\x8c\x38\x84\x6d\x69\x71\x92\x5f\x2f\xf1\xcb\xb7\x53\xae\x93\x6e\x70\x3e\x76\x36\xb4\x3b\x9b\xd4\x87\xf2\x05\xdb\xb3\x26\x6d\x3c\x37\x65\x39\x93\xb6\x48\x67\xfd\x42\xce\x9a\x11\x79\x37\x6d\x8b\x8c\x95\xcd\xd9\x69\x71\x3a\x1b\x4c\x09\xdb\xf3\x5c\x4f\x6c\xf3\x3b\x3a\xfa\xc5\x54\xca\xf6\xd7\xd9\x82\x6c\xfe\xee\x82\x28\xc7\x7a\x90\xa2\xe7\xd9\x4e\x20\xac\x7a\x69\x46\x91\xb6\x02\x5b\x58\x4e\x5a\xbb\xbb\x8e\xc8\xdb\x81\xed\xb5\x9a\x6b\xa6\xb4\x3d\x9d\x4d\xd9\x2a\x95\x31\xe7\x6d\xcb\x2f\x7a\x76\xde\x76\x82\x86\xb2\xe0\x9e\x6e\x8a\x30\xed\xe6\x02\x4e\x38\x66\x05\xfa\x55\xcf\x86\x31\x6b\x06\x63\xb6\x9f\xf2\xb2\x85\x20\xeb\x3a\x18\xd3\x95\x63\x7c\x9a\xe3\x09\xd7\x19\x70\x33\x99\xba\x54\xb0\x9d\x81\x54\xce\xf5\x6d\x7c\xc9\x0e\xee\xa2\xa7\xcd\x5e\x77\x6e\x1a\x7b\x4d\xb9\xb9\x6c\xda\x9a\xf1\x3b\x7b\x1c\x31\x56\xbc\xe0\x04\xb6\x37\x6d\xe5\x44\xc6\xf5\x84\x95\x09\x6c\x4f\x14\x3c\xdb\xf7\xc5\xcb\x56\xea\x94\x78\xb9\x18\x04\xae\xd3\xea\x94\x32\x3d\x08\x2c\x2f\x9b\xc9\xb4\xda\x1c\x37\xf8\xbf\x76\xd5\xc5\x5d\xba\x72\xee\x18\x4f\x02\x47\x2d\x3f\x10\xaa\x09\x22\x65\x15\xb4\xa8\x1c\x05\x77\xaa\x59\x74\x30\x61\x9d\xb2\xf5\x57\x13\x8d\x29\x61\xc2\x75\x82\x29\xfd\xce\xcd\x08\x3f\xb0\x82\xac\x1f\x64\x53\x3e\x8e\xa9\xa9\x1d\xb7\x7d\x3b\xc0\x09\x6b\xda\xc6\x89\x29\xf7\xb4\x48\xc6\x0d\x1d\x32\x74\xd8\xd0\x11\x4d\xad\xbc\x5b\x74\x02\xcd\xab\x5c\x8a\xd3\x08\x50\xac\x1a\xf4\x89\x80\x4d\xc9\xb8\x18\x10\x2f\x4d\x21\x39\x64\xe8\xb0\xa1\x23\x9a\x9e\xb4\x72\x45\x1b\x27\x0d\x5e\xf4\xa8\xf9\x58\xae\x03\x1e\x3e\x8e\xdb\x05\xd7\x0b\x62\x13\xfe\x64\x36\x1d\x3b\x5c\x9c\xf4\x63\x49\x37\xc1\xa0\x7c\xf6\x54\x76\xca\xca\xbb\xbb\xbd\x62\x94\x5b\x10\x4b\x7a\x96\xe3\xe7\xac\xc0\xf5\x12\xe2\xcb\xca\x24\x26\x8a\x9e\x95\x77\xd3\xae\xd8\xdf\xe2\x7f\x20\x7a\xd4\x72\x26\x8b\xd6\xa4\x1d\x4b\xda\x56\x3e\x21\xea\x72\x42\x1c\x2f\xfa\x7e\xd6\x72\xa2\x13\x2f\x4c\x8c\xc7\x4e\xda\x9e\x9f\x75\x9d\x84\x88\xef\x1e\x8c\x3e\xe7\x3a\x81\xed\x04\xb1\xe4\x4c\xc1\x4e\x88\xc0\xfe\x6e\x30\x50\xc8\x59\x59\x67\x9f\x48\x4d\x59\x9e\x6f\x07\xa3\x5f\x49\x3e\x1f\xdb\xd3\xf0\xe3\x7a\x32\xb6\x17\x1b\x77\x52\x6e\x3a\xeb\x4c\x26\x44\xf4\x58\xae\xe8\x59\xb9\xd8\xf3\xae\x97\xf7\x13\xc2\x29\x28\xd1\x1f\x1d\xde\x27\x34\x3b\xea\x6c\x8b\x0f\x8e\x8e\xc6\xc5\xf6\xed\x82\xd9\xc1\xc7\x47\xe3\x71\x71\x50\x0c\x8a\x84\x92\x0f\x8c\x0e\xd5\x4c\xfb\x47\x47\x98\x7d\x4a\xb9\xed\x8f\x0f\x8a\x57\x5e\xd1\x9f\x1c\x18\x1d\x1a\xdc\x21\x0e\x8a\xb8\x48\x88\xa1\x7d\x7a\xa7\xd1\x25\x5e\x60\x87\xf9\x45\x3f\x96\xf3\x4c\xe5\x1c\x95\x69\x59\x9e\xa1\x55\xba\x49\xa5\x76\x8d\x5c\x6c\xd7\xa8\x5d\xd7\xf6\x51\xbb\x4a\x2e\xae\x53\x81\xae\x51\x95\x96\x41\x97\xe9\x03\xba\x4d\x65\x5a\x55\xbf\x0a\x95\x85\x9c\xa5\x32\xdd\xa2\x0a\xdd\xa6\x2a\x2d\x09\xaa\xa8\xa8\x15\x5a\xa6\x92\x7c\x95\x2a\x54\x11\xf4\x01\x95\x68\x89\xca\x72\x56\x9e\xa3\x0a\xad\x50\x55\xce\xc9\xf3\x42\xce\x09\xaa\x2a\xcd\x75\x5a\xa6\x2a\x7d\xc8\x17\x96\x7e\x2a\xe7\x68\x8d\xca\xf2\x1c\xad\x52\x95\xa3\x35\xe5\x93\x8b\x4d\xd9\xe4\x62\x87\x5c\x9d\x0a\x64\x2f\x39\xcf\xe9\x69\x89\x4a\x9c\xfe\xde\x97\xd9\x9e\xf3\x0e\xc5\x5e\xd3\x1d\x96\xaf\x51\x49\x5e\xe4\x86\x73\xda\x92\x90\xf3\xdc\x6c\x2a\x35\x3b\xa8\x93\xdc\xa4\x92\x9c\xa7\x92\xe0\x6a\x97\x54\x2b\x6e\xcb\x8b\x82\x56\xf9\x9b\x39\xb9\x40\x65\x39\x2f\x17\x54\x8a\x72\x7b\xf0\xc6\xb7\xca\xfb\x8c\x9c\x93\xf3\x72\x96\xcf\xc3\x1c\x9f\x5b\x9d\xab\x2d\xe1\x9a\x2e\x84\x5b\xc3\xc7\xa1\x95\xf5\x55\xf3\xdc\xe5\x6b\xdc\x06\x15\xf2\x7c\xb3\xbd\xcc\x31\x56\xa9\x44\x6b\x72\x56\x5e\xa4\x5b\xb5\x99\x80\xde\xd0\xd5\xd4\x99\xd6\x23\xb1\x9a\x1b\x79\x1e\xf4\x36\xad\x51\x45\xce\x51\xa9\xf6\xe5\xe5\xd6\x36\xb2\xf3\x55\xaa\xd2\x75\xb9\x28\xe7\x59\x14\xb4\x44\xcb\xb4\x32\x40\x4b\x72\x91\x99\x75\xe6\xaa\x9c\xa7\x65\x39\xab\x15\x54\x1e\x50\x73\x6f\x52\x80\xde\xa1\x2a\xad\xc8\x33\xdc\xd0\x7b\x03\xf2\xf5\x09\xee\x09\x48\x3b\xa4\x59\x93\xb3\x6a\x9c\x37\x59\x21\x17\x18\xac\xf2\xac\x50\x62\x99\x3e\xfc\x98\xe1\xd7\xc7\xd2\x20\x5d\xd5\x17\xb1\xe5\x40\x1d\x0f\xb3\xc6\xf1\x69\xa5\x86\x92\x5b\x0a\x0b\x6a\x48\xcb\x0c\x28\x5a\xa3\xe5\xbb\x0c\x25\x2f\xf0\x09\xe4\x2c\xdd\xd0\xe2\x7c\x13\x06\x6f\x50\x95\x15\x25\x39\x4b\x15\xf9\x23\x06\xdd\xdd\xd4\xb6\xca\x63\x6f\x84\xa9\xc8\xb3\xcd\x41\xf4\x78\xf8\xd6\x9d\xa1\xdb\xbc\x8c\xee\x2e\x68\xcb\x5d\xa1\xca\xae\x3a\xe6\xf5\x84\xd4\x2d\x50\x17\x95\x03\xbe\x53\xeb\x8e\x19\x4f\x59\xb4\x43\x55\x18\xe1\x1c\xf7\xa9\x7d\x05\x94\x3a\x46\x50\xe8\xa7\x15\xf9\x7a\x03\x15\x1d\xfd\x96\xd6\x7b\xd5\xaf\xea\x9a\x5a\x1c\xbc\xf3\x96\xa8\x4a\x37\xcd\x02\xd1\xf9\x5a\xd7\x05\xdf\xe0\x2b\x54\x96\x73\xf2\xa2\x7c\xb5\xc1\x2e\xf0\xb8\xd5\xc6\x53\x2d\xe5\x99\xab\x7e\xe8\xaa\xaf\xb4\x2f\x94\xab\x74\x9d\x33\xf2\x7e\xac\x29\xaa\xf2\xac\x42\xdf\x6a\x4d\x55\x4f\x2d\x17\xb9\x16\x56\xf2\x1f\xa0\xce\xfa\xa1\x3b\xe8\x87\xef\xa0\x1f\xe9\xac\xaf\x4f\xff\x4c\x67\xbb\x19\xe5\x9d\xac\xeb\x16\x67\x47\xaf\xa6\xa5\x78\xd5\xe0\xa6\x2a\x2f\x9a\x99\xa8\xbf\x65\xfc\x5f\x40\x2e\xe8\xbf\x66\x35\x7e\xb8\x89\x1f\x69\xf0\xf4\x13\xd5\xf9\xa6\xa1\xbe\xd5\x69\x3b\xaf\xdb\x88\x66\x97\xb6\xe2\xa1\x03\x44\xda\x76\x2b\xfe\x17\x00\x00\xff\xff\x6d\xe3\x97\x85\xc4\x12\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
