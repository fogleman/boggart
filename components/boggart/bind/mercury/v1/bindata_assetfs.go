// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x79\x6f\xe4\xb6\x15\xff\x7f\x3f\xc5\x83\xe0\xed\xda\x49\x34\x77\xd2\x76\x33\x76\x10\xd4\x29\x1a\x20\x29\x16\x89\xbb\x41\x9b\xa4\x03\x8e\x44\x79\x94\x95\x48\x2d\x45\x8d\xed\x1a\xfe\xee\x05\x49\x1d\xd4\x9c\x3a\xc7\x33\x5e\x0d\xb0\xde\xd1\xf5\x1e\xf9\xe3\xef\x1d\x92\x1e\x39\x8f\x8f\x60\x63\xc7\x25\x18\x0c\x8b\x12\x8e\x09\x37\xe0\xe9\xe9\xd5\x34\xb4\x98\x1b\x70\xe0\x0f\x01\xbe\x34\x50\x10\x78\xae\x85\xb8\x4b\x49\xff\x0f\xb4\x44\xea\xa0\x71\xf5\x0a\x00\xc0\x89\x88\x25\x8e\xc0\x12\x79\x11\xfe\x3b\x65\x3e\xe2\xe7\xe4\x02\x1e\xe5\x51\xf1\x61\x98\x47\x8c\x00\xc1\x77\xf0\x3d\xe1\x5e\xef\x9f\x91\x3f\xc7\x2c\x3e\xf3\xa2\xe7\x24\x97\x7c\x2d\xaf\x78\x7a\x35\xed\x2b\x05\x57\xaf\xa6\xb6\xbb\x04\xcb\x43\x61\x78\x69\x30\x7a\x17\x6b\xd4\xf7\x5a\xd4\x33\x7d\xdb\x1c\x8e\x40\x7c\x0b\xfd\xe4\xdb\x7d\x68\x0e\x47\xf1\xf9\xab\xd7\xdc\xcf\x02\x44\xb0\xa7\x1d\x5d\x3f\x23\x01\x23\x7f\x4e\x7a\x1e\xa3\x1e\xbe\x34\x38\x9a\x6f\x92\x94\x9e\x19\x79\x89\x40\x82\x96\x40\xd0\xd2\xe4\x68\x1e\xc2\x1c\xb1\x99\xf8\x62\x64\x62\x3c\x37\xdc\xa4\x2b\x95\xe4\xb9\xf1\xb9\x01\xc3\x21\x26\x5c\x8e\x85\xf1\xf8\x08\xae\x03\xf8\x23\xf4\x90\x1a\x02\x43\x0c\x5e\xa2\x53\xec\x5b\x62\x71\x12\x26\x36\x3c\x3d\x5d\x4d\x11\x2c\x18\x76\x2e\xb7\x5c\x97\x8d\xec\xdb\x25\x75\xed\xf3\xc1\xc5\xd7\xe2\x5a\x2f\xc4\xf0\xf4\xf4\xf8\x08\xbd\x9f\xf0\xc7\x08\x87\xbc\xf7\xaf\x9f\x7e\xe8\xbd\x43\x7c\xa1\x76\x2b\xe1\xc6\x95\x10\x3a\xfc\x0b\x01\xe3\x6f\x11\x63\x98\x70\xf0\x31\x0a\x23\x86\x7d\x4c\x78\x68\x40\x0f\x9e\x9e\xa6\x7d\x74\x35\xed\x7b\x6e\x03\x1d\xf5\x29\xe1\x0b\xef\xa1\x6a\x7f\xb5\xcb\xab\x74\xfb\x1b\x25\xe7\x32\x16\xf3\x27\xe4\x79\x97\xc3\x4d\x58\xfc\xa8\x4e\x80\x50\x74\x24\xe4\xae\xd5\x3c\x12\xb6\x1b\x06\x1e\xaa\x8c\x84\x76\x79\x1d\x24\x62\x31\x9b\x30\xb8\x4e\x34\x34\xdc\x71\xbc\x14\xcc\x32\x29\x31\xa9\xe3\x54\xed\xfe\x9a\x90\x3a\x20\xe4\x84\x6d\x82\xe2\x3b\x79\x02\x50\xd2\x97\xda\x5a\x02\x24\xc0\xc4\xb4\x3c\x1a\xe2\xba\xa0\xe4\x04\x35\x01\x4c\x2a\x70\x17\x38\x01\x26\xfd\x58\x6b\xc3\x00\x2d\xa8\xe7\xda\xe8\x21\xac\x8a\x8b\x7e\x7d\x1d\x38\x12\x39\x9b\x50\xf8\x47\xaa\x63\x7f\xe7\xa7\xfd\xc8\xdb\x72\x44\x0b\x66\x1c\xcd\xcd\xed\xe1\x2c\x77\xc5\x4a\x58\xd3\x25\x88\x3d\xe0\x20\x1b\x83\x42\x0c\x5c\xb2\x43\x9a\xf8\xec\xf4\xba\x3b\xaf\x94\xed\x09\x52\xed\xf8\x9e\x9b\x7e\xc4\xb1\x0d\x0e\x25\xdc\x1c\x8e\xc1\x37\xe7\xe6\x78\xb0\x47\xbf\xd6\x0e\x86\xee\xe0\x3c\x1f\x9d\x6c\xc4\x31\x70\xd7\xc7\x40\x09\xd8\x78\xe9\x5a\x18\x5e\x4b\xd4\x89\xeb\xa5\xff\xce\x03\xe6\x12\x0e\x46\x2e\x1f\xfa\x6d\x4b\x42\xf4\x9b\x71\x65\x53\x2b\x12\x01\xaf\x77\xc7\x5c\x8e\xcf\x85\x92\x1b\xfa\x33\x67\x2e\xb9\x3d\x7f\x63\xc0\x79\x4f\xec\xe9\xa9\xd4\x07\x8c\xd1\x60\xf0\x95\x39\x18\x9a\x83\xd1\xcd\xf0\xcb\xb7\x83\xc9\xdb\xc1\x97\xff\x19\xfc\xf9\xed\x60\x60\x5c\x80\xf1\xe6\xe2\x22\x4d\x84\x8c\x8b\x8b\x42\x98\xf5\x83\xab\x57\xfb\xcf\x12\xf9\x06\xd6\xc6\xd6\xc3\x20\xff\x9a\x21\x67\x6e\x80\x6d\x81\x0d\x52\xfb\x6d\x6e\x32\x1c\x06\x94\x84\x62\xc8\x09\xbd\x63\x28\x30\x20\xe4\x0f\x82\x27\x77\xae\xcd\x17\x6f\x87\x83\xc1\xeb\x82\x23\x31\xe5\x0b\x8c\xec\xa2\xe7\xb2\x62\x27\xc6\x82\x57\x62\x6e\x62\x3e\x7c\x51\x5c\x8a\x22\xec\x2d\x87\xb3\x1e\x47\xcc\x75\x9c\x99\x45\x23\xc2\x61\x20\x24\xe9\x1a\x6e\x86\xd0\x87\x5f\x74\x1d\xa9\x25\xd7\x56\x36\x5c\x53\x36\x6a\x4f\xd9\x68\x4d\xd9\xb8\x3d\x65\xe3\x35\x65\x93\x7a\xca\xa6\xfd\xa2\x1c\x11\xc2\x4b\x30\x6f\x4e\xed\x87\x12\xbe\x85\xdc\x62\x38\x73\xbf\x80\x33\x91\xe5\x85\xf0\xf6\x12\x7a\xea\x5b\xd1\x7e\x70\xa6\x30\x43\xc4\x86\x73\xfc\x31\x16\xd4\x93\x44\x86\x33\xe5\x33\xe4\xc6\x85\x7e\xf8\xdf\x18\xb1\xe4\xa8\xf8\x7e\xa1\x45\xb5\x30\xb2\x2c\x1c\x86\x5a\x58\x2b\x61\x4b\x76\x3a\x44\x7a\x43\x7a\xca\x8d\xc1\x99\x74\x8c\x86\x8d\xc2\xc5\x9c\x22\x66\xcb\x60\xfa\xf8\x98\x6b\x95\x1c\xce\x82\x70\xc3\x1e\xcb\x2b\xd5\xf0\xc2\x27\xcb\x0b\x0a\xdd\xe4\xae\xb8\x74\xfd\x2e\x37\xeb\xf5\x7b\xb1\x37\xec\xdd\xc8\xc6\x0b\x13\xd6\x9c\x77\xa9\x36\x65\x48\x28\xc1\x37\xc3\x1b\x26\x46\xb0\x14\x12\x59\x07\x03\x44\x12\x4a\x78\x68\x8e\x3d\x90\x7f\x4d\x5b\x70\x96\x19\x57\x0d\x22\x70\x33\xbc\xc6\x1e\x47\xf9\xae\x43\xbf\x49\x90\x13\x2c\x72\x2a\xa6\x7d\xd1\xc9\xd2\x20\xcb\x44\xcd\x75\xc0\x6b\x19\xe9\xc4\x10\x3b\xa8\x21\xf3\x5c\xed\x40\xed\x12\x87\x76\x38\xe7\x9d\x87\xea\x40\xc3\xce\x03\x3b\x28\xf2\x78\xfb\x50\x57\xc5\xa1\x5c\xba\x52\x3a\x52\x35\x98\xe8\x9d\x5e\x6c\x1b\x35\x19\xdb\x46\xa7\x12\xdb\x46\xed\x3b\x82\x51\xab\xb1\xad\x15\xa4\x5b\x89\x6d\xa7\x09\xb5\x16\xdb\x5a\x81\xba\xf9\xd8\x76\x9a\x38\xeb\xce\xe3\x64\x62\xdb\x26\xa8\x5f\x76\x6c\x1b\x9d\x64\x6c\x1b\x37\x19\xdb\xc6\xa7\x12\xdb\xc6\xed\x3b\x82\x71\xab\xb1\xad\x15\xa4\x5b\x89\x6d\xa7\x09\xb5\x16\xdb\x5a\x81\xba\xf9\xd8\x76\x9a\x38\xeb\xce\xe3\x64\x62\xdb\x26\xa8\x5f\x76\x6c\x1b\x9f\x64\x6c\x9b\x34\x19\xdb\x26\xa7\x12\xdb\x26\xed\x3b\x82\x49\xab\xb1\xad\x15\xa4\x5b\x89\x6d\xa7\x09\xb5\x16\xdb\x5a\x81\xba\xf9\xd8\x76\x9a\x38\xeb\xce\xe3\x64\x62\xdb\x26\xa8\x4f\x3f\xb6\x15\x7f\x6b\x5a\x5a\x6e\xb1\xf7\xa6\xd3\xbe\xac\x2d\xd8\x5b\x3c\xa2\xd9\xe8\xf6\x72\xad\x9d\x42\x9e\xa7\xd2\xe1\x30\x55\x0e\xd7\x88\xe3\x2a\x45\x0e\x39\x21\x3f\xf3\x0a\x52\x8a\x11\xa8\xf0\x2b\xf7\xea\xaf\xdb\x25\x19\xe4\xeb\x76\x45\x8b\x12\xef\xdb\xcb\xbd\x0e\xaf\xe4\x54\xf2\xb5\x3f\xc2\xad\xc8\x56\xf6\x6e\x5c\xbf\x48\x05\x10\x3c\x3d\xbd\xc9\xf9\x9d\x32\x1e\x21\x79\x87\xef\x24\x4a\xe5\x40\xab\xc2\x34\x35\xf2\x94\x18\x70\x16\x17\xf0\xa6\x35\x6b\xf1\x21\x61\x59\x67\x7a\x71\x6f\x71\xe5\x6d\x38\x97\x42\x8e\xa5\x09\xa7\x92\x2b\x77\xec\x1c\x4b\xe7\x58\x3a\xc7\xb2\xa9\xd1\x7b\x1c\x4b\x80\xb7\xbb\x96\xd8\xba\x3e\x25\xe7\xa2\xd5\xd7\xef\x6f\x8c\x43\x99\x0f\xae\x7d\x99\x5d\x15\xbb\x18\x71\xc0\x5c\x50\xe6\xfe\x8f\x12\x8e\x3c\x90\xdb\x2a\xf5\xf5\xb0\xc3\x0d\xe9\x6f\x4c\x4e\x6f\x6f\x85\x57\x59\x22\xcf\xb5\x11\xa7\xcc\x00\x1f\xf3\x05\xb5\x2f\x8d\x80\xee\x9c\x60\x92\x6b\x85\x56\x3b\x2c\xf5\xdc\x32\x1a\x05\x05\x2f\x96\x02\x54\x66\x9e\xce\xd0\x21\x9c\x51\xcf\x8c\x77\xaa\xf9\x3a\x93\x64\xba\xce\x44\x9b\xad\x23\x7a\x75\x69\xf8\xd4\xc6\x33\x3e\x2c\xa1\x0f\xe2\x67\x14\xca\xf3\x2c\xe8\x1d\xdc\x0c\x95\xef\xc9\xdf\x30\x30\xfc\x31\x72\x19\xb6\x8d\xab\xcf\xca\xa6\xf1\xd3\xbe\x6c\x7e\x89\x0b\xd6\xe7\x28\x7d\x95\xf4\xf9\xab\x8d\x33\x94\x0a\x49\x75\x49\x10\x25\xee\xc2\x5a\x60\xeb\xc3\x9c\xde\xa7\x24\xf9\x23\x34\xc3\x3b\x97\x5b\x0b\x03\x08\xf2\x71\x06\xa5\xa4\x54\xba\x91\xd6\x65\xc7\xc5\xcd\x3d\x71\xa4\xf7\x7d\x18\x17\xaf\x5d\x80\xc1\x59\x14\xcf\x1d\x10\x2a\xb0\x9d\x9a\x13\xf4\xcb\x40\x66\xbb\xcb\xa2\x86\x5d\xfc\xd4\x63\x20\x67\xd9\x61\x5b\x21\xe7\xa8\x23\x27\xce\xa0\xd4\xc8\x39\xda\x47\xce\x51\x47\xce\xbd\xe4\x1c\xd7\x23\xe7\xb8\x23\x27\xce\xa0\xd4\xc8\x39\xde\x47\xce\x71\x47\xce\xbd\xe4\x9c\xd4\x23\xe7\xa4\x23\x27\xce\xa0\xd4\xc8\x39\xd9\x47\xce\x49\x47\xce\x7d\xe4\x44\x3e\x8d\x76\x4e\x91\xdb\xf4\xc9\x13\x34\x16\xd1\x91\x34\x0f\x69\x46\xd4\x64\xc7\x36\xb2\x7e\x2b\x8f\x77\x5c\xdd\xc7\xd5\x80\xde\x61\x56\x8b\xaa\x4a\x42\xc7\xd4\x1c\xa0\x19\x51\xe3\xed\x6d\x3c\x7d\x27\x0e\x77\x34\xdd\x1b\xef\x5d\x1f\xd7\x62\xa9\x14\xd0\x91\x54\x87\x53\x8b\xfa\x72\x73\x6b\xdc\x77\x7d\xdc\x31\x74\x1f\x43\x6d\xc4\xeb\x31\xd4\x4e\x1f\x74\x77\x0c\x8d\xe1\xcc\x18\xaa\x36\xb7\x31\xf4\x1a\xf1\x8e\xa1\xbb\x18\x2a\x0c\xbc\xc6\xa3\xd0\xef\x09\xc7\x6c\xa9\x9e\x16\x03\xa1\x1c\xac\x78\xed\x03\x55\xcf\xf6\x09\xb0\x96\xc8\x95\xa6\x12\x86\x26\x70\x4a\x7e\xa6\x1b\xb2\xf8\x43\xae\xf6\xd1\x13\xfb\xb4\x39\xbc\x06\x04\x88\x73\xcc\xc8\xa5\xf1\xdf\x5f\xcd\xcf\x7f\xff\xe6\xd7\x81\xf9\xd7\xdf\x3f\x3b\x33\x3a\x5e\xfa\x75\x9e\x82\xe6\x78\xd9\x71\x32\x7b\x0a\x9a\x6e\x6c\xe6\xe4\xa8\xe3\xe4\x3e\x4e\x56\x7e\xf8\x99\xe3\xa4\x4c\xfe\xbf\x50\xab\xc3\x20\x62\x7f\x2a\x31\x7e\x13\x33\xc7\x3a\x33\xc7\xdb\x98\x39\xee\x98\xb9\x8f\x99\x95\x9f\x7c\xe6\x98\x89\x1c\x8e\x19\x04\x0c\x87\x21\xcc\x91\xf5\x01\xe6\x11\xe7\x94\x7c\xa2\xe4\x9c\xe8\xe4\x9c\x6c\x23\xe7\xe4\xd9\xc8\x59\x9a\x9d\x1e\x99\x85\xd4\x73\x6d\xe3\xea\xa0\xf4\x2e\x36\x7a\x09\xd5\xa9\xe3\x84\x98\x9b\x65\x5d\xed\x54\x51\x35\x1e\x4e\x86\x43\xcc\xd3\x9b\x89\x39\x27\x30\xe7\x44\x95\x4b\x27\xc3\xa8\x4e\xc9\x6a\x8a\x7e\x52\x97\xa8\x9a\x22\x25\xac\x4e\x0b\xc2\x68\xee\xbb\xeb\x4d\x48\x8a\xe3\x93\x56\x84\x68\x89\xb5\x46\xfc\x2c\x36\x2b\xb6\xa1\x79\xef\x36\xed\x8b\x01\xaf\x54\x97\xa2\xaf\x65\x57\xa0\x94\xea\x65\x2f\x19\x76\x9d\x2d\x4f\x59\xb9\xe4\xad\xd2\xb2\x63\x47\xb0\x84\x15\xac\x95\xbf\xd9\xe8\x41\x16\xbf\x25\x14\x29\x37\xe1\xa9\xc4\x18\x40\x56\x51\x26\x94\x66\xc5\x6b\x46\xe9\x15\xa4\x34\x51\x6a\xe5\x2a\x21\x6f\xef\xba\x55\x25\x8b\xdf\x0a\x0f\x16\x1c\x49\xf5\xfc\x27\x6b\xda\x49\x7f\x7c\xdb\x14\x51\x6b\xa4\x2f\xc9\x9b\x2d\x4b\x5c\xd1\xe6\x77\x08\x97\x73\xee\x6a\xbb\x92\x6b\xac\x8a\x33\xdd\x24\xb3\x3b\x39\x87\x52\xd5\x0d\x64\x25\xc8\xf2\xc6\x2b\x7b\xfc\x5f\xde\x1b\xa8\xa7\x8e\x72\x79\x3c\x99\x0c\x62\xc6\x28\xab\x34\xe9\x88\xdb\xb9\xa5\x48\x93\x89\x8a\x22\xcd\xcc\x4b\xef\x7d\x17\xeb\xa8\xd4\xda\xa2\x16\xbb\xa1\x7d\xe5\x74\xa5\x17\x36\x52\x7d\x9c\x61\x20\x33\xa6\xf2\x15\xc8\x95\xda\xae\x46\x97\x60\x4d\xbd\x5d\x7d\x5e\x59\x86\x08\x67\x94\xdc\x6e\x1c\xee\xca\x42\xd3\xe9\xb3\x8d\x36\x15\xb2\x7b\xc4\x77\x5e\xc4\x90\x07\xc6\xe7\xaf\x6d\x08\xb1\x45\x89\x6d\xe8\x1b\xa1\xb1\xa6\xf9\x2c\xb7\xc8\xed\xea\xd1\x1a\xad\xaa\x41\xe3\x1d\x1d\xd3\xfb\xf5\x6c\xdd\x2a\x37\x83\x6f\xf5\x33\xed\x2b\x6a\x55\x66\x7b\x45\xfd\xd5\x3c\x51\x79\x5d\x39\xff\x9d\x5b\x63\x39\xf1\xe3\x40\x09\xf8\x98\x27\x45\x07\x2d\xa7\x5e\xc2\xf5\x07\x88\x21\x7f\xe6\xa1\x90\xcf\xac\x85\xb0\xe2\x99\x48\x65\x0e\x91\xcd\x2a\x18\xde\x09\xfd\x20\xf4\x83\xd2\x5f\x33\x94\x6d\xee\x4f\x3b\x81\x6d\x97\xae\xe7\x0b\x73\x0d\x45\xac\x2d\x9d\xab\x18\xbf\x9e\xc5\xc4\xd6\xb8\xa5\x3d\xa4\x3e\x9e\xbb\x1a\xa8\x6d\x43\x3f\xa2\x0f\xd5\xbb\x06\x99\xed\xf8\xe8\x83\x7a\x1d\xdd\x8e\xb9\xac\x88\x7f\x3e\x0b\xc9\x37\x66\x1b\xa3\xab\xdd\x5f\x37\x40\xdb\x5a\xc3\x59\x8e\xa9\xf5\x78\xf7\x83\xb0\x2c\xf9\x1e\x08\xb4\x9f\xea\xa8\x48\x3e\xe9\x69\xa4\xb0\x19\x75\x9c\x59\xbb\xb7\x24\x3b\x95\x9d\xbc\xeb\xde\xd6\xbb\x13\xf0\xdd\xa7\x41\x76\xd2\x20\xd7\xc9\x01\xa9\xbe\xaa\xeb\x45\x31\x9d\x74\x44\x4f\xe5\xd7\x26\xba\x9c\x84\x0c\x16\x0a\x9a\x60\xba\x14\x36\xb3\x50\x70\x08\xaa\x6f\x53\xf6\x32\xb8\xbe\xa1\x77\x1d\xd9\x6b\x90\xfd\x3d\xf5\x38\xaa\x7d\xd3\xb9\x54\x52\xda\x61\x75\x4e\xf8\xb3\x26\xcd\x0a\xb2\xd7\x36\xbc\x5f\xfd\x09\xa8\xb4\x91\x92\x8c\xcf\x95\x38\x27\x8f\x54\x96\xd5\x07\xb5\xd2\x33\x94\x58\xdf\xcc\x47\xf7\x87\xbb\xe9\x8b\x99\x0b\x3e\xba\x77\xfd\xc8\x07\x0b\x91\x37\x1c\x98\xfe\xfe\xbf\x1e\x9b\x45\x77\x5a\x65\x74\xa6\xe0\xc8\x59\x2d\x1b\x9a\x30\x3b\x2b\x3a\x42\xd9\x24\xb6\x46\x1c\xbc\xae\xad\xe0\x4f\xa0\xbd\x50\x9f\x5e\x75\x21\x52\x1d\xc2\x99\x34\x85\x67\xb5\xc7\xa6\xad\x51\x75\xa9\x75\x9b\xd4\xd5\x9c\x80\x65\xc6\xcd\x3d\xa8\x7d\xc6\x3a\x3b\x2b\x3d\xe4\x63\xce\x6f\xfd\x00\xb3\xfa\xc9\x1a\x8a\xc5\xb4\x63\x47\x79\xe9\xc7\x60\x3e\xbd\x91\x03\xdf\xae\x19\x50\xda\xce\xa3\xc8\xd8\x50\x8d\xa1\xad\x94\xb2\x25\x0a\x0f\x9b\xb3\x25\x0c\x6e\x21\x69\xd3\x3b\xd4\x2e\xb3\x8f\x2b\x6d\xdb\xcd\x6e\x2d\x73\x6b\x35\x34\xe4\xf4\x75\x51\xa1\x52\xee\xa6\x63\x78\xe8\xe4\x6d\x93\x61\x36\x6e\x96\x6d\xa6\x6f\xdb\xf4\x9c\x86\x89\x1e\x2c\x85\xdb\xa0\xb4\xb3\xd6\x43\xe6\x70\xef\xb2\x15\x35\xaa\x97\x78\x08\x19\x2d\x55\x74\x64\xa2\x8f\xc1\x72\x6c\xf8\x65\xcd\x6e\x54\x13\x8f\x22\x6b\x0b\xaa\x0e\x66\xb5\x4a\x25\xf9\x9a\xe7\xa0\xf9\x9a\x64\x6b\x0b\xc9\x5a\xda\x95\x16\x59\x7c\x5c\x69\xda\x56\x26\x1f\xe8\xd9\x5a\xa6\xab\xf3\xf7\x95\xb2\xb3\x14\xc0\x43\xa7\x66\x6b\x36\xd8\xac\x05\xb6\x99\x94\x6d\x54\x72\xf4\xd6\x78\xb0\x64\x6c\x55\x63\x67\x99\xcf\x39\x15\x6a\xb7\xee\x1d\x73\x2d\xb7\x1c\xda\xb0\x7b\x65\x97\xb6\x19\x7f\x8d\xff\xcb\x9a\xf3\xff\x00\x00\x00\xff\xff\xfc\x45\xf9\x6e\x7a\x8f\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5b\x6c\x1c\x67\xf5\xff\xf5\x62\xef\x7a\x9d\x38\xf1\x25\xfd\xb7\x7f\xa0\x7c\xa5\x4d\xef\x1b\x5f\xa1\x65\x13\x27\xad\x93\x14\x7a\x71\x55\xa5\x6e\x8a\x04\x2a\x9d\xee\x8e\xed\x25\xbb\x33\xab\x99\x59\xa7\x46\x05\xf9\xd2\x34\xa9\x1c\xe2\xaa\x82\x12\x44\x20\x4a\x41\xf0\x80\x04\x1b\x37\x9b\x6c\x7c\x59\x3f\xf1\x46\xd1\xf9\xde\x78\x40\x2d\xbc\x70\x15\x2f\x48\x08\x54\x21\x84\xce\x9c\xcf\xeb\xbd\x25\x75\x1f\xca\x3c\xcc\xf9\xce\xe5\x3b\xdf\xb9\xfc\xbe\x33\xf3\x5e\xd7\xcd\xdf\x01\x80\x43\x00\x3e\x09\x60\xdf\x8d\x80\x05\xe0\x2b\x37\x23\x7c\x7e\xd7\x02\xb4\x02\xf8\x7d\x0b\xc0\xa2\x3f\x19\xfa\xb7\x16\xa0\x07\xc0\xdf\x5b\x80\x5b\x00\x44\x5a\x81\x28\x80\xdb\x5b\x81\xff\x07\x70\x4f\xab\xf8\x1b\x69\x05\xee\x05\xf0\xd5\x56\xe0\x13\x00\x4e\x19\xfe\xc7\x86\x7f\xb7\x15\xd8\x09\xe0\xcf\xad\xc0\xed\x00\x3e\x30\xf4\xb6\x88\xf8\x7f\x38\x02\x6c\x07\x30\x1a\x01\x76\x00\xf8\x72\x44\xce\x3f\x66\xe4\xb9\x08\x70\x13\x80\x6f\x46\x80\x76\x00\x73\x11\x20\x02\xe0\x8c\xd1\xbf\x15\x01\x3a\xf9\xbc\x08\xb0\x1b\xc0\x65\x43\x7f\x1b\x01\xee\x00\x70\x63\x54\xe2\xbe\x2b\x0a\xdc\x05\x20\x1e\x95\xb8\x8e\x44\x81\x4f\x03\x70\xa2\x62\x77\x26\x0a\x74\x00\x28\x18\xba\x1e\x15\xff\xbf\x8e\x02\x6d\xec\x2f\x2a\xe7\xff\x21\x0a\xb4\x70\x5d\xa2\x40\x17\x80\x7f\x19\xbe\xbd\x0d\xf8\x3f\x00\x9d\x6d\xc0\x6d\x00\xee\x6b\x13\xf9\xc1\x36\xc9\xe7\xf1\x36\x89\xfb\x69\x43\x8f\x1a\xfa\x82\xa1\xe3\x6d\xe2\xdf\x69\x93\xf3\xbe\xde\x06\xc4\x00\xbc\x6a\xf8\x45\xe3\xef\x7b\xc6\xfe\xbc\xa1\x3f\x35\xf4\x17\x86\x5e\x31\x76\xeb\x86\xff\xa5\x89\xe7\xdd\x36\xc9\xfb\x8f\x6d\xc0\x8d\x00\x6e\x8a\x89\x5d\x6b\x4c\xea\xbb\x2d\x26\xf2\x9d\x31\x89\xb7\x3b\x06\x1c\xb8\x01\xb8\x35\x26\x7e\xbe\xd4\x2e\xf2\x17\xdb\x85\xb7\xdb\x81\x41\x00\xd9\x76\xe0\x73\x00\x2e\xb4\x0b\x8e\x7e\xd3\x0e\x0c\x00\x78\xbf\x1d\x78\x08\x40\xd7\x36\xe0\x45\x00\x4f\x6c\x03\x0e\x00\xf8\xd9\x36\x60\x1c\xc0\x5f\xb7\x01\x87\xb9\x0f\xdb\x01\x05\xe0\xec\x76\x60\x2f\x80\xab\xdb\x81\x21\x00\xff\xd8\x0e\xdc\x09\xe0\xfe\x0e\xe9\xd3\xd3\x1d\xc2\x3b\x1d\xd2\xcf\x37\x3b\x04\x97\xdf\x37\xfc\x52\x87\xe0\x6c\xa5\x43\xfa\xf2\xab\x0e\xc1\xd9\xfb\x1d\x40\x1f\x80\xff\x74\x48\x1c\xbd\x3b\xe4\xfc\x37\x76\x00\x2f\x00\xf8\xe7\x0e\xe0\x53\xdc\x8f\x9d\xc0\x13\x00\x82\x9d\xc0\x33\x5c\xbf\x9d\xc0\x18\xd7\xa3\x53\x78\xbb\x13\x78\x94\xf1\xd5\x09\xdc\xc3\x7d\xef\x14\x9c\xa9\x2e\xc1\xcf\x63\x5d\x82\xe7\xc9\x2e\xe9\xdb\x37\xba\x44\x7f\xaa\x4b\xe2\xfa\x79\x17\x90\x60\xbf\x5d\x52\x87\x0f\x8c\x3c\xd1\x2d\xf1\x3e\xd9\x2d\xf8\x79\xc1\xd0\x29\x43\xcf\x18\xfa\x93\x6e\xa9\x43\xb9\x5b\xe2\x7d\xaf\x5b\xfc\xff\xdb\xc8\x3f\xd3\x23\x7e\x46\x7a\x04\x47\xcf\x19\x6a\x19\x9a\x35\x74\xba\x47\xce\x3d\xd1\x23\xf1\xbe\xd5\x03\xec\xe7\xbe\xf4\x00\x07\x01\xfc\xa5\x47\x70\xb0\x67\x97\xd8\xf5\xef\x12\xbb\x91\x5d\xe2\xff\x79\x23\xff\xda\x2e\xe0\x06\xc6\x0d\x36\x1f\xae\x37\xdf\xb1\xdb\x0c\xdf\x52\xa5\xbb\xd5\xd0\x83\x55\x32\x8e\x9f\x6b\xda\x0b\xc9\xa1\x1f\x82\x1d\xae\x1f\x63\xe9\x61\x63\xd7\x61\x28\xf7\x91\x73\xe7\xfa\xdd\xcf\x31\x56\xf9\x62\xec\x30\x1e\x19\xe3\xf7\x19\xd9\x67\x01\x3c\x08\x99\x2b\xbb\x20\x79\xf0\xc3\x78\xbf\xb9\x6a\x6f\xa7\x99\x8d\x23\x10\x2c\xf1\xac\x7c\x00\x82\x73\x7e\x38\xef\x3b\xcd\x7a\x98\x6b\x0d\xe9\xf9\xdd\x90\x59\xf7\x90\xd1\x71\xdd\x6e\xa9\xf2\xcb\xf3\xe3\x11\xc8\xbc\xe4\x1a\x73\x1f\x19\xeb\xdd\x3c\x87\x21\xf7\x3a\x8e\xda\x87\xef\xd2\xe7\x21\x77\xa0\xbd\x4a\x1e\x62\x05\x82\xbd\x9a\x67\xf7\x9e\x81\x71\xf5\x28\x76\xa7\xd4\x51\x7e\x3d\xcf\x2f\xdf\x4e\xba\x4e\x6a\x73\xe5\xe3\x81\x4d\xe9\x03\x55\xe2\x47\xb3\x39\xdb\xb3\x26\xec\xca\x42\x65\xad\x97\xd3\xd9\x7c\x56\x25\x2d\x47\x79\xb6\x6f\x07\x4d\x55\xf7\x04\x46\x79\x70\xd2\x72\x26\x6c\x95\x4a\xfb\xb9\x8c\x35\xad\xb2\x6e\xca\x56\xe3\x56\x3a\x63\xa7\xd4\xf1\x74\x30\xa9\x6c\xcf\x73\x3d\xb5\xdb\x6f\x6a\xe8\xe7\x93\x49\xdb\x6f\xd0\x05\xe9\xec\xd6\x9c\x84\x86\x15\x27\x79\xcf\xb3\x9d\x40\x59\x1b\x29\x6d\x08\x52\x56\x60\x2b\xcb\x49\x89\xb9\xeb\xa8\xac\x1d\xd8\x5e\xad\x7a\x43\x95\xb2\xa7\xd2\x49\x3b\x3c\xca\xa8\xb3\xb6\xe5\xe7\x3d\x3b\x6b\x3b\xc1\xa6\x30\xe7\x1e\xaf\xf2\x30\xe5\x66\x02\x3e\xf0\x90\x15\xc8\xab\x72\x1a\x0e\x59\xd3\x38\x64\xfb\x49\x2f\x9d\x0b\xd2\xae\x83\x43\x12\x39\x0e\x4f\xb1\x3f\xe5\x3a\xbd\xee\xf8\x78\x85\xcb\xd9\x4e\x6f\x32\xe3\xfa\x36\xbe\x60\x07\x5b\xa8\x69\xb5\xd5\xb5\x8b\xc6\x56\x93\x6e\x26\x9d\xb2\xa6\xfd\xe6\x16\x5f\x34\x5a\x3c\xee\x04\xb6\x37\x65\x65\xd4\xb8\xeb\x29\x6b\x3c\xb0\x3d\x95\xf3\x6c\xdf\x57\x2f\x59\xc9\x63\xea\xa5\x7c\x10\xb8\x4e\xad\x51\xd2\xd4\x20\xb0\xbc\xf4\xf8\x78\xad\xce\x71\x83\xeb\xea\xc3\x2a\x3e\x28\x91\x73\xc5\xb8\x13\x78\xca\xf2\x03\x15\x16\x41\x25\xad\x9c\xb0\xa1\xa1\xe2\x4a\x55\xb3\x0e\x46\xad\x63\xb6\xec\x1a\xdd\xec\x12\x46\x5d\x27\x98\x94\x77\x66\x5a\xf9\x81\x15\xa4\xfd\x20\x9d\xf4\xf1\x4c\xd8\xb5\xf0\xdd\x04\xe6\x0d\xf2\x0a\xc6\x8f\x84\xef\x67\xad\x29\x1b\xcf\x4e\xba\xc7\xd5\x58\xbf\xa1\x03\x86\x0e\x1a\x3a\x24\xd4\xca\xba\x79\x27\x90\x75\x18\x5d\xb8\x12\xcc\x84\xcb\x10\x1a\xcf\x06\xac\x1a\xeb\x57\xbd\xea\xf9\x49\x8c\x0d\x18\x3a\x68\xe8\x90\xd0\xa3\x56\x26\x6f\xe3\xa8\x41\x98\xa1\x4d\xa2\x6f\xa2\xa9\xc4\x6f\x05\x10\x54\x71\x05\x5d\x07\x8c\x33\x1c\xb1\x73\xae\x17\xc4\x47\xfd\x89\x74\x2a\x3e\x92\x9f\xf0\xe3\x63\x6e\x82\xf1\xff\xc8\xb1\xf4\xa4\x95\x75\xf7\x78\xf9\x18\x57\x3b\x3e\xe6\x59\x8e\x9f\xb1\x02\xd7\x4b\xa8\x27\x43\x95\x1a\xcd\x7b\x56\xd6\x4d\xb9\x6a\x5f\x8d\xfd\xfe\xd8\x53\x96\x33\x91\xb7\x26\xec\xf8\x98\x6d\x65\x13\xaa\xc2\x27\xd4\x91\xbc\xef\xa7\x2d\x27\x36\xfa\xf8\xe8\xe1\xf8\x51\xdb\xf3\xd3\xae\x93\x50\xfd\x7b\xfa\x62\x07\x5d\x27\xb0\x9d\x20\x3e\x36\x9d\xb3\x13\x2a\xb0\x5f\x0e\x7a\x73\x19\x2b\xed\xec\x55\xc9\x49\xcb\xf3\xed\x60\xf8\xb9\xb1\xc7\xe2\x0f\x6f\xda\x71\x3c\xe3\xb6\x17\x3f\xec\x24\xdd\x54\xda\x99\x48\xa8\xd8\x33\x99\xbc\x67\x65\xe2\x8f\xb9\x5e\xd6\x4f\x28\x27\x17\xb2\xfe\xf0\xe0\x5e\x25\xcb\x61\x67\x77\x7f\xdf\xf0\x70\xbf\xba\xfb\x6e\xc5\xcb\xbe\x3b\x86\xfb\xfb\xd5\x01\xd5\xa7\x12\x21\xbf\x7f\x78\x60\x43\xb5\x6f\x78\x88\x97\xf7\x86\x66\xfb\xfa\xfb\xd4\x2b\xaf\xc8\x96\xfd\xc3\x03\x7d\xf7\xa9\x03\xaa\x5f\x25\xd4\xc0\x5e\x19\xbb\xf4\x06\xcf\xd8\x11\x7e\xd1\x9b\x7a\x8e\xa9\x9e\xa5\x22\x2d\xeb\x79\x5a\xa3\x4b\x54\xa8\x97\xe8\x85\x7a\x49\x38\x8e\xeb\x36\xd5\x8b\xf4\x42\x83\x08\xf4\x36\x95\x69\x19\x74\x8e\x0a\xb4\xac\x67\xa9\x44\xab\x7a\x9e\x56\x95\x9e\x63\x39\x15\xd8\xfa\xa2\x9e\xa1\x82\x9e\xd5\x0b\xb4\x44\x05\x2a\xd2\xaa\x5e\xa0\xab\xd7\xd9\x42\x6b\x54\xbc\xce\xbe\xb3\x74\x85\x56\xa9\xc8\x56\xb4\x46\x25\xb6\x9d\xa1\x22\x5d\x66\x47\x54\xa6\x25\x45\xa5\x30\x81\x12\x3b\xd3\xaf\x51\x89\x4a\x8a\xae\x50\x81\x96\xa8\xa8\x67\xf4\x29\x2a\xd1\x0a\x95\xf5\xac\x3e\xad\xf4\xac\xa2\x72\x28\xb9\x48\xcb\x54\xa6\xab\x3c\x86\xe8\x47\x7a\x96\xd6\xa9\xa8\x4f\xd1\x1a\x95\xd9\x5b\xd5\x79\x7a\xa1\xea\x34\xbd\xd0\xe4\xac\x66\x01\xb2\x95\x9e\xe3\xe3\xc3\x54\x56\xfe\x17\x61\xd6\x9f\x79\x8d\x60\xdf\x96\x66\xea\xd7\xa9\xa0\x17\x55\xd8\x8e\x15\x6e\x9b\x69\x46\xb5\x41\x98\xc9\x25\x2a\xe8\x39\x6e\x52\x49\xd1\x52\x58\x8a\x55\xbd\xc8\x2d\xe3\x56\xeb\x93\x54\xd4\x73\xfa\x64\x78\x44\xb1\xde\xf9\xe6\xde\xd0\x7a\x5e\xcf\xea\x39\x3d\xc3\xf9\xf0\x8a\xf3\x0e\xf3\xaa\x3b\x70\x5d\x02\xe1\xd2\x70\x3a\xb4\xd2\x18\x35\xf7\x5d\xbf\xce\x65\x08\x5d\x9e\xae\xd6\x17\xd9\xc7\x1a\x15\x68\x5d\xcf\xe8\x45\xba\xbc\xd1\x13\xd0\xb7\x25\x9a\xca\xa2\x36\x25\x16\x73\x21\x4f\x83\x7e\x48\xeb\x54\xd2\xb3\x54\xd8\xd8\x79\xb6\xb6\x8c\x6c\x7c\x81\xca\x74\x51\x2f\xe8\x39\x66\x15\x2d\xd1\x32\xad\xf4\xd2\x92\x5e\xe0\x45\x83\xba\xac\xe7\x68\x59\xcf\x88\x80\x8a\xbd\x61\xdf\xab\x04\xa0\xf3\x54\xa6\x15\x3d\xcf\x05\xfd\x78\x40\xde\x78\xc0\xc7\x02\xd2\x26\xc7\xac\xf3\xb5\xa6\x2b\x74\x89\x05\xfa\x24\x83\x55\x9f\x50\x21\x5b\xa4\xab\x1f\xd1\x7d\xa3\x2f\x01\xe9\x9a\x5c\xc4\x9a\x84\x9a\x26\xb3\xce\xfe\x69\x65\x03\x25\x97\x43\x2c\x84\x4d\x5a\x66\x40\xd1\x3a\x2d\x6f\xd1\x95\xfe\x16\x67\xa0\x67\xe8\x1d\x61\xe7\xaa\x30\xf8\x0e\x95\x59\x50\xd0\x33\x54\xd2\xaf\x32\xe8\xb6\x12\x5b\x38\x07\x37\xdd\x94\xf4\x89\x6a\x27\xd2\x1e\xbe\x75\xf3\xb4\xca\xc3\x68\x6b\x4e\x6b\xee\x0a\x95\x1e\xac\x60\x5e\x3a\x14\xde\x82\xf0\xa2\xb2\xc3\xf3\x1b\xd5\x31\xed\x29\xaa\x7a\xa8\x2a\xc3\x9c\xe2\x3a\xd5\x8f\x80\x42\x53\x0f\x21\xfa\x69\x45\x9f\xd9\x44\x45\x53\xbb\xa5\x46\xab\xca\x55\x5d\x0f\x07\x07\xcf\xbc\x25\x2a\xd3\x25\x33\x40\xe4\xbc\xda\x71\xc1\x37\xf8\x1c\x15\xf5\xac\x5e\xd4\xaf\x6d\x2e\x4f\x72\xbb\xc3\x89\x17\x96\x94\x7b\x1e\xd6\x43\xa2\x3e\x57\x3f\x50\xea\x3f\x56\xf5\x65\xfc\x08\xdf\xb9\x86\xad\x1f\xf2\xbd\xbb\x10\x2a\xb8\x3a\x25\x89\xe5\x02\x95\xf5\x89\x10\xf8\x6b\x1b\xa2\x4a\xd6\xb2\x99\x85\xfc\x7f\xd8\x5c\x3e\x70\x0d\xf9\xe0\x35\xe4\x43\xcd\xe5\x15\xe0\xcd\x37\xd7\x1b\x14\x5d\x4b\xdb\x30\xb3\x9b\x5a\x55\xcd\xe3\x0b\xa6\x60\x65\xbd\x68\xe0\x10\xfe\xb5\xf2\x1f\x8f\x3e\x29\x7f\xae\x1b\xeb\xc1\xaa\xf5\xd0\xe6\x9a\xbe\x1b\x36\xbd\x0a\x4f\x3f\x68\xf6\x61\x68\x68\x58\xc3\xe7\x43\xbe\x94\x5b\xed\x77\xb3\xed\x1f\xd2\xf3\x25\x34\x7e\x12\xcc\xc7\xa4\xf6\x42\x34\xb9\x23\x75\x1f\x17\xfc\x37\x00\x00\xff\xff\x40\xe9\x9e\xde\x7b\x15\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
