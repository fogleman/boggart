// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x93\xdb\xb6\x11\xfe\xee\x5f\xb1\xc3\xb9\xd4\xa7\x24\xd4\x7b\xdc\xf6\x22\x29\x1f\xea\x74\x9a\x99\xa4\x93\xb1\xaf\xed\xb4\x49\x7a\x03\x09\xd0\x09\x31\x09\xd0\x20\xa8\xf3\xf5\x46\xff\xbd\x03\x80\x2f\xa0\x4e\x2f\x24\x45\xde\x59\x36\x35\xe3\xb3\x48\x00\xbb\xc0\xb3\x0f\x76\x21\x70\x89\x87\x07\xc0\x64\x49\x19\x01\x67\xc1\x99\x24\x4c\x3a\xb0\xd9\xbc\x98\x84\x0b\x41\x03\x09\xf2\x3e\x20\x53\x07\x05\x81\x47\x17\x48\x52\xce\x7a\xbf\xa3\x35\x32\x85\xce\xec\x05\x00\xc0\x32\x62\x0b\x55\x02\x6b\xe4\x45\xe4\xaf\x5c\xf8\x48\x5e\xb2\x0e\x3c\xe8\x52\xf5\x11\x44\x46\x82\x01\x23\x77\xf0\x03\x93\x5e\xf7\xef\x91\x3f\x27\x22\xae\xd9\xe9\x2e\x93\x26\xdf\xea\x16\x9b\x17\x93\x9e\x51\x30\x7b\x31\xc1\x74\x0d\x0b\x0f\x85\xe1\xd4\x11\xfc\x2e\xd6\x68\xdf\x5d\x70\xcf\xf5\xb1\x3b\x18\x82\xfa\x16\xfa\xc9\xb7\x0f\xa1\x3b\x18\xc6\xf5\xb7\xdb\x7c\xb8\x09\x10\x23\x9e\x55\xfa\xb8\x46\x02\x46\xbe\x4e\x5a\x4f\x70\x8f\x4c\x1d\x89\xe6\xbb\x24\xa5\x35\x23\x2f\x11\xc8\xd0\x1a\x18\x5a\xbb\x12\xcd\x43\x98\x23\x71\xa3\xbe\x38\x99\x18\x8f\x86\xbb\x74\xa5\x92\x3c\x1a\xd7\x0d\x04\x09\x09\x93\xda\x16\xce\xc3\x03\xd0\x25\x90\xf7\xd0\x45\xc6\x04\x8e\x32\x5e\xa2\x53\xdd\x5b\x13\x55\x89\x30\x0c\x9b\xcd\x6c\x82\x60\x25\xc8\x72\xba\xa7\x5d\x66\xd9\xab\x35\xa7\xf8\xb2\xdf\xf9\x56\xb5\xf5\x42\x02\x9b\xcd\xc3\x03\x74\xdf\x90\xf7\x11\x09\x65\xf7\x1f\x6f\x7e\xec\xfe\x8c\xe4\xca\xdc\x36\xc2\x9d\x99\x12\x3a\xf8\x13\x03\xe7\x2f\x91\x10\x84\x49\xf0\x09\x0a\x23\x41\x7c\xc2\x64\xe8\x40\x17\x36\x9b\x49\x0f\xcd\x26\x3d\x8f\xd6\x30\x50\x9f\x33\xb9\xf2\xee\xab\x8e\xd7\x6a\x5e\x65\xd8\xdf\x19\x39\xd3\x58\xcc\x1f\x90\xe7\x4d\x07\xbb\xb0\xf8\xc9\x54\x80\x50\x0d\x24\x94\x74\x51\x3f\x12\x98\x86\x81\x87\x2a\x23\x61\x35\x3f\x05\x89\x58\xcc\x2e\x0c\x5e\x27\x1a\x6a\x1e\x38\x59\x2b\x66\xb9\x9c\xb9\x7c\xb9\xac\x3a\xfc\x47\x42\x4e\x01\x21\x27\x6c\x17\x14\xdf\xeb\x0a\xc0\x59\x4f\x6b\xab\x19\x90\x15\xf7\x28\x46\xf7\x61\x55\x2c\xec\xf6\xa7\xc0\x90\xc8\xd9\x85\xc0\xdf\x52\x1d\xc7\x07\x3f\xe9\x45\xde\x9e\x12\xcb\x57\x4b\x34\x77\xf7\x7b\xeb\x5c\x8b\x2d\xaf\x6d\x4b\x50\x77\x60\x89\x30\x01\x83\x18\x50\x76\x40\x9a\xfa\x1c\x74\x2a\x07\x5b\xea\xfe\x04\xa9\x76\xf2\x41\xba\x7e\x24\x09\x86\x25\x67\xd2\x1d\x8c\xc0\x77\xe7\xee\xa8\x7f\x44\xbf\xd5\x0f\x81\xee\xe0\x32\xef\x7c\x31\x92\x04\x24\xf5\x09\x70\x06\x98\xac\xe9\x82\xc0\x17\x1a\x75\x46\xbd\xf4\xdf\x65\x20\x28\x93\xe0\xe4\xc2\xfd\xaf\x7b\xe2\xfd\xaf\xce\x0c\xf3\x45\xa4\xfc\x79\xf7\x4e\x50\x49\x2e\x95\x92\x6b\xfe\x56\x0a\xca\x6e\x2f\x5f\x3a\x70\xd9\x55\x77\xba\x26\xb2\x83\x33\xec\xf7\x5f\xb9\xfd\x81\xdb\x1f\x5e\x0f\xbe\xb9\xea\x8f\xaf\xfa\xdf\xfc\xa7\xff\xc7\xab\x7e\xdf\xe9\x80\xf3\xb2\xd3\x49\xe3\xbc\xd3\xe9\x14\xc2\xac\x17\xcc\x5e\x1c\xaf\xa5\xc2\x29\xb1\x6c\xeb\x11\xd0\x7f\xdd\x50\x0a\x1a\x10\xac\xb0\x41\xe6\x3e\x96\xae\x20\x61\xc0\x59\xa8\x4c\xce\xf8\x9d\x40\x81\x03\xa1\xbc\x57\x3c\xb9\xa3\x58\xae\xae\x06\xfd\xfe\x17\x05\x2d\x31\x91\x2b\x82\x70\xd1\xba\xa2\x58\xc5\x58\xf0\x56\x48\x49\xa6\x8f\x5c\x55\x94\x72\x3d\x80\x1e\xfc\xab\x06\x39\xc3\x9a\xe4\x8c\x6a\x92\x33\xae\x24\x67\xd2\x2b\x6a\x0f\x25\xb3\x84\x95\xe7\x1c\xdf\x97\x98\xc7\xec\x96\xc0\x05\xfd\x1a\x2e\xd4\x82\x21\x84\xab\x29\x74\xcd\xb7\x02\xd3\xc3\x28\x14\xc6\x2f\x21\x86\xe1\x92\xbc\x8f\x05\x75\x35\x69\xe0\xc2\xcc\x4f\x7d\xd1\xb1\x8b\xff\x4d\x90\x48\x4a\xd5\xf7\x8e\x15\x41\xc2\x68\xb1\x20\x61\x68\x85\x90\x12\x96\xc1\xa9\x65\xec\x8e\x74\x8d\xcb\x80\x0b\xed\x84\x1c\x8c\xc2\xd5\x9c\x23\x81\x75\xe0\x7a\x78\xc8\xf5\x4a\x5b\xb1\x20\xdc\x89\xce\xc2\x95\x75\x83\x42\x3f\x75\xb6\x3c\x9f\xfd\x5b\x27\xeb\xf0\xf5\x00\x36\x1b\xcb\xaf\x95\xea\x87\xb1\xdb\xad\xcc\x84\x5d\x0b\x05\x78\xbf\xa8\xed\xf3\x83\x0a\x10\x4b\x2c\xe8\xa1\x39\xf1\x40\xff\x75\xb1\xa2\x98\x70\x66\xb5\x8e\xfa\x35\xf1\x24\xca\x0f\x1d\x7a\xf5\x02\x6b\xb0\xc8\xa9\x98\xf4\xd4\x20\x4b\x83\xac\xd7\x30\x74\x09\x5e\xc3\x48\x27\xf3\xa6\x85\x1a\x32\x47\xd3\x0c\xd4\x94\x2d\x79\x8b\x73\xde\x79\x98\x01\xd4\xec\x3c\xc8\x12\x45\x9e\x6c\x1e\xea\xaa\x38\x68\x3c\x8b\x87\x8a\xf3\x09\x2c\xc3\x3a\x03\xcb\xf0\x5c\x02\xcb\xb0\xf9\x59\x38\x6c\x34\xb0\x34\x82\x74\x23\x81\xe5\x3c\xa1\xb6\x02\x4b\x23\x50\xd7\x1f\x58\xce\x13\x67\xdb\x79\x9c\x4d\x60\xd9\x05\x75\x1b\x58\xb6\x40\x1a\xd5\x19\x58\x46\xe7\x12\x58\x46\xcd\xcf\xc2\x51\xa3\x81\xa5\x11\xa4\x1b\x09\x2c\xe7\x09\xb5\x15\x58\x1a\x81\xba\xfe\xc0\x72\x9e\x38\xdb\xce\xe3\x6c\x02\xcb\x2e\xa8\xdb\xc0\xb2\x05\xd2\xb8\xce\xc0\x32\x3e\x97\xc0\x32\x6e\x7e\x16\x8e\x1b\x0d\x2c\x8d\x20\xdd\x48\x60\x39\x4f\xa8\xad\xc0\xd2\x08\xd4\xf5\x07\x96\xf3\xc4\xd9\x76\x1e\x67\x13\x58\x76\x41\xfd\xb1\x05\x96\xe2\x4f\xca\xca\xf5\x62\xd2\x2b\xf8\xac\x6c\xd2\xd3\xcf\x6e\x8f\x3e\x9c\xb7\x66\xdc\xfe\x6c\x8f\x83\x42\x9e\xe7\x49\xf2\xd3\x3c\x45\x7e\x8d\x24\x39\xf9\x61\xeb\x5b\x59\x41\x4a\x31\x02\x15\x7e\xcc\x5a\xfd\x11\xab\x26\x83\x7e\xc4\x6a\x68\x51\xe2\x19\x6b\xb9\x35\x58\x25\x17\x91\xcf\xad\x50\x4e\x42\xf7\xb2\x7b\x4d\xfd\x22\x19\x16\xb0\xd9\xbc\xcc\x79\x91\xb2\x0b\x47\xb3\x06\x8b\x95\x6a\x43\x9b\xc4\x1f\x63\x79\xce\x1c\xb8\x88\xf3\xff\xd2\x9c\xa0\xb8\x48\xcd\xac\x0b\x3b\x37\xf0\x79\x9d\x4b\x21\xc7\x72\x8a\x53\xb1\x32\xe8\x8e\x77\x66\xc9\x85\x0f\x14\x4f\xb3\x56\xb1\x7b\x51\x05\xee\x8a\x0b\xfa\x3f\xce\x24\xf2\x40\x5f\x9b\x58\xe3\x91\xa5\x74\xb4\xaf\x71\x25\xbf\xbd\x55\x1e\x65\x8d\x3c\x8a\x91\xe4\xc2\x01\x9f\xc8\x15\xc7\x53\x27\xe0\x07\x53\x48\x73\xbd\xb0\xd2\xa7\xb4\x9e\x5b\xc1\xa3\xa0\x60\x63\x2d\xc0\x84\xc2\x34\x07\x97\x49\xc1\x3d\x37\xbe\x69\x32\x72\xc7\x49\x42\xee\xd8\xca\xc7\x55\xa3\x9a\x3a\x3e\xc7\xe4\x46\x0e\x4a\xe8\x83\xf8\x47\x81\xf1\x3a\x2b\x7e\x07\xd7\x03\xe3\x77\xf2\x11\x5a\x90\xf7\x11\x15\x04\x3b\xb3\x2f\xcb\xc6\xcd\x49\x4f\x77\xbf\x44\x83\xc7\x59\xc8\xaf\x92\x31\xbf\xda\x99\x83\x5c\x48\x2a\x65\x41\x94\xb8\x8a\xc5\x8a\x2c\xde\xcd\xf9\x87\x94\x24\xbf\x87\x6e\x78\x47\xe5\x62\xe5\x00\x43\x3e\xc9\xa0\xd4\x94\x4a\x2f\xd2\xd4\xb4\x38\xbf\xab\x1b\x97\x74\xc0\x91\x22\x22\x26\x3f\x50\xc9\x26\x38\x9d\x47\xd0\x2b\x83\x15\xa6\xeb\xa2\x33\xba\x78\xd5\x8f\x81\x95\x65\xed\xb5\xc5\xca\x61\xcb\x4a\x92\x41\x69\xb1\x72\xb8\x97\x95\xc3\x96\x95\x47\x59\x39\x3a\x8d\x95\xa3\x96\x95\x24\x83\xd2\x62\xe5\x68\x2f\x2b\x47\x2d\x2b\x8f\xb2\x72\x7c\x1a\x2b\xc7\x2d\x2b\x49\x06\xa5\xc5\xca\xf1\x5e\x56\x8e\x5b\x56\x1e\x63\x25\xf2\x79\x74\xf0\x4d\x80\x5d\x9f\x3c\x33\x63\x11\x2d\x3b\xf3\x90\x66\x0c\x4d\x6e\xec\x66\xa9\x29\x6d\x99\x7a\x8c\xa9\x01\xbf\x23\xe2\x24\xa2\x1a\x09\x2d\x4f\x73\x80\x66\x34\x8d\xaf\x77\xb3\x54\x17\xb6\x24\x3d\x1a\xe4\xa9\x4f\x4e\xe2\xa8\x16\xd0\x52\xd4\x86\xd3\x0a\xf5\xfa\x72\x4f\xb0\xa7\x3e\x69\xf9\x79\x8c\x9f\x18\xc9\xd3\xf8\x89\xd3\x2d\xec\x96\x9f\x31\x9c\x19\x3f\xcd\xe5\x23\x7e\xaa\xdb\x2d\x35\x0f\x50\x53\xcd\xdd\x13\x76\x38\x7f\x60\x92\x88\xb5\xd9\x04\x06\xc6\x25\x2c\xe2\xb7\x3a\x25\x12\x34\x79\x71\xf8\x93\xa6\x2b\xd3\x47\x44\x24\xd4\x4c\xe0\xd4\xc4\x4c\x2f\xf4\x43\x54\xfd\x1e\x73\x37\xbe\x07\x9b\x8d\x03\x01\x92\x92\x08\x36\x75\xfe\xfb\x8b\xfb\xd5\x6f\xdf\xfd\xd2\x77\xff\xfc\xdb\x97\x17\x4e\x4b\x49\xff\x94\xed\xcd\x1c\x25\x5b\x3a\x66\xdb\x9b\xe9\xc5\x23\x3a\x0e\x5b\x3a\x1e\xa3\x63\xe5\x7d\xcd\x1c\x1d\xf5\x52\xfe\x6b\xf3\xb6\x3b\x62\xf8\x73\x09\xe9\xbb\x48\x39\xb2\x49\x39\xda\x41\xca\x51\x4b\xca\x63\xa4\xac\xbc\xad\x99\x23\x25\x5a\x4a\x22\x20\x10\x24\x0c\x61\x8e\x16\xef\x60\x1e\x49\xc9\xd9\x67\xca\xcb\xb1\xcd\xcb\xf1\x0e\x5e\x8e\x9f\x8d\x97\xa5\x89\xe9\xb1\x9b\x90\x7b\x14\x3b\xb3\x27\x65\x76\x31\xc3\x25\x2c\xe7\xcb\x65\x48\xa4\x5b\xd6\xc1\x4e\x0c\x4b\x63\x4b\x0a\x12\x12\x99\xfe\x62\x98\x4b\x06\x73\xc9\x4c\x8a\x61\x62\x41\x53\x25\x4b\x09\x7a\x63\x9a\x98\x94\x20\x23\xec\x94\x1e\x84\xd1\xdc\xa7\x8f\xbb\x90\x24\x94\x26\xbd\x08\xd1\x9a\x58\x9d\x78\xab\x2e\x2b\xf6\xa1\x7e\xc7\x36\xe9\x29\x83\x57\x4a\x2d\xb1\x4f\xe4\x29\x90\x09\xf5\x69\x1f\x7c\xf2\x3a\x3b\x43\xaa\x72\xc6\x5a\xa5\xc3\x53\x3e\x82\xc3\x41\xe0\x51\xf6\x1a\x46\xf7\x3a\x77\x2d\xa1\x48\xa9\x6c\xcf\x32\x36\x80\x2c\x21\x4c\x29\xcd\x72\xcf\x9c\xd2\x67\x73\x58\xa2\xcc\x99\x20\x4a\xde\xd1\x13\x41\x4a\xe6\xae\x15\x36\x16\x7c\x24\x39\xaa\x9f\xed\xd4\x4e\xc6\xe3\x63\x57\x45\xad\xa1\x7d\x6e\x5e\x76\x76\x60\xc5\x39\x7f\x40\xf8\x3f\x55\xd0\x38\xd9\x95\xbc\x26\x26\xb7\x92\x26\x8b\xba\xb3\x73\x28\x55\xdd\x40\x96\x41\xac\x7f\x6e\x65\x3b\xfc\xe5\xbd\x81\xd9\x5a\xd4\x1b\x8a\x4a\x4c\x97\x08\xc1\x45\xa5\x44\x7d\x89\x73\x07\xaa\x25\x2f\xf7\xa8\x15\x66\x5e\x7a\xf7\xfb\x58\x47\xa5\xde\x16\x9d\xb1\x3b\xfa\x57\x4e\x57\xda\xb0\x96\xe4\xe1\x0c\x03\xbd\x62\x2a\x9f\x40\x5c\xa9\xef\xc6\xba\x8c\x58\xea\x71\xf5\x77\x31\x32\x44\xa4\xe0\xec\x76\xa7\xb9\x2b\x0b\x4d\x5f\x39\xab\xb5\xab\x90\xfd\x3c\xfc\xd9\x8b\x04\xf2\xc0\xf9\xea\x0b\x0c\x21\x59\x70\x86\x1d\xfb\x22\x74\x1e\x69\xbe\xc8\x1d\xd5\xb7\x5d\x7a\x42\xaf\x4e\xa0\xf1\x81\x81\xd9\xe3\x7a\xb6\x61\x95\x7b\xeb\x65\xfb\x33\xe9\x19\x6a\x55\x66\x7b\x45\xfd\xd5\x3c\x51\x79\x5d\x39\xff\x9d\x3b\x29\x32\xf1\xe3\xc0\x19\xf8\x44\x26\x59\x05\x4d\x2e\xbd\x4e\x8b\x3e\x3f\xa1\x77\xc4\xda\xe8\xab\x1c\x79\x7c\xf4\xce\x3c\xe6\x6a\x26\xf4\x6c\x89\x7f\xbe\xd8\x93\xef\xcc\xbe\x20\x50\x6d\x49\x5f\x03\x19\x4f\x32\xe7\x53\xf2\xee\x47\x14\x4a\xb3\xe1\x0c\xd6\x11\xbe\x15\xc9\xe7\xa1\x50\x9a\x44\x94\x1b\xbe\x5c\xde\x34\xbb\x0a\x3a\xa8\xec\xf9\x88\x59\xd3\xfa\x66\xdf\xe8\x2a\x2e\x77\x9e\x72\x12\x9c\x07\xd9\x59\x8d\x5c\x67\x4f\x48\xf5\x6d\x5d\x9f\x14\xd3\x59\x4b\xf4\x46\xb6\x65\x0e\x8f\xef\xc0\xbe\xef\x9e\xa2\x1d\xb7\xb7\x6e\x59\x97\xf1\xd7\xf8\xbf\xb4\x3b\xff\x0f\x00\x00\xff\xff\x1a\x97\x16\x9f\xaa\x63\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6c\x9b\x57\x15\xff\x75\xc4\x76\xe3\x34\x0e\x0c\xba\xf1\xaf\x70\xc7\x48\x69\x69\xdd\xc4\x49\x04\xc8\xad\xdb\x89\x36\x85\xb2\x45\x9a\x5a\x6f\x08\x21\x10\xdf\xec\xeb\xc4\xd4\xfe\xbe\xf0\x7d\x9f\x5b\x82\x26\x14\x3b\xb4\xdd\x94\x42\x05\x62\xa2\x42\xd3\xa6\xc2\x5e\x41\x6e\x56\xaf\x5e\xfe\x38\x0f\x80\xc4\x03\x48\xe7\x4a\xbc\x20\xf1\x47\x1a\x42\xea\x0b\x0f\x20\xf1\x06\x08\x9d\x7b\x6f\xfc\x27\x71\x50\x78\xa8\xa5\xf8\x9c\x7b\xce\xb9\xe7\xdf\xef\x9c\x1b\xff\xe9\xd1\x81\x57\x00\x60\x1c\xc0\x87\x01\xbc\xba\x0f\x38\xcb\xfc\xbb\xa0\x3f\x47\x06\x80\xf7\x01\x38\x3a\x00\x3c\x06\xe0\xf4\x00\x70\x04\xc0\x73\x03\xc0\x87\x00\x7c\xdb\x9e\x7f\x6c\xcf\xbf\x18\x00\x3e\x02\xe0\xcf\x96\xfe\xc7\xde\x3f\x14\x01\x06\x00\x4c\x44\x80\x61\x00\x9f\x8e\x00\x1c\x62\x3a\x02\x0c\x01\xb8\x10\x01\x62\xec\xd7\xea\xbf\x12\x01\x46\x01\x5c\xb6\xf4\xfb\x11\xe0\x09\x00\xf7\x23\xc0\x7e\x00\xbf\x8f\x00\x1f\x07\xf0\x4e\xc4\xc4\x8d\x45\x81\x8f\x02\x78\x32\x6a\xec\xce\x46\x81\x04\x00\x19\x35\xfe\xc2\x28\x30\x08\xa0\x16\x35\xf1\x6e\x46\x81\x08\x80\xdb\x51\xe0\x51\x00\xaf\xd9\xf3\xdd\xa8\xc9\xf3\x7e\xd4\xe4\xb3\x6e\xe9\x2f\x2d\xfd\x8d\xa5\xbf\xb3\x7e\xfe\x60\xfd\x3e\x88\x02\x71\x00\xff\xb0\xe7\x7f\x5b\x7f\xb1\x98\xb1\x1f\xb6\xf4\xa0\xa5\x87\x2c\x1d\x8d\x19\xbb\x64\xcc\xf4\x63\x32\x06\x3c\xc2\xfd\x89\x01\x67\xf6\x01\xe9\x18\x30\x09\xe0\x5b\xfb\x81\x4f\x01\xf8\xf9\x7e\xe0\x6b\x00\xfe\xba\x1f\x38\x03\xe0\xfc\x20\x50\x00\x70\x7d\x10\x98\x06\xf0\xb7\x41\xe0\x24\xfb\x89\x03\x53\x00\xbc\x38\xf0\x24\x80\x37\xe2\xa6\x6f\xbf\x8e\x1b\x1c\x95\x3d\x3f\x88\x03\xef\x06\xf0\xf7\xb8\xe9\xc3\x23\x43\x06\xb7\x83\x43\x26\xce\xd4\x90\xf1\xff\xca\x10\xf0\x55\x00\xff\x1a\x02\x0e\x01\xf8\xf2\x01\xe0\x0b\x00\x16\x0e\x00\xcf\x72\x7f\x0e\x00\x59\xbe\x37\x6c\xce\x5f\x1f\x06\x3e\x01\x60\x6d\xd8\xe0\xf7\x97\x61\x83\xcb\x60\xc2\xcc\xc3\xb1\x84\xe9\xd7\x53\x09\xa3\x7f\x3a\x61\xf2\xf8\x46\xc2\xe4\x51\x4b\x00\x8f\x73\x5c\x4b\x7f\x66\xe9\xaf\x2c\xfd\x63\xc2\xe0\xfd\xcf\x84\xc9\xe7\xe0\x88\xf1\x33\x39\x62\xe4\x5f\x1a\x31\x7e\x16\x46\x2c\xde\x96\xde\xb6\xf4\x0d\x4b\xeb\x23\x26\xee\xfa\x88\xc9\xeb\xb7\xf6\xde\x3b\x23\xc0\x3e\x18\xdf\x1f\x64\xff\x30\xb8\x8c\x00\x38\x01\x20\x0a\xe0\xb8\xdd\x19\xde\x9d\xa3\xe8\x7c\xde\x6b\xe9\x7b\x2c\xe5\x3e\x3c\x66\xf9\xf7\x5b\x3a\x60\x69\xc2\x52\xee\x0d\xcf\x31\x63\xc5\x73\x2d\x00\x7c\x0c\x66\xb7\x92\xd6\xe6\x58\x57\x8c\x51\xec\xfc\x3c\x6e\x29\xd7\xcf\x18\x72\x7f\x3f\x09\xe0\x30\x80\x0f\x58\x1d\xef\x02\xe3\xce\xb3\x36\x66\x65\x11\x4b\x79\x1e\xb9\x07\x07\x60\x7a\xc2\x7d\xe0\x1e\x0d\xea\x80\x79\x11\xc8\x9c\xe7\xe6\x3b\x5c\x80\x63\x1d\xe9\xb1\x2e\xf1\xd9\x39\xc7\x9d\x95\x22\x5f\x0c\xe6\x4b\xce\x82\x28\x7b\x79\x29\x0a\x4e\xb1\x24\xf3\xe2\x6a\x31\x9c\x13\xd2\xf7\x3d\x5f\x8c\xf6\x37\x0c\x2a\xb9\x9c\x0c\x76\xe8\xc2\x62\x79\x6f\x4e\xb4\x61\xdb\x49\xc5\xf7\xa5\x1b\x8a\xbc\x13\x4a\xe1\xb8\x79\xa3\xf5\x5c\x51\x96\xa1\xf4\x7b\xd5\x5b\xaa\xbc\xbc\x52\xcc\x49\xed\xd9\xaa\xcb\xd2\x09\x2a\xbe\x2c\x4b\x37\x0c\x70\xce\x09\xa5\xfe\x6a\xfb\xc3\x39\x67\x01\xe7\x64\x90\xf3\x8b\xf3\x61\xd1\x73\x71\xce\xa4\x82\xe9\x2b\x7c\x43\x78\xee\x98\x57\x28\xe0\x73\x32\xdc\x43\x4b\xba\xad\x76\xaf\x99\xad\xe6\xbc\x52\x31\xef\x2c\x04\xfd\x2d\x3e\x6f\xb5\xb8\xe0\x86\xd2\xbf\xe2\x94\x44\xc1\xf3\x85\x53\x08\xa5\x2f\xe6\x7d\x19\x04\xe2\x05\x27\x77\x59\xbc\x50\x09\x43\xcf\xed\x35\xca\xd9\xb2\x43\xc7\x2f\x16\x0a\xbd\x3a\xd7\x0b\xff\xa7\x7e\xde\xbb\x2a\xfd\xe3\x26\x73\xee\x0f\x77\x16\xcf\x38\x41\x68\x34\x82\x1b\xd1\x7d\x74\x31\xe3\x5c\x96\xc6\x6c\xa6\xd3\x66\xcc\x78\x6e\x38\x67\xbe\x4b\x0b\x22\x08\x9d\xb0\x18\x84\xc5\x5c\x80\x8b\x32\x90\x21\x2e\x39\x57\x24\x2e\xcd\x79\x57\x45\x36\x65\xe9\x84\xa5\x93\x96\x4e\x19\xea\x94\xbd\x8a\x1b\x1a\x5e\x47\xd1\x9c\x8e\x6e\x58\x8d\xe0\xa5\x90\x55\xd9\x94\x18\x13\x5f\x9c\x43\x76\xc2\xd2\x49\x4b\xa7\x0c\x7d\xde\x29\x55\x24\xb8\x04\xcf\xc5\x45\x39\xef\xf9\x61\x72\x26\x98\x2d\xe6\x93\x9f\xad\xcc\x06\xc9\xac\x97\xe6\xe1\x79\xea\x72\x71\xce\x29\x7b\x27\xfc\x4a\x9c\x2b\x4d\x66\x7d\xc7\x0d\x4a\x4e\xe8\xf9\x69\xf1\xb4\x56\x89\x99\x8a\xef\x94\xbd\xbc\x27\x4e\xf5\xd8\x9f\x8e\x3f\xe3\xb8\xb3\x15\x67\x56\x26\xb3\xd2\x29\xa7\x45\xfb\x9c\x16\x17\x2b\x41\x50\x74\xdc\xf8\xcc\x85\x99\xe9\xe4\xf3\xd2\x0f\x8a\x9e\x9b\x16\xa9\x13\xe3\xf1\xb3\x9e\x1b\x4a\x37\x4c\x66\x17\xe6\x65\x5a\x84\xf2\x9b\xe1\xd8\x7c\xc9\x29\xba\x27\x45\x6e\xce\xf1\x03\x19\x66\x9e\xcb\x9e\x4f\x7e\xa6\x63\xc7\xf9\x14\xa4\x9f\x9c\x76\x73\x5e\xbe\xe8\xce\xa6\x45\xfc\xd9\x52\xc5\x77\x4a\xc9\xf3\x9e\x5f\x0e\xd2\xc2\x9d\xd7\xc7\x20\x33\x79\x52\x18\x36\xe3\x8e\xa6\xc6\x33\x99\x94\x38\x7c\x58\x30\x3b\xfe\x44\x26\x95\x12\x67\xc4\xb8\x48\xeb\xf3\xe9\xcc\xc4\x96\xea\x54\x66\x8a\xd9\x23\xda\xec\x54\x6a\x5c\xbc\xf8\xa2\xb9\x72\x3a\x33\x31\x7e\x54\x9c\x11\x29\x91\x16\x13\x27\xf9\x19\x51\x55\x6a\xd0\xaa\x5a\xa2\x0d\xba\x47\xf5\xed\x12\xb5\xbc\x5d\xa2\x1f\x99\x6d\x97\xb6\x8b\xd4\xf2\x0e\x11\xe8\x36\xdd\xa7\x75\x6a\xd0\x86\xfe\x6b\x52\x43\xa8\x45\x6a\xd0\x5b\xd4\xa4\x75\x6a\xd1\x8a\xa0\xa6\x76\xd7\xa4\x55\xaa\xab\xeb\xd4\xa4\xa6\xa0\xfb\x54\xa7\x15\x6a\xa8\x45\xf5\x12\x35\x69\x8d\x5a\xaa\xaa\x6e\x0a\x55\x15\xd4\xd2\x92\xbb\xb4\x4a\x2d\x7a\x9b\x97\x8d\x7e\xaa\xaa\xb4\x49\x0d\xf5\x12\x6d\x50\x8b\xbd\x75\xc5\x53\xcb\x5d\xd1\xd4\x72\x9f\x58\xfd\x12\x64\x2b\x55\xe3\xf0\xb4\x42\x75\x0e\xff\xf0\xd3\xdc\x1e\x73\x97\x64\x7f\x62\x5a\xab\x5e\x36\x89\xde\xa3\xba\xaa\x51\x5d\x70\x32\x2b\xba\xd2\x75\x75\x4b\xd0\x06\xd5\x85\xaa\xaa\x1b\xd4\x50\x35\x75\x43\x7b\x68\x74\xdf\xad\xb3\x51\xfb\xae\xb6\x5e\x52\x55\x55\x53\x8b\x9c\x2e\x73\x5c\x96\x4e\x7b\x5b\xc0\x4d\x6a\x71\x3a\x5c\x39\x67\x4b\x6b\x9c\xd4\x0f\x8d\xa7\x36\xd3\x9b\x0e\x8b\xb9\xc6\x9b\xa0\xd7\x68\x93\x9a\xaa\x4a\x75\xd3\x68\xee\x7d\x4f\x85\x6c\x7c\x87\x5a\x74\x57\x2d\xab\x1a\x1f\x05\xad\xd0\x2a\xad\x8d\xd1\x8a\x5a\x66\x06\xf4\x3a\xb5\x68\x4d\x2d\x71\x6d\x0f\x67\x9c\x76\x06\x78\x28\xe3\xd0\x27\xcc\xa6\x5a\xd4\x9d\xbd\xc7\x02\x75\x83\xc7\x42\x5d\x13\xfa\xd8\xa0\xb7\xff\x4f\xf7\x3b\x7d\x99\x79\xd9\x30\x23\xdf\x53\x50\xdf\x62\x36\xd9\x3f\xad\xf1\xad\x0d\xaa\xd3\x5b\x1a\x5a\x0d\xc9\x2a\x4f\x30\x6d\xd2\xea\x1e\x5d\xa9\xef\x72\x05\x6a\x91\xde\x34\xc7\x5a\x7b\xa4\x1a\xf4\x26\xb5\x58\x50\x57\x8b\xd4\x54\xdf\xe1\x19\xda\x4b\x6e\x1b\x0c\x7b\xc7\x4d\x53\x5d\xeb\x76\x62\xe0\xe1\x05\x58\xa2\x75\x5e\xfb\xbd\x39\x5d\xa7\x96\x7a\x99\x4b\xd3\xf3\xdf\x3c\xde\x1e\x61\x83\x90\x1e\x6a\xbd\x33\xec\xf0\xf5\xad\xee\x58\x78\x1a\x0c\x42\x8d\x47\x54\x7d\xaf\x83\x69\x5f\xbb\x95\x9d\x56\xed\xbd\xd9\xd4\x1b\xc8\x6f\xc3\x0a\xb5\xe8\x9e\xdd\xc4\xba\x19\x97\x9e\xbd\xe3\x75\x7a\x95\x1a\xaa\xaa\x6e\xa9\xeb\x1d\xf6\x06\x83\xa5\x6e\x09\x7d\xd3\x20\xa6\xab\xe1\xcb\xbc\x5b\x77\x39\x80\xaa\x52\x53\xd5\xd8\xc3\x1d\x6a\xa9\x6b\x7a\x54\x36\xb6\x44\xed\x48\x6a\x99\x43\xb3\x90\xff\xd1\xf7\x97\x4f\xec\x22\x9f\xdc\x45\x3e\xd5\x5f\xde\x86\x6a\xa9\xbf\xde\xf6\x7d\x37\x6d\x0f\x72\xbb\xd5\xd0\xfd\x20\xdd\xb1\x20\xb7\xd4\x2d\x0b\x81\xfe\xf9\x41\x3f\xe0\xe7\xd2\xfc\x04\xd9\xe2\x27\xbb\xf8\xa9\x0e\x4f\x3f\xd2\x8d\xee\xc2\xd0\xbe\x50\xbd\xc0\xee\xc4\xfa\xbf\x01\x00\x00\xff\xff\x6c\x11\x7a\xca\xf5\x0f\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
