// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package v1

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x93\xdb\xb6\x11\xfe\xee\x5f\xb1\xc3\x39\xd7\xa7\x24\xd4\x7b\xdc\xf6\x22\x5d\x3e\xd4\xed\x34\x33\x49\x27\x63\x5f\xdb\x69\x93\xf4\x06\x12\xa0\x13\x62\x12\xa0\x01\x50\xe7\xeb\x8d\xfe\x7b\x06\x04\x5f\x40\x1d\x25\x91\x14\x69\x5b\x31\x35\xe3\xb3\x48\x00\xbb\xc0\xb3\x0f\x76\x29\x70\x81\xc7\x47\xc0\x64\x45\x19\x01\x67\xc9\x99\x22\x4c\x39\xb0\xdd\x3e\x9b\xc9\xa5\xa0\x81\x02\xf5\x10\x90\xb9\x83\x82\xc0\xa3\x4b\xa4\x28\x67\x83\x5f\xd1\x06\x99\x42\xe7\xfa\x19\x00\xc0\x2a\x64\x4b\x5d\x02\x1b\xe4\x85\xe4\x6f\x5c\xf8\x48\x5d\xb2\x1e\x3c\x46\xa5\xfa\x23\x88\x0a\x05\x03\x46\xee\xe1\x3b\xa6\xbc\xfe\x3f\x42\x7f\x41\x44\x5c\xb3\xd7\x5f\x25\x4d\xbe\x89\x5a\x6c\x9f\xcd\x06\x46\xc1\xf5\xb3\x19\xa6\x1b\x58\x7a\x48\xca\xb9\x23\xf8\x7d\xac\xd1\xbe\xbb\xe4\x9e\xeb\x63\x77\x34\x06\xfd\x4d\xfa\xc9\xb7\xf7\xd2\x1d\x8d\xe3\xfa\xbb\x6d\xde\xdf\x06\x88\x11\xcf\x2a\x7d\x5a\x23\x01\x23\x5f\x27\xad\x27\xb8\x47\xe6\x8e\x42\x8b\x22\x49\x69\xcd\xd0\x4b\x04\x32\xb4\x01\x86\x36\xae\x42\x0b\x09\x0b\x24\x6e\xf5\x17\x27\x13\xe3\x51\x59\xa4\x2b\x95\xe4\xd1\xb8\x6e\x20\x88\x24\x4c\x45\xb6\x70\x1e\x1f\x81\xae\x80\xbc\x83\x3e\x32\x26\x70\xb4\xf1\x12\x9d\xfa\xde\x86\xe8\x4a\x84\x61\xd8\x6e\xaf\x67\x08\xd6\x82\xac\xe6\x7b\xda\x65\x96\xbd\xda\x70\x8a\x2f\x87\xbd\x6f\x74\x5b\x4f\x12\xd8\x6e\x1f\x1f\xa1\xff\x9a\xbc\x0b\x89\x54\xfd\x7f\xbe\xfe\xbe\xff\x23\x52\x6b\x73\xdb\x08\x77\xae\xb5\xd0\xd1\x9f\x18\x38\x7f\x09\x85\x20\x4c\x81\x4f\x90\x0c\x05\xf1\x09\x53\xd2\x81\x3e\x6c\xb7\xb3\x01\xba\x9e\x0d\x3c\xda\xc0\x40\x7d\xce\xd4\xda\x7b\xa8\x3b\x5e\xab\x79\x9d\x61\x7f\x6b\xe4\xcc\x63\x31\x7f\x40\x9e\x37\x1f\x15\x61\xf1\x83\xa9\x00\x52\x0f\x44\x2a\xba\x6c\x1e\x09\x4c\x65\xe0\xa1\xda\x48\x58\xcd\x4f\x41\x22\x16\x53\x84\xc1\xab\x44\x43\xc3\x03\x5f\x73\x8f\x62\xf4\x20\xeb\x8e\xdc\x6e\x7f\xca\xd0\x13\x39\x45\x63\xff\x7b\xaa\xe3\xf8\xe0\x67\x83\xd0\xdb\x53\x62\xb9\x26\x85\x16\xee\x7e\xe7\x94\x6b\xb1\xe3\xa4\x6c\x09\xfa\x0e\xac\x10\x26\x60\x10\x03\xca\x0e\x48\xd3\x9f\x83\x73\xe8\x60\xcb\xa8\x3f\x41\xaa\x9d\xbc\x57\xae\x1f\x2a\x82\x61\xc5\x99\x72\x47\x13\xf0\xdd\x85\x3b\x19\x1e\xd1\x6f\xf5\x43\xa0\x7b\xb8\xcc\xfb\x1a\x8c\x14\x01\x45\x7d\x02\x9c\x01\x26\x1b\xba\x24\xf0\x3c\x42\x9d\x51\x2f\xfd\x77\x19\x08\xca\x14\x38\xb9\xe8\xf6\xf3\x9e\xf0\xf6\xb3\x73\x8d\xf9\x32\xd4\xee\xab\x7f\x2f\xa8\x22\x97\x5a\xc9\x0d\x7f\xa3\x04\x65\x77\x97\x2f\x1c\xb8\xec\xeb\x3b\x7d\x13\xc8\xc0\x19\x0f\x87\x2f\xdd\xe1\xc8\x1d\x8e\x6f\x46\x5f\x5f\x0d\xa7\x57\xc3\xaf\xff\x3b\xfc\xe3\xd5\x70\xe8\xf4\xc0\x79\xd1\xeb\xa5\x61\xcd\xe9\xf5\x4a\x61\x36\x08\xae\x9f\x1d\xaf\xa5\xa3\x07\xb1\x6c\xeb\x11\x88\xfe\xba\x52\x09\x1a\x10\xac\xb1\x41\xe6\x3e\x56\xae\x20\x32\xe0\x4c\x6a\x93\x33\x7e\x2f\x50\xe0\x80\x54\x0f\x9a\x27\xf7\x14\xab\xf5\xd5\x68\x38\x7c\x5e\xd2\x12\x33\xb5\x26\x08\x97\xad\x2b\xca\x55\x8c\x05\xef\x78\xd0\x64\xfa\xa8\x75\x4d\x29\x37\x23\x18\xc0\xbf\x1b\x90\x33\x6e\x48\xce\xa4\x21\x39\xd3\x5a\x72\x66\x83\xb2\xf6\xd0\x32\x2b\x58\x79\xc1\xf1\x43\x85\x79\xcc\xee\x08\x5c\xd0\xaf\xe0\x42\xc7\x47\x09\x57\x73\xe8\x9b\x6f\x25\xa6\x87\x51\x28\x8c\x5f\x42\x0c\xc3\x25\x79\x17\x0b\xea\x47\xa4\x81\x0b\x33\x3f\xa3\x8b\x9e\x5d\xfc\x1f\x82\x44\x52\xaa\xbf\xf7\xac\x08\x22\xc3\xe5\x92\x48\x69\x85\x90\x0a\x96\xc1\xa9\x65\xec\x8e\xf4\x8d\xcb\x80\x8b\xc8\x09\x39\x18\xc9\xf5\x82\x23\x81\xa3\xc0\xf5\xf8\x98\xeb\x55\x64\xc5\x92\x70\x27\x3a\x4b\x57\x8e\x1a\x94\x7a\xb2\xdf\xf1\x7c\xf6\xa3\x7d\xd6\xe1\x9b\x11\x6c\xb7\x96\x5f\xab\xd4\x0f\x63\xb7\x3b\x95\x09\xbb\x11\x1a\xf0\x61\x59\xdb\xe7\x07\x15\x20\x96\x58\xd0\x43\x0b\xe2\x41\xf4\xd7\xc5\x9a\x62\xc2\xb9\x6e\x74\xd4\xaf\x88\xa7\x50\x7e\xe8\x30\x68\x16\x58\x83\x45\x4e\xc5\x6c\xa0\x07\x59\x19\xe4\xe8\x19\x86\xae\xc0\x6b\x19\xe9\x64\xde\x74\x50\x43\xe6\x68\xda\x81\x9a\xb2\x15\xef\x70\xce\x3b\x0f\x33\x80\x86\x9d\x07\x59\xa1\xd0\x53\xed\x43\x5d\x17\x87\x08\xcf\xf2\xa1\xe2\x7c\x02\xcb\xb8\xc9\xc0\x32\x3e\x97\xc0\x32\x6e\x7f\x16\x8e\x5b\x0d\x2c\xad\x20\xdd\x4a\x60\x39\x4f\xa8\xad\xc0\xd2\x0a\xd4\xcd\x07\x96\xf3\xc4\xd9\x76\x1e\x67\x13\x58\x8a\xa0\xee\x02\xcb\x0e\x48\x93\x26\x03\xcb\xe4\x5c\x02\xcb\xa4\xfd\x59\x38\x69\x35\xb0\xb4\x82\x74\x2b\x81\xe5\x3c\xa1\xb6\x02\x4b\x2b\x50\x37\x1f\x58\xce\x13\x67\xdb\x79\x9c\x4d\x60\x29\x82\xba\x0b\x2c\x3b\x20\x4d\x9b\x0c\x2c\xd3\x73\x09\x2c\xd3\xf6\x67\xe1\xb4\xd5\xc0\xd2\x0a\xd2\xad\x04\x96\xf3\x84\xda\x0a\x2c\xad\x40\xdd\x7c\x60\x39\x4f\x9c\x6d\xe7\x71\x36\x81\xa5\x08\xea\x4f\x2d\xb0\x94\x7f\x53\x56\xad\x17\xb3\x41\xc9\x77\x65\xb3\x41\xf4\xee\xf6\xe8\xcb\x79\x6b\xc6\x15\xe5\x76\x1c\xd7\xb3\xe2\xc2\x07\x8a\xe7\x59\xab\x98\x07\xba\xc0\x5d\x73\x41\xff\xcf\x99\x42\x1e\x44\xd7\x86\x16\x1e\x59\x29\x27\x7a\xc1\xec\x2a\x7e\x77\xe7\x91\xb9\xb3\x41\x1e\xc5\x48\x71\xe1\x80\x4f\xd4\x9a\xe3\xb9\x13\xf0\x83\xc9\x4d\xb9\x5e\x58\x99\x0e\x91\x9e\x3b\xc1\xc3\xa0\x64\xe3\x48\x80\x61\x6d\x9a\x1d\xc6\x94\xe0\x9e\x1b\xdf\x34\xb9\x62\xd3\x24\x55\x6c\x6a\x65\x8a\xe9\x51\xcd\x1d\x9f\x63\x72\xab\x46\x15\xf4\x41\x1c\xbf\xa3\xb7\xb1\x6f\xd6\xfc\x1e\x6e\x46\xe6\x6d\x6c\x7e\x32\x09\xf2\x2e\xa4\x82\x60\xe7\xfa\x8b\xaa\x14\x9f\x0d\xa2\xee\x57\x68\xf0\x34\x3f\xee\x65\x32\xe6\x97\x85\xd9\x71\xa5\xa4\x52\x16\x84\xc9\xc4\x5f\xae\xc9\xf2\xed\x82\xbf\x4f\x49\xf2\xab\x74\xe5\x3d\x55\xcb\xb5\x03\x0c\xf9\x24\x83\x32\xa2\x54\x7a\x91\x66\x91\xc4\xa9\x18\xfd\xb8\xa4\x07\x8e\x12\x21\x31\xa9\x3c\x5a\x36\xc1\xe9\x7c\x82\x41\x15\xac\x30\xdd\x94\x9d\xd9\xe5\xab\x7e\x0a\xac\xac\x6a\xaf\x1d\x56\x8e\x3b\x56\x92\x0c\x4a\x8b\x95\xe3\xbd\xac\x1c\x77\xac\x3c\xca\xca\xc9\x69\xac\x9c\x74\xac\x24\x19\x94\x16\x2b\x27\x7b\x59\x39\xe9\x58\x79\x94\x95\xd3\xd3\x58\x39\xed\x58\x49\x32\x28\x2d\x56\x4e\xf7\xb2\x72\xda\xb1\xf2\x18\x2b\x91\xcf\xc3\x83\x49\xbb\x45\x9f\x3c\x33\x63\x11\x1d\x3b\xf3\x90\x66\x0c\x4d\x6e\x14\xb3\xd4\x94\x76\x4c\x3d\xc6\xd4\x80\xdf\x13\x71\x12\x51\x8d\x84\x8e\xa7\x39\x40\x33\x9a\xc6\xd7\xc5\x2c\x8d\x0a\x3b\x92\x1e\x0d\xf2\xd4\x27\x27\x71\x34\x12\xd0\x51\xd4\x86\xd3\x0a\xf5\xd1\xe5\x9e\x60\x4f\x7d\xd2\xf1\xf3\x18\x3f\x31\x52\xa7\xf1\x33\x12\xd0\xf1\xd3\x86\x33\xe3\xa7\xb9\x7c\xc2\x4f\x7d\xbb\xa3\xe6\x01\x6a\xea\xb9\x7b\xc2\x0a\xe7\x77\x4c\x11\xb1\x31\x8b\xc0\xc0\xb8\x82\x65\xbc\x01\x4b\x21\x41\x57\xab\xcf\x80\xae\x2c\xda\xbc\x9c\x50\x33\x81\x33\x22\x66\x7a\x11\xbd\xef\x88\xb6\x1c\xf6\xe3\x7b\xb0\xdd\x3a\x10\x20\xa5\x88\x60\x73\xe7\x7f\x3f\xb9\x5f\xfe\xf2\xed\x4f\x43\xf7\xcf\xbf\x7c\x71\xe1\x74\x94\xf4\x4f\x59\xde\xcc\x51\xb2\xa3\x63\xb6\xbc\x99\x5e\x3c\xa1\xe3\xb8\xa3\xe3\x31\x3a\xd6\x5e\xd7\xcc\xd1\x31\x7a\x94\xff\xca\x6c\x4c\x45\x0c\x7f\x2e\x21\xbd\x88\x94\x13\x9b\x94\x93\x02\x52\x4e\x3a\x52\x1e\x23\x65\xed\x65\xcd\x1c\x29\xd1\x4a\x11\x01\x81\x20\x52\xc2\x02\x2d\xdf\xc2\x22\x54\x8a\xb3\xcf\x94\x97\x53\x9b\x97\xd3\x02\x5e\x4e\x3f\x1a\x2f\x2b\x13\xd3\x63\xb7\x92\x7b\x14\x3b\xd7\x1f\x94\xd9\xe5\x0c\x97\xb0\x9c\xaf\x56\x92\x28\xb7\xaa\x83\x9d\x19\x96\xc6\x96\x14\x44\x12\x95\xfe\x62\x58\x28\x06\x0b\xc5\x4c\x36\x50\x62\x41\x53\x25\xdb\x2a\xfd\xda\x34\x31\x1b\xa5\x8d\xb0\x53\x7a\x20\xc3\x85\x4f\x9f\x76\x21\xc9\xfd\x4a\x7a\x21\xd1\x86\x58\x9d\x78\xa3\x2f\x6b\xf6\xa1\x79\xc7\x36\x1b\x68\x83\xd7\x4a\x2d\xb1\x0f\xcf\x38\xae\xe7\x77\x7e\x46\xc1\xab\xec\x74\x93\xda\x3b\xf9\x6b\x9d\x73\xf0\x09\xec\xe3\x87\x27\x7b\xf9\x31\x7a\x88\x76\xf2\x27\x14\xa9\x94\x98\x55\xc5\x06\x00\xe9\x9e\x7b\xad\x34\x3b\x88\xc3\xa9\xbc\x8d\xde\x12\x65\xb6\xef\x6b\x79\x47\x37\xef\x57\xcc\x4f\x2e\x6d\x2c\xf8\x44\xd2\xc9\x3e\xdb\xa9\x9d\x8c\xc7\xc7\xae\x8e\x5a\x63\xfb\x44\xa7\xec\x54\xab\x9a\x73\xfe\x80\xf0\x7f\xe9\xa0\x71\xb2\x2b\x79\x45\x4c\x32\x25\x4d\x1e\xea\xce\xce\xa1\xd4\x75\x03\x89\x3b\x56\xe6\xe7\x56\xb6\xc2\x5f\xdd\x1b\x98\xa5\xc5\x68\x41\x51\x8b\xe9\x13\x21\xb8\xa8\x95\x53\xab\x70\xee\xec\xa3\x24\x0f\x5f\x3f\x61\xe6\xa5\xf7\xff\x1a\xeb\xa8\xd5\xdb\xb2\x33\xb6\xa0\x7f\xd5\x74\xa5\x0d\xeb\xa4\x02\xe7\xcf\x50\xca\x61\x10\x3d\x31\x95\x38\x4d\x09\xb6\xdb\x17\x75\xb7\x5a\x24\x1f\x63\x5d\x46\x2c\xf5\xb8\x7e\xda\x74\x86\x88\x12\x9c\xdd\x15\x9a\xbb\xb6\xd0\x74\x77\x48\xa3\x5d\x85\xec\xe7\xe1\x8f\x5e\x28\x90\x07\xce\x97\xcf\x31\x48\xb2\xe4\x0c\x3b\xf6\x85\x74\x9e\x68\xbe\xc8\x9d\xaa\xb5\x5b\x7a\x42\xaf\x4e\xa0\xf1\x81\x81\xd9\xe3\xfa\x68\xc3\xaa\x96\xa0\xbe\xfb\x99\x0d\x0c\xb5\x6a\xb3\xbd\xa6\xfe\x7a\x9e\xa8\xba\xae\x9c\xff\xce\x1d\xea\x96\xf8\x71\xe0\x0c\x7c\xa2\x92\xac\x82\x36\x1f\xbd\x4e\x8b\x3e\x3f\xa0\xb7\xc4\x5a\xe8\xab\x1d\x79\x7c\xf4\xd6\xbc\xe6\x6a\x27\xf4\xec\x88\xff\x78\xb1\x27\xdf\x99\x7d\x41\xa0\xde\x23\x7d\x03\x64\x3c\xc9\x9c\x1f\x92\x77\xdf\x23\xa9\xcc\x82\x33\xf0\xe4\xd5\x47\x6d\xf2\x79\x48\x2a\x93\x88\x72\xcb\x57\xab\xdb\x76\x9f\x82\x0e\x2a\xfb\x78\xc4\x6c\xe8\xf9\x66\xdf\xe8\x6a\x3e\xee\x7c\xc8\x49\x70\x1e\x64\x67\x0d\x72\x9d\x7d\x40\xaa\xef\xea\xfa\x5d\x31\x9d\x75\x44\x6f\x65\x59\xe6\xf0\xf8\x0e\xac\xfb\xee\x29\x2a\xb8\xbd\x73\xcb\xba\x8c\xbf\xc6\xff\xa5\xdd\xf9\x2d\x00\x00\xff\xff\x43\xa2\x6c\x9b\x44\x5e\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6c\x5c\x57\x15\xfe\x82\x67\xa6\xf6\xc4\x33\x40\x69\xcb\x4f\x69\xb9\x85\x26\xb4\xa4\x93\x7a\x6c\x0b\x95\x49\x26\x01\xea\x14\x02\xb5\x68\x93\x69\x80\x45\x81\xd7\x99\x3b\xf6\x53\x66\xde\xb3\xde\x7b\x93\x60\xc8\xc2\x63\x27\x4d\x2a\x87\x46\x82\x22\x58\x54\x94\x50\x56\x48\x48\x53\x37\x93\x8e\xff\xc6\x94\x25\x02\x74\xae\xc4\x86\x05\x3f\x42\xaa\x84\xd8\x75\x01\x5b\xd0\xb9\xf7\x7a\x7e\xec\x31\x72\x17\xb9\x52\x72\xce\x3d\xe7\xdc\xf3\x9d\xdf\xe7\xf9\xeb\xdd\xb1\x1f\x03\xc0\x11\x00\x1f\x07\x10\x1d\x00\x8e\x01\xf8\xfd\xfb\xa0\x4f\x6b\x08\xb8\x07\xc0\xea\x10\x70\x1f\x80\x3f\x0e\x01\x8f\x00\x78\x67\x08\xb8\x1f\x40\x3a\x66\xee\x9f\x89\x99\xfb\xd9\x18\xf0\x20\x00\xdf\xd2\x97\x63\xe6\xfd\xaf\x63\x40\x0a\xc0\x6f\x63\xc0\x10\x00\x8a\x01\x07\x01\xfc\x29\x06\xdc\x05\xe0\xef\x31\xe0\x10\x80\x7f\x5a\x9a\x8e\x03\x0f\x01\x98\x8c\x03\xc3\x00\xce\xc5\x81\x87\x01\x7c\x3b\x6e\x70\x2e\xc7\x81\x4f\x00\xf8\xb9\xb5\xfb\x4d\x1c\x48\x03\xf8\x47\xdc\xe0\xbc\x1b\x07\x46\x00\xfc\x37\x6e\x70\x46\x12\x40\x1c\xc0\xbd\x09\xe0\x6e\x00\xf7\xdb\xfb\xd1\x04\x10\x63\x9c\x84\x89\xe3\x73\x96\x7e\xc1\xd2\xd3\x96\x3e\x9b\x30\x7e\xbe\x99\x30\x7e\x65\x02\x48\x72\x9e\xf6\xfe\x3d\x6b\x77\xd9\xd2\xeb\x96\xbe\x62\xe9\xab\x16\xef\x97\x09\xe0\xe4\x01\xe0\x57\x09\x60\x02\xc0\xbf\xee\x02\x3e\x0b\xe0\xc1\x61\xe0\x3b\x00\x9e\x1b\x06\x4e\x02\xb8\x3d\x0c\x94\x01\xfc\x67\x18\x38\x05\xe0\xf9\x11\xd3\x97\xd7\x47\x80\x49\x00\x7f\x1b\x01\x3e\x05\xe0\x9e\xa4\xe9\xcb\x13\x49\x53\xa7\xaf\x25\x81\x0f\x00\xf8\x46\xd2\xe4\xe9\x26\x8d\xdf\x4b\x49\xe3\xef\x2f\x49\xe0\x5b\x00\xa6\x0e\x02\x0f\xb0\xbf\x83\xc0\x57\x00\xbc\x7d\x10\x78\x06\xc0\xe8\x28\x50\x60\xbc\x51\x73\x5f\x19\x05\x3e\x0d\x60\x28\x65\xfa\x72\x24\x65\xea\xfd\x6c\xca\xf4\x35\x4c\x99\x3a\x5c\xb3\xfa\x1f\xa5\x0c\xfe\x6a\xca\xe0\xff\x2e\x05\x7c\x98\x71\x2d\xfd\xb7\xa5\xa9\xb4\xa1\x87\xd2\xa6\x8f\xf9\xb4\x89\xe7\xf9\xb4\xf1\xf3\x7d\x2b\xbf\x99\x36\x75\x7f\xdb\xd2\x3f\x58\xfa\x67\x4b\xdf\x49\x1b\xbc\x77\xd3\xc0\x01\x9e\x43\x3b\xcb\x3c\x93\x0f\xa0\x7b\xb8\xf6\xf7\x59\x9e\xed\x3f\x06\xe3\xff\x43\x30\xf9\xf0\x4c\x7e\x12\x26\x97\x8f\x5a\x3b\xce\xfb\x30\xcc\x5c\xf1\x19\xb5\x94\xeb\xfe\x11\x00\x8f\x02\x78\xbf\xdd\x9b\xed\xc3\xb1\xf3\x7c\xa6\xec\xfd\x83\x30\x7b\xb0\x7d\x84\xa5\xf7\xc2\xcc\x1d\xd7\x90\x57\x8d\x7b\xc7\x73\xc2\x35\xe1\xba\x8d\xa0\xff\x24\x2c\xe5\x9c\x1f\xd6\x40\x25\x11\xca\xa2\xef\x95\xba\x5c\x88\x23\x5d\xe9\x91\x1e\xf1\x93\xb3\x8e\x37\x23\x45\xc9\x0d\xe7\x2a\xce\xbc\xa8\xfa\x25\x29\xca\x8e\x5b\x91\x25\x71\xd1\x8d\x66\x85\x0c\x02\x3f\x10\x87\x06\x1b\x86\xb5\x62\x51\x86\xbb\x74\x91\x5b\xdd\x9f\x13\x6d\xd8\x71\x52\x0b\x02\xe9\x45\xa2\xe4\x44\x52\x38\x5e\xc9\x68\x7d\x4f\x54\x65\x24\x83\x7e\xf5\xb6\xaa\x24\x2f\xb8\x45\xa9\x3d\x5b\x75\x55\x3a\x61\x2d\x90\x55\xe9\x45\x21\xa6\x7a\x5d\x61\xca\x99\xc7\x94\x0c\x8b\x81\x3b\x17\xb9\xbe\x87\x29\x13\x05\xbe\x24\xa3\x7d\xe4\xdf\x6b\xb5\x77\x82\x6c\x35\xeb\x57\xdc\x92\x33\x1f\x0e\xb6\xf8\xb2\xd5\xe2\xb4\x17\xc9\xe0\x82\x53\x11\x65\x3f\x10\x4e\x39\x92\x81\x98\x0b\x64\x18\x8a\x17\x9c\xe2\x79\xf1\x42\x2d\x8a\x7c\xaf\xdf\xa8\x68\x73\x8c\x9c\xc0\x2d\x97\xfb\x75\x9e\x1f\xfd\x5f\xfd\x9c\x7f\x51\x06\x8f\x99\xc8\xb9\x22\x5c\x46\x3c\xed\x84\x91\xd1\x08\xbf\x5c\xee\xbb\x7a\x98\x76\xce\x4b\x63\x36\xdd\xad\x29\xa6\x7d\x2f\x9a\x35\xff\x57\xe6\x45\x18\x39\x91\x1b\x46\x6e\x31\xc4\x19\x19\xca\x08\x67\x9d\x0b\x12\x67\x67\xfd\x8b\xa2\x90\xb5\x74\xdc\xd2\x09\x4b\x27\x0d\x75\xaa\x7e\xcd\x8b\x0c\xaf\x51\x34\xa7\xd1\x0d\xab\x7b\x56\xc8\x8a\xc7\xc5\xd7\x67\x51\x18\xb7\x74\xc2\xd2\x49\x43\xcf\x39\x95\x9a\xc4\x19\x39\xe7\x07\x51\x66\x3a\x9c\x71\x4b\x99\x2f\xd6\x66\xc2\x4c\xc1\xcf\xf1\x70\x7c\xfe\xbc\x3b\xeb\x54\xfd\xa3\x41\x2d\xc9\xc9\x65\x0a\x81\xe3\x85\x15\x27\xf2\x83\x9c\xf8\xaa\x56\x89\xe9\x5a\xe0\x54\xfd\x92\x2f\x8e\xf7\xd9\x9f\x48\x3e\xed\x78\x33\x35\x67\x46\x66\x0a\xd2\xa9\xe6\x44\xe7\x9e\x13\x67\x6a\x61\xe8\x3a\x5e\x72\xfa\xf4\xf4\xa9\xcc\x39\x19\x84\xae\xef\xe5\x44\xf6\xe8\x58\xf2\x49\xdf\x8b\xa4\x17\x65\x0a\xf3\x73\x32\x27\x22\xf9\xdd\xe8\xf1\xb9\x8a\xe3\x7a\xc7\x44\x71\xd6\x09\x42\x19\xe5\x9f\x2b\x3c\x95\x79\xa2\x6b\xc7\xf1\x94\x65\x90\x39\xe5\x15\xfd\x92\xeb\xcd\xe4\x44\xf2\x99\x4a\x2d\x70\x2a\x99\xa7\xfc\xa0\x1a\xe6\x84\x37\xa7\xaf\x61\x7e\xe2\x98\x30\x6c\xde\x3b\x94\x1d\xcb\xe7\xb3\xe2\xf0\x61\xc1\xec\xd8\x43\xf9\x6c\x56\x9c\x14\x63\x22\xa7\xef\x27\xf2\xe3\xdb\xaa\xe3\xf9\x49\x66\x1f\xd1\x66\xc7\xb3\x63\xe2\xd2\x25\xf3\xe4\x44\x7e\x7c\xec\x51\x71\x52\x64\x45\x4e\x8c\x1f\xe3\xcf\x84\xaa\x53\x93\xd6\xd4\x12\x6d\xd2\x2d\x6a\xec\x94\xa8\xe5\x9d\x12\xfd\x11\xd9\xf1\x68\xa7\x48\x2d\xef\x12\x81\x7e\x4a\x6f\xd1\x06\x35\x69\x53\xff\x6b\x51\x53\xa8\x05\x6a\xd2\x6d\x6a\xd1\x06\xb5\x69\x45\x50\x4b\xbb\x6b\xd1\x1a\x35\xd4\x8b\xd4\xa2\x96\xa0\xb7\xa8\x41\x2b\xd4\x54\x0b\xea\x1a\xb5\x68\x9d\xda\xaa\xae\xae\x0b\x55\x17\xd4\xd6\x92\x37\x68\x8d\xda\xb4\xca\xfb\x45\xaf\xab\x3a\x6d\x51\x53\x5d\xa3\x4d\x6a\xb3\xb7\x1e\x3c\xb5\xdc\x83\xa6\x96\x07\x60\x0d\x0a\x90\xad\xd4\x22\xc3\xd3\x0a\x35\x18\xfe\xce\x87\xb9\x13\x73\x8f\x60\x7f\x61\x4a\xab\x5e\x32\x81\xde\xa2\x86\x5a\xa4\x86\xe0\x60\x56\x74\xa6\x1b\xea\x86\xa0\x4d\x6a\x08\x55\x57\x57\xa9\xa9\x16\xd5\x55\xed\xa1\xd9\xfb\xb6\xc1\x46\x9d\xb7\xda\x7a\x49\xd5\xd5\xa2\x5a\xe0\x70\x99\xe3\xb4\x74\xd8\x3b\x00\xb7\xa8\xcd\xe1\x70\xe6\x1c\x2d\xad\x73\x50\xaf\x0c\x8a\x82\xc5\x9c\xda\x75\xd0\xcf\x68\x8b\x5a\xaa\x4e\x0d\x53\x5f\x2e\x79\x5f\x62\x6c\xfc\x1a\xb5\x69\x5d\x2d\x71\xcc\x77\x66\x4c\x76\x03\xdc\x91\x36\x0f\x80\xd9\x52\x0b\xba\x62\xb7\x58\xa0\xae\x72\xbb\xd5\x15\xa1\xaf\x4d\x5a\x7d\x8f\xee\x77\xfb\x32\x73\xb0\x69\x46\xb9\x2f\xa1\x81\xc9\x6c\xb1\x7f\x5a\xe7\x57\x9b\xd4\xa0\xdb\xba\x77\x2d\x1e\x88\x35\x9e\x4c\xda\xa2\xb5\x7d\xba\x52\x3f\xe0\x0c\xd4\x02\xbd\x69\xae\x8b\x9d\x51\x69\xd2\x9b\xd4\x66\x41\x43\x2d\x50\x4b\x5d\xa6\xc6\xfe\x62\xdb\xe4\xb6\x77\xdd\xb4\xd4\x95\x5e\x27\xa6\x3d\x3c\xd8\x4b\xb4\xc1\xeb\xbc\x3f\xa7\x1b\xd4\x56\x2f\x71\x6a\x7a\xae\x5b\x8f\x75\x66\xd4\x74\x48\x4f\xad\xde\x05\x76\xf8\xda\x76\x75\x6c\x7b\x9a\xdc\x84\x45\x5a\xa3\x75\xf5\x72\xb7\xa7\x03\xed\x56\x76\x5b\x75\x16\x63\x4b\x6f\x16\xef\xfc\x0a\xb5\xe9\x96\xdd\xb0\x86\x19\x97\xbe\x7d\xe2\x7d\x79\x95\x9a\xaa\xae\x6e\xa8\x17\xbb\xec\x55\x6e\x96\xba\x21\xf4\x4b\xd3\x31\x9d\x0d\x3f\x06\xdd\xa4\x37\x18\x40\xd5\xa9\xa5\x16\xd9\xc3\x4d\x6a\xab\x2b\x7a\x54\x36\xb7\x45\x1d\x24\xb5\xcc\xd0\x2c\xe4\xbf\xd9\x83\xe5\xe3\x7b\xc8\x27\xf6\x90\x4f\x0e\x96\x77\x5a\xb5\x34\x58\x6f\xeb\xbe\x97\xb6\xaf\x73\x7b\xe5\xd0\xf3\xc5\xd1\x3f\x1e\xe8\x87\xfc\xcd\x33\x3f\x20\xb6\xf9\x89\x1e\x7e\xb2\xcb\xd3\x4f\x74\x55\xbb\x0d\xfb\x5f\x00\x00\x00\xff\xff\x42\xbd\x76\x5e\x02\x0f\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
