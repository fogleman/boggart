// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package v3

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6b\xe3\x3c\x10\x7d\xef\xaf\x10\x86\x3e\x3a\x89\x1d\xf8\xf8\x58\xd2\x40\x77\xbb\x7d\x5b\x28\x14\xba\x8f\x41\x89\xc6\x89\x58\x5b\xf6\x4a\xca\xa5\x84\xfc\xf7\xc5\xb7\xf8\x1a\x27\x6e\x25\xc7\x59\x76\x61\xdb\x5c\x74\xe6\x4c\xce\x19\x8d\xa6\x22\xfb\x3d\x22\xe0\x50\x06\xc8\x58\xf8\x4c\x02\x93\x06\x3a\x1c\xee\x26\x84\x6e\xd0\xc2\xc5\x42\x3c\x18\xdc\xdf\x1a\xd3\x3b\x84\x10\xca\xbf\xba\xf0\x5d\xd3\x23\xa6\x65\xa3\xf0\x91\xf0\xd2\x47\x3b\x61\x5a\x76\xb2\xbe\x8c\xd9\xcd\x02\xcc\xc0\xcd\xbd\x5b\x5d\x21\xa9\x74\xa1\xb4\x22\x5a\xb5\xb2\xa7\xfb\x3d\xa2\xd6\xff\x0c\x19\xdf\xd6\x9c\x03\x93\xc8\x03\x2c\xd6\x1c\x3c\x60\x52\x18\x68\x80\x0e\x87\xc9\x70\x65\xd7\x80\xf3\x89\xbb\x80\xb9\x43\x77\xc6\x74\x32\x24\x74\x53\xca\xa5\xe6\xa5\x42\x7a\xa9\x48\x35\x1c\x12\xcf\x5d\x48\x57\xc6\x4f\xa2\x9f\xa6\x90\x9c\x06\x40\x10\xc1\x12\xc7\xaf\x13\x69\x72\x10\x81\xcf\x04\xdd\x00\x62\xfe\x96\xe3\xc0\x40\x42\xbe\xbb\xf0\x60\x6c\x29\x91\xab\x2f\xd6\x68\x74\x5f\xc3\x12\x33\xad\x00\x93\x53\xef\xf1\xfa\x37\x12\x60\x9a\x9f\x47\xcc\xd0\x2d\xdb\xc8\x44\xfd\x91\x89\x99\x6a\x29\x57\x67\x82\xf9\xae\x08\x30\x7b\x30\xc6\xb9\x38\x6f\xd8\x5d\xc3\x85\x11\x32\xd4\x13\x88\x05\xa7\x81\xa4\x3e\x3b\x87\x9d\x0c\x4f\x7d\xc8\x10\xd3\x20\xcd\xdc\x27\xef\x4d\xe9\x34\x48\x17\x2f\x20\x59\xbe\xaf\xc0\x29\x76\x11\x5b\x7b\x73\xe0\xc7\x8c\x4f\x50\xa7\xff\x42\xb4\x83\x06\x22\xc2\xce\x62\xec\x00\x38\xf7\x79\xb8\xe9\x9a\x90\x09\xff\xb1\xbc\x60\x27\x4d\x82\xd9\x32\xe4\x2e\xb9\x50\x17\x7e\xf0\x3d\x21\xb9\x28\x47\x70\x05\x5c\x9c\x50\x23\xf9\x26\xac\x85\x8b\x69\x19\x39\xc7\x5a\xb0\xe0\x09\x36\x74\x01\x48\xb4\x75\xe2\x74\xfd\xa0\xd6\x65\xf0\x75\x4d\xdd\x68\x67\x43\xcb\x1a\x98\x87\xc0\x59\x08\x54\x5f\x00\xe5\xd8\xdd\xb9\x9f\x63\x8e\xac\x1f\x3c\xfb\xdc\xc3\x12\x19\xf6\x68\xf4\x9f\x39\xb2\xcc\x91\x6d\x28\x2e\x87\xee\xbc\x7e\xa6\xdc\xdb\x62\x0e\x68\x03\x5c\xe4\xfb\xd4\x65\x8e\x3b\x09\x7c\x96\xc0\xd5\xfb\x5e\xcf\xd0\x9d\xfb\x15\x7e\x1d\xdb\xbf\x3b\xbf\x1f\x09\xe1\x20\x44\x4b\x9b\x71\x8c\x52\xef\x6e\x21\x70\x77\xa6\xa6\xb4\x5d\xb4\x72\x06\x72\xeb\xf3\x5f\x08\x5f\xae\xbc\x4a\xc3\x5f\xfc\x6d\xeb\xb3\x3c\x08\x31\xea\xcd\xce\x85\xed\xcc\xea\x58\x84\xfb\x81\xed\xa0\x9f\xa1\x0a\x8c\xba\xc7\xff\x49\x42\x5a\x8b\x20\x92\x1f\x89\xb5\xe7\x61\xfe\x7e\x15\xef\x91\x83\x17\xd2\xe7\x6d\xb7\x7c\xa4\xcd\x2c\xc1\x6a\xaa\x85\x62\xf8\x1e\xd5\xc4\x31\xb1\x0e\x6a\x23\xa1\xba\x56\x8d\x3c\x73\xf8\xbd\x06\xb6\xb8\x88\x18\xe5\x4e\xfe\x14\xa7\xe1\xc8\x2f\x86\xee\x47\x5d\x64\x49\xdd\xf6\x00\xf0\xaf\x27\x9c\xf1\xfe\x9a\x1d\xe1\xf5\x9a\xe7\x84\xc4\x9c\x3a\x0e\xb2\x3e\x54\x14\xd2\xd2\x55\x0f\x69\xe4\xce\x4b\x81\x9c\x3c\x1d\xa4\xf5\xf7\x94\xc1\x6a\xda\x7c\xa1\x85\xca\x97\x5a\x2f\x2b\x2c\x20\x57\x25\xed\xb1\xf6\x27\xb0\xe3\x36\xd8\x33\x57\x75\x0a\x77\xd0\x9b\xef\x4a\xbc\x6c\x7b\x5f\xb2\x89\x51\xb3\x20\xfc\x68\x9f\xdf\x40\xd1\xa6\xa9\x8b\xa9\x6d\xeb\x94\x4e\xcd\xb7\xca\x7e\x29\x65\xa3\x7a\xd7\xd4\xe9\x68\x6b\xd0\xd1\xee\x95\x8e\x76\x27\x3a\x8e\x35\xe8\x38\xee\x95\x8e\xe3\x1b\x1f\xe5\x1e\xbd\x00\x78\xfb\xae\x83\x13\x98\xd2\xb6\x53\x1b\xb4\x2b\x9f\x1f\x2b\x3e\x97\xd3\xd1\xb4\x61\x8a\x34\x8a\x3a\x4f\x6d\xd0\xbe\x48\xa9\xad\xf7\x14\x69\x14\x35\x9f\xda\xa0\x7d\x91\xf2\xd6\xdb\xcf\x87\x6f\x16\x95\x36\x9e\x6a\xc4\xae\xfc\x3d\xf5\xd7\x81\xde\x96\x93\xe3\x50\xd4\x6f\xaa\x11\x7b\xa1\xa0\xb6\x4e\x93\xe3\x50\xd4\x66\xaa\x11\x7b\xa1\xe0\xcd\x37\x98\xf0\x43\x08\x84\xd9\xd2\x6d\x3d\xe3\x84\x18\xb5\x03\x4e\x25\x62\x57\x1e\x13\x58\x56\x4f\x92\x7c\x36\xba\x4e\xe4\x8c\x43\xd5\x64\x53\x89\xd8\x13\x0d\xf5\x4d\x35\x19\x87\xaa\x91\xa6\x12\xb1\x27\x1a\xde\x7c\xb7\x51\x75\x31\xae\x61\xbc\xa9\x8b\xdc\x91\xed\xcd\xd7\xe1\x9d\x0c\x3b\x05\x2e\xa5\x43\x4f\x5d\xe4\x1e\xe9\xaa\x79\x04\x2a\x70\x29\x1d\x85\xea\x22\xf7\x48\xd7\x7e\xb5\xaa\xc9\xf0\xc4\x97\x38\x27\xc3\xe8\x9b\xb5\x8d\xdf\xe6\xcd\x3d\x4d\x1e\x26\xbf\xb2\xbc\xff\x04\x00\x00\xff\xff\xe1\x74\x33\x38\x0f\x2d\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
