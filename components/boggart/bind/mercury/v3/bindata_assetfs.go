// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package v3

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5d\x8b\xe3\x36\x14\x7d\xdf\x5f\x71\x31\xec\xa3\x93\xd8\x81\x52\x4a\x26\xb0\xed\x76\xde\x0a\x0b\x85\xe9\x63\x50\xa2\xeb\x44\xd4\x96\x5d\x49\xf9\x18\x42\xfe\x7b\xf1\x57\xfc\x19\x27\xde\x95\x3c\x0e\xed\xc2\xce\x24\xb1\xce\x3d\xd7\xe7\x5c\x5d\x69\x14\x9f\xcf\x40\xd1\x63\x1c\xc1\xda\x84\x5c\x21\x57\x16\x5c\x2e\x9f\x16\x94\x1d\x60\xe3\x13\x29\x5f\x2c\x11\x1e\xad\xe5\x27\x00\x80\xf2\xa7\x9b\xd0\xb7\x03\x6a\x3b\x2e\xc4\xaf\x64\x90\xbf\x3a\x49\xdb\x71\xb3\xf1\x75\xcc\x69\x15\x11\x8e\x7e\xe9\x6a\x73\x84\x62\xca\xc7\xda\x88\x64\xd4\xce\x5d\x9e\xcf\xc0\x9c\x9f\x39\x58\xbf\xed\x85\x40\xae\x20\x40\x22\xf7\x02\x03\xe4\x4a\x5a\x30\x81\xcb\x65\x31\xdd\xb9\x2d\xe0\x72\xe2\x3e\x12\xe1\xb1\x93\xb5\x5c\x4c\x29\x3b\xd4\x72\x69\xf9\xa8\x92\x5e\x2e\x52\x0b\x87\x22\x6b\x1f\xf3\x91\xe9\x9b\xe4\xa7\x2d\x95\x60\x11\x52\xa0\x44\x91\xf4\x73\xaa\x6c\x81\x32\x0a\xb9\x64\x07\x04\x1e\x1e\x05\x89\x2c\x90\xea\xdd\xc7\x17\xeb\xc8\xa8\xda\xfd\xe2\xcc\x66\x9f\x5b\x58\x52\xa6\x1d\x12\x7a\xeb\x9a\x68\xbf\x90\x01\xf3\xfc\x02\x6a\xc7\x6e\xb9\x56\x21\xea\x1f\x85\x98\xb9\x96\x6a\x77\x27\x58\xe8\xcb\x88\xf0\x17\x6b\x5e\x8a\xf3\x46\xfc\x3d\x3e\x18\xa1\x40\x7d\x45\xb9\x11\x2c\x52\x2c\xe4\xf7\xb0\x8b\xe9\xad\x9b\x8c\x31\x1d\xd2\xac\x43\xfa\xde\x95\x4e\x87\x74\xe9\x00\x5a\xe4\xfb\x27\x0a\x46\x7c\xe0\xfb\x60\x8d\xe2\x9a\xf1\x0d\xea\xfc\x5f\x8c\xf6\x60\x22\x13\xec\x2a\xc5\x4e\x50\x88\x50\xc4\x93\xae\x0b\x99\xf1\x5f\xcb\x0b\x4f\xca\xa6\x84\x6f\x63\xee\x9a\x0b\x6d\xe1\x27\xbf\x67\x24\x0f\xe5\x88\xbe\xc4\x87\x13\xea\x24\x3f\xc4\xb5\xf0\x30\x2d\xa7\xf7\x58\x2b\x16\x7c\xc5\x03\xdb\x20\xc8\xbe\x4e\xdc\xae\x1f\xe8\x5d\x06\xbf\xee\x99\x9f\xcc\x6c\xec\x59\x03\xeb\x18\xb8\x8a\x81\xfa\x0b\xa0\x1e\x7b\x38\xf7\x4b\xcc\x89\xf5\x93\xd7\x50\x04\x44\x81\xe5\xce\x66\x3f\xd9\x33\xc7\x9e\xb9\x96\xe6\x72\x18\xce\xeb\x57\x26\x82\x23\x11\x08\x07\x14\xb2\xdc\xa7\x1e\x73\xdc\xcb\xe0\xab\x0c\xae\xdf\xf7\x76\x86\xe1\xdc\x6f\xf0\x9b\x98\xfe\xc3\xf9\xfd\x85\x52\x81\x52\xf6\xb4\x99\xa4\x28\xfd\xee\x56\x02\x0f\x67\x6a\x4e\x3b\x44\x2b\xe7\xa8\x8e\xa1\xf8\x1b\xc8\xe3\xca\xeb\x34\xfc\x5b\x78\xec\xbd\x96\x47\x31\x46\xbf\xd9\xa5\xb0\x83\x59\x9d\x8a\xf0\x79\xe2\x7a\xf0\x57\xac\x02\x67\xfe\xf5\x7f\x96\x90\xd1\x22\x48\xe4\x07\xb9\x0f\x02\x22\xde\x3f\xc4\x7b\xf0\xc8\x46\x85\xa2\xef\x94\x4f\xb4\x59\x65\x58\x43\xb5\x50\x0d\x3f\xa2\x9a\xb8\x26\x36\x40\x6d\x64\x54\x1f\x55\x23\xaf\x02\xff\xd9\x23\xdf\x3c\x44\x0c\xa5\x95\x3f\xc7\x19\x58\xf2\xab\xa1\xc7\x51\x17\x45\x52\xcf\xbd\x01\xf8\xdf\xef\xff\x96\xdf\x69\x93\x51\x44\x30\xcf\x03\xe7\xbb\x16\x01\xe5\x98\xea\xff\x79\xe4\xc1\x2d\xa7\x37\x3b\xbf\x72\x9e\xd1\xf0\xdd\xb2\xfb\x58\x0a\xea\x47\x53\xdf\x76\x44\x62\xa9\x1e\xfa\x63\xdd\x1f\xc0\xce\xfb\x60\xef\x1c\xb8\x69\x9c\x2b\x6f\xa1\xaf\xc8\xb6\xef\xa9\xc7\x21\x45\xad\xa2\xf8\xd6\x7e\x7c\xaa\x24\xd3\xa3\x2d\xa6\xb1\x49\x52\xeb\x85\x6f\x8d\x99\x51\xcb\x46\xf7\xfc\x68\xd3\xd1\x35\xa0\xa3\x3b\x2a\x1d\xdd\x41\x74\x9c\x1b\xd0\x71\x3e\x2a\x1d\xe7\xcf\xd8\xaf\xcb\x27\x32\x41\x84\xa2\x7f\xd7\x21\x19\x4c\x6b\xdb\x69\x0d\x3a\x94\xcf\x5f\x1a\x3e\xd7\xd3\x31\x34\x61\xaa\x34\x9a\x3a\x4f\x6b\xd0\xb1\x48\x69\xac\xf7\x54\x69\x34\x35\x9f\xd6\xa0\x63\x91\xf2\xd9\xdb\xcf\x77\x9f\x0f\x6a\x6d\x3c\xcd\x88\x43\xf9\x7b\xeb\xef\x00\xb3\x2d\xa7\xc4\xa1\xa9\xdf\x34\x23\x8e\x42\x41\x63\x9d\xa6\xc4\xa1\xa9\xcd\x34\x23\x8e\x42\xc1\xa7\x6f\x30\xf1\x4d\x48\x20\x7c\xeb\xf7\xde\xe3\xc4\x18\xbd\x1b\x9c\x46\xc4\xa1\x3c\xa6\xb8\x6d\xae\x24\xe5\x6c\x4c\xad\xc8\x05\x87\xae\x9d\x4d\x23\xe2\x48\x34\x34\xb7\xab\x29\x38\x74\x6d\x69\x1a\x11\x47\xa2\xe1\xd3\x77\x1b\x5d\x5f\x79\x19\xd8\xde\xb4\x45\x1e\xc8\xf6\xee\xaf\xb9\x06\xd9\xec\x54\xb8\xb4\x6e\x7a\xda\x22\x8f\x48\x57\xc3\x5b\xa0\x0a\x97\xd6\xad\x50\x5b\xe4\x11\xe9\x3a\xae\x56\xb5\x98\xde\x78\x14\x73\x31\x4d\x9e\x8f\xed\x7c\x26\xb7\xf4\x36\x7b\x99\xfd\x2a\xf2\xfe\x37\x00\x00\xff\xff\x69\x47\x78\xa9\xd5\x2c\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
