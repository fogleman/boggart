// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package mercury

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x93\xdb\xb6\x11\xfe\xee\x5f\xb1\xc3\x39\xd7\xa7\x24\xd4\x7b\xdc\xf6\x22\x29\x1f\xea\x76\x9a\x99\xa4\x93\xb1\xaf\xed\xb4\x49\x7a\x03\x89\xe0\x09\x31\x09\xd0\x00\xa8\xf3\x55\xa3\xff\x9e\x01\xc1\x17\x50\x47\x49\x24\x45\xda\x56\x4c\xcd\xf8\x2c\x12\xc0\x2e\xf0\xec\x83\x5d\x0a\x5c\x60\xbb\x05\x07\xbb\x84\x62\xb0\x56\x8c\x4a\x4c\xa5\x05\xbb\xdd\xb3\x99\x58\x71\x12\x48\x90\x8f\x01\x9e\x5b\x28\x08\x3c\xb2\x42\x92\x30\x3a\xf8\x15\x6d\x90\x2e\xb4\x16\xcf\x00\x00\xdc\x90\xae\x54\x09\x6c\x90\x17\xe2\xbf\x31\xee\x23\x79\x4d\x7b\xb0\x8d\x4a\xd5\x87\x63\x19\x72\x0a\x14\x3f\xc0\x77\x54\x7a\xfd\x7f\x84\xfe\x12\xf3\xb8\x66\xaf\xef\x26\x4d\xbe\x89\x5a\xec\x9e\xcd\x06\x5a\xc1\xe2\xd9\xcc\x21\x1b\x58\x79\x48\x88\xb9\xc5\xd9\x43\xac\xd1\xbc\xbb\x62\x9e\xed\x3b\xf6\x68\x0c\xea\x9b\xf0\x93\x6f\xef\x85\x3d\x1a\xc7\xf5\xf7\xdb\xbc\xbf\x0b\x10\xc5\x9e\x51\xfa\xb4\x46\x02\x46\xbe\x4e\x5a\x8f\x33\x0f\xcf\x2d\x89\x96\x45\x92\xd2\x9a\xa1\x97\x08\xa4\x68\x03\x14\x6d\x6c\x89\x96\x02\x96\x88\xdf\xa9\x2f\x56\x26\xc6\x23\xa2\x48\x57\x2a\xc9\x23\x71\xdd\x80\x63\x81\xa9\x8c\x6c\x61\x6d\xb7\x40\x5c\xc0\xef\xa0\x8f\xb4\x09\x2c\x65\xbc\x44\xa7\xba\xb7\xc1\xaa\x12\xa6\x0e\xec\x76\x8b\x19\x82\x35\xc7\xee\xfc\x40\xbb\xcc\xb2\x37\x1b\x46\x9c\xeb\x61\xef\x1b\xd5\xd6\x13\x18\x76\xbb\xed\x16\xfa\xaf\xf1\xbb\x10\x0b\xd9\xff\xe7\xeb\xef\xfb\x3f\x22\xb9\xd6\xb7\xb5\x70\x6b\xa1\x84\x8e\xfe\x44\xc1\xfa\x4b\xc8\x39\xa6\x12\x7c\x8c\x44\xc8\xb1\x8f\xa9\x14\x16\xf4\x61\xb7\x9b\x0d\xd0\x62\x36\xf0\x48\x03\x03\xf5\x19\x95\x6b\xef\xb1\xee\x78\x8d\xe6\x75\x86\xfd\xad\x96\x33\x8f\xc5\xfc\x01\x79\xde\x7c\x54\x84\xc5\x0f\xba\x02\x08\x35\x10\x21\xc9\xaa\x79\x24\x1c\x22\x02\x0f\xd5\x46\xc2\x68\x7e\x0e\x12\xb1\x98\x22\x0c\x5e\x25\x1a\x1a\x1e\xf8\x9a\x79\xc4\x41\x8f\xa2\xee\xc8\xcd\xf6\xe7\x0c\x3d\x91\x53\x34\xf6\xbf\xa7\x3a\x4e\x0f\x7e\x36\x08\xbd\x03\x25\x86\x6b\x92\x68\x69\x1f\x76\x4e\xb9\x16\x7b\x4e\xca\x94\xa0\xee\x80\x8b\x1c\x0c\x1a\x31\x20\xf4\x88\x34\xf5\x39\x3a\x87\x8e\xb6\x8c\xfa\x13\xa4\xda\xf1\x7b\x69\xfb\xa1\xc4\x0e\xb8\x8c\x4a\x7b\x34\x01\xdf\x5e\xda\x93\xe1\x09\xfd\x46\x3f\x38\x7a\x80\xeb\xbc\xaf\x71\x90\xc4\x20\x89\x8f\x81\x51\x70\xf0\x86\xac\x30\x3c\x8f\x50\xa7\xc4\x4b\xff\x5d\x07\x9c\x50\x09\x56\x2e\xba\xfd\x7c\x20\xbc\xfd\x6c\x2d\x1c\xb6\x0a\x95\xfb\xea\x3f\x70\x22\xf1\xb5\x52\x72\xcb\xde\x48\x4e\xe8\xfd\xf5\x0b\x0b\xae\xfb\xea\x4e\x5f\x07\x32\xb0\xc6\xc3\xe1\x4b\x7b\x38\xb2\x87\xe3\xdb\xd1\xd7\x37\xc3\xe9\xcd\xf0\xeb\xff\x0e\xff\x78\x33\x1c\x5a\x3d\xb0\x5e\xf4\x7a\x69\x58\xb3\x7a\xbd\x52\x98\x0d\x82\xc5\xb3\xd3\xb5\x54\xf4\xc0\x86\x6d\x3d\x0c\xd1\x5f\x5b\x48\x4e\x02\xec\x28\x6c\x90\xbe\xef\x48\x9b\x63\x11\x30\x2a\x94\xc9\x29\x7b\xe0\x28\xb0\x40\xc8\x47\xc5\x93\x07\xe2\xc8\xf5\xcd\x68\x38\x7c\x5e\xd2\x12\x33\xb9\xc6\xc8\x29\x5b\x97\x97\xab\x18\x0b\xde\xf3\xa0\xc9\xf4\x91\xeb\x9a\x52\x6e\x47\x30\x80\x7f\x37\x20\x67\xdc\x90\x9c\x49\x43\x72\xa6\xb5\xe4\xcc\x06\x65\xed\xa1\x64\x56\xb0\xf2\x92\x39\x8f\x15\xe6\x31\xbd\xc7\x70\x45\xbe\x82\x2b\x15\x1f\x05\xdc\xcc\xa1\xaf\xbf\x95\x98\x1e\x5a\x21\xd7\x7e\x09\x51\x07\xae\xf1\xbb\x58\x50\x3f\x22\x0d\x5c\xe9\xf9\x19\x5d\xf4\xcc\xe2\xff\x60\xc4\x93\x52\xf5\xbd\x67\x44\x10\x11\xae\x56\x58\x08\x23\x84\x54\xb0\x8c\x93\x5a\xc6\xec\x48\x5f\xbb\x0c\xb8\x52\x6a\xb6\xdb\x5c\x2f\x22\xab\x95\x84\x37\xd1\x51\xba\x72\xd4\xa0\xd4\x93\xfc\x9e\xa7\x33\x1f\xe5\xb3\x0e\xdf\x8e\x60\xb7\x33\xfc\x58\xa5\x7e\x68\x3b\xdd\xcb\x4c\xd8\x2d\x57\x00\x0f\xcb\xda\x3a\x3f\xa8\x00\xd1\xc4\x62\x1e\x5a\x62\x0f\xa2\xbf\xb6\xa3\x28\xc5\xad\x45\xa3\xa3\x7e\x85\x3d\x89\xf2\x43\x87\x41\xb3\xc0\x6a\x2c\x72\x2a\x66\x03\x35\xc8\xca\x20\x47\xcf\x2c\xc4\x05\xaf\x65\xa4\x93\x79\xd2\x41\x0d\x99\x63\x69\x07\x6a\x42\x5d\xd6\xe1\x9c\x77\x1e\x7a\x00\x0d\x3b\x0f\xec\xa2\xd0\x93\xed\x43\x5d\x17\x87\x08\xcf\xf2\xa1\xe2\x72\x02\xcb\xb8\xc9\xc0\x32\xbe\x94\xc0\x32\x6e\x7f\x16\x8e\x5b\x0d\x2c\xad\x20\xdd\x4a\x60\xb9\x4c\xa8\x8d\xc0\xd2\x0a\xd4\xcd\x07\x96\xcb\xc4\xd9\x74\x1e\x17\x13\x58\x8a\xa0\xee\x02\xcb\x1e\x48\x93\x26\x03\xcb\xe4\x52\x02\xcb\xa4\xfd\x59\x38\x69\x35\xb0\xb4\x82\x74\x2b\x81\xe5\x32\xa1\x36\x02\x4b\x2b\x50\x37\x1f\x58\x2e\x13\x67\xd3\x79\x5c\x4c\x60\x29\x82\xba\x0b\x2c\x7b\x20\x4d\x9b\x0c\x2c\xd3\x4b\x09\x2c\xd3\xf6\x67\xe1\xb4\xd5\xc0\xd2\x0a\xd2\xad\x04\x96\xcb\x84\xda\x08\x2c\xad\x40\xdd\x7c\x60\xb9\x4c\x9c\x4d\xe7\x71\x31\x81\xa5\x08\xea\x4f\x2d\xb0\x94\x7f\x33\x56\xad\x17\xb3\x41\xc9\x77\x63\xb3\x41\xf4\xae\xf6\xe4\xcb\x78\x63\xc6\x15\xe5\x72\x9c\xd6\xe3\x32\xee\x03\x71\xe6\x59\xab\x98\x07\xaa\xc0\x5e\x33\x4e\xfe\xcf\xa8\x44\x1e\x44\xd7\x9a\x16\x1e\x76\xa5\x15\xbd\x50\xb6\x25\xbb\xbf\xf7\xf0\xdc\xda\x20\x8f\x38\x48\x32\x6e\x81\x8f\xe5\x9a\x39\x73\x2b\x60\x47\x93\x99\x72\xbd\x30\x32\x1b\x22\x3d\xf7\x9c\x85\x41\xc9\xc6\x91\x00\xcd\xda\x34\x1b\x8c\x4a\xce\x3c\x3b\xbe\xa9\x73\xc3\xa6\x49\x6a\xd8\xd4\xc8\x0c\x53\xa3\x9a\x5b\x3e\x73\xf0\x9d\x1c\x55\xd0\x07\x71\xfc\x8e\xde\xbe\xbe\x59\xb3\x07\xb8\x1d\xe9\xb7\xaf\xf9\xc9\xc4\xf1\xbb\x90\x70\xec\x58\x8b\x2f\xaa\x52\x7c\x36\x88\xba\x5f\xa1\xc1\xd3\x7c\xb8\x97\xc9\x98\x5f\x16\x66\xc3\x95\x92\x4a\x68\x10\x26\x13\x7f\xb5\xc6\xab\xb7\x4b\xf6\x3e\x25\xc9\xaf\xc2\x16\x0f\x44\xae\xd6\x16\x50\xe4\xe3\x0c\xca\x88\x52\xe9\x45\x9a\x35\x12\xa7\x5e\xf4\xe3\x92\x1e\x58\x92\x87\x58\xa7\xee\x28\xd9\xd8\x49\xe7\x13\x0c\xaa\x60\xe5\x90\x4d\xd9\x99\x5d\xbe\xea\xa7\xc0\xca\xaa\xf6\xda\x63\xe5\xb8\x63\x25\xce\xa0\x34\x58\x39\x3e\xc8\xca\x71\xc7\xca\x93\xac\x9c\x9c\xc7\xca\x49\xc7\x4a\x9c\x41\x69\xb0\x72\x72\x90\x95\x93\x8e\x95\x27\x59\x39\x3d\x8f\x95\xd3\x8e\x95\x38\x83\xd2\x60\xe5\xf4\x20\x2b\xa7\x1d\x2b\x4f\xb1\x12\xf9\x2c\x3c\x9a\xa4\x5b\xf4\xc9\x33\x33\x16\xd1\xb1\x33\x0f\x69\xc6\xd0\xe4\x46\x31\x4b\x75\x69\xc7\xd4\x53\x4c\x0d\xd8\x03\xe6\x67\x11\x55\x4b\xe8\x78\x9a\x03\x34\xa3\x69\x7c\x5d\xcc\xd2\xa8\xb0\x23\xe9\xc9\x20\x4f\x7c\x7c\x16\x47\x23\x01\x1d\x45\x4d\x38\x8d\x50\x1f\x5d\x1e\x08\xf6\xc4\xc7\x1d\x3f\x4f\xf1\xd3\x41\xf2\x3c\x7e\x46\x02\x3a\x7e\x9a\x70\x66\xfc\xd4\x97\x4f\xf8\xa9\x6e\x77\xd4\x3c\x42\x4d\x35\x77\xcf\x58\xe1\xfc\x8e\x4a\xcc\x37\x7a\x11\x18\x28\x93\xb0\x8a\x37\x5c\x49\xc4\x89\xeb\x7e\x06\x74\xa5\xd1\x66\xe5\x84\x9a\x09\x9c\x11\x31\xd3\x8b\xe8\x7d\x47\xb4\xc5\xb0\x1f\xdf\x83\xdd\xce\x82\x00\x49\x89\x39\x9d\x5b\xff\xfb\xc9\xfe\xf2\x97\x6f\x7f\x1a\xda\x7f\xfe\xe5\x8b\x2b\xab\xa3\xa4\x7f\xce\xf2\x66\x8e\x92\x1d\x1d\xb3\xe5\xcd\xf4\xe2\x09\x1d\xc7\x1d\x1d\x4f\xd1\xb1\xf6\xba\x66\x8e\x8e\xd1\xa3\xfc\x57\x7a\x23\x2a\xa2\xce\xe7\x12\xd2\x8b\x48\x39\x31\x49\x39\x29\x20\xe5\xa4\x23\xe5\x29\x52\xd6\x5e\xd6\xcc\x91\x12\xb9\x12\x73\x08\x38\x16\x02\x96\x68\xf5\x16\x96\xa1\x94\x8c\x7e\xa6\xbc\x9c\x9a\xbc\x9c\x16\xf0\x72\xfa\xd1\x78\x59\x99\x98\x1e\xbd\x13\xcc\x23\x8e\xb5\xf8\xa0\xcc\x2e\x67\xb8\x84\xe5\xcc\x75\x05\x96\x76\x55\x07\x3b\xd3\x2c\x8d\x2d\xc9\xb1\xc0\x32\xfd\xc5\xb0\x94\x14\x96\x92\xea\x6c\xa0\xc4\x82\xba\x4a\xb6\x35\xfa\xb5\x6e\xa2\x37\x46\x6b\x61\xe7\xf4\x40\x84\x4b\x9f\x3c\xed\x42\x92\xfb\x95\xf4\x42\xa0\x0d\x36\x3a\xf1\x46\x5d\xd6\xec\x43\xf3\x8e\x6d\x36\x50\x06\xaf\x95\x5a\x62\x1e\x96\x71\x5a\xcf\xef\xfc\x4c\x82\x57\xd9\x69\x26\xb5\x77\xee\xd7\x3a\xd7\xe0\x13\xd8\xb7\x0f\x4f\xf6\xee\x3b\xe8\x31\xda\xb9\x9f\x50\xa4\x52\x62\x56\x15\x1b\x00\xa4\x7b\xec\x95\xd2\xec\xe0\x0d\xab\xf2\x36\x7a\x43\x94\xde\xae\xaf\xe4\x3d\xd9\xac\x5f\x31\x1f\xb9\xb4\x71\xe0\x13\x49\x1f\xfb\x6c\xa7\x72\x32\x1e\xdf\xb1\x55\x94\x1a\x9b\x27\x36\x65\xa7\x56\xd5\x9c\xe3\x47\x84\xff\x4b\x05\x89\xb3\x5d\xc7\x2b\xac\x93\x27\x49\xf2\x10\x77\x71\x0e\xa4\xee\xb4\x4f\xdc\xaf\xd4\x3f\xaf\xb2\x15\xfd\xea\xb3\x5f\x2f\x25\x46\x0b\x88\x4a\x4c\x1f\x73\xce\x78\xad\x1c\x5a\xe9\xe4\xce\x36\x4a\xf2\xee\xd5\x13\x65\x5e\x7a\xff\xaf\xb1\x8e\x5a\xbd\x2d\x3b\x63\x0b\xfa\x57\x4d\x57\xda\xb0\x4e\xea\x6f\xfe\x8c\xa4\x1c\x06\xd1\x13\x52\x89\xd3\x92\x60\xb7\x7b\x51\x77\x6b\x45\xf2\xd1\xd6\xa5\xd8\x50\xef\xd4\x4f\x93\xce\x10\x91\x9c\xd1\xfb\x42\x73\xd7\x16\x9a\xee\x06\x69\xb4\xab\x90\xfd\x1c\xfc\xd1\x0b\x39\xf2\xc0\xfa\xf2\xb9\x03\x02\xaf\x18\x75\x2c\xf3\x42\x58\x4f\x34\x5f\xe5\x4e\xcd\xda\x2f\x3d\xa3\x57\x67\xd0\xf8\xc8\xc0\xcc\x71\x7d\xb4\x61\x55\x4b\x48\xdf\xff\xcc\x06\x9a\x5a\xb5\xd9\x5e\x53\x7f\x3d\x4f\x54\x5d\x57\xce\x7f\xe7\x0e\x6d\x4b\xfc\x38\x30\x0a\x3e\x96\x49\x16\x41\x9b\x8f\x5e\xe7\x45\x9f\x1f\xd0\x5b\x6c\x2c\xec\xd5\x8e\x3c\x3e\x7a\xab\x5f\x6b\xb5\x13\x7a\xf6\xc4\x7f\xbc\xd8\x93\xef\xcc\xa1\x20\x50\xef\x11\xbe\x01\x32\x9e\x65\xce\x0f\xc9\xbb\xef\x91\x90\x7a\x81\x19\x58\xf2\xaa\xa3\x36\xf9\x3c\x24\xa4\x4e\x3c\xb9\x63\xae\x7b\xd7\xee\x53\xd0\x51\x65\x1f\x8f\x98\x0d\x3d\xdf\x1c\x1a\x5d\xcd\xc7\x9d\x0f\x39\x09\x2e\x83\xec\xb4\x41\xae\xd3\x0f\x48\xf5\x7d\x5d\xbf\x2b\xa6\xd3\x8e\xe8\xad\x2c\xcb\x1c\x1f\xdf\x91\x75\xde\x03\x45\x05\xb7\xf7\x6e\x19\x97\xf1\xd7\xf8\xbf\xb4\x3b\xbf\x05\x00\x00\xff\xff\x9f\x48\x9e\x01\x24\x5e\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5d\x8c\x5b\x47\x15\xfe\xd2\xb5\xcd\xae\x37\x76\xa0\xa5\xe5\xa7\xb4\x9d\x42\x13\x5a\x12\xa7\xfe\xd9\x14\xea\xc4\x09\x90\xa4\x25\xd0\x85\x90\x98\x20\x5e\x80\x5b\x7b\xbc\xbe\x8a\x7d\xef\xea\xde\xeb\xa4\x5b\x55\x68\xbd\x9b\x9f\x56\x1b\x1a\xa9\x2a\x82\x87\x88\x52\x28\x2f\x48\x48\xce\x76\xdd\x3a\xfb\xe3\x45\x3c\x22\x84\xce\x48\xbc\x21\x01\xaa\x84\x84\xf2\x86\x90\x78\x05\x9d\x3b\xb3\x6b\x7b\xd7\x8b\xb6\x0f\x19\x29\x39\x33\xe7\x9c\xf9\xbe\xf3\x37\x77\xfd\xd7\xfb\x23\x3f\x01\x80\x83\x00\x3e\x03\x20\xd8\x03\x1c\x05\xf0\xc7\xfb\x10\xae\xce\x08\xf0\x71\x00\x77\x46\x80\x87\x00\xfc\x69\x04\x78\x12\xc0\x3f\x46\x80\x87\x01\x24\x23\xfa\xfc\x85\x88\x3e\x9f\x8f\x00\x8f\x02\x70\x8d\x7c\x3d\xa2\xef\xff\x36\x02\x24\x00\xfc\x3e\x02\x8c\x00\xa0\x08\x30\x0e\xe0\xcf\x11\xe0\x23\x00\xfe\x1e\x01\xf6\x03\xf8\xa7\x91\xc9\x28\xf0\x38\x80\x89\x28\x30\x0a\xe0\x42\x14\x78\x02\xc0\x0f\xa2\x9a\xe7\x4a\x14\x78\x0c\xc0\x2f\x8c\xdf\xef\xa2\x40\x12\xc0\x07\x51\xcd\xf3\xaf\x28\x30\x06\xe0\xbf\x51\xcd\x33\x16\x03\xa2\x00\x1e\x8c\x01\xf7\x03\x78\xd8\x9c\x0f\xc7\x80\x08\xf3\xc4\x74\x1c\xcf\x1a\xf9\x15\x23\xcf\x18\xf9\xed\x98\xc6\xf9\x5e\x4c\xe3\xca\x18\x10\xe7\x3c\xcd\xf9\x65\xe3\x77\xc5\xc8\x1b\x46\xbe\x69\xe4\x2d\xc3\xf7\x4e\x0c\xa8\xee\x01\x7e\x13\x03\x72\x00\x1e\x18\x05\x9e\x01\xf0\xfc\x28\xf0\x43\x00\x3f\x1a\x05\x4e\x00\xf8\xdb\x28\x50\x01\xf0\xd8\x18\x70\x1a\xc0\xb5\x31\xd3\x97\x31\x60\x02\xc0\x68\x1c\xf8\x1c\x80\x42\x5c\xf7\xc5\x8a\xeb\x3a\xbd\x14\x07\x3e\x0a\xa0\x19\xd7\x79\xbe\x11\xd7\xb8\xbf\x8e\x6b\xbc\xd8\x38\xf0\x7d\x00\xf5\x71\xe0\x11\xc6\x1b\x07\xbe\x0e\xe0\xee\x38\x70\x16\xc0\x91\xbd\x40\x91\xf9\xf6\xea\xf3\x5f\xf6\x02\x9f\x07\x70\x28\xa1\xfb\x52\x4c\xe8\x7a\xbf\x9c\xd0\x7d\xbd\x95\xd0\x75\xb8\x6d\xec\xab\x09\xcd\xff\x41\x42\xf3\xff\x3b\x01\x7c\x82\x79\x93\x5a\x3e\x6a\xe4\x33\x46\x7e\x33\xa9\xfb\x58\x49\xea\x78\xae\x25\x35\xce\x3b\x46\xff\x87\xa4\xae\xfb\x5d\x23\xff\x63\xe4\x7d\xfb\xb4\x4c\xee\xd3\x7c\x9f\xde\x07\xec\xe1\x39\x34\xb3\xcc\x33\xf9\x08\x7a\x8b\x6b\xff\x90\xd9\x87\xfe\xd0\xf8\x0f\x40\xe7\xc3\x33\xf9\x59\xe8\x5c\x3e\x65\xfc\x38\xef\x03\xd0\x73\xc5\x6b\xaf\x91\x5c\xf7\x4f\x02\x78\x0a\xc0\x3e\xf3\x6e\x36\x16\xc7\xce\xf3\x99\x30\xe7\x8f\x41\xbf\x83\x8d\x25\x8c\x7c\x10\x7a\xee\xb8\x86\xfc\xd4\xb8\x77\x3c\x27\x5c\x13\xae\xdb\x18\x06\x57\xcc\x48\xce\xf9\x89\x90\xa8\x2c\x7c\x59\x72\x9d\x72\x6f\xe7\xe3\x60\x4f\x7b\xb0\x4f\x7d\xb2\x6a\x39\x53\x52\x94\x6d\x7f\xba\x66\xcd\x88\xba\x5b\x96\xa2\x62\xd9\x35\x59\x16\x97\xed\xa0\x2a\xa4\xe7\xb9\x9e\xd8\x3f\xdc\xd1\x6f\x94\x4a\xd2\xdf\x66\x0b\xec\xfa\xee\x40\x42\xc7\x4d\x90\x86\xe7\x49\x27\x10\x65\x2b\x90\xc2\x72\xca\xda\xea\x3a\xa2\x2e\x03\xe9\x0d\x9a\x37\x4c\x65\x79\xc9\x2e\xc9\x10\xd9\x98\xeb\xd2\xf2\x1b\x9e\xac\x4b\x27\xf0\x71\xaa\x1f\x0a\xa7\xac\x19\x9c\x92\x7e\xc9\xb3\xa7\x03\xdb\x75\x70\x4a\x47\x81\xe7\x65\xb0\x8b\xfc\xfb\xbd\x76\x4e\x90\xbd\xaa\x6e\xcd\x2e\x5b\x33\xfe\x70\x8f\xaf\x19\x2b\xce\x38\x81\xf4\x2e\x59\x35\x51\x71\x3d\x61\x55\x02\xe9\x89\x69\x4f\xfa\xbe\x78\xd1\x2a\x5d\x14\x2f\x36\x82\xc0\x75\x06\x9d\x4a\x26\xc7\xc0\xf2\xec\x4a\x65\xd0\xe6\xb8\xc1\xff\xb5\x4f\xbb\x97\xa5\x77\x48\x47\xce\x15\xe1\x32\xe2\x05\xcb\x0f\xb4\x45\xb8\x95\xca\xc0\xd1\xc1\xa4\x75\x51\x6a\xb7\xc9\x5e\x4d\x31\xe9\x3a\x41\x55\xff\x5f\x9b\x11\x7e\x60\x05\xb6\x1f\xd8\x25\x1f\xe7\xa4\x2f\x03\x9c\xb7\x2e\x49\x9c\xaf\xba\x97\x45\x31\x63\x64\xd6\xc8\x9c\x91\x13\x5a\x5a\x75\xb7\xe1\x04\x7a\x1f\xb2\x84\xbb\x90\x5d\x6f\xc3\x9e\x15\x33\xe2\x69\xf1\xdd\x2a\x8a\x59\x23\x73\x46\x4e\x68\x79\xc1\xaa\x35\x24\xce\xc9\x69\xd7\x0b\x52\x93\xfe\x94\x5d\x4e\x7d\xb5\x31\xe5\xa7\x8a\x6e\x9e\x87\xe3\xcb\x17\xed\xaa\x55\x77\x0f\x7b\x8d\xf8\xd9\x6f\x15\x53\x27\x3d\x69\x71\xeb\x53\x3c\x18\x79\x91\x4d\x67\x9e\x4d\xa5\x73\xa9\xec\x17\x45\x36\x97\x3f\x72\xe4\x60\x3a\x97\x4e\xc7\xb9\x0a\xa9\xa2\x67\x39\x7e\xcd\x0a\x5c\x2f\x2f\xbe\x11\x62\x88\xc9\x86\x67\xd5\xdd\xb2\x2b\x8e\x0d\x00\x1f\x8f\xbf\x60\x39\x53\x0d\x6b\x4a\xa6\x8a\xd2\xaa\xe7\xc5\xe6\x39\x2f\xce\x35\x7c\xdf\xb6\x9c\xf8\xe4\x99\xc9\xd3\xa9\x0b\xd2\xf3\x6d\xd7\xc9\x8b\xcc\xe1\x74\xfc\xa4\xeb\x04\xd2\x09\x52\xc5\x99\x69\x99\x17\x81\x7c\x29\x78\x7a\xba\x66\xd9\xce\x51\x51\xaa\x5a\x9e\x2f\x83\xc2\x77\x8a\xcf\xa5\xbe\xd4\xf3\xe3\x78\x2a\xd2\x4b\x9d\x76\x4a\x6e\xd9\x76\xa6\xf2\x22\x7e\xb6\xd6\xf0\xac\x5a\xea\x39\xd7\xab\xfb\x79\xe1\x4c\x87\x47\xbf\x90\x3b\x2a\xf4\xb6\xe0\xec\xcf\xa4\x0b\x85\x8c\x38\x70\x40\xf0\x36\xfd\x78\x21\x93\x11\x27\x44\x5a\xe4\xc3\xf3\xf1\x42\x76\xc3\x74\xac\x30\xc1\xdb\x27\x43\xb7\x63\x99\xb4\x78\xe5\x15\x7d\xe5\x78\x21\x9b\x7e\x4a\x9c\x10\x19\x91\x17\xd9\xa3\xfc\x3d\x51\x4d\x6a\xd3\xb2\x9a\xa7\x35\x5a\xa2\xd6\x56\x8d\x5a\xd8\xaa\x09\xbf\x36\x5b\x2e\x6d\x55\xa9\x85\x6d\x2a\xd0\xcf\xe8\x7d\x5a\xa5\x36\xad\x85\xff\x3a\xd4\x16\x6a\x96\xda\xf4\x1e\x75\x68\x95\xba\xb4\x28\xa8\x13\xc2\x75\x68\x99\x5a\xea\x1a\x75\xa8\x23\xe8\x7d\x6a\xd1\x22\xb5\xd5\xac\x7a\x95\x3a\xb4\x42\x5d\xd5\x54\x37\x84\x6a\x0a\xea\x86\x9a\xdb\xb4\x4c\x5d\xba\xc3\x0f\x91\x7e\xa5\x9a\xb4\x4e\x6d\xf5\x2a\xad\x51\x97\xd1\xfa\xf8\xd4\x42\x1f\x9b\x5a\x18\xc2\x35\x2c\x40\xf6\x52\x73\x4c\x4f\x8b\xd4\x62\xfa\x7b\x1f\xe6\x56\xce\x1d\x82\xfd\xa5\x2e\xad\x7a\x4d\x07\xba\x44\x2d\x35\x47\x2d\xc1\xc1\x2c\x86\x99\xae\xaa\x9b\x82\xd6\xa8\x25\x54\x53\x5d\xa7\xb6\x9a\x53\xd7\x43\x84\x76\xff\xdd\x16\x3b\x6d\xde\x0d\xbd\xe7\x55\x53\xcd\xa9\x59\x0e\x97\x77\x9c\x56\x18\xf6\x16\xc2\x75\xea\x72\x38\x9c\x39\x47\x4b\x2b\x1c\xd4\x9b\xc3\xa2\x60\x35\xa7\x76\x03\xf4\x73\x5a\xa7\x8e\x6a\x52\x4b\xd7\x97\x4b\x3e\x90\x18\x3b\xbf\x45\x5d\x5a\x51\xf3\x1c\xf3\xbd\x19\x93\xed\x04\xf7\xa4\xcd\x43\x68\xd6\xd5\x6c\x58\xb1\x25\x56\xa8\xeb\xdc\x6e\x75\x55\x84\xc7\x36\xdd\xf9\x90\xf0\xdb\xb1\xf4\x1c\xac\xe9\x51\x1e\x48\x68\x68\x32\xeb\x8c\x4f\x2b\x7c\x6b\x8d\x5a\xf4\x5e\xd8\xbb\x0e\x0f\xc4\x32\x4f\x26\xad\xd3\xf2\x2e\xa1\xd4\x8f\x39\x03\x35\x4b\xef\xea\xe3\xdc\xe6\xa8\xb4\xe9\x5d\xea\xb2\xa2\xa5\x66\xa9\xa3\xae\x50\x6b\x77\xb1\xad\x71\xdb\x7b\x30\x1d\x75\xb5\x1f\x44\xb7\x87\x07\x7b\x9e\x56\xf9\x39\xef\x0e\x74\x95\xba\xea\x35\x4e\x2d\x9c\xeb\xce\xa1\xcd\x19\xd5\x1d\x0a\xa7\x36\x7c\x0b\x0c\xf8\xd6\x46\x75\x4c\x7b\xda\xdc\x84\x39\x5a\xa6\x15\xf5\x7a\xaf\xa7\x43\xfd\x16\xb7\x7b\x6d\x3e\x8c\xf5\xf0\x65\xf1\x9b\x5f\xa4\x2e\x2d\x99\x17\xd6\xd2\xe3\x32\xf0\x9e\xf8\xbd\xdc\xa2\xb6\x6a\xaa\x9b\xea\x5a\x6f\x7b\x9d\x9b\xa5\x6e\x8a\xf0\xa6\xee\x58\x98\x0d\x5f\x06\xbd\x4d\xb7\x99\x40\x35\xa9\xa3\xe6\x18\xe1\x6d\xea\xaa\xab\xe1\xa8\xac\x6d\xa8\x36\x99\xd4\x02\x53\xb3\x92\xff\xb8\x0f\xd7\x67\x77\xd0\xe7\x76\xd0\x4f\x0c\xd7\x6f\xb6\x6a\x7e\xb8\xdd\xd4\x7d\x27\xeb\x40\xe7\x76\xca\xa1\xef\x8b\x13\xfe\xca\xa0\x37\xf8\x9b\xa7\x7f\x69\x6c\xec\x73\x7d\xfb\x89\xde\x9e\x7e\x1a\x56\xb5\xd7\xb0\xff\x05\x00\x00\xff\xff\xde\x56\x25\x1d\x2b\x0f\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
