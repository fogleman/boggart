// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package mercury

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x93\xdb\xb6\x11\xfe\xee\x5f\xb1\x83\x39\xd7\xa7\x24\xd4\x7b\xdc\xf6\x22\x5d\x3e\xd4\xed\x34\x33\x49\x27\x63\x5f\xdb\x69\x93\xf4\x06\x12\xa1\x13\x62\x12\xa0\x01\x50\xe7\xeb\x8d\xfe\x7b\x06\x04\x5f\x40\x1d\x25\x91\x14\x69\x5b\x31\x35\xe3\xb3\x48\x00\xbb\xc0\xb3\x0f\x76\x29\x70\x81\xc7\x47\x70\xc9\x8a\x32\x02\x68\xc9\x99\x22\x4c\x21\xd8\x6e\x9f\xcd\xe4\x52\xd0\x40\x81\x7a\x08\xc8\x1c\xe1\x20\xf0\xe8\x12\x2b\xca\xd9\xe0\x57\xbc\xc1\xa6\x10\x5d\x3f\x03\x00\x58\x85\x6c\xa9\x4b\x60\x83\xbd\x90\xfc\x8d\x0b\x1f\xab\x4b\xd6\x83\xc7\xa8\x54\x7f\x04\x51\xa1\x60\xc0\xc8\x3d\x7c\xc7\x94\xd7\xff\x47\xe8\x2f\x88\x88\x6b\xf6\xfa\xab\xa4\xc9\x37\x51\x8b\xed\xb3\xd9\xc0\x28\xb8\x7e\x36\x73\xe9\x06\x96\x1e\x96\x72\x8e\x04\xbf\x8f\x35\xda\x77\x97\xdc\x73\x7c\xd7\x19\x8d\x41\x7f\x93\x7e\xf2\xed\xbd\x74\x46\xe3\xb8\xfe\x6e\x9b\xf7\xb7\x01\x66\xc4\xb3\x4a\x9f\xd6\x48\xc0\xc8\xd7\x49\xeb\x09\xee\x91\x39\x52\x78\x51\x24\x29\xad\x19\x7a\x89\x40\x86\x37\xc0\xf0\xc6\x51\x78\x21\x61\x81\xc5\xad\xfe\x82\x32\x31\x1e\x95\x45\xba\x52\x49\x1e\x8d\xeb\x06\x82\x48\xc2\x54\x64\x0b\xf4\xf8\x08\x74\x05\xe4\x1d\xf4\xb1\x31\x01\xd2\xc6\x4b\x74\xea\x7b\x1b\xa2\x2b\x11\xe6\xc2\x76\x7b\x3d\xc3\xb0\x16\x64\x35\xdf\xd3\x2e\xb3\xec\xd5\x86\x53\xf7\x72\xd8\xfb\x46\xb7\xf5\x24\x81\xed\xf6\xf1\x11\xfa\xaf\xc9\xbb\x90\x48\xd5\xff\xe7\xeb\xef\xfb\x3f\x62\xb5\x36\xb7\x8d\x70\x74\xad\x85\x8e\xfe\xc4\x00\xfd\x25\x14\x82\x30\x05\x3e\xc1\x32\x14\xc4\x27\x4c\x49\x04\x7d\xd8\x6e\x67\x03\x7c\x3d\x1b\x78\xb4\x81\x81\xfa\x9c\xa9\xb5\xf7\x50\x77\xbc\x56\xf3\x3a\xc3\xfe\xd6\xc8\x99\xc7\x62\xfe\x80\x3d\x6f\x3e\x2a\xc2\xe2\x07\x53\x01\xa4\x1e\x88\x54\x74\xd9\x3c\x12\x2e\x95\x81\x87\x6b\x23\x61\x35\x3f\x05\x89\x58\x4c\x11\x06\xaf\x12\x0d\x0d\x0f\x7c\xcd\x3d\xea\xe2\x07\x59\x77\xe4\x76\xfb\x53\x86\x9e\xc8\x29\x1a\xfb\xdf\x53\x1d\xc7\x07\x3f\x1b\x84\xde\x9e\x12\xcb\x35\x29\xbc\x70\xf6\x3b\xa7\x5c\x8b\x1d\x27\x65\x4b\xd0\x77\x60\x85\x5d\x02\x06\x31\xa0\xec\x80\x34\xfd\x39\x38\x87\x0e\xb6\x8c\xfa\x13\xa4\xda\xc9\x7b\xe5\xf8\xa1\x22\x2e\xac\x38\x53\xce\x68\x02\xbe\xb3\x70\x26\xc3\x23\xfa\xad\x7e\x08\x7c\x0f\x97\x79\x5f\xe3\x62\x45\x40\x51\x9f\x00\x67\xe0\x92\x0d\x5d\x12\x78\x1e\xa1\xce\xa8\x97\xfe\xbb\x0c\x04\x65\x0a\x50\x2e\xba\xfd\xbc\x27\xbc\xfd\x8c\xae\x5d\xbe\x0c\xb5\xfb\xea\xdf\x0b\xaa\xc8\xa5\x56\x72\xc3\xdf\x28\x41\xd9\xdd\xe5\x0b\x04\x97\x7d\x7d\xa7\x6f\x02\x19\xa0\xf1\x70\xf8\xd2\x19\x8e\x9c\xe1\xf8\x66\xf4\xf5\xd5\x70\x7a\x35\xfc\xfa\xbf\xc3\x3f\x5e\x0d\x87\xa8\x07\xe8\x45\xaf\x97\x86\x35\xd4\xeb\x95\xc2\x6c\x10\x5c\x3f\x3b\x5e\x4b\x47\x0f\x62\xd9\xd6\x23\x10\xfd\x75\xa4\x12\x34\x20\xae\xc6\x06\x9b\xfb\xae\x72\x04\x91\x01\x67\x52\x9b\x9c\xf1\x7b\x81\x03\x04\x52\x3d\x68\x9e\xdc\x53\x57\xad\xaf\x46\xc3\xe1\xf3\x92\x96\x98\xa9\x35\xc1\x6e\xd9\xba\xa2\x5c\xc5\x58\xf0\x8e\x07\x4d\xa6\x8f\x5a\xd7\x94\x72\x33\x82\x01\xfc\xbb\x01\x39\xe3\x86\xe4\x4c\x1a\x92\x33\xad\x25\x67\x36\x28\x6b\x0f\x2d\xb3\x82\x95\x17\xdc\x7d\xa8\x30\x8f\xd9\x1d\x81\x0b\xfa\x15\x5c\xe8\xf8\x28\xe1\x6a\x0e\x7d\xf3\xad\xc4\xf4\x30\x0a\x85\xf1\x4b\x98\xb9\x70\x49\xde\xc5\x82\xfa\x11\x69\xe0\xc2\xcc\xcf\xe8\xa2\x67\x17\xff\x87\x60\x91\x94\xea\xef\x3d\x2b\x82\xc8\x70\xb9\x24\x52\x5a\x21\xa4\x82\x65\xdc\xd4\x32\x76\x47\xfa\xc6\x65\xc4\xce\x08\xb9\x58\xae\x17\x1c\x0b\x17\xc1\x85\x56\xfc\xf8\x98\xeb\x57\x64\xc7\x92\x80\x27\x5a\x4b\x57\x8e\x1a\x94\x7a\xb6\xdf\xf1\x7d\xf6\xc3\x7d\xd6\xe1\x9b\x11\x6c\xb7\x96\x67\xab\xd4\x0f\x63\xb9\x3b\x95\x09\xbb\x11\x1a\xf2\x61\x59\xeb\xe7\x07\x15\x60\x96\xd8\xd0\xc3\x0b\xe2\x41\xf4\xd7\x71\x35\xc9\x04\xba\x6e\x74\xd4\xaf\x88\xa7\x70\x7e\xe8\x30\x68\x16\x58\x83\x45\x4e\xc5\x6c\xa0\x07\x59\x19\xe4\xe8\x29\x86\xae\xc0\x6b\x19\xe9\x64\xe6\x74\x50\x43\xe6\x6a\xda\x81\x9a\xb2\x15\xef\x70\xce\x3b\x0f\x33\x80\x86\x9d\x07\x59\xe1\xd0\x53\xed\x43\x5d\x17\x87\x08\xcf\xf2\xa1\xe2\x7c\x02\xcb\xb8\xc9\xc0\x32\x3e\x97\xc0\x32\x6e\x7f\x16\x8e\x5b\x0d\x2c\xad\x20\xdd\x4a\x60\x39\x4f\xa8\xad\xc0\xd2\x0a\xd4\xcd\x07\x96\xf3\xc4\xd9\x76\x1e\x67\x13\x58\x8a\xa0\xee\x02\xcb\x0e\x48\x93\x26\x03\xcb\xe4\x5c\x02\xcb\xa4\xfd\x59\x38\x69\x35\xb0\xb4\x82\x74\x2b\x81\xe5\x3c\xa1\xb6\x02\x4b\x2b\x50\x37\x1f\x58\xce\x13\x67\xdb\x79\x9c\x4d\x60\x29\x82\xba\x0b\x2c\x3b\x20\x4d\x9b\x0c\x2c\xd3\x73\x09\x2c\xd3\xf6\x67\xe1\xb4\xd5\xc0\xd2\x0a\xd2\xad\x04\x96\xf3\x84\xda\x0a\x2c\xad\x40\xdd\x7c\x60\x39\x4f\x9c\x6d\xe7\x71\x36\x81\xa5\x08\xea\x4f\x2d\xb0\x94\x7f\x57\x56\xad\x17\xb3\x41\xc9\xb7\x65\xb3\x41\xf4\xf6\xf6\xe8\xeb\x79\x6b\xc6\x15\x65\x77\x1c\xd7\xb3\xe2\xc2\x07\xea\xce\xb3\x56\x31\x0f\x74\x81\xb3\xe6\x82\xfe\x9f\x33\x85\x3d\x88\xae\x0d\x2d\x3c\xb2\x52\x28\x7a\xc5\xec\x28\x7e\x77\xe7\x91\x39\xda\x60\x8f\xba\x58\x71\x81\xc0\x27\x6a\xcd\xdd\x39\x0a\xf8\xc1\xf4\xa6\x5c\x2f\xac\x5c\x87\x48\xcf\x9d\xe0\x61\x50\xb2\x71\x24\xc0\xb0\x36\xcd\x0f\x63\x4a\x70\xcf\x89\x6f\x9a\x6c\xb1\x69\x92\x2c\x36\xb5\x72\xc5\xf4\xa8\xe6\xc8\xe7\x2e\xb9\x55\xa3\x0a\xfa\x20\x8e\xdf\xd1\xfb\xd8\x37\x6b\x7e\x0f\x37\x23\xf3\x3e\x36\x3f\x99\x04\x79\x17\x52\x41\x5c\x74\xfd\x45\x55\x8a\xcf\x06\x51\xf7\x2b\x34\x78\x9a\x21\xf7\x32\x19\xf3\xcb\xc2\xfc\xb8\x52\x52\x29\x0b\xc2\x64\xe2\x2f\xd7\x64\xf9\x76\xc1\xdf\xa7\x24\xf9\x55\x3a\xf2\x9e\xaa\xe5\x1a\x01\xc3\x3e\xc9\xa0\x8c\x28\x95\x5e\xa4\x79\x24\x71\x32\x46\x3f\x2e\xe9\x01\x52\x22\x24\x26\x99\x47\xcb\x26\x6e\x3a\x9f\x60\x50\x05\x2b\x97\x6e\xca\xce\xec\xf2\x55\x3f\x05\x56\x56\xb5\xd7\x0e\x2b\xc7\x1d\x2b\x49\x06\xa5\xc5\xca\xf1\x5e\x56\x8e\x3b\x56\x1e\x65\xe5\xe4\x34\x56\x4e\x3a\x56\x92\x0c\x4a\x8b\x95\x93\xbd\xac\x9c\x74\xac\x3c\xca\xca\xe9\x69\xac\x9c\x76\xac\x24\x19\x94\x16\x2b\xa7\x7b\x59\x39\xed\x58\x79\x8c\x95\xd8\xe7\xe1\xc1\xb4\xdd\xa2\x4f\x9e\x99\xb1\x88\x8e\x9d\x79\x48\x33\x86\x26\x37\x8a\x59\x6a\x4a\x3b\xa6\x1e\x63\x6a\xc0\xef\x89\x38\x89\xa8\x46\x42\xc7\xd3\x1c\xa0\x19\x4d\xe3\xeb\x62\x96\x46\x85\x1d\x49\x8f\x06\x79\xea\x93\x93\x38\x1a\x09\xe8\x28\x6a\xc3\x69\x85\xfa\xe8\x72\x4f\xb0\xa7\x3e\xe9\xf8\x79\x8c\x9f\x2e\x56\xa7\xf1\x33\x12\xd0\xf1\xd3\x86\x33\xe3\xa7\xb9\x7c\xc2\x4f\x7d\xbb\xa3\xe6\x01\x6a\xea\xb9\x7b\xc2\x0a\xe7\x77\x4c\x11\xb1\x31\x8b\xc0\xc0\xb8\x82\x65\xbc\x05\x4b\x61\x41\x57\xab\xcf\x80\xae\x2c\xda\xbe\x9c\x50\x33\x81\x33\x22\x66\x7a\x11\xbd\xef\x88\x36\x1d\xf6\xe3\x7b\xb0\xdd\x22\x08\xb0\x52\x44\xb0\x39\xfa\xdf\x4f\xce\x97\xbf\x7c\xfb\xd3\xd0\xf9\xf3\x2f\x5f\x5c\xa0\x8e\x92\xfe\x29\xcb\x9b\x39\x4a\x76\x74\xcc\x96\x37\xd3\x8b\x27\x74\x1c\x77\x74\x3c\x46\xc7\xda\xeb\x9a\x39\x3a\x46\x8f\xf2\x5f\x99\xad\xa9\x98\xb9\x9f\x4b\x48\x2f\x22\xe5\xc4\x26\xe5\xa4\x80\x94\x93\x8e\x94\xc7\x48\x59\x7b\x59\x33\x47\x4a\xbc\x52\x44\x40\x20\x88\x94\xb0\xc0\xcb\xb7\xb0\x08\x95\xe2\xec\x33\xe5\xe5\xd4\xe6\xe5\xb4\x80\x97\xd3\x8f\xc6\xcb\xca\xc4\xf4\xd8\xad\xe4\x1e\x75\xd1\xf5\x07\x65\x76\x39\xc3\x25\x2c\xe7\xab\x95\x24\xca\xa9\xea\x60\x67\x86\xa5\xb1\x25\x05\x91\x44\xa5\xbf\x18\x16\x8a\xc1\x42\x31\x93\x0d\x94\x58\xd0\x54\xc9\x36\x4b\xbf\x36\x4d\xcc\x56\x69\x23\xec\x94\x1e\xc8\x70\xe1\xd3\xa7\x5d\x48\x72\xbf\x92\x5e\x48\xbc\x21\x56\x27\xde\xe8\xcb\x9a\x7d\x68\xde\xb1\xcd\x06\xda\xe0\xb5\x52\x4b\xec\xe3\x33\x8e\xeb\xf9\x9d\x9f\x52\xf0\x2a\x3b\xdf\xa4\xf6\x5e\xfe\x5a\x27\x1d\x7c\x02\x3b\xf9\xe1\xc9\x6e\x7e\x17\x3f\x44\x7b\xf9\x13\x8a\x54\x4a\xcc\xaa\x62\x03\x80\x74\xd7\xbd\x56\x9a\x1d\xc5\x81\x2a\x6f\xa3\xb7\x44\x99\x0d\xfc\x5a\x5e\x89\xed\xfb\x15\x33\x94\x4b\x9b\x0b\x3e\x91\x84\xb2\xcf\x76\x72\x27\xe3\xf1\x5d\x47\xc7\xad\xb1\x7d\xaa\x53\x76\xb2\x55\xcd\x59\x7f\x40\xf8\xbf\x74\xd8\x38\xd9\x99\xbc\x22\x26\x9d\x92\x26\x8f\x75\x67\xe7\x52\xea\x3a\x82\xc4\x21\x2b\xf3\x83\x2b\x5b\xe3\xaf\xee\x0f\xcc\xe2\x62\xb4\xa4\xa8\xc5\xf4\x89\x10\x5c\xd4\xca\xaa\x55\x6e\xee\xfc\xa3\x24\x13\x5f\x3f\x63\xe6\xa5\xf7\xff\x1a\xeb\xa8\xd5\xdb\xb2\x33\xb6\xa0\x7f\xd5\x74\xa5\x0d\xeb\x24\x03\xe7\xcf\x51\xca\x61\x10\x3d\x33\x95\x38\x51\x09\xb6\xdb\x17\x75\x37\x5b\x24\x1f\x63\x5d\x46\x2c\xf5\x6e\xfd\xc4\xe9\x0c\x11\x25\x38\xbb\x2b\x34\x77\x6d\xa1\xe9\xfe\x90\x46\xbb\x0a\xd9\x0f\xc4\x1f\xbd\x50\x60\x0f\xd0\x97\xcf\x5d\x90\x64\xc9\x99\x8b\xec\x0b\x89\x9e\x68\xbe\xc8\x9d\xac\xb5\x5b\x7a\x42\xaf\x4e\xa0\xf1\x81\x81\xd9\xe3\xfa\x68\xc3\xaa\x96\xa2\xbe\xfb\x99\x0d\x0c\xb5\x6a\xb3\xbd\xa6\xfe\x7a\x9e\xa8\xba\xae\x9c\xff\xce\x1d\xec\x96\xf8\x71\xe0\x0c\x7c\xa2\x92\xbc\x82\x36\x1f\xbd\x4e\x8b\x3e\x3f\xe0\xb7\xc4\x5a\xea\xab\x1d\x79\x7c\xfc\xd6\xbc\xe8\x6a\x27\xf4\xec\x88\xff\x78\xb1\x27\xdf\x99\x7d\x41\xa0\xde\x43\x7d\x03\x64\x3c\xc9\x9c\x1f\x92\x77\xdf\x63\xa9\xcc\x92\x33\xf0\xe4\xe5\x47\x6d\xf2\x79\x58\x2a\x93\x8a\x72\xcb\x57\xab\xdb\x76\x9f\x82\x0e\x2a\xfb\x78\xc4\x6c\xe8\xf9\x66\xdf\xe8\x6a\x3e\xee\x7c\xc8\x49\x70\x1e\x64\x67\x0d\x72\x9d\x7d\x40\xaa\xef\xea\xfa\x5d\x31\x9d\x75\x44\x6f\x65\x59\xe6\xf0\xf8\x0e\xac\xfc\xee\x29\x2a\xb8\xbd\x73\xcb\xba\x8c\xbf\xc6\xff\xa5\xdd\xf9\x2d\x00\x00\xff\xff\xcb\x48\xc6\x89\x48\x5e\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5d\x8c\x5b\x47\x15\xfe\xd2\xb5\xcd\xae\x37\x76\xa0\xa5\xe5\xa7\xb4\x9d\x42\x13\x5a\x12\xa7\xfe\xd9\x14\xea\xc4\x09\x90\xa4\x25\xd0\x85\x90\x98\x20\x5e\x80\x5b\x7b\xbc\xbe\x8a\x7d\xef\xea\xde\xeb\xa4\x5b\x55\x68\xbd\x9b\x9f\x56\x1b\x1a\xa9\x2a\x82\x87\x88\x52\x28\x2f\x48\x48\xce\x76\xdd\x3a\xfb\xe3\x45\x3c\x22\x84\xce\x48\xbc\x21\x01\xaa\x84\x84\xf2\x86\x90\x78\x05\x9d\x3b\xb3\x6b\x7b\xd7\x8b\xb6\x0f\x19\x29\x39\x33\xe7\x9c\xf9\xbe\xf3\x37\x77\xfd\xd7\xfb\x23\x3f\x01\x80\x83\x00\x3e\x03\x20\xd8\x03\x1c\x05\xf0\xc7\xfb\x10\xae\xce\x08\xf0\x71\x00\x77\x46\x80\x87\x00\xfc\x69\x04\x78\x12\xc0\x3f\x46\x80\x87\x01\x24\x23\xfa\xfc\x85\x88\x3e\x9f\x8f\x00\x8f\x02\x70\x8d\x7c\x3d\xa2\xef\xff\x36\x02\x24\x00\xfc\x3e\x02\x8c\x00\xa0\x08\x30\x0e\xe0\xcf\x11\xe0\x23\x00\xfe\x1e\x01\xf6\x03\xf8\xa7\x91\xc9\x28\xf0\x38\x80\x89\x28\x30\x0a\xe0\x42\x14\x78\x02\xc0\x0f\xa2\x9a\xe7\x4a\x14\x78\x0c\xc0\x2f\x8c\xdf\xef\xa2\x40\x12\xc0\x07\x51\xcd\xf3\xaf\x28\x30\x06\xe0\xbf\x51\xcd\x33\x16\x03\xa2\x00\x1e\x8c\x01\xf7\x03\x78\xd8\x9c\x0f\xc7\x80\x08\xf3\xc4\x74\x1c\xcf\x1a\xf9\x15\x23\xcf\x18\xf9\xed\x98\xc6\xf9\x5e\x4c\xe3\xca\x18\x10\xe7\x3c\xcd\xf9\x65\xe3\x77\xc5\xc8\x1b\x46\xbe\x69\xe4\x2d\xc3\xf7\x4e\x0c\xa8\xee\x01\x7e\x13\x03\x72\x00\x1e\x18\x05\x9e\x01\xf0\xfc\x28\xf0\x43\x00\x3f\x1a\x05\x4e\x00\xf8\xdb\x28\x50\x01\xf0\xd8\x18\x70\x1a\xc0\xb5\x31\xd3\x97\x31\x60\x02\xc0\x68\x1c\xf8\x1c\x80\x42\x5c\xf7\xc5\x8a\xeb\x3a\xbd\x14\x07\x3e\x0a\xa0\x19\xd7\x79\xbe\x11\xd7\xb8\xbf\x8e\x6b\xbc\xd8\x38\xf0\x7d\x00\xf5\x71\xe0\x11\xc6\x1b\x07\xbe\x0e\xe0\xee\x38\x70\x16\xc0\x91\xbd\x40\x91\xf9\xf6\xea\xf3\x5f\xf6\x02\x9f\x07\x70\x28\xa1\xfb\x52\x4c\xe8\x7a\xbf\x9c\xd0\x7d\xbd\x95\xd0\x75\xb8\x6d\xec\xab\x09\xcd\xff\x41\x42\xf3\xff\x3b\x01\x7c\x82\x79\x93\x5a\x3e\x6a\xe4\x33\x46\x7e\x33\xa9\xfb\x58\x49\xea\x78\xae\x25\x35\xce\x3b\x46\xff\x87\xa4\xae\xfb\x5d\x23\xff\x63\xe4\x7d\xfb\xb4\x4c\xee\xd3\x7c\x9f\xde\x07\xec\xe1\x39\x34\xb3\xcc\x33\xf9\x08\x7a\x8b\x6b\xff\x90\xd9\x87\xfe\xd0\xf8\x0f\x40\xe7\xc3\x33\xf9\x59\xe8\x5c\x3e\x65\xfc\x38\xef\x03\xd0\x73\xc5\x6b\xaf\x91\x5c\xf7\x4f\x02\x78\x0a\xc0\x3e\xf3\x6e\x36\x16\xc7\xce\xf3\x99\x30\xe7\x8f\x41\xbf\x83\x8d\x25\x8c\x7c\x10\x7a\xee\xb8\x86\xfc\xd4\xb8\x77\x3c\x27\x5c\x13\xae\xdb\x18\x06\x57\xcc\x48\xce\xf9\x89\x90\xa8\x2c\x7c\x59\x72\x9d\x72\x6f\xe7\xe3\x60\x4f\x7b\xb0\x4f\x7d\xb2\x6a\x39\x53\x52\x94\x6d\x7f\xba\x66\xcd\x88\xba\x5b\x96\xa2\x62\xd9\x35\x59\x16\x97\xed\xa0\x2a\xa4\xe7\xb9\x9e\xd8\x3f\xdc\xd1\x6f\x94\x4a\xd2\xdf\x66\x0b\xec\xfa\xee\x40\x42\xc7\x4d\x90\x86\xe7\x49\x27\x10\x65\x2b\x90\xc2\x72\xca\xda\xea\x3a\xa2\x2e\x03\xe9\x0d\x9a\x37\x4c\x65\x79\xc9\x2e\xc9\x10\xd9\x98\xeb\xd2\xf2\x1b\x9e\xac\x4b\x27\xf0\x71\xaa\x1f\x0a\xa7\xac\x19\x9c\x92\x7e\xc9\xb3\xa7\x03\xdb\x75\x70\x4a\x47\x81\xe7\x65\xb0\x8b\xfc\xfb\xbd\x76\x4e\x90\xbd\xaa\x6e\xcd\x2e\x5b\x33\xfe\x70\x8f\xaf\x19\x2b\xce\x38\x81\xf4\x2e\x59\x35\x51\x71\x3d\x61\x55\x02\xe9\x89\x69\x4f\xfa\xbe\x78\xd1\x2a\x5d\x14\x2f\x36\x82\xc0\x75\x06\x9d\x4a\x26\xc7\xc0\xf2\xec\x4a\x65\xd0\xe6\xb8\xc1\xff\xb5\x4f\xbb\x97\xa5\x77\x48\x47\xce\x15\xe1\x32\xe2\x05\xcb\x0f\xb4\x45\xb8\x95\xca\xc0\xd1\xc1\xa4\x75\x51\x6a\xb7\xc9\x5e\x4d\x31\xe9\x3a\x41\x55\xff\x5f\x9b\x11\x7e\x60\x05\xb6\x1f\xd8\x25\x1f\xe7\xa4\x2f\x03\x9c\xb7\x2e\x49\x9c\xaf\xba\x97\x45\x31\x63\x64\xd6\xc8\x9c\x91\x13\x5a\x5a\x75\xb7\xe1\x04\x7a\x1f\xb2\x84\xbb\x90\x5d\x6f\xc3\x9e\x15\x33\xe2\x69\xf1\xdd\x2a\x8a\x59\x23\x73\x46\x4e\x68\x79\xc1\xaa\x35\x24\xce\xc9\x69\xd7\x0b\x52\x93\xfe\x94\x5d\x4e\x7d\xb5\x31\xe5\xa7\x8a\x6e\x9e\x87\xe3\xcb\x17\xed\xaa\x55\x77\x0f\x7b\x8d\xf8\xd9\x6f\x15\x53\x27\x3d\x69\x71\xeb\x53\x3c\x18\x79\x91\x4d\x67\x9e\x4d\xa5\x73\xa9\xec\x17\x45\x36\x97\x3f\x72\xe4\x60\x3a\x97\x4e\xc7\xb9\x0a\xa9\xa2\x67\x39\x7e\xcd\x0a\x5c\x2f\x2f\xbe\x11\x62\x88\xc9\x86\x67\xd5\xdd\xb2\x2b\x8e\x0d\x00\x1f\x8f\xbf\x60\x39\x53\x0d\x6b\x4a\xa6\x8a\xd2\xaa\xe7\xc5\xe6\x39\x2f\xce\x35\x7c\xdf\xb6\x9c\xf8\xe4\x99\xc9\xd3\xa9\x0b\xd2\xf3\x6d\xd7\xc9\x8b\xcc\xe1\x74\xfc\xa4\xeb\x04\xd2\x09\x52\xc5\x99\x69\x99\x17\x81\x7c\x29\x78\x7a\xba\x66\xd9\xce\x51\x51\xaa\x5a\x9e\x2f\x83\xc2\x77\x8a\xcf\xa5\xbe\xd4\xf3\xe3\x78\x2a\xd2\x4b\x9d\x76\x4a\x6e\xd9\x76\xa6\xf2\x22\x7e\xb6\xd6\xf0\xac\x5a\xea\x39\xd7\xab\xfb\x79\xe1\x4c\x87\x47\xbf\x90\x3b\x2a\xf4\xb6\xe0\xec\xcf\xa4\x0b\x85\x8c\x38\x70\x40\xf0\x36\xfd\x78\x21\x93\x11\x27\x44\x5a\xe4\xc3\xf3\xf1\x42\x76\xc3\x74\xac\x30\xc1\xdb\x27\x43\xb7\x63\x99\xb4\x78\xe5\x15\x7d\xe5\x78\x21\x9b\x7e\x4a\x9c\x10\x19\x91\x17\xd9\xa3\xfc\x3d\x51\x4d\x6a\xd3\xb2\x9a\xa7\x35\x5a\xa2\xd6\x56\x8d\x5a\xd8\xaa\x09\xbf\x36\x5b\x2e\x6d\x55\xa9\x85\x6d\x2a\xd0\xcf\xe8\x7d\x5a\xa5\x36\xad\x85\xff\x3a\xd4\x16\x6a\x96\xda\xf4\x1e\x75\x68\x95\xba\xb4\x28\xa8\x13\xc2\x75\x68\x99\x5a\xea\x1a\x75\xa8\x23\xe8\x7d\x6a\xd1\x22\xb5\xd5\xac\x7a\x95\x3a\xb4\x42\x5d\xd5\x54\x37\x84\x6a\x0a\xea\x86\x9a\xdb\xb4\x4c\x5d\xba\xc3\x0f\x91\x7e\xa5\x9a\xb4\x4e\x6d\xf5\x2a\xad\x51\x97\xd1\xfa\xf8\xd4\x42\x1f\x9b\x5a\x18\xc2\x35\x2c\x40\xf6\x52\x73\x4c\x4f\x8b\xd4\x62\xfa\x7b\x1f\xe6\x56\xce\x1d\x82\xfd\xa5\x2e\xad\x7a\x4d\x07\xba\x44\x2d\x35\x47\x2d\xc1\xc1\x2c\x86\x99\xae\xaa\x9b\x82\xd6\xa8\x25\x54\x53\x5d\xa7\xb6\x9a\x53\xd7\x43\x84\x76\xff\xdd\x16\x3b\x6d\xde\x0d\xbd\xe7\x55\x53\xcd\xa9\x59\x0e\x97\x77\x9c\x56\x18\xf6\x16\xc2\x75\xea\x72\x38\x9c\x39\x47\x4b\x2b\x1c\xd4\x9b\xc3\xa2\x60\x35\xa7\x76\x03\xf4\x73\x5a\xa7\x8e\x6a\x52\x4b\xd7\x97\x4b\x3e\x90\x18\x3b\xbf\x45\x5d\x5a\x51\xf3\x1c\xf3\xbd\x19\x93\xed\x04\xf7\xa4\xcd\x43\x68\xd6\xd5\x6c\x58\xb1\x25\x56\xa8\xeb\xdc\x6e\x75\x55\x84\xc7\x36\xdd\xf9\x90\xf0\xdb\xb1\xf4\x1c\xac\xe9\x51\x1e\x48\x68\x68\x32\xeb\x8c\x4f\x2b\x7c\x6b\x8d\x5a\xf4\x5e\xd8\xbb\x0e\x0f\xc4\x32\x4f\x26\xad\xd3\xf2\x2e\xa1\xd4\x8f\x39\x03\x35\x4b\xef\xea\xe3\xdc\xe6\xa8\xb4\xe9\x5d\xea\xb2\xa2\xa5\x66\xa9\xa3\xae\x50\x6b\x77\xb1\xad\x71\xdb\x7b\x30\x1d\x75\xb5\x1f\x44\xb7\x87\x07\x7b\x9e\x56\xf9\x39\xef\x0e\x74\x95\xba\xea\x35\x4e\x2d\x9c\xeb\xce\xa1\xcd\x19\xd5\x1d\x0a\xa7\x36\x7c\x0b\x0c\xf8\xd6\x46\x75\x4c\x7b\xda\xdc\x84\x39\x5a\xa6\x15\xf5\x7a\xaf\xa7\x43\xfd\x16\xb7\x7b\x6d\x3e\x8c\xf5\xf0\x65\xf1\x9b\x5f\xa4\x2e\x2d\x99\x17\xd6\xd2\xe3\x32\xf0\x9e\xf8\xbd\xdc\xa2\xb6\x6a\xaa\x9b\xea\x5a\x6f\x7b\x9d\x9b\xa5\x6e\x8a\xf0\xa6\xee\x58\x98\x0d\x5f\x06\xbd\x4d\xb7\x99\x40\x35\xa9\xa3\xe6\x18\xe1\x6d\xea\xaa\xab\xe1\xa8\xac\x6d\xa8\x36\x99\xd4\x02\x53\xb3\x92\xff\xb8\x0f\xd7\x67\x77\xd0\xe7\x76\xd0\x4f\x0c\xd7\x6f\xb6\x6a\x7e\xb8\xdd\xd4\x7d\x27\xeb\x40\xe7\x76\xca\xa1\xef\x8b\x13\xfe\xca\xa0\x37\xf8\x9b\xa7\x7f\x69\x6c\xec\x73\x7d\xfb\x89\xde\x9e\x7e\x1a\x56\xb5\xd7\xb0\xff\x05\x00\x00\xff\xff\xde\x56\x25\x1d\x2b\x0f\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
