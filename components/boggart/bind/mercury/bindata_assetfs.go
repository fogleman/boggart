// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package mercury

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x93\xdb\xb6\x11\xfe\xee\x5f\xb1\xc3\x39\xd7\xa7\x24\xd4\x7b\xdc\xf6\x22\x5d\x3e\xd4\xed\x34\x33\x49\x27\x63\x5f\xdb\x69\x93\xf4\x06\x12\xa0\x13\x62\x12\xa0\x01\x50\xe7\xeb\x8d\xfe\x7b\x06\x04\x5f\x40\x1d\x25\x91\x14\x69\x5b\x31\x35\xe3\xb3\x48\x00\xbb\xc0\xb3\x0f\x76\x29\x70\x81\xc7\x47\xc0\x64\x45\x19\x01\x67\xc9\x99\x22\x4c\x39\xb0\xdd\x3e\x9b\xc9\xa5\xa0\x81\x02\xf5\x10\x90\xb9\x83\x82\xc0\xa3\x4b\xa4\x28\x67\x83\x5f\xd1\x06\x99\x42\xe7\xfa\x19\x00\xc0\x2a\x64\x4b\x5d\x02\x1b\xe4\x85\xe4\x6f\x5c\xf8\x48\x5d\xb2\x1e\x3c\x46\xa5\xfa\x23\x88\x0a\x05\x03\x46\xee\xe1\x3b\xa6\xbc\xfe\x3f\x42\x7f\x41\x44\x5c\xb3\xd7\x5f\x25\x4d\xbe\x89\x5a\x6c\x9f\xcd\x06\x46\xc1\xf5\xb3\x19\xa6\x1b\x58\x7a\x48\xca\xb9\x23\xf8\x7d\xac\xd1\xbe\xbb\xe4\x9e\xeb\x63\x77\x34\x06\xfd\x4d\xfa\xc9\xb7\xf7\xd2\x1d\x8d\xe3\xfa\xbb\x6d\xde\xdf\x06\x88\x11\xcf\x2a\x7d\x5a\x23\x01\x23\x5f\x27\xad\x27\xb8\x47\xe6\x8e\x42\x8b\x22\x49\x69\xcd\xd0\x4b\x04\x32\xb4\x01\x86\x36\xae\x42\x0b\x09\x0b\x24\x6e\xf5\x17\x27\x13\xe3\x51\x59\xa4\x2b\x95\xe4\xd1\xb8\x6e\x20\x88\x24\x4c\x45\xb6\x70\x1e\x1f\x81\xae\x80\xbc\x83\x3e\x32\x26\x70\xb4\xf1\x12\x9d\xfa\xde\x86\xe8\x4a\x84\x61\xd8\x6e\xaf\x67\x08\xd6\x82\xac\xe6\x7b\xda\x65\x96\xbd\xda\x70\x8a\x2f\x87\xbd\x6f\x74\x5b\x4f\x12\xd8\x6e\x1f\x1f\xa1\xff\x9a\xbc\x0b\x89\x54\xfd\x7f\xbe\xfe\xbe\xff\x23\x52\x6b\x73\xdb\x08\x77\xae\xb5\xd0\xd1\x9f\x18\x38\x7f\x09\x85\x20\x4c\x81\x4f\x90\x0c\x05\xf1\x09\x53\xd2\x81\x3e\x6c\xb7\xb3\x01\xba\x9e\x0d\x3c\xda\xc0\x40\x7d\xce\xd4\xda\x7b\xa8\x3b\x5e\xab\x79\x9d\x61\x7f\x6b\xe4\xcc\x63\x31\x7f\x40\x9e\x37\x1f\x15\x61\xf1\x83\xa9\x00\x52\x0f\x44\x2a\xba\x6c\x1e\x09\x4c\x65\xe0\xa1\xda\x48\x58\xcd\x4f\x41\x22\x16\x53\x84\xc1\xab\x44\x43\xc3\x03\x5f\x73\x8f\x62\xf4\x20\xeb\x8e\xdc\x6e\x7f\xca\xd0\x13\x39\x45\x63\xff\x7b\xaa\xe3\xf8\xe0\x67\x83\xd0\xdb\x53\x62\xb9\x26\x85\x16\xee\x7e\xe7\x94\x6b\xb1\xe3\xa4\x6c\x09\xfa\x0e\xac\x10\x26\x60\x10\x03\xca\x0e\x48\xd3\x9f\x83\x73\xe8\x60\xcb\xa8\x3f\x41\xaa\x9d\xbc\x57\xae\x1f\x2a\x82\x61\xc5\x99\x72\x47\x13\xf0\xdd\x85\x3b\x19\x1e\xd1\x6f\xf5\x43\xa0\x7b\xb8\xcc\xfb\x1a\x8c\x14\x01\x45\x7d\x02\x9c\x01\x26\x1b\xba\x24\xf0\x3c\x42\x9d\x51\x2f\xfd\x77\x19\x08\xca\x14\x38\xb9\xe8\xf6\xf3\x9e\xf0\xf6\xb3\x73\x8d\xf9\x32\xd4\xee\xab\x7f\x2f\xa8\x22\x97\x5a\xc9\x0d\x7f\xa3\x04\x65\x77\x97\x2f\x1c\xb8\xec\xeb\x3b\x7d\x13\xc8\xc0\x19\x0f\x87\x2f\xdd\xe1\xc8\x1d\x8e\x6f\x46\x5f\x5f\x0d\xa7\x57\xc3\xaf\xff\x3b\xfc\xe3\xd5\x70\xe8\xf4\xc0\x79\xd1\xeb\xa5\x61\xcd\xe9\xf5\x4a\x61\x36\x08\xae\x9f\x1d\xaf\xa5\xa3\x07\xb1\x6c\xeb\x11\x88\xfe\xba\x52\x09\x1a\x10\xac\xb1\x41\xe6\x3e\x56\xae\x20\x32\xe0\x4c\x6a\x93\x33\x7e\x2f\x50\xe0\x80\x54\x0f\x9a\x27\xf7\x14\xab\xf5\xd5\x68\x38\x7c\x5e\xd2\x12\x33\xb5\x26\x08\x97\xad\x2b\xca\x55\x8c\x05\xef\x78\xd0\x64\xfa\xa8\x75\x4d\x29\x37\x23\x18\xc0\xbf\x1b\x90\x33\x6e\x48\xce\xa4\x21\x39\xd3\x5a\x72\x66\x83\xb2\xf6\xd0\x32\x2b\x58\x79\xc1\xf1\x43\x85\x79\xcc\xee\x08\x5c\xd0\xaf\xe0\x42\xc7\x47\x09\x57\x73\xe8\x9b\x6f\x25\xa6\x87\x51\x28\x8c\x5f\x42\x0c\xc3\x25\x79\x17\x0b\xea\x47\xa4\x81\x0b\x33\x3f\xa3\x8b\x9e\x5d\xfc\x1f\x82\x44\x52\xaa\xbf\xf7\xac\x08\x22\xc3\xe5\x92\x48\x69\x85\x90\x0a\x96\xc1\xa9\x65\xec\x8e\xf4\x8d\xcb\x80\x8b\xc8\x09\x39\x18\xc9\xf5\x82\x23\x81\xa3\xc0\xf5\xf8\x98\xeb\x55\x64\xc5\x92\x70\x27\x3a\x4b\x57\x8e\x1a\x94\x7a\xb2\xdf\xf1\x7c\xf6\xa3\x7d\xd6\xe1\x9b\x11\x6c\xb7\x96\x5f\xab\xd4\x0f\x63\xb7\x3b\x95\x09\xbb\x11\x1a\xf0\x61\x59\xdb\xe7\x07\x15\x20\x96\x58\xd0\x43\x0b\xe2\x41\xf4\xd7\xc5\x9a\x62\xc2\xb9\x6e\x74\xd4\xaf\x88\xa7\x50\x7e\xe8\x30\x68\x16\x58\x83\x45\x4e\xc5\x6c\xa0\x07\x59\x19\xe4\xe8\x19\x86\xae\xc0\x6b\x19\xe9\x64\xde\x74\x50\x43\xe6\x68\xda\x81\x9a\xb2\x15\xef\x70\xce\x3b\x0f\x33\x80\x86\x9d\x07\x59\xa1\xd0\x53\xed\x43\x5d\x17\x87\x08\xcf\xf2\xa1\xe2\x7c\x02\xcb\xb8\xc9\xc0\x32\x3e\x97\xc0\x32\x6e\x7f\x16\x8e\x5b\x0d\x2c\xad\x20\xdd\x4a\x60\x39\x4f\xa8\xad\xc0\xd2\x0a\xd4\xcd\x07\x96\xf3\xc4\xd9\x76\x1e\x67\x13\x58\x8a\xa0\xee\x02\xcb\x0e\x48\x93\x26\x03\xcb\xe4\x5c\x02\xcb\xa4\xfd\x59\x38\x69\x35\xb0\xb4\x82\x74\x2b\x81\xe5\x3c\xa1\xb6\x02\x4b\x2b\x50\x37\x1f\x58\xce\x13\x67\xdb\x79\x9c\x4d\x60\x29\x82\xba\x0b\x2c\x3b\x20\x4d\x9b\x0c\x2c\xd3\x73\x09\x2c\xd3\xf6\x67\xe1\xb4\xd5\xc0\xd2\x0a\xd2\xad\x04\x96\xf3\x84\xda\x0a\x2c\xad\x40\xdd\x7c\x60\x39\x4f\x9c\x6d\xe7\x71\x36\x81\xa5\x08\xea\x4f\x2d\xb0\x94\x7f\x53\x56\xad\x17\xb3\x41\xc9\x77\x65\xb3\x41\xf4\xee\xf6\xe8\xcb\x79\x6b\xc6\x15\xe5\x76\x1c\xd7\xb3\xe2\xc2\x07\x8a\xe7\x59\xab\x98\x07\xba\xc0\x5d\x73\x41\xff\xcf\x99\x42\x1e\x44\xd7\x86\x16\x1e\x59\x29\x27\x7a\xc1\xec\x2a\x7e\x77\xe7\x91\xb9\xb3\x41\x1e\xc5\x48\x71\xe1\x80\x4f\xd4\x9a\xe3\xb9\x13\xf0\x83\xc9\x4d\xb9\x5e\x58\x99\x0e\x91\x9e\x3b\xc1\xc3\xa0\x64\xe3\x48\x80\x61\x6d\x9a\x1d\xc6\x94\xe0\x9e\x1b\xdf\x34\xb9\x62\xd3\x24\x55\x6c\x6a\x65\x8a\xe9\x51\xcd\x1d\x9f\x63\x72\xab\x46\x15\xf4\x41\x1c\xbf\xa3\xb7\xb1\x6f\xd6\xfc\x1e\x6e\x46\xe6\x6d\x6c\x7e\x32\x09\xf2\x2e\xa4\x82\x60\xe7\xfa\x8b\xaa\x14\x9f\x0d\xa2\xee\x57\x68\xf0\x34\x3f\xee\x65\x32\xe6\x97\x85\xd9\x71\xa5\xa4\x52\x16\x84\xc9\xc4\x5f\xae\xc9\xf2\xed\x82\xbf\x4f\x49\xf2\xab\x74\xe5\x3d\x55\xcb\xb5\x03\x0c\xf9\x24\x83\x32\xa2\x54\x7a\x91\x66\x91\xc4\xa9\x18\xfd\xb8\xa4\x07\x8e\x12\x21\x31\xa9\x3c\x5a\x36\xc1\xe9\x7c\x82\x41\x15\xac\x30\xdd\x94\x9d\xd9\xe5\xab\x7e\x0a\xac\xac\x6a\xaf\x1d\x56\x8e\x3b\x56\x92\x0c\x4a\x8b\x95\xe3\xbd\xac\x1c\x77\xac\x3c\xca\xca\xc9\x69\xac\x9c\x74\xac\x24\x19\x94\x16\x2b\x27\x7b\x59\x39\xe9\x58\x79\x94\x95\xd3\xd3\x58\x39\xed\x58\x49\x32\x28\x2d\x56\x4e\xf7\xb2\x72\xda\xb1\xf2\x18\x2b\x91\xcf\xc3\x83\x49\xbb\x45\x9f\x3c\x33\x63\x11\x1d\x3b\xf3\x90\x66\x0c\x4d\x6e\x14\xb3\xd4\x94\x76\x4c\x3d\xc6\xd4\x80\xdf\x13\x71\x12\x51\x8d\x84\x8e\xa7\x39\x40\x33\x9a\xc6\xd7\xc5\x2c\x8d\x0a\x3b\x92\x1e\x0d\xf2\xd4\x27\x27\x71\x34\x12\xd0\x51\xd4\x86\xd3\x0a\xf5\xd1\xe5\x9e\x60\x4f\x7d\xd2\xf1\xf3\x18\x3f\x31\x52\xa7\xf1\x33\x12\xd0\xf1\xd3\x86\x33\xe3\xa7\xb9\x7c\xc2\x4f\x7d\xbb\xa3\xe6\x01\x6a\xea\xb9\x7b\xc2\x0a\xe7\x77\x4c\x11\xb1\x31\x8b\xc0\xc0\xb8\x82\x65\xbc\x01\x4b\x21\x41\x57\xab\xcf\x80\xae\x2c\xda\xbc\x9c\x50\x33\x81\x33\x22\x66\x7a\x11\xbd\xef\x88\xb6\x1c\xf6\xe3\x7b\xb0\xdd\x3a\x10\x20\xa5\x88\x60\x73\xe7\x7f\x3f\xb9\x5f\xfe\xf2\xed\x4f\x43\xf7\xcf\xbf\x7c\x71\xe1\x74\x94\xf4\x4f\x59\xde\xcc\x51\xb2\xa3\x63\xb6\xbc\x99\x5e\x3c\xa1\xe3\xb8\xa3\xe3\x31\x3a\xd6\x5e\xd7\xcc\xd1\x31\x7a\x94\xff\xca\x6c\x4c\x45\x0c\x7f\x2e\x21\xbd\x88\x94\x13\x9b\x94\x93\x02\x52\x4e\x3a\x52\x1e\x23\x65\xed\x65\xcd\x1c\x29\xd1\x4a\x11\x01\x81\x20\x52\xc2\x02\x2d\xdf\xc2\x22\x54\x8a\xb3\xcf\x94\x97\x53\x9b\x97\xd3\x02\x5e\x4e\x3f\x1a\x2f\x2b\x13\xd3\x63\xb7\x92\x7b\x14\x3b\xd7\x1f\x94\xd9\xe5\x0c\x97\xb0\x9c\xaf\x56\x92\x28\xb7\xaa\x83\x9d\x19\x96\xc6\x96\x14\x44\x12\x95\xfe\x62\x58\x28\x06\x0b\xc5\x4c\x36\x50\x62\x41\x53\x25\xdb\x2a\xfd\xda\x34\x31\x1b\xa5\x8d\xb0\x53\x7a\x20\xc3\x85\x4f\x9f\x76\x21\xc9\xfd\x4a\x7a\x21\xd1\x86\x58\x9d\x78\xa3\x2f\x6b\xf6\xa1\x79\xc7\x36\x1b\x68\x83\xd7\x4a\x2d\xb1\x0f\xcf\x38\xae\xe7\x77\x7e\x46\xc1\xab\xec\x74\x93\xda\x3b\xf9\x6b\x9d\x73\xf0\x09\xec\xe3\x87\x27\x7b\xf9\x31\x7a\x88\x76\xf2\x27\x14\xa9\x94\x98\x55\xc5\x06\x00\xe9\x9e\x7b\xad\x34\x3b\x88\xc3\xa9\xbc\x8d\xde\x12\x65\xb6\xef\x6b\x79\x47\x37\xef\x57\xcc\x4f\x2e\x6d\x2c\xf8\x44\xd2\xc9\x3e\xdb\xa9\x9d\x8c\xc7\xc7\xae\x8e\x5a\x63\xfb\x44\xa7\xec\x54\xab\x9a\x73\xfe\x80\xf0\x7f\xe9\xa0\x71\xb2\x2b\x79\x45\x4c\x32\x25\x4d\x1e\xea\xce\xce\xa1\xd4\x75\x03\x89\x3b\x56\xe6\xe7\x56\xb6\xc2\x5f\xdd\x1b\x98\xa5\xc5\x68\x41\x51\x8b\xe9\x13\x21\xb8\xa8\x95\x53\xab\x70\xee\xec\xa3\x24\x0f\x5f\x3f\x61\xe6\xa5\xf7\xff\x1a\xeb\xa8\xd5\xdb\xb2\x33\xb6\xa0\x7f\xd5\x74\xa5\x0d\xeb\xa4\x02\xe7\xcf\x50\xca\x61\x10\x3d\x31\x95\x38\x4d\x09\xb6\xdb\x17\x75\xb7\x5a\x24\x1f\x63\x5d\x46\x2c\xf5\xb8\x7e\xda\x74\x86\x88\x12\x9c\xdd\x15\x9a\xbb\xb6\xd0\x74\x77\x48\xa3\x5d\x85\xec\xe7\xe1\x8f\x5e\x28\x90\x07\xce\x97\xcf\x31\x48\xb2\xe4\x0c\x3b\xf6\x85\x74\x9e\x68\xbe\xc8\x9d\xaa\xb5\x5b\x7a\x42\xaf\x4e\xa0\xf1\x81\x81\xd9\xe3\xfa\x68\xc3\xaa\x96\xa0\xbe\xfb\x99\x0d\x0c\xb5\x6a\xb3\xbd\xa6\xfe\x7a\x9e\xa8\xba\xae\x9c\xff\xce\x1d\xea\x96\xf8\x71\xe0\x0c\x7c\xa2\x92\xac\x82\x36\x1f\xbd\x4e\x8b\x3e\x3f\xa0\xb7\xc4\x5a\xe8\xab\x1d\x79\x7c\xf4\xd6\xbc\xe6\x6a\x27\xf4\xec\x88\xff\x78\xb1\x27\xdf\x99\x7d\x41\xa0\xde\x23\x7d\x03\x64\x3c\xc9\x9c\x1f\x92\x77\xdf\x23\xa9\xcc\x82\x33\xf0\xe4\xd5\x47\x6d\xf2\x79\x48\x2a\x93\x88\x72\xcb\x57\xab\xdb\x76\x9f\x82\x0e\x2a\xfb\x78\xc4\x6c\xe8\xf9\x66\xdf\xe8\x6a\x3e\xee\x7c\xc8\x49\x70\x1e\x64\x67\x0d\x72\x9d\x7d\x40\xaa\xef\xea\xfa\x5d\x31\x9d\x75\x44\x6f\x65\x59\xe6\xf0\xf8\x0e\xac\xfb\xee\x29\x2a\xb8\xbd\x73\xcb\xba\x8c\xbf\xc6\xff\xa5\xdd\xf9\x2d\x00\x00\xff\xff\x43\xa2\x6c\x9b\x44\x5e\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5d\x8c\x5b\x47\x15\xfe\xd2\xb5\xcd\xae\x37\x76\xa0\xa5\xe5\xa7\xb4\x9d\x42\x13\x5a\x12\xa7\xfe\xd9\x14\xea\xc4\x09\x90\xa4\x25\xd0\x85\x90\x98\x20\x5e\x80\x5b\x7b\xbc\xbe\x8a\x7d\xef\xea\xde\xeb\xa4\x5b\x55\x68\xbd\x9b\x9f\x56\x1b\x1a\xa9\x2a\x82\x87\x88\x52\x28\x2f\x48\x48\xce\x76\xdd\x3a\xfb\xe3\x45\x3c\x22\x84\xce\x48\xbc\x21\x01\xaa\x84\x84\xf2\x86\x90\x78\x05\x9d\x3b\xb3\x6b\x7b\xd7\x8b\xb6\x0f\x19\x29\x39\x33\xe7\x9c\xf9\xbe\xf3\x37\x77\xfd\xd7\xfb\x23\x3f\x01\x80\x83\x00\x3e\x03\x20\xd8\x03\x1c\x05\xf0\xc7\xfb\x10\xae\xce\x08\xf0\x71\x00\x77\x46\x80\x87\x00\xfc\x69\x04\x78\x12\xc0\x3f\x46\x80\x87\x01\x24\x23\xfa\xfc\x85\x88\x3e\x9f\x8f\x00\x8f\x02\x70\x8d\x7c\x3d\xa2\xef\xff\x36\x02\x24\x00\xfc\x3e\x02\x8c\x00\xa0\x08\x30\x0e\xe0\xcf\x11\xe0\x23\x00\xfe\x1e\x01\xf6\x03\xf8\xa7\x91\xc9\x28\xf0\x38\x80\x89\x28\x30\x0a\xe0\x42\x14\x78\x02\xc0\x0f\xa2\x9a\xe7\x4a\x14\x78\x0c\xc0\x2f\x8c\xdf\xef\xa2\x40\x12\xc0\x07\x51\xcd\xf3\xaf\x28\x30\x06\xe0\xbf\x51\xcd\x33\x16\x03\xa2\x00\x1e\x8c\x01\xf7\x03\x78\xd8\x9c\x0f\xc7\x80\x08\xf3\xc4\x74\x1c\xcf\x1a\xf9\x15\x23\xcf\x18\xf9\xed\x98\xc6\xf9\x5e\x4c\xe3\xca\x18\x10\xe7\x3c\xcd\xf9\x65\xe3\x77\xc5\xc8\x1b\x46\xbe\x69\xe4\x2d\xc3\xf7\x4e\x0c\xa8\xee\x01\x7e\x13\x03\x72\x00\x1e\x18\x05\x9e\x01\xf0\xfc\x28\xf0\x43\x00\x3f\x1a\x05\x4e\x00\xf8\xdb\x28\x50\x01\xf0\xd8\x18\x70\x1a\xc0\xb5\x31\xd3\x97\x31\x60\x02\xc0\x68\x1c\xf8\x1c\x80\x42\x5c\xf7\xc5\x8a\xeb\x3a\xbd\x14\x07\x3e\x0a\xa0\x19\xd7\x79\xbe\x11\xd7\xb8\xbf\x8e\x6b\xbc\xd8\x38\xf0\x7d\x00\xf5\x71\xe0\x11\xc6\x1b\x07\xbe\x0e\xe0\xee\x38\x70\x16\xc0\x91\xbd\x40\x91\xf9\xf6\xea\xf3\x5f\xf6\x02\x9f\x07\x70\x28\xa1\xfb\x52\x4c\xe8\x7a\xbf\x9c\xd0\x7d\xbd\x95\xd0\x75\xb8\x6d\xec\xab\x09\xcd\xff\x41\x42\xf3\xff\x3b\x01\x7c\x82\x79\x93\x5a\x3e\x6a\xe4\x33\x46\x7e\x33\xa9\xfb\x58\x49\xea\x78\xae\x25\x35\xce\x3b\x46\xff\x87\xa4\xae\xfb\x5d\x23\xff\x63\xe4\x7d\xfb\xb4\x4c\xee\xd3\x7c\x9f\xde\x07\xec\xe1\x39\x34\xb3\xcc\x33\xf9\x08\x7a\x8b\x6b\xff\x90\xd9\x87\xfe\xd0\xf8\x0f\x40\xe7\xc3\x33\xf9\x59\xe8\x5c\x3e\x65\xfc\x38\xef\x03\xd0\x73\xc5\x6b\xaf\x91\x5c\xf7\x4f\x02\x78\x0a\xc0\x3e\xf3\x6e\x36\x16\xc7\xce\xf3\x99\x30\xe7\x8f\x41\xbf\x83\x8d\x25\x8c\x7c\x10\x7a\xee\xb8\x86\xfc\xd4\xb8\x77\x3c\x27\x5c\x13\xae\xdb\x18\x06\x57\xcc\x48\xce\xf9\x89\x90\xa8\x2c\x7c\x59\x72\x9d\x72\x6f\xe7\xe3\x60\x4f\x7b\xb0\x4f\x7d\xb2\x6a\x39\x53\x52\x94\x6d\x7f\xba\x66\xcd\x88\xba\x5b\x96\xa2\x62\xd9\x35\x59\x16\x97\xed\xa0\x2a\xa4\xe7\xb9\x9e\xd8\x3f\xdc\xd1\x6f\x94\x4a\xd2\xdf\x66\x0b\xec\xfa\xee\x40\x42\xc7\x4d\x90\x86\xe7\x49\x27\x10\x65\x2b\x90\xc2\x72\xca\xda\xea\x3a\xa2\x2e\x03\xe9\x0d\x9a\x37\x4c\x65\x79\xc9\x2e\xc9\x10\xd9\x98\xeb\xd2\xf2\x1b\x9e\xac\x4b\x27\xf0\x71\xaa\x1f\x0a\xa7\xac\x19\x9c\x92\x7e\xc9\xb3\xa7\x03\xdb\x75\x70\x4a\x47\x81\xe7\x65\xb0\x8b\xfc\xfb\xbd\x76\x4e\x90\xbd\xaa\x6e\xcd\x2e\x5b\x33\xfe\x70\x8f\xaf\x19\x2b\xce\x38\x81\xf4\x2e\x59\x35\x51\x71\x3d\x61\x55\x02\xe9\x89\x69\x4f\xfa\xbe\x78\xd1\x2a\x5d\x14\x2f\x36\x82\xc0\x75\x06\x9d\x4a\x26\xc7\xc0\xf2\xec\x4a\x65\xd0\xe6\xb8\xc1\xff\xb5\x4f\xbb\x97\xa5\x77\x48\x47\xce\x15\xe1\x32\xe2\x05\xcb\x0f\xb4\x45\xb8\x95\xca\xc0\xd1\xc1\xa4\x75\x51\x6a\xb7\xc9\x5e\x4d\x31\xe9\x3a\x41\x55\xff\x5f\x9b\x11\x7e\x60\x05\xb6\x1f\xd8\x25\x1f\xe7\xa4\x2f\x03\x9c\xb7\x2e\x49\x9c\xaf\xba\x97\x45\x31\x63\x64\xd6\xc8\x9c\x91\x13\x5a\x5a\x75\xb7\xe1\x04\x7a\x1f\xb2\x84\xbb\x90\x5d\x6f\xc3\x9e\x15\x33\xe2\x69\xf1\xdd\x2a\x8a\x59\x23\x73\x46\x4e\x68\x79\xc1\xaa\x35\x24\xce\xc9\x69\xd7\x0b\x52\x93\xfe\x94\x5d\x4e\x7d\xb5\x31\xe5\xa7\x8a\x6e\x9e\x87\xe3\xcb\x17\xed\xaa\x55\x77\x0f\x7b\x8d\xf8\xd9\x6f\x15\x53\x27\x3d\x69\x71\xeb\x53\x3c\x18\x79\x91\x4d\x67\x9e\x4d\xa5\x73\xa9\xec\x17\x45\x36\x97\x3f\x72\xe4\x60\x3a\x97\x4e\xc7\xb9\x0a\xa9\xa2\x67\x39\x7e\xcd\x0a\x5c\x2f\x2f\xbe\x11\x62\x88\xc9\x86\x67\xd5\xdd\xb2\x2b\x8e\x0d\x00\x1f\x8f\xbf\x60\x39\x53\x0d\x6b\x4a\xa6\x8a\xd2\xaa\xe7\xc5\xe6\x39\x2f\xce\x35\x7c\xdf\xb6\x9c\xf8\xe4\x99\xc9\xd3\xa9\x0b\xd2\xf3\x6d\xd7\xc9\x8b\xcc\xe1\x74\xfc\xa4\xeb\x04\xd2\x09\x52\xc5\x99\x69\x99\x17\x81\x7c\x29\x78\x7a\xba\x66\xd9\xce\x51\x51\xaa\x5a\x9e\x2f\x83\xc2\x77\x8a\xcf\xa5\xbe\xd4\xf3\xe3\x78\x2a\xd2\x4b\x9d\x76\x4a\x6e\xd9\x76\xa6\xf2\x22\x7e\xb6\xd6\xf0\xac\x5a\xea\x39\xd7\xab\xfb\x79\xe1\x4c\x87\x47\xbf\x90\x3b\x2a\xf4\xb6\xe0\xec\xcf\xa4\x0b\x85\x8c\x38\x70\x40\xf0\x36\xfd\x78\x21\x93\x11\x27\x44\x5a\xe4\xc3\xf3\xf1\x42\x76\xc3\x74\xac\x30\xc1\xdb\x27\x43\xb7\x63\x99\xb4\x78\xe5\x15\x7d\xe5\x78\x21\x9b\x7e\x4a\x9c\x10\x19\x91\x17\xd9\xa3\xfc\x3d\x51\x4d\x6a\xd3\xb2\x9a\xa7\x35\x5a\xa2\xd6\x56\x8d\x5a\xd8\xaa\x09\xbf\x36\x5b\x2e\x6d\x55\xa9\x85\x6d\x2a\xd0\xcf\xe8\x7d\x5a\xa5\x36\xad\x85\xff\x3a\xd4\x16\x6a\x96\xda\xf4\x1e\x75\x68\x95\xba\xb4\x28\xa8\x13\xc2\x75\x68\x99\x5a\xea\x1a\x75\xa8\x23\xe8\x7d\x6a\xd1\x22\xb5\xd5\xac\x7a\x95\x3a\xb4\x42\x5d\xd5\x54\x37\x84\x6a\x0a\xea\x86\x9a\xdb\xb4\x4c\x5d\xba\xc3\x0f\x91\x7e\xa5\x9a\xb4\x4e\x6d\xf5\x2a\xad\x51\x97\xd1\xfa\xf8\xd4\x42\x1f\x9b\x5a\x18\xc2\x35\x2c\x40\xf6\x52\x73\x4c\x4f\x8b\xd4\x62\xfa\x7b\x1f\xe6\x56\xce\x1d\x82\xfd\xa5\x2e\xad\x7a\x4d\x07\xba\x44\x2d\x35\x47\x2d\xc1\xc1\x2c\x86\x99\xae\xaa\x9b\x82\xd6\xa8\x25\x54\x53\x5d\xa7\xb6\x9a\x53\xd7\x43\x84\x76\xff\xdd\x16\x3b\x6d\xde\x0d\xbd\xe7\x55\x53\xcd\xa9\x59\x0e\x97\x77\x9c\x56\x18\xf6\x16\xc2\x75\xea\x72\x38\x9c\x39\x47\x4b\x2b\x1c\xd4\x9b\xc3\xa2\x60\x35\xa7\x76\x03\xf4\x73\x5a\xa7\x8e\x6a\x52\x4b\xd7\x97\x4b\x3e\x90\x18\x3b\xbf\x45\x5d\x5a\x51\xf3\x1c\xf3\xbd\x19\x93\xed\x04\xf7\xa4\xcd\x43\x68\xd6\xd5\x6c\x58\xb1\x25\x56\xa8\xeb\xdc\x6e\x75\x55\x84\xc7\x36\xdd\xf9\x90\xf0\xdb\xb1\xf4\x1c\xac\xe9\x51\x1e\x48\x68\x68\x32\xeb\x8c\x4f\x2b\x7c\x6b\x8d\x5a\xf4\x5e\xd8\xbb\x0e\x0f\xc4\x32\x4f\x26\xad\xd3\xf2\x2e\xa1\xd4\x8f\x39\x03\x35\x4b\xef\xea\xe3\xdc\xe6\xa8\xb4\xe9\x5d\xea\xb2\xa2\xa5\x66\xa9\xa3\xae\x50\x6b\x77\xb1\xad\x71\xdb\x7b\x30\x1d\x75\xb5\x1f\x44\xb7\x87\x07\x7b\x9e\x56\xf9\x39\xef\x0e\x74\x95\xba\xea\x35\x4e\x2d\x9c\xeb\xce\xa1\xcd\x19\xd5\x1d\x0a\xa7\x36\x7c\x0b\x0c\xf8\xd6\x46\x75\x4c\x7b\xda\xdc\x84\x39\x5a\xa6\x15\xf5\x7a\xaf\xa7\x43\xfd\x16\xb7\x7b\x6d\x3e\x8c\xf5\xf0\x65\xf1\x9b\x5f\xa4\x2e\x2d\x99\x17\xd6\xd2\xe3\x32\xf0\x9e\xf8\xbd\xdc\xa2\xb6\x6a\xaa\x9b\xea\x5a\x6f\x7b\x9d\x9b\xa5\x6e\x8a\xf0\xa6\xee\x58\x98\x0d\x5f\x06\xbd\x4d\xb7\x99\x40\x35\xa9\xa3\xe6\x18\xe1\x6d\xea\xaa\xab\xe1\xa8\xac\x6d\xa8\x36\x99\xd4\x02\x53\xb3\x92\xff\xb8\x0f\xd7\x67\x77\xd0\xe7\x76\xd0\x4f\x0c\xd7\x6f\xb6\x6a\x7e\xb8\xdd\xd4\x7d\x27\xeb\x40\xe7\x76\xca\xa1\xef\x8b\x13\xfe\xca\xa0\x37\xf8\x9b\xa7\x7f\x69\x6c\xec\x73\x7d\xfb\x89\xde\x9e\x7e\x1a\x56\xb5\xd7\xb0\xff\x05\x00\x00\xff\xff\xde\x56\x25\x1d\x2b\x0f\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
