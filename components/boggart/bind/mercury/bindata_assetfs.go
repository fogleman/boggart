// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package mercury

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x93\xdb\xb6\x11\xfe\x7e\xbf\x62\x07\x73\xae\x4f\x49\xa8\xf7\xb8\xe9\x45\x52\x3e\xd4\xed\x4c\x66\xe2\x4e\xc6\xb9\xb6\xd3\x26\xe9\x0d\x24\x2e\x4f\x88\x49\x80\x06\x41\x9d\x5d\x8d\xfe\x7b\x06\x04\x49\x81\x7a\xa5\x78\xa2\x1d\xd9\xd4\x8c\xcf\xc2\xdb\x02\x78\xf6\xd9\x5d\x8a\x5c\x70\xb9\x04\x17\x3d\xc6\x11\xc8\x4c\x70\x85\x5c\x11\x58\xad\xae\x46\xd1\x4c\xb2\x50\x81\x7a\x1f\xe2\x98\xd0\x30\xf4\xd9\x8c\x2a\x26\x78\xe7\x37\xba\xa0\xa6\x91\x4c\xae\x00\x00\xbc\x98\xcf\x74\x0b\x2c\xa8\x1f\xe3\xdf\x85\x0c\xa8\xba\xe1\x2d\x58\x26\xad\xfa\x23\x51\xc5\x92\x03\xc7\x47\xf8\x9e\x2b\xbf\xfd\x8f\x38\x98\xa2\x4c\x7b\xb6\xda\x5e\x36\xe4\xdb\x64\xc4\xea\x6a\xd4\x31\x13\x4c\xae\x46\x2e\x5b\xc0\xcc\xa7\x51\x34\x26\x52\x3c\xa6\x33\xda\xb5\x33\xe1\x3b\x81\xeb\xf4\xfa\xa0\xbf\x45\x41\xf6\xed\x5d\xe4\xf4\xfa\x69\xff\xcd\x31\xef\xee\x43\xca\xd1\xb7\x5a\xb7\x7b\x64\x60\x14\xfb\xe4\xfd\xa4\xf0\x71\x4c\x14\x9d\xee\x92\x94\xf7\x8c\xfd\x4c\x20\xa7\x0b\xe0\x74\xe1\x28\x3a\x8d\x60\x4a\xe5\xbd\xfe\x42\xd6\x62\x7c\x16\xed\x9a\x2b\x97\xe4\xb3\xb4\x6f\x28\x31\x42\xae\x12\x5d\x90\xe5\x12\x98\x07\xf8\x16\xda\xd4\xa8\x80\x68\xe5\x65\x73\xea\xba\x05\xea\x4e\xc8\x5d\x58\xad\x26\x23\x0a\x73\x89\xde\x78\xcf\xb8\xb5\x66\x6f\x17\x82\xb9\x37\xdd\xd6\xb7\x7a\xac\x1f\x21\xac\x56\xcb\x25\xb4\x5f\xe3\xdb\x18\x23\xd5\xfe\xe7\xeb\x1f\xda\x3f\x52\x35\x37\xd5\x46\x38\x99\x68\xa1\xbd\x6f\x38\x90\xbf\xc6\x52\x22\x57\x10\x20\x8d\x62\x89\x01\x72\x15\x11\x68\xc3\x6a\x35\xea\xd0\xc9\xa8\xe3\xb3\x33\x6c\x34\x10\x5c\xcd\xfd\xf7\x55\xf7\x6b\x0d\xaf\xb2\xed\xef\x8c\x9c\x71\x2a\xe6\x4f\xd4\xf7\xc7\xbd\x5d\x58\xbc\x32\x1d\x20\xd2\x1b\x89\x14\x9b\x9d\x1f\x09\x97\x45\xa1\x4f\x2b\x23\x61\x0d\x7f\x0a\x12\xa9\x98\x5d\x18\xbc\xcc\x66\x38\xbe\xf1\x51\x27\xf6\xf7\xb4\x58\xd6\xa9\xe8\xd4\xd9\x6f\x9f\x85\x11\x1b\x76\x6a\x4b\xd0\x35\xe0\x51\x17\xc1\xc0\x05\x8c\x1f\x90\xa6\x3f\x07\x69\x74\x70\x64\xb2\x9e\x30\x9f\x1d\xdf\x29\x27\x88\x15\xba\xe0\x09\xae\x9c\xde\x00\x02\x67\xea\x0c\xba\x47\xe6\xb7\xd6\x21\xe9\x23\xdc\x14\xcd\xcd\xa5\x0a\x41\xb1\x00\x41\x70\x70\x71\xc1\x66\x08\xcf\x12\xba\x71\xe6\xe7\xff\x6e\x42\xc9\xb8\x02\x52\x70\xf0\xbf\xec\xf1\xf0\xbf\x90\x89\x2b\x66\xb1\xb6\xe0\xf6\xa3\x64\x0a\x6f\xf4\x24\x77\xe2\x27\x25\x19\x7f\xb8\x79\x4e\xe0\xa6\xad\x6b\xda\xc6\x97\x03\xe9\x77\xbb\x2f\x9c\x6e\xcf\xe9\xf6\xef\x7a\x5f\xdf\x76\x87\xb7\xdd\xaf\xff\xdb\xfd\xf3\x6d\xb7\x4b\x5a\x40\x9e\xb7\x5a\xb9\x67\x27\xad\x56\x29\xcc\x3a\xe1\xe4\xea\x78\x2f\xed\x40\xd1\xd2\xad\x8f\x90\xfc\x75\x22\x25\x59\x88\xae\xc6\x86\x9a\x7a\x57\x39\x12\xa3\x50\xf0\x48\xab\x9c\x8b\x47\x49\x43\x02\x91\x7a\xaf\x79\xf2\xc8\x5c\x35\xbf\xed\x75\xbb\xcf\x4a\x6a\x62\xa4\xe6\x48\xdd\xb2\x7d\x65\xb9\x8e\xa9\xe0\x0d\x27\x92\x99\x8f\x9a\x57\x94\x72\xd7\x83\x0e\xfc\xfb\x0c\x72\xfa\x67\x92\x33\x38\x93\x9c\x61\x25\x39\xa3\x4e\x59\x7d\x68\x99\x27\x68\x79\x2a\xdc\xf7\x27\xd8\x31\x7f\x40\xb8\x66\x5f\xc1\xb5\x0e\x11\x11\xdc\x8e\xa1\x6d\xbe\x95\x30\x0f\x33\xa1\x34\x7e\x89\x72\x17\x6e\xf0\x6d\x2a\xa8\x9d\x90\x06\xae\x8d\x7d\x26\x85\x96\xdd\xfc\x1f\xa4\x32\x6b\xd5\xdf\x5b\x56\xf8\x88\xe2\xd9\x0c\xa3\xc8\x8a\x1f\x27\x68\xc6\xcd\x35\x63\x2f\xa4\x6d\x5c\x06\x5c\xeb\x69\x96\xcb\xc2\x2a\x12\xad\x95\x84\x37\x9b\xa3\x74\xe7\x64\x40\xa9\x8b\xd9\x0d\x4f\x67\x5f\xcd\xae\x17\x7c\xd7\x83\xd5\xca\xf2\x63\x27\xad\xc3\xe8\xe9\x41\xad\x85\xdd\x49\x0d\x70\xb7\xac\xae\x8b\x9b\x0a\x29\xcf\x34\xe6\xd3\x29\xfa\x90\xfc\x75\x5c\x4d\x29\x49\x26\x67\xdd\xf5\x4b\xf4\x15\x2d\x6e\x1d\x3a\xe7\x05\xd6\x60\x51\x98\x62\xd4\xd1\x9b\x3c\x19\xe4\xe4\x8a\x85\x79\xe0\xd7\x8c\x74\x66\x27\x0d\xd4\xb0\x76\x2c\xf5\x40\xcd\xb8\x27\x1a\x9c\x8b\xce\xc3\x6c\xe0\xcc\xce\x03\x3d\x1a\xfb\xaa\x7e\xa8\xab\xe2\x90\xe0\x59\x3e\x54\x5c\x4e\x60\xe9\x9f\x33\xb0\xf4\x2f\x25\xb0\xf4\xeb\xb7\xc2\x7e\xad\x81\xa5\x16\xa4\x6b\x09\x2c\x97\x09\xb5\x15\x58\x6a\x81\xfa\xfc\x81\xe5\x32\x71\xb6\x9d\xc7\xc5\x04\x96\x5d\x50\x37\x81\x65\x03\xa4\xc1\x39\x03\xcb\xe0\x52\x02\xcb\xa0\x7e\x2b\x1c\xd4\x1a\x58\x6a\x41\xba\x96\xc0\x72\x99\x50\x5b\x81\xa5\x16\xa8\xcf\x1f\x58\x2e\x13\x67\xdb\x79\x5c\x4c\x60\xd9\x05\x75\x13\x58\x36\x40\x1a\x9e\x33\xb0\x0c\x2f\x25\xb0\x0c\xeb\xb7\xc2\x61\xad\x81\xa5\x16\xa4\x6b\x09\x2c\x97\x09\xb5\x15\x58\x6a\x81\xfa\xfc\x81\xe5\x32\x71\xb6\x9d\xc7\xc5\x04\x96\x5d\x50\xff\xd1\x02\x4b\xf9\x27\x63\xa7\xad\x62\xd4\x29\xf9\x6c\x6c\xd4\x49\x9e\xd5\x1e\x7d\x18\x6f\x59\xdc\xae\x74\x86\xe3\xf3\x78\x42\x06\xc0\xdc\xf1\x7a\x54\xca\x03\xdd\xe0\xcc\x85\x64\xff\x17\x5c\x51\x1f\x92\xb2\xa1\x85\x8f\x9e\x22\xc9\x03\x65\x47\x89\x87\x07\x1f\xc7\x64\x41\x7d\xe6\x52\x25\x24\x81\x00\xd5\x5c\xb8\x63\x12\x8a\x83\xf9\x3c\x85\x55\x58\x99\x0d\xc9\x3c\x0f\x52\xc4\x61\xc9\xc1\x89\x00\xc3\xda\x3c\x21\x8a\x2b\x29\x7c\x27\xad\x34\xe9\x51\xc3\x2c\x3b\x6a\x68\x25\x47\xe9\x5d\x8d\x49\x20\x5c\xbc\x57\x3d\x2b\x5f\xe3\xa7\xb9\x78\x84\xbb\x9e\x79\xa0\x5a\xb4\x0f\x89\x6f\x63\x26\xd1\x25\x93\x2f\x4e\x65\xed\xa8\x93\xac\xe8\x84\x01\xdb\x59\x5e\x2f\xb2\x6d\xbc\xd8\x99\xe3\x55\x4a\x2a\xe3\x61\x9c\xd9\xf2\x6c\x8e\xb3\x37\x53\xf1\x2e\xd7\xfb\x6f\x91\x13\x3d\x32\x35\x9b\x13\xe0\x34\xc0\x35\x3a\x09\x4b\xf2\x42\x9e\x08\x92\x66\x53\xb4\xd3\x96\x16\x10\x25\x63\x34\xa9\x38\x5a\x36\xba\xb9\x89\x40\xe7\x14\xac\x5c\xb6\x28\x6b\xac\xe5\xbb\xfe\x11\x88\xd6\xdf\x22\x5a\xbf\x21\x1a\xae\xd1\xb1\x88\xd6\xdf\x4b\xb4\x7e\x43\xb4\xa3\x44\x1b\x6c\x11\x6d\xd0\x10\x0d\xd7\xe8\x58\x44\x1b\xec\x25\xda\xa0\x21\xda\x51\xa2\x0d\xb7\x88\x36\x6c\x88\x86\x6b\x74\x2c\xa2\x0d\xf7\x12\x6d\xd8\x10\xed\x18\xd1\x68\x20\x62\xae\x36\xc9\x96\xd6\x36\x84\x2b\xa2\xb4\x26\x5d\x56\xb1\x9b\x78\xa6\xb5\x21\xdf\x31\xf2\x85\xe2\x11\xe5\x26\xf7\x4c\x65\x43\xbd\x02\x46\x6b\xe6\xa5\xe5\xdd\xc4\x4b\x1a\x1b\xde\x1d\x8d\xae\x2c\xc0\x4d\xda\x25\x75\x0d\xeb\x6c\x84\xac\x18\x9b\x14\xf7\x44\x59\x16\x60\x43\xb9\x63\x94\x73\xa9\xda\xa2\x5c\x52\xd7\x50\xce\x46\x68\x4d\x39\x53\xdc\xa2\x9c\xae\x6e\xd8\x76\x80\x6d\xda\x1c\x8b\x77\xde\xbe\xe7\x0a\xe5\xc2\xdc\x6f\x04\x2e\x14\xcc\xd2\xb3\x3d\x8a\x4a\xe6\x79\x9f\x01\x03\x79\x72\x34\x34\x63\x5b\x86\x50\xc2\xb5\xbc\x90\xdc\x5a\x4f\x8e\xb2\xb5\xd3\x3a\x58\xad\x08\x84\x54\x29\x94\x7c\x4c\xfe\xf7\xb3\xf3\xe5\xaf\xdf\xfd\xdc\x75\xfe\xf2\xeb\x17\xd7\xa4\x61\x59\xb0\x71\xdb\xad\xc0\xb2\x86\x61\xeb\xdb\x6e\x79\x61\x8b\x61\xfd\x86\x61\xc7\x18\x36\xd8\xc7\xb0\xe4\x4a\xf7\x2b\x73\x32\x91\x72\xf7\x73\x89\xa5\xbb\x78\x36\xb0\x79\x36\xd8\xc1\xb3\x41\xc3\xb3\x63\x3c\x1b\xee\xe3\x19\xf5\x14\x4a\x08\x25\x46\x11\x4c\xe9\xec\x0d\x4c\x63\xa5\x04\xff\x4c\xa9\x36\xb4\xa9\x36\xdc\x41\xb5\xe1\x47\xa3\xda\xc9\x5c\xf3\xf9\x7d\x24\x7c\xe6\x92\xc9\x07\x25\x6b\x39\xc5\x65\xc4\x15\x9e\x17\xa1\x72\x06\xa7\x2a\xd2\xb0\x34\xd5\xa4\xc4\x08\x55\x7e\xf5\x3d\x55\x1c\xa6\x8a\x9b\x8c\x8f\x4c\x83\xa6\xcb\xda\x06\x5e\x9b\x21\xe6\xf0\xab\x11\xf6\x94\x15\x44\xf1\x34\x60\xdb\x4b\xc8\xf2\x7b\xb2\x55\x44\x74\x51\xf8\x91\xa4\x8b\x15\xd7\x70\x7e\x5f\x35\xea\x68\x85\x97\x4b\x1f\x28\x93\x26\xf0\x49\x1e\x2f\xcf\xf6\x13\xb8\x8e\x66\xb0\x7d\x81\xf8\x6a\xfd\xe2\x8e\x8a\xa7\xb3\x0f\x08\xff\x97\x26\xd0\x93\x0f\x7d\xbf\x44\x93\x3c\xc3\x32\x07\x7f\x51\x07\xbf\xe1\x54\x7d\x01\x14\x8f\x56\x93\x97\x54\x99\xab\xa9\xf5\xcd\xb0\xd3\x32\x47\x21\x4f\xc2\x4c\x7e\xa8\x6b\x31\x6d\x94\x52\xc8\x4a\x39\x54\xca\x2d\xbc\xdb\x22\xcb\xbb\xd4\xd1\xa6\x28\xbd\xfd\xb7\x74\x8e\x4a\xab\x2d\x6b\xb1\x3b\xd6\x77\xda\x5c\xf9\xc0\x2a\xa9\x5f\xc5\x77\x64\x14\x30\x48\xbc\x67\x89\xb7\x65\xc0\x6a\xf5\xbc\x6a\x6a\x6d\xf6\x31\xda\xe5\x68\x4d\xef\x56\x4f\x93\x5b\x23\xa2\xa4\xe0\x0f\x3b\xd5\x5d\x59\x68\x9e\x0d\x7c\xd6\xa5\x66\x92\x7b\xdf\xf0\x1f\xfd\x58\x52\x1f\xc8\x97\xcf\x5c\x88\x70\x26\xb8\x4b\xec\x42\x44\xb6\x66\xbe\x2e\xbc\x35\x65\xb3\xf5\x09\xab\x7a\x02\x8d\x0f\x6c\xcc\xde\xd7\x47\xdb\xd6\x69\x09\x89\x9b\x9f\x51\xc7\x50\xab\x32\xdb\x2b\xce\x5f\xcd\x13\x9d\x3e\x57\xc1\x7f\x17\x5e\xda\x93\xf9\x71\x10\x1c\x02\x54\xd9\x33\xb5\x13\x8f\x02\x94\x0e\x6b\xf0\xe4\xe8\xf3\x8a\xbe\x41\xeb\x77\x7c\xe5\xc8\x13\xd0\x37\xe6\xf6\x71\x3d\xa1\x67\x43\xfc\xc7\x8b\x3d\xc5\xc5\xec\x0b\x02\xa4\xf2\xd2\x9e\x48\xc6\x27\xa9\xf3\x43\xf2\xee\x07\x1a\x29\x73\x3f\x09\x44\x76\xb3\xb2\x32\xf9\x7c\x1a\x29\xf3\x18\xf6\x5e\x78\xde\x7d\xbd\x57\x41\x07\x27\xfb\x78\xc4\x3c\xd3\xf5\xcd\xbe\xdd\x55\xbc\xdc\xf9\x90\x46\x70\x19\x64\xe7\x67\xe4\x3a\xff\x80\x54\xdf\x9c\xeb\x93\x62\x3a\x6f\x88\x0e\x75\x9c\xea\x38\xbc\xbf\x03\xf7\x80\xf6\x34\xed\xa8\xde\xa8\xb2\x8a\xe9\xd7\xf4\xbf\x7c\x39\xbf\x07\x00\x00\xff\xff\x18\x96\x72\xc7\x27\x57\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5b\x6f\x5c\x57\x15\xfe\x42\xec\x71\x3d\xb6\xc7\x69\x29\xe1\x56\xe8\x2e\x90\x90\x92\x4c\x32\x17\x17\xca\x24\x4e\x5a\x72\xa9\x1a\x62\x1a\x25\x43\x78\x28\x48\x1c\xcf\x6c\xdb\xa3\xcc\x9c\x33\x3a\xe7\x4c\x52\x43\x25\xec\x71\xdb\xa4\x72\x88\xa1\x02\x91\xa2\x96\x0a\x28\x3c\x00\x12\x53\x27\xd3\x4c\x7d\x19\x0b\x21\x78\x41\xa0\xb5\x91\x10\x0f\x95\xb8\x48\x48\x08\xf8\x01\x95\xe0\x05\xad\xbd\x77\xe6\xe2\x8c\x21\x2f\x39\x52\xbc\xd6\x5e\x7b\x9d\x6f\x7f\x6b\xad\x6f\x9f\xcc\x9f\xee\xeb\xfb\x36\x00\x8c\x01\x78\x00\xc0\xda\x36\xe0\x09\x00\x5f\xdc\x0e\xfd\x3c\xd3\x07\xdc\x0f\x60\xb6\x0f\xd8\x09\xe0\x6a\x1f\xd0\x0f\xe0\x47\x7d\x40\x04\xc0\x4f\xfb\x80\x3d\x00\x96\xfb\x80\x0f\x02\x78\xdb\xae\xdf\xb1\x6b\xd1\x0f\x7c\x18\xc0\x21\x6b\x9f\xee\x37\x78\x5f\xe9\x07\x46\x00\x2c\xf5\x03\xf7\x00\x78\xb5\x1f\x18\x02\xf0\xe3\x7e\x60\x80\xf1\x6c\x7c\xa5\x1f\xd8\x05\xe0\x97\xd6\xfe\xa3\x1f\xf8\x18\x80\xd1\x88\xc1\x1f\x8b\x00\x0f\x02\x38\x1d\x01\x1e\x02\x50\x8e\x98\xf7\x5f\x8a\x00\x7d\x00\xbe\x6b\xed\x6b\x11\x20\x06\xe0\xf5\x88\x39\xf7\x7a\x04\x18\x04\xf0\x8b\x88\xa9\xe7\x37\x11\x80\x4b\x56\x11\xc3\xe3\x0f\x36\xfe\xd7\x08\x70\x1f\x80\xbf\x47\x0c\x9f\x7f\x5b\xfc\xed\x03\x66\x7f\x68\xc0\xe0\xdf\x3b\x60\xf0\x76\x0e\x98\x7d\x61\xed\x1e\x6b\x13\xd6\x3e\x3a\x60\xf0\x1f\xb3\xf9\xa7\x06\x80\x28\x80\x73\x76\xed\xd8\xbc\xf3\xd6\x06\xd6\x7e\xd5\xda\x05\x7b\xee\xe2\x00\x30\xb3\x0d\xf8\xe6\x00\x90\x66\x5e\xf7\x00\x9f\x04\xb0\x7f\x10\x18\x06\x20\xad\xf5\x07\x81\x2f\x03\xf8\xda\x20\x70\x04\xc0\x5f\x06\x81\x29\xe6\x17\x05\x8e\x03\xb8\x14\x05\x0e\x02\xf8\x6d\xd4\x68\x60\x70\x08\xf8\x28\x80\xc3\x43\x66\xde\x93\x43\xa6\x6f\xb3\x43\xc0\x0e\x00\x97\x87\x4c\x3f\x5e\xb6\xf1\x9f\x0d\x19\xfc\xd5\x21\x83\xfb\xc0\x30\x70\x92\x79\x0e\x03\xa7\x01\xfc\x6e\x18\xc8\x02\x78\x70\xc4\xac\xc3\x11\xc3\xeb\x57\x23\xa6\x9f\xbf\xb7\xf6\xed\x11\xe0\xe3\x00\xfe\x36\x62\xe6\x3c\x1c\x33\xf3\x4c\xc5\xcc\x7e\x36\x66\xf4\xf6\xa5\x98\xd1\x4f\x3e\x66\xfa\x36\x1b\x33\xf9\xcf\xc5\x0c\xee\x4f\x62\x86\xd7\xcd\x98\xe1\xfb\xeb\x98\xe1\xfb\x47\xbb\xfe\x67\x0c\x78\x2f\x80\xff\x58\xfb\xee\x51\x63\xf7\x5a\x7b\x74\xd4\xe8\xe9\xe9\x51\xe0\x43\xdc\xf7\x51\x83\xff\xb2\x8d\x6f\x8c\x9a\xf9\xfd\xd9\xda\x7f\x59\xfb\x8e\xb5\xdb\x77\x98\x73\x46\x77\x00\xdb\x60\x34\xff\x1e\x18\x6c\x7e\x98\x33\xd7\xc5\xda\xe5\x7b\xc2\x5a\x7c\x17\xda\x0f\xf7\x80\xcf\xd1\x58\x30\xb5\xf3\xc3\x1a\xe3\xfa\xb9\xb6\x94\x8d\x31\xbf\x41\xeb\xb3\x26\xe2\x1d\x38\x1f\xe1\xda\x00\x3c\x0c\xe0\x13\x5c\x1f\x6b\x10\x66\xb6\x69\x9b\x33\xda\x91\x7f\xa0\xc3\xe7\x7a\xf9\x8e\xed\x07\xb0\x0f\xa6\x7f\xfc\xec\xb4\x76\x87\xfd\x5e\xdc\x6f\xd7\xbb\x61\xb4\xc9\xfd\xff\x00\x80\x24\x80\xf7\xd9\x3d\xfe\xa6\x08\xeb\xdf\x0b\xe0\xfd\xad\x43\xf2\x22\x90\x39\xcf\xcd\xb7\xbd\x00\x7b\xdb\xd1\xbd\x1d\xe1\xc7\xcb\x7e\xa1\x88\xc7\x2b\xd3\x95\x20\xc4\xd1\x19\xc7\x9d\x96\x22\x5f\x08\xca\x45\x67\x56\x94\xbc\xbc\x14\x53\x4e\xa1\x28\xf3\xe2\x62\x21\x9c\x11\xd2\xf7\x3d\x5f\xec\x0a\x7a\x26\x06\x95\x5c\x4e\x06\xb7\xed\x85\x85\xd2\x9d\x81\xe8\xc4\x16\x48\xc5\xf7\xa5\x1b\x8a\xbc\x13\x4a\xe1\xb8\x79\xb3\xeb\xb9\xa2\x24\x43\xe9\x77\x6f\xdf\xda\xca\xcb\x0b\x85\x9c\xd4\xc8\x76\xbb\x24\x9d\xa0\xe2\xcb\x92\x74\xc3\x00\xc7\x3a\xa1\x70\x4c\xe6\x64\x69\x52\xfa\x38\x26\x83\x9c\x5f\x28\x87\x05\xcf\xc5\x31\x43\x05\x27\xe4\xa4\x5f\x71\xfc\x59\x3c\x21\xc3\x3b\xe8\x46\x67\xd6\xd6\xe5\x3e\xe9\x86\xd2\xbf\xe0\x14\xc5\x94\xe7\x0b\x67\x2a\x94\xbe\x28\xfb\x32\x08\xc4\xa4\x93\x3b\x2f\x26\x2b\x61\xe8\xb9\xdd\x49\x39\x5b\x46\xe8\xf8\x85\xa9\xa9\xee\x3d\xd7\x0b\xff\xe7\x7e\xd9\xbb\x28\xfd\x7d\x86\x0e\x17\xcd\x9d\xc2\x49\xc7\xd5\x65\x9d\xac\x14\xf9\x8f\x2b\x71\xca\x09\x42\x93\x2b\xbc\xa9\xa9\xae\xa5\x8b\x09\xe7\xbc\x34\x2f\x4e\x38\x7e\x6e\x06\x13\xce\x2c\x26\xda\x2d\xc5\x84\xe7\x86\x33\xe6\x6f\x71\x56\x04\xa1\x13\x16\x82\xb0\x90\x0b\xf0\x39\xef\x82\x69\xee\x53\xb9\xd0\x63\x7b\x46\x06\x32\xc4\x59\xe7\x82\xc4\x59\x59\x0e\xcd\xe6\xd9\x19\xef\xa2\xc8\x26\xad\x4d\x59\x9b\xb6\x76\xcc\x58\xa7\xe4\x55\xdc\xd0\xf8\x9a\x8a\xf6\x34\x45\xe3\xea\x69\x66\x93\xe2\x80\xf8\xc2\x0c\xb2\x29\x6b\xd3\xd6\x8e\x19\x7b\xce\x29\x56\x24\xce\xc8\xb2\xe7\x87\xf1\x89\x60\xba\x90\x8f\x7f\xa6\x32\x1d\xc4\xb3\x5e\x86\x65\xf3\xd8\xf9\xc2\x8c\x53\xf2\xf6\xfb\x95\xe8\xe9\xa7\xb2\xf1\xa3\xbe\x74\x58\x0f\x71\x96\x4c\x46\xa4\x12\xc9\x4f\xc7\x13\xe9\x78\xea\x53\x22\x95\xce\x3c\xf2\xc8\xde\x44\x3a\x91\x88\x72\xab\xe2\x59\xdf\x71\x83\xa2\x13\x7a\x7e\x46\x7c\x56\x63\x88\x89\x8a\xef\x94\xbc\xbc\x27\x0e\x75\x01\x1f\x8e\x9e\x72\xdc\xe9\x8a\x33\x2d\xe3\x59\xe9\x94\x32\xa2\xb5\xce\x88\x33\x95\x20\x28\x38\x6e\x74\xe2\xc9\x89\xe3\xf1\x73\xd2\x0f\x0a\x9e\x9b\x11\xc9\xfd\x89\xe8\x51\xcf\x0d\xa5\x1b\xc6\xb3\xb3\x65\x99\x11\xa1\x7c\x26\x3c\x50\x2e\x3a\x05\xf7\xa0\xc8\xcd\x38\x7e\x20\xc3\xf1\xcf\x67\x4f\xc4\x1f\x6d\xe7\x31\x9f\x29\xe9\xc7\x8f\xbb\x39\x2f\x5f\x70\xa7\x33\x22\x7a\xba\x58\xf1\x9d\x62\xfc\x84\xe7\x97\x82\x8c\x70\xcb\x7a\x19\x8c\xa7\x0f\x0a\xe3\x8e\xbb\xbb\x92\x89\xf1\xf1\xa4\xd8\xbd\x5b\xb0\x9b\x78\x68\x3c\x99\x14\x47\x44\x42\x64\xf4\xfa\xf0\x78\xea\xd6\xd6\xa1\xf1\x31\x76\xf7\xe8\xb4\x43\xc9\x84\x78\xf6\x59\xf3\xca\xe1\xf1\x54\xe2\x61\x71\x44\x24\x45\x46\xa4\x0e\xf2\x67\x47\xcd\x53\x9d\x56\xd4\x02\xad\xd3\x0d\xaa\x6d\x8e\xa8\xc5\xcd\x11\xfd\x51\xda\xf4\xd2\xe6\x90\x5a\xbc\x2d\x04\xfa\x06\x6d\xa8\x39\xaa\xd3\xaa\xba\xc2\x8b\x65\xba\xae\x16\xd4\xbc\xaa\x82\xae\xd1\x4d\x5a\xa3\x3a\xad\xeb\x7f\x0d\xaa\x0b\x9d\xf8\x26\x35\x68\x8d\x9a\xb4\x2c\xa8\xa1\x0f\x6a\xd0\x0a\xd5\xd4\x0b\xd4\xa0\x86\xa0\x9b\x54\xa3\x65\xaa\xab\x39\x75\x99\x1a\xb4\x4a\x4d\x35\xaf\xae\x08\x35\x2f\xa8\xa9\x23\x6f\xd0\x0a\x35\xe9\x2d\xbe\xd0\xf4\x43\x35\x4f\x1b\x54\x57\x97\x69\x9d\x9a\x8c\xd6\x71\x9e\x5a\xec\x38\x4d\x2d\xf6\x38\xab\x17\x41\xce\x52\x55\x3e\x9e\x96\xa9\xc6\xc7\xdf\x7d\x9a\x9b\xcf\xdc\x82\xec\x0f\x4c\xd3\xd5\x8b\x86\xe8\x0d\xaa\xa9\x2a\xd5\x04\x93\x59\xd6\x95\xae\xa9\x25\x41\xeb\x54\x13\x6a\x5e\x5d\xa2\xba\xaa\xaa\x4b\x1a\xa1\xde\xf9\x6e\x8d\x93\x5a\xef\xea\x6c\x3d\x2d\x35\xc7\x74\xd9\xe3\xb2\x34\xed\x4d\x07\x6e\x50\x93\xe9\x70\xe5\xcc\x96\x56\x99\xd4\xb7\x7a\xb1\xe0\x70\x5d\xe7\xbe\xa1\xe6\x58\x15\xdf\xa3\x0d\x6a\xa8\x79\xaa\x99\x2e\x73\xe3\xbb\xca\xe3\x57\x5e\xa7\xba\x46\xa8\x19\x21\xbd\x46\x4d\x5a\x55\x0b\x5c\xc8\xdd\xd1\xce\xed\x07\xdc\x95\xd9\x5f\xeb\xc6\xec\x89\xb7\xc1\x08\xb4\xca\x14\xd6\xa9\x46\x6f\xea\x9e\x36\x78\x50\x2b\xac\x18\xda\xa0\x15\xa3\xd6\xff\x0b\xa5\xbe\xce\xaa\x52\x73\x74\xdd\x2c\xab\xad\x11\xd6\xe9\x3a\x35\x39\x50\x53\x73\xd4\x50\xcf\x51\xed\xce\xb8\xad\x73\xe7\xdb\x30\x0d\xf5\x7c\x27\x88\xe9\x10\x0b\x6e\x81\xd6\xf8\x9a\xdd\x19\xe8\x1a\x35\xd5\x8b\x5c\x9a\xd6\x5b\x63\x5f\x4b\x3b\x66\x16\x5a\x4d\x5a\xa3\x0c\xf8\x73\x5a\x67\x28\xa3\xa4\x6b\xea\xaa\xd1\x07\x3b\xeb\x56\x28\xa6\x79\x74\x43\xdf\xa8\x3a\x4f\xa1\x4a\x2b\xb4\xaa\xae\xb6\x87\xdb\x33\x6f\xf9\xf6\xac\x96\x9e\x37\xf4\x85\xe0\xab\xba\x4c\x4d\xba\x61\x2f\x46\x0d\xf4\x8a\xa6\x52\xd5\x0e\xbd\x65\x74\xd4\x75\x2d\x98\xd4\x2b\x54\x57\xf3\x6a\x49\xbd\xd0\x76\x2f\xf1\x6c\xd5\x92\xd0\x48\x66\xc0\xba\x78\x7e\x19\xf4\x2a\x35\xd5\x52\xfb\xba\xac\xa8\x6a\x7b\xf9\x7d\x76\x34\xfb\x86\xaa\x9a\x40\x53\x3d\xaf\xaf\xca\x7a\x3b\xc4\xdf\x92\x8e\x97\x5a\xb4\xd4\xa2\xee\x5e\x55\x5d\xe1\xff\xea\x7b\xc7\x53\x5b\xc4\xd3\x5b\xc4\xc7\x7a\xc7\x5b\x32\x58\xe8\xbd\x6f\x67\xba\xd5\x6e\x97\x2a\xb6\xaa\xa1\xe3\x2b\xa3\x7f\x73\xd0\x4b\xfc\x9d\x33\xbf\x3b\x6e\xf9\xe9\x0e\x7f\xac\xed\xd3\x77\xf4\x08\xda\xd3\xfe\x6f\x00\x00\x00\xff\xff\x48\x0a\xc3\x20\x20\x10\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
