// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package xmeye

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\x4d\x8f\xdb\x36\x10\x86\xef\xf9\x15\x03\x36\x45\x76\x81\xea\xc3\x8b\xa6\x2d\x5c\xd9\xbd\xb4\x3d\xa5\xc0\x22\xdd\x5c\x7a\x09\xc6\xe2\x58\x66\x41\x93\x0c\x49\xd9\x6b\x18\xfe\xef\x05\x45\xcb\x56\xb6\xb2\xfc\xb1\xc8\xc5\x26\xc8\x97\xef\xcc\x90\x0f\x07\xda\x6e\x81\xd3\x5c\x28\x02\x56\x6a\xe5\x49\x79\x06\xbb\xdd\x9b\x82\x8b\x15\x94\x12\x9d\x9b\x30\x83\x15\x25\x5e\x78\x49\x6c\xfa\x06\x00\xa0\xbb\x38\xd7\x76\x99\x54\x56\xd7\x06\x4c\x2d\x65\x62\x45\xb5\xf0\x7b\xdd\x4b\xad\x50\xa6\xf6\x51\xdc\x51\x34\x2a\x89\x33\x92\xad\x6e\xe6\x55\xaf\xaa\x51\x22\x2c\x2c\xcd\x27\xec\x37\x2c\xbd\xd0\x6a\x52\x6a\x35\x17\x95\x4b\xe8\xd9\x68\xeb\x59\xc7\x03\x82\x8f\x28\x75\x1c\xb8\xba\x2c\xc9\xb9\x38\x5e\xf6\x38\x37\xee\xe2\x50\x17\x3a\x98\x63\x52\xea\x8a\x41\x53\xfb\x84\x6d\xb7\x20\x46\xbf\x28\x60\x7f\x34\xa1\x20\x46\xae\x2d\x86\x3c\x18\xa4\xb0\xdb\xb1\x69\x91\x89\x9e\xa4\x33\xbc\xa0\x12\xa9\xbf\x59\x19\x0b\x42\xee\xc8\x9f\x2c\x25\x84\xbe\xae\x82\x22\x6b\xae\xac\x73\xd1\x19\x17\xab\x3d\x1f\x71\xb8\xff\xfb\x8a\xa5\x52\x12\xda\xb9\x78\x0e\x61\xfe\xbf\x6a\xf5\xba\x07\xb1\x52\xcb\x64\xc9\x93\xd1\x03\x84\x91\x5b\xb6\xa3\x67\x97\x8c\x1e\x4e\xa0\xf6\xfc\xd9\xa0\x22\xf9\x12\xb3\xaf\x14\x2d\xef\x3d\xd5\x06\x9d\xd5\xe1\xa4\x3c\xce\xfa\x9c\x0e\xca\xfa\x40\xad\xc2\x15\x28\x5c\x25\x1e\x67\x0e\x66\x68\x3f\x87\x01\x3b\xda\x48\xe1\xfa\x62\x1d\x9c\xa4\xd8\x6b\x8d\x25\x47\xca\x47\xac\xc2\x4d\xcd\x81\xbe\x40\x1a\x29\x01\x16\xde\x67\x1b\x33\xcc\xad\x28\x88\x48\x71\xd8\xed\xa6\x07\xa8\xfa\xf7\xfd\x8b\x2b\x74\xa5\x15\xc6\x8f\x57\x5a\xf0\xbb\xfc\xfe\xd7\xb0\x57\x3a\x82\xdd\x6e\xbb\x85\xf4\x23\x7d\xa9\xc9\xf9\xf4\xd3\xc7\x0f\xe9\x23\xfa\x45\x9c\x8e\xe6\x6c\x7a\xc0\xe6\xd1\xd2\x4a\xd0\x3a\x22\x13\xd8\x28\x32\xd9\x43\xcd\xd5\xb5\x45\x0e\x6f\xab\xaf\xdd\x7b\x4b\x8d\xdd\x27\xd8\x57\xef\x87\xc3\xfb\x18\x2e\xb6\xc8\x6a\x79\x62\xa5\x83\x9e\xc7\x59\x72\x1a\xbe\x21\x08\xbb\x0e\x61\x06\xe6\xc8\x09\xe2\x29\x81\x50\x03\x6e\xa7\xcf\xeb\x74\x02\x01\x5a\xea\x84\x94\x04\xcd\x6f\xe2\xbc\x15\x86\x38\x70\xf4\x18\xe7\xb9\x4f\x2c\x39\xa3\x95\x0b\x99\x28\xbd\xb6\x68\x18\x38\xbf\x09\xe9\xaf\x05\xf7\x8b\xf1\x28\xcf\xbf\x1f\x48\x30\x46\x0c\x8d\x6a\x58\x13\x75\xf6\xbc\x68\x6f\x78\xbc\xc4\xef\xda\x1b\xf4\x8b\x1b\x76\x3f\x89\x25\xbd\xca\xe0\x2f\x72\x0e\xab\xd7\x79\x3c\x6d\xcc\xeb\x0c\x3e\x39\xb2\xd7\x18\x14\xd9\xb9\xa3\x0e\x3e\x67\x2f\xad\xf0\x33\xcd\x37\xe7\xc3\x6d\xb7\x60\x51\x55\x04\x6f\xc5\x0f\xf0\x56\xea\x0a\xc6\x13\x48\x03\xa9\x43\xa0\x1e\xa3\x5c\x8c\x05\x0f\x47\x12\x02\xa4\x8f\xda\x89\xe6\x41\x34\x47\x72\x01\x7c\xad\x41\x11\x9b\x0c\xf8\x8d\xa1\x09\x43\x63\xa4\x28\x9b\xbe\x96\x1d\x3b\x10\x9b\x72\x5d\xd6\x4b\x52\x3e\x5d\x5b\xe1\xe9\x8e\xa3\xa7\x27\xfd\xb7\xb7\x42\x55\x77\xef\xda\x1c\x02\x5b\xe9\x9f\xda\x2e\xd1\x03\x7b\xc8\xf3\x9f\x92\x7c\x94\xe4\x0f\x4f\xa3\xf7\xe3\xfc\xc7\x71\xfe\xfe\x9f\xfc\xe7\x71\x9e\x87\xc7\xfa\xee\xfe\xbe\xc8\xa2\xf7\xf4\xba\x74\xdb\x58\xbf\xa3\xc7\xab\x6b\x3d\x24\xba\x31\x74\xf3\xe6\xc0\xde\xc5\x9b\xcf\x83\x07\x91\x97\xd8\xab\xcf\x21\x3a\x8c\x5f\x91\x35\x5d\x6c\xb0\x7b\x9e\x89\xd3\xf9\xfc\xb9\x70\xa9\x67\xfa\xc5\xd4\xc9\x4f\xaa\x63\x3a\xff\x05\x00\x00\xff\xff\xb1\x22\x3c\xb8\xbf\x0b\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x4f\xcd\x6b\x13\x5f\x14\x3d\x49\xfa\xfb\xb5\x46\x44\x29\x82\x5d\x74\xf1\x8a\xb4\xf8\xc1\xab\x33\x89\x15\x9d\x76\x5a\xb1\xb6\x20\x36\x58\x4a\xea\xfe\xd1\xbc\x4e\x07\x93\x99\xf0\xde\xa4\x56\xe8\x22\xad\x22\x08\xc5\x82\xe0\xca\x45\xd1\xb5\x42\xb5\x04\x43\x3f\xa6\x2b\xf7\xf7\xfd\x03\xa2\x6b\xb7\xe2\x5a\x26\x1f\x16\x57\xde\xc5\xbb\xe7\xdc\x7b\xcf\xb9\xf7\x7d\xed\xef\x79\x0d\x00\xa7\x00\x0c\x02\x28\x01\x38\x03\xe0\x3d\xda\xf1\x0d\xc0\x79\x00\xdf\x01\x9c\x06\xf0\x0b\x40\x0f\x80\x74\x0a\xe8\x05\xd0\xdb\xc9\x67\x53\xed\xfa\x85\x4e\x1e\xec\xe4\xa1\x14\xb0\x92\x02\x46\x52\xc0\x18\x80\xed\x34\x30\x0c\xe0\x4b\x1a\xe8\x03\xf0\x23\x0d\xf4\x03\xf8\x99\x06\xce\x25\x7e\x19\x20\x0b\x60\x20\x03\xfc\x0f\xe0\x62\x06\x18\x00\x70\x25\x03\xa4\xd0\xde\x95\xe9\xdc\x9b\xc6\x49\x24\xbb\xfe\xeb\xe0\x44\xd7\xd7\x6d\xcc\xac\x55\x43\x15\xb1\xa5\x30\x58\xf6\xbd\x9a\x12\x91\x1f\x06\xdd\x62\x39\xf4\x34\xe6\x92\xa7\x20\xb5\x16\x9e\xc4\xbc\x92\xab\xbe\x7c\x8c\xa2\x5f\x91\x28\x3e\xa9\x4a\x2c\x6a\xa9\xb0\x20\x93\x79\x5e\xd0\x9e\x5f\xe2\x77\x6a\x9e\xe6\xc5\xd0\x61\x25\xb9\x7a\xfb\x91\xbf\x22\x2a\xe1\xa8\xaa\x65\xe7\x1f\x14\xf9\xb4\x92\xad\x05\xfc\xae\x88\xa4\xc3\x72\x96\x7d\x8b\x5b\x79\x6e\xdf\x60\xb9\xbc\x33\x36\x76\xd5\xca\x5b\x56\x76\x4e\xe8\x88\x17\x95\x08\x74\x59\x44\xa1\x72\xd8\xfd\x96\x07\x2b\xd4\x94\xa8\x84\xa5\x90\x4d\xfc\x65\x3c\x99\x9d\x13\x81\x57\x13\x9e\xe4\x45\x29\x2a\x0e\xfb\xc3\x1d\xb6\x50\xd3\xda\x17\x41\xb6\x70\xaf\x30\xc3\x1f\x4a\xa5\xfd\x30\x70\x98\x3d\x6a\x65\xa7\xc3\x20\x92\x41\xc4\x93\x3f\x38\x2c\x92\x6b\xd1\xb5\x6a\x59\xf8\xc1\x38\x5b\x5a\x11\x4a\xcb\xc8\x5d\x2c\xce\xf2\x9b\x27\x73\xc9\x3d\xcb\x52\xf1\x99\x60\x29\x2c\xf9\x81\xe7\xb0\xec\x7c\xb9\xa6\x44\x99\xcf\x86\xaa\xa2\x1d\x16\x54\x5b\x54\xbb\xf9\x71\xd6\x86\x6e\x30\x6c\x5b\xae\x6b\xb3\x91\x11\x96\x40\x6b\xc8\xb5\x6d\x36\xc5\x2c\xe6\xb4\xf8\xa4\x9b\xeb\xb6\x26\xdc\xeb\x09\xbc\xd4\x1a\x9b\xb0\x2d\xb6\xbe\xde\x96\x4c\xba\x39\xeb\x32\x9b\x62\x36\x73\x58\x6e\x1c\xf4\x81\xf6\xcd\x06\x1d\x53\x6c\xea\x66\x93\x9a\xa6\x4e\x31\x7d\xa2\x5d\xb3\x69\xb6\x18\xed\x53\x4c\x47\xe6\x19\x35\x69\xcf\x3c\x35\x75\xda\x35\xcf\xa9\x69\x5e\xfe\x43\x75\x40\x31\xed\x51\x13\xf4\xa6\x0b\xde\x52\x4c\x31\x7d\x34\x2f\xa8\x41\x47\xd4\xa4\x06\x68\x27\xd1\x98\x0d\x3a\xa4\xd8\x6c\x9a\x3a\xe8\x95\xa9\x53\x83\x0e\xcd\x36\xe8\x1d\x35\xe9\x18\xb4\x43\x31\x1d\x98\x2d\xfa\xdc\x35\xa7\x46\xc2\xf1\x3b\x00\x00\xff\xff\xcb\xdd\x95\x63\x43\x03\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
