// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package xmeye

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x6f\xdb\xb6\xb7\x7f\xbf\x4f\xc1\xab\x7f\xee\x6c\x0f\x91\xec\x64\x0f\xf7\xc2\x8b\x3b\x74\x4d\xb7\x0e\x68\xda\xa2\x49\x37\x74\xc3\x10\xd0\xd2\xb1\xcd\x56\x22\x35\x92\x72\xe2\x05\xf9\xee\x7f\x90\x94\x64\xc9\x96\x64\x49\xb6\x13\x6f\x88\x5f\xb4\x8a\x44\xfe\xce\x03\x0f\xcf\xe1\xc3\x21\xef\xee\x90\x07\x13\x42\x01\x59\x2e\xa3\x12\xa8\xb4\xd0\xfd\xfd\x17\x67\x1e\x99\x23\xd7\xc7\x42\x8c\xac\x10\x4f\xc1\x96\x44\xfa\x60\x3d\xfb\x02\x21\x84\xb2\x1f\x27\x8c\x07\xf6\x94\xb3\x28\x44\x61\xe4\xfb\x36\x27\xd3\x99\x8c\xcb\xad\x96\x25\x34\x8c\xa4\x29\x9c\x29\xa1\x4b\xf9\x78\x0c\x7e\x52\x6e\x2c\x69\x61\x29\x5d\x12\xa3\x19\x87\xc9\xc8\xfa\x01\xbb\x92\x30\x3a\x72\x19\x9d\x90\xa9\xb0\xe1\x36\x64\x5c\x5a\x19\x0c\xa4\x70\x88\xcb\xcc\x83\x88\x5c\x17\x84\x30\xcf\x41\x01\xb2\x46\x27\xa9\x5c\x58\xa0\x09\xb6\x5d\x36\xb5\x90\x96\x7d\x64\xdd\xdd\x21\x72\xf2\xff\x14\x59\x2f\x35\x29\x64\x28\x47\x1c\x2b\x3e\x2c\xe4\xa0\xfb\x7b\xeb\xd9\x59\x9f\x14\x30\xdd\xc7\x35\x24\xf1\xd9\xde\xc4\x98\x01\xf6\x04\xc8\x52\x51\x14\xe9\x66\x12\x9c\xf5\x75\x93\x65\x1a\xba\xef\x91\x79\x6c\x1f\xe6\x31\xfe\x2f\x67\x4b\xae\x0f\x98\x4f\xc8\xad\x22\xb3\xfe\x95\xb3\x9b\x02\x13\x73\x99\x6f\x07\x9e\x7d\x72\x8a\xd4\x93\x08\x92\xa7\x5b\x61\x9f\x9c\x96\x98\xda\xed\x75\x88\x29\xf8\xab\x66\x96\x2b\x91\xd8\x7b\x81\xb4\xaa\x1c\x67\x4a\x53\x12\x8f\x8b\x90\xd2\x92\x51\x6a\xb5\x14\xcf\x11\xc5\x73\x5b\xe2\xb1\x40\x63\xcc\xaf\xd5\x83\xb5\x84\xf1\x89\x28\xa2\x95\x22\xf9\x24\x2e\x1b\x72\x10\x40\xa5\x31\x2b\xd5\x52\x13\x04\x7f\x21\xc7\x58\x09\xb2\x54\xff\x4c\x68\xaa\x77\x73\x50\x85\x80\x7a\xe8\xfe\xfe\x59\x6a\x54\xc5\xf5\x3e\xe1\x39\x16\x2e\x27\xa1\x1c\xce\x19\xf1\xba\x83\xde\xf7\xaa\xae\x2f\x00\xdd\xdf\xdf\xdd\x21\xe7\x3d\xfc\x15\x81\x90\xce\x87\xf7\xaf\x9d\x77\x58\xce\xcc\x6b\x03\x6e\x3d\x4b\xcd\xe6\x72\x21\x24\x04\xc6\x62\x94\x69\x9c\xf5\xfd\x02\xa3\x69\x2c\x9a\x31\xc3\x76\xe2\x25\x75\xdb\x88\x98\xed\x81\x45\xe2\xbe\x4e\xbb\xc7\x0e\x85\x9d\x10\x1f\x5a\x4b\x9b\x56\xde\x46\x5c\x0d\x52\x24\xef\x4f\x06\x7d\xc7\x02\x63\xd7\x65\x91\x89\x2f\x6d\x44\xce\x54\xdf\x46\xe8\x18\xa6\x48\xec\xe7\x09\x85\xcd\x82\x9f\xf5\x23\xbf\xe4\x4b\xc6\xc7\x48\x3c\xb6\xcb\xbd\x4c\xae\xc6\x8a\xb7\xc9\x22\xa8\x37\x68\x82\x3d\x40\x46\x5d\x88\xd0\x0a\xb4\xf2\x9e\x51\xce\x80\xf2\x4e\x90\x21\xe9\x03\xd2\xff\xda\x42\x72\x12\x82\x87\x3c\x2c\xb1\x79\xef\x49\x9b\x83\x08\x19\x15\x8a\x13\xca\x6e\x38\x0e\x2d\x24\xe4\x42\xb1\x7f\x43\x3c\x39\x1b\x9e\x0c\x06\xff\x5b\xc1\xa0\xa1\xa8\x22\x52\x75\x19\x53\x8e\x6f\x2e\x14\x03\x2e\xdb\xf1\x3f\x49\x0b\xca\x59\x8b\xda\x57\x24\x80\xad\x00\x2e\x40\x08\x3c\xdd\x0e\xe3\x6a\x11\x6e\x07\xf0\x41\x00\x6f\x02\x70\xd6\xdf\xa4\x6a\x85\xb3\xb1\xd1\xce\xe4\x98\x79\x8b\xcd\xe4\xee\xee\x10\xc7\x74\x0a\xe8\x88\x1c\xa3\x23\x9f\x4d\xd1\x70\x84\x1c\x65\xa9\x55\x86\xba\xa4\x52\xdb\x2c\x3c\xa5\x12\x45\xc0\x79\xc7\x04\xd1\x1d\x42\xab\xa4\x86\xf1\x25\x00\x67\xc6\xd5\x20\xb9\x08\x61\x64\xe1\x30\xf4\x89\xab\x7d\x5c\x7f\xe9\x87\xac\x67\x1e\x73\xa3\x00\xa8\x74\x6e\x38\x91\xd0\xf5\xb0\x84\x2b\x76\x29\x39\xa1\xd3\x6e\x27\xe1\x41\xd9\x96\xf3\x13\xe3\x01\x96\xc8\x3a\x1d\x0c\xbe\xb3\x07\x27\xf6\xe0\xf4\xea\xe4\xdb\xe1\xe0\x9b\xe1\xe0\xdb\xdf\x07\xff\x37\x1c\x0c\x54\x67\xed\xf4\x7a\x67\x7d\x83\xfd\xac\x19\xbb\x09\xad\x73\x2c\x71\x63\x59\x53\x46\x17\x21\xb4\xae\xac\x6c\xaf\x76\xe5\xcd\x86\x87\x8c\xbd\x18\x77\xbd\xc9\x44\xab\xcd\xef\xac\xaf\xbd\x58\xa5\xf7\xd4\x61\xa4\x2c\xdc\x56\x3b\xf1\xd8\x83\xde\x80\xef\xa7\x3e\x91\xcd\x81\x4f\x7c\x76\x33\x44\x38\x92\x6c\x93\x5f\x54\xd3\xa9\xdc\xd4\x6a\xc6\x38\xf9\x9b\x51\x89\xfd\x64\x28\xa9\x5e\x5b\x28\x00\x39\x63\xde\xc8\x9a\xaa\x51\x7d\x1c\xda\xac\x92\xd0\x67\x21\xe2\x8d\x8c\x0c\xb6\xa9\x4d\xd9\x1c\xfb\x44\xd9\x68\x8d\x06\xd2\xd3\xb6\xd8\xfa\x67\xc4\xf3\x80\x5a\x68\x8e\xfd\x08\x46\x89\x5e\x28\x0e\xc0\x04\x73\x35\x11\xea\x6f\x87\x99\xc0\x4d\x38\x0b\x76\x06\x26\x59\x3d\xa8\xf5\x69\xc7\x37\x1b\x9a\x2c\xf9\xa5\x9e\xf7\x1c\x4b\x30\xce\xcd\xf8\xdf\x7a\xdd\x67\x42\xc0\x57\x53\xb4\x7a\xc4\xd6\x79\xa5\x92\x33\xbf\x74\xd6\xdc\x10\x47\x34\x84\x58\x85\x31\x13\xfd\x90\x43\xa8\x3a\x6d\xf9\xb4\xbf\x36\xb6\x08\x31\x4d\xc7\x8c\x9e\x67\x33\x9a\x45\xb5\xb1\xe7\x31\x6a\x3d\xcb\x4e\x7b\xf5\xe4\x1d\xfb\x40\x3d\xcc\xcd\x9c\xf6\xac\xaf\x50\x5a\x32\x90\x35\x31\x09\xb7\x32\xdb\xa5\x54\x37\xb2\x72\x9d\x36\x56\x63\x6a\x85\xaa\x5f\xaa\x52\xd7\xca\xa6\x73\xfe\xdf\x19\x9c\x38\x83\x53\xa4\xfd\xbf\x1e\x18\xdb\x28\x2d\x2c\x59\x65\xd1\x5a\x06\xbd\x26\xc8\x72\x96\xbe\xa7\x2a\x0d\x8a\x9f\xf5\xeb\x5b\x7d\x4d\xd8\x82\x0e\x7c\xda\xb4\x03\xbf\x98\x61\xaa\xc7\xe0\x4f\xbd\x77\xa5\xf7\xe6\xc7\xf9\xa8\xc6\x40\xbf\x94\x9e\x00\x1f\x5c\xa9\x7b\x91\x9b\xe8\xdb\xb8\xea\xf4\xcf\x82\x1e\x85\x4c\xb5\x53\x0b\x71\xf8\x2b\x22\x1c\xbc\x91\x95\x3c\xb5\xe4\x24\x33\x12\xf5\x8e\xd1\x91\x5e\x20\xd3\x83\xd1\x98\x8f\x5a\x03\xd2\x52\x31\x59\xa8\x07\x10\x4b\x3f\x70\x44\xf4\xa4\x33\x9d\xa5\x1d\x25\x74\xe2\x2f\xb1\x84\x4a\xb0\xe4\x29\x33\x3d\x56\x00\x86\x43\x35\xbc\x32\xe0\xad\xc5\xae\x31\xa0\x2a\x95\xab\x6f\x98\x7b\x72\x40\x6b\xc5\x76\xe0\x80\x5e\xce\x81\x9a\x60\xf3\xe4\x83\x1e\xc8\x07\x81\x52\xb9\x6d\x54\x6e\xdc\x50\xf6\xcd\xc3\x78\x22\xb4\xee\x30\xbe\xca\xac\x83\x69\x86\xae\x15\x43\xc8\xfa\xca\xaa\xe3\x2a\xe2\x55\x2d\xdf\x4f\x16\x02\xb6\x71\x18\x05\xdc\x3d\x2f\xe1\xee\x79\x23\xee\x30\x0f\xf6\xc4\xdf\x45\x09\x7f\x17\x0d\xf8\xbb\x60\x1a\xd1\x03\x09\xae\xdc\x13\x9f\xef\x4b\xf8\x7c\xdf\x80\xcf\x9f\x81\x02\xc7\xfb\x6a\xe9\x57\x25\x1c\xbe\x6a\xa2\x49\x4c\xa3\xdd\x30\xf8\x14\x7d\x4a\x8b\xb5\x8f\x3e\x5f\xd2\xb1\x08\xbf\x7f\x0a\x35\xdb\x4f\x56\xc7\x91\x94\x8c\xc6\x93\x45\x11\x8d\x03\xb2\xbe\x9f\x1b\x6f\xe3\x66\xb7\xd4\x66\xec\x26\xe9\x1c\x06\xe1\xc9\xbc\x57\xe0\x18\x0f\xaa\x96\xf6\x2a\x21\xfe\x6d\x7b\x1c\x6f\xf0\x96\xbb\x14\x3f\xc2\x94\x50\x24\xb7\xdd\xec\x78\x49\xbd\xed\x41\x2e\xc9\xdf\xdb\x01\x3c\xd7\x4b\x8f\xe2\x1f\xb3\xe1\x31\x21\xf1\x24\x53\xaf\x20\xed\x65\xcb\x43\x21\x3b\x3f\x11\x1f\x94\xa5\x3c\xd6\x9e\x87\x66\x42\x5b\xda\x43\xec\x7c\xec\x92\xe9\x97\xd4\x7b\xa0\xcd\x9a\x59\x14\x60\x7a\x3d\x5e\x48\x10\x99\x56\x7b\x0d\x74\xaa\x17\xef\x1b\xe1\xa5\xfe\x0d\x6e\xa5\xed\x02\x95\xc0\x1b\x44\xb1\x6c\x54\x4c\x73\xb0\x50\xfa\x64\xdf\x36\x0d\xb5\xd9\xdd\xfc\xa3\xaa\x4d\x79\x8f\xdd\x50\x9f\x61\xef\x4b\x3d\xf7\x2a\x32\xdf\xb2\x08\x9a\x66\x47\xe5\x97\x7f\x75\xd6\x93\xc2\xb0\x13\xe8\xf5\xdc\xa7\xf3\xf4\xcb\x51\x9a\xf8\x54\x98\xa9\x55\x2a\x5e\x93\x60\xf8\xaf\xd9\x0b\xcb\xe4\x61\x6c\xf0\x8c\x0f\x1d\x71\xd1\xde\xa3\x6e\xd3\x5d\xf5\x35\x80\x9f\xcd\x1a\xc6\x16\x08\x2f\x58\x10\xc0\x32\x49\xa5\x15\xc6\x7b\x10\xc0\xe7\xe0\x1d\x5e\xcc\x45\x75\xe3\x2e\x6a\x1d\x7b\x23\x01\x5c\xc7\x5e\xf5\xb0\x9f\xd8\xab\x90\x9d\x56\x71\x37\xad\xad\x0d\xa5\x7d\xf5\x0b\x08\x58\x9b\xda\x64\x12\x03\x24\x26\x62\x12\xaa\x4c\x8b\x7f\x04\x61\x7c\x65\x2e\xd9\x2a\x1e\x8f\xb2\xe5\x27\xed\x9c\x1e\x28\x6e\x3d\xbc\x63\x45\x75\x9c\x2b\x6a\xe2\x60\xab\xd2\x0a\x74\x42\x40\x76\xe3\x3f\xd9\xeb\xff\x61\x99\x03\x10\x32\x11\x6f\x48\x0a\x90\x92\xd0\xa9\xb0\xb4\x6f\xb5\x25\x9b\x4e\x55\xcd\x78\xb3\x9f\x6d\x52\x6a\x91\xcb\x3e\x6c\xd7\x9c\xf0\x1a\x78\xb6\xcb\x7c\xfb\x24\x33\xa1\x7e\x1b\x2e\xf3\xb2\x5b\xba\xb8\x5f\xb1\x1f\x35\x9a\x98\x3c\x92\x83\x43\x69\xde\x9f\x23\x74\x66\xee\x35\xa1\x13\x56\x7b\xe7\xa0\xae\xbe\x51\xc6\x4f\x98\x79\x1b\x70\x82\x7d\x44\xa3\x60\x9c\x89\x8b\x35\xbb\x7d\x06\x2d\xcb\xb5\x63\x40\xdf\x34\x74\x5f\xb5\x14\x8f\xb6\x92\xf6\x43\x98\x9b\xe8\x6e\x29\xe6\x39\xcc\x89\x0b\xef\x23\x3d\x33\x42\xf7\xf7\xcb\xed\x9f\x80\xd0\x48\x2e\xf3\x6f\x0f\x49\x05\x97\x6c\x22\x6f\x30\x07\x34\x07\x2e\xb2\xbd\x6b\xdb\x36\x67\x13\xf9\x1b\xe6\xf0\xab\x81\x3d\x38\xb9\x5f\x61\xee\x29\xb9\x77\x25\xaf\xc2\x53\xf2\x1e\xac\xa0\xbb\x6e\xe0\x44\xe0\x43\x6d\xe0\x97\xd4\xe5\x8b\x50\xee\x5a\xec\x18\xf6\x50\xa5\xfe\x31\x22\xfe\xca\xf2\x5d\x43\x81\x77\xb3\xe4\x92\xd3\x99\x66\x6a\xef\x6b\x2f\x0f\x12\x2f\x94\xa0\x87\xa6\x5e\xcd\x15\xfe\x37\xe8\x57\x6f\x1d\x23\x42\x91\x9b\x4d\xd8\xda\xbe\xd3\x6a\xdc\x5f\x68\x9c\x06\x76\x70\x9d\xd6\x88\xcd\x22\xb9\x17\xb9\xdf\x46\xf2\x50\x05\xbf\xc2\xfe\xe7\x3d\x34\xb7\x82\x3d\xdc\xd6\xd6\x42\xef\xa1\xb1\x15\xee\x01\xb7\xf5\xaf\xc4\x03\xb6\x87\xc6\xd6\xb8\x87\xdb\xda\x46\xec\x3d\x34\xb7\x06\x3e\xe0\xf6\x7e\x1e\x79\x64\x1f\xed\xad\x71\x0f\xb7\xbd\xcf\xc9\x74\xd7\x12\x9f\x93\xe9\xa1\x4a\xfb\xf2\x56\x72\xbc\x6b\x79\x35\xe8\x7e\x25\x5e\xae\x0b\x36\x59\x89\x51\xe3\xbe\x6b\x37\xe2\x1c\xa8\xdc\xd7\x52\x0c\xe2\xec\x46\x84\x98\x8e\xac\x53\xab\xe4\x04\x63\x43\xf5\x36\xdb\xdf\x5b\x49\x37\xba\x15\xb5\x8f\xcb\xe4\x60\xd6\x4f\x57\x14\x9e\xa6\x88\x8f\xf2\x90\x00\xec\x58\xaf\xb9\x13\x16\x59\x85\x97\x9e\x9c\x18\x0e\xbe\xb3\xd2\x23\x51\x79\x28\x0e\xd8\x63\xd4\x5f\x34\x3d\x57\xd1\x38\x85\xe6\x00\xfa\xe4\xa3\x34\x73\xad\xab\x40\x6a\xa3\x35\x36\x9a\x1d\x18\x4b\xab\x33\x37\x9a\xdb\xec\x09\xa6\xec\xd1\xa5\xb1\xac\x3a\xcc\xbd\x11\x36\xce\x35\x5b\xbd\x2d\x84\x4e\x98\x15\xab\xc6\x94\xc8\xd8\x3b\x65\x37\x19\x5f\xf1\x66\xfb\xac\x33\xcd\x48\xcb\xc3\x55\x0f\x91\xb1\xb6\x9f\x80\xb0\x61\xe3\x26\x07\xdc\x7e\xf4\xff\x88\x9e\xfc\xeb\xa7\x2e\xde\x8c\xdb\xa7\x2e\x5e\x52\xef\x9f\xda\xc5\x1f\x72\x2f\x38\x49\x6f\xad\xda\x2c\xd6\xfb\x7b\x92\x71\x3c\x85\x8d\x1b\x7c\xf9\xab\x8e\xb2\xb7\x77\x95\xd6\x98\x9d\x66\x36\x7a\x0c\x99\xc4\x6e\x66\xa7\x1b\xea\x56\x5d\xf1\x54\x2e\x72\xe3\x8c\xdd\xc3\xcd\xcc\xad\xd8\x88\x7e\x87\xb9\x5c\xdd\x23\x6d\x97\xb5\x13\x60\x42\x91\x08\xb1\xbb\xe5\xe5\x22\x4c\x62\xbf\x39\xce\xa3\x65\xcc\x8a\x63\x74\x14\xdb\xbd\x4e\xdc\xa9\xdb\x07\x8a\xd1\xc2\x63\x74\x14\x62\x2e\xcd\x65\x20\xc3\x51\x8a\xed\xbc\x4b\xdf\xee\x31\xb0\xe7\xa8\xbd\xd1\x56\xd1\x76\x1e\x9c\xcb\x1c\x4d\x45\x72\x8c\x9d\x5c\xaa\xe6\x75\x3e\x10\x2a\xbf\x3e\xdd\x31\x01\x6d\x3f\xad\xf1\xf7\xe1\x83\x1f\x32\x25\x72\xc3\x4a\x40\xec\xa7\xeb\x9c\x1e\xde\xd2\x47\xc7\x8b\x1e\xe2\xc9\x49\xef\xc0\x49\xbf\x58\x59\x95\x6a\x77\x73\x94\x6a\xc1\xad\x0e\x65\x10\xc9\xf5\x6d\x12\x5b\x85\x09\x97\xf1\x46\xa9\x9d\x8f\xe6\xd8\xdd\x63\x74\x94\x1c\x7f\x6f\x7a\xe4\xbe\x71\x52\x66\x0c\xee\xb4\xf0\xb9\xab\x10\x57\xe9\x11\xfc\xb6\x08\x71\x43\xe7\xf2\x7e\xc6\x44\x8a\xbe\x00\x97\xd1\x38\x25\xbd\x55\xf6\x66\x42\xc1\x98\x41\x36\x45\x93\xeb\x37\x84\x4e\x5b\x65\x6a\x1e\x5e\x6e\xfa\x66\x47\xbc\x81\x95\x0a\xdf\x56\xf2\xa9\xe0\xf5\xca\xab\xd2\x6b\x50\x33\x1c\x67\xee\xdc\x55\xbd\x2a\xcd\xa4\x37\x2d\xc8\x38\xea\xae\xdf\x3d\xd5\xcb\xbf\xb4\x7a\x59\xc1\xee\xee\x90\x90\x58\x12\xf7\xd5\xd5\xc5\x6b\xd4\x35\xcf\x1f\xde\xbf\x46\x56\xdf\xc3\x62\x36\x66\x98\x7b\x7d\x2c\x04\x48\xd1\x9f\x03\xf5\x18\x17\xfd\x31\x63\x52\x48\x8e\x43\x7d\x7f\x8d\xee\x90\x21\x71\x3f\x03\xef\xbb\x42\xf4\x57\xde\x39\x01\xa1\x8e\x2b\x84\x85\x26\xd8\x17\xd0\xcb\x70\x1c\x0b\x55\x2c\xde\x27\xb1\x22\x5c\xf5\xa5\x5a\x6d\xe4\x08\x58\x00\x54\xf6\x3f\x25\x4f\x9a\xd5\x4f\x6b\x9c\xee\x5e\x4d\x9f\x8a\xb5\x94\x27\xbd\xb4\x8b\x5a\x99\x1c\x39\xcb\x3a\xea\x26\x89\x1d\x3d\x87\x03\xf6\x16\xdd\x49\x44\x8d\xee\xba\x3d\x74\xb7\x66\x9c\x47\xdd\xce\x7f\x96\x37\x12\x75\x7a\xce\x0a\x7b\xdd\xf5\x2a\xea\x27\x49\x00\xef\x74\x81\x5f\xa8\xcb\x41\xd1\x1b\xa2\xef\x06\xc7\x85\x85\x03\x42\xcf\xb1\x84\x21\x32\xca\xee\xf6\x1c\x11\x8d\x25\xc7\xae\xec\x7e\x7b\x8c\x3a\x0b\xc0\xbc\xd3\x2b\xa9\x8a\x6f\x57\xaa\x02\xf5\xde\x4e\xba\x1d\x0f\x2f\xca\xea\x28\x3d\x2d\x7e\xd4\x8b\x16\x2f\x54\xe8\x06\x31\x44\x9d\xcc\xe9\x9f\x4e\x71\x35\x9f\xb9\xd8\x87\x61\x81\x8e\x92\xdf\x84\x70\x21\xcf\xf1\x62\x88\x4e\x8a\x21\x74\x21\xbd\x66\x34\x44\x9d\x8f\x1f\x3f\x7e\x74\x2e\x2e\x9c\xf3\x73\xf4\xea\xd5\x30\x08\x3a\x85\x55\xee\x8b\x91\x74\x0b\x88\x2a\x66\x3a\x99\x99\x99\x87\x17\x26\x74\x77\x86\xe8\x8f\x44\x53\xc7\xa9\xce\xfe\x2c\xe7\xb6\x93\xcd\xd3\x97\xc0\x0b\x91\x96\xcd\x75\x72\x8c\x94\xe6\x45\x27\x83\x5e\xf4\xb5\x16\xc5\xab\x19\x11\xe8\x06\xe0\x73\x11\x45\x89\xb9\x54\xed\x4c\x04\xfb\x0d\xe0\x73\x8e\x60\x6c\x02\xe9\xa7\x5a\xd4\x5e\x63\x21\x4b\xa9\x65\x25\x48\x61\xab\x99\x28\xa9\xd3\x8a\x37\xad\x89\x80\x51\x39\xab\x52\x85\x2e\x50\xa4\x88\xf8\x43\x7d\x35\x94\x92\xca\xca\x14\xa3\x56\xd1\x2f\x2c\xdf\x82\x29\x2d\xbf\x72\x03\x55\xe2\xc7\x6e\x62\x4d\x7a\xf3\xbe\xbe\xf0\x65\x74\xb2\xb2\x18\xcc\x0a\xda\x45\xa5\xf3\xfc\xd4\xed\xed\xf7\xbd\xef\xd7\x87\x23\x4b\xaf\xac\xdc\x49\x47\xd3\x0b\x88\xcc\xf8\x72\x28\x72\xe6\xea\x37\xc7\x1c\x79\x21\x1a\x15\x7a\x76\xac\x1c\x67\xce\xbf\x77\x8a\xc8\xaf\xb3\x60\xae\x38\xf8\x23\x73\xc9\xe2\x9f\x9d\x9e\x33\xc7\x7e\x37\x56\x89\x17\x1a\x6d\x29\x6f\xdd\x73\x8c\x13\xec\x6a\x1f\x68\x5f\x5c\xd8\xe7\xe7\x7f\x5c\xfd\xa9\xbd\xe0\x50\x88\xdf\x3b\xbd\x5e\xf1\x9d\x11\x15\x34\x25\x2b\xa0\x08\xd4\x6b\x4d\xef\x7e\xe5\x5d\xf6\xef\x34\x77\x31\x1d\xaf\xac\x6c\xdc\x3c\x8d\x39\xb2\xaa\x4b\xad\x52\x80\xbc\x22\x01\x74\x65\xe1\x48\xc3\xc1\x9f\xf0\x6d\xd9\x78\x62\x11\xc2\x10\x75\xde\xbd\xbd\xbc\x2a\x09\xcf\x11\xf7\x87\xda\x40\x92\xe3\x4a\x9d\x9e\x13\x72\x16\x76\x3b\x66\x68\x58\x36\x1a\x50\x56\x5f\x15\x47\xd5\x48\x66\x88\x64\x93\xe0\x1c\x8f\x23\x86\x4b\xc1\xbb\xbc\xac\x3b\xaa\x1f\x99\xa0\x2e\x77\x38\x88\xc8\x97\x68\x34\x1a\xa1\xce\x04\x13\x1f\xbc\x4e\x55\x25\xf5\xa3\x70\x83\xde\xbd\x61\x92\x4c\x16\x25\x7a\xcb\x4b\x22\xd5\xf8\xa5\xf3\x92\x73\xc6\x4b\xb4\x98\x2b\x0f\xb7\x72\x88\xb8\x13\x98\xab\xa7\x6b\x54\x30\x8d\x04\x35\xf1\x67\xc4\x83\xa1\x31\xb1\xcd\x85\x85\x5c\xf8\x84\x4e\xd5\x48\x2d\x31\xe4\xaf\x8b\x47\x4c\xc9\x6f\xb5\x03\xe7\xbe\xa5\x87\x90\xbb\xa9\x7c\xe8\x7f\x94\xe6\x23\x6a\xa6\x19\xfb\x52\xfe\x65\xe5\x18\x33\x57\xa3\xa5\xfa\xab\x47\xb1\xd9\xdf\x63\x36\x40\x71\x7f\xda\xec\x85\xbf\xd8\x7a\x36\xa3\x3a\x74\xed\x79\x8c\x20\x74\xea\x83\x0a\x22\x66\x36\x33\x44\x92\x47\x25\xda\xda\xdf\xbc\xa2\x6c\xca\x30\x14\xa2\x64\xd6\xb0\xae\xc8\xe3\xd4\x1b\x75\x75\x20\x2e\x33\xef\xc4\x47\xc7\x51\xd4\x94\xcd\x05\xd0\x55\x0e\x7a\xbd\xfa\x83\x96\x64\x27\xb9\xd3\x73\x5c\x9f\xb8\x9f\x37\xb4\x57\x96\xa1\x8e\xae\x56\x40\xaa\x41\x98\x5e\x5d\x56\xf8\x6f\x00\x00\x00\xff\xff\xa1\x3c\xed\x94\xa9\x68\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xdf\x4b\xe4\x56\x14\xfe\x62\x6c\x6b\xa7\x3f\x68\xa5\x0f\xa5\xf4\xe1\xf6\x41\x69\x1f\x62\x27\xb6\x05\x89\x46\x4b\xad\x42\xa9\xd3\x8a\x1d\x85\x3e\x86\x99\x6b\x4c\x3b\x93\x0c\xb9\x89\x55\xb0\x74\x1c\xa5\xb6\x20\x2d\x08\xcb\xc2\x2e\xec\x32\x3e\xef\xc2\xec\xca\x60\xf0\x47\xfc\x17\xce\x7d\xda\xb7\x85\x7d\xdb\x87\xfd\x23\x96\x9b\x64\x5c\x16\x16\xf6\x42\x72\xbf\x73\xce\x77\xbe\xf3\x9d\x90\xc7\xa3\xc3\x37\x00\xe0\x3d\x00\x9f\x02\xd8\x07\xf0\x21\x80\x67\xc8\x4f\x59\x03\x46\x01\x98\x1a\xf0\x11\x80\xef\x35\xe0\x1d\x00\xbf\x6a\xc0\x30\x00\xae\x01\x6f\x01\xf8\x4d\x03\x74\x00\xa1\x06\xbc\x09\x60\xb3\xa8\xff\x59\xdc\x9d\xe2\x3e\xd0\x80\x37\x00\x1c\x6a\xc0\xfb\x00\x8e\x34\x60\x4e\x03\xba\x1a\x30\x05\xe0\xc9\x10\xf0\x0d\x80\x4f\x74\x60\x0c\xc0\xb2\x0e\x8c\x28\x3d\x3d\xf7\xf1\x97\x5e\xf4\xe9\x40\x09\x40\xb7\xb8\xef\xe9\xf9\xdc\x53\x1d\xf8\x18\x40\xaa\x03\x1f\x00\x78\x54\xe4\x9f\xea\x80\x86\xdc\x83\x3a\x6a\x87\x91\x02\xab\xfa\xbb\x05\x56\x5a\x6a\x1f\xbd\x88\x87\x90\xfb\x55\xdf\xe7\x6d\x95\x98\x0f\xfc\x75\xcf\x65\x82\x47\x4c\xc4\xb5\x1a\x17\x02\x0b\x5b\xad\x20\x8c\x58\x2d\xab\xc4\xa1\x13\x79\x81\x3f\x48\x36\x02\x57\x60\x49\xbd\x2a\x5c\x08\xc7\xe5\xf8\x29\xf8\x03\x3f\xb7\x32\x4e\xd5\x6b\x72\x54\xb7\x5b\x1c\xab\x82\x87\x58\x73\x1a\x31\x07\x75\x29\x91\xbb\xb2\x43\x7d\xba\xa0\x1e\x56\xb8\xd2\x31\x2a\xc2\xf5\xea\xc6\x77\xb1\x2b\x8c\x6a\x60\xb1\x3a\xdf\xfc\xf6\x77\x6f\xc3\x69\x06\x13\x61\x5c\x5a\x72\x44\x64\x54\x43\xc7\x17\x0d\x27\x0a\x42\x8b\xfd\x98\x95\x58\x25\x0e\x9d\x66\x50\x0f\xd8\xcc\x4b\xfc\xd9\xd2\x92\xe3\xbb\xb1\xe3\x72\xa3\xca\x9d\xa6\xc5\xae\x63\x8b\xad\xc4\x42\x78\x8e\x5f\xaa\xfc\x50\x59\x30\xd6\x78\x28\xbc\xc0\xb7\x98\x39\x51\x2e\xcd\x07\x7e\xc4\xfd\xc8\x50\x7e\x2d\x16\xf1\xad\xe8\xcb\x56\xc3\xf1\xfc\x69\x56\xdb\x70\x42\xc1\x23\x7b\xb5\xba\x68\x4c\xbd\xe0\x29\x3f\xeb\x3c\x34\x16\xfc\x5a\x50\xf7\x7c\xd7\x62\xa5\xe5\x46\x1c\x3a\x0d\x63\x31\x08\x9b\xc2\x62\x7e\x2b\x0b\x85\xfd\xd5\x34\xcb\xa1\xed\x8f\x99\x65\xdb\x36\xd9\xf8\x38\x53\xb0\xfc\x99\x6d\x9a\x6c\x8e\x95\x99\x95\xc5\xb3\xf6\xe4\xa0\x34\x63\x7f\xad\xe0\xe7\x19\x6d\xc6\x2c\xb3\x9d\x9d\xbc\x65\xd6\x9e\x2c\x7f\xc1\xe6\x98\xc9\x2c\x36\x39\x0d\xba\x45\x29\x5d\xca\x7d\x4a\xe8\x44\xee\xc9\x36\xf5\xe4\xdf\x94\xc8\xff\x99\xdc\x93\xbb\x74\x45\x7d\xf9\x0f\x5d\x52\xca\x28\xa1\x53\xba\xa0\x3e\x5d\x66\x4f\x0f\x74\x9f\xce\x32\x46\x2a\xdb\xb2\x43\x89\x6c\x53\x4a\x0f\xa9\x27\x3b\xf2\x90\xd1\xd9\x2b\x55\xff\x7b\x4d\xd7\x39\xa5\x74\x42\x09\xe8\xf6\x00\x74\x29\xa5\x94\x1e\xc8\x7f\xb3\xa9\x09\xf5\x41\xc7\xd4\xa7\x33\xb9\x97\xa5\xfa\xa0\x3b\x74\x95\x3b\x06\x1d\xc9\xb6\xfa\x2b\x14\x3c\xa6\x84\xae\x40\x77\x29\xa5\x73\x79\x48\xa7\x83\x29\xd4\x57\x31\xe8\xa6\xda\x41\x1e\x5c\xab\xfe\xb2\x2d\x22\xde\xc4\xf3\x00\x00\x00\xff\xff\xb6\x0e\x85\xf6\xef\x03\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
