// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package xmeye

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xdf\x6f\xda\x30\x10\xc7\xdf\xfb\x57\x9c\xac\x4e\xda\xa4\x25\x81\x3e\x4d\x2c\xb0\x97\x3d\x76\x52\x55\xb5\xcf\xd5\x81\x0f\xf0\x64\xec\xd4\x36\xa1\x28\xca\xff\x3e\x1d\x21\x90\x31\x92\x30\xda\x17\x30\xe7\xef\x7d\xee\x27\x2e\x0a\x90\x34\x57\x86\x40\xcc\xac\x09\x64\x82\x80\xb2\xbc\x49\xa5\xca\x61\xa6\xd1\xfb\xb1\x70\x76\x23\x26\x37\x00\x00\x4d\xeb\xcc\xea\x68\x25\xa3\xe1\x1d\xf0\xc9\xaf\xea\xd3\x9b\x8f\x86\x77\x7b\xfd\xa9\xcf\xdb\x4b\x86\x86\x74\xe3\xf6\x5f\x45\x9d\xc5\xdf\x9a\x83\xce\x59\x4d\x63\x11\x70\x7a\x8e\x74\x50\xae\x75\x0d\x34\x98\x83\xc1\x3c\x0a\x38\xf5\x30\x45\xf7\xc2\x07\x71\xc4\x68\xe5\xcf\xc5\x3a\x90\xb4\xda\x6b\x33\x47\x9e\x4c\xc0\xa0\xac\x11\x45\x01\x6a\x0e\xf4\x0a\x31\xce\xd8\x00\x82\xbb\x56\xc7\x64\x5b\x4e\x2c\x22\x23\xa1\x2c\x27\x29\xc2\xd2\xd1\x7c\xdc\xe2\xf7\x1b\x73\xf4\x33\xa7\xb2\x30\xca\xad\x92\x9f\x07\x5f\xbe\xb3\xaf\xf6\x04\x65\x59\x14\x10\x3f\xd2\xeb\x9a\x7c\x88\x9f\x1f\xef\xe3\x07\x0c\xcb\xca\x5c\xc1\xc5\x84\xa1\xc3\x6f\x06\xc4\x83\xa3\x5c\xd1\x46\x40\x0c\x65\x99\x26\x38\x49\x13\xad\x3e\xa0\x36\x6d\x17\xfe\xda\xfa\x6a\xdf\x6b\x6a\xfc\x51\x41\xc6\xcc\x38\x57\xef\xfd\x8e\xdd\x5f\x6c\x9a\xac\x75\xcb\x4d\x63\xf5\x02\x4e\xa3\xf6\xe5\xeb\x5a\xc2\x26\x81\x2d\x30\x47\x49\x50\x75\x09\x94\xe9\xa0\xb5\xf7\xab\x3d\x01\x5e\x5a\x6a\x84\xd4\x04\xbb\xcf\xc8\x07\xa7\x32\x92\x20\x31\x60\x65\x97\x21\x72\xe4\x33\x6b\x3c\x67\x62\xec\xc6\x61\x26\xc0\x87\x2d\xa7\xbf\x51\x32\x2c\x47\xc3\xc1\xe0\x53\x47\x82\x55\xc4\x25\xa1\xec\xd6\x54\x3a\xd7\x2f\xda\x03\x8f\x43\x7c\x52\x2b\xaa\x87\x18\x96\x57\x00\x7e\x91\xf7\xb8\x78\x1f\xe3\x69\x9b\xbd\x0f\xf0\xec\xc9\xfd\x0f\x20\x4d\xfa\x9a\xc5\x9c\xde\xb6\xa7\x61\x6a\xe5\xb6\x3f\x5c\x51\x80\x43\xb3\x20\xb8\x55\x5f\xe1\x56\xdb\x05\x8c\xc6\x10\xf3\xae\x75\xad\xda\x31\xca\xc5\x83\x95\xdc\x12\x0e\x10\xf3\x5c\xab\x76\x5c\xb0\x3a\xa7\xce\x3f\x31\xe0\xd5\xce\x3c\xcc\xab\x9d\x79\x90\x17\x3b\xf7\x4f\x11\xaa\xe6\x57\x4f\x57\xdf\xbc\xbb\x67\x99\x26\xbb\x3f\x75\xe7\x63\xd2\x13\x27\x4d\xa4\xca\xdb\xde\xc8\xb3\x57\x67\xcc\x27\xa6\xc6\xcf\xfd\x71\xff\x75\x48\xe7\x4f\x00\x00\x00\xff\xff\x42\x3a\x33\xae\x63\x08\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x3f\x8b\x13\x51\x14\xc5\xcf\x8e\x71\x95\xb1\x91\xad\x2c\x14\xae\x85\x41\x8b\x59\x67\xa2\x85\x4e\x32\x89\x28\xbb\xa0\x26\xb0\x2c\x13\x2b\x9b\xc7\xe6\x39\x3b\x98\xcc\x0b\xef\xcd\xac\x0a\x5b\xc4\xed\x84\x05\x41\xb0\xb2\x58\xf4\x13\xf8\x87\x60\xc4\x75\xec\x2c\xe5\x0e\x36\x36\xfa\x59\x64\x92\xd1\xc5\x5b\xbc\x73\xce\xbb\xbf\xcb\xbd\xbf\x57\x6a\x2f\x01\xe0\x04\x80\xb3\x00\x42\x00\xa7\x00\xec\x63\x51\x33\x00\x35\x00\x9f\x2a\x26\xaf\xf4\x5b\xf5\xff\xbd\xd2\x1f\x95\xfe\x04\xd0\x59\x02\x7e\x01\x38\x09\xe0\x9c\x05\xac\x00\xa8\x5b\xc0\x69\x00\xd7\x2d\xc0\x06\x70\xc7\x02\x96\x01\xf4\x2d\xe0\x0c\x80\xfb\x16\xb0\x04\xe0\x38\x00\xab\xda\x5d\xab\xb4\xdc\xb7\x8c\xa3\x3a\x56\x3e\x5d\x15\x19\xf4\xa4\x31\x22\x92\xd8\xd0\x72\x27\x96\x8f\x10\xc6\x23\x89\xf0\xc9\x58\xa2\x6f\xa4\xc6\xa6\x1c\x2b\x9d\x3a\x3d\x13\xc5\x03\xe7\x66\x16\x19\x27\x54\x3e\x0d\xe4\xce\x8d\x87\xf1\xb6\x18\xa9\x55\x9d\xd9\x5d\x61\x52\x27\xd4\x22\x31\x43\x91\x2a\xed\xd3\xdd\x79\x8b\x7a\x99\x16\x23\x35\x50\xd4\xfa\x8f\x6f\xdb\x5d\x91\x44\x99\x88\xa4\x13\x4a\x31\xf2\xe9\x5f\xf6\x69\x33\x33\x26\x16\x89\xdd\xbb\xdd\x5b\x73\xee\x49\x6d\x62\x95\xf8\xe4\xad\xba\xf6\x2d\x95\xa4\x32\x49\x9d\xf2\x34\x9f\x52\xf9\x38\xbd\x3c\x1e\x8a\x38\x69\xd2\xd6\xb6\xd0\x46\xa6\x41\x3f\x5c\x77\xae\x1d\x71\xe5\x3d\x0f\xa4\x76\xd6\x92\x2d\x35\x88\x93\xc8\x27\x7b\x63\x98\x69\x31\x74\xd6\x95\x1e\x19\x9f\x92\xf1\x3c\x9a\xe0\x4a\x93\x16\x36\x48\x2e\x78\x6e\x10\x78\x54\xaf\x53\x69\xdd\xf3\x81\xe7\x51\x87\x5c\xf2\xe7\xb9\x1d\x34\xfe\xb6\x5a\xc1\xd5\xd2\x5e\x9c\x63\x2d\xcf\xa5\xdd\xdd\xc5\x48\x3b\x68\xb8\x97\xa8\x43\x1e\xf9\xd4\x68\x82\x5f\x71\xce\x1f\x78\x06\x7e\xcd\x39\xe7\xfc\xae\x78\xc6\x53\xfe\xc2\x33\x9e\x82\x0f\x8a\x09\xe7\xc5\x53\x3e\xe4\xbc\xd8\x2b\x26\xe0\x17\xc5\x84\xa7\x7c\x58\x3c\x07\xbf\xe1\x19\x7f\x05\x1f\x70\xce\x9f\x8b\x7d\xfe\xc8\x39\xbf\xe7\xb7\xc5\x1e\x4f\xcb\x8c\x3f\x01\x00\x00\xff\xff\x2a\xef\x66\x45\x75\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
