// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package xmeye

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x7b\x6f\xdb\xb6\x16\xff\x7f\x9f\x82\x57\xcb\x9d\xed\x21\x92\x9d\xec\x71\x2f\xbc\x38\x43\xb7\x64\xb7\x03\x9a\x36\x48\xd2\x0d\xdd\x30\x04\xb4\x74\x6c\xb3\x95\x48\x95\xa4\x9c\x78\x41\xbe\xfb\x05\x49\x49\x96\x6c\x49\x96\xfc\x48\xdd\x21\xfe\xa3\x55\x24\xf2\x77\x1e\x3c\x0f\x3e\x8e\xf4\xf0\x80\x3c\x18\x11\x0a\xc8\x72\x19\x95\x40\xa5\x85\x1e\x1f\xbf\x38\xf1\xc8\x14\xb9\x3e\x16\x62\x60\x85\x78\x0c\xb6\x24\xd2\x07\xeb\xf4\x0b\x84\x10\xca\x3e\x1c\x31\x1e\xd8\x63\xce\xa2\x10\x85\x91\xef\xdb\x9c\x8c\x27\x32\x6e\xb7\xd8\x96\xd0\x30\x92\xa6\x71\xa6\x85\x6e\xe5\xe3\x21\xf8\x49\xbb\xa1\xa4\x85\xad\x74\x4b\x8c\x26\x1c\x46\x03\xeb\x47\xec\x4a\xc2\xe8\xc0\x65\x74\x44\xc6\xc2\x86\xfb\x90\x71\x69\x65\x30\x90\xc2\x21\x2e\x33\x17\x22\x72\x5d\x10\xc2\x5c\x07\x05\xc8\x1a\x9d\xa4\x72\x61\x81\x46\xd8\x76\xd9\xd8\x42\x5a\xf6\x81\xf5\xf0\x80\xc8\xd1\x7f\x29\xb2\xce\x35\x29\x64\x28\x47\x1c\x2b\x3e\x2c\xe4\xa0\xc7\x47\xeb\xf4\xa4\x4b\x0a\x98\xee\xe2\x1a\x92\xf8\x6c\x67\x62\x4c\x00\x7b\x02\x64\xa9\x28\x8a\x74\x33\x09\x4e\xba\x7a\xc8\x32\x03\xdd\xf5\xc8\x34\xb6\x0f\x73\x19\xff\x97\xb3\x25\xd7\x07\xcc\x47\xe4\x5e\x91\x59\x7e\xca\xd9\x5d\x81\x89\xb9\xcc\xb7\x03\xcf\x3e\x3a\x46\xea\x4a\x04\xc9\xd5\xbd\xb0\x8f\x8e\x4b\x4c\xed\xfe\x36\xc4\x14\xfc\x45\x33\xcb\xb5\x48\xec\xbd\x40\x5a\xd5\x8e\x33\xa5\x29\x89\x87\x45\x48\x69\xcb\x28\xb5\x5a\x8a\xa7\x88\xe2\xa9\x2d\xf1\x50\xa0\x21\xe6\xb7\xea\xc2\x9a\xc3\xf8\x44\x14\xd1\x4a\x91\x7c\x12\xb7\x0d\x39\x08\xa0\xd2\x98\x95\x1a\xa9\x11\x82\x8f\xc8\x31\x56\x82\x2c\xe5\x9f\x09\x4d\x75\x6f\x0a\xaa\x11\x50\x0f\x3d\x3e\x9e\xa6\x46\x55\xdc\xef\x3d\x9e\x62\xe1\x72\x12\xca\xfe\x94\x11\xaf\xdd\xeb\xfc\xa0\xfa\xfa\x02\xd0\xe3\xe3\xc3\x03\x72\xae\xe0\x63\x04\x42\x3a\x6f\xaf\x5e\x39\x97\x58\x4e\xcc\x6d\x03\x6e\x9d\xa6\x66\x73\x3d\x13\x12\x02\x63\x31\xca\x34\x4e\xba\x7e\x81\xd1\x34\x16\xcd\x98\xe1\x7a\xe2\x25\x7d\xd7\x11\x31\xeb\x81\x45\xe2\xbe\x4a\xdd\x63\x8b\xc2\x8e\x88\x0f\x6b\x4b\x9b\x76\xde\x44\x5c\x0d\x52\x24\xef\x2f\x06\x7d\xb5\xc0\x27\xdd\xc8\x2f\x79\x92\x71\x35\x89\x87\x76\xb9\xb3\xe5\x7a\x2c\x38\x5d\x16\x41\xdd\x41\x23\xec\x01\x32\x8a\x42\x84\x56\xa0\x95\x1b\x48\x39\x03\xca\x49\x21\x43\xd2\x07\xa4\xff\xb5\x85\xe4\x24\x04\x0f\x79\x58\x62\x73\xdf\x93\x36\x07\x11\x32\x2a\x14\x27\x94\xdd\x71\x1c\x5a\x48\xc8\x99\x62\xff\x8e\x78\x72\xd2\x3f\xea\xf5\xfe\x5d\xc1\xa0\xa1\xa8\x02\x73\x75\x1b\xd3\x8e\xaf\x6e\x14\x03\xce\x47\xf1\xcb\x64\x04\xe5\x64\x8d\xde\x37\x24\x80\x8d\x00\x2e\x40\x08\x3c\xde\x0c\xe3\x66\x16\x6e\x06\xf0\x56\x00\x6f\x02\x70\xd2\x5d\xa5\x6a\x85\xb3\x72\xd0\x4e\xe4\x90\x79\xb3\xd5\xe4\x1e\x1e\x10\xc7\x74\x0c\xe8\x80\x1c\xa2\x03\x9f\x8d\x51\x7f\x80\x1c\x65\xa9\x55\x86\x3a\xa7\x52\xdb\x2c\x3c\xa5\x12\x45\xc0\xb9\x64\x82\x68\x87\xd0\x2a\xa9\x61\x7c\x09\xc0\x89\x09\x33\x48\xce\x42\x18\x58\x38\x0c\x7d\xe2\xea\xd8\xd6\x9d\xc7\x20\xeb\xd4\x63\x6e\x14\x00\x95\xce\x1d\x27\x12\xda\x1e\x96\x70\xc3\xae\x25\x27\x74\xdc\x6e\x25\x3c\x28\xdb\x72\x7e\x61\x3c\xc0\x12\x59\xc7\xbd\xde\xf7\x76\xef\xc8\xee\x1d\xdf\x1c\x7d\xd7\xef\x7d\xdb\xef\x7d\xf7\x47\xef\x3f\xfd\x5e\x4f\x39\x6b\xab\xd3\x39\xe9\x1a\xec\xd3\x66\xec\x26\xb4\xce\xb0\xc4\x8d\x65\x4d\x19\x9d\x85\xb0\x76\x67\x65\x7b\xb5\x3b\xaf\x36\x3c\x64\xec\xc5\x04\xeb\x55\x26\x5a\x6d\x7e\x27\x5d\x1d\xc5\x2a\xa3\xa7\x4e\x21\x65\x59\xa7\x3a\x88\xc7\x11\xf4\x0e\x7c\x3f\x8d\x89\x6c\x0a\x7c\xe4\xb3\xbb\x3e\xc2\x91\x64\xab\xe2\xa2\x5a\x55\xe4\x56\x18\x13\xc6\xc9\xdf\x8c\x4a\xec\x27\x33\x2a\x75\xdb\x42\x01\xc8\x09\xf3\x06\xd6\x58\x4d\x6e\xe3\xb4\x66\x95\xa4\x3d\x0b\x11\x6f\x60\x64\xb0\x4d\x6f\xca\xa6\xd8\x27\xca\x46\x6b\x0c\x90\x5e\xbd\xc4\xd6\x3f\x21\x9e\x07\xd4\x42\x53\xec\x47\x30\x48\xf4\x42\x71\x00\x26\x8d\xab\xf5\x40\x77\x33\xcc\x04\x6e\xc4\x59\xb0\x35\x30\xc9\xea\x41\x2d\xcf\xbe\xbf\x5d\x31\x64\xc9\x2f\x8d\xbc\x67\x58\x82\x09\x6e\x26\xfe\xd6\x73\x9f\x11\x01\x5f\xad\x54\xea\x11\x5b\xe6\x95\x4a\xce\xfc\xd2\xc5\x63\x43\x1c\xd1\x10\x62\x11\xc6\xac\x77\x43\x0e\xa1\x72\xda\xf2\xd5\x6f\x6d\x6c\x11\x62\x9a\xce\x16\x3d\xcf\x66\x34\x8b\x6a\x63\xcf\x63\xd4\x3a\xcd\xae\xfe\xf4\x1a\x16\xfb\x40\x3d\xcc\xcd\xd2\xee\xa4\xab\x50\xd6\x64\x20\x6b\x62\x12\xee\x65\xd6\xa5\x94\x1b\x59\x39\xa7\x8d\xd5\x98\x5a\xa1\xf2\x4b\xd5\xea\x56\xd9\x74\x2e\xfe\x3b\xbd\x23\xa7\x77\x8c\x74\xfc\xd7\x53\x62\x1b\xa5\x8d\x25\xab\x6c\x5a\xcb\xa0\x97\x04\x99\x2f\x56\x77\xd4\xa5\x41\xf3\x93\x6e\x7d\xab\xaf\x09\x5b\xe0\xc0\xc7\x4d\x1d\xf8\xe7\x09\xa6\x7a\x0e\xfe\xec\xbd\x0b\xde\x9b\x9f\xe7\xa3\x1a\x13\xfd\x52\x7a\x02\x7c\x70\xa5\xf6\x22\x37\xd1\xb7\x09\xd5\xe9\x9f\x05\x1e\x85\x4c\xb7\x63\x0b\x71\xf8\x18\x11\x0e\xde\xc0\x4a\xae\xd6\xe4\x24\x33\x13\xf5\x0e\xd1\x81\xde\x27\xd2\x93\xd1\x98\x8f\x5a\x13\xd2\x52\x31\x59\xa8\x27\x10\xf3\x38\x70\x40\xf4\x92\x33\x5d\xa5\x1d\x24\x74\xe2\x27\xb1\x84\x4a\xb0\xe4\x2a\xb3\x30\x56\x00\x86\x43\x35\xbd\x32\xe0\x6b\x8b\x5d\x63\x42\x55\x2a\x57\xd7\x30\xf7\x1c\x80\x96\x9a\x6d\x21\x00\x9d\x4f\x81\x9a\x64\xf3\x1c\x83\x9e\x28\x06\x81\x52\xb9\x6d\x54\x6e\xc2\x50\xf6\xce\xd3\x44\x22\xb4\x1c\x30\xbe\xce\xec\x80\x69\x86\x6e\x15\x43\xc8\xfa\xda\xaa\x13\x2a\x8c\x35\xbd\xf0\xfd\x64\x23\x60\x93\x80\x51\xc0\xdd\x8b\x12\xee\x5e\x34\xe2\x0e\xf3\x60\x47\xfc\x5d\x94\xf0\x77\xd1\x80\xbf\x0b\xa6\x11\x3d\x90\xe0\xca\x1d\xf1\x79\x55\xc2\xe7\x55\x03\x3e\xff\x07\x14\x38\xde\xd5\x48\xbf\x2c\xe1\xf0\x65\x13\x4d\x62\x1a\x6d\x87\xc1\xe7\xec\x53\xda\x6c\xfd\xec\xf3\x15\x1d\x8a\xf0\x87\xe7\x54\xb3\xf9\x62\x75\x18\x49\xc9\x68\xbc\x58\x14\xd1\x30\x20\xcb\xc7\x9a\xf1\x69\x66\xf6\x64\x69\xc2\xee\x12\xe7\x30\x08\xcf\xe6\xbd\x00\xc7\x78\x50\xb5\xb5\x57\x09\xf1\x4f\x3b\xe3\x78\x8d\x37\x3c\xa5\xf8\x09\xc6\x84\x22\xb9\xe9\x61\xc7\x39\xf5\x36\x07\xb9\x26\x7f\x6f\x06\xf0\x42\x6f\x3d\x8a\xcf\xe6\xc0\x63\x44\xe2\x45\xa6\xde\x41\xda\xc9\x91\x87\x42\x76\x7e\x21\x3e\x28\x4b\xf9\x54\x67\x1e\x9a\x09\x6d\x69\x4f\x71\xf2\xb1\x4d\xa6\xcf\xa9\xf7\x44\x87\x35\x93\x28\xc0\xf4\x76\x38\x93\x20\x32\xa3\xf6\x0a\xe8\x58\x6f\xde\x37\xc2\x4b\xe3\x1b\xdc\x4b\xdb\x05\x2a\x81\x37\xc8\x62\xd9\xac\x98\x96\x22\xa1\xf4\xca\xbe\x6f\x9a\x6a\xb3\xe7\xf8\x07\x55\x07\xf2\x1e\xbb\xa3\x3e\xc3\xde\x57\x7a\xed\x55\x64\xbe\x65\x19\x34\x2d\x12\xca\x6f\xff\xea\xe2\x1f\x85\x61\x27\xd0\xcb\x25\x40\x67\xe9\x93\x83\xb4\xfe\xa7\xb0\x60\xa9\x54\xbc\x26\xc9\xf0\xf3\x3d\x0b\xab\x3a\xf5\xd2\xe7\x55\xd9\x73\xa9\xe4\x28\xea\xc7\xf9\x11\x55\xc8\x44\xbc\x5f\x2e\x40\x4a\x42\xc7\xc2\xd2\xc9\xd6\x96\x6c\x3c\x56\x3d\xe3\xb3\x28\xb6\xca\x56\x8b\x72\xf8\x76\x72\x35\xda\x51\xbe\x4e\x78\x0d\x3c\x5b\x4d\xc7\x8f\x32\xf3\xbd\x37\xe1\xbc\x7a\x6e\xcd\xac\xf7\x9b\x5a\x9c\x6d\x37\xe7\xa1\xba\x79\x0f\x35\xc8\x7d\x28\x2d\x4b\x71\x84\xae\x9f\xba\x25\x74\xc4\x6a\x6f\x6c\xd5\xd5\x37\x9a\xc7\xd4\x78\x5a\x01\x9c\x60\x1f\xd1\x28\x18\x66\x8a\x21\x6a\x46\xd3\x0c\x5a\x96\x6b\xc7\x80\xbe\x66\xcd\x42\x73\x2d\xc5\xa3\x8d\xa4\x7d\x1b\xe6\xe6\x61\x1b\x8a\x79\x06\x53\xe2\xc2\x55\xa4\x13\xb7\x5a\xe4\xa7\x74\x02\x42\x23\x39\xaf\x92\xda\x27\x15\x5c\xb3\x91\xbc\xc3\x1c\xd0\x14\xb8\xc8\x7a\xd7\xa6\x63\xce\x46\xf2\x77\xcc\xe1\x37\x03\xbb\x77\x72\xbf\xc4\xdc\x53\x72\x6f\x4b\x5e\x85\xa7\xe4\xdd\x5b\x41\xb7\x3d\xc0\x89\xc0\xfb\x3a\xc0\xe7\xd4\xe5\xb3\x50\x6e\x5b\xec\x18\x76\x5f\xa5\xfe\x29\x22\xfe\xc2\xea\xb2\xa1\xc0\xdb\x59\x11\xe4\x74\xa6\x99\xda\xf9\xd2\xe0\x49\xf2\x85\x12\x74\xdf\xd4\xab\xb9\xc2\xff\x04\xfd\xea\x93\x0d\x44\x28\x72\xb3\xf5\x04\x9b\x3b\xad\xc6\xfd\x95\xc6\x55\x0a\x7b\xe7\xb4\x46\x6c\x16\xc9\x9d\xc8\xfd\x26\x92\xfb\x2a\xf8\x0d\xf6\x3f\xec\x60\xb8\x15\xec\xfe\x8e\xb6\x16\x7a\x07\x83\xad\x70\xf7\x78\xac\x7f\x23\x1e\xb0\x1d\x0c\xb6\xc6\xdd\xdf\xd1\x36\x62\xef\x60\xb8\x35\xf0\x1e\x8f\xf7\x8b\xc8\x23\xbb\x18\x6f\x8d\xbb\xbf\xe3\x7d\x46\xc6\xdb\x96\xf8\x8c\x8c\xf7\x55\xda\xf3\x7b\xc9\xf1\xb6\xe5\xd5\xa0\xbb\x95\x78\xbe\x1f\xd8\x64\x27\x46\xcd\xfb\x6e\xdd\x88\x73\xa0\x72\x57\x5b\x31\x88\xb3\x3b\x11\x62\x3a\xb0\x8e\xad\x92\x17\x6c\x1a\xaa\x77\x83\xc3\x62\xfd\xde\x64\xdd\x6a\xee\x1c\xcc\x72\xf1\x6f\x61\xb1\x6f\x5c\x69\x4e\x02\xb0\x63\xbd\xe6\x0a\x80\xb3\x0a\x2f\x2d\xec\xed\xf7\xbe\xb7\xd2\x8a\xfd\x3c\x14\x07\xec\x31\xea\xcf\x9a\x96\xfd\x36\x3e\xe1\xdd\x03\x9f\xfc\x24\xc3\x5c\xeb\x85\xed\xda\x68\x8d\x8d\x66\x0b\xc6\xb2\x56\x49\xb8\xe6\x36\x5b\x60\x9f\xad\xac\x1f\xca\xaa\x77\x0d\x57\xc2\xc6\xa5\x10\x8b\xef\x74\xd3\x11\xb3\x62\xd5\x98\x16\x19\x7b\xa7\xec\x2e\x13\x2b\x5e\x6f\x5e\x14\xa1\x19\x59\xb3\xf6\xff\x29\x0a\x2a\x76\x93\x10\x56\x1c\xdc\xe4\x80\xd7\x9f\xfd\x7f\xc2\x48\xfe\xcd\xb3\x8b\x37\xe3\xf6\xd9\xc5\x4b\xfa\x7d\xae\x2e\x5e\xaf\x7c\x7f\xe5\x39\x30\xaa\x73\x16\x9c\x54\x5f\x55\x1d\x16\xeb\xf3\x3d\xc9\x38\x1e\xc3\xca\x03\xbe\xfc\x07\x29\xb2\xdf\x58\x29\xed\x31\x39\xce\x1c\xf4\x18\x32\x89\xdd\x4c\x8e\x57\xf4\xad\xfa\x10\x47\xb9\xc8\x8d\x0b\xca\xf6\xb7\x70\xac\xe2\x20\xfa\x12\x73\xb9\x78\x46\xba\xce\x69\xf4\x15\x04\x98\x50\x24\x42\xec\x6e\xf8\xee\x3b\x93\xd8\x6f\x8e\xf3\xc9\x0a\xba\xc4\x21\x3a\x88\xed\x5e\xd7\x74\xd5\xf5\x81\x62\xb4\xf0\x10\x1d\x84\x98\x4b\xf3\xae\x7a\x7f\x90\x62\x3b\x97\xe9\xdd\x1d\x26\xf6\x1c\xb5\xd7\xda\x2a\xd6\x5d\x07\xe7\x0a\x9b\x52\x91\x1c\x63\x27\xd7\x6a\x78\x9d\xb7\x84\xca\x6f\x8e\xb7\x4c\x40\xdb\xcf\xda\xf8\xbb\x88\xc1\x4f\x59\xb1\xb3\x62\x27\x20\x8e\xd3\x75\x5e\x6e\xdb\x30\x46\xc7\x9b\x1e\xe2\x39\x48\x6f\x21\x48\xff\xbc\xb0\x2b\xb5\xde\x87\x4d\xd4\x08\x6e\x54\x33\x4c\x24\xd7\x2f\x3b\x6f\x94\x26\x5c\xc6\xbd\xcf\x22\xb0\xbb\x87\xe8\x20\x79\x3b\xb3\xe9\x1b\xa1\x8d\xeb\x75\x63\x70\x67\x8d\x98\xbb\x08\x71\x93\xbe\x21\xba\x2e\x42\x3c\xd0\xb9\xba\x9f\x21\x91\xa2\x2b\xc0\x65\x34\xae\x98\x6c\x0c\x4f\x46\x73\x0a\xc6\x0c\xcc\xa7\x9a\x0c\x3e\xd7\x77\x08\x1d\x1b\xf4\x34\x96\x7d\xae\xa5\x93\xab\x03\xf1\x0a\x56\x2a\x62\x5b\xc9\xa3\x82\xdb\x0b\xb7\x4a\x3f\x56\x97\xe1\x38\xf3\x65\x44\xe5\x55\xe9\x67\x4f\xcc\x08\x32\x8e\xda\xcb\x9f\x46\xe9\xe4\x6f\x5a\x9d\xac\x60\x0f\x0f\x48\x48\x2c\x89\xfb\xf2\xe6\xe2\x15\x6a\x9b\xeb\xb7\x57\xaf\x90\xd5\xf5\xb0\x98\x0c\x19\xe6\x5e\x17\x0b\x01\x52\x74\xa7\x40\x3d\xc6\x45\x77\xc8\x98\x14\x92\xe3\x50\x7f\x5e\x41\x3b\x64\x48\xdc\x0f\xc0\xbb\xae\x10\xdd\x85\x7b\x4e\x40\xa8\xe3\x0a\x61\xa1\x11\xf6\x05\x74\x32\x1c\xc7\x42\x15\x8b\xf7\x5e\x2c\x08\x57\xfd\xcd\x97\x75\xe4\x08\x58\x00\x54\x76\xdf\x27\x57\x9a\xd5\xf7\x4b\x9c\x6e\x5f\x4d\xef\x8b\xb5\x94\x27\x3d\xb7\x8b\x5a\x95\x1c\x39\xcb\x3a\x68\x27\x85\x1d\x1d\x87\x03\xf6\x66\xed\x51\x44\x8d\xee\xda\x1d\xf4\xb0\x64\x9c\x07\xed\xd6\x97\xf3\x0f\x66\xb4\x3a\xce\x02\x7b\xed\xe5\x2e\xea\x27\x49\x00\x97\xba\xc1\xaf\xd4\xe5\xa0\xe8\xf5\xd1\xf7\xbd\xc3\xc2\xc6\x01\xa1\x67\x58\x42\x1f\x19\x65\xb7\x3b\x8e\x88\x86\x92\x63\x57\xb6\xbf\x3b\x44\xad\x19\x60\xde\xea\x94\x74\xc5\xf7\x0b\x5d\x81\x7a\x6f\x46\xed\x96\x87\x67\x65\x7d\x94\x9e\x66\x3f\xe9\x4d\x8b\x9f\x55\xea\x06\xd1\x47\xad\x4c\x71\x7a\xab\xb8\x9b\xcf\x5c\xec\x43\xbf\x40\x47\xc9\x6f\x44\xb8\x90\x67\x78\xd6\x47\x47\xc5\x10\xba\x91\xde\x33\xea\xa3\xd6\xbb\x77\xef\xde\x39\x17\x17\xce\xd9\x19\x7a\xf9\xb2\x1f\x04\xad\xc2\x2e\x8f\xc5\x48\x7a\x04\x44\x15\x33\xad\xcc\xca\xcc\xc3\x33\x93\xba\x5b\x7d\xf4\x67\xa2\xa9\xc3\x54\x67\x7f\x95\x73\x3b\x47\x79\x07\x42\x02\x2f\x44\x9a\x0f\xd7\xd1\x21\x52\x9a\x17\xad\x0c\x7a\xd1\xd3\x5a\x14\x6f\x26\x44\xa0\x3b\x80\x0f\x45\x14\x25\xe6\x52\x8d\x33\x11\xec\x77\x80\x0f\x39\x82\xb1\x09\xa4\x8f\x6a\x51\x7b\x85\x85\x2c\xa5\x96\x95\x20\x85\xad\x66\xa2\xa4\xcf\x5a\xbc\x69\x4d\x04\x8c\xca\x49\x95\x2a\x74\x83\x22\x45\xc4\x0f\xea\xab\xa1\x94\x54\x56\xa6\x18\xb5\x8a\x7e\x61\xfb\x35\x98\xd2\xf2\xab\x30\x50\x25\x7e\x1c\x26\x96\xa4\x37\xf7\xeb\x0b\x5f\x46\x27\x2b\x8b\xc1\xac\xa0\x5d\xd4\x3a\xcf\x4f\x5d\x6f\x7f\xec\xfc\xb0\x3c\x1d\x99\x47\x65\x15\x4e\x5a\x9a\x5e\x40\x64\x26\x96\x43\x51\x30\x57\xbf\x29\xe6\xc8\x0b\xd1\xa0\x30\xb2\x63\x15\x38\x73\xf1\xbd\x55\x44\x7e\x99\x05\xf3\x06\xee\x9f\x99\x6f\x80\xfd\xd5\xea\x38\x53\xec\xb7\x63\x95\x78\xa1\xd1\x96\x8a\xd6\x1d\xc7\x04\xc1\xb6\x8e\x81\xf6\xc5\x85\x7d\x76\xf6\xe7\xcd\x5f\x3a\x0a\xf6\x85\xf8\xa3\xd5\xe9\x14\xbf\xd2\x5c\x41\x53\xb2\x02\x8a\x40\xbd\xb5\xe9\x3d\x2e\xdc\xcb\xfe\x9d\xd6\x2e\xa6\xf3\x95\x85\x83\x9b\xe7\x39\x47\x56\x75\xa9\x55\x0a\x90\x37\x24\x80\xb6\x2c\x9c\x69\x38\xf8\x3d\xbe\x2f\x9b\x4f\xcc\x42\xe8\xa3\xd6\xe5\x9b\xeb\x9b\x92\xf4\x1c\x71\xbf\xaf\x0d\x24\x79\x5d\xa9\xd5\x71\x42\xce\xc2\x76\xcb\x4c\x0d\xcb\x66\x03\xca\xea\xab\xf2\xa8\x9a\xc9\xf4\x91\x6c\x92\x9c\xe3\x79\x44\x7f\x2e\x78\x9b\x97\xb9\xa3\xfa\x91\x11\x6a\x73\x87\x83\x88\x7c\x89\x06\x83\x01\x6a\x8d\x30\xf1\xc1\x6b\x55\x75\x52\x3f\x0a\x77\xe8\xf2\x35\x93\x64\x34\x2b\xd1\x5b\x5e\x12\xa9\xe6\x2f\xad\x73\xce\x19\x2f\xd1\x62\xae\x3d\xdc\xcb\x3e\xe2\x4e\x60\xbe\x8c\x5a\xa3\x83\x19\x24\xa8\x89\x3f\x21\x1e\xf4\x8d\x89\xad\x6e\x2c\xe4\xcc\x27\x74\xac\x66\x6a\x89\x21\x7f\x53\x3c\x63\x4a\x7e\x8b\x0e\x9c\x7b\x96\x7e\x2f\xb2\x9d\xca\x87\xfe\xa5\x34\x1f\x51\xb3\xcc\xd8\x95\xf2\xaf\x2b\xe7\x98\xb9\x1e\x6b\xaa\xbf\x7a\x16\x9b\xfd\x7d\xca\x01\x28\xf6\xa7\xd5\x51\xf8\x8b\x8d\x57\x33\xca\xa1\x6b\xaf\x63\x04\xa1\x63\x1f\x54\x12\x31\xab\x99\x3e\x92\x3c\x2a\xd1\xd6\xee\xd6\x15\x65\x4b\x86\xbe\x10\x25\xab\x86\x65\x45\x1e\xa6\xd1\xa8\xad\x13\x71\x99\x79\x27\x31\x3a\xce\xa2\xa6\x6d\x2e\x81\x2e\x72\xd0\xe9\xd4\x9f\xb4\x24\x27\xc9\xad\x8e\xe3\xfa\xc4\xfd\xb0\x62\xbc\xb2\x0c\xb5\x74\xb7\x02\x52\x0d\xd2\xf4\xe2\xb6\xc2\xff\x03\x00\x00\xff\xff\x4f\x87\x42\x30\x4f\x62\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xdf\x4b\xe4\x56\x14\xfe\x62\x6c\x6b\xa7\x3f\x68\xa5\x0f\xa5\xf4\xe1\xf6\x41\x69\x1f\x62\x27\xb6\x05\x89\x46\x4b\xad\x42\xa9\xd3\x8a\x1d\x85\x3e\x86\x99\x6b\x4c\x3b\x93\x0c\xb9\x89\x55\xb0\x74\x1c\xa5\xb6\x20\x2d\x08\xcb\xc2\x2e\xec\x32\x3e\xef\xc2\xec\xca\x60\xf0\x47\xfc\x17\xce\x7d\xda\xb7\x85\x7d\xdb\x87\xfd\x23\x96\x9b\x64\x5c\x16\x16\xf6\x42\x72\xbf\x73\xce\x77\xbe\xf3\x9d\x90\xc7\xa3\xc3\x37\x00\xe0\x3d\x00\x9f\x02\xd8\x07\xf0\x21\x80\x67\xc8\x4f\x59\x03\x46\x01\x98\x1a\xf0\x11\x80\xef\x35\xe0\x1d\x00\xbf\x6a\xc0\x30\x00\xae\x01\x6f\x01\xf8\x4d\x03\x74\x00\xa1\x06\xbc\x09\x60\xb3\xa8\xff\x59\xdc\x9d\xe2\x3e\xd0\x80\x37\x00\x1c\x6a\xc0\xfb\x00\x8e\x34\x60\x4e\x03\xba\x1a\x30\x05\xe0\xc9\x10\xf0\x0d\x80\x4f\x74\x60\x0c\xc0\xb2\x0e\x8c\x28\x3d\x3d\xf7\xf1\x97\x5e\xf4\xe9\x40\x09\x40\xb7\xb8\xef\xe9\xf9\xdc\x53\x1d\xf8\x18\x40\xaa\x03\x1f\x00\x78\x54\xe4\x9f\xea\x80\x86\xdc\x83\x3a\x6a\x87\x91\x02\xab\xfa\xbb\x05\x56\x5a\x6a\x1f\xbd\x88\x87\x90\xfb\x55\xdf\xe7\x6d\x95\x98\x0f\xfc\x75\xcf\x65\x82\x47\x4c\xc4\xb5\x1a\x17\x02\x0b\x5b\xad\x20\x8c\x58\x2d\xab\xc4\xa1\x13\x79\x81\x3f\x48\x36\x02\x57\x60\x49\xbd\x2a\x5c\x08\xc7\xe5\xf8\x29\xf8\x03\x3f\xb7\x32\x4e\xd5\x6b\x72\x54\xb7\x5b\x1c\xab\x82\x87\x58\x73\x1a\x31\x07\x75\x29\x91\xbb\xb2\x43\x7d\xba\xa0\x1e\x56\xb8\xd2\x31\x2a\xc2\xf5\xea\xc6\x77\xb1\x2b\x8c\x6a\x60\xb1\x3a\xdf\xfc\xf6\x77\x6f\xc3\x69\x06\x13\x61\x5c\x5a\x72\x44\x64\x54\x43\xc7\x17\x0d\x27\x0a\x42\x8b\xfd\x98\x95\x58\x25\x0e\x9d\x66\x50\x0f\xd8\xcc\x4b\xfc\xd9\xd2\x92\xe3\xbb\xb1\xe3\x72\xa3\xca\x9d\xa6\xc5\xae\x63\x8b\xad\xc4\x42\x78\x8e\x5f\xaa\xfc\x50\x59\x30\xd6\x78\x28\xbc\xc0\xb7\x98\x39\x51\x2e\xcd\x07\x7e\xc4\xfd\xc8\x50\x7e\x2d\x16\xf1\xad\xe8\xcb\x56\xc3\xf1\xfc\x69\x56\xdb\x70\x42\xc1\x23\x7b\xb5\xba\x68\x4c\xbd\xe0\x29\x3f\xeb\x3c\x34\x16\xfc\x5a\x50\xf7\x7c\xd7\x62\xa5\xe5\x46\x1c\x3a\x0d\x63\x31\x08\x9b\xc2\x62\x7e\x2b\x0b\x85\xfd\xd5\x34\xcb\xa1\xed\x8f\x99\x65\xdb\x36\xd9\xf8\x38\x53\xb0\xfc\x99\x6d\x9a\x6c\x8e\x95\x99\x95\xc5\xb3\xf6\xe4\xa0\x34\x63\x7f\xad\xe0\xe7\x19\x6d\xc6\x2c\xb3\x9d\x9d\xbc\x65\xd6\x9e\x2c\x7f\xc1\xe6\x98\xc9\x2c\x36\x39\x0d\xba\x45\x29\x5d\xca\x7d\x4a\xe8\x44\xee\xc9\x36\xf5\xe4\xdf\x94\xc8\xff\x99\xdc\x93\xbb\x74\x45\x7d\xf9\x0f\x5d\x52\xca\x28\xa1\x53\xba\xa0\x3e\x5d\x66\x4f\x0f\x74\x9f\xce\x32\x46\x2a\xdb\xb2\x43\x89\x6c\x53\x4a\x0f\xa9\x27\x3b\xf2\x90\xd1\xd9\x2b\x55\xff\x7b\x4d\xd7\x39\xa5\x74\x42\x09\xe8\xf6\x00\x74\x29\xa5\x94\x1e\xc8\x7f\xb3\xa9\x09\xf5\x41\xc7\xd4\xa7\x33\xb9\x97\xa5\xfa\xa0\x3b\x74\x95\x3b\x06\x1d\xc9\xb6\xfa\x2b\x14\x3c\xa6\x84\xae\x40\x77\x29\xa5\x73\x79\x48\xa7\x83\x29\xd4\x57\x31\xe8\xa6\xda\x41\x1e\x5c\xab\xfe\xb2\x2d\x22\xde\xc4\xf3\x00\x00\x00\xff\xff\xb6\x0e\x85\xf6\xef\x03\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
