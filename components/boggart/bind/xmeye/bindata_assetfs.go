// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package xmeye

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\x4d\x6f\xda\x4c\x10\xc7\xef\xf9\x14\xa3\x7d\xf2\x28\x89\x54\xbf\x80\x9a\xb6\xa2\x86\x5e\xaa\x9e\x52\x29\x4a\xc9\xa5\x97\x68\xf0\x0e\xb0\xd5\xb2\xeb\xec\x2e\x26\xc8\xf2\x77\xaf\x16\x63\xa0\x29\xb6\x13\xd2\x0b\x2c\xe3\x99\xdf\xbc\xec\xdf\x43\x51\x00\xa7\xa9\x50\x04\x2c\xd5\xca\x91\x72\x0c\xca\xf2\x2c\xe1\x22\x87\x54\xa2\xb5\x43\x66\xf4\x8a\x8d\xce\x00\x00\x0e\xad\xa9\x96\xc1\x82\x07\xbd\x3e\xf8\x93\x5d\xd4\xa7\x27\x1b\xf4\xfa\x5b\xff\xe7\x31\x4f\x0f\x19\x2a\x92\x07\x4f\xff\xf6\xa8\xab\xf8\xd3\x67\xe7\x67\xb4\xa4\x21\x73\x38\x39\x46\xda\x79\x2e\x65\x0d\x54\x98\x83\xc2\x3c\x70\x38\xb1\x30\x41\xf3\xe0\x0f\x6c\x8f\x91\xc2\x1e\xcb\xb5\x23\x49\xb1\xf5\xcd\x0c\x59\x52\x0e\x9d\xd0\x8a\x15\x05\x88\x29\xd0\x23\x84\x98\x7a\x03\x30\x3f\xb5\x3a\xa7\xb7\xe5\xe4\x9d\x48\x71\x28\xcb\x51\x82\x30\x37\x34\x1d\x36\xc4\xfd\xc2\x1c\x6d\x6a\x44\xe6\x06\xb9\x16\xfc\x32\xbe\xfa\xec\x63\xa5\x25\x28\xcb\xa2\x80\xf0\x8e\x1e\x97\x64\x5d\x78\x7f\x77\x13\xde\xa2\x9b\x57\xe6\x0a\xce\x46\x1e\xda\xfb\xa4\x80\xdd\x1a\xca\x05\xad\x18\x84\x50\x96\x49\x84\xa3\x24\x92\xe2\x1f\xf4\x26\xf5\xcc\x9e\xda\x5f\x1d\x7b\x4a\x8f\x5f\x2a\xc8\xd0\x33\x8e\xf5\x7b\xb3\x61\x77\x37\x9b\x44\x4b\xd9\xf0\xe4\x40\x7a\x0e\x27\x41\xb3\xf8\xda\x44\x78\x48\xf0\x16\x98\x22\x27\xa8\xa6\x04\x42\xb5\xd0\x9a\xe7\xd5\x5c\x80\x17\x2d\x1d\xa4\x94\x04\x9b\xcf\xc0\x3a\x23\x32\xe2\xc0\xd1\x61\x65\xe7\x2e\x30\x64\x33\xad\xac\xaf\x44\xe9\x95\xc1\x8c\x81\x75\x6b\x5f\xfe\x4a\x70\x37\x1f\xf4\xe2\xf8\xff\x96\x02\xab\x8c\x73\x42\xde\xee\x53\xf9\x99\x6e\xa7\x2d\x70\x7f\x89\xff\xd5\x37\xe8\xe6\x27\x44\x8f\xc5\x82\xde\x04\xf8\x4e\xd6\xe2\xec\x6d\x8c\xf1\x3a\x7b\x1b\xe0\xde\x92\x79\x0d\x20\x89\xba\x46\xed\x39\x9d\x97\x96\xb8\x89\xe6\xeb\xee\x74\x45\x01\x06\xd5\x8c\xe0\x5c\xbc\x83\x73\xa9\x67\x30\x18\x42\xe8\x95\xda\x26\xd4\x7d\x96\x17\xcb\x82\xfb\x91\xf8\x04\xe1\xad\xb6\x62\xf3\x42\x6c\x46\xf2\x02\xf1\xd5\x80\xa4\x5a\x32\xe0\xd6\x19\x0d\x19\x66\x99\x14\xe9\x66\xaf\x45\xfb\x0d\xc4\x46\x5c\xa7\xcb\x05\x29\x17\xae\x8c\x70\x74\xc9\xd1\xd1\x58\xff\x70\x46\xa8\xd9\xe5\x45\x5d\x83\xd7\x56\xf8\x4d\x9b\x05\x3a\x60\xfd\x38\xfe\x10\xc4\xbd\x20\xee\x8f\x7b\xd7\x83\xf8\xfd\x20\xbe\xfe\x19\x7f\x1c\xc4\xb1\x7f\x59\x2f\xae\xae\x92\xa8\x62\x8f\x5e\x57\x6e\x9d\xeb\x2b\x3a\x7c\x75\xaf\xbb\x42\xd7\x19\x9d\x1c\xec\xb5\xf7\xe2\xe0\x6e\xe1\x41\xa5\x97\x6a\x57\x77\x49\xb4\x5d\x7e\x49\xb4\xd9\x62\xad\xdb\xb3\x23\x4f\x12\x71\x91\x37\xfd\x29\x1c\x7d\x74\xc4\xfc\xcc\x74\xf0\x73\x7b\xdc\x7e\xed\xca\xf9\x1d\x00\x00\xff\xff\x57\x31\x71\x29\x54\x09\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xcf\x6b\xd4\x4e\x18\xc6\x9f\xe6\xdb\x6f\x95\x78\x91\x9e\x3c\x78\x78\x3d\x58\x14\x99\x9a\xec\x5a\xd1\xb4\x69\xc5\xda\x82\xd8\xa5\xa5\xa4\xde\xc7\xee\x98\x06\x77\x33\xcb\x4c\x52\x15\x8a\xd4\x82\x07\xa1\x20\x08\x9e\x3c\x14\xfd\x0b\xfc\xc1\xe2\x8a\x35\xde\x3c\xca\x1b\xbc\x78\xd1\xbf\x45\xb2\x1b\x2d\xbe\x87\x79\x9e\xcf\xcc\x33\xef\x3b\xf3\x6b\x72\xfc\x05\x00\x1c\x03\x70\x1a\x40\x04\xe0\x04\x80\x7d\x8c\x6a\x00\x60\x1c\xc0\xc7\x3a\x53\xd4\xfa\xb5\xde\xff\x56\xeb\xf7\x5a\x7f\x00\xd8\x1a\x03\x7e\x02\x38\x0e\x60\xd9\x01\x26\x01\xac\x3a\xc0\x49\x00\x77\x1c\xc0\x05\x60\x1d\x60\x02\xc0\x23\x07\x38\x05\xe0\x89\x03\x8c\x01\xf8\x1f\x80\x53\xcf\x1e\xaf\xb5\x9a\x37\x81\xa3\xfa\xaf\x5a\x56\x74\x6c\xd1\x52\xd6\xca\x58\x61\xcd\xa8\xed\x44\xdd\x47\x94\x74\x15\xa2\x87\x3d\x85\x0d\xab\x0c\xd6\x55\x4f\x9b\x4c\xb4\x6c\x9c\xb4\xc5\xf5\x3c\xb6\x22\xd2\x01\xb5\xd5\xf6\xb5\x7b\xc9\x96\xec\xea\x69\x93\xbb\x6b\xab\x91\x58\x34\x4a\x66\x89\x4e\xc5\x0d\x99\xa9\x80\x1a\x9e\x7f\x55\x78\x4d\xe1\x5f\xa6\x46\x33\x98\x99\xb9\xe0\x35\x3d\xcf\x5d\x91\x36\x13\x91\x91\xa9\xed\xc8\x4c\x9b\x80\x6e\x0d\x7b\x50\x2b\x37\xb2\xab\xdb\x9a\xe6\xfe\x69\x3c\xef\xae\xc8\x34\xce\x65\xac\x44\xa4\x64\x37\xa0\xbf\x1c\xd0\x7a\x6e\x6d\x22\x53\xb7\x75\xb3\xb5\x24\x6e\x2b\x63\x13\x9d\x06\xe4\x4f\x7b\xee\xa2\x4e\x33\x95\x66\xa2\xfa\x43\x40\x99\x7a\x90\x5d\xec\x75\x64\x92\xce\xd2\xe6\x96\x34\x56\x65\xe1\x46\xb4\x2c\xae\x1c\xe5\xaa\xf7\xdc\x55\x46\x2c\xa5\x9b\xba\x9d\xa4\x71\x40\xee\x5a\x27\x37\xb2\x23\x96\xb5\xe9\xda\x80\xd2\xde\x10\x6d\xd8\x9c\xa5\x91\x0d\xd3\xb3\xbe\x17\x86\x3e\x4d\x4d\x51\x65\xbd\x33\xa1\xef\xd3\x02\x79\x14\x0c\x79\x3e\x6c\xfc\x39\x9a\x0b\x2f\x55\xf6\xdc\x30\x36\xe7\x7b\xb4\xb3\x33\xba\x32\x1f\x36\xbc\xf3\xb4\x40\x3e\x05\xd4\x98\x05\xbf\xe4\x82\xdf\xf3\x00\xfc\x8a\x0b\x2e\xf8\x6d\xf9\x94\xfb\xfc\x99\x07\xdc\x07\x1f\x94\xbb\x5c\x94\x8f\xf9\x90\x8b\x72\xaf\xdc\x05\x3f\x2f\x77\xb9\xcf\x87\xe5\x33\xf0\x6b\x1e\xf0\x17\xf0\x01\x17\xfc\xa9\xdc\xe7\x0f\x5c\xf0\x3b\x7e\x53\xee\x71\xbf\x62\xfc\x0e\x00\x00\xff\xff\x0b\xfe\x56\xb2\x9e\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
