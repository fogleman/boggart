// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package xmeye

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6e\xdb\xb0\x15\xbe\xcf\x53\x9c\xb1\x19\x64\x03\x95\x64\xa7\x3f\x1b\x54\x3b\x05\xb6\x74\xe8\x45\xd2\x06\x4d\x3a\x20\xbb\x29\x68\x89\xb6\x99\x52\xa4\x4a\x52\x8e\x0d\xc3\xef\x3e\x50\x94\x64\xd9\x96\x6c\xd9\x6d\xd0\x0d\x68\x2e\x5a\x82\x3a\x3c\x7f\xfc\xce\xc7\x43\x7a\xb9\x84\x88\x8c\x29\x27\x80\x42\xc1\x35\xe1\x1a\xc1\x6a\x75\x36\x88\xe8\x0c\x42\x86\x95\x1a\xa2\x04\x4f\x88\xab\xa9\x66\x04\x5d\x9e\x01\x00\x54\x3f\x8e\x85\x8c\xdd\x89\x14\x69\x02\x49\xca\x98\x2b\xe9\x64\xaa\x73\xb9\x6d\x59\xca\x93\x54\x5b\xe1\x8a\x44\x26\xc5\xf0\x88\xb0\x42\x6e\xa4\x79\xad\x54\x26\x89\x61\x2a\xc9\x78\x88\xde\xe3\x50\x53\xc1\x87\xa1\xe0\x63\x3a\x51\x2e\x99\x27\x42\x6a\x54\xd1\x01\x46\x0f\x0d\x85\x1d\xa8\x34\x0c\x89\x52\x76\x1c\xd7\x68\xce\xb4\xd3\x32\x2e\xac\x60\x8c\xdd\x50\x4c\x10\x64\xb1\x0f\xd1\x72\x09\xb4\xff\x77\x0e\xe8\x43\x66\x0a\xac\xe5\x54\x62\xe3\x07\x02\x0f\x56\x2b\x74\x39\xf0\x69\x8d\xd3\x3e\x6e\x11\x09\x13\xcf\x16\xc6\x94\xe0\x48\x11\xdd\x18\x8a\x31\x7d\x5c\x04\x03\x3f\xdb\xb2\xca\x46\xfb\x11\x9d\xe5\xf8\xb0\xc3\xfc\xbf\x0d\x2c\x85\x8c\x60\x39\xa6\x73\x63\x66\xf7\xab\x14\x4f\x35\x10\x0b\x05\x73\xe3\xc8\xed\x5f\x80\x19\xa9\xb8\x18\xcd\x95\xdb\xbf\x68\x80\xda\xfc\x5b\x82\x39\x61\xdb\x30\xdb\x90\x28\xf0\x5e\x13\xad\x91\x93\xc2\x64\x4a\xe3\x51\x9d\xa6\x52\x32\x2d\x51\xcb\xf1\x0c\x38\x9e\xb9\x1a\x8f\x14\x8c\xb0\xfc\x66\x06\x68\xad\x86\x51\x55\x67\xab\xd4\xc4\x68\x2e\x9b\x48\xa2\x08\xd7\x16\x56\x66\xa7\xc6\x40\x7e\x80\x67\x51\x02\xc8\xd4\x67\x61\xd3\xcc\xcd\x88\x11\x22\x3c\x82\xd5\xea\xb2\x04\x55\xfd\xba\x47\x3c\xc3\x2a\x94\x34\xd1\xc1\x4c\xd0\xa8\xd3\xeb\xbe\x33\x6b\x99\x22\xb0\x5a\x2d\x97\xe0\x7d\x21\x3f\x52\xa2\xb4\xf7\xf5\xcb\xb5\x77\x8b\xf5\xd4\x4e\x5b\xe5\xe8\xb2\x84\xcd\xdd\x42\x69\x12\x5b\xc4\x18\x68\x0c\x7c\x56\x03\x9a\xa3\x43\xb3\x30\x3c\x2d\xbc\x62\xed\x29\x21\x56\x2b\xb0\x2e\xdc\xeb\xb2\x3c\xf6\x07\x3b\xf0\x53\xd6\xf0\xa5\x82\x3c\x8d\x47\x6e\x33\xf6\xf6\x61\xb0\xaa\xc1\xcc\xc0\x18\x47\x04\x6c\x96\x80\xf2\x3d\xda\x9a\xf3\xd5\xec\x80\xc1\x2c\xa9\x98\x64\x04\xb2\x7f\x5d\xa5\x25\x4d\x48\x04\x11\xd6\xd8\xce\x47\xda\x95\x44\x25\x82\x2b\xe3\x09\x17\x4f\x12\x27\x08\x94\x5e\x18\xf7\x9f\x68\xa4\xa7\x41\xbf\xd7\xfb\xeb\x1e\x07\xad\x45\xc3\x53\xfb\x65\xac\x9c\x3c\x2c\x94\x2b\x5c\x6f\xe2\x8b\x62\x07\xf5\xf4\x84\xd5\xf7\x34\x26\x3f\xa5\xe0\x86\x28\x85\x27\x3f\xa7\xe3\x7e\x91\xfc\x9c\x82\xaf\x8a\xc8\x63\x14\x0c\xfc\x43\xa9\x36\x7a\x0e\x6e\xda\x40\x8f\x44\xb4\x38\x6c\x6e\xb9\x04\x89\xf9\x84\xc0\x39\x7d\x09\xe7\x4c\x4c\x20\x18\x82\x67\x90\xba\x0f\xa8\x6b\x2b\xad\x61\x11\x99\x94\x18\x03\xde\xad\x50\x34\x2b\x88\x2c\x25\x2d\xc0\x57\x28\x18\x58\x92\x01\xbd\x48\xc8\x10\xe1\x24\x61\x34\xcc\x78\xcd\x5f\x33\x10\xba\x8c\x44\x98\xc6\x84\x6b\xef\x49\x52\x4d\x3a\x11\xd6\xe4\x5e\xdc\x69\x49\xf9\xa4\xe3\x14\x3e\x18\x6c\x79\xff\x12\x32\xc6\x1a\xd0\x45\xaf\xf7\xd6\xed\xf5\xdd\xde\xc5\x7d\xff\x4d\xd0\x7b\x1d\xf4\xde\xfc\xa7\xf7\xb7\xa0\xd7\x33\xc5\xea\x74\xbb\x03\xdf\xea\xbe\x3c\xce\xdd\xc2\xd6\x15\xd6\xf8\xe8\x58\x4b\x47\x17\x09\x39\x79\xb1\xc1\x5e\xeb\xc5\x87\x81\x07\x16\x2f\x96\xab\x0f\x41\x74\x3f\xfc\x06\x7e\xc6\x62\x7b\xd9\x33\x3f\x40\x9a\x75\x98\x46\x38\xe7\x6b\x33\x44\x90\x9f\x29\xe8\x3d\x82\x98\xe8\xa9\x88\x86\x28\x11\x4a\x23\xa0\xd1\x10\x29\xa2\x35\xe5\x86\x81\x0d\x89\xba\x5a\x4c\x26\x66\xe5\x0c\x33\x1a\x61\x2d\xe4\x41\xa6\xdc\xe5\xe6\x5f\xc3\xc1\xf0\x4c\x3c\x5c\xf8\x1a\x47\xae\xe9\xdd\xfa\x95\xd3\xf5\x73\xb2\x6e\xa0\x4f\xe4\xb5\x7f\x63\x96\x1e\xc5\x8c\xed\xf0\xd5\x8a\xdc\xe0\x08\x82\x83\xf2\x28\xf6\x34\x8d\xc9\xb7\x30\x95\x92\x70\xdd\x86\xdd\xe0\x98\x84\x5b\xe1\x08\xa4\x78\x52\x09\xe6\x43\x74\x81\x1a\x8e\xb2\x96\x85\x9c\x2b\x6c\x2f\x0c\x35\x4d\xfc\x5c\xb9\xaf\x5b\xc0\x6f\x47\x4d\x76\x6f\xcc\x89\x56\x93\xf9\xfa\x76\x94\x5d\x3e\x4d\x2b\x25\x05\x43\xc0\x71\x6c\x04\x68\x4c\xdc\x3c\xaf\x08\x66\x06\x18\x59\xbb\xb8\x91\xf0\x0d\xb6\xf5\x7a\x7d\xaf\x77\x01\x39\xdb\xbe\x35\x3c\x6b\x8b\x74\x53\x95\x24\x38\x12\x9c\x2d\xc0\x3f\x32\x0b\xeb\x8b\x51\x3b\xf1\xd6\xe4\xda\x0a\xc3\x70\x02\x6e\x7e\xcf\x36\xb7\x7a\x29\x68\xad\xed\x68\xd0\xfc\x02\xb0\xa0\x63\xb1\x51\x7a\x6b\xaa\xb4\x26\x78\x77\xa4\xf7\x75\xf5\x07\xd5\x8e\x52\xad\x05\xdf\x79\x4c\xe0\x63\x81\xf2\xd4\x58\x89\x0a\xde\xb9\xb9\x83\x97\x5c\xf1\x49\x3c\x15\x54\x61\x25\x4f\x8c\xcf\x37\x01\x9e\x80\x89\xe3\x6a\xe7\x84\x25\xcf\x51\x6e\x2d\xda\x85\x0d\xc5\xc7\x56\xe7\xff\x04\x93\xbf\xfa\x53\xe2\xc7\x79\xfb\xa7\xc4\x1b\xd6\xfd\xbf\x96\xb8\xbd\x79\xb4\x69\x22\x0f\x37\x87\x07\xaf\x20\x03\xdf\x80\x7a\xff\x15\x65\xff\x55\x68\x4f\xd6\x1a\x3e\xd5\x4c\x6f\x4d\x35\x3e\xfa\x56\xf2\x53\xf9\x85\xc1\x34\xd3\xe5\x9b\x53\xfd\x0b\xe5\x59\x25\x20\xa5\xb1\xa6\xe1\xc7\xfb\x9b\x6b\xe8\xd8\xf1\xd7\x2f\xd7\x80\xfc\x08\xab\xe9\x48\x60\x19\xf9\x58\x29\xa2\x95\x3f\x23\x3c\x12\x52\xf9\x23\x21\xb4\xd2\x12\x27\xae\xb9\x68\x67\x4f\x09\x09\x0d\xbf\x13\xe9\x87\x4a\xf9\x5b\x73\x5e\x4c\xb9\x17\x2a\x85\x60\x8c\x99\x22\xdd\x8a\x5f\xb9\xeb\xf5\x41\x3c\xaa\xe7\x0c\x21\x16\x31\xe1\xda\x7f\x2c\x46\x99\x97\x8f\x3b\x4e\xfe\xfa\x0c\x3d\xd6\x27\x68\xd3\xf4\x7a\xe3\x5b\xbd\x7e\x6c\x40\x67\x9c\x72\x9b\x24\x45\xb4\x39\xb8\x3a\xba\x0b\xcb\x1d\xcc\x9d\x7b\xf8\x11\xcf\x3b\xbb\x1f\xcc\x9f\xb1\x16\x80\x73\xfb\xf9\xee\xde\x79\x59\x2b\x91\x4a\x16\xc0\x79\xc7\x79\x51\x5c\xb0\x9d\xae\x97\x48\x91\x74\x1c\xbb\x43\x4e\xb7\x7e\x9d\xb9\x85\x07\x35\xee\x94\x96\x69\x4c\x02\xd0\xb5\xdf\x57\xf5\x2a\xf3\x5f\x6a\x82\x75\xe0\x1d\x59\x17\x71\xf1\x47\xc7\xd0\x91\x9e\x24\x2a\x65\x1a\x86\xc3\x21\x38\x63\x4c\x19\x89\x9c\x7d\x8b\xcc\x1f\x27\x4f\x70\xfb\x49\x68\x3a\x5e\x34\xe4\x6d\x33\x12\xcd\x4c\x12\x3f\x48\x29\x64\x43\x16\x37\xe4\xc9\x5c\x07\x20\xbd\xd8\xbe\x5f\xb6\x58\x60\x37\x89\xb4\xd4\x3f\xa5\x11\x09\x2c\xc4\x0e\x0b\x2b\xbd\x60\x94\x4f\x02\x70\x4a\x20\xbf\x72\xf6\xae\x5a\x75\xdf\x35\x7e\x5f\xd9\x36\xcd\x26\x3e\x8f\x0f\xfe\x62\x32\x9f\x72\x5b\xed\xcf\x95\xfc\x3b\x8b\x8d\x67\x4c\xbf\x6a\x6d\xe1\x77\x6e\x40\x7d\x3d\xed\xcc\x6e\xeb\xd8\x3a\x75\xcf\x3b\xc5\x33\x6b\xd7\x33\xb7\xf4\x45\x67\x5d\x72\xb5\x1c\xd3\x71\x5e\x98\x82\x76\xba\xde\x16\xe5\x35\x6c\xa1\xa2\x7c\xc2\xc8\x15\xd6\xe4\x36\x13\x0b\x40\xcb\xb4\x21\x5b\x86\x0b\x17\xff\xc8\x1a\xa9\x7f\x9a\x9e\x8c\x28\x93\xac\xf5\x2f\xb7\x0d\x3b\xc2\x44\x88\x0d\x34\x9a\x31\x34\xce\x5a\xd4\x00\x9c\x87\x87\x87\x07\xef\xe6\xc6\xbb\xba\x82\x8f\x1f\x83\x38\x0e\x94\xaa\xdf\x82\x9a\x44\xbe\x2c\xd9\xc8\x9c\x17\xb2\x96\x82\xb3\x88\x73\x8e\xb6\x87\x50\x2e\xeb\x59\x17\x3a\xb5\x1e\x74\xbb\xb5\xdb\xd6\x98\x7c\xd3\x85\x3a\x5d\x2f\x64\x34\xfc\x7e\x60\xbf\xaa\x0e\x39\xd9\xb2\x1a\x53\x67\xdb\x96\x8b\x71\xf9\x60\xde\x78\xba\xff\x37\x00\x00\xff\xff\xe8\x3a\xc9\x8e\x04\x21\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xdf\x4b\xe4\x56\x14\xfe\x62\x6c\x6b\xa7\x3f\x68\xa5\x0f\xa5\xf4\xe1\xf6\x41\x69\x1f\x62\x27\xb6\x05\x89\x46\x4b\xad\x42\xa9\xd3\x8a\x1d\x85\x3e\x86\x99\x6b\x4c\x3b\x93\x0c\xb9\x89\x55\xb0\x74\x1c\xa5\xb6\x20\x2d\x08\xcb\xc2\x2e\xec\x32\x3e\xef\xc2\xec\xca\x60\xf0\x47\xfc\x17\xce\x7d\xda\xb7\x85\x7d\xdb\x87\xfd\x23\x96\x9b\x64\x5c\x16\x16\xf6\x42\x72\xbf\x73\xce\x77\xbe\xf3\x9d\x90\xc7\xa3\xc3\x37\x00\xe0\x3d\x00\x9f\x02\xd8\x07\xf0\x21\x80\x67\xc8\x4f\x59\x03\x46\x01\x98\x1a\xf0\x11\x80\xef\x35\xe0\x1d\x00\xbf\x6a\xc0\x30\x00\xae\x01\x6f\x01\xf8\x4d\x03\x74\x00\xa1\x06\xbc\x09\x60\xb3\xa8\xff\x59\xdc\x9d\xe2\x3e\xd0\x80\x37\x00\x1c\x6a\xc0\xfb\x00\x8e\x34\x60\x4e\x03\xba\x1a\x30\x05\xe0\xc9\x10\xf0\x0d\x80\x4f\x74\x60\x0c\xc0\xb2\x0e\x8c\x28\x3d\x3d\xf7\xf1\x97\x5e\xf4\xe9\x40\x09\x40\xb7\xb8\xef\xe9\xf9\xdc\x53\x1d\xf8\x18\x40\xaa\x03\x1f\x00\x78\x54\xe4\x9f\xea\x80\x86\xdc\x83\x3a\x6a\x87\x91\x02\xab\xfa\xbb\x05\x56\x5a\x6a\x1f\xbd\x88\x87\x90\xfb\x55\xdf\xe7\x6d\x95\x98\x0f\xfc\x75\xcf\x65\x82\x47\x4c\xc4\xb5\x1a\x17\x02\x0b\x5b\xad\x20\x8c\x58\x2d\xab\xc4\xa1\x13\x79\x81\x3f\x48\x36\x02\x57\x60\x49\xbd\x2a\x5c\x08\xc7\xe5\xf8\x29\xf8\x03\x3f\xb7\x32\x4e\xd5\x6b\x72\x54\xb7\x5b\x1c\xab\x82\x87\x58\x73\x1a\x31\x07\x75\x29\x91\xbb\xb2\x43\x7d\xba\xa0\x1e\x56\xb8\xd2\x31\x2a\xc2\xf5\xea\xc6\x77\xb1\x2b\x8c\x6a\x60\xb1\x3a\xdf\xfc\xf6\x77\x6f\xc3\x69\x06\x13\x61\x5c\x5a\x72\x44\x64\x54\x43\xc7\x17\x0d\x27\x0a\x42\x8b\xfd\x98\x95\x58\x25\x0e\x9d\x66\x50\x0f\xd8\xcc\x4b\xfc\xd9\xd2\x92\xe3\xbb\xb1\xe3\x72\xa3\xca\x9d\xa6\xc5\xae\x63\x8b\xad\xc4\x42\x78\x8e\x5f\xaa\xfc\x50\x59\x30\xd6\x78\x28\xbc\xc0\xb7\x98\x39\x51\x2e\xcd\x07\x7e\xc4\xfd\xc8\x50\x7e\x2d\x16\xf1\xad\xe8\xcb\x56\xc3\xf1\xfc\x69\x56\xdb\x70\x42\xc1\x23\x7b\xb5\xba\x68\x4c\xbd\xe0\x29\x3f\xeb\x3c\x34\x16\xfc\x5a\x50\xf7\x7c\xd7\x62\xa5\xe5\x46\x1c\x3a\x0d\x63\x31\x08\x9b\xc2\x62\x7e\x2b\x0b\x85\xfd\xd5\x34\xcb\xa1\xed\x8f\x99\x65\xdb\x36\xd9\xf8\x38\x53\xb0\xfc\x99\x6d\x9a\x6c\x8e\x95\x99\x95\xc5\xb3\xf6\xe4\xa0\x34\x63\x7f\xad\xe0\xe7\x19\x6d\xc6\x2c\xb3\x9d\x9d\xbc\x65\xd6\x9e\x2c\x7f\xc1\xe6\x98\xc9\x2c\x36\x39\x0d\xba\x45\x29\x5d\xca\x7d\x4a\xe8\x44\xee\xc9\x36\xf5\xe4\xdf\x94\xc8\xff\x99\xdc\x93\xbb\x74\x45\x7d\xf9\x0f\x5d\x52\xca\x28\xa1\x53\xba\xa0\x3e\x5d\x66\x4f\x0f\x74\x9f\xce\x32\x46\x2a\xdb\xb2\x43\x89\x6c\x53\x4a\x0f\xa9\x27\x3b\xf2\x90\xd1\xd9\x2b\x55\xff\x7b\x4d\xd7\x39\xa5\x74\x42\x09\xe8\xf6\x00\x74\x29\xa5\x94\x1e\xc8\x7f\xb3\xa9\x09\xf5\x41\xc7\xd4\xa7\x33\xb9\x97\xa5\xfa\xa0\x3b\x74\x95\x3b\x06\x1d\xc9\xb6\xfa\x2b\x14\x3c\xa6\x84\xae\x40\x77\x29\xa5\x73\x79\x48\xa7\x83\x29\xd4\x57\x31\xe8\xa6\xda\x41\x1e\x5c\xab\xfe\xb2\x2d\x22\xde\xc4\xf3\x00\x00\x00\xff\xff\xb6\x0e\x85\xf6\xef\x03\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
