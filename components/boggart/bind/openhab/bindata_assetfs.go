// Code generated by go-bindata.
// sources:
// templates/layouts/ui.html
// templates/views/image.html
// templates/views/input.html
// templates/views/link.html
// DO NOT EDIT!

package openhab

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLayoutsUiHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x8f\x9b\x3c\x10\xbe\xe7\x57\xcc\xeb\xf7\xba\xde\x24\xb7\x2a\x0b\x91\xaa\x74\x2b\xf5\xd4\x1e\xb2\x52\x7b\x9c\xd8\x03\xb8\x31\x36\x6b\x26\xd9\x46\x28\xff\xbd\x32\xec\x36\x04\xc8\xaa\x52\xcd\x01\xe6\xe3\xf9\x18\xcb\xb8\x69\x80\xa9\xac\x2c\x32\x81\xd8\x59\x74\x7b\x01\xf7\x70\x3e\xcf\x66\x4d\x03\x9a\x32\xe3\x08\x84\xf2\x8e\xc9\xb1\x88\xf9\xe4\xbf\x4f\x5f\x37\xdb\x1f\xdf\x1e\xa1\xe0\xd2\xae\x67\x49\x7c\x81\x45\x97\xa7\x82\x9c\x58\xcf\x00\x00\x92\x82\x50\x77\x9f\x6d\x58\x12\x23\x14\xcc\x95\xa4\xe7\x83\x39\xa6\x62\xd3\x31\xca\xed\xa9\x22\x01\xaf\xfc\xa9\x60\xfa\xc5\xf3\x48\xf8\x00\xaa\xc0\x50\x13\xa7\x4f\xdb\xcf\xf2\x83\x18\x72\xbd\x55\xc5\x81\xb3\x89\x72\x5f\xea\xbb\x7c\xfa\x28\x37\xbe\xac\x90\xcd\xce\xf6\xd5\xbe\x3c\xa6\xa4\x73\x1a\xa1\x1d\x96\x94\x8a\xa3\xa1\x97\xca\x07\xee\x01\x5e\x8c\xe6\x22\xd5\x74\x34\x8a\x64\x1b\xdc\x81\x71\x86\x0d\x5a\x59\x2b\xb4\x94\x2e\xc5\x7a\x76\x61\xab\xf9\x64\x09\xf8\x54\xd1\xeb\x68\xaa\xae\x7b\x6a\x71\xed\xbc\x3e\x41\x73\x95\x8a\xab\x42\xad\x8d\xcb\x57\x8b\x87\x51\xa9\xc4\x90\x1b\x37\x55\xb1\xc4\x4c\x41\xd6\x15\xaa\x88\x85\x41\xcb\xf9\x2a\x32\x65\x3e\xa1\x9b\x59\x8f\xbc\x02\x4b\x19\xbf\x0b\x76\xd5\x81\xef\x20\xce\x84\x81\xf0\x36\x51\x30\x79\xc1\x63\xa7\x11\x28\xd1\x9a\xdc\xad\x40\x91\x63\x0a\x43\xb5\xab\xb0\x69\xc0\x64\x40\xcf\x70\xdf\xed\xa8\x40\xa7\x83\x37\xba\x3d\x90\x43\xee\x4b\x33\x17\x54\x12\x08\x8d\x61\x3f\xd9\x79\x63\xef\xdb\x12\xaa\x7d\x1e\xfc\xc1\x69\xa9\xbc\xf5\x61\x05\xff\x2f\x97\xcb\xf1\x20\x71\xbd\x35\xa0\x8a\xcf\xa8\x65\xd2\x21\xd9\x9a\xfe\xdd\x52\x96\x65\xef\x5b\x5a\x2c\x16\x7f\xe9\xc7\xe9\xa1\x9d\x71\x36\x99\xb7\xdb\xdf\x3b\xe1\x4d\x03\x3b\xeb\xd5\x1e\x44\xfc\xe1\xbb\x9b\x63\x00\x4c\xe6\x97\xbb\x20\x89\xe3\xad\x27\xd0\x31\x3f\x89\xbe\x6e\xfb\x59\xdf\x90\xe8\x78\x93\x79\x77\x25\xfd\xa9\xfe\x0e\x00\x00\xff\xff\x10\x78\x6d\xc4\xdd\x04\x00\x00"

func templatesLayoutsUiHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutsUiHtml,
		"templates/layouts/ui.html",
	)
}

func templatesLayoutsUiHtml() (*asset, error) {
	bytes, err := templatesLayoutsUiHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layouts/ui.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsImageHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xd1\x6b\xdb\x3e\x10\x7e\xcf\x5f\x71\x88\xdf\x6f\x96\x97\x44\x6e\xc7\xd8\x43\x53\xf7\x61\x65\xd0\x42\xc7\x46\xda\xc2\x60\xeb\x40\x91\xce\x89\x3a\x5b\x72\x25\xb9\x6e\x30\xfe\xdf\x87\x6c\xa7\x71\xc3\xca\x98\x9e\x2c\xdf\x7d\xba\xef\xbe\xfb\xae\x69\x40\x62\xa6\x34\x02\x59\x19\xb9\x25\xd0\xb6\x13\x00\x80\x53\x55\xac\xc1\x59\x91\x12\xc9\x3d\x3f\x69\x1a\x60\x85\x2a\x10\xda\x76\xb1\xe2\x0e\x3f\xbc\x9f\x85\x5f\xfd\x27\xb4\x2d\x01\x25\x53\xa2\x0a\xbe\xc6\x79\x00\x10\x30\x5a\xe4\x4a\xfc\x4a\x89\x34\xb5\xce\x0d\x97\x34\x26\xe0\xfc\x36\xc7\x94\xd4\x4a\xfa\xcd\xc9\xf1\xd1\xd1\xff\x04\x92\xb3\x49\xd3\x00\x6a\x19\x2a\x4f\x46\x74\xee\x5d\x47\xe6\xd4\x09\xab\x4a\x0f\x7e\x5b\x62\x4a\x78\x59\xe6\x4a\x70\xaf\x8c\x4e\xee\xf9\x23\xef\x83\xe4\xac\xe3\x9c\x55\x5a\x84\x08\xec\x4b\x42\xd3\x45\xc2\x69\x1a\x50\x19\xe0\x03\xb0\x8e\x05\x90\x15\x77\x4a\x54\xea\xb9\xe5\xdd\x79\xe4\x16\x38\xa4\x20\x8d\xa8\x0a\xd4\x9e\x09\x8b\xdc\xe3\xa7\x1c\xc3\x8d\x46\x3c\x8a\x17\x93\x17\x08\xce\x36\x16\xb3\x31\x64\x8d\x7e\xc8\xff\xb8\xbd\x94\x34\xda\x2b\x13\xc5\xcc\x59\xb1\x38\xc0\xef\x18\x43\x0a\x51\x10\x36\x53\x39\x6a\xde\xe9\x1d\x1d\xe6\x76\xba\xd2\x78\x31\xee\x0c\x73\x87\x7f\xea\xa3\xe0\x5e\x6c\xd0\xfd\x0b\x35\xd6\x61\x68\xf2\xb3\x1b\x3c\x65\xd3\x1f\x09\x9b\xc6\xbb\xa9\x53\xf6\x36\xfe\x2f\x39\x14\x20\x94\x7a\x2a\xf2\x0b\xef\x4b\x48\x41\x63\x0d\xdf\x3e\x5f\x85\xdb\x12\x1f\x2a\x74\x7e\xcc\x36\x9c\x21\x97\x99\x12\x35\x25\x5f\xbf\x5c\xdf\x90\x19\x90\xd0\xf8\x00\x60\xb7\xcb\x2b\x76\xed\xad\xd2\xeb\xe0\xae\x19\x78\x5b\xe1\x2b\x8f\x38\xf4\x03\xea\x02\xb9\x44\x4b\xc9\xb9\xd1\x1e\xb5\x9f\x07\xcf\x84\x87\xc7\xae\x79\x9a\xd7\x75\x3d\xcf\x8c\x2d\xe6\x95\xcd\x51\x0b\x23\x51\x92\x57\x9f\xd6\x92\x92\x60\xfc\x94\xc0\x14\xfa\xec\xdb\xe5\xe5\xb9\x29\x4a\xa3\x83\x1b\x06\x81\xbf\x1f\xdf\xc5\x30\x05\xf2\xa6\xe4\xdb\x30\xc7\xbf\xa5\xbf\xbb\x8b\x0f\x06\xd8\x2f\x40\xb8\xb5\xbd\xb6\xbd\x5f\xd7\x1e\x98\xc5\xcc\xa2\xdb\xc0\xd1\x78\xc2\x0e\xfd\x8d\x2a\xd0\x54\x9e\xee\x7c\x4f\xe3\xe6\x45\x17\xb5\xd2\xd2\xd4\x2c\x37\x7d\xeb\xcc\x62\xb7\x14\x07\x52\xb6\xb3\x50\xea\xb9\x48\xdb\x0e\xb1\x3d\xa9\xd3\xa4\x5f\xb3\xd1\xa6\xfe\x0e\x00\x00\xff\xff\x3a\x5e\x36\xfe\x37\x04\x00\x00"

func templatesViewsImageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsImageHtml,
		"templates/views/image.html",
	)
}

func templatesViewsImageHtml() (*asset, error) {
	bytes, err := templatesViewsImageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/image.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsInputHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5b\x6f\xdb\x36\x14\x7e\xef\xaf\x38\x63\x31\xd4\xde\x2c\x5f\xeb\x20\x75\xec\x00\x5b\x37\xa0\xc3\xb2\x75\x48\xda\x61\x6f\x05\x2d\x1e\xd9\x6c\x28\x52\xa5\xa8\xd8\x99\xe1\xff\x3e\x50\x97\x88\xba\xd9\x69\x1f\x46\x3e\xd8\xe6\x39\xfc\x78\xae\x9f\xcf\xe1\x00\x0c\x03\x2e\x11\xc8\x5a\xb1\x47\x02\xc7\xe3\x8b\x65\xa0\x74\x08\x4a\xde\x25\xeb\x90\x9b\x15\xd1\x68\x12\x2d\x21\xa0\x22\x46\x72\xfd\x02\x00\xe0\x70\x00\x1e\x80\x44\x18\x72\x5f\xc9\x4f\x89\x16\x40\xd2\xbb\x56\xb8\xe4\xe1\x06\x62\xed\xaf\xc8\xe1\xe0\x28\x1c\x8f\x04\x46\x4f\xd7\x51\x32\xab\x5f\x47\x33\x18\x7e\x12\x74\x8d\x15\xbc\xec\x20\x50\x7a\x45\x1e\xa8\x48\x90\x5c\xa7\xc0\xa5\xee\xf1\xb8\x1c\xa5\xdf\x4e\xc0\x53\xc9\xa0\x87\x5f\x60\x68\x1e\x23\x04\x62\x70\x6f\xa8\x46\x4a\xfa\xd0\x7b\x7a\x39\x13\xfd\x42\x0d\x7e\xe0\x21\xb6\x88\xfe\x4c\xc2\x35\x6a\xd2\x2f\x4c\x2b\xe1\x2d\x72\x6c\x1e\x05\x02\xa1\x92\x69\xc5\x19\x71\x95\x52\x3f\xd6\x89\x31\x4a\x82\x92\xbe\xe0\xfe\xfd\x8a\xc4\x28\xd9\xdf\xd6\xa1\x5e\x3f\x75\x89\x4f\x2e\x25\x90\xf7\xbf\x13\x18\xa6\x2e\x65\xfa\xd7\xee\x4b\xae\x5f\xcb\xc2\x87\x9a\x29\xd6\x66\xad\x76\xb1\x13\xc2\x62\xd9\xe3\x2c\x2d\xa9\xc2\xf1\x48\xba\xc0\xab\x70\x67\x3c\x53\xf2\xed\x96\xca\x0d\x56\x5d\x3a\x05\x6d\x17\x67\x45\x3e\x41\xd2\x10\xdd\xe4\xba\xe5\x10\x1b\x6a\x6c\xe8\x3f\xde\xdc\xd8\x87\x9f\x52\x9f\x9d\xa7\x07\x19\xfa\x72\x54\x04\xa4\x2c\x03\x11\x63\x59\x96\x32\x4a\x4c\x4b\xda\x9a\xf9\xad\xfb\x67\x85\x2b\x22\x33\x61\xc5\x2d\x8b\xdf\x84\x79\xaa\xa0\x76\x20\x46\x0d\x1a\x1e\xa2\x27\x94\x4f\x45\x13\xb0\xf5\x92\xf5\xed\x99\xd9\x6a\x0b\x5b\x05\x31\x0d\x74\xde\x9e\x6e\x28\xbf\x35\x65\x1d\x05\x00\xf5\x76\x5c\x8e\x2c\xb5\x5c\xbf\x70\xd0\x1d\x02\xda\x22\xcd\x4a\x6b\x99\x95\x5b\xe9\xf7\xc8\x8f\xe3\x0a\xf3\x9c\xe8\xb6\x1f\xe0\xf0\x64\xb2\xe0\x12\xbd\x2d\xf2\xcd\xd6\x2c\xe0\xf5\x38\xda\x5f\xa5\xa2\x4c\xd1\xf2\x9d\xa3\x1b\x28\x69\xbc\x98\xff\x8b\x0b\x98\x5c\x56\x35\x2d\x9f\x95\x8a\x21\xd5\x1b\x2e\x3d\x81\x81\x59\xc0\xb4\xd0\xb4\x6b\xc7\x99\xd9\xba\x0f\xd9\xd5\xf5\x7c\xc6\x5c\x25\x6c\x44\x19\xe3\x72\x93\xe3\xce\x6b\x16\xd8\xd2\x1d\x40\x4e\x20\x87\x06\xf8\x6c\x1a\xed\xe1\x3b\x1e\x46\x4a\x1b\x2a\xcd\x95\x63\xec\xde\x3b\xab\x64\x43\xec\x51\xc1\x37\x72\x01\x3e\x4a\x83\xba\x55\xad\x12\xcd\x56\xb0\xcc\xd8\xa2\x0b\xbb\x12\x31\x19\xce\x31\xac\x64\xa2\xee\x56\x20\x14\x35\x0b\xd0\x56\xbf\xe3\xfd\xe9\x65\xe7\xfb\x79\xb0\x5a\xcc\xb0\xd1\xc8\x93\x34\x1f\x7f\xef\x44\x89\xcb\xc6\x79\x2b\x56\x4b\x0a\xd6\xd4\xbf\xdf\x68\x95\x48\xe6\xf9\x4a\x28\xbd\x80\x97\xd3\xb9\xdd\x25\xfc\x5a\x69\x86\x7a\x01\x93\x68\x0f\xb1\x12\x9c\xc1\xcb\xe0\xb5\xdd\xa5\x4a\x71\xb5\x7e\x9e\x5d\xf5\x34\x65\x3c\x89\x17\xf0\xda\xad\xac\xac\x10\x17\x30\x8b\xf6\x56\x90\x7e\x8e\xab\x4e\xb9\xd9\x72\xdd\xaa\x51\x57\xde\x4a\x6b\x1a\x73\x3f\xe1\xe7\x5b\x69\x76\x71\xbe\x95\x02\x1a\x72\xf1\xb8\x00\x72\xab\xd6\xca\x28\x32\x20\xef\x50\x3c\xa0\xe1\x3e\x25\x03\xf2\x93\xe6\x54\x90\x41\x4c\x65\xec\xc5\xa8\x79\x70\xd5\xda\x88\x15\x7f\x53\xc1\x2e\x37\x61\x3e\x1e\x37\x1a\xaf\x92\xd3\xbc\x9f\x16\x70\x59\x86\xa5\x24\x0f\xb3\xc5\x10\x81\x30\xaa\xef\x2b\xec\xd8\x96\xcd\x99\xdd\xcd\x54\xf9\x63\xbb\xaf\xda\xfe\x6a\x3a\x90\x82\x20\x68\xc2\x8c\xc7\x0e\x46\x46\x8a\xf0\x1c\xe6\x99\x5c\xb4\x50\xcf\x6c\xda\x46\x3d\xf5\xec\xd7\xa9\xa7\x99\x56\x68\x10\x52\xf9\xdc\xf9\x20\x3e\x33\x42\x85\xda\xc5\xc4\xee\x13\x41\xb0\x3d\x78\xd2\xdc\x6f\xe4\x9d\x6e\xa2\x28\x3a\xb6\xab\x9d\x2e\xaa\x7d\x78\x96\x55\x26\xf3\xca\x7f\xc2\x03\x6a\xdb\x07\xa2\x20\xdd\x90\x33\x26\xb0\xa5\x76\xc7\x70\xd9\xe8\x80\xff\xb3\xb1\x04\x1a\x83\xda\x8b\x23\xea\x67\xf6\xd4\xd9\xc7\xd3\x39\x1d\xb7\x30\x53\x5e\x39\x15\x49\x8d\xcf\x66\x5f\x5f\x54\xc1\x1b\xbb\xaf\x4e\xf5\xd9\xe4\x8d\xdd\x27\xf9\x77\x8a\x76\x7f\x4d\xf3\xa2\x6f\x77\x77\x95\xba\x53\x4e\xca\xa7\x5d\x63\xce\xe7\x38\x1f\x72\x7c\xcd\x23\x93\x4f\x39\x34\x8a\x04\xf7\xa9\xe1\x4a\x8e\x3e\xd3\x07\x9a\x09\xf3\x99\x27\x48\xa4\x6f\x25\xe0\x0c\x57\x4e\xb1\x3e\x50\x0d\xfb\x50\xbc\x33\x26\x82\x15\x48\xdc\xc1\x3f\x7f\xdc\xd8\x5f\xb7\xf8\x25\xc1\xd8\xf4\xfa\x65\x28\x72\xbd\xa1\x8a\x50\xf6\xc8\x5f\xef\xef\x3e\x90\x01\xa4\x83\x60\xae\x3c\xfc\x78\x7b\x33\xbc\x33\x9a\xcb\x8d\x1d\x08\x07\x60\x74\x82\x2d\x00\x31\x9a\xfc\xc6\x3b\xa4\x0c\x75\x8f\xbc\x55\xd2\xa0\x34\x9e\x75\xc8\x82\xba\x2e\xed\xbd\xdd\x6e\xe7\xd9\xe1\xcf\x4b\xb4\x40\xe9\x2b\x86\x8c\xb4\xc2\x4a\xd6\x23\xf9\x7c\x0a\x3f\x02\x53\x7e\x12\xa2\x34\xc3\x0d\x9a\x5f\x05\xda\xaf\x3f\x3f\xfe\xc6\x7a\xaf\x52\x95\x57\xfd\x61\xfa\xd9\xcf\xf3\xb0\x1c\x65\x71\x73\x42\xff\x5f\x00\x00\x00\xff\xff\x2d\x4b\xe5\xfc\xe1\x0e\x00\x00"

func templatesViewsInputHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsInputHtml,
		"templates/views/input.html",
	)
}

func templatesViewsInputHtml() (*asset, error) {
	bytes, err := templatesViewsInputHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/input.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLinkHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xd1\x6e\xdb\x20\x14\x86\xef\xf7\x14\x47\x4c\xbb\x99\x92\xc6\x49\x9a\xa8\x72\x5c\x4b\xbb\xdb\xf5\x5e\xa0\x22\xe6\x60\xa3\x62\xc8\x80\xac\xc9\x2c\xbf\xfb\x84\x1d\xdb\xa4\x76\x96\x6a\x9a\xb9\x83\x9f\xff\xc0\x77\x7e\x5c\x55\xc0\x90\x0b\x85\x40\xf6\x9a\x9d\x09\xd4\xf5\x27\x00\x80\xaa\x02\xc1\x41\x21\x3c\x88\x4c\xab\x97\xa3\x91\x40\xfa\xc5\x44\x94\x39\x58\x93\x3d\x93\xaa\x0a\x04\x75\x4d\x16\x69\xb7\x1b\x15\xf3\xf2\xf7\x66\x0e\xcb\x17\x49\xf7\x18\xda\x35\x96\xcd\x64\x9a\x50\x28\x0c\xf2\x8b\xb1\x17\x5b\x47\x1d\x7a\xeb\xb4\x9f\x6a\xf7\xd7\x75\xb2\xa0\x69\xb2\x68\x37\xf6\x65\xa5\xc5\x7f\xf5\x55\xb4\xc4\x5b\xb6\xed\x6d\x82\x7b\x05\xe0\x0a\xa4\xac\xb9\x4c\x62\xdd\x59\x22\xb8\xf3\x01\x9f\x89\xc3\x93\x5b\x64\xd6\x92\x34\x60\x80\x3f\xe1\xa1\x15\x11\xaa\x98\xd1\x82\xf5\x14\xbe\x42\xd5\x9f\x5a\x0a\x85\xf3\x02\x45\x5e\xb8\x18\x1e\xa3\xc3\x69\xd7\x2c\xb5\x42\xdf\xa7\x40\xcb\xb5\x72\x73\x2b\x7e\x63\x0c\xcb\xa7\x6b\xa5\x6f\xd3\x20\x2c\xa9\xc9\x85\x9a\x4b\xe4\x2e\x86\x55\xa7\xf4\xdf\x9b\x60\xae\x08\x0b\xf9\xef\x56\xf9\x96\xfe\x60\x7b\xa0\x8c\x09\x95\x5f\x7c\x37\xd7\x62\x1a\x08\x33\x2d\xb5\x89\xe1\x33\x45\x3f\x42\x55\xd7\xb7\x6b\x40\x7b\x6a\x45\x76\x14\xf7\x01\xad\xb7\xf7\x01\x71\x5a\x0a\x79\x8e\x81\xfc\xd0\x7b\xed\x34\x99\x91\xef\x28\x7f\xa1\x13\x19\x25\x33\xf2\xcd\x08\x2a\xc9\xcc\x52\x65\xe7\x16\x8d\xe0\xbb\x49\xbc\x8f\x21\x9f\x66\xe1\xed\x72\x84\x4d\x14\x8d\x70\x6e\xa2\x2f\xbb\xf7\x94\x62\x78\x3a\x9c\xe0\xa2\x1d\x22\xe1\x0a\x2c\x11\x08\xa3\xe6\xf5\xea\x55\xec\x69\xf6\x9a\x1b\x7d\x54\x6c\xde\xd1\x5b\xad\xfd\xd8\x8d\xa8\x66\x91\x1f\xbb\x5b\xef\x60\xc2\x89\x73\x3e\xb6\x89\xa2\xc0\xa3\x8d\xfa\x87\xf2\xb4\xdc\x4e\x04\x6a\xbd\x9a\x0a\xd4\x30\x3b\x1d\xa8\x71\x5b\xc7\x31\x1b\xca\xdd\x87\xf8\x41\x42\x9d\x6c\xbb\xf4\xe3\x36\x84\x2e\xd2\xff\xbd\xf0\x5f\xd1\x0f\x73\xc9\xa2\x79\x1f\xe9\xf0\x33\xfa\x13\x00\x00\xff\xff\x46\x69\xbd\x70\xc4\x05\x00\x00"

func templatesViewsLinkHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLinkHtml,
		"templates/views/link.html",
	)
}

func templatesViewsLinkHtml() (*asset, error) {
	bytes, err := templatesViewsLinkHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/link.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/layouts/ui.html":  templatesLayoutsUiHtml,
	"templates/views/image.html": templatesViewsImageHtml,
	"templates/views/input.html": templatesViewsInputHtml,
	"templates/views/link.html":  templatesViewsLinkHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"layouts": &bintree{nil, map[string]*bintree{
			"ui.html": &bintree{templatesLayoutsUiHtml, map[string]*bintree{}},
		}},
		"views": &bintree{nil, map[string]*bintree{
			"image.html": &bintree{templatesViewsImageHtml, map[string]*bintree{}},
			"input.html": &bintree{templatesViewsInputHtml, map[string]*bintree{}},
			"link.html":  &bintree{templatesViewsLinkHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
