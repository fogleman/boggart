// Code generated by go-bindata.
// sources:
// templates/layouts/ui.html
// templates/views/image.html
// templates/views/input.html
// templates/views/link.html
// DO NOT EDIT!

package openhab

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLayoutsUiHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x8f\x9b\x3c\x10\xbe\xe7\x57\xcc\xeb\xf7\xba\xde\x24\xb7\x2a\x0b\x91\xaa\x74\x2b\xf5\xd4\x1e\xb2\x52\x7b\x9c\xd8\x03\xb8\x31\x36\x6b\x26\xd9\x46\x28\xff\xbd\x32\xec\x36\x04\xc8\xaa\x52\xcd\x01\xe6\xe3\xf9\x18\xcb\xb8\x69\x80\xa9\xac\x2c\x32\x81\xd8\x59\x74\x7b\x01\xf7\x70\x3e\xcf\x66\x4d\x03\x9a\x32\xe3\x08\x84\xf2\x8e\xc9\xb1\x88\xf9\xe4\xbf\x4f\x5f\x37\xdb\x1f\xdf\x1e\xa1\xe0\xd2\xae\x67\x49\x7c\x81\x45\x97\xa7\x82\x9c\x58\xcf\x00\x00\x92\x82\x50\x77\x9f\x6d\x58\x12\x23\x14\xcc\x95\xa4\xe7\x83\x39\xa6\x62\xd3\x31\xca\xed\xa9\x22\x01\xaf\xfc\xa9\x60\xfa\xc5\xf3\x48\xf8\x00\xaa\xc0\x50\x13\xa7\x4f\xdb\xcf\xf2\x83\x18\x72\xbd\x55\xc5\x81\xb3\x89\x72\x5f\xea\xbb\x7c\xfa\x28\x37\xbe\xac\x90\xcd\xce\xf6\xd5\xbe\x3c\xa6\xa4\x73\x1a\xa1\x1d\x96\x94\x8a\xa3\xa1\x97\xca\x07\xee\x01\x5e\x8c\xe6\x22\xd5\x74\x34\x8a\x64\x1b\xdc\x81\x71\x86\x0d\x5a\x59\x2b\xb4\x94\x2e\xc5\x7a\x76\x61\xab\xf9\x64\x09\xf8\x54\xd1\xeb\x68\xaa\xae\x7b\x6a\x71\xed\xbc\x3e\x41\x73\x95\x8a\xab\x42\xad\x8d\xcb\x57\x8b\x87\x51\xa9\xc4\x90\x1b\x37\x55\xb1\xc4\x4c\x41\xd6\x15\xaa\x88\x85\x41\xcb\xf9\x2a\x32\x65\x3e\xa1\x9b\x59\x8f\xbc\x02\x4b\x19\xbf\x0b\x76\xd5\x81\xef\x20\xce\x84\x81\xf0\x36\x51\x30\x79\xc1\x63\xa7\x11\x28\xd1\x9a\xdc\xad\x40\x91\x63\x0a\x43\xb5\xab\xb0\x69\xc0\x64\x40\xcf\x70\xdf\xed\xa8\x40\xa7\x83\x37\xba\x3d\x90\x43\xee\x4b\x33\x17\x54\x12\x08\x8d\x61\x3f\xd9\x79\x63\xef\xdb\x12\xaa\x7d\x1e\xfc\xc1\x69\xa9\xbc\xf5\x61\x05\xff\x2f\x97\xcb\xf1\x20\x71\xbd\x35\xa0\x8a\xcf\xa8\x65\xd2\x21\xd9\x9a\xfe\xdd\x52\x96\x65\xef\x5b\x5a\x2c\x16\x7f\xe9\xc7\xe9\xa1\x9d\x71\x36\x99\xb7\xdb\xdf\x3b\xe1\x4d\x03\x3b\xeb\xd5\x1e\x44\xfc\xe1\xbb\x9b\x63\x00\x4c\xe6\x97\xbb\x20\x89\xe3\xad\x27\xd0\x31\x3f\x89\xbe\x6e\xfb\x59\xdf\x90\xe8\x78\x93\x79\x77\x25\xfd\xa9\xfe\x0e\x00\x00\xff\xff\x10\x78\x6d\xc4\xdd\x04\x00\x00"

func templatesLayoutsUiHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutsUiHtml,
		"templates/layouts/ui.html",
	)
}

func templatesLayoutsUiHtml() (*asset, error) {
	bytes, err := templatesLayoutsUiHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layouts/ui.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsImageHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xd1\x6b\xdb\x3e\x10\x7e\xcf\x5f\x71\x88\xdf\x6f\x96\x97\x44\x6e\xc7\xd8\x43\x53\xf7\x61\x65\xd0\x42\xc7\x46\xda\xc2\x60\xeb\x40\x91\xce\x89\x3a\x5b\x72\x25\xb9\x6e\x30\xfe\xdf\x87\x6c\xa7\x71\xc3\xca\x98\x9e\x2c\xdf\x7d\xba\xef\xbe\xfb\xae\x69\x40\x62\xa6\x34\x02\x59\x19\xb9\x25\xd0\xb6\x13\x00\x80\x53\x55\xac\xc1\x59\x91\x12\xc9\x3d\x3f\x69\x1a\x60\x85\x2a\x10\xda\x76\xb1\xe2\x0e\x3f\xbc\x9f\x85\x5f\xfd\x27\xb4\x2d\x01\x25\x53\xa2\x0a\xbe\xc6\x79\x00\x10\x30\x5a\xe4\x4a\xfc\x4a\x89\x34\xb5\xce\x0d\x97\x34\x26\xe0\xfc\x36\xc7\x94\xd4\x4a\xfa\xcd\xc9\xf1\xd1\xd1\xff\x04\x92\xb3\x49\xd3\x00\x6a\x19\x2a\x4f\x46\x74\xee\x5d\x47\xe6\xd4\x09\xab\x4a\x0f\x7e\x5b\x62\x4a\x78\x59\xe6\x4a\x70\xaf\x8c\x4e\xee\xf9\x23\xef\x83\xe4\xac\xe3\x9c\x55\x5a\x84\x08\xec\x4b\x42\xd3\x45\xc2\x69\x1a\x50\x19\xe0\x03\xb0\x8e\x05\x90\x15\x77\x4a\x54\xea\xb9\xe5\xdd\x79\xe4\x16\x38\xa4\x20\x8d\xa8\x0a\xd4\x9e\x09\x8b\xdc\xe3\xa7\x1c\xc3\x8d\x46\x3c\x8a\x17\x93\x17\x08\xce\x36\x16\xb3\x31\x64\x8d\x7e\xc8\xff\xb8\xbd\x94\x34\xda\x2b\x13\xc5\xcc\x59\xb1\x38\xc0\xef\x18\x43\x0a\x51\x10\x36\x53\x39\x6a\xde\xe9\x1d\x1d\xe6\x76\xba\xd2\x78\x31\xee\x0c\x73\x87\x7f\xea\xa3\xe0\x5e\x6c\xd0\xfd\x0b\x35\xd6\x61\x68\xf2\xb3\x1b\x3c\x65\xd3\x1f\x09\x9b\xc6\xbb\xa9\x53\xf6\x36\xfe\x2f\x39\x14\x20\x94\x7a\x2a\xf2\x0b\xef\x4b\x48\x41\x63\x0d\xdf\x3e\x5f\x85\xdb\x12\x1f\x2a\x74\x7e\xcc\x36\x9c\x21\x97\x99\x12\x35\x25\x5f\xbf\x5c\xdf\x90\x19\x90\xd0\xf8\x00\x60\xb7\xcb\x2b\x76\xed\xad\xd2\xeb\xe0\xae\x19\x78\x5b\xe1\x2b\x8f\x38\xf4\x03\xea\x02\xb9\x44\x4b\xc9\xb9\xd1\x1e\xb5\x9f\x07\xcf\x84\x87\xc7\xae\x79\x9a\xd7\x75\x3d\xcf\x8c\x2d\xe6\x95\xcd\x51\x0b\x23\x51\x92\x57\x9f\xd6\x92\x92\x60\xfc\x94\xc0\x14\xfa\xec\xdb\xe5\xe5\xb9\x29\x4a\xa3\x83\x1b\x06\x81\xbf\x1f\xdf\xc5\x30\x05\xf2\xa6\xe4\xdb\x30\xc7\xbf\xa5\xbf\xbb\x8b\x0f\x06\xd8\x2f\x40\xb8\xb5\xbd\xb6\xbd\x5f\xd7\x1e\x98\xc5\xcc\xa2\xdb\xc0\xd1\x78\xc2\x0e\xfd\x8d\x2a\xd0\x54\x9e\xee\x7c\x4f\xe3\xe6\x45\x17\xb5\xd2\xd2\xd4\x2c\x37\x7d\xeb\xcc\x62\xb7\x14\x07\x52\xb6\xb3\x50\xea\xb9\x48\xdb\x0e\xb1\x3d\xa9\xd3\xa4\x5f\xb3\xd1\xa6\xfe\x0e\x00\x00\xff\xff\x3a\x5e\x36\xfe\x37\x04\x00\x00"

func templatesViewsImageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsImageHtml,
		"templates/views/image.html",
	)
}

func templatesViewsImageHtml() (*asset, error) {
	bytes, err := templatesViewsImageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/image.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsInputHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x38\x63\x31\xd4\xde\x2c\x5f\xe3\x20\x75\xec\x00\x5b\x37\x20\xc3\xb2\x75\x48\xd2\x61\x6f\x03\x2d\x1e\xd9\x6c\x28\x52\xa5\xa8\xd8\x99\xe1\xff\x3e\x50\x92\x23\xea\x66\xa7\x7d\xa8\xf8\x90\x96\xfc\xf8\xf1\x5c\x3f\x9f\xdd\x0e\x18\x06\x5c\x22\x90\xa5\x62\xcf\x04\xf6\xfb\xb3\x79\xa0\x74\x08\x4a\xde\x27\xcb\x90\x9b\x05\xd1\x68\x12\x2d\x21\xa0\x22\x46\x72\x7d\x06\x00\xb0\xdb\x01\x0f\x40\x22\xf4\xb9\xaf\xe4\xbf\x89\x16\x40\xd2\xbb\xf6\x70\xce\xc3\x15\xc4\xda\x5f\x90\xdd\xce\x01\xec\xf7\x04\x06\x2f\xd7\x51\x32\x8b\xaf\xb2\x19\x0c\xfb\xb7\x74\x89\x25\x3e\x91\x6e\x04\x4a\x2f\xc8\x13\x15\x09\x92\xeb\x94\xb8\xc0\xee\xf7\xf3\x41\x0a\x3a\x42\x4f\x25\x83\x0e\x7e\x86\xbe\x79\x8e\x10\x88\xc1\xad\xa1\x1a\x29\xe9\x42\xe7\xe5\xe5\x87\xf4\xe8\x17\x6a\xf0\x81\x87\xd8\x70\xf4\x67\x12\x2e\x51\x93\xee\xc1\xb4\x82\xde\x32\xc7\xe6\x59\x20\x10\x2a\x99\x56\x9c\x11\x17\x94\xfa\xb1\x4c\x8c\x51\x12\x94\xf4\x05\xf7\x1f\x17\x24\x46\xc9\xfe\xb6\x0e\x75\xba\xa9\x4b\x7c\x74\x29\x81\x7c\xf8\x9d\x40\x3f\x75\x29\xc3\x5f\xbb\x2f\xb9\x7e\xcd\x0f\x3e\x54\x4c\xb1\x36\x6b\xb5\x89\x9d\x10\x1e\x3e\xbb\x9d\xa5\x25\x05\xec\xf7\xa4\x8d\xbc\x4c\x77\xc2\x33\x25\xdf\xaf\xa9\x5c\x61\xd9\xa5\x63\xd4\xf6\xe3\xec\x90\x4f\x90\x34\x44\x37\xb9\x6e\x39\xdc\x1b\x6a\x6c\xe8\x3f\xde\xde\xda\x87\x5f\x52\x9f\xed\xa7\x1b\x19\xfb\x7c\x70\x08\x48\x51\x06\x22\xc6\xa2\x2c\x65\x94\x98\x86\xb4\xd5\xf3\x5b\xf5\xcf\x96\xcc\x82\xc8\xec\xb0\xe4\x96\xe5\xaf\xd3\xbc\x54\x50\x33\x11\xa3\x06\x0d\x0f\xd1\x13\xca\xa7\xa2\x4e\xd8\x78\xc9\xfa\xf6\xca\x6c\x35\x85\xad\xc4\x98\x06\x3a\x6f\x4f\x37\x94\x5f\x9b\xb2\x96\x02\x80\x6a\x3b\xce\x07\x56\x5a\xae\xcf\x1c\x76\x47\x80\xd6\x48\xb3\xd2\x9a\x67\xe5\x56\xf8\x3d\xf0\xe3\xb8\xa4\x3c\x47\xba\xed\x07\xd8\xbd\x98\x2c\xb8\x44\x6f\x8d\x7c\xb5\x36\x33\x38\x1f\x46\xdb\xab\xf4\x28\x03\x5a\xbd\x73\xb0\x81\x92\xc6\x8b\xf9\x7f\x38\x83\xd1\x65\x19\x69\xf5\xac\x00\x86\x54\xaf\xb8\xf4\x04\x06\x66\x06\xe3\x03\xd2\x7e\x1b\xce\xcc\xda\x7d\xc8\x7e\x6d\xcf\x67\xa2\x56\xd0\x46\x94\x31\x2e\x57\x39\xef\xb4\x62\x81\x2d\xdd\x1e\xe4\x02\xb2\xab\x91\x4f\xc6\xd1\x16\xbe\xe3\x61\xa4\xb4\xa1\xd2\x5c\x39\xc6\x6e\xbd\x93\x20\x1b\x62\x8f\x0a\xbe\x92\x33\xf0\x51\x1a\xd4\x8d\xb0\x52\x34\x1b\xc9\x32\x63\x0f\x5d\xd8\x96\x88\x51\x7f\x8a\x61\x29\x13\x55\xb7\x02\xa1\xa8\x99\x81\xb6\xf8\x96\xf7\xc7\x97\xad\xef\xe7\xc1\x6a\x30\xc3\x46\x23\x4f\xd2\x74\xf8\xbd\x13\x25\x2e\x6b\xfb\x8d\x5c\x0d\x29\x58\x52\xff\x71\xa5\x55\x22\x99\xe7\x2b\xa1\xf4\x0c\xde\x8c\xa7\x76\x15\xf4\x4b\xa5\x19\xea\x19\x8c\xa2\x2d\xc4\x4a\x70\x06\x6f\x82\x73\xbb\x0a\xc8\xe1\x6a\x75\x3f\xbb\xea\x69\xca\x78\x12\xcf\xe0\xdc\xad\xac\xac\x10\x67\x30\x89\xb6\xf6\x20\xfd\x3b\x2c\x3b\xe5\x66\xcb\x75\xab\x22\x5d\x79\x2b\x2d\x69\xcc\xfd\x84\x9f\x6e\xa5\xc9\xc5\xe9\x56\x0a\x68\xc8\xc5\xf3\x0c\xc8\x9d\x5a\x2a\xa3\x48\x8f\xdc\xa0\x78\x42\xc3\x7d\x4a\x7a\xe4\x27\xcd\xa9\x20\xbd\x98\xca\xd8\x8b\x51\xf3\xe0\xaa\xb1\x11\x4b\xfe\xa6\x07\x9b\xdc\x84\xe9\x70\x58\x6b\xbc\x52\x4e\xf3\x7e\x9a\xc1\x65\x11\x96\x42\x3c\xcc\x1a\x43\x04\xc2\xa8\x7e\x2c\xa9\x63\x53\x36\x27\x76\xd5\x53\xe5\x0f\xed\xba\x6a\xfa\xa9\x69\x61\x0a\x82\xa0\x4e\x33\x1c\x3a\x1c\x99\x28\xc2\x6b\x94\x67\x74\xd1\x20\x3d\x93\x71\x93\xf4\x54\xb3\x5f\x95\x9e\x7a\x5a\xa1\x26\x48\xc5\x73\xa7\x83\xf8\xca\x08\x1d\x60\x17\x23\xbb\x8e\x04\xc1\xf6\xe0\x51\x73\xbf\x52\x77\xda\x85\xe2\xd0\xb1\x6d\xed\x74\x51\xee\xc3\x93\xaa\x32\x9a\x96\x7e\x13\x9e\x50\xdb\x3e\x10\x07\xd1\x0d\x39\x63\x02\x1b\x6a\x77\x08\x97\xb5\x0e\xf8\x96\x8d\x25\xd0\x18\xd4\x5e\x1c\x51\x3f\xb3\xa7\xaa\x3e\x9e\xce\xe5\xb8\x41\x99\xf2\xca\x29\x9d\x54\xf4\x6c\xf2\xe5\x45\x15\xbc\xb3\xeb\xea\x58\x9f\x8d\xde\xd9\x75\x54\x7f\xc7\x68\xd7\x97\x34\x2f\xfa\x76\xb5\x57\xa9\x3b\xe5\xa4\x7a\xda\x36\xe6\x7c\x8a\xf3\x21\xc7\xd7\x3c\x32\xf9\x94\x43\xa3\x48\x70\x9f\x1a\xae\xe4\xe0\x13\x7d\xa2\xd9\x61\x3e\xf3\x04\x89\xf4\xed\x09\x38\xc3\x95\x53\xac\x4f\x54\xc3\x36\x14\x37\xc6\x44\xb0\x00\x89\x1b\xf8\xe7\x8f\x5b\xfb\xbf\x3b\xfc\x9c\x60\x6c\x3a\xdd\x22\x14\x39\xae\xaf\x22\x94\x1d\xf2\xd7\x87\xfb\x07\xd2\x83\x74\x10\xcc\xc1\xfd\x8f\x77\xb7\xfd\x7b\xa3\xb9\x5c\xd9\x81\xb0\x07\x46\x27\xd8\x40\x10\xa3\xc9\x6f\xdc\x20\x65\xa8\x3b\xe4\xbd\x92\x06\xa5\xf1\xac\x43\x96\xd4\x75\x69\xeb\x6d\x36\x1b\xcf\x0e\x7f\x5e\xa2\x05\x4a\x5f\x31\x64\xa4\x91\x56\xb2\x0e\xc9\xe7\x53\xf8\x11\x98\xf2\x93\x10\xa5\xe9\xaf\xd0\xfc\x2a\xd0\xfe\xf3\xe7\xe7\xdf\x58\xe7\x6d\x0a\x79\xdb\xed\xa7\x7f\xbb\x79\x1e\xe6\x83\x2c\x6e\x4e\xe8\xff\x0f\x00\x00\xff\xff\xdc\xfa\x52\xfe\xe1\x0e\x00\x00"

func templatesViewsInputHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsInputHtml,
		"templates/views/input.html",
	)
}

func templatesViewsInputHtml() (*asset, error) {
	bytes, err := templatesViewsInputHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/input.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLinkHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xcd\x8e\xdb\x20\x14\x85\xf7\x7d\x8a\x2b\xaa\x6e\xaa\xfc\x38\xc9\x24\x1a\x39\x1e\x4b\xdd\x75\x51\x75\xd1\x3e\x40\x45\xcc\x25\x46\x83\x21\x05\xd2\x49\x6a\xf9\xdd\x2b\xec\xd8\x26\x63\xa7\x19\x55\x35\x3b\x38\x9c\x0b\xdf\x3d\xb8\x2c\x81\x21\x17\x0a\x81\xec\x34\x3b\x13\xa8\xaa\x77\x00\x00\x65\x09\x82\x83\x42\x98\x89\x4c\xab\x1f\x47\x23\x81\x74\x8b\x89\x28\xf6\x60\x4d\xf6\x44\xca\x32\x10\x54\x15\x99\xa7\xed\x6e\x54\xcc\xcb\x5f\x9b\x39\x2c\x66\x5f\xe8\x0e\x43\xbb\xda\x52\xfa\xc9\x34\xa1\x90\x1b\xe4\x17\x63\x2f\xfe\xee\xa8\x43\x6f\x9d\x76\x53\xcd\xfe\xaa\x4a\xe6\x34\x4d\xe6\xcd\xc6\xae\xac\xb4\xf8\xaf\xbe\x5f\x69\x81\xb7\x6c\x9b\xdb\x04\xf7\x0a\xc0\xe5\x48\x59\x7d\x99\xc4\xba\xb3\x44\x70\xe7\x03\x3e\x11\x87\x27\x37\xcf\xac\x25\x69\xc0\x00\x7f\xc2\xac\x11\x11\xaa\x98\xd1\x82\x75\x14\x3e\x42\xd9\x9d\x5a\x0a\x85\xd3\x1c\xc5\x3e\x77\x31\x3c\x44\x87\xd3\xb6\x5e\x6a\x84\xbe\x4f\x81\x96\x6b\xe5\xa6\x56\xfc\xc6\x18\x16\x8f\xd7\x4a\xdf\xa6\x5e\x58\x50\xb3\x17\x6a\x2a\x91\xbb\x18\x96\xad\xd2\x7f\x2f\x82\xb9\x3c\x2c\xe4\xbf\x5b\xe5\x6b\x30\x81\xed\x81\x32\x26\xd4\xfe\xe2\xbb\xbe\x16\xd3\x40\x98\x69\xa9\x4d\x0c\xef\x29\xfa\x11\xaa\xda\xbe\x5d\x03\xda\x51\x2b\xb2\xa3\xb8\x0f\x68\xb5\xb9\x0f\x88\xd3\x42\xc8\x73\x0c\xe4\x9b\xde\x69\xa7\xc9\x84\x7c\x46\xf9\x0b\x9d\xc8\x28\x99\x90\x4f\x46\x50\x49\x26\x96\x2a\x3b\xb5\x68\x04\xdf\x8e\xe2\x7d\x08\xf9\xd4\x0b\x2f\x97\x23\xac\xa3\x68\x80\x73\x1d\x7d\xd8\xbe\xa6\x14\xc3\xe3\xe1\x04\x17\x6d\x1f\x09\x97\x63\x81\x40\x18\x35\xcf\x57\xaf\x62\x47\xb3\xe7\xbd\xd1\x47\xc5\xa6\x2d\xbd\xe5\xca\x8f\xed\x80\x6a\x16\xf9\xb1\xbd\xf5\x0e\x46\x9c\x38\xe7\x43\x9b\x28\x0a\x3c\x9a\xa8\xbf\x29\x4f\x8b\xcd\x48\xa0\x56\xcb\xb1\x40\xf5\xb3\xe3\x81\x1a\xb6\x75\x18\xb3\xbe\xdc\x7d\x88\x6f\x24\xd4\xca\x36\x0b\x3f\x6e\x43\x68\x23\xfd\xdf\x0b\xff\x15\x7d\x3f\x97\xcc\xeb\xf7\x91\xf6\x3f\xa3\x3f\x01\x00\x00\xff\xff\x54\xcc\x47\xb4\xc4\x05\x00\x00"

func templatesViewsLinkHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLinkHtml,
		"templates/views/link.html",
	)
}

func templatesViewsLinkHtml() (*asset, error) {
	bytes, err := templatesViewsLinkHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/link.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/layouts/ui.html":  templatesLayoutsUiHtml,
	"templates/views/image.html": templatesViewsImageHtml,
	"templates/views/input.html": templatesViewsInputHtml,
	"templates/views/link.html":  templatesViewsLinkHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"layouts": &bintree{nil, map[string]*bintree{
			"ui.html": &bintree{templatesLayoutsUiHtml, map[string]*bintree{}},
		}},
		"views": &bintree{nil, map[string]*bintree{
			"image.html": &bintree{templatesViewsImageHtml, map[string]*bintree{}},
			"input.html": &bintree{templatesViewsInputHtml, map[string]*bintree{}},
			"link.html":  &bintree{templatesViewsLinkHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
