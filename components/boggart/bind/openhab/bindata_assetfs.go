// Code generated by go-bindata.
// sources:
// templates/layouts/ui.html
// templates/views/image.html
// templates/views/input.html
// DO NOT EDIT!

package openhab

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLayoutsUiHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x8f\x9b\x3c\x10\xbe\xe7\x57\xcc\xeb\xf7\xba\xde\x24\xb7\x2a\x0b\x91\xaa\x74\x2b\xf5\xd4\x1e\xb2\x52\x7b\x9c\xd8\x03\xb8\x31\x36\x6b\x26\xd9\x46\x28\xff\xbd\x32\xec\x36\x04\xc8\xaa\x52\xcd\x01\xe6\xe3\xf9\x18\xcb\xb8\x69\x80\xa9\xac\x2c\x32\x81\xd8\x59\x74\x7b\x01\xf7\x70\x3e\xcf\x66\x4d\x03\x9a\x32\xe3\x08\x84\xf2\x8e\xc9\xb1\x88\xf9\xe4\xbf\x4f\x5f\x37\xdb\x1f\xdf\x1e\xa1\xe0\xd2\xae\x67\x49\x7c\x81\x45\x97\xa7\x82\x9c\x58\xcf\x00\x00\x92\x82\x50\x77\x9f\x6d\x58\x12\x23\x14\xcc\x95\xa4\xe7\x83\x39\xa6\x62\xd3\x31\xca\xed\xa9\x22\x01\xaf\xfc\xa9\x60\xfa\xc5\xf3\x48\xf8\x00\xaa\xc0\x50\x13\xa7\x4f\xdb\xcf\xf2\x83\x18\x72\xbd\x55\xc5\x81\xb3\x89\x72\x5f\xea\xbb\x7c\xfa\x28\x37\xbe\xac\x90\xcd\xce\xf6\xd5\xbe\x3c\xa6\xa4\x73\x1a\xa1\x1d\x96\x94\x8a\xa3\xa1\x97\xca\x07\xee\x01\x5e\x8c\xe6\x22\xd5\x74\x34\x8a\x64\x1b\xdc\x81\x71\x86\x0d\x5a\x59\x2b\xb4\x94\x2e\xc5\x7a\x76\x61\xab\xf9\x64\x09\xf8\x54\xd1\xeb\x68\xaa\xae\x7b\x6a\x71\xed\xbc\x3e\x41\x73\x95\x8a\xab\x42\xad\x8d\xcb\x57\x8b\x87\x51\xa9\xc4\x90\x1b\x37\x55\xb1\xc4\x4c\x41\xd6\x15\xaa\x88\x85\x41\xcb\xf9\x2a\x32\x65\x3e\xa1\x9b\x59\x8f\xbc\x02\x4b\x19\xbf\x0b\x76\xd5\x81\xef\x20\xce\x84\x81\xf0\x36\x51\x30\x79\xc1\x63\xa7\x11\x28\xd1\x9a\xdc\xad\x40\x91\x63\x0a\x43\xb5\xab\xb0\x69\xc0\x64\x40\xcf\x70\xdf\xed\xa8\x40\xa7\x83\x37\xba\x3d\x90\x43\xee\x4b\x33\x17\x54\x12\x08\x8d\x61\x3f\xd9\x79\x63\xef\xdb\x12\xaa\x7d\x1e\xfc\xc1\x69\xa9\xbc\xf5\x61\x05\xff\x2f\x97\xcb\xf1\x20\x71\xbd\x35\xa0\x8a\xcf\xa8\x65\xd2\x21\xd9\x9a\xfe\xdd\x52\x96\x65\xef\x5b\x5a\x2c\x16\x7f\xe9\xc7\xe9\xa1\x9d\x71\x36\x99\xb7\xdb\xdf\x3b\xe1\x4d\x03\x3b\xeb\xd5\x1e\x44\xfc\xe1\xbb\x9b\x63\x00\x4c\xe6\x97\xbb\x20\x89\xe3\xad\x27\xd0\x31\x3f\x89\xbe\x6e\xfb\x59\xdf\x90\xe8\x78\x93\x79\x77\x25\xfd\xa9\xfe\x0e\x00\x00\xff\xff\x10\x78\x6d\xc4\xdd\x04\x00\x00"

func templatesLayoutsUiHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutsUiHtml,
		"templates/layouts/ui.html",
	)
}

func templatesLayoutsUiHtml() (*asset, error) {
	bytes, err := templatesLayoutsUiHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layouts/ui.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsImageHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xd1\x6b\xdb\x3e\x10\x7e\xcf\x5f\x71\x88\xdf\x6f\x96\x97\x44\x6e\xc7\xd8\x43\x53\xf7\x61\x65\xd0\x42\xc7\x46\xda\xc2\x60\xeb\x40\x91\xce\x89\x3a\x5b\x72\x25\xb9\x6e\x30\xfe\xdf\x87\x6c\xa7\x71\xc3\xca\x98\x9e\x2c\xdf\x7d\xba\xef\xbe\xfb\xae\x69\x40\x62\xa6\x34\x02\x59\x19\xb9\x25\xd0\xb6\x13\x00\x80\x53\x55\xac\xc1\x59\x91\x12\xc9\x3d\x3f\x69\x1a\x60\x85\x2a\x10\xda\x76\xb1\xe2\x0e\x3f\xbc\x9f\x85\x5f\xfd\x27\xb4\x2d\x01\x25\x53\xa2\x0a\xbe\xc6\x79\x00\x10\x30\x5a\xe4\x4a\xfc\x4a\x89\x34\xb5\xce\x0d\x97\x34\x26\xe0\xfc\x36\xc7\x94\xd4\x4a\xfa\xcd\xc9\xf1\xd1\xd1\xff\x04\x92\xb3\x49\xd3\x00\x6a\x19\x2a\x4f\x46\x74\xee\x5d\x47\xe6\xd4\x09\xab\x4a\x0f\x7e\x5b\x62\x4a\x78\x59\xe6\x4a\x70\xaf\x8c\x4e\xee\xf9\x23\xef\x83\xe4\xac\xe3\x9c\x55\x5a\x84\x08\xec\x4b\x42\xd3\x45\xc2\x69\x1a\x50\x19\xe0\x03\xb0\x8e\x05\x90\x15\x77\x4a\x54\xea\xb9\xe5\xdd\x79\xe4\x16\x38\xa4\x20\x8d\xa8\x0a\xd4\x9e\x09\x8b\xdc\xe3\xa7\x1c\xc3\x8d\x46\x3c\x8a\x17\x93\x17\x08\xce\x36\x16\xb3\x31\x64\x8d\x7e\xc8\xff\xb8\xbd\x94\x34\xda\x2b\x13\xc5\xcc\x59\xb1\x38\xc0\xef\x18\x43\x0a\x51\x10\x36\x53\x39\x6a\xde\xe9\x1d\x1d\xe6\x76\xba\xd2\x78\x31\xee\x0c\x73\x87\x7f\xea\xa3\xe0\x5e\x6c\xd0\xfd\x0b\x35\xd6\x61\x68\xf2\xb3\x1b\x3c\x65\xd3\x1f\x09\x9b\xc6\xbb\xa9\x53\xf6\x36\xfe\x2f\x39\x14\x20\x94\x7a\x2a\xf2\x0b\xef\x4b\x48\x41\x63\x0d\xdf\x3e\x5f\x85\xdb\x12\x1f\x2a\x74\x7e\xcc\x36\x9c\x21\x97\x99\x12\x35\x25\x5f\xbf\x5c\xdf\x90\x19\x90\xd0\xf8\x00\x60\xb7\xcb\x2b\x76\xed\xad\xd2\xeb\xe0\xae\x19\x78\x5b\xe1\x2b\x8f\x38\xf4\x03\xea\x02\xb9\x44\x4b\xc9\xb9\xd1\x1e\xb5\x9f\x07\xcf\x84\x87\xc7\xae\x79\x9a\xd7\x75\x3d\xcf\x8c\x2d\xe6\x95\xcd\x51\x0b\x23\x51\x92\x57\x9f\xd6\x92\x92\x60\xfc\x94\xc0\x14\xfa\xec\xdb\xe5\xe5\xb9\x29\x4a\xa3\x83\x1b\x06\x81\xbf\x1f\xdf\xc5\x30\x05\xf2\xa6\xe4\xdb\x30\xc7\xbf\xa5\xbf\xbb\x8b\x0f\x06\xd8\x2f\x40\xb8\xb5\xbd\xb6\xbd\x5f\xd7\x1e\x98\xc5\xcc\xa2\xdb\xc0\xd1\x78\xc2\x0e\xfd\x8d\x2a\xd0\x54\x9e\xee\x7c\x4f\xe3\xe6\x45\x17\xb5\xd2\xd2\xd4\x2c\x37\x7d\xeb\xcc\x62\xb7\x14\x07\x52\xb6\xb3\x50\xea\xb9\x48\xdb\x0e\xb1\x3d\xa9\xd3\xa4\x5f\xb3\xd1\xa6\xfe\x0e\x00\x00\xff\xff\x3a\x5e\x36\xfe\x37\x04\x00\x00"

func templatesViewsImageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsImageHtml,
		"templates/views/image.html",
	)
}

func templatesViewsImageHtml() (*asset, error) {
	bytes, err := templatesViewsImageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/image.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsInputHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdf\x6f\xdb\x36\x10\x7e\xef\x5f\x71\x63\x31\xd4\xde\x2c\xd9\x4e\xe2\x20\x50\xec\x00\x5b\x37\x20\xc3\xb2\x75\x48\xd2\x61\x6f\x03\x2d\x9e\x1c\xb6\x14\xa9\x52\x54\xec\xcc\xf0\xff\x3e\x50\x3f\x22\x4a\xa2\x93\xa1\x0f\x93\x1e\x9c\xf0\x8e\x1f\xef\xbb\xfb\xee\xa8\xfd\x1e\x18\x26\x5c\x22\x90\xb5\x62\x4f\x04\x0e\x87\x37\xcb\x44\xe9\x14\x94\xbc\x2b\xd6\x29\x37\x2b\xa2\xd1\x14\x5a\x42\x42\x45\x8e\xe4\xea\x0d\x00\xc0\x7e\x0f\x3c\x01\x89\x10\xf2\x58\xc9\xbf\x0b\x2d\x80\x94\x7b\xad\x71\xc9\xd3\x0d\xe4\x3a\x5e\x91\xfd\xde\x71\x38\x1c\x08\x4c\x9f\xb7\xa3\x64\xd6\xbf\x8f\x66\x30\x0d\x6f\xe8\x1a\x3b\x78\xa2\x5c\x48\x94\x5e\x91\x47\x2a\x0a\x24\x57\x25\x70\xeb\x7b\x38\x2c\xa7\xa5\xd3\x0b\xf0\x54\x32\x18\xe1\x17\x08\xcd\x53\x86\x40\x0c\xee\x0c\xd5\x48\xc9\x18\x46\xcf\x27\xdf\x97\xa6\x9f\xa8\xc1\x7b\x9e\xa2\xc7\xf4\x7b\x91\xae\x51\x93\x71\x13\x5a\x0b\x6f\x91\x73\xf3\x24\x10\x08\x95\x4c\x2b\xce\x88\xeb\x54\xf2\x58\x17\xc6\x28\x09\x4a\xc6\x82\xc7\x9f\x57\x24\x47\xc9\xfe\xb4\x84\x46\xe3\x92\x12\x9f\x5f\x48\x20\x1f\x7e\x25\x10\x96\x94\x2a\xff\x2b\xf7\x24\x97\xd7\xb2\xe1\xd0\x0b\xc5\xc6\xac\xd5\x36\x77\x52\xd8\x3c\x76\xb9\x2a\x4b\xe9\x70\x38\x90\x63\xe0\x5d\xb8\x57\x98\x29\xf9\xfe\x81\xca\x0d\x76\x29\xbd\x04\x6d\x1f\xce\x9a\x7a\x82\xa4\x29\xba\xc5\x75\xe5\x70\x67\xa8\xb1\xa9\xff\x78\x73\x63\x0f\x7e\x2e\x7d\xb5\x5e\x2e\x54\xe8\xcb\x69\x93\x90\x56\x06\x22\xc7\x56\x96\x32\x2b\x8c\xa7\x6c\xc3\xfa\xf6\xf9\x59\xc9\xac\x88\xac\x8c\x1d\x5a\x16\x7f\x08\xf3\xac\x20\x3f\x10\xa3\x06\x0d\x4f\x31\x10\x2a\xa6\x62\x08\xe8\xdd\x64\xb9\xfd\xc7\x6a\xf9\xd2\xd6\x41\x2c\x13\x5d\xb7\xa7\x9b\xca\xaf\x2d\xd9\x11\x01\x40\xbf\x1d\x97\x53\x3b\x5a\xae\xde\x38\xe8\xce\x00\x7a\x40\x5a\x49\x6b\x59\xc9\xad\xe5\x3d\x8d\xf3\xbc\x33\x79\x5e\xe8\xb6\xef\x60\xff\x1c\xb2\xe0\x12\x83\x07\xe4\x9b\x07\x13\xc1\xd9\x2c\xdb\x5d\x96\xa6\xca\xd1\xce\x3b\xc7\x37\x51\xd2\x04\x39\xff\x07\x23\x98\x5f\x74\x3d\xed\x3c\x6b\x1d\x53\xaa\x37\x5c\x06\x02\x13\x13\xc1\x49\xe3\x69\x9f\x2d\x67\xe6\xc1\x3d\xc8\x3e\xc7\x8e\xaf\x86\x5a\x0b\x9b\x51\xc6\xb8\xdc\xd4\xb8\x8b\x5e\x04\x56\xba\x13\xa8\x07\xc8\x7e\x00\x7e\x7a\x92\xed\xe0\x1b\x9e\x66\x4a\x1b\x2a\xcd\xa5\x13\xec\x2e\x78\xd5\xc9\xa6\x38\xa0\x82\x6f\x64\x04\x31\x4a\x83\xda\xeb\xd6\xc9\xa6\x17\xac\x0a\xb6\xe9\xc2\x63\x85\x98\x87\x0b\x4c\x3b\x95\xe8\xd3\x4a\x84\xa2\x26\x02\x6d\xfd\x8f\x9c\x7f\x72\x71\xf4\xfc\x3a\x59\x9e\x30\x6c\x36\xea\x22\x2d\x66\xdf\x3a\x59\xe2\x72\xb0\xee\xc5\xf2\x94\x60\x4d\xe3\xcf\x1b\xad\x0a\xc9\x82\x58\x09\xa5\x23\x78\x7b\xb2\xb0\x6f\x0b\xbf\x56\x9a\xa1\x8e\x60\x9e\xed\x20\x57\x82\x33\x78\x9b\x9c\xd9\xb7\x75\x69\xb6\xf6\xd7\xab\xad\x81\xa6\x8c\x17\x79\x04\x67\xae\xb2\x2a\x21\x46\x70\x9a\xed\xac\xa1\xfc\x9d\x75\x49\xb9\xd5\x72\x69\xf5\x46\x57\xdd\x4a\x6b\x9a\xf3\xb8\xe0\xaf\xb7\xd2\xe9\xf9\x8b\xad\xe4\x49\x49\x92\x24\x43\xb2\xb3\x99\x13\x6e\xd9\x7f\x09\x4d\xb9\x78\x8a\x80\xdc\xaa\xb5\x32\x8a\x4c\xc8\x35\x8a\x47\x34\x3c\xa6\x64\x42\x7e\xd0\x9c\x0a\x32\xc9\xa9\xcc\x83\x1c\x35\x4f\x2e\xbd\xdd\xdb\x49\x52\x69\xd8\xd6\x71\x2f\xdc\x03\x7d\x42\xa8\x9b\x30\x82\x8b\x36\x97\xaf\xce\x80\xf9\xb9\x67\x08\x9c\x9e\xf8\x86\x40\xbf\x0e\xfd\x21\x30\x4c\x30\x0c\x46\x43\xf7\xb8\x26\x97\xe7\x73\xfb\x0e\xa4\xfb\x22\xf6\x57\xb6\xeb\xf1\xfe\xf2\x14\x1e\x63\xfb\x0e\x7b\xe1\x98\x50\xcf\xbb\x0a\x7f\xb5\x5f\xe7\x8b\xce\xb4\x7d\x44\x6d\xc5\x22\x9a\x71\x96\x72\xc6\x04\x7a\x0a\x3c\x83\x8b\x81\x4c\xfe\x4f\xf5\x09\x34\x06\x75\x90\x67\x34\xae\xe2\xe9\xf7\x75\xa0\xeb\x41\xe7\xe9\xf9\x5a\x09\x1d\x4b\x6f\x52\x9c\x0e\x1b\xbe\xb9\x83\xcb\x6e\x3f\x76\x09\x7f\xca\xeb\x2b\x38\xd6\x3c\x33\xf5\x1d\x4c\xb3\x4c\xf0\x98\x1a\xae\xe4\xf4\x13\x7d\xa4\x95\xb1\xbe\x91\x93\x42\xc6\xd6\x02\xce\xd5\xef\x68\xe2\x91\x6a\xd8\xa5\xe2\xda\x98\x0c\x56\x20\x71\x0b\x7f\xfd\x76\x63\xff\xbb\xc5\x2f\x05\xe6\x66\x34\x6e\x39\xd4\x7e\xa1\xca\x50\x8e\xc8\x1f\x1f\xee\xee\xc9\x04\xca\xcf\x94\xda\x39\xfc\x78\x7b\x13\xde\x19\xcd\xe5\xc6\x7e\xae\x4c\xc0\xe8\x02\x3d\x00\x39\x9a\x7a\xc7\x35\x52\x86\x7a\x44\xde\x2b\x69\x50\x9a\xc0\x12\xb2\xa0\x2e\xa5\x5d\xb0\xdd\x6e\x03\xfb\x69\x12\x14\x5a\xa0\x8c\x15\x43\x46\xbc\xb0\x92\x8d\x48\xfd\xf5\x04\xdf\x03\x53\x71\x91\xa2\x34\xe1\x06\xcd\xcf\x02\xed\x9f\x3f\x3e\xfd\xc2\x46\xef\x4a\x97\x77\xe3\xb0\xfc\x1d\xd7\x75\x58\x4e\xab\xbc\x39\xa9\xff\x37\x00\x00\xff\xff\x4c\x28\xc9\xba\x7f\x0d\x00\x00"

func templatesViewsInputHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsInputHtml,
		"templates/views/input.html",
	)
}

func templatesViewsInputHtml() (*asset, error) {
	bytes, err := templatesViewsInputHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/input.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/layouts/ui.html":  templatesLayoutsUiHtml,
	"templates/views/image.html": templatesViewsImageHtml,
	"templates/views/input.html": templatesViewsInputHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"layouts": &bintree{nil, map[string]*bintree{
			"ui.html": &bintree{templatesLayoutsUiHtml, map[string]*bintree{}},
		}},
		"views": &bintree{nil, map[string]*bintree{
			"image.html": &bintree{templatesViewsImageHtml, map[string]*bintree{}},
			"input.html": &bintree{templatesViewsInputHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
