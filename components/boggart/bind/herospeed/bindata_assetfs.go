// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
package herospeed

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4f\x6f\xeb\x36\x0c\xbf\xe7\x53\x10\xda\xdb\xe2\x6c\x8d\x9d\x3c\xec\x30\xb4\x4e\x76\xd8\x3b\x6c\x40\x07\x3c\x14\x7d\xbb\x16\xb2\x45\x27\xca\x14\xc9\x95\x64\xe7\x05\x46\xbe\xfb\x20\xff\x8b\xd3\xa4\xae\xd3\xb5\x87\x86\xa6\xa8\x1f\xc9\x9f\x28\xd2\x2e\x0a\x60\x98\x70\x89\x40\x62\x25\x2d\x4a\x4b\xe0\x70\x18\x85\x8c\xe7\x10\x0b\x6a\xcc\x82\x68\xb5\x23\xcb\x11\x00\x40\x57\x1b\x2b\x31\xdd\xb2\xe9\xfc\x33\x38\xc9\x6c\x1b\xe9\xbb\x99\xce\x3f\xd7\xf6\x2f\xf7\x7c\x7f\x4a\xa9\x44\xd1\x59\x3d\xb7\x68\xa2\x38\xb5\x69\xed\xb4\x12\xb8\x20\x96\x46\x97\x90\x5a\xcb\x4c\x34\x80\x92\xe6\x20\x69\x3e\xb5\x34\x32\x10\x51\xfd\xe4\x04\x72\x84\x11\xdc\x5c\xf2\xd5\x22\x09\x5e\xdb\xa6\x1a\x0d\x4a\x4b\x2d\x57\x92\x14\x05\xf0\x04\xf0\x19\x7c\x1a\x3b\x05\x10\xc7\x5a\xe3\xd3\xe9\x72\x74\x46\x28\x19\x1c\x0e\xcb\x90\xc2\x5a\x63\xb2\x78\x65\xdf\x86\xe6\xd4\xc4\x9a\xa7\xf6\x36\x57\x9c\x79\xb3\xc9\x9d\xdb\x2b\x0c\xc2\xe1\x50\x14\xe0\x3f\xe0\x73\x86\xc6\xfa\xdf\x1e\xee\xfd\xaf\xd4\xae\x2b\x75\x05\x4e\x96\x0e\x74\xfe\x9b\x04\xf2\x55\x63\xce\x71\x47\xc0\x87\xc3\x21\x0c\xe8\x32\x0c\x04\xff\x80\xdc\x62\x25\x13\xbe\xca\x74\xb5\xfe\xce\x44\xcf\x40\xde\x93\xf5\xef\x15\xda\xe2\x04\xec\x12\x15\x7f\x9c\x7a\x7b\x9b\x90\x30\xc8\xc4\x2b\x2b\x9d\xf2\xb4\x34\x9a\xbe\x5e\xa0\x7d\x85\xda\x45\x70\x1a\x48\x28\x43\xa8\x08\x04\x2e\x7b\xd0\xdc\xdf\x00\x3a\x7b\xf7\x97\x51\xb9\x6a\xc7\x4e\x1c\x02\xa1\xfc\x3f\x35\x56\xf3\x14\x19\x30\x6a\x69\xa9\x21\x60\xec\xde\x85\xbf\xe3\xcc\xae\x6f\xe7\xb3\xd9\x8f\x6f\x04\x78\x74\xb2\x46\xca\x86\xda\xea\x61\x86\x35\xf0\x8b\xce\xf3\x6b\xb7\xf2\xa9\xa6\x5b\xb4\xa8\x9b\xa3\xb6\xeb\xab\xa0\x8f\x48\xff\x50\x91\xe1\xb5\x28\x61\x30\x34\x15\x87\x79\x05\x41\x91\x62\xfb\xe1\x89\x14\x05\x68\x2a\x57\x08\x9f\x54\xea\xca\xe2\x06\x3e\xe5\x2e\x1d\xb8\x5d\x80\x7f\x52\x30\x43\xea\xe5\x18\xc5\x15\xc7\x54\x6d\x60\x8e\xcf\x3a\x88\x8a\xc8\x81\x19\xbf\x80\xd0\x74\x07\x9e\xc6\x54\xd0\x18\x9b\x5c\xc8\x1d\x01\x72\x17\x46\x1a\x82\x25\x99\x5c\x8d\x3e\xfc\xa8\xa0\x62\xb4\x6a\x2d\x43\x0f\x77\xd8\x81\x85\x41\x79\xcd\xde\xbc\xf3\x75\x33\x7c\x1b\xaf\xd3\xa2\x12\xa5\xb7\xd3\x95\x56\x59\x0a\x69\x26\xc4\x54\xf3\xd5\xba\xaf\x59\xbd\x86\xc3\x65\x9a\xd9\x0a\x68\xe0\xee\x12\x41\xd0\x08\xdb\xe1\x1b\x59\x79\x35\x42\x89\x12\x65\xd6\x2a\x09\x76\x9f\xe2\x82\x54\x0f\xa4\x03\x0a\x0e\x98\xc7\xaa\x16\x64\xa2\x4a\xc1\x6c\x09\x28\x19\x0b\x1e\xff\x5b\xce\x34\x37\x0c\x1f\x30\xd1\x68\xd6\xde\xe4\xca\x10\xca\x30\x78\x4b\x2a\x35\x90\xd0\xa9\xd9\xcb\x98\x80\xe5\xd6\xf5\xc6\xb6\x65\xd4\x2e\xaa\xa6\x41\x96\x61\xd0\x33\x73\x2f\xba\x09\xaa\x0c\xaf\xdc\xd5\x19\xb5\x7d\xa3\xb2\xe6\xe1\x27\xa6\x76\x52\x28\xca\x16\xf3\x61\x4c\x7e\x00\x5d\x8d\xcb\x73\xca\xbe\xb4\x2b\xef\xe6\x8c\x5e\x73\xe7\xcb\xaa\x1c\xda\xa1\x19\xcf\x87\x5c\xe1\x61\x66\x7c\xbb\x02\xa3\xe3\xa1\xc7\x44\xa0\x1c\xb9\x0b\x52\xce\x5c\x58\xa3\xbb\xbd\xcd\x13\x67\x6d\x59\x13\x08\xde\xee\x1e\xfd\x9d\xab\x27\x83\x57\x96\x2e\xa8\x5f\xa8\x3a\x8f\xb5\x58\xff\x1c\xc3\x19\x75\xbe\x38\xdc\x28\x6c\xdf\x5d\x8a\x02\x8c\x7b\x05\x8d\xff\x7c\xfc\xfb\x1e\xbc\x4a\xfe\xf6\x70\x0f\x24\x60\xd4\xac\x23\x45\x35\x0b\xa8\x31\x68\x4d\x90\xa3\x64\x4a\x9b\xa0\x7d\x63\x31\xbe\x44\x3b\x8d\x4c\x10\x9b\x4a\xfb\x58\x69\x23\xa5\xac\xb1\x9a\xa6\xfe\x96\x4b\x3f\x36\x86\x40\x42\x85\xc1\xc9\x07\x7a\xd5\x68\x52\x25\x0d\xcf\xb1\x09\xe0\xa8\xe9\x0f\xe0\x32\x2b\x1b\xd3\xe5\x64\xf0\x7b\xdf\xff\xcf\x24\xd8\x98\x60\xf3\x9c\xa1\xde\xfb\x1d\x0a\x5d\xdc\x9b\x33\xde\x3e\xee\xc4\x36\x3d\x07\x76\xee\xf7\xc5\x54\x0c\xab\x2f\x88\x7a\x52\xd0\x34\x15\x3c\x2e\xa9\x09\x8e\x9f\x17\x9d\x56\xb6\xe3\x92\xa9\x9d\x7f\x3a\x1b\x60\x01\x49\x26\x4b\x7e\xbd\x09\x14\x27\xf5\xfd\xc9\x1b\xff\x50\x5b\x8f\x27\x3e\xb5\x56\x7b\x63\xa3\xe3\xf1\x0d\x8c\x07\xf6\xdd\x27\xbb\x18\xff\xe2\x49\xdc\xc1\x17\x6a\xd1\x9b\x4c\xfc\x15\xda\x47\xbe\x75\xe2\x5d\xeb\xeb\x70\x37\x1a\x5d\xf6\xa9\x91\xb2\xbd\xd7\x04\x08\x67\x11\xd6\x29\x19\xb4\x7f\x49\x8b\x3a\xa7\xc2\xbb\x98\xe5\x8d\xa3\xae\xd1\x3d\xe9\x4a\xf9\xc4\xeb\x3d\xee\xa3\xee\x67\x98\xcf\x66\xb3\x6e\x50\xb5\x1c\x06\x15\x91\xcb\xd1\x69\x67\x69\xa5\xff\x02\x00\x00\xff\xff\x9e\x4c\x28\x02\x45\x10\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4e\x3f\x6f\xd3\x40\x1c\x7d\x0d\xe5\x5f\x10\x08\x31\x31\x30\x1c\x03\x15\x0c\x2e\x76\x60\x40\x4e\x9c\x20\x4a\x2b\x55\x34\x52\x14\x99\x8a\xf5\xd4\x5c\x1c\x0b\xe7\x2e\xba\xb3\x5b\x40\x1d\x42\x41\x30\x50\x89\x09\x21\x31\x50\xf1\x0d\x02\x28\x52\x40\x4d\x56\xd6\xdf\xad\x0c\x0c\x8c\x4c\x7c\x04\x94\xc4\x50\xf1\x96\xf7\x9e\xdf\x7b\x3f\xdf\x8f\x0b\x8b\x6f\x00\xe0\x24\x80\x4b\x00\x42\x00\x67\x00\xec\x63\x8e\x11\x80\xb3\x00\xbe\x00\x38\x05\xe0\x1b\x80\xd3\x00\x28\xdf\x7c\xcf\xf9\x27\x80\xe3\x00\x7e\x01\xa8\x2d\x00\xbf\x01\x5c\x04\xe0\x16\x80\x73\x00\xd6\x0b\xc0\x79\x00\x0f\x72\x8e\x73\x7e\x92\xf3\xab\x02\xb0\x80\x23\x1c\x03\x50\xc8\x6f\x4f\x71\x22\xe7\xc5\xfc\x3f\x58\x51\xb2\x1d\x47\x99\xe6\x69\xac\x24\xee\xaa\x1d\x99\x28\xde\x42\x83\x6b\xde\x15\xa9\xd0\x68\x68\xb1\x1d\x8b\x1d\x34\x45\x5b\x0b\xd3\xc1\x26\x4f\x32\x81\xa6\xe8\x29\x9d\x3a\x75\x13\xc5\x2d\xe7\x4e\x16\x19\x27\x54\x3e\x6b\x89\xed\xdb\x0f\xe3\x0e\xef\xaa\x65\x9d\x15\x37\xb8\x49\x9d\x50\x73\x69\x12\x9e\x2a\xed\xb3\x7b\xb3\x88\xd5\x33\xcd\xbb\xaa\xa5\x58\xe5\xbf\x7e\xb5\xb8\xc1\x65\x94\xf1\x48\x38\xa1\xe0\x5d\x9f\xfd\xf3\x3e\x6b\x66\xc6\xc4\x5c\x16\xeb\xeb\xf5\x55\x67\x53\x68\x13\x2b\xe9\x33\x6f\xd9\x2d\xae\x28\x99\x0a\x99\x3a\xe1\xe3\x9e\xf0\x59\x2a\x1e\xa5\xd7\x7b\x09\x8f\x65\x99\x6d\x75\xb8\x36\x22\x0d\xee\x87\x6b\xce\xad\xa3\xde\xf4\x3d\x6d\xa1\x9d\x55\xb9\xa5\x5a\xb1\x8c\x7c\x56\x6c\x24\x99\xe6\x89\xb3\xa6\x74\xd7\xf8\x4c\xf6\x66\xd6\x04\x37\xca\x6c\x2e\x03\x79\xc5\x73\x83\xc0\x63\x4b\x4b\x6c\x2a\xdd\xcb\x81\xe7\xb1\x1a\x73\x99\x3f\xf3\xd5\xa0\xf4\x37\xaa\x04\x37\xa7\xf2\xea\xac\x56\xf1\x5c\xb6\xbb\x3b\x9f\x54\x83\x92\x7b\x8d\xd5\x98\xc7\x7c\x56\x2a\x83\xde\xd1\x84\xc6\xf6\x39\x8d\xe8\xb3\x7d\x66\xfb\x34\xb0\x2f\x68\x64\x5f\x83\x3e\xd0\x57\x1a\xd8\x97\x34\xb0\x7b\x76\x1f\x74\x40\x83\x69\x4a\x87\x34\xb4\x7b\xb6\x0f\x3a\xb0\x7d\x9a\xd8\xa7\x74\x48\x93\xf9\x87\xf7\xf4\x91\xc6\x34\xa1\x4f\x34\x9a\x4f\xde\xd2\x78\x76\x61\x48\x63\x1a\xd1\x10\x7f\x02\x00\x00\xff\xff\x72\x24\x38\x60\x9c\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
