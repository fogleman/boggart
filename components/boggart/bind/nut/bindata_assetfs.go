// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package nut

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x51\x6f\xda\x30\x10\x7e\xef\xaf\x38\x59\x9d\xd4\x4a\x0b\x04\x1e\xaa\x09\x05\x5e\xf6\x3a\x55\x93\xb6\xf5\xb5\x72\xe2\x6b\x62\xcd\xd8\x91\x6d\x48\x50\x94\xff\x3e\x39\x24\x90\x42\x30\x59\xb5\x6a\x1b\x0f\x10\xdb\xf7\xdd\x7d\xf7\xf9\x3e\x85\xaa\x02\x86\x2f\x5c\x22\x90\x44\x49\x8b\xd2\x12\xa8\xeb\x9b\x88\xf1\x2d\x24\x82\x1a\xb3\x24\x5a\x15\x64\x75\x03\x00\xd0\xdf\x4d\x94\x08\xd6\x2c\x98\xcd\xc1\x3d\x99\x75\xf7\x54\x9a\x60\x36\x6f\xe3\x4f\x31\xe5\x73\x4e\x25\x8a\xde\xe9\x79\x84\xe5\x56\xe0\x49\x44\x13\x95\xcd\x57\x55\x05\x7c\xf6\x49\x02\x79\x44\x5b\x28\xfd\x13\x7e\x7c\xfd\x06\xdf\x95\x12\x86\xc0\x04\xea\x3a\x9a\x66\xf3\x01\x64\x9f\xb5\x40\xaa\x5f\x78\x49\x56\xd1\x94\xf1\xed\x09\x91\x81\xad\x57\xdc\x3a\x85\xce\x6b\x38\x66\x2f\x90\x22\xdc\x09\x94\x30\xd9\x52\xcd\x69\x2c\xd0\x3c\xc7\xbb\x67\x49\xd7\x78\x0f\xa1\x93\xd5\x47\xed\x28\xb3\xb7\x81\xbd\xec\x0f\x9d\xea\x0f\x9d\xe8\x0f\x17\xc0\x4d\x82\xfc\x28\xdd\xe7\x8c\xea\x14\x59\x27\x58\xee\x41\xf5\xca\xe6\x5a\xa5\x1a\x8d\x21\x60\xec\x4e\xe0\x92\xac\xa9\x4e\xb9\x0c\x62\x65\xad\x5a\x2f\x42\x4f\xf1\x4b\xa9\x82\x98\x6a\xe8\x2f\x02\xb3\x49\x12\x34\x66\xaf\xe5\x24\xd9\x13\x85\xba\x3e\x89\xb2\x9a\xe7\xc8\x80\x26\x96\x6f\xb1\xaa\x00\xa5\x0b\x22\x5e\x02\xcd\x47\x2b\xc7\xbc\x4b\x16\x53\x4d\xc0\xdd\x53\xb0\xa5\x62\x83\x6b\x2e\x97\x24\x7c\xb5\x43\xcb\x25\x99\x85\xe1\x88\xcc\x47\x90\x54\xc5\x92\x54\x15\xdc\x71\xc9\xb0\x1c\x98\x04\x20\x31\xb5\x16\xf5\xae\x6d\x90\xdc\x4f\x9e\x1c\x70\x5c\x0b\xad\xfa\x05\x67\x36\x5b\xbc\xb1\xcc\x87\x2b\x97\xd5\x5c\x98\xc9\xa9\xec\xaa\x09\x2e\x31\xc8\x90\xa7\x99\x5d\xcc\xc3\xbc\x24\xab\xb7\x56\x8e\xa6\x2e\xef\x95\x59\x39\x77\xe1\xc8\x63\xdf\xd1\x9f\xb4\xd0\x17\x45\xff\x49\xff\x14\x54\x4b\x2e\x53\x9f\x5d\xfe\x1f\x97\x6c\x72\x33\x11\x4e\xe8\xf7\xf2\xc7\x40\x81\x77\x77\xc6\x50\xcd\xbf\xe2\x89\x4b\xdb\xe3\xde\x47\xd6\xb5\xd5\xc5\xed\x17\xcd\xf7\x61\xd8\x98\x0d\x34\x9a\x5c\x49\xc3\xb7\x08\x52\x15\x9a\xe6\xe4\xf5\xe5\xcc\xc2\xd0\x27\x77\x64\x33\xa4\xcc\x77\xae\xaf\x48\x66\xb3\xa3\x63\x9f\xda\xab\xe8\x5c\x6b\xb3\xdf\x02\x8b\xcd\x28\x64\x34\xf5\x91\x72\xd8\x2b\x2d\xc5\x8a\xed\x2e\x9f\x57\x15\x68\x2a\x53\x84\x5b\xfe\x11\x6e\xbb\xe9\x82\xc5\xb2\x37\x6a\x43\x7f\x32\x8e\xf9\xaf\x4a\xc6\x5c\xd7\x87\xd4\x93\x47\x37\xb4\x4d\xd7\x1e\xda\x83\xc8\x6e\xba\xfd\x50\xbf\x60\x87\x57\xbb\x0f\x7f\x59\xb2\x68\xda\xcc\xe4\xe8\xd9\x1f\x2e\x77\x12\xdc\x5b\xb6\x8f\xed\xcf\x01\xfd\x2b\x00\x00\xff\xff\x59\x54\x18\xae\x51\x0b\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xb1\x8b\x13\x41\x18\xc5\x5f\xe2\xc9\x49\x2a\x11\x0b\x0b\x8b\xcf\xc2\x43\x8b\x39\x77\xa3\x85\x4c\x32\x89\x78\xde\x81\x98\x80\x1c\x6b\xfa\xf1\x76\xdc\x2c\x6e\x66\xc2\xcc\xae\x28\x5c\x11\xb0\x50\xab\xc3\x42\x6d\x14\x2b\xfb\x80\x44\x45\x3c\xff\x86\xd9\x7f\xc0\xce\x7f\xc1\x5a\x76\xb3\x2a\x4e\xf3\xbd\xf7\xbd\xdf\x3c\xbe\x1f\x67\x36\x5e\x01\xc0\x49\x00\xe7\x01\xdc\x02\xb0\x09\x20\xc3\xfa\x3d\x6f\xfc\x0b\x00\x1b\x00\x5e\x36\xec\x6b\x00\xa7\x00\xbc\x05\x30\x6c\x01\x1f\x00\x9c\x06\xf0\xb3\xb5\x9e\xbf\x9a\xb9\xd9\x06\xce\x02\x38\xd7\x06\x5a\x4d\x67\xbb\xe9\xaa\x7a\x4e\x34\x3b\xec\x4c\xa5\x4d\x54\x8c\x91\x91\x31\x26\x32\x2b\x14\x26\xd2\xa6\xf2\x7e\xa6\xb0\xaf\xe6\xc6\xe6\x6c\xec\x92\x34\x66\x37\x8b\xc4\xb1\xc8\x70\x8a\xd5\xa3\x1b\x0f\xd3\xa9\x9c\x99\x6d\x5b\x74\x46\xd2\xe5\x2c\xb2\x52\xbb\x4c\xe6\xc6\x72\xba\x53\x47\x34\x2e\xac\x9c\x99\xd8\x50\xff\x3f\x7e\xd0\x19\x49\x9d\x14\x32\x51\x2c\x52\x72\xc6\xe9\xaf\xe7\xb4\x5f\x38\x97\x4a\xdd\x19\xdf\x1e\xef\xb2\x89\xb2\x2e\x35\x9a\x53\xb8\x1d\x74\x76\x8c\xce\x95\xce\x59\xf4\x64\xae\x38\xe5\xea\x71\x7e\x65\x9e\xc9\x54\xf7\xe8\x60\x2a\xad\x53\xb9\xb8\x17\xed\xb1\xeb\xff\xb8\xea\x9e\x07\xca\xb2\x5d\x7d\x60\xe2\x54\x27\x9c\x3a\x77\xb3\xc2\xca\x8c\xed\x19\x3b\x73\x9c\xf4\xbc\xb6\x4e\x5c\xed\xd1\x5a\x0a\x7d\x31\x0c\x84\x08\x69\x6b\x8b\x2a\x19\x5c\x10\x61\x48\x43\x0a\x88\xd7\x7e\x20\xba\x7f\xa2\xbe\xb8\x56\xc9\x4b\x35\xd6\x0f\x03\x3a\x3c\x5c\x7f\x19\x88\x6e\x70\x99\x86\x14\x12\xa7\x6e\x0f\xfe\x8d\x5f\x96\x8b\xf2\xc8\x7f\xf2\x2b\x7f\xec\xbf\xc3\xbf\xf3\x4b\xff\xb1\x5c\x94\x4f\xfd\x67\xff\xd5\x2f\x2b\xe2\xd8\x2f\xcb\x67\x75\xfe\xc5\xaf\xe0\xdf\xfb\x55\xb9\xf0\x2b\xff\xad\x5e\x55\xe1\x11\x7e\x07\x00\x00\xff\xff\x31\x99\x26\x1d\x2d\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
