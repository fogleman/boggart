// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package nut

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x8f\xdb\xb6\x12\x7e\xdf\x5f\x31\x87\x67\xcf\xb1\x8d\x46\x92\x77\x0b\x04\x85\x23\xb9\x0f\x69\x80\x3c\xa4\x69\x90\xdd\xa4\x0f\x41\x10\xd0\x22\x6d\x73\x43\x91\x2a\x49\xc9\x5e\x18\xfe\xef\x05\x75\xb3\x2c\xcb\xb2\xb2\xb7\xa4\x40\xf5\x60\x53\xe2\x70\xee\x33\xdf\x48\x9b\x0d\x10\x3a\x67\x82\x02\x0a\xa5\x30\x54\x18\x04\xdb\xed\xd9\x66\x03\x6c\x0e\x0b\x0a\x43\x4e\x05\xb8\x29\x56\x0c\xcf\x38\xd5\x23\x18\xdb\x6d\x9f\xb0\x14\x42\x8e\xb5\x0e\x90\x92\x2b\x34\x3d\x03\x00\xa8\x3f\x0d\x25\x77\x22\xe2\x5c\x5c\x82\x5d\xe9\xa8\x5c\xad\xb5\x73\x71\x59\xd0\x37\xcf\xac\xbf\xc4\x58\x50\x5e\xdb\x3d\xa4\x30\xcc\x70\xda\xa0\xc8\xa8\x96\x97\x53\xab\xf4\xc5\x2f\x02\xd0\x5b\x6a\x56\x52\x7d\x85\x0f\xef\xae\xe0\x5a\x4a\xae\x11\xb8\xb0\xdd\xfa\xde\xf2\xb2\xe5\x64\x5d\x6b\x4e\xb1\x9a\xb3\x35\x9a\xfa\x1e\x61\x69\x43\x91\x96\x47\x7b\xba\x95\x0e\xec\x96\xb1\xf3\x57\xa7\x26\xb9\xff\x9e\x97\xee\x7b\x5e\x7a\xef\xf9\x91\xc3\x19\x83\x78\xe7\x83\x97\x4b\xac\x16\x94\x94\x96\xc7\x1d\xa7\x6a\x62\x63\x25\x17\x8a\x6a\x8d\x40\x9b\x5b\x4e\x03\x14\x61\xb5\x60\xc2\x99\x49\x63\x64\x34\x19\x77\x08\x3f\xc6\xca\x99\x61\x05\xf5\x1b\x47\x27\x61\x48\xb5\xce\x73\xcc\x0d\x73\x45\x61\xbb\x6d\x50\x19\xc5\x62\x4a\x00\x87\x86\xa5\x74\xb3\x01\x2a\x2c\x11\xea\x54\x20\xbb\x94\xb4\x9a\x97\xcc\x66\x58\x21\xb0\xf9\xeb\xa4\x98\x27\x34\x62\x22\x40\xe3\xbd\x27\x78\x1d\xa0\x8b\xf1\xb8\x07\xe7\xdd\x21\x21\x57\x01\xda\x6c\x60\xc8\x04\xa1\xeb\x5a\x85\x00\x9a\x61\x63\xa8\xba\x2d\x0c\x43\x23\xf7\xa3\x3d\xd0\x4f\xf5\xc2\xeb\x2b\x46\xcc\x72\xf2\x8d\xec\xff\x77\x22\x38\x59\x80\x74\x8c\x45\x29\x85\x33\x41\x9d\x25\x65\x8b\xa5\x99\x5c\x8e\xe3\x35\x9a\x7e\xab\x44\xdf\xb3\xfc\x4e\xe4\xc4\x61\xd9\xf4\xdc\xee\xda\x7a\xc8\x52\x79\x23\xf1\x0f\x59\x27\x2b\xac\x04\x13\x8b\xae\xb2\xf8\xf1\xab\x21\x89\xb5\xcb\xad\x83\x1f\xba\x0e\x5a\x18\x3f\x5a\x05\xb4\xc9\xfa\x2e\xb9\x7f\xec\x71\x03\x5f\x1a\x59\x69\x64\x3c\x81\x0b\x77\x4c\xa3\x17\x4f\x01\x3d\x57\x06\x9b\x44\xf7\xa9\xa8\x78\xea\x6b\xa3\xa4\x58\x74\xf8\x5d\xe7\xdc\x76\x9e\xf7\xbd\xe2\xcc\x51\xde\x4f\xd5\x38\xde\x27\xc2\xb0\x88\x3e\x84\xa5\x65\x8f\x55\x05\xcb\x9d\xb9\x50\x89\xd3\x34\x94\x82\x54\x8e\xbd\xa3\x17\x4e\x4f\x36\xb5\xdb\x62\x59\xfc\x55\x20\x7c\xd6\x1c\x10\x6d\xa0\x3e\x3e\xe5\x90\x68\xe9\x38\x8e\x35\x25\xf7\x1f\x17\x2b\xc5\x3b\xc7\xc4\x84\x97\x6c\x05\x4e\x41\xe0\xd4\x76\x63\x65\x5b\x07\x64\x1a\x7d\x31\x52\xf2\x99\x5c\x1f\xab\x30\xce\xa6\x3e\xae\x59\x9e\x69\xef\x70\x26\xbe\xa2\xa9\xcf\xca\x8d\x39\x86\x39\x76\xc2\x25\x4d\x95\x14\x4e\x12\xdb\x49\x94\x4d\x7d\x0f\x4f\x7d\x8f\xb3\xb6\x68\x26\xfc\x3b\xcd\xb4\x73\xa9\xa2\x02\x5d\xec\x12\x65\x90\x24\x45\x80\x7e\x2d\x16\x65\x7a\x23\x88\xa8\x59\x4a\x12\xa0\x58\x6a\x83\x80\x91\x00\xa5\x3b\x9f\x13\x6c\xb0\x63\xe4\x62\x61\x39\xa5\x98\x33\x82\x8d\x54\xc7\xdc\x68\xec\xa9\x52\xbf\xfc\x26\xfb\xad\x80\x91\x18\x47\x51\x1d\x4b\xa1\x59\x4a\x41\xc8\x95\xc2\x31\xda\x07\x94\x8b\xf1\xb8\x0b\x2a\x7c\xb3\xa4\x98\x74\xed\xab\x13\x6d\xdf\x2c\x0f\xb3\xab\x4c\x2e\xb3\xfc\xa6\xc3\x3c\xb9\xdb\xc9\xdf\xa8\x0e\x15\x8b\x6d\x20\xfa\x9c\xf7\xbd\x2e\xa3\xec\xd9\x13\x2e\x99\x49\x72\x7b\x7c\x7f\xb3\x01\x85\xc5\x82\xc2\x39\x7b\x06\xe7\x65\xf0\x61\x12\x34\x5a\x87\xed\x1b\xc7\x65\x9c\x74\x3b\xb1\xf6\x57\xec\xdd\xb7\x38\xca\x01\xc3\x74\xa8\x5e\x9e\x3c\x39\x39\xe4\x2d\x6f\xc7\xfd\x4f\xc5\x0c\xcd\xcc\xe8\x50\x7a\x4f\x0a\x13\x71\x62\xc0\xdc\xc6\x34\x40\x86\xae\x0d\xaa\xaa\x5e\xaa\xc8\xb1\xa5\xa6\x24\x47\x20\x70\x44\xb3\x71\xea\xc0\x12\x04\xd9\xb8\xd5\xd8\xac\xe6\xaa\xac\xb2\x5a\xcf\x79\xbd\xcc\xa3\x5c\xf7\x36\xa6\x55\x83\x5e\x42\x72\x04\xe9\x74\x54\xaf\x80\x95\xa9\xbe\x53\xa3\x96\xf3\x70\x7e\x32\xf0\xdd\x29\x7f\x5a\x53\xdf\xeb\x48\x7a\xdf\xcb\xba\x52\x5b\xc3\xb6\xc1\xbe\x37\xfe\xfe\x63\xc0\xf5\xa5\x8c\x22\x5c\x9b\x5a\xfe\xc5\xd6\x3e\xd8\xfa\xc8\x28\xd7\x85\x70\x9d\x6d\x76\x0f\x62\x8a\xd0\xf6\x82\x97\xfa\xb9\x57\x6b\x1a\x26\xa6\x17\xac\xdd\x15\xd2\x8e\xd7\x76\x27\x94\x75\xc1\xd8\x3e\x84\x85\x11\xa9\xd0\xab\x4c\xf1\x63\xcd\xe2\x84\x47\x73\xd0\x0a\x23\xd2\x0f\xaf\x4e\x62\x95\x3f\x4b\x8c\x91\xa2\xc0\x99\xfc\xa6\x42\x9a\x99\x11\x30\x33\xc2\x21\xd6\x14\x95\x2d\x75\x84\x40\x8a\x90\xb3\xf0\x6b\x80\x68\x1e\x9b\x97\x11\x19\x0e\x1a\x6a\x0d\x46\x3d\x5e\xaf\xdb\x83\x7c\xa2\xdb\xe7\x3a\x76\x76\xea\x13\x0e\xa9\xb0\xc0\xea\xdb\x1f\x06\x8e\xa7\x49\x77\xfb\x3f\xda\xfa\x5b\xdb\xfe\xdd\x5e\xaf\xca\xcf\xf2\x37\x3a\xfb\x22\xef\xe7\x36\x15\x51\xc5\x71\xcc\x59\x88\xad\x89\xde\x0d\x4e\x71\xbe\x59\xc4\x67\xb3\x01\xfb\xd2\xcc\xc2\xd7\xd7\xbf\xbf\x81\x61\xbe\xfe\xf0\xfe\x0d\x20\x8f\x60\xbd\x9c\x49\xac\x88\x87\xb5\xa6\x46\x7b\x29\x15\x44\x2a\xed\xd9\x21\x3c\x53\x5d\xbb\x82\x1a\xef\x46\x7b\x37\x7f\x25\xf6\x85\xd4\x6e\x5c\xe7\x1b\x11\x13\xae\xd5\x66\x8e\xb9\xa6\xa3\xd2\x37\xf7\x97\xe6\xcc\xb4\x15\x58\x93\x34\x93\xd2\x68\xa3\x70\xfc\x78\x32\x77\xdd\xb3\x21\x7b\xb7\xf1\x14\xc2\x0b\xdb\x6b\x42\x1f\xc3\xf6\xea\xad\xca\xca\xaa\x6e\x5a\x04\x64\x12\xce\x87\x44\x86\x49\x44\x85\x19\xb9\x8a\x62\x72\x3b\x9c\x27\x22\x7b\xa5\x83\xe1\x08\x36\x55\x22\x57\x4f\x8b\x0f\xfa\xaf\xb1\x20\x9c\xaa\xa1\xaa\x13\xd9\x8b\xcd\x61\xa8\xac\x63\x13\x6e\x20\x08\x02\x18\xcc\x31\xe3\x94\x0c\x9a\x84\xf6\x12\x74\x05\xef\xde\x4a\xc3\xe6\xb7\xc3\xc3\x5d\x7b\x65\x73\xc7\x04\x06\xaf\x94\x92\x6a\xf0\xac\x9d\x86\xae\xcd\x04\x94\x1b\x51\xad\xf1\x82\x1e\x21\xba\x8d\x2d\x1f\xda\xc1\x67\xc9\x08\x9d\xe4\x0e\x6a\x27\xb0\x90\xcb\xc4\x62\x02\x83\x2a\x70\x3f\x0f\x0e\x28\xb7\xa3\x17\x7b\xcf\xb6\xf9\xac\x9d\x3b\xa6\xd0\x11\xfe\x63\x3d\x93\x88\xbc\xf0\xef\xeb\x9c\xab\x3c\x26\x0f\xe0\x1e\xdd\xc9\xe9\xb1\x1c\x74\xb6\x5b\x55\xcb\x15\x13\x44\xae\xdc\x1d\x46\x41\x50\x25\xe1\x30\x8c\x48\xd3\x63\xe7\x2e\xbe\xc1\xeb\x16\x47\x15\x96\xbd\xfb\xe3\xea\xba\xc5\xac\x44\xf1\x09\x0c\xca\xaf\x18\x61\x44\xfe\x1f\x46\x24\x18\xc0\x4f\x10\x46\xe4\x90\xbc\xf0\xcf\xa4\x51\x06\x67\xc7\xcc\xdb\xbe\xd8\x59\x74\x3e\x1c\xfc\x77\xf7\x15\x30\x7b\x3f\xfc\xc4\xc8\xe7\xc1\xc8\x0d\x97\x16\xa1\xab\xca\x1b\x36\x6d\x4b\xb1\x3a\xd0\x64\x0e\xc1\x3e\xc7\xc1\xe8\x50\x5d\x9a\x11\x99\x25\xd3\x2d\x9b\xb6\x4f\x41\x00\x9b\x7d\xd8\xab\x29\x5c\x12\x7d\xa2\x6e\xac\x64\x3c\x1c\x30\x32\x18\x7d\x86\x00\xa8\x9b\x62\x3e\x1c\x35\x48\x4f\x44\x60\x5e\x30\xc9\xbf\x0f\xb5\x69\x9b\xc5\xa2\x24\xcb\x23\xd2\x46\x66\x55\x9a\x64\xbf\x0f\x10\x9f\x62\x6d\xff\x7d\x2f\x47\xd6\x1a\x38\xff\x1d\x00\x00\xff\xff\x52\x94\x58\x98\x32\x1f\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x4f\x4f\x1b\x47\x18\xc6\x9f\xed\xd2\x96\xba\xb4\xaa\x28\x52\x2f\x3d\x4c\x55\x15\xb5\x87\xa5\xb6\xdb\x43\xb5\xb0\x50\xd5\x05\x15\x15\x4b\x2d\x71\x90\x72\x1c\xec\x89\xd9\xc4\x9e\xb5\xf6\x0f\x22\x12\x91\x6c\x23\x25\x07\x10\x48\x44\x51\xa4\x44\x49\x94\x1c\xa2\x1c\x8d\xc0\x09\x02\x6c\x0e\xc9\x07\x78\xe7\x98\x4b\x3e\x42\x3e\x41\x0e\xd1\xec\x2e\x10\xc4\x1e\xf6\x7d\x9f\xe7\x7d\x66\xe6\xf7\xbe\x1d\x1e\xb8\x0b\x00\x5f\x03\xf8\x1e\xc0\x06\x80\x6f\x01\xbc\x47\xf2\xfd\x63\x00\x9f\x03\x98\x4d\xeb\xff\x06\x30\x08\xe0\x8a\x01\x7c\x09\x60\xd1\x00\xbe\x03\x20\xd3\xf9\x2d\x03\x18\x00\xb0\x99\xea\x3b\x06\xf0\x19\x80\x07\x06\xf0\x29\x80\xa7\xe9\xf9\xe7\x06\xf0\x05\x80\x9d\x34\x77\x68\x00\x53\x06\xf0\xca\x00\xbe\x01\x60\x9a\x09\xd3\x48\x5a\x7f\x34\x13\x3f\x6f\x02\xa3\x00\x0a\x26\x30\x0c\xe0\x5a\xea\xdf\x34\x13\x8e\x4d\x13\x18\x02\xf0\x2c\xf5\x77\x4d\x60\x04\xc0\xeb\xb4\xbe\x49\xe7\xef\x4c\xc0\x48\x77\xfc\x2a\xad\x7a\x1f\xcd\x34\x94\x6a\xcd\xad\x77\x19\xc4\xd9\x97\xd1\x6c\x00\x3e\x41\xb2\x8f\x66\xd3\xfc\x28\x2c\x71\xbf\x2a\x2a\x28\x78\xf5\x3a\x97\xa7\x35\xc0\xdf\x22\x28\xfb\x6e\x23\x74\x3d\xf9\x71\xcf\x22\xc9\x97\xb9\x5b\xe3\x8b\x35\x81\xe9\x15\x51\x8e\x42\x81\x39\x8f\x57\x30\x1f\xc9\xd0\xad\x0b\x5c\x0a\x79\x18\x05\x58\xe0\xb5\x48\x60\x81\xfb\x6e\x1c\x3d\x69\x02\x04\xa2\xec\xe9\x07\xe6\x45\xc3\xf3\x43\xab\x18\x54\xdd\x8a\xf5\x57\x54\x0d\xac\x92\x67\xb3\x8a\x58\xfe\xf3\xba\xbb\xc4\xeb\xde\x98\x1f\x65\xe6\x78\x10\x5a\x25\x9f\xcb\xa0\xc6\x43\xcf\xb7\xd9\xbf\xf1\x88\x15\x23\x9f\xd7\xbd\x8a\xc7\x26\xce\xe5\x27\x33\x73\x5c\x56\x23\x5e\x15\x56\x49\xf0\xba\xcd\x4e\xb5\xcd\xe6\xa3\x20\x70\xb9\xcc\x14\x67\x8b\xd3\xd6\x82\xf0\x03\xd7\x93\x36\xcb\x8d\x65\x33\x05\x4f\x86\x42\x86\x56\xe9\x46\x43\xd8\x2c\x14\x2b\xe1\xaf\x8d\x1a\x77\xe5\x38\x2b\x2f\x71\x3f\x10\xa1\x73\xb9\x34\x63\xfd\x71\x96\xd3\x3c\x57\x85\x6f\x4d\xcb\xb2\x57\x71\x65\xd5\x66\x99\xff\x6a\x91\xcf\x6b\xd6\x8c\xe7\xd7\x03\x9b\xc9\x46\x2c\x03\xe7\xb7\x71\x96\xb4\x8e\xfc\x29\x97\x75\x9c\x1c\x1b\x1d\x65\xba\xcd\xfe\xe0\xe4\x72\x6c\x8a\x65\x99\x1d\xeb\x49\x27\x7f\x32\x9a\x70\x7e\xd7\xed\xcf\x71\x6c\x22\x97\x65\xab\xab\xc9\x91\x49\x27\x9f\xfd\x85\x4d\xb1\x1c\xb3\x59\x7e\x1c\x74\x8f\x3a\xaa\xa9\xb6\xe8\x05\x75\xa9\x47\x7d\xd0\x7d\xea\xd3\x11\x75\xa8\x47\x7b\xd4\x39\x27\xd5\x3a\xe8\x11\x1d\xd3\xbe\x6a\xc5\xc6\x3e\x75\x2f\x18\x8c\x7a\xfa\xb7\x47\x7d\xd5\x52\x6d\xb5\x46\xc7\xc9\xad\xdb\x6a\x9d\x8e\xa9\x4f\x87\x3a\xa6\xda\x6a\x03\xf4\x90\x3a\xb4\xab\x9a\x6a\x8d\x5e\xd2\x81\x7e\x6a\x5b\x35\xa9\x4b\x47\x6a\x8b\xa9\x26\x75\x68\x87\xfa\xaa\xad\xdf\x7c\xa2\xda\xd4\xd1\x97\xa9\x96\xe6\xed\x51\x47\xdd\x8e\x69\x63\x80\xc7\xd4\x4d\xce\xc5\x96\x1e\x6e\x5d\x30\xd5\x3a\x75\xa1\x5a\xd4\xa5\x03\xb5\xa6\x57\xc1\x87\x00\x00\x00\xff\xff\x57\x94\xb1\x06\xfb\x03\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
