// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package nut

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x8f\xda\x3a\x1e\x7f\x9f\x4f\xf1\x5f\xef\xec\x02\xda\x26\x61\x66\xa5\x6a\x45\x13\xf6\xa1\x5b\xa9\x0f\xdd\x6e\xd5\x99\x76\x1f\xaa\xaa\x32\xb1\x21\x9e\x3a\x76\x8e\xed\x04\x10\xe2\xbb\x1f\x39\x37\x42\x08\x81\xe9\x5c\xda\x23\x9d\x3c\x80\x13\xff\xef\xb7\x9f\x93\xcd\x06\x08\x9d\x33\x41\x01\x85\x52\x18\x2a\x0c\x82\xed\xf6\x62\xb3\x01\x36\x87\x05\x85\x21\xa7\x02\xdc\x0c\x2b\x86\x67\x9c\xea\x11\x8c\xed\xb6\x4f\x58\x06\x21\xc7\x5a\x07\x48\xc9\x25\x9a\x5e\x00\x00\x34\x9f\x86\x92\x3b\x31\x71\xae\xae\xc1\xae\x74\x5c\xad\x56\xda\xb9\xba\x2e\xe9\xdb\x3c\xab\x6f\x09\x16\x94\x37\x76\x0f\x29\x0c\x33\x9c\xb6\x28\x72\xaa\xe8\x7a\x6a\x8d\xbe\xfa\x97\x00\xf4\x9e\x9a\xa5\x54\xdf\xe1\xd3\x87\x1b\xb8\x95\x92\x6b\x04\x2e\x6c\xb7\xbe\x17\x5d\x77\x70\x36\xad\xe6\x14\xab\x39\x5b\xa1\xa9\xef\x11\x96\xb5\x0c\xe9\x78\xb4\x67\x5b\x15\xc0\x7e\x1d\xbb\x78\xf5\x5a\x52\xc4\xef\x65\x15\xbe\x97\x55\xf4\x5e\x1e\x61\xce\x05\x24\xbb\x18\xbc\x8e\xb0\x5a\x50\x52\x79\x9e\xf4\x70\x35\xd4\x26\x4a\x2e\x14\xd5\x1a\x81\x36\x6b\x4e\x03\x14\x63\xb5\x60\xc2\x99\x49\x63\x64\x3c\x19\xf7\x28\x3f\x26\xca\x99\x61\x05\xcd\x1b\x47\xa7\x61\x48\xb5\x2e\x6a\xcc\x0d\x0b\x43\x61\xbb\x6d\x51\x19\xc5\x12\x4a\x00\x87\x86\x65\x74\xb3\x01\x2a\x2c\x11\xea\x35\x20\xbf\x94\xb4\x96\x57\xc2\x66\x58\x21\xb0\xf5\xeb\x64\x98\xa7\x34\x66\x22\x40\xe3\xbd\x27\x78\x15\xa0\xab\xf1\xf8\x0c\xc9\x3b\x26\x21\x97\x01\xda\x6c\x60\xc8\x04\xa1\xab\x46\x87\x00\x9a\x61\x63\xa8\x5a\x97\x8e\xa1\x91\xfb\xd9\x32\x9c\x67\x7a\x19\xf5\x25\x23\x26\x9a\xdc\x53\xfc\xdf\x4e\x24\x27\x4f\x90\x4e\xb0\xa8\xb4\x70\x26\xa8\x13\x51\xb6\x88\xcc\xe4\x7a\x9c\xac\xd0\xf4\xbe\x1a\x7d\xcf\xca\x3b\x51\x13\x87\x6d\x73\xe6\x76\xdf\xd6\x63\xb6\xca\x3b\x89\x7f\xc9\x3e\x59\x62\x25\x98\x58\xf4\xb5\xc5\xaf\xdf\x0d\x69\xa2\x5d\x6e\x03\xfc\xd8\x7d\xd0\x21\xf8\xc9\x3a\xa0\x4b\xd7\x4f\xa9\xfd\x63\x8f\x5b\xf8\xd2\xaa\x4a\x23\x93\x09\x5c\xb9\x63\x1a\xbf\x7a\x0e\xe8\xb9\x31\xd8\xa4\xfa\x9c\x8e\x4a\xa6\xbe\x36\x4a\x8a\x45\x4f\xdc\x75\x21\x6d\x17\x79\xdf\x2b\x79\x8e\xca\x7e\xae\xc1\xf1\x31\x15\x86\xc5\xf4\xde\x9e\xba\xaa\x60\x7c\x88\x33\xa7\x0f\x28\x8d\xdb\x72\x59\xfe\xd5\x58\x7a\xd1\x3e\xe7\xd9\x78\x7f\x7e\xce\xb3\x9e\xa5\xe3\x38\xd1\x94\x3c\xfc\xd4\x57\x1b\xde\x7b\xda\x4b\x79\x25\x56\xe0\x0c\x04\xce\xec\x50\x55\x76\x02\x40\x6e\xd1\x37\x23\x25\x9f\xc9\xd5\xb1\x46\xe1\x6c\xea\xe3\x86\xe7\xb9\xf5\x0e\x67\xe2\x3b\x9a\xfa\xac\xda\x98\x63\x98\x63\x27\x8c\x68\xa6\xa4\x70\xd2\xc4\x1e\x28\xd9\xd4\xf7\xf0\xd4\xf7\x38\xeb\xca\x66\xca\x7f\xd2\xd1\x74\x2e\x55\x5c\x82\x84\x5d\xa2\x1c\x59\xa4\x08\xd0\xbf\xcb\x45\xd5\x8f\x08\x62\x6a\x22\x49\x02\x94\x48\x6d\x10\x30\x12\xa0\x6c\x17\x73\x82\x0d\x76\x8c\x5c\x2c\xac\xa4\x0c\x73\x46\xb0\x91\xea\x58\x18\x8d\xe5\xaa\xec\x2b\x6e\xf2\xdf\x1a\xdf\x88\x71\x14\xd5\x89\x14\x9a\x65\x14\x84\x5c\x2a\x9c\xa0\x7d\x5c\xb8\x1a\x8f\xfb\x26\xbe\x6f\x22\x8a\x49\xdf\xbe\x3a\x31\xbd\x4d\x74\x58\x5d\x55\x71\x99\xe8\x5e\xcc\x3c\xfd\x31\xce\xff\x50\x1d\x2a\x96\xd8\x44\x9c\xc3\xef\x7b\x7d\x4e\x59\xde\x13\x21\x99\x49\xb2\x3e\xbe\xbf\xd9\x80\xc2\x62\x41\xe1\x92\xbd\x80\xcb\x2a\xf9\x30\x09\x5a\xa3\xc3\xce\x8d\xe3\x3a\x4e\x86\x9d\x58\xff\x6b\xf1\xee\x7b\x5c\x8e\x4a\xd3\x63\x7a\xc5\x79\xf2\x00\x50\x8c\xbc\x9d\xf4\xff\x2b\x66\x68\xee\x46\x8f\xd1\x7b\x5a\x98\x48\x52\x03\x66\x9d\xd0\x00\x19\xba\x32\xa8\xee\x7a\xa9\x62\xc7\xb6\x9a\x92\x1c\x81\xc0\x31\xcd\x4f\x45\x07\x9e\x20\xc8\x4f\x4d\xad\xcd\xfa\x78\x94\x77\x56\x27\x9f\x77\x96\x7b\x94\xeb\xb3\x9d\xe9\xb4\xe0\x2c\x25\x05\x82\xf4\x06\xea\xac\x84\x55\xa5\xbe\x33\xa3\x51\xf3\x70\x79\x32\xf1\xfd\x25\x7f\xda\x52\xdf\xeb\x29\x7a\xdf\xcb\xa7\x52\xd7\xc0\xb6\xc9\x7e\x30\xfe\xfe\x61\xc0\xf5\xb5\x8c\x63\x2c\xc8\x9f\xd8\x7a\x18\xbf\x1e\x6c\x7d\x62\x94\xeb\x43\xb8\xde\x31\xbb\x07\x31\x65\x6a\xcf\x82\x97\x26\xdf\x9b\x15\x0d\x53\x73\x16\xac\xfd\x28\xa4\x1d\xef\xed\x5e\x28\xeb\x83\xb1\x7d\x08\x0b\x63\x52\xa3\x57\x55\xe2\xc7\x86\xc5\x89\x88\x16\xa0\x15\xc6\xe4\x3c\xbc\x3a\x89\x55\xfe\x2c\x35\x46\x8a\x12\x67\x8a\x9b\x1a\x69\x66\x46\xc0\xcc\x08\x87\x58\x57\x54\xbe\xd4\x31\x02\x29\x42\xce\xc2\xef\x01\xa2\x45\x6e\x5e\xc7\x64\x38\x68\x99\x35\x18\x9d\xf1\x96\xdc\x9d\xe4\x13\xd3\xbe\xb0\xb1\x77\x52\x9f\x08\x48\x8d\x05\xd6\xde\xf3\x61\xe0\x78\x99\xf4\x8f\xff\xa3\xa3\xbf\x73\xec\xff\xd8\xeb\x55\xf5\x75\xfd\x4e\xe7\x1f\xd6\xfd\xc2\xa7\x32\xab\x38\x49\x38\x0b\xb1\x75\xd1\xbb\xc3\x19\x2e\x36\xcb\xfc\x6c\x36\x60\xdf\x7d\x59\xf8\xf6\xf6\xbf\xef\x60\x58\xac\x3f\x7d\x7c\x07\xc8\x23\x58\x47\x33\x89\x15\xf1\xb0\xd6\xd4\x68\x2f\xa3\x82\x48\xa5\x3d\x7b\x08\xcf\x4d\xd7\xae\xa0\xc6\xbb\xd3\xde\xdd\x6f\x29\x55\x6b\xd7\x6e\xdc\x16\x1b\x31\x13\xae\xb5\x66\x8e\xb9\xa6\xa3\x2a\x36\x0f\xd7\xe6\xcc\xb4\x55\xd8\xd0\x34\x93\xd2\x68\xa3\x70\xf2\x74\x3a\x77\xd3\xb3\xa5\x7b\xb7\xf1\x1c\xca\x4b\xdf\x1b\x4a\x9f\xc2\xf7\xfa\xad\xca\xea\xaa\x6f\x3a\x14\xe4\x1a\x2e\x87\x44\x86\x69\x4c\x85\x19\xb9\x8a\x62\xb2\x1e\xce\x53\x91\xbf\xd2\xc1\x70\x04\x9b\xba\x90\xeb\xa7\xe5\x77\xf9\xb7\x58\x10\x4e\xd5\x50\x35\x89\xec\xc5\xe6\x30\x54\x36\xb0\x29\x37\x10\x04\x01\x0c\xe6\x98\x71\x4a\x06\x6d\x42\x7b\x09\xba\x84\x0f\xef\xa5\x61\xf3\xf5\xf0\x70\xd7\x5e\xf9\xb9\x63\x02\x83\x37\x4a\x49\x35\x78\xd1\x4d\x43\x57\x66\x02\xca\x8d\xa9\xd6\x78\x41\x8f\x10\xad\x13\x2b\x87\xf6\xc8\x89\x18\xa1\x93\x22\x40\xdd\x04\x16\x72\x99\x58\x4c\x60\x50\x27\xee\x9f\x83\x03\xca\xed\xe8\xd5\xde\xb3\x6d\x71\xd6\x2e\x02\x53\xda\x08\x7f\xb1\x91\x49\x45\xd1\xf8\x0f\x0d\xce\x4d\x91\x93\x47\x08\x8f\xee\x95\xf4\x54\x01\xba\xd8\xad\xea\xe5\x92\x09\x22\x97\xee\x0e\xa3\x20\xa8\x8b\x70\x18\xc6\xa4\x1d\xb1\x4b\x17\xdf\xe1\x55\x47\xa0\x4a\xcf\x3e\xfc\xef\xe6\xb6\xc3\xad\x54\xf1\x09\x0c\xaa\xaf\x18\x61\x4c\xfe\x1e\xc6\x24\x18\xc0\x3f\x20\x8c\xc9\x21\x79\x19\x9f\x49\xab\x0d\x2e\x8e\xb9\xb7\x7d\xb5\xf3\xe8\x72\x38\xf8\xeb\xee\xb3\x65\xfe\x7e\xf8\x85\x91\xaf\x83\x91\x1b\x46\x16\xa1\xeb\xce\x1b\xb6\x7d\xcb\xb0\x3a\xb0\x64\x0e\xc1\xbe\xc4\xc1\xe8\xd0\x5c\x9a\x13\x99\x88\xe9\x8e\x4d\x3b\xa7\x20\x80\xcd\x3e\xec\x35\x0c\xae\x88\xbe\x50\x37\x51\x32\x19\x0e\x18\x19\x8c\xbe\x42\x00\xd4\xcd\x30\x1f\x8e\x5a\xa4\x27\x32\x30\x2f\x85\x14\xdf\x87\xba\xac\xcd\x73\x51\x91\x15\x19\xe9\x22\xb3\x26\x4d\xf2\xdf\x47\xc8\x4f\xb9\xb6\xff\xbe\x57\x20\x6b\x03\x9c\x7f\x0f\x00\x00\xff\xff\x64\xf3\x10\xf1\xf9\x1e\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x4f\x4d\x4f\x14\x59\x14\x3d\x45\x31\x03\xd3\xc3\x4c\x94\x98\xb8\x71\xf1\x8c\x91\xe8\xa2\xb0\x0b\x5d\x68\x41\x81\x8a\x90\xa8\x74\x62\xb0\xed\x9d\x8b\x67\xf7\xb3\xa9\xd8\xfd\xaa\x53\x1f\x04\x23\x8b\xa6\x31\x9a\x88\x09\x06\x63\x8c\x26\x6a\x8c\xfe\x80\x32\xd2\x8a\x4a\x37\x7f\xe1\xbe\x3f\xe0\xc6\xad\x4b\x7f\x80\xa9\x0f\x40\x42\x2d\xea\x9e\x73\xee\xb9\xef\x9e\xfb\x7d\xb0\xf7\x19\x00\xfc\x07\xe0\x08\x80\xfb\x00\x0e\x02\xf8\x89\xf4\xcb\x6b\x40\x1f\x00\x33\xab\xe7\x34\xa0\x1f\xc0\x05\x0d\xf8\x17\xc0\x15\x0d\x38\x0c\xa0\x94\xf5\xa5\x06\xf4\x02\x98\xcf\xf8\x3d\x0d\xf8\x1b\xc0\xb2\x06\xfc\x05\xe0\x51\x36\xff\x44\x03\xfe\x01\xf0\x42\x03\x26\x34\xe0\x9d\x06\x1c\x00\xf0\xa3\x07\xf8\x1f\xc0\xaf\xac\xea\x7a\xaa\x0f\xea\xc0\x10\x80\x63\x3a\x30\x18\xef\xcd\xf4\x9b\x7a\xba\x5f\xea\xc0\x00\x80\x07\x99\xfe\x54\x07\x0e\x01\x78\x9f\xd5\x2f\x3a\xa0\x21\xcd\xd0\x97\xdd\xd6\x9f\xdd\xad\x23\xcd\x38\x80\xdd\x2f\xce\x96\x43\x7a\x63\x4f\xa6\xc5\x77\x61\x72\x8e\x7b\x55\x51\xc1\xa4\x5b\xaf\x73\xb9\x53\x7d\x5c\x12\x7e\xd9\x73\x1a\x81\xe3\xca\x3f\x31\x0b\x25\x9f\xe7\x4e\x8d\xdf\xaa\x09\x4c\x2d\x88\x72\x18\x08\xcc\xb8\xbc\x82\xd9\x50\x06\x4e\x5d\xe0\x7a\xc0\x83\xd0\x47\x89\xd7\x42\x81\x12\xf7\x9c\xc4\xba\x0d\x7c\xcc\x8a\x86\xeb\x05\x46\xc1\xaf\x3a\x15\xe3\x62\x58\xf5\x8d\xa2\x6b\xb1\x8a\x98\x3f\x7f\xc7\x99\xe3\x75\x77\xd8\x0b\x73\x33\xdc\x0f\x8c\xa2\xc7\xa5\x5f\xe3\x81\xeb\x59\xec\x6a\xd2\x62\x85\xd0\xe3\x75\xb7\xe2\xb2\xb1\x3d\xfe\xf1\xdc\x0c\x97\xd5\x90\x57\x85\x51\x14\xbc\x6e\xb1\x1d\x6e\xb1\xd9\xd0\xf7\x1d\x2e\x73\x85\xcb\x85\x29\xa3\x24\x3c\xdf\x71\xa5\xc5\xcc\xe1\x7c\x6e\xd2\x95\x81\x90\x81\x51\xbc\xdb\x10\x16\x0b\xc4\x42\x70\xaa\x51\xe3\x8e\x1c\x65\xe5\x39\xee\xf9\x22\xb0\x6f\x14\xa7\x8d\xb3\xbb\xbe\x38\xcf\x6d\xe1\x19\x53\xb2\xec\x56\x1c\x59\xb5\x58\xee\x5a\x2d\xf4\x78\xcd\x98\x76\xbd\xba\x6f\x31\xd9\x48\xa8\x6f\x9f\x1e\x65\x29\xb4\xe5\x71\x33\x6f\xdb\x26\x1b\x1a\x62\x31\xcc\x1f\xb5\x4d\x93\x4d\xb0\x3c\xb3\x12\x3e\x6e\x8f\x6c\xb7\xc6\xec\x33\x31\x3c\x91\xd8\xc6\xcc\x3c\x5b\x5c\x4c\x47\xc6\xed\x91\xfc\x49\x36\xc1\x4c\x66\xb1\x91\x51\xd0\x73\x8a\x54\x53\xad\xd2\x27\x6a\x53\x87\xba\xa0\x97\xd4\xa5\x4d\x8a\xa8\x43\xeb\x14\xed\xa1\x6a\x05\xf4\x9a\xb6\x68\x43\x2d\x25\xc2\x06\xb5\xf7\x09\x8c\x3a\xf1\x6f\x9d\xba\x6a\x49\xb5\xd4\x32\x6d\xa5\xaf\xae\xa9\x15\xda\xa2\x2e\x7d\x8b\x6d\xaa\xa5\x1e\x83\x5e\x51\x44\x1f\x55\x53\x2d\xd3\x67\xfa\x1a\xaf\x5a\x53\x4d\x6a\xd3\xa6\x5a\x65\xaa\x49\x11\x7d\xa0\xae\x6a\xc5\x3b\xdf\xaa\x16\x45\xf1\x63\x6a\x29\xce\xdb\xa1\x48\x3d\x4c\xd2\x26\x01\xde\x50\x3b\x9d\x4b\xa4\xb8\xb9\xba\x4f\x54\x2b\xd4\xc6\xef\x00\x00\x00\xff\xff\x22\xa4\x74\x8a\xce\x03\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
