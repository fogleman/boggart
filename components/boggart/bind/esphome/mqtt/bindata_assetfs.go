// Code generated by go-bindata.
// sources:
// templates/views/index.html
// templates/views/light.html
// DO NOT EDIT!

package mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5f\x4f\xe3\x38\x10\x7f\xe7\x53\x8c\x2c\x76\x05\x0f\x4d\x96\x7d\x3a\xa1\x96\xd3\xde\x22\x74\x95\x38\x58\x41\x57\xf7\xb8\x72\xe2\x49\xe3\x5e\x6a\x07\x8f\x5b\xa8\xa2\x7e\xf7\x93\x93\x26\x4d\xff\xa4\x24\x15\x2c\x79\x68\x1d\xdb\xf3\xf7\xf7\xf3\x38\x93\x65\x20\x30\x92\x0a\x81\x85\x5a\x59\x54\x96\xc1\x72\x79\x72\x92\x65\x20\x23\xf0\x42\x3d\x4d\xb5\x42\x65\xc9\xcd\xf6\x85\x9c\x43\x98\x70\xa2\x01\x33\xfa\x99\x5d\x9d\x00\x00\xd4\x67\x43\x9d\xf4\xa6\xa2\x77\xf1\x15\xdc\x88\xa6\xe5\xe8\x85\x7a\x17\x5f\x57\xfb\xb7\x65\x5e\x7e\xa5\x5c\x61\x52\x5b\xdd\xdd\x51\xfa\xb6\xb9\x27\xdf\x67\x79\x90\x60\xb9\xb3\x78\xc9\x7f\x7b\x64\x8d\x4c\x51\x80\xe0\x96\x17\xf3\xc2\xf6\x0c\x52\xaa\x15\xc9\x39\x82\xd2\xcf\x86\xa7\x0c\xc8\x2e\x12\x1c\xb0\x67\x29\x6c\x7c\x79\xf1\xe5\xcb\xa7\x3d\x56\x0a\x4b\x31\x72\xb1\x7f\xad\x58\x37\xcd\x8b\x2b\x05\x57\x2e\xaf\x17\x7f\x28\x60\xc3\x6b\x06\x1e\x2c\x97\x7d\xdf\xc6\x1d\xc4\x46\x8b\x14\x8f\x12\xbc\xe3\xd3\xe3\x04\x1f\x2d\xb7\xc7\x49\x7e\x0b\xad\xd4\x8a\xda\xc8\xf6\xfd\xa6\xe4\x39\xb9\xc6\xb4\xf7\x6d\xa0\xc5\xa2\x59\x6d\x96\x81\xe1\x6a\x8c\x70\x5a\x11\x19\x2e\x07\xdb\xb4\x6e\x0e\xe6\x55\x40\x85\x8b\x76\xad\xdc\x1b\x5e\x17\xa1\x1e\xa0\xc9\x7e\x41\x87\xeb\x91\xa2\x0e\xd9\x23\x45\x73\x6c\x6f\xb4\x99\x72\xdb\x5a\xc3\xc1\x0d\x50\x24\x5d\x46\xa0\x0d\x9c\xa9\x7a\xe2\xbd\xef\x7a\x3a\xe5\x4a\x8c\x74\x2a\x43\xef\xd1\x1a\xa9\xc6\xc0\xd8\x39\x9c\xe1\xd3\x56\x0a\x4f\xbd\xbf\xa4\x12\xde\x77\xad\x22\x39\xf6\x86\x3f\xbe\x09\x61\x90\xe8\x11\x15\x69\x33\xbc\x3e\x3f\x04\x5a\xe5\x6a\xad\x7e\x04\x56\xf5\xc6\x46\xcf\x52\x06\x46\xbb\xb3\x5e\xbc\xbc\x1e\xca\x3a\x9c\x36\xa1\xb4\xf0\x6a\x53\xe9\x66\xe0\x8e\x02\x95\xb2\x44\x8e\xe3\xa2\x14\xb7\x55\x99\x07\xcd\x21\x36\x18\x0d\x98\x83\xd9\x7b\xc0\xa7\x19\x92\xf5\x7e\x3e\xdc\x7a\x3f\xb8\x8d\x61\xb9\xfc\x93\xe7\x67\x72\x50\x59\xfd\x2c\xc5\x60\x0f\x85\x59\x2d\x75\xe0\xd2\x27\x55\xa4\x8b\x41\xa8\x8b\x99\x17\x6a\x99\xc0\x0d\x07\x65\xa9\x78\x9c\x2c\xd2\x38\x57\x56\x8d\x7a\xb8\xc0\x9e\x4e\x51\x31\xb0\xd2\x3a\x9c\xaa\x52\x72\x8d\x96\xcb\x84\x18\x9c\x3a\xe7\xae\xfa\xbe\xec\x66\xbb\xef\xf3\xf6\x02\x59\x06\xa8\x44\x7e\x0d\x76\x10\x91\x51\xc9\x5b\x77\xaa\x66\xe4\x0d\xa9\x18\xdc\xab\xc4\xdd\xaf\x1d\xa1\x5c\x9f\xa2\x57\x59\xb2\x73\x84\x36\xf6\xd0\xb3\xb4\x61\xcc\x5a\x1d\x9a\xfd\x4e\xe0\x13\x9c\xa5\x46\x2a\x1b\x01\xfb\x34\x67\x0d\x05\xe4\x1c\xd8\xfd\x5d\x67\xc6\x96\x4f\x17\xe6\xba\xa3\xd7\xc0\xdb\xcf\xe1\x54\x0c\xee\x6f\x6e\x76\xf8\x2b\xdc\x35\x60\xde\x80\xc1\x95\xc3\x07\x99\x4c\x56\xa7\xbb\x2c\x7e\xcc\xa1\x00\x1d\x45\x47\x13\xb9\x32\xdf\x85\xd0\xe5\xe3\x88\x9d\x50\x67\x2a\x56\x36\xdf\x12\xa3\xbb\x8f\x86\x28\x4d\xf8\x62\x17\xa2\xd1\xcc\x28\xd0\xea\xe3\xf0\x29\x0a\xcf\xfb\x4a\x75\x93\xe8\x58\x0e\x8b\x9a\xc1\x95\x38\x5c\x0e\xdf\xe7\xd6\x2f\x9f\x8a\xaa\xb1\xb5\xe9\xa5\xef\xef\xf9\xec\x81\xe5\xd2\x6f\x77\xcd\x81\xe5\x66\x8c\x76\xc0\x7e\x05\x09\x57\xff\x75\x64\xe4\x61\x16\x8e\x13\x1d\xe0\x2e\x0d\xef\x53\x54\xf0\x2f\x06\x40\x68\xe6\x68\x8e\xa2\x63\x6b\x0a\xb6\xa7\x43\xdf\x17\x72\xde\xea\x0b\xb0\x85\xc2\xc3\x9f\x9b\xcd\x1d\xc1\xeb\x16\xfa\x7e\x43\x5f\xd0\xf7\xf3\x46\x70\xab\xd3\xdc\x0c\xaa\xf6\xba\x1a\xae\xfe\x6a\xe7\x60\x73\x58\x36\xd0\xae\x4f\xa9\x2e\xc0\x2c\x03\xb2\xdc\xca\xf0\xef\xd1\x3f\xb7\x70\x56\x8c\x7f\x3e\xdc\x02\xf3\x05\xa7\x38\xd0\xdc\x08\x9f\x13\xa1\x25\x7f\x8e\x4a\x68\x43\x7e\xd5\xa9\x92\xa7\xd0\xf6\x02\xf2\x43\x2a\x66\x47\xc5\x6c\xa0\xb5\x25\x6b\x78\xea\x4d\xa5\xf2\x42\x22\x06\x11\x4f\x08\xcf\xdf\xd0\xea\xba\x43\x2e\x1d\x58\xcf\x1c\x76\x60\x7f\x56\x26\xf4\x86\x39\xf1\x27\xe4\x4f\x9e\x66\x68\x16\x5e\x2d\x2d\xce\x97\xc9\x7b\xe4\x22\x20\x67\xb0\x11\x80\x77\xb1\xb9\xce\xf6\x96\xed\x1a\x0c\xbf\xc1\xf8\x2a\xf6\x46\xec\x27\x0d\xd0\xff\x1f\x00\x00\xff\xff\x22\xa7\x11\xbf\x51\x12\x00\x00"

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLightHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x99\x6f\x6f\xdb\xb6\x13\xc7\x9f\xff\x5e\xc5\x81\x28\x7e\x48\x1e\x28\xce\x1f\xb4\x18\xb6\xc8\xc0\x32\xa4\x7d\x32\x74\x40\x5a\xa0\x0f\x0b\x5a\x3c\x47\xdc\x28\x52\x23\x4f\x89\x3b\xc3\xef\x7d\xa0\x28\xc9\x92\x62\x25\x6a\x53\xad\x8e\xf3\x20\xa0\x44\xf2\xee\xf8\xbd\xcf\x91\xb6\xb9\x5e\x83\xc0\xa5\xd4\x08\x2c\x31\x9a\x50\x13\x83\xcd\xe6\x7f\x00\x00\xeb\x35\xc8\x25\x9c\xa0\xb5\xc6\xd6\xef\x2e\x85\xbc\x83\x44\x71\xe7\x62\xc6\x15\x5a\x82\xf2\x7f\x24\xb8\xbe\x45\x5b\x3f\x48\x97\x49\xe7\xf8\x42\x21\x9b\x97\xd3\xca\xa9\x8b\x82\xc8\x68\xa0\x2f\x39\xc6\x2c\x3c\xb0\xda\x56\xa2\x8c\x43\x06\x82\x13\xaf\xa7\x57\x0e\x18\x70\x2b\x79\x94\x4a\x21\x50\xc7\x8c\x6c\x81\x6c\xfe\x7f\x92\x19\xba\x5f\x2e\x67\xc1\xcc\xbc\x8e\xb7\x17\xec\x4c\xc8\xbb\xa6\x0f\xb5\xf0\x1d\xed\xa5\x25\x26\xcb\x8d\x46\x4d\xad\x25\xbf\x72\xc4\x09\xe1\xe7\xb8\xd5\x7d\xf2\xc1\xbf\x7b\x6b\x6c\xc6\x69\x97\x12\xd6\xdc\xb7\x17\xda\xea\x49\x8c\x8a\x32\x11\x9d\x9d\x83\x6f\xb9\xac\x6e\xad\x5c\x74\x76\xde\x9a\xd3\x9f\xb7\xfa\x9c\x73\x8d\xaa\x37\xe2\xe1\x28\x92\xd4\x11\xb9\x33\x32\x3d\x9f\x7b\x4d\xb6\xcb\x78\xcf\x33\x84\xcd\xe6\x72\x96\x9e\x0f\x4c\x69\x87\xae\x90\xdb\xa5\x5c\xb1\x79\x4b\xc7\xce\xe0\x81\xd7\x9d\x00\x6b\xa8\x06\xfc\x2d\x8d\xcd\xea\xc1\xbe\x1d\xa5\xc6\xca\x7f\x8c\x26\xae\xa0\x7c\x56\x7c\x81\x2a\x52\xb8\x24\x06\xd6\x28\x0c\xc3\x18\x64\x48\xa9\x11\x31\xcb\x8d\x23\x06\x52\x78\xa9\xb3\x8c\x6b\xc1\x40\x9b\x3b\xae\xa4\xe0\x84\xbb\x9d\xf6\x83\x94\x84\x59\x70\x76\x6b\x4d\x91\x0f\x84\xda\xcc\x2c\x23\xf2\xe3\x63\x56\xa2\xb2\x65\xd8\x68\xb2\x46\x85\x90\xa1\xca\xfc\x45\x9d\xf8\x8b\xc1\xbc\xf7\xff\x3c\x9c\x67\x3f\x69\x60\x1f\x82\xf9\x93\x1a\xb9\xc1\x90\x66\xa5\xcb\x27\xe2\x7e\x48\xe5\x9b\x3a\xb6\x37\xa3\x63\xeb\x5b\x1a\x31\x1c\x1a\xd1\xc6\x8d\x2d\xc7\x4b\x9d\x17\x54\x6d\x15\x49\x8a\xc9\x5f\x0b\xb3\x6a\x84\xfe\xd3\x45\xee\x5e\x52\x92\x32\xd0\x3c\xc3\x3a\x0f\xa3\xad\x57\x7f\x1e\x9a\x2a\x83\x61\x3f\xc0\xbf\xab\xea\xef\xd4\x3b\xfb\xe3\xbd\xdf\x12\xa1\x0c\x03\x45\xb3\x93\xc0\x6c\xe4\xda\xc7\x64\x07\x86\xeb\xe9\x2b\x86\x3c\xd2\xdd\xdf\xf1\x4e\xae\xac\xbc\x4d\x49\xa3\x73\x8f\xe1\xf5\x7d\xea\x64\xd1\xf8\x9a\xae\x58\xae\x5a\x3e\xf6\xae\x62\xda\x38\x5b\x7f\x54\x32\xc8\xa4\x8e\xd9\x29\x83\x8c\xaf\x62\x76\xfe\xfa\x35\x03\x47\x98\xc7\xec\x8c\x75\xf6\xc3\x4a\xa7\xb0\xc5\xb5\x74\x1c\x0b\x7b\x28\x90\x76\x02\xee\xb8\x2a\x30\x66\xcd\x51\xd7\x25\x81\x3d\x85\xf5\xb3\x10\xac\xce\xe0\x81\xde\x2e\xa0\x37\xef\xae\xa6\x27\xd3\xa2\x98\x0e\xc9\x1b\x6f\xfc\x50\x59\x2c\x95\x0b\x74\xf9\xe6\x58\x1e\x1f\xd0\xf7\x9b\x51\xc6\x9e\xdc\xa0\x98\x16\x3e\xf8\x6e\xc8\xdc\x5a\x44\x3d\x1d\x34\xef\x82\xf9\x43\xc5\xa6\x52\x2f\x80\x13\x1e\x9e\x89\x4e\x29\xd8\x4b\x81\x67\xa1\x8a\x09\x3f\x30\x5e\x95\xd6\x0f\x15\x9d\xa0\x5d\x75\xa0\xf9\xf6\x33\xc1\xf1\x6a\xed\xd5\x89\xf7\x29\x95\x84\xd3\x9f\x79\xf7\xde\xcd\x74\x10\x7e\x0a\xe6\x0f\x95\xc2\x4a\xbd\x80\x61\x78\xf8\x66\x0e\xeb\x84\xef\x0f\x82\x65\x65\x7c\xc4\x2c\x47\xcb\xa9\xb0\xff\x01\x8d\x89\xf7\x18\xd1\xd6\xe5\x74\x64\x96\x8b\x83\x8e\xab\x43\xa5\xf4\xa1\xaa\x5f\xf7\x85\x61\x47\x56\x76\xef\xa2\x5d\x56\x7e\x30\xc8\x5c\x0b\x38\x6a\xd1\x7c\xbd\x5c\x62\x42\xc7\x70\xa4\x11\x8e\x14\x6a\x78\xd0\xf7\xbb\x74\x74\x0c\xa7\xc7\xd3\x73\x8e\xa5\xbf\xe9\xe0\xbe\xae\xec\xef\x1d\xd1\x0e\x15\x26\x54\x52\x59\x6b\x10\x18\xeb\x29\xd2\x86\x18\xc2\xa4\x31\xf6\xd7\x6b\x28\xeb\x04\x5e\x05\x7b\xbd\x5f\x6e\xb7\x69\x7e\x4a\x97\x26\x60\x93\x93\x34\xba\xcd\x7b\x65\x79\xb3\x61\xdb\x1f\x8a\xaa\x77\x55\x2d\x5c\xd7\x23\xaa\xc8\x51\xc4\xac\x6e\xb1\x06\xdd\x79\x9d\xad\x66\x76\xf9\x6b\x6c\x70\x38\x6a\xa9\x8f\x94\x40\x67\x0d\xb3\xe0\x7c\xff\x3f\x10\x2f\x15\x77\x69\xa4\x50\xdf\x52\x3a\x5d\x71\xbc\xf5\x5e\x40\x14\x96\x7b\xa5\xf7\xb0\x48\xda\xdb\x3e\xe1\x8a\xb6\xbb\xfe\xe0\x16\xdf\x55\x2e\x94\x54\xf7\x5d\x45\xf0\xe9\x8b\xf8\x66\x44\x96\x6b\x27\x7d\x7a\x26\xa7\xe1\x63\xe3\xea\x65\x21\x31\x88\xc2\x0e\xed\x02\x0f\x3b\x3a\x6a\x28\xdc\x0f\x3b\xab\xfb\x3a\x29\xfd\xd9\x19\x25\xc5\xe0\x45\xd3\xae\x49\xe3\x19\x1b\xca\x48\x26\x22\xb3\x5c\x3a\xa4\xe8\x62\x4c\x3a\xaa\xdb\xcb\xf2\xd2\x00\xb5\x60\x55\x66\x5c\xb1\xc8\xe4\x36\x37\x0b\xd2\xb0\x20\x1d\xb9\x22\x49\xd0\x39\xd6\xec\xf8\xec\xd7\x3c\x57\x5f\x02\x66\xdd\x6b\xcb\x41\x8f\xdf\x2c\xff\xe5\xcc\xab\x33\xea\xc2\xae\xf7\xaa\xf5\xb8\xf3\xf2\x74\xdb\xfa\x37\x00\x00\xff\xff\x68\x1c\xf6\x72\x38\x1e\x00\x00"

func templatesViewsLightHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLightHtml,
		"templates/views/light.html",
	)
}

func templatesViewsLightHtml() (*asset, error) {
	bytes, err := templatesViewsLightHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/light.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"templates/views/light.html": templatesViewsLightHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
			"light.html": &bintree{templatesViewsLightHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
