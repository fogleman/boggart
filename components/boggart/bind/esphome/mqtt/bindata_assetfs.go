// Code generated by go-bindata.
// sources:
// templates/views/config.html
// templates/views/index.html
// templates/views/light.html
// DO NOT EDIT!

package mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsConfigHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdf\xcb\xdb\x36\x14\x7d\xcf\x5f\x71\x27\x0a\xb6\xa1\x95\x57\xf6\x32\xbe\x2f\xf6\x4b\x29\x94\xf1\x8d\xc1\xb2\x3d\x8d\x3d\xc8\xd2\x8d\xad\xd4\x91\x84\x74\x93\x34\x78\xf9\xdf\x87\xfc\x23\x71\xdc\x14\x4a\xf9\xf4\xa4\x48\x47\xe7\xe8\x5c\x9f\xab\x74\x1d\x28\xdc\x6a\x83\xc0\xa4\x35\x84\x86\x18\x5c\x2e\x2b\x00\x80\x75\xa0\x73\x8b\x40\x67\x87\x05\x23\xfc\x42\xb9\x0c\x81\x95\xfd\x5e\x1c\x95\x55\x67\xe8\xa0\x12\xf2\x73\xed\xed\xc1\xa8\x27\x30\xd6\x20\xfc\xa4\xf7\xce\x7a\x12\x86\x60\x24\xca\x7b\xa6\x72\x35\xfc\x72\x1e\xa1\x5f\x28\x98\x13\x4a\x69\x53\x3f\xc1\xcf\xcf\x0c\x64\x2b\x42\x28\x58\x30\xda\x39\x24\x56\xae\xa5\x55\x38\xad\xee\x82\x35\x0c\xb4\x1a\x67\x65\xd7\x01\x8f\xb3\xff\xbc\x38\xc1\xe5\xb2\xce\x23\xb8\x5c\xe7\xce\x63\xb9\xea\x3a\x40\xa3\xa2\x8f\xd5\xcc\x5f\x83\x42\x5d\xcd\x75\x1d\x04\x12\xa4\xe5\xa7\xbf\x7e\x7f\x81\x74\x98\xff\xfd\xe7\x0b\xb0\x5c\x89\xd0\x54\x56\x78\x95\x8b\x10\x90\x42\x7e\x44\xa3\xac\x0f\x79\xa3\xeb\xa6\xd5\x75\x43\xbb\x10\x4b\x91\x93\xdd\x5b\xef\xed\x89\xef\xb5\xe1\xb1\x36\xb0\x15\x6d\xc0\xec\x3b\x34\x2a\x5b\xd7\xc2\xd3\xbd\x42\x2e\x5b\xed\x7a\x65\x3e\x2a\xdc\x16\x1e\x48\x3c\x76\xb9\x0b\xaf\xe6\x71\x37\xfb\xc9\x9d\x90\x9f\xfb\x5b\xec\x5e\xd9\xe7\x6e\x69\xf3\x5e\x60\x8c\xa2\xf4\xda\xd1\x98\x45\xe1\x5c\xab\xa5\x20\x6d\x4d\xbe\x13\x47\x31\x6c\xce\x92\x79\x14\x1e\x64\xb5\x39\x48\x89\x21\x40\x01\xdb\x83\x91\x11\x9d\x62\x06\xdd\x15\x15\x07\x72\xd9\xa2\xf0\x1b\x6c\x71\x40\x64\xcf\x77\xfb\x6f\x52\xe4\xe4\x75\x5d\xa3\xcf\x38\x59\xdb\x92\x76\xe9\x3d\x45\x1c\xa4\xa9\xc5\x27\x48\xba\x0e\xf4\xfb\x5f\x0d\xb0\x0f\xd6\x6c\x75\x0d\xd2\x3a\x8d\x8a\x01\x87\xcb\x25\xb9\x3b\x75\xb9\xd1\x25\xa1\xb1\xa7\x64\x26\x7c\x79\x5e\x2d\xac\x7c\xf4\xde\xfa\x1f\x36\x32\xe7\x7b\x93\x2a\x2b\x0f\x7b\x34\x94\x71\x8f\x42\x9d\xd3\x89\x13\xd2\x25\x67\xd3\xee\x02\xd7\x46\xd3\xa7\x29\x05\xda\xd4\x7f\x98\x17\x2b\x54\xa4\xbf\xc3\xea\x6d\xfa\x61\xfa\x8a\xbf\x6d\xb8\x0e\x9b\x83\x8b\xaf\x00\xaa\x34\x5b\xf2\x0e\xf7\x48\xf8\xd8\xe9\x49\xc6\x51\xc8\xe6\x7a\x91\x34\xfb\x1a\x3e\x1c\xa1\x46\x87\x8c\x3b\x8f\x0e\x8d\x4a\x93\x75\x75\x20\xb2\x66\x7a\x22\x2a\x32\x0c\x94\x20\xf1\xce\xb5\x42\x62\xf4\x58\xb0\xca\x12\xd9\xfd\xb8\x7e\xcd\xd9\x3b\xd1\x2b\x15\x4c\x5a\x77\x66\xe5\x5a\xef\xeb\x89\x25\x62\xdc\x99\xc1\x49\x2b\x6a\x0a\xf6\xfe\x17\x06\xc1\xcb\xe2\xbb\xa2\xac\xf7\xa2\xc6\x21\xce\xee\xcc\xc3\xb1\x66\x20\x5a\x2a\xd8\x2c\x16\xee\x0c\x64\xe1\x7a\x6a\x88\x06\x2b\xd7\xf9\xe0\xa5\x4c\x16\x01\x1c\xb2\xb2\x28\xf6\x2d\x18\x50\x80\xc1\x13\xcc\x4a\x7f\xab\x2b\xfc\xf3\xd0\xf4\xbf\xc9\xdb\x07\xdf\x23\x0e\x12\xbe\x46\x7a\xba\xa5\x6c\x4a\xfe\x37\xf0\x71\x78\xa4\x83\x37\x30\x22\xb9\xc1\x2f\xf4\xb1\xed\x6b\xbf\xd1\x55\xab\x4d\xfd\xb5\x9d\xde\xd2\x43\x93\xcb\x35\x59\x71\x6b\xd2\x24\x0c\x8d\x9c\xbc\xbd\x35\xf5\xb7\xc1\x18\x5b\xa5\x87\xf6\x4d\xb3\x00\xde\x74\x27\xbd\x75\x3e\x3c\x1f\xb3\x7f\x8d\xff\x03\x00\x00\xff\xff\x8b\x37\xd6\x64\x14\x07\x00\x00"

func templatesViewsConfigHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsConfigHtml,
		"templates/views/config.html",
	)
}

func templatesViewsConfigHtml() (*asset, error) {
	bytes, err := templatesViewsConfigHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/config.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x20\xd8\xec\xda\x06\xd6\x54\xb3\xf7\x72\x48\xed\x1c\xf6\xd2\x16\x9b\x43\xdb\x2c\x9a\x2c\xee\xe1\x70\x58\xd0\xe2\x58\xa2\x57\x22\x19\x72\x6c\xc7\x30\xfc\xdd\x0f\x94\x2c\x4b\xb2\x2d\x47\xf2\x36\x57\x3d\xb4\x34\x35\x7f\x39\xbf\x19\x8e\x26\xeb\x35\x11\x30\x95\x0a\x08\x0d\xb5\x42\x50\x48\xc9\x66\x73\x71\xb1\x5e\x13\x39\x25\x2c\xd4\xa9\xd1\x0a\x14\x3a\xbf\x3b\x12\x72\x41\xc2\x84\x3b\x37\xa6\x56\x2f\xe9\xcd\x05\x21\x84\x54\x77\x43\x9d\x0c\x53\x31\xbc\xfa\x99\xf8\x95\x4b\x8b\xd5\xb3\x1b\x5e\xfd\xbc\xa5\xdf\xe7\x79\xfe\xc3\x70\x05\x49\xe5\xed\x21\x45\x61\x5b\x9d\x26\xa3\x43\x3e\x49\xa0\xa0\xcc\x7f\x64\xff\x0e\x1d\x5a\x69\x40\x10\xc1\x91\xe7\xfb\x02\x87\x16\x9c\xd1\xca\xc9\x05\x10\xa5\x97\x96\x1b\x4a\x1c\xae\x12\x18\xd3\xa5\x14\x18\x5f\x5f\xbd\x7d\xfb\xc3\x11\x2d\xb9\xa6\x18\xb8\x38\xfe\x2e\x7f\x6f\x9b\x5f\x6e\x05\xdc\xf8\x73\xbd\xfa\xbb\x22\xf4\xee\x3d\x25\x8c\x6c\x36\xa3\x00\xe3\x0e\x6c\x8f\x2b\x03\x67\x31\xde\x72\x84\x48\xdb\xd5\x59\xcc\x5f\x78\x7a\x9e\xd6\x07\xe4\x78\x1e\xe7\x2f\x21\x4a\xad\x5c\x1b\xde\x51\xd0\x74\xf2\x9e\xaf\x31\x66\x23\x9c\x68\xb1\x6a\x16\xbb\x5e\x13\xcb\x55\x04\xe4\x72\x97\x05\xe4\x7a\xbc\x9f\x13\xcd\xce\xbc\x88\x06\xe1\xbd\x2d\x85\xb3\xbb\xf7\xb9\xab\x27\x30\x76\x9c\xd1\x83\xe2\x4c\xd6\x0f\x0a\x25\xae\x0a\x70\x9c\x29\xc4\xc3\xe3\x4c\xd6\x0c\x20\x1f\xb5\x4d\x39\xb6\x95\x50\xe4\xfa\x04\xd5\x30\xb2\x7a\x6e\x08\xc2\x33\x0e\xad\x8c\x62\xa4\xc4\x6a\x9f\xcc\xd9\x7e\x43\x1e\xd7\xc4\x71\x12\x5b\x98\x8e\xe9\x8c\x2f\xb8\x0b\xad\x34\x78\xbd\xd0\x52\xf4\xdf\x0e\x68\x45\x0f\xf1\xba\xdc\x3c\x0c\xc1\xb9\x6c\x2d\x43\x9d\x6f\x3e\x3b\x9a\x15\x98\x21\xea\x28\xf2\x9a\x53\x2d\x78\x52\xec\x71\x1b\x01\x8e\xe9\x9b\xea\x66\xb6\x1e\xa2\x44\x4f\x7d\xbb\x43\x56\xa8\xd5\x54\x46\xe4\xcd\x11\x48\xd4\x18\xe7\x36\x19\x53\x4f\xc4\xbe\xc2\xd3\x1c\x1c\xb2\xdf\xbf\x7e\x62\xbf\x71\x8c\xc9\x66\xf3\x0f\x9e\x65\xcd\x38\x17\xf6\xa3\x14\xe3\x63\xe2\x5e\x3e\x96\xec\x68\x64\x71\x00\x51\xb2\x32\x71\xe6\xf1\x6e\x35\x0c\x75\x44\xc9\xd6\x89\x32\xdb\x63\xbd\xdc\x3a\x42\xc9\x65\xa6\x6a\x14\xc8\x16\x51\x08\xf8\xcd\xc5\x8b\x54\xf9\x95\xa4\x2d\xe9\xab\x6a\x4e\xb2\x5b\x9d\xa6\x5c\x89\x47\x6d\x64\xc8\x1e\xd0\x4a\x15\x11\x4a\x07\xa4\x0f\x4f\x7b\xbe\x5f\xb2\x7f\x4a\x25\xd8\x6d\x66\x21\xbb\xfb\xed\x17\x21\x2c\x38\xf7\x00\xca\x69\x7b\xf7\x7e\x70\x2a\x9f\x0f\x2d\x69\x63\x45\x4b\x81\xa5\xd0\xba\xcd\x3e\xb1\x77\xc2\x92\x1c\xe0\x1d\x44\x92\x2a\xc2\x5f\xc6\xcc\x56\x6b\x13\x6c\xf6\xf3\x41\xaa\xa9\x3e\x48\x86\x76\xd8\xaa\x19\x78\x12\x67\xb0\x82\xa1\x36\xa0\x0e\xc1\xf6\x1e\x90\xcb\xc4\x75\x02\x5a\x4d\xaf\x07\x5d\x5b\xe2\xf5\x9a\x80\x12\x59\x67\xd4\x81\x45\x4e\x0b\xc8\x7d\x06\xe4\x59\xad\x9b\x3b\x76\xe7\xf2\xc5\xbd\x4a\x7c\xdf\xd5\x31\x9e\x65\x16\xbc\x08\x95\x83\x14\xa8\xd1\xb8\xa5\xc4\x30\xa6\xad\x41\x7f\x68\x04\x3c\x91\xbe\xb1\x52\xe1\x94\xd0\x1f\x16\xb4\xa1\xac\x0f\x08\xbd\xff\xd2\x19\xb6\xc5\xd3\x05\xbe\x3e\xff\x1a\xc0\xfb\x63\x98\x8a\xf1\xfd\xc7\x8f\x07\x20\x5e\x72\xab\xfc\x71\xfc\x75\x1c\xef\x2c\x3e\x89\x67\x87\xda\x1c\x29\x9c\x59\x2c\x88\x9e\x4e\xcf\x86\xf3\x4e\x7d\x17\x58\x17\x8f\x87\x77\xe2\x3a\x63\x71\xa7\xf3\x5b\x06\xe9\xcb\x77\x8f\x91\x49\xf8\xea\x30\x46\x8f\x73\xab\x88\x56\xdf\x2f\x40\x79\xfd\x79\x5d\xae\x6e\x1c\x1d\xab\x62\x5e\x35\xb8\x12\x2d\xaa\xe2\xeb\x5d\xde\xa4\x0a\xd8\x18\xd1\x5c\x07\xc1\x91\x9e\x94\x6c\x36\x41\xbb\x2b\x8f\x14\x6d\xde\x1f\x93\x84\xab\x3f\x3b\xc2\xf2\x34\x14\xa3\x44\x4f\xe0\x10\x8b\xf7\x06\x14\xf9\x37\x4c\x88\x03\xbb\x00\x7b\x16\x26\x5b\xe3\xb0\x43\x94\xbb\x91\x1e\xe9\xa1\x7c\x6c\x3f\x83\x73\x3c\x02\x76\x5e\x2b\xd5\xba\x16\x09\x48\x00\xa1\x6d\xb3\x23\xfc\x97\xa0\xfd\x0b\x25\xe8\x74\x9c\xd1\x72\x17\x1f\xc6\xf9\x2b\xa4\x7a\x01\x9d\xc3\xdb\x2a\xb4\xed\x52\xfd\xf4\x17\x59\xf3\x97\xf7\xcb\x1a\x46\x41\xc3\xf7\xf7\x28\xc8\xa6\x35\x7b\xe3\xa0\x40\xc8\x45\x65\x7e\x54\xfe\xdc\x2e\xb7\xff\x55\x10\x58\x5f\x16\x53\xae\x18\xb8\xd8\x75\x23\xeb\x35\x71\xc8\x51\x86\xbf\x3e\x7e\xfe\x44\xfa\xf9\xfa\xf7\xaf\x9f\x08\x0d\x04\x77\xf1\x44\x73\x2b\x02\xee\x1c\xa0\x0b\x16\xa0\x84\xb6\x2e\x88\x65\x14\x67\xfd\xd5\xcc\x05\xa1\x73\x01\xea\x54\x5b\xab\x97\x2c\x95\x8a\x85\xce\x51\x32\xe5\x89\x83\x41\x0b\x1d\x13\x1d\x45\xdc\x62\x5d\x43\x10\x26\xd2\x64\x9a\xd9\x56\x43\xb9\xd1\x5d\x45\xa3\x1b\xbb\xa9\x98\x63\x0a\x70\x38\xc9\x55\xf9\xdd\xc7\x7c\x77\xa2\x35\x3a\xb4\xdc\xbc\xa2\xd6\x72\x1a\x57\x18\x50\xee\x9c\x36\xe0\x78\x70\x67\xee\x9b\x85\x76\x56\xf9\xc9\x0c\x0f\xff\xcc\xac\x98\x7d\xe3\xf0\xce\xf6\xa3\xdb\x49\x41\xcb\x63\xf6\x5a\x66\x4f\x73\xb0\x2b\x56\x89\xef\x6b\x69\xf3\x91\x9c\x9d\x40\xd2\xab\xe8\x2c\x61\xb3\xa7\xbb\x82\xa7\xff\x83\xf2\xad\xef\x8d\x20\xae\xab\xcf\xcb\x57\x3e\x75\x22\xb8\x32\x30\xa6\xdc\x98\x44\x86\xdc\x5f\x50\x41\x39\x92\xaa\x5c\x33\x0b\x6e\x49\x38\x79\xd8\x8e\xa2\xc6\x64\x3a\x57\xd9\x75\xd6\x87\x01\x59\xd7\x2a\x26\xb0\x30\x01\x6e\x1f\x20\x81\x9c\x62\xf0\xae\xf6\xfe\xb2\x0f\x0c\xad\x8c\x22\xb0\x03\x86\x5a\x27\x28\x4d\x7f\x7d\x50\x8d\xb3\x2b\xe9\x9a\xf4\xca\x41\x72\x3e\xa8\x0a\xb5\x91\x20\xf2\xf1\x6c\xaf\xc6\xb5\x29\xc5\xf5\x5c\xac\x97\xbd\x8a\xe2\xcd\xbb\x8b\x3d\x57\x3e\x58\xab\xed\xd9\x8e\x54\xe5\x5d\xf6\x85\x0e\xe7\x29\x28\x1c\x30\x0b\x5c\xac\xfa\x85\x4c\xd2\xdf\x97\x19\x27\x33\xc7\xa4\x92\xf8\x6b\x91\xe3\x52\x45\xf7\xea\x93\xe6\xc2\x8b\xaf\xd1\xca\x69\xff\xb6\xc8\xd1\x7f\x3d\x30\xe9\x1e\xe6\xc6\x68\x8b\x20\xfa\x83\x7d\xb9\xb9\x1d\x3d\xe6\x94\x34\x06\xb0\x37\x60\xc0\xc3\x78\x67\x48\x7f\x70\x48\x9e\xb3\x60\x2c\xdd\x80\x19\x0b\x06\x94\xe8\xf7\x46\x93\x39\xa2\x56\x95\x2e\x64\x3b\x04\x34\x09\x0f\xc1\xfb\x38\xa6\x13\x8d\xa8\xd3\xed\xfe\xae\x8a\x0c\xb7\xed\x0d\x0d\xb5\x59\xd1\x9b\x91\x4c\xa3\xdd\x1f\x67\x12\x69\xcc\x8a\x92\xec\x2f\x1d\x63\x7a\xf5\x37\x4a\x9c\x0d\xc7\xad\x0a\x95\x4c\x79\x04\x79\xb1\x32\x2b\xe6\x16\x11\x25\x3c\xc1\x4a\xab\x72\xab\xcd\x8a\xa0\x26\x3b\xae\x1c\x1a\xbe\x6b\xc9\x7d\xb9\xe9\xed\x01\x30\xc7\xca\xbb\xc3\x56\x31\x07\x06\x19\x13\x05\x4b\x52\x39\xfa\xf2\x5c\xc9\x7f\x8e\x3a\xfd\xdf\xde\x4f\x47\xe2\xe1\x9f\xbc\x45\xbf\x2e\x51\x56\x20\xbf\x81\xde\x3f\x16\xd0\x7f\xf2\x6d\x29\x99\x82\x67\xfc\x90\x64\x67\xff\x20\x27\x89\x54\xd1\xa1\x3b\x99\x4b\x47\x9d\xdc\xdf\x0b\x27\x4c\xab\x7e\x6f\x3b\x53\xee\xfd\x54\x26\x75\x33\x31\xf8\x54\xc9\x48\xb3\xa4\x69\x3e\xba\x0f\xcf\x78\xec\xf4\xde\x78\x48\x0c\xf3\x68\x1c\x0b\x46\xc6\xd8\xc9\xac\x82\xfe\xd0\xb2\x9a\xff\xf9\x70\xe1\x68\xa6\xd4\x6d\x62\xb1\x14\xb0\x5f\xa8\xca\x03\x2d\x0e\x72\x14\xe4\x75\xb1\xda\xee\xfd\x2f\x00\x00\xff\xff\x16\x40\x4a\x2b\xc9\x1c\x00\x00"

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLightHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x99\xdf\x6f\xdb\x36\x10\xc7\xdf\xf7\x57\x1c\x88\x62\x68\x1e\x64\xe7\x07\x5a\x0c\x5b\x64\x60\x19\xb2\x62\xc0\xd6\x01\x49\x81\x3e\x16\xb4\x78\xb2\xb8\x51\xa4\x46\x52\x89\x3b\x23\xff\xfb\x40\x52\x92\x25\xc5\x4a\xd4\x26\x5a\x1d\xe7\x21\x20\x45\xf2\xee\xf8\xbd\x0f\x4f\xb6\xb9\xd9\x00\xc3\x94\x4b\x04\x92\x28\x69\x51\x5a\x02\x77\x77\xdf\x01\x00\x6c\x36\xc0\x53\x98\xa1\xd6\x4a\xd7\xcf\xce\x19\xbf\x81\x44\x50\x63\x62\x42\x05\x6a\x0b\xfe\x7f\xc4\xa8\x5c\xa1\xae\x3b\xdc\xe4\xdc\x18\xba\x14\x48\x16\x7e\x99\x5f\xba\x2c\xad\x55\x12\xec\xe7\x02\x63\x12\x3a\xa4\xb6\x95\x08\x65\x90\x00\xa3\x96\xd6\xcb\x2b\x07\x04\xa8\xe6\x34\xca\x38\x63\x28\x63\x62\x75\x89\x64\xf1\xbd\xe5\x39\x9a\x9f\xce\xe7\xc1\xcc\xa2\x8e\xb7\x17\xec\x9c\xf1\x9b\x66\x0c\x25\x73\x03\xed\xad\x25\x2a\x2f\x94\x44\x69\x5b\x5b\x7e\x65\x2c\xb5\x08\x3f\xc6\xad\xe1\xd9\xb5\x7f\xb6\x43\x03\xad\x6e\xdb\x5b\x6c\x8d\x24\x4a\x44\x39\x8b\x4e\x4e\xc1\xb5\x4c\x5e\xb7\xd6\x26\x3a\x39\x6d\xad\xe9\xaf\x5b\x7f\x2a\xa8\x44\xd1\x9b\x71\x7f\x96\xe5\xb6\x23\x6f\x67\x66\x76\xba\x70\x6a\x6c\x37\xf0\x9e\xe6\x2e\xfe\xf3\x79\x76\x3a\xb0\xa4\x1d\xba\x40\xaa\x53\xbe\x26\x8b\x96\x82\x9d\xc9\x03\x8f\x3b\x01\xd6\x38\x0d\xf8\x4b\x95\xce\xeb\xc9\xae\x1d\x65\x4a\xf3\x7f\x95\xb4\x54\x80\xef\x0b\xba\x44\x11\x09\x4c\x2d\x01\xad\x04\x86\x69\x04\x72\xb4\x99\x62\x31\x29\x94\xb1\x04\x38\x73\x52\xe7\x39\x95\x8c\x80\x54\x37\x54\x70\x46\x2d\xee\x76\xda\x0f\x92\x5b\xcc\x83\xb3\x95\x56\x65\x31\x10\x6a\xb3\xd2\x47\xe4\xe6\xc7\xc4\x43\xb2\xa5\x57\x49\xab\x95\x08\x21\x43\x95\xf9\xb3\x3a\xf1\x67\x83\x79\xef\xff\x39\x2c\x4f\x7e\x90\x40\xae\x83\xf9\x59\x8d\xdc\x60\x48\x73\xef\xf2\x91\xb8\xef\x53\xf9\xb6\x8e\xed\xed\xe8\xd8\xfa\x96\x46\x4c\x87\x46\xb4\x71\x73\xfd\x7c\x2e\x8b\xd2\x56\x45\x22\xc9\x30\xf9\x7b\xa9\xd6\x8d\xd0\x7f\x99\xc8\xdc\x72\x9b\x64\x04\x24\xcd\xb1\xce\xc3\x68\xeb\xd5\x9f\x83\xa6\xca\x60\xa8\x04\xf8\x4f\x75\xee\x67\xd7\x56\x73\xb9\x02\xf2\xe7\x7b\x57\x07\xc1\x47\x80\xac\x29\x1f\x30\x1f\xb9\xed\x31\x89\x81\xe1\xa3\xf4\x05\x53\x1e\x18\xee\x97\xb9\xd9\x2f\x4a\x28\xfd\x87\x62\x68\x66\xbf\x99\x0b\xcd\x57\x99\x95\x68\xcc\x43\x98\x3d\xcf\x79\x59\x36\xbe\xa6\x3b\x34\x17\x2d\x1f\x7b\x77\x72\xda\x58\x6b\xf7\xb2\x24\x90\x73\x19\x93\x63\x02\x39\x5d\xc7\xe4\xf4\xcd\x1b\x02\xc6\x62\x11\x93\x13\xd2\xa9\x8b\x95\x4e\xa1\xd4\xb5\x74\x1c\x0b\x7d\x38\x28\xed\x04\xdc\x50\x51\x62\x4c\x9a\x97\xdd\xac\x43\x02\x79\x8c\xf1\x27\xf1\x58\xbd\x85\x07\x46\x1f\xa0\xf5\xea\xdd\xc5\xf4\x98\x6a\x64\xd3\xf1\x79\xe5\x8c\x1f\x2a\x98\x5e\xb9\x80\x9a\x6b\x8e\x85\xf3\x1e\x8a\x3e\xe7\xb3\x2b\x64\xd3\x92\x08\xcf\x86\xcc\x4a\x23\xca\xe9\xa0\x79\x17\xcc\x1f\x2a\x36\x95\x7a\x01\x9c\xd0\x79\x22\x3a\x5e\xb0\x97\x02\xcf\x52\x94\x13\x7e\x8a\xbc\xf0\xd6\x0f\x15\x9d\xa0\x5d\xf5\x76\x73\xed\x27\x82\xe3\xd4\xda\xdf\xd7\xdf\xc7\x8c\x6f\xbf\x81\xee\xf4\xfb\x2c\x40\xde\x3a\x37\xd3\x11\xf9\x31\x98\x3f\x54\x24\x2b\xf5\x02\x93\xa1\xf3\xd5\x50\xd6\x09\xdf\x53\x1e\x7d\xe7\x03\xe6\x05\x6a\x6a\x4b\xfd\x3f\xa0\x99\x38\x8f\x91\xdd\xba\x9c\x0e\x53\xbf\x39\xe8\xb8\x3a\x54\x64\xef\xab\xfa\x65\xdf\x2b\x76\x64\x65\x77\x7d\xed\xb2\xf2\x8d\xa9\xa6\x92\xc1\xeb\x16\xda\x97\x69\x8a\x89\x3d\x82\xd7\x12\xe1\xb5\x40\x09\xf7\xc6\x7e\xe7\xc6\x1e\xc1\xf1\xd1\xf4\x9c\xa3\xf7\x37\x1d\xdc\x97\x95\xfd\xbd\x23\xda\xa0\xc0\xc4\x7a\x2a\x6b\x0d\x02\x63\x3d\x45\xda\x10\x43\x58\x34\xc6\xfe\x66\x03\xfe\x9c\xc0\xab\x60\xaf\xf7\x13\xef\x36\xcd\x8f\xe9\xd2\x04\xac\x0a\xcb\x95\x6c\xf3\x5e\x59\xbe\xbb\x23\xdb\xdf\x95\xaa\x67\xd5\x59\xb8\xac\x67\x54\x91\x23\x8b\x49\xdd\x22\x0d\xba\x8b\x3a\x5b\xcd\x6a\xff\xe3\x6d\x70\x38\x6a\xab\x0f\x1c\x81\xce\x1e\xe6\xc1\xf9\xfe\x7f\x54\x4e\x05\x35\x59\x24\x50\xae\x6c\x36\xdd\xe1\xf8\xd5\x79\x01\x56\x6a\xea\x94\xde\xc3\x43\xd2\x2e\xfb\x16\xd7\x76\x5b\xf5\x07\x4b\x7c\x57\xb9\x70\xa4\xba\xcf\x2a\x82\x8f\x5f\xc4\x77\x26\xab\xa9\x34\xdc\xa5\x67\x72\x1a\x3e\x34\xae\x5e\x16\x12\x83\x28\xec\xd0\x2e\xf0\xb0\x63\xa0\x86\xc2\x7c\xb3\x77\x75\x5f\x27\x21\x3f\x19\x25\x38\x1b\xbc\x97\xda\xb5\x68\x3c\x63\x43\x19\xc9\x59\xa4\xd2\xd4\xa0\x8d\xce\xc6\xa4\xa3\xba\xe6\xf4\x77\x0c\x28\x19\xa9\x32\x63\xca\x65\xce\xb7\xb9\x59\x5a\x09\x4b\x2b\x23\x53\x26\x09\x1a\x43\x9a\x8a\x4f\x7e\x2e\x0a\xf1\x39\x60\xd6\xbd\xdf\x1c\xf4\xf8\xd5\xf2\x9f\xcf\x9d\x3a\xa3\xee\xf7\x7a\x8f\x5a\xdd\x9d\xb7\xac\xdb\xd6\x7f\x01\x00\x00\xff\xff\x47\x9c\x33\x7c\x61\x1e\x00\x00"

func templatesViewsLightHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLightHtml,
		"templates/views/light.html",
	)
}

func templatesViewsLightHtml() (*asset, error) {
	bytes, err := templatesViewsLightHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/light.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/config.html": templatesViewsConfigHtml,
	"templates/views/index.html":  templatesViewsIndexHtml,
	"templates/views/light.html":  templatesViewsLightHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"config.html": &bintree{templatesViewsConfigHtml, map[string]*bintree{}},
			"index.html":  &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
			"light.html":  &bintree{templatesViewsLightHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
