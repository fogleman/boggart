// Code generated by go-bindata.
// sources:
// templates/views/index.html
// templates/views/light.html
// DO NOT EDIT!

package mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x5f\x6f\xe2\x38\x10\x7f\xef\xa7\x18\x59\xbb\xab\xf2\x90\x64\xd9\xa7\xd3\x2a\xf4\x74\xba\x6a\xef\x56\xea\xb5\xa7\x96\x3e\x9f\x4c\xec\x10\xa3\xc4\x4e\x3d\x03\x14\x45\x7c\xf7\x93\x13\x08\x29\x10\x08\x6c\xff\xbc\xc0\x64\x3c\xe3\xf9\xf3\xfb\xd9\x9e\xa2\x00\x21\x63\xa5\x25\xb0\xc8\x68\x92\x9a\x18\x2c\x97\x17\x17\x45\x01\x2a\x06\x3f\x32\x59\x6e\xb4\xd4\x84\x4e\x1b\x0a\x35\x83\x28\xe5\x88\x03\x66\xcd\x9c\x5d\x5d\x00\x00\x34\xb5\x91\x49\xbd\x4c\x78\xfd\x6f\xe0\x24\xcc\xd6\xd2\x33\x7a\xfd\x6f\x2b\xfb\x6d\x9f\xe7\xff\x72\xae\x65\xda\x58\xdd\xb5\x58\xe7\xf6\xd2\xa6\xb4\x23\x3e\x4a\xe5\xda\xb2\xfa\x28\x7f\x3d\x24\xab\x72\x29\x40\x70\xe2\x95\x5e\x90\x67\x25\xe6\x46\xa3\x9a\x49\xd0\x66\x6e\x79\xce\x00\x69\x91\xca\x01\x9b\x2b\x41\xc9\xf7\xfe\xd7\xaf\x9f\xf7\x44\xa9\x22\x25\x92\x8b\xfd\x6b\xd5\xba\x6d\x5f\x5c\x6d\x70\xe5\xfa\xda\xff\x4d\x03\xfb\x79\xcd\xc0\x87\xe5\x32\x0c\x28\x39\xc1\x6d\xb8\xc8\xe5\x59\x8e\xb7\x3c\x3b\xcf\xf1\x81\x38\x9d\xe7\xf9\x47\x44\xca\x68\xec\xe2\x1b\x06\x6d\xcd\x73\x7e\xad\x6d\x0f\x69\x64\xc4\xa2\x7d\xdb\xa2\x00\xcb\xf5\x58\xc2\xa7\x9a\xc8\xf0\x7d\xb0\x4d\xeb\xf6\x62\x8e\x02\x2a\x5c\xb5\x9b\xcd\xfd\xbf\x24\xfd\xbc\xae\xaa\x3d\xc0\x94\x56\x5f\x87\xee\xf9\xde\x0e\xe2\xf3\xbd\x4b\x9c\x3b\xbb\x1f\x34\x80\xaa\xf5\x2a\x06\x2d\xb7\xa2\xfc\x69\xb2\x8c\x6b\x31\x34\xb9\x8a\xfc\x07\xb2\x4a\x8f\x81\xb1\x43\x28\xd4\x51\x1b\x17\xc2\x88\xb4\x37\xb6\x66\x9a\x33\xb0\xc6\x1d\xde\xea\xe3\x78\x56\x9b\xcc\xe4\xd3\x9e\xde\xd7\x19\xa5\x6a\x9c\x50\xa7\xb4\xea\xf4\x38\x24\x56\xc6\x03\xe6\x1a\xeb\xdf\xcb\xa7\xa9\x44\xf2\x1f\xef\x6f\xfc\x7f\x39\x25\xb0\x5c\xfe\xce\xcb\xe3\x30\xa8\x83\x7e\x51\x62\xb0\x9f\x3d\xac\x51\x27\xb8\x5a\x95\x8e\x4d\x25\x44\xa6\xd2\x3c\x63\xc7\x6a\xeb\xfc\xd4\x7a\xd3\x71\xba\xc8\x93\x72\xa3\x5a\xf2\xe4\x42\x7a\x26\x97\x9a\x01\x29\x72\x0d\xad\x0f\xf1\xb5\x24\xae\x52\x64\xf0\xc9\x25\x76\x15\x06\xaa\x7b\xdc\x30\xe0\x9d\x21\x91\x5a\x94\x0f\x4f\x47\x73\x15\x83\xb1\x70\xd9\x05\xc5\xde\x31\x33\x9c\x2b\x8a\x12\xd6\x3b\x05\xee\x9a\x44\x97\xb9\x55\x9a\x62\x60\x9f\x67\x6c\xdf\x89\xea\x01\xbb\xbb\x3d\x89\x49\x70\x22\x9b\xdc\x79\x6a\xe7\xd2\x97\x28\x13\x83\xbb\x1f\x3f\x76\x38\x25\xdc\xc5\x68\x7f\x91\x55\x70\x94\x59\x48\x26\xdf\x65\xd5\x43\xd9\x72\x30\x71\x7c\x16\xb1\xe0\x14\x72\xc1\x8a\x60\x29\xca\x8f\x86\xe1\xf6\xa3\x50\xc8\x53\xbe\xd8\x45\x61\x38\xb5\x1a\x8c\x7e\x3f\x08\xaa\x33\xfe\xba\xd6\x61\x20\xd4\xac\xd3\x7b\xd4\x61\xc3\xc3\x8f\x5f\xfb\x94\x72\x3c\x42\x18\xb4\xcc\x2a\x61\x50\x0e\xa7\x5b\xd3\xef\xcb\xa2\x1a\x9f\x2b\x71\xf5\xd7\xb8\x38\x5f\x8a\xeb\xa1\xde\xcd\x4e\xf5\xed\x53\x14\x80\xc4\x49\x45\x7f\x0f\xff\xb9\x81\xcb\x4a\x7e\xbc\xbf\x01\x16\x08\x8e\xc9\xc8\x70\x2b\x02\x8e\x28\x09\x83\x99\xd4\xc2\x58\x0c\xea\xe9\x19\x7d\x2d\xc9\x1b\x61\x10\x61\xa5\x1d\x56\xda\x91\x31\x84\x64\x79\xee\x67\x4a\xfb\x11\x22\x83\x98\xa7\x28\x7b\xaf\x18\x75\x33\xb5\xaf\x13\xd8\x68\x0e\x27\xb0\xbf\x2b\x13\x7c\xc5\x9e\x04\x13\x0c\x26\x4f\x53\x69\x17\x7e\xa3\x2d\x2e\x97\xc9\x5b\xf4\x62\x84\x2e\x60\x2b\x00\x6f\x12\x73\xd3\xed\xad\xd8\x0d\x18\xde\x21\xf8\xaa\xf6\x56\xec\x27\x2d\xd0\xff\x1f\x00\x00\xff\xff\x8f\x19\xea\x99\xe5\x0e\x00\x00"

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLightHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x99\xdf\x6f\xdb\x36\x10\xc7\xdf\xf7\x57\x1c\x88\x62\x48\x1e\x64\xe7\x07\x5a\x0c\x5b\x64\x60\x19\xb2\xbc\x0c\x1d\x90\x16\xe8\x63\x41\x8b\xa7\x88\x1b\x45\x6a\x24\x95\xb8\x33\xf2\xbf\x0f\x24\x25\x59\x92\xad\x44\x6d\xa2\xd5\x71\x1e\x02\x4a\x24\xef\x8e\xdf\xfb\xdc\xc9\xb6\xd6\x6b\x60\x98\x72\x89\x40\x12\x25\x2d\x4a\x4b\xe0\xe1\xe1\x07\x00\x80\xf5\x1a\x78\x0a\x33\xd4\x5a\xe9\xfa\xde\x05\xe3\x77\x90\x08\x6a\x4c\x4c\xa8\x40\x6d\xc1\xff\x8f\x18\x95\xb7\xa8\xeb\x0b\x6e\x72\x6e\x0c\x5d\x0a\x24\x0b\xbf\xcd\x6f\x5d\x96\xd6\x2a\x09\xf6\x4b\x81\x31\x09\x17\xa4\xb6\x95\x08\x65\x90\x00\xa3\x96\xd6\xdb\x2b\x07\x04\xa8\xe6\x34\xca\x38\x63\x28\x63\x62\x75\x89\x64\xf1\xa3\xe5\x39\x9a\x5f\x2e\xe6\xc1\xcc\xa2\x8e\xb7\x17\xec\x9c\xf1\xbb\x66\x0e\x25\x73\x13\xed\xa3\x25\x2a\x2f\x94\x44\x69\x5b\x47\x7e\x63\x2c\xb5\x08\x3f\xc7\xad\xe9\xd9\x35\xda\x0f\xfe\xf6\x0e\x19\xb4\xba\x6f\x9f\xb2\x35\x93\x28\x11\xe5\x2c\x3a\x3d\x03\x37\x32\x79\x3d\x5a\x99\xe8\xf4\xac\xb5\xa7\xbf\x6f\xf5\xb9\xa0\x12\x45\x6f\xc5\xf6\x2a\xcb\x6d\x47\xe1\xce\xca\xec\x6c\xe1\x04\xe9\x9c\xe1\x3d\xcd\xdd\x11\x2e\xe6\xd9\xd9\xc0\xae\x76\xf4\x02\xa9\x4e\xf9\x8a\x2c\x5a\x3a\x76\x16\x0f\xdc\xee\xc4\x58\x43\x35\xe0\x2f\x55\x3a\xaf\x17\xbb\x71\x94\x29\xcd\xff\x55\xd2\x52\x01\xfe\x5a\xd0\x25\x8a\x48\x60\x6a\x09\x68\x25\x30\x2c\x23\x90\xa3\xcd\x14\x8b\x49\xa1\x8c\x25\xc0\x99\x53\x3b\xcf\xa9\x64\x04\xa4\xba\xa3\x82\x33\x6a\x71\xb7\xd3\x7e\x90\xdc\x62\x1e\x9c\xdd\x6a\x55\x16\x03\xa1\x36\x3b\x7d\x44\x6e\x7d\x4c\x3c\x2a\x1b\x86\x95\xb4\x5a\x89\x10\x32\x54\xc9\x3f\xaf\x73\x7f\x3e\x98\xfa\xfe\x9f\x83\xf3\xf4\x27\x09\xe4\x43\x30\x3f\xab\xa9\x1b\x0c\x69\xee\x5d\x3e\x11\xf7\x36\x98\xef\xea\xd8\xde\x8d\x8e\xad\x6f\x69\xc4\x72\x68\x44\x1b\xb7\xd6\xaf\xe7\xb2\x28\x6d\xd5\x2a\x92\x0c\x93\xbf\x97\x6a\xd5\x08\xfd\x97\x89\xcc\x3d\xb7\x49\x46\x40\xd2\x1c\xeb\x3c\x8c\xb6\x5e\xfd\x39\x68\xaa\x0c\x86\x7e\x80\xff\x54\xd5\x3f\x0b\xc5\x4e\xfe\x7c\xef\x9a\x21\xf8\x00\x90\x35\x3d\x04\xe6\x23\x4f\x3d\x26\x2f\x30\x5c\x49\x5f\xb1\xe4\x91\xe9\x7e\xaf\x9b\x5d\x6a\x7e\x9b\x59\x89\xc6\x3c\x06\xd6\xcb\x54\xc8\xb2\xf1\x35\x5d\x99\x5c\xb6\x7c\xec\x5d\xad\xb4\x41\xd6\xee\x21\x49\x20\xe7\x32\x26\x27\x04\x72\xba\x8a\xc9\xd9\xdb\xb7\x04\x8c\xc5\x22\x26\xa7\xa4\xd3\x09\x2b\x9d\x42\x73\x6b\xe9\x38\x16\xf3\x50\x1a\xed\x04\xdc\x51\x51\x62\x4c\x9a\x87\x5c\x97\x04\xf2\x14\xd6\xcf\x42\xb0\x7a\xfa\x0e\xcc\x76\x01\xbd\xb9\xbe\x9c\x9e\x4c\x8d\x6c\x3a\x24\x6f\x9c\xf1\x43\x65\xd1\x2b\x17\xe8\x72\xc3\xb1\x3c\x6e\xd1\xf7\x9b\x12\x4a\xcf\x6e\x90\x4d\x0b\x1f\xbc\x18\x32\xb7\x1a\x51\x4e\x07\xcd\x75\x30\x7f\xa8\xd8\x54\xea\x05\x70\xc2\xc5\x33\xd1\xf1\x82\xbd\x16\x78\x96\xa2\x9c\xf0\xa3\xe2\xa5\xb7\x7e\xa8\xe8\x04\xed\xaa\x07\x9a\x1b\x3f\x13\x1c\xa7\xd6\x5e\x3d\xf1\x3e\x65\x7c\xf3\xe5\x72\xa7\xab\x17\x61\xf0\xde\xb9\x99\x0e\xc2\x4f\xc1\xfc\xa1\x52\x58\xa9\x17\x30\x0c\x17\xdf\xcc\x61\x9d\xf0\xfd\x41\xd0\x57\xc6\x47\xcc\x0b\xd4\xd4\x96\xfa\x7f\xa0\x31\x71\x1e\x23\xbb\x71\x39\x1d\x99\xfe\x70\xd0\x71\x75\xa8\x94\x6e\xab\xfa\x75\x5f\x18\x76\x64\x65\x77\x17\xed\xb2\xf2\x9d\x41\xa6\x92\xc1\x51\x8b\xe6\xab\x34\xc5\xc4\x1e\xc3\x91\x44\x38\x12\x28\x61\x6b\xee\x0f\x6e\xec\x31\x9c\x1c\x4f\xcf\x39\x7a\x7f\xd3\xc1\x7d\x55\xd9\xdf\x3b\xa2\x0d\x0a\x4c\xac\xa7\xb2\xd6\x20\x30\xd6\x53\xa4\x0d\x31\x84\x4d\x63\xec\xaf\xd7\xe0\xeb\x04\xde\x04\x7b\xbd\xdf\x6c\x37\x69\x7e\x4a\x97\x26\x60\x55\x58\xae\x64\x9b\xf7\xca\xf2\xc3\x03\xd9\xfc\x44\x54\xdd\xab\x6a\xe1\xaa\x5e\x51\x45\x8e\x2c\x26\xf5\x88\x34\xe8\x2e\xea\x6c\x35\xbb\xfd\xef\xb0\xc1\xe1\xa8\xa3\x3e\x52\x02\x9d\x33\xcc\x83\xf3\xfd\xff\x40\x9c\x0a\x6a\xb2\x48\xa0\xbc\xb5\xd9\x74\xc5\xf1\xbb\xf3\x02\xac\xd4\xd4\x29\xbd\x87\x45\xd2\x6e\xfb\x16\x57\x76\xd3\xf5\x07\x5b\x7c\x57\xb9\x50\x52\xdd\x7b\x15\xc1\x27\xaf\xe2\x9b\x91\xd5\x54\x1a\xee\xd2\x33\x39\x0d\x1f\x1b\x57\xaf\x0b\x89\x41\x14\x76\x68\x17\x78\xd8\x31\x51\x43\x61\xbe\xdb\xb3\xba\xaf\x93\x90\x9f\x8d\x12\x9c\x0d\xbe\x62\xda\xb5\x69\x3c\x63\x43\x19\xc9\x59\xa4\xd2\xd4\xa0\x8d\xce\xc7\xa4\xa3\x7a\x6f\xe9\x5f\x17\xa0\x64\xa4\xca\x8c\x29\x97\x39\xdf\xe4\x66\x69\x25\x2c\xad\x8c\x4c\x99\x24\x68\x0c\x69\x3a\x3e\xf9\xb5\x28\xc4\x97\x80\x59\xf7\x85\xe5\xa0\xc7\x6f\x96\xff\x62\xee\xd4\x19\xf5\xaa\xae\x77\xab\x75\xb9\xf3\xb5\xe9\x66\xf4\x5f\x00\x00\x00\xff\xff\xca\x2e\x82\xc9\x32\x1e\x00\x00"

func templatesViewsLightHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLightHtml,
		"templates/views/light.html",
	)
}

func templatesViewsLightHtml() (*asset, error) {
	bytes, err := templatesViewsLightHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/light.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"templates/views/light.html": templatesViewsLightHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
			"light.html": &bintree{templatesViewsLightHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
