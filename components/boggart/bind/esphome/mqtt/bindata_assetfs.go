// Code generated by go-bindata.
// sources:
// templates/views/index.html
// templates/views/light.html
// DO NOT EDIT!

package mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5f\x4f\xe3\x38\x10\x7f\xe7\x53\x8c\x2c\x76\x05\x0f\x4d\x96\x7d\x3a\xa1\x96\xd3\xde\x22\x74\x95\x38\x58\x41\x57\xf7\xb8\x72\xe2\x49\xe3\x5e\x6a\x07\x8f\x5b\xa8\xa2\x7e\xf7\x93\x93\x26\x4d\xff\xa4\x24\x15\x2c\x79\x68\x1d\xdb\xf3\xf7\xf7\xf3\x38\x93\x65\x20\x30\x92\x0a\x81\x85\x5a\x59\x54\x96\xc1\x72\x79\x72\x92\x65\x20\x23\xf0\x42\x3d\x4d\xb5\x42\x65\xc9\xcd\xf6\x85\x9c\x43\x98\x70\xa2\x01\x33\xfa\x99\x5d\x9d\x00\x00\xd4\x67\x43\x9d\xf4\xa6\xa2\x77\xf1\x15\xdc\x88\xa6\xe5\xe8\x85\x7a\x17\x5f\x57\xfb\xb7\x65\x5e\x7e\xa5\x5c\x61\x52\x5b\xdd\xdd\x51\xfa\xb6\xb9\x27\xdf\x67\x79\x90\x60\xb9\xb3\x78\xc9\x7f\x7b\x64\x8d\x4c\x51\x80\xe0\x96\x17\xf3\xc2\xf6\x0c\x52\xaa\x15\xc9\x39\x82\xd2\xcf\x86\xa7\x0c\xc8\x2e\x12\x1c\xb0\x67\x29\x6c\x7c\x79\xf1\xe5\xcb\xa7\x3d\x56\x0a\x4b\x31\x72\xb1\x7f\xad\x58\x37\xcd\x8b\x2b\x05\x57\x2e\xaf\x17\x7f\x28\x60\xc3\x6b\x06\x1e\x2c\x97\x7d\xdf\xc6\x1d\xc4\x46\x8b\x14\x8f\x12\xbc\xe3\xd3\xe3\x04\x1f\x2d\xb7\xc7\x49\x7e\x0b\xad\xd4\x8a\xda\xc8\xf6\xfd\xa6\xe4\x39\xb9\xc6\xb4\xf7\x6d\xa0\xc5\xa2\x59\x6d\x96\x81\xe1\x6a\x8c\x70\x5a\x11\x19\x2e\x07\xdb\xb4\x6e\x0e\xe6\x55\x40\x85\x8b\x76\xad\xdc\x1b\x5e\x17\xa1\x1e\xa0\xc9\x7e\x41\x87\xeb\x91\xa2\x0e\xd9\x23\x45\x73\x6c\x6f\xb4\x99\x72\xdb\x5a\xc3\xc1\x0d\x50\x24\x5d\x46\xa0\x0d\x9c\xa9\x7a\xe2\xbd\xef\x7a\x3a\xe5\x4a\x8c\x74\x2a\x43\xef\xd1\x1a\xa9\xc6\xc0\xd8\x39\x9c\xe1\xd3\x56\x0a\x4f\xbd\xbf\xa4\x12\xde\x77\xad\x22\x39\xf6\x86\x3f\xbe\x09\x61\x90\xe8\x11\x15\x69\x33\xbc\x3e\x3f\x04\x5a\xe5\x6a\xad\x7e\x04\x56\xf5\xc6\x46\xcf\x52\x06\x46\xbb\xb3\x5e\xbc\xbc\x1e\xca\x3a\x9c\x36\xa1\xb4\xf0\x6a\x53\xe9\x66\xe0\x8e\x02\x95\xb2\x44\x8e\xe3\xa2\x14\xb7\x55\x99\x07\xcd\x21\x36\x18\x0d\x98\x83\xd9\x7b\xc0\xa7\x19\x92\xf5\x7e\x3e\xdc\x7a\x3f\xb8\x8d\x61\xb9\xfc\x93\xe7\x67\x72\x50\x59\xfd\x2c\xc5\x60\x0f\x85\x59\x2d\x75\xe0\xd2\x27\x55\xa4\x8b\x41\xa8\x8b\x99\x17\x6a\x99\xc0\x0d\x07\x65\xa9\x78\x9c\x2c\xd2\x38\x57\x56\x8d\x7a\xb8\xc0\x9e\x4e\x51\x31\xb0\xd2\x3a\x9c\xaa\x52\x72\x8d\x96\xcb\x84\x18\x9c\x3a\xe7\xae\xfa\xbe\xec\x66\xbb\xef\xf3\xf6\x02\x59\x06\xa8\x44\x7e\x0d\x76\x10\x91\x51\xc9\x5b\x77\xaa\x66\xe4\x0d\xa9\x18\xdc\xab\xc4\xdd\xaf\x1d\xa1\x5c\x9f\xa2\x57\x59\xb2\x73\x84\x36\xf6\xd0\xb3\xb4\x61\xcc\x5a\x1d\x9a\xfd\x4e\xe0\x13\x9c\xa5\x46\x2a\x1b\x01\xfb\x34\x67\x0d\x05\xe4\x1c\xd8\xfd\x5d\x67\xc6\x96\x4f\x17\xe6\xba\xa3\xd7\xc0\xdb\xcf\xe1\x54\x0c\xee\x6f\x6e\x76\xf8\x2b\xdc\x35\x60\xde\x80\xc1\x95\xc3\x07\x99\x4c\x56\xa7\xbb\x2c\x7e\xcc\xa1\x00\x1d\x45\x47\x13\xb9\x32\xdf\x85\xd0\xe5\xe3\x88\x9d\x50\x67\x2a\x56\x36\xdf\x12\xa3\xbb\x8f\x86\x28\x4d\xf8\x62\x17\xa2\xd1\xcc\x28\xd0\xea\xe3\xf0\x29\x0a\xcf\xfb\x4a\x75\x93\xe8\x58\x0e\x8b\x9a\xc1\x95\x38\x5c\x0e\xdf\xe7\xd6\x2f\x9f\x8a\xaa\xb1\xb5\xe9\xa5\xef\xef\xf9\xec\x81\xe5\xd2\x6f\x77\xcd\x81\xe5\x66\x8c\x76\xc0\x7e\x05\x09\x57\xff\x75\x64\xe4\x61\x16\x8e\x13\x1d\xe0\x2e\x0d\xef\x53\x54\xf0\x2f\x06\x40\x68\xe6\x68\x8e\xa2\x63\x6b\x0a\xb6\xa7\x43\xdf\x17\x72\xde\xea\x0b\xb0\x85\xc2\xc3\x9f\x9b\xcd\x1d\xc1\xeb\x16\xfa\x7e\x43\x5f\xd0\xf7\xf3\x46\x70\xab\xd3\xdc\x0c\xaa\xf6\xba\x1a\xae\xfe\x6a\xe7\x60\x73\x58\x36\xd0\xae\x4f\xa9\x2e\xc0\x2c\x03\xb2\xdc\xca\xf0\xef\xd1\x3f\xb7\x70\x56\x8c\x7f\x3e\xdc\x02\xf3\x05\xa7\x38\xd0\xdc\x08\x9f\x13\xa1\x25\x7f\x8e\x4a\x68\x43\x7e\xd5\xa9\x92\xa7\xd0\xf6\x02\xf2\x43\x2a\x66\x47\xc5\x6c\xa0\xb5\x25\x6b\x78\xea\x4d\xa5\xf2\x42\x22\x06\x11\x4f\x08\xcf\xdf\xd0\xea\xba\x43\x2e\x1d\x58\xcf\x1c\x76\x60\x7f\x56\x26\xf4\x86\x39\xf1\x27\xe4\x4f\x9e\x66\x68\x16\x5e\x2d\x2d\xce\x97\xc9\x7b\xe4\x22\x20\x67\xb0\x11\x80\x77\xb1\xb9\xce\xf6\x96\xed\x1a\x0c\xbf\xc1\xf8\x2a\xf6\x46\xec\x27\x0d\xd0\xff\x1f\x00\x00\xff\xff\x22\xa7\x11\xbf\x51\x12\x00\x00"

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLightHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x99\xdf\x6f\xdb\x36\x10\xc7\xdf\xf7\x57\x1c\x88\x62\x48\x1e\x64\xe7\x07\x5a\x0c\x5b\x64\x60\x19\xb2\xbe\x0c\x1d\x90\x14\xe8\x63\x41\x8b\x27\x8b\x1b\x45\x6a\x24\x95\xb8\x33\xf2\xbf\x0f\x24\x25\x59\x52\xac\x44\x6d\xa2\xd5\x71\x1e\x02\x4a\x24\xef\x8e\xdf\xfb\xdc\xc9\xb6\x36\x1b\x60\x98\x72\x89\x40\x12\x25\x2d\x4a\x4b\xe0\xfe\xfe\x07\x00\x80\xcd\x06\x78\x0a\x33\xd4\x5a\xe9\xfa\xde\x05\xe3\xb7\x90\x08\x6a\x4c\x4c\xa8\x40\x6d\xc1\xff\x8f\x18\x95\x2b\xd4\xf5\x05\x37\x39\x37\x86\x2e\x05\x92\x85\xdf\xe6\xb7\x2e\x4b\x6b\x95\x04\xfb\xa5\xc0\x98\x84\x0b\x52\xdb\x4a\x84\x32\x48\x80\x51\x4b\xeb\xed\x95\x03\x02\x54\x73\x1a\x65\x9c\x31\x94\x31\xb1\xba\x44\xb2\xf8\xd1\xf2\x1c\xcd\x2f\x17\xf3\x60\x66\x51\xc7\xdb\x0b\x76\xce\xf8\x6d\x33\x87\x92\xb9\x89\xf6\xd1\x12\x95\x17\x4a\xa2\xb4\xad\x23\xbf\x31\x96\x5a\x84\x9f\xe3\xd6\xf4\xec\xc6\xdf\xdb\xa1\x81\x56\x77\xed\x23\xb6\x66\x12\x25\xa2\x9c\x45\xa7\x67\xe0\x46\x26\xaf\x47\x6b\x13\x9d\x9e\xb5\xf6\xf4\xf7\xad\x3f\x17\x54\xa2\xe8\xad\x78\xb8\xca\x72\xdb\x91\xb7\xb3\x32\x3b\x5b\x38\x35\xb6\x07\xf8\x40\x73\x17\xff\xc5\x3c\x3b\x1b\xd8\xd2\x0e\x5d\x20\xd5\x29\x5f\x93\x45\x4b\xc1\xce\xe2\x81\xdb\x9d\x00\x6b\x9c\x06\xfc\xa5\x4a\xe7\xf5\x62\x37\x8e\x32\xa5\xf9\xbf\x4a\x5a\x2a\xc0\x5f\x0b\xba\x44\x11\x09\x4c\x2d\x01\xad\x04\x86\x65\x04\x72\xb4\x99\x62\x31\x29\x94\xb1\x04\x38\x73\x52\xe7\x39\x95\x8c\x80\x54\xb7\x54\x70\x46\x2d\xee\x76\xda\x0f\x92\x5b\xcc\x83\xb3\x95\x56\x65\x31\x10\x6a\xb3\xd3\x47\xe4\xd6\xc7\xc4\x43\xb2\xa5\x57\x49\xab\x95\x08\x21\x43\x95\xf9\xf3\x3a\xf1\xe7\x83\x79\xef\xff\x39\x2c\x4f\x7f\x92\x40\x6e\x82\xf9\x59\x8d\xdc\x60\x48\x73\xef\xf2\x89\xb8\x1f\x52\xf9\xae\x8e\xed\xdd\xe8\xd8\xfa\x96\x46\x2c\x87\x46\xb4\x71\x6b\xfd\x7a\x2e\x8b\xd2\x56\x4d\x22\xc9\x30\xf9\x7b\xa9\xd6\x8d\xd0\x7f\x99\xc8\xdc\x71\x9b\x64\x04\x24\xcd\xb1\xce\xc3\x68\xeb\xd5\x9f\x83\xa6\xca\x60\xe8\x04\xf8\x4f\x55\xf7\xb3\x1b\xab\xb9\x5c\x01\xf9\xf3\x83\xeb\x83\xe0\x23\x40\xd6\xb4\x0f\x98\x8f\x3c\xf6\x98\xc4\xc0\x70\x29\x7d\xc5\x92\x47\xa6\xfb\x6d\x6e\x76\xa9\xf9\x2a\xb3\x12\x8d\x79\x8c\xac\x97\x29\x91\x65\xe3\x6b\xba\x3a\xb9\x6c\xf9\xd8\xbb\x62\x69\x93\xac\xdd\xf3\x91\x40\xce\x65\x4c\x4e\x08\xe4\x74\x1d\x93\xb3\xb7\x6f\x09\x18\x8b\x45\x4c\x4e\x49\xa7\x15\x56\x3a\x85\xee\xd6\xd2\x71\x2c\xe7\xa1\x36\xda\x09\xb8\xa5\xa2\xc4\x98\x34\xcf\xb7\x2e\x09\xe4\x29\xac\x9f\x85\x60\xf5\xe0\x1d\x98\xed\x02\x7a\xfd\xfe\x72\x7a\x32\x35\xb2\xe9\x90\xbc\x76\xc6\x0f\x95\x45\xaf\x5c\xa0\xcb\x0d\xc7\xf2\xf8\x80\xbe\xdf\x94\x50\x7a\x76\x8d\x6c\x5a\xf8\xe0\xc5\x90\x59\x69\x44\x39\x1d\x34\xef\x83\xf9\x43\xc5\xa6\x52\x2f\x80\x13\x2e\x9e\x89\x8e\x17\xec\xb5\xc0\xb3\x14\xe5\x84\x9f\x15\x2f\xbd\xf5\x43\x45\x27\x68\x57\x3d\xd0\xdc\xf8\x99\xe0\x38\xb5\xf6\xea\x89\xf7\x29\xe3\xdb\xaf\x96\x3b\x5d\xbd\x08\x83\x77\xce\xcd\x74\x10\x7e\x0a\xe6\x0f\x95\xc2\x4a\xbd\x80\x61\xb8\xf8\x66\x0e\xeb\x84\xef\x0f\x82\xbe\x32\x3e\x62\x5e\xa0\xa6\xb6\xd4\xff\x03\x8d\x89\xf3\x18\xd9\xad\xcb\xe9\xc8\xf4\x87\x83\x8e\xab\x43\xa5\xf4\xa1\xaa\x5f\xf7\x85\x61\x47\x56\x76\x77\xd1\x2e\x2b\xdf\x19\x64\x2a\x19\x1c\xb5\x68\xbe\x4a\x53\x4c\xec\x31\x1c\x49\x84\x23\x81\x12\x1e\xcc\xfd\xc1\x8d\x3d\x86\x93\xe3\xe9\x39\x47\xef\x6f\x3a\xb8\xaf\x2a\xfb\x7b\x47\xb4\x41\x81\x89\xf5\x54\xd6\x1a\x04\xc6\x7a\x8a\xb4\x21\x86\xb0\x69\x8c\xfd\xcd\x06\x7c\x9d\xc0\x9b\x60\xaf\xf7\x73\xed\x36\xcd\x4f\xe9\xd2\x04\xac\x0a\xcb\x95\x6c\xf3\x5e\x59\xbe\xbf\x27\xdb\xdf\x88\xaa\x7b\x55\x2d\x5c\xd5\x2b\xaa\xc8\x91\xc5\xa4\x1e\x91\x06\xdd\x45\x9d\xad\x66\xb7\xff\x21\x36\x38\x1c\x75\xd4\x47\x4a\xa0\x73\x86\x79\x70\xbe\xff\x1f\x88\x53\x41\x4d\x16\x09\x94\x2b\x9b\x4d\x57\x1c\xbf\x3b\x2f\xc0\x4a\x4d\x9d\xd2\x7b\x58\x24\xed\xb6\x6f\x71\x6d\xb7\x5d\x7f\xb0\xc5\x77\x95\x0b\x25\xd5\xbd\x57\x11\x7c\xf2\x2a\xbe\x19\x59\x4d\xa5\xe1\x2e\x3d\x93\xd3\xf0\xb1\x71\xf5\xba\x90\x18\x44\x61\x87\x76\x81\x87\x1d\x13\x35\x14\xe6\xbb\x3d\xab\xfb\x3a\x09\xf9\xd9\x28\xc1\xd9\xe0\x3b\xa6\x5d\x9b\xc6\x33\x36\x94\x91\x9c\x45\x2a\x4d\x0d\xda\xe8\x7c\x4c\x3a\xaa\x57\x96\xfe\x7d\x01\x4a\x46\xaa\xcc\x98\x72\x99\xf3\x6d\x6e\x96\x56\xc2\xd2\xca\xc8\x94\x49\x82\xc6\x90\xa6\xe3\x93\x5f\x8b\x42\x7c\x09\x98\x75\xdf\x55\x0e\x7a\xfc\x66\xf9\x2f\xe6\x4e\x9d\x51\xef\xea\x7a\xb7\x5a\x97\x3b\xdf\x98\x6e\x47\xff\x05\x00\x00\xff\xff\xe5\x7e\x4b\xbb\x2d\x1e\x00\x00"

func templatesViewsLightHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLightHtml,
		"templates/views/light.html",
	)
}

func templatesViewsLightHtml() (*asset, error) {
	bytes, err := templatesViewsLightHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/light.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"templates/views/light.html": templatesViewsLightHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
			"light.html": &bintree{templatesViewsLightHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
