// Code generated by go-bindata.
// sources:
// templates/views/index.html
// templates/views/light.html
// DO NOT EDIT!

package mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xcd\x6e\xdb\x38\x10\xbe\xe7\x29\x06\x44\x5a\x24\x07\x49\x4d\x4f\x8b\x40\xce\xa2\xdb\xa0\xbb\x01\xb2\x49\x91\xb8\xd8\x63\x41\x89\x23\x8b\x5e\x99\x54\x38\xb4\x13\x43\xf0\xbb\x2f\x28\x59\xf2\xaf\x1c\xc9\x48\xb6\x3a\xd8\x14\xc5\xf9\xfd\x3e\x0e\x39\x45\x01\x02\x13\xa9\x10\x58\xac\x95\x45\x65\x19\x2c\x16\x27\x27\x45\x01\x32\x01\x3f\xd6\x93\x5c\x2b\x54\x96\xdc\x6c\x28\xe4\x0c\xe2\x8c\x13\x0d\x98\xd1\xcf\xec\xea\x04\x00\x60\x7d\x36\xd6\x99\x37\x11\xde\xc5\x67\x70\x23\x9a\xd4\xa3\x17\xf2\x2e\x3e\x2f\xd7\x6f\xcb\xbc\xfc\xcc\xb9\xc2\x6c\xed\xeb\xee\x8a\xda\xb7\xcd\x35\xe5\x3a\xcb\xa3\x0c\xeb\x95\xd5\x4b\xf9\xeb\x91\x35\x32\x47\x01\x82\x5b\x5e\xcd\x0b\xeb\x19\xa4\x5c\x2b\x92\x33\x04\xa5\x9f\x0d\xcf\x19\x90\x9d\x67\x38\x60\xcf\x52\xd8\xf4\xf2\xe2\xd3\xa7\x0f\x7b\xac\x54\x96\x52\xe4\x62\xff\xb7\xea\xbb\x69\xff\xb8\x54\x70\xe5\xf2\x7a\xf1\x9b\x02\x76\x73\xcd\xc0\x87\xc5\x22\x0c\x6c\xda\x43\x6c\x38\xcf\xf1\x28\xc1\x3b\x3e\x39\x4e\xf0\xd1\x72\x7b\x9c\xe4\x97\xd8\x4a\xad\xa8\x8b\x6c\x18\xb4\x25\xcf\xc9\xb5\xa6\x3d\xb4\x91\x16\xf3\x76\xb5\x45\x01\x86\xab\x11\xc2\x69\x43\x64\xb8\x1c\x6c\xd3\xba\x3d\x98\x57\x01\x15\x2e\xda\x95\x72\xff\x4f\xb4\x37\xd7\x55\xb4\x07\x98\xd2\x2a\xeb\xd0\x3d\x5e\xda\x41\x7c\xbc\x74\x89\x73\x67\xf1\x83\x0b\xa0\x4a\xbd\x4c\x40\x1b\x38\x53\xb8\x65\xe9\xab\x9e\x4c\xb8\x12\x43\x9d\xcb\xd8\x7f\xb4\x46\xaa\x11\x30\x76\x0e\x67\xf8\xb4\x9b\xcb\x53\xff\x0f\xa9\x84\xff\x55\xab\x44\x8e\xfc\x9b\xef\x5f\x84\x30\x48\xf4\x88\x8a\xb4\xb9\xb9\x3e\x3f\x04\x60\xe3\xf0\x5a\x2d\x89\xac\xf2\x46\x46\x4f\x73\x06\x46\xbb\x7d\x5f\xbd\xbc\x1e\xd0\x2a\xa8\x8e\x01\x75\x70\x6c\x53\xef\x4e\xf8\x8e\x0e\x8d\xbe\x4c\x8e\xd2\xaa\x38\x77\xd5\x5a\x86\xce\x21\x35\x98\x0c\x98\xc3\xdb\x7f\xc0\xa7\x29\x92\xf5\x7f\x3c\xdc\xfa\xdf\xb9\x4d\x61\xb1\xf8\x9d\x97\xbb\x74\xd0\x18\xfe\x28\xc5\x60\x3f\xa9\xd9\x5a\x0e\xc1\xe5\x51\xaa\x44\x57\x83\x58\x57\x33\x2f\xd4\x31\x93\x1b\x3e\xca\x5a\xf1\x28\x9b\xe7\x69\xa9\xac\x19\x79\x38\x47\x4f\xe7\xa8\x18\x58\x69\x1d\x60\x4d\x7d\xb9\x46\xcb\x65\x46\x0c\x4e\x9d\x73\x57\x61\x20\xfb\xd9\x0e\x03\xde\x5d\xa0\x28\x00\x95\x28\xcf\xc6\x1e\x22\x32\xa9\x09\xec\xb6\xd7\x94\xfc\x1b\xaa\x06\xf7\x2a\x73\x87\x6e\x4f\x34\x57\x9b\xaa\x0b\x57\xf6\xed\xa8\x8d\x65\xf4\x2c\x6d\x9c\xb2\x4e\x7b\x68\xbf\x2b\xf8\x04\x67\xb9\x91\xca\x26\xc0\x3e\xcc\xd8\xbe\x92\x72\x0e\xec\xfe\xae\x37\x6f\xeb\xa7\x0f\x7f\xdd\x1e\x6c\x67\xef\xc7\x78\x22\x06\xf7\xdf\xbe\xed\xb0\x58\xb8\x13\xc2\xbc\x01\x8f\x1b\x9f\x0f\xf2\x99\xac\xce\x77\xb9\xfc\x58\x42\x01\x3a\x49\x8e\xa6\x73\x63\xbe\x0f\xad\xeb\xc7\xd1\x3b\xa3\xde\x84\x6c\x6c\xbe\x31\x4c\x77\xbf\x1a\xa5\x3c\xe3\xf3\x5d\x94\x86\x53\xa3\x40\xab\x5f\x07\x51\x55\x81\xde\x57\xaa\x9f\x44\xcf\xba\x58\x95\x0d\xae\xc4\xe1\xba\xf8\x6e\x57\x81\xfa\x69\x08\x9b\x5a\x9b\x5f\x06\x41\xeb\x75\x28\xe8\x76\xea\x81\xe5\x66\x84\x76\xc0\x7e\x46\x19\x57\xff\xf6\xe4\xe5\x61\x2e\x8e\x32\x1d\xe1\x2e\x19\xef\x73\x54\xf0\x0f\x46\x40\x68\x66\x68\x8e\x22\x65\x67\x22\x76\x27\x45\x18\x08\x39\xeb\x74\x3f\xec\xa0\xf0\xf0\x65\xb4\xbd\x6b\x78\xdd\x42\x18\xb4\xf4\x0e\x61\x50\x36\x8b\x5b\xdd\xe8\x66\x50\x6b\xaf\xcb\xe1\xf2\x6f\x6d\x37\x6c\x0e\xeb\x26\xdb\xf5\x32\xcd\x61\x58\x14\x40\x96\x5b\x19\xff\x35\xfc\xfb\x16\xce\xaa\xf1\x8f\x87\x5b\x60\x81\xe0\x94\x46\x9a\x1b\x11\x70\x22\xb4\x14\xcc\x50\x09\x6d\x28\x68\xba\x59\xf2\x15\x5a\x2f\xa2\x20\xa6\x6a\x76\x58\xcd\x46\x5a\x5b\xb2\x86\xe7\xfe\x44\x2a\x3f\x26\x62\x90\xf0\x8c\xf0\xfc\x0d\xad\xae\xba\xe8\xda\x81\xd5\xcc\x61\x07\xf6\x67\x65\x4c\x6f\x98\x93\x60\x4c\xc1\xf8\x69\x8a\x66\xee\xaf\xa5\xc5\xf9\x32\x7e\x8f\x5c\x44\xe4\x0c\xb6\x02\xf0\x2e\x36\x57\xd9\xde\xb2\xbd\x06\xc3\xff\x60\x7c\x19\x7b\x2b\xf6\xe3\x16\xe8\xff\x0b\x00\x00\xff\xff\x77\x2e\x03\xa0\x75\x12\x00\x00"

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLightHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x99\xdf\x6f\xdb\x36\x10\xc7\xdf\xf7\x57\x1c\x88\x62\x48\x1e\x64\xe7\x07\x5a\x0c\x5b\x64\x60\x19\xb2\xbc\x0c\x1d\x90\x16\xe8\x63\x41\x8b\xa7\x88\x1b\x45\x6a\x24\x95\xb8\x33\xf2\xbf\x0f\x24\x25\x59\x92\xad\x44\x6d\xa2\xd5\x71\x1e\x02\x4a\x24\xef\x8e\xdf\xfb\xdc\xc9\xb6\xd6\x6b\x60\x98\x72\x89\x40\x12\x25\x2d\x4a\x4b\xe0\xe1\xe1\x07\x00\x80\xf5\x1a\x78\x0a\x33\xd4\x5a\xe9\xfa\xde\x05\xe3\x77\x90\x08\x6a\x4c\x4c\xa8\x40\x6d\xc1\xff\x8f\x18\x95\xb7\xa8\xeb\x0b\x6e\x72\x6e\x0c\x5d\x0a\x24\x0b\xbf\xcd\x6f\x5d\x96\xd6\x2a\x09\xf6\x4b\x81\x31\x09\x17\xa4\xb6\x95\x08\x65\x90\x00\xa3\x96\xd6\xdb\x2b\x07\x04\xa8\xe6\x34\xca\x38\x63\x28\x63\x62\x75\x89\x64\xf1\xa3\xe5\x39\x9a\x5f\x2e\xe6\xc1\xcc\xa2\x8e\xb7\x17\xec\x9c\xf1\xbb\x66\x0e\x25\x73\x13\xed\xa3\x25\x2a\x2f\x94\x44\x69\x5b\x47\x7e\x63\x2c\xb5\x08\x3f\xc7\xad\xe9\xd9\x35\xda\x0f\xfe\xf6\x0e\x19\xb4\xba\x6f\x9f\xb2\x35\x93\x28\x11\xe5\x2c\x3a\x3d\x03\x37\x32\x79\x3d\x5a\x99\xe8\xf4\xac\xb5\xa7\xbf\x6f\xf5\xb9\xa0\x12\x45\x6f\xc5\xf6\x2a\xcb\x6d\x47\xe1\xce\xca\xec\x6c\xe1\x04\xe9\x9c\xe1\x3d\xcd\xdd\x11\x2e\xe6\xd9\xd9\xc0\xae\x76\xf4\x02\xa9\x4e\xf9\x8a\x2c\x5a\x3a\x76\x16\x0f\xdc\xee\xc4\x58\x43\x35\xe0\x2f\x55\x3a\xaf\x17\xbb\x71\x94\x29\xcd\xff\x55\xd2\x52\x01\xfe\x5a\xd0\x25\x8a\x48\x60\x6a\x09\x68\x25\x30\x2c\x23\x90\xa3\xcd\x14\x8b\x49\xa1\x8c\x25\xc0\x99\x53\x3b\xcf\xa9\x64\x04\xa4\xba\xa3\x82\x33\x6a\x71\xb7\xd3\x7e\x90\xdc\x62\x1e\x9c\xdd\x6a\x55\x16\x03\xa1\x36\x3b\x7d\x44\x6e\x7d\x4c\x3c\x2a\x1b\x86\x95\xb4\x5a\x89\x10\x32\x54\xc9\x3f\xaf\x73\x7f\x3e\x98\xfa\xfe\x9f\x83\xf3\xf4\x27\x09\xe4\x43\x30\x3f\xab\xa9\x1b\x0c\x69\xee\x5d\x3e\x11\xf7\x36\x98\xef\xea\xd8\xde\x8d\x8e\xad\x6f\x69\xc4\x72\x68\x44\x1b\xb7\xd6\xaf\xe7\xb2\x28\x6d\xd5\x2a\x92\x0c\x93\xbf\x97\x6a\xd5\x08\xfd\x97\x89\xcc\x3d\xb7\x49\x46\x40\xd2\x1c\xeb\x3c\x8c\xb6\x5e\xfd\x39\x68\xaa\x0c\x86\x7e\x80\xff\x54\xd5\x3f\x0b\xc5\x4e\xfe\x7c\xef\x9a\x21\xf8\x00\x90\x35\x3d\x04\xe6\x23\x4f\x3d\x26\x2f\x30\x5c\x49\x5f\xb1\xe4\x91\xe9\x7e\xaf\x9b\x5d\x6a\x7e\x9b\x59\x89\xc6\x3c\x06\xd6\xcb\x54\xc8\xb2\xf1\x35\x5d\x99\x5c\xb6\x7c\xec\x5d\xad\xb4\x41\xd6\xee\x21\x49\x20\xe7\x32\x26\x27\x04\x72\xba\x8a\xc9\xd9\xdb\xb7\x04\x8c\xc5\x22\x26\xa7\xa4\xd3\x09\x2b\x9d\x42\x73\x6b\xe9\x38\x16\xf3\x50\x1a\xed\x04\xdc\x51\x51\x62\x4c\x9a\x87\x5c\x97\x04\xf2\x14\xd6\xcf\x42\xb0\x7a\xfa\x0e\xcc\x76\x01\xbd\xb9\xbe\x9c\x9e\x4c\x8d\x6c\x3a\x24\x6f\x9c\xf1\x43\x65\xd1\x2b\x17\xe8\x72\xc3\xb1\x3c\x6e\xd1\xf7\x9b\x12\x4a\xcf\x6e\x90\x4d\x0b\x1f\xbc\x18\x32\xb7\x1a\x51\x4e\x07\xcd\x75\x30\x7f\xa8\xd8\x54\xea\x05\x70\xc2\xc5\x33\xd1\xf1\x82\xbd\x16\x78\x96\xa2\x9c\xf0\xa3\xe2\xa5\xb7\x7e\xa8\xe8\x04\xed\xaa\x07\x9a\x1b\x3f\x13\x1c\xa7\xd6\x5e\x3d\xf1\x3e\x65\x7c\xf3\xe5\x72\xa7\xab\x17\x61\xf0\xde\xb9\x99\x0e\xc2\x4f\xc1\xfc\xa1\x52\x58\xa9\x17\x30\x0c\x17\xdf\xcc\x61\x9d\xf0\xfd\x41\xd0\x57\xc6\x47\xcc\x0b\xd4\xd4\x96\xfa\x7f\xa0\x31\x71\x1e\x23\xbb\x71\x39\x1d\x99\xfe\x70\xd0\x71\x75\xa8\x94\x6e\xab\xfa\x75\x5f\x18\x76\x64\x65\x77\x17\xed\xb2\xf2\x9d\x41\xa6\x92\xc1\x51\x8b\xe6\xab\x34\xc5\xc4\x1e\xc3\x91\x44\x38\x12\x28\x61\x6b\xee\x0f\x6e\xec\x31\x9c\x1c\x4f\xcf\x39\x7a\x7f\xd3\xc1\x7d\x55\xd9\xdf\x3b\xa2\x0d\x0a\x4c\xac\xa7\xb2\xd6\x20\x30\xd6\x53\xa4\x0d\x31\x84\x4d\x63\xec\xaf\xd7\xe0\xeb\x04\xde\x04\x7b\xbd\xdf\x6c\x37\x69\x7e\x4a\x97\x26\x60\x55\x58\xae\x64\x9b\xf7\xca\xf2\xc3\x03\xd9\xfc\x44\x54\xdd\xab\x6a\xe1\xaa\x5e\x51\x45\x8e\x2c\x26\xf5\x88\x34\xe8\x2e\xea\x6c\x35\xbb\xfd\xef\xb0\xc1\xe1\xa8\xa3\x3e\x52\x02\x9d\x33\xcc\x83\xf3\xfd\xff\x40\x9c\x0a\x6a\xb2\x48\xa0\xbc\xb5\xd9\x74\xc5\xf1\xbb\xf3\x02\xac\xd4\xd4\x29\xbd\x87\x45\xd2\x6e\xfb\x16\x57\x76\xd3\xf5\x07\x5b\x7c\x57\xb9\x50\x52\xdd\x7b\x15\xc1\x27\xaf\xe2\x9b\x91\xd5\x54\x1a\xee\xd2\x33\x39\x0d\x1f\x1b\x57\xaf\x0b\x89\x41\x14\x76\x68\x17\x78\xd8\x31\x51\x43\x61\xbe\xdb\xb3\xba\xaf\x93\x90\x9f\x8d\x12\x9c\x0d\xbe\x62\xda\xb5\x69\x3c\x63\x43\x19\xc9\x59\xa4\xd2\xd4\xa0\x8d\xce\xc7\xa4\xa3\x7a\x6f\xe9\x5f\x17\xa0\x64\xa4\xca\x8c\x29\x97\x39\xdf\xe4\x66\x69\x25\x2c\xad\x8c\x4c\x99\x24\x68\x0c\x69\x3a\x3e\xf9\xb5\x28\xc4\x97\x80\x59\xf7\x85\xe5\xa0\xc7\x6f\x96\xff\x62\xee\xd4\x19\xf5\xaa\xae\x77\xab\x75\xb9\xf3\xb5\xe9\x66\xf4\x5f\x00\x00\x00\xff\xff\xca\x2e\x82\xc9\x32\x1e\x00\x00"

func templatesViewsLightHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLightHtml,
		"templates/views/light.html",
	)
}

func templatesViewsLightHtml() (*asset, error) {
	bytes, err := templatesViewsLightHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/light.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"templates/views/light.html": templatesViewsLightHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
			"light.html": &bintree{templatesViewsLightHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
