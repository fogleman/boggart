// Code generated by go-bindata.
// sources:
// templates/views/index.html
// templates/views/light.html
// DO NOT EDIT!

package mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xcd\x6e\xdb\x38\x10\xbe\xe7\x29\x06\x44\x5a\x24\x07\x4b\x4d\x4f\x8b\x40\xce\xa2\xdb\xa0\xd8\x00\xd9\xa4\x48\x5c\xec\xb1\xa0\xc4\x91\x45\xaf\x4c\x2a\x1c\xda\x89\x21\xf8\xdd\x17\x94\x2c\x59\xfe\x91\x23\x19\x49\xab\x83\x4d\x91\x9c\xdf\xef\xe3\x50\x93\xe7\x20\x30\x96\x0a\x81\x45\x5a\x59\x54\x96\xc1\x72\x79\x72\x92\xe7\x20\x63\xf0\x22\x3d\xcd\xb4\x42\x65\xc9\xcd\x06\x42\xce\x21\x4a\x39\xd1\x90\x19\xfd\xcc\xae\x4e\x00\x00\x9a\xb3\x91\x4e\x07\x53\x31\xb8\xf8\x0c\x6e\x44\xd3\x6a\xf4\x42\x83\x8b\xcf\xab\xfd\xdb\x32\x2f\x3f\x33\xae\x30\x6d\xac\xee\xee\xa8\x7c\xdb\xdc\x53\xec\xb3\x3c\x4c\xb1\xda\x59\xbe\x14\xbf\x03\xb2\x46\x66\x28\x40\x70\xcb\xcb\x79\x61\x07\x06\x29\xd3\x8a\xe4\x1c\x41\xe9\x67\xc3\x33\x06\x64\x17\x29\x0e\xd9\xb3\x14\x36\xb9\xbc\xf8\xf4\xe9\xc3\x1e\x2b\xa5\xa5\x04\xb9\xd8\xbf\x56\xae\x9b\xf6\xc5\x95\x82\x2b\x97\xd7\x8b\x3f\x14\xb0\x9b\x6b\x06\x1e\x2c\x97\x81\x6f\x93\x1e\x62\xa3\x45\x86\x47\x09\xde\xf1\xe9\x71\x82\x8f\x96\xdb\xe3\x24\xbf\x44\x56\x6a\x45\x5d\x64\x03\xbf\x2d\x79\x4e\xae\x35\xed\x81\x0d\xb5\x58\xb4\xab\xcd\x73\x30\x5c\x8d\x11\x4e\x6b\x22\xc3\xe5\x70\x9b\xd6\xed\xc1\xbc\x0a\xa8\x70\xd1\xae\x95\x7b\x37\xd7\x65\xa8\x07\x68\xb2\x5f\xd0\xe1\x7a\xa4\xa8\x43\xf6\x48\xd1\x02\xdb\xce\xb2\x07\x37\x40\x99\x6e\x19\x83\x36\x70\xa6\x9a\x29\xf7\xbe\xea\xe9\x94\x2b\x31\xd2\x99\x8c\xbc\x47\x6b\xa4\x1a\x03\x63\xe7\x70\x86\x4f\x5b\xc9\x3b\xf5\xfe\x92\x4a\x78\x5f\xb5\x8a\xe5\xd8\xbb\xf9\xfe\x45\x08\x83\x44\x8f\xa8\x48\x9b\x9b\xeb\xf3\x43\x70\xd5\xae\x36\x2a\x47\x68\xd5\x60\x6c\xf4\x2c\x63\x60\xb4\x3b\xe5\xe5\xcb\xeb\xa1\xac\xc3\xe9\x12\x4a\x07\xaf\x36\x95\x6e\x06\xee\xc0\xaf\x95\xa5\x72\x9c\x94\x45\xb8\xab\xca\x22\x68\x0e\x89\xc1\x78\xc8\x1c\xc0\xde\x03\x3e\xcd\x90\xac\xf7\xe3\xe1\xd6\xfb\xce\x6d\x02\xcb\xe5\x9f\xbc\x38\x8d\xc3\xda\xea\x47\x29\x86\x7b\xc8\xcb\x1a\xa9\x03\x97\x3e\xa9\x62\x5d\x0e\x22\x5d\xce\xbc\x50\xc7\x04\x6e\x38\x28\x2b\xc5\xe3\x74\x91\x25\x85\xb2\x7a\x34\xc0\x05\x0e\x74\x86\x8a\x81\x95\xd6\xe1\x54\x17\x91\x6b\xb4\x5c\xa6\xc4\xe0\xd4\x39\x77\x15\xf8\xb2\x9f\xed\xc0\xe7\xdd\x05\xf2\x1c\x50\x89\xe2\x02\xec\x21\x22\xe3\x8a\xb7\xee\x3c\xcd\xc8\xbb\xa1\x72\x70\xaf\x52\x77\xb3\xf6\x84\x72\x7d\x8a\x5e\x65\xc9\xce\x11\xda\xd8\x43\xcf\xd2\x46\x09\xeb\x74\x68\xf6\x3b\x81\x4f\x70\x96\x19\xa9\x6c\x0c\xec\xc3\x9c\xed\x94\x8e\x73\x60\xf7\x77\xbd\xb9\x5a\x3d\x7d\x38\xeb\x0e\x5d\x0b\x63\x3f\x46\x53\x31\xbc\xff\xf6\x6d\x87\xb9\xc2\x95\x7e\xf3\x06\xdc\xad\x1d\x3e\xc8\x61\xb2\x3a\xdb\xe5\xef\x63\x01\x02\xe8\x38\x3e\x9a\xc2\xb5\xf9\x3e\x54\xae\x1e\x47\xe9\x94\x7a\x93\xb0\xb6\xf9\x96\x18\xdd\xfd\x6e\x88\xb2\x94\x2f\x76\x21\x1a\xcd\x8c\x02\xad\x7e\x1f\x3e\x65\xc9\x79\x5f\xa9\x7e\x12\x3d\x0b\x61\x59\x2d\xb8\x12\x87\x0b\xe1\xfb\xdc\xf7\xd5\x53\x53\x35\xb1\x36\xbb\xf4\xfd\xfd\x9f\x3a\x7e\xb7\x0b\x0e\x2c\x37\x63\xb4\x43\xf6\x33\x4c\xb9\xfa\xaf\x27\x23\x0f\xb3\x70\x9c\xea\x10\x77\x69\x78\x9f\xa1\x82\x7f\x31\x04\x42\x33\x47\x73\x14\x1d\x3b\x53\xb0\x3b\x1d\x02\x5f\xc8\x79\xa7\x6f\xbf\x0e\x0a\x0f\x7f\x68\xb6\x77\x01\xaf\x5b\x08\xfc\x96\x5e\x20\xf0\x8b\xe6\x6f\xab\xbb\xdc\x0c\xaa\xf1\xba\x1a\xae\xfe\x1a\xe7\x60\x73\x58\x35\xcd\xae\x37\xa9\x2f\xc0\x3c\x07\xb2\xdc\xca\xe8\xef\xd1\x3f\xb7\x70\x56\x8e\x7f\x3c\xdc\x02\xf3\x05\xa7\x24\xd4\xdc\x08\x9f\x13\xa1\x25\x7f\x8e\x4a\x68\x43\x7e\xdd\x9d\x92\xa7\xd0\x0e\x42\xf2\x23\x2a\x67\x47\xe5\x6c\xa8\xb5\x25\x6b\x78\xe6\x4d\xa5\xf2\x22\x22\x06\x31\x4f\x09\xcf\xdf\xd0\xea\xba\x2b\xae\x1c\x58\xcf\x1c\x76\x60\x7f\x56\x26\xf4\x86\x39\xf1\x27\xe4\x4f\x9e\x66\x68\x16\x5e\x23\x2d\xce\x97\xc9\x7b\xe4\x22\x24\x67\xb0\x15\x80\x77\xb1\xb9\xce\xf6\x96\xed\x06\x0c\xbf\xc0\xf8\x2a\xf6\x56\xec\x27\x2d\xd0\xff\x1f\x00\x00\xff\xff\x0b\x54\x08\x2c\x45\x12\x00\x00"

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLightHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x99\xdf\x6f\xdb\x36\x10\xc7\xdf\xf7\x57\x1c\x88\x62\x68\x1e\x14\xe7\x07\x5a\x0c\x5b\x64\x60\x19\xb2\xbe\x0c\x1d\x90\x16\xe8\x63\x41\x8b\xa7\x88\x1b\x45\x6a\x24\x95\xb8\x33\xf2\xbf\x0f\xfc\x21\x59\x52\xac\x44\x6d\xa2\xd5\x49\x1e\x02\x4a\x24\xef\x8e\xdf\xfb\xdc\xc9\xb6\x36\x1b\x60\x98\x73\x89\x40\x32\x25\x2d\x4a\x4b\xe0\xf6\xf6\x07\x00\x80\xcd\x06\x78\x0e\x87\xa8\xb5\xd2\xcd\xbd\x33\xc6\xaf\x21\x13\xd4\x98\x94\x50\x81\xda\x82\xff\x9f\x30\x2a\xaf\x50\x37\x17\xdc\x94\xdc\x18\xba\x12\x48\x96\x7e\x9b\xdf\xba\xaa\xad\x55\x12\xec\x97\x0a\x53\x12\x2e\x48\x63\x2b\x13\xca\x20\x01\x46\x2d\x6d\xb6\x47\x07\x04\xa8\xe6\x34\x29\x38\x63\x28\x53\x62\x75\x8d\x64\xf9\xa3\xe5\x25\x9a\x5f\xce\x16\xc1\xcc\xb2\x89\x77\x10\xec\x82\xf1\xeb\x76\x0e\x25\x73\x13\xdd\xa3\x65\xaa\xac\x94\x44\x69\x3b\x47\x7e\x65\x2c\xb5\x08\x3f\xa7\x9d\xe9\xc3\x0f\xfe\xde\x0e\x0d\xb4\xba\xe9\x1e\xb1\x33\x93\x29\x91\x94\x2c\x39\x3e\x01\x37\x32\x65\x33\x5a\x9b\xe4\xf8\xa4\xb3\x67\xb8\x6f\xfd\xb9\xa2\x12\xc5\x60\xc5\xdd\x55\x96\xdb\x9e\xbc\xbd\x95\xc5\xc9\xd2\xa9\xb1\x3d\xc0\x7b\x5a\xba\xf8\xcf\x16\xc5\xc9\xc8\x96\x6e\xe8\x02\xa9\xce\xf9\x9a\x2c\x3b\x0a\xf6\x16\x8f\xdc\xee\x05\xd8\xe0\x34\xe2\x2f\x57\xba\x6c\x16\xbb\x71\x52\x28\xcd\xff\x55\xd2\x52\x01\xfe\x5a\xd0\x15\x8a\x44\x60\x6e\x09\x68\x25\x30\x2c\x23\x50\xa2\x2d\x14\x4b\x49\xa5\x8c\x25\xc0\x99\x93\xba\x2c\xa9\x64\x04\xa4\xba\xa6\x82\x33\x6a\x71\xb7\xd3\x61\x90\xdc\x62\x19\x9c\x5d\x69\x55\x57\x23\xa1\xb6\x3b\x7d\x44\x6e\x7d\x4a\x3c\x24\x5b\x7a\x95\xb4\x5a\x89\x10\x32\xc4\xcc\x9f\x36\x89\x3f\x1d\xcd\xfb\xf0\xcf\x61\x79\xfc\x93\x04\xf2\x21\x98\x3f\x6c\x90\x1b\x0d\x69\xe1\x5d\x3e\x10\xf7\x5d\x2a\xdf\x36\xb1\xbd\x9d\x1c\xdb\xd0\xd2\x84\xe5\xd0\x8a\x36\x6d\xad\x5f\xcf\x65\x55\xdb\xd8\x24\xb2\x02\xb3\xbf\x57\x6a\xdd\x0a\xfd\x97\x49\xcc\x0d\xb7\x59\x41\x40\xd2\x12\x9b\x3c\x4c\xb6\x1e\xff\x1c\x34\x31\x83\xa1\x13\xe0\x3f\xb1\xee\x63\xa5\x93\x3f\xdf\xbb\x36\x08\x3e\x00\x64\x6d\xf7\x80\xc5\xc4\x53\x4f\xc9\x0b\x8c\x57\xd2\x57\x2c\xb9\x67\x7a\xd8\xe5\x0e\xcf\x35\xbf\x2a\xac\x44\x63\xee\x03\xeb\x69\x2a\x64\xd5\xfa\x9a\xaf\x4c\xce\x3b\x3e\xf6\xae\x56\xba\x20\x6b\xf7\x78\x24\x50\x72\x99\x92\x23\x02\x25\x5d\xa7\xe4\xe4\xcd\x1b\x02\xc6\x62\x95\x92\x63\xd2\xeb\x84\x51\xa7\xd0\xdc\x3a\x3a\x4e\xc5\x3c\x94\x46\x37\x01\xd7\x54\xd4\x98\x92\xf6\xf1\xd6\x27\x81\x3c\x84\xf5\xa3\x10\x8c\xcf\xdd\x91\xd9\x3e\xa0\x97\xef\xce\xe7\x27\x53\x23\x9b\x0f\xc9\x4b\x67\xfc\xa5\xb2\xe8\x95\x0b\x74\xb9\xe1\x54\x1e\xef\xd0\xf7\x9b\x12\x4a\x1f\x5e\x22\x9b\x17\x3e\x78\x32\x64\xae\x34\xa2\x9c\x0f\x9a\x77\xc1\xfc\x4b\xc5\x26\xaa\x17\xc0\x09\x17\x8f\x44\xc7\x0b\xf6\x5c\xe0\x59\x89\x7a\xc6\x8f\x8a\xe7\xde\xfa\x4b\x45\x27\x68\x17\x1f\x68\x6e\xfc\x48\x70\x9c\x5a\x7b\xf5\xc4\xfb\x54\xf0\xed\x37\xcb\x9d\xae\x9e\x84\xc1\x1b\xe7\x66\x3e\x08\x3f\x05\xf3\x2f\x95\xc2\xa8\x5e\xc0\x30\x5c\x7c\x33\x87\x4d\xc2\xf7\x07\x41\x5f\x19\x1f\xb1\xac\x50\x53\x5b\xeb\xff\x81\xc6\xcc\x79\x4c\xec\xd6\xe5\x7c\x64\xfa\xc3\x41\xcf\xd5\x4b\xa5\xf4\xae\xaa\x5f\xf7\x85\x61\x47\x56\x76\x77\xd1\x3e\x2b\xdf\x19\x64\x2a\x19\xbc\xee\xd0\x7c\x91\xe7\x98\xd9\x03\x78\x2d\x11\x5e\x0b\x94\x70\x67\xee\x0f\x6e\xec\x01\x1c\x1d\xcc\xcf\x39\x7a\x7f\xf3\xc1\x7d\x11\xed\xef\x1d\xd1\x06\x05\x66\xd6\x53\xd9\x68\x10\x18\x1b\x28\xd2\x85\x18\xc2\xa6\x29\xf6\x37\x1b\xf0\x75\x02\xaf\x82\xbd\xc1\xaf\xb5\xdb\x34\x3f\xa4\x4b\x1b\xb0\xaa\x2c\x57\xb2\xcb\x7b\xb4\x7c\x7b\x4b\xb6\x3f\x11\xc5\x7b\xb1\x16\x2e\x9a\x15\x31\x72\x64\x29\x69\x46\xa4\x45\x77\xd9\x64\xab\xdd\xed\x7f\x87\x0d\x0e\x27\x1d\xf5\x9e\x12\xe8\x9d\x61\x11\x9c\xef\xff\x07\xe2\x5c\x50\x53\x24\x02\xe5\x95\x2d\xe6\x2b\x8e\xdf\x9d\x17\x60\xb5\xa6\x4e\xe9\x3d\x2c\x92\x6e\xdb\xb7\xb8\xb6\xdb\xae\x3f\xda\xe2\xfb\xca\x85\x92\xea\xdf\x8b\x04\x1f\x3d\x8b\x6f\x46\x56\x53\x69\xb8\x4b\xcf\xec\x34\x7c\x6c\x5d\x3d\x2f\x24\x46\x51\xd8\xa1\x5d\xe0\x61\xc7\x44\x03\x85\xf9\x6e\xcf\xea\xa1\x4e\x42\x7e\x36\x4a\x70\x36\xfa\x8a\x69\xd7\xa6\xe9\x8c\x8d\x65\xa4\x64\x89\xca\x73\x83\x36\x39\x9d\x92\x8e\xf8\xc6\xd2\xbf\x2e\x40\xc9\x48\xcc\x8c\xa9\x57\x25\xdf\xe6\x66\x65\x25\xac\xac\x4c\x4c\x9d\x65\x68\x0c\x69\x3b\x3e\xf9\xb5\xaa\xc4\x97\x80\x59\xff\x55\xe5\xa8\xc7\x6f\x96\xff\x6c\xe1\xd4\x99\xf4\xaa\x6e\x70\xab\x73\xb9\xf3\x85\xe9\x76\xf4\x5f\x00\x00\x00\xff\xff\xc9\x2b\x92\x89\x2c\x1e\x00\x00"

func templatesViewsLightHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLightHtml,
		"templates/views/light.html",
	)
}

func templatesViewsLightHtml() (*asset, error) {
	bytes, err := templatesViewsLightHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/light.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"templates/views/light.html": templatesViewsLightHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
			"light.html": &bintree{templatesViewsLightHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
