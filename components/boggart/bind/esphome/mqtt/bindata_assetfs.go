// Code generated by go-bindata.
// sources:
// templates/views/dump.html
// templates/views/index.html
// templates/views/light.html
// DO NOT EDIT!

package mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDumpHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdf\xcb\xdb\x36\x14\x7d\xcf\x5f\x71\x27\x0a\xb6\xa1\x95\x57\xf6\x32\xbe\x2f\xf6\x4b\x29\x94\xf1\x8d\xc1\xb2\x3d\x8d\x3d\xc8\xd2\x8d\xad\xd4\x91\x84\x74\x93\xd4\x78\xfe\xdf\x87\x7f\x25\x8e\x9b\x42\x29\x9f\x9e\x6c\xe9\xe8\x1c\x9d\xeb\x73\xe5\xb6\x05\x85\x7b\x6d\x10\x98\xb4\x86\xd0\x10\x83\xae\xdb\x00\x00\x6c\x03\x35\x35\x02\x35\x0e\x33\x46\xf8\x85\x52\x19\x02\xcb\x87\xb5\x7e\x14\x56\x35\xd0\x42\x21\xe4\xe7\xd2\xdb\x93\x51\x4f\x60\xac\x41\xf8\x49\x1f\x9d\xf5\x24\x0c\xc1\x44\x94\x0e\x4c\xf9\x66\x7c\x73\x1e\x61\x98\xc8\x98\x13\x4a\x69\x53\x3e\xc1\xcf\xcf\x0c\x64\x2d\x42\xc8\x58\x30\xda\x39\x24\x96\x6f\xa5\x55\x38\xcf\x1e\x82\x35\x0c\xb4\x9a\x9e\xf2\xb6\x05\xae\x4e\x47\xf7\x9f\x17\x17\xe8\xba\x6d\xda\x83\xf3\x6d\xea\x3c\xe6\x9b\xb6\x05\x34\xaa\xf7\xb1\x59\xf8\xab\x50\xa8\xab\xb9\xb6\x85\x40\x82\xb4\xfc\xf4\xd7\xef\x2f\x10\x8f\xcf\x7f\xff\xf9\x02\x2c\x55\x22\x54\x85\x15\x5e\xa5\x22\x04\xa4\x90\x9e\xd1\x28\xeb\x43\x5a\xe9\xb2\xaa\x75\x59\xd1\x21\xf4\xa5\x48\xc9\x1e\xad\xf7\xf6\xc2\x8f\xda\xf0\xbe\x36\xb0\x17\x75\xc0\xe4\x3b\x34\x0a\x5b\x96\xc2\xd3\xbd\x42\x2a\x6b\xed\x06\x65\x3e\x29\xdc\x26\x1e\x48\x3c\x76\x79\x08\xaf\xe6\xf1\xb0\x78\xe5\x4e\xc8\xcf\xc3\x29\x0e\xaf\xec\xf3\xb0\xb6\x79\x2f\x30\x45\x51\x7a\xed\x68\xca\xa2\x70\xae\xd6\x52\x90\xb6\x26\x3d\x88\xb3\x18\x17\x17\xc9\x3c\x0b\x0f\xb2\xd8\x9d\xa4\xc4\x10\x20\x83\xfd\xc9\xc8\x1e\x1d\x63\x02\xed\x15\xd5\x0f\xe4\xb2\x46\xe1\x77\x58\xe3\x88\x48\x9e\xef\xd6\xdf\xc4\xc8\xc9\xeb\xb2\x44\x9f\x70\xb2\xb6\x26\xed\xe2\x7b\x8a\x7e\x90\xa6\x1a\x9f\x20\x6a\x5b\xd0\xef\x7f\x35\xc0\x3e\x58\xb3\xd7\x25\x48\xeb\x34\x2a\x06\x1c\xba\x2e\xba\xdb\xd5\xdd\xe8\xa2\x50\xd9\x4b\xb4\x10\xee\x9e\x37\x2b\x2b\x1f\xbd\xb7\xfe\x87\x8d\x2c\xf9\xde\xc4\xca\xca\xd3\x11\x0d\x25\xdc\xa3\x50\x4d\x3c\x73\x42\xbc\xe6\xac\xea\x43\xe0\xda\x68\xfa\x34\xa7\x40\x9b\xf2\x0f\xf3\x62\x85\xea\xe9\xef\xb0\x7a\x1f\x7f\x98\xbf\xe2\x6f\x3b\xae\xc3\xee\xe4\xfa\x5b\x00\x55\x9c\xac\x79\xc7\x73\x44\x7c\xea\xf4\x28\xe1\x28\x64\x75\x3d\x48\x9c\x7c\x0d\x1f\xb7\x50\xa5\x43\xc2\x9d\x47\x87\x46\xc5\xd1\xb6\x38\x11\x59\x33\x5f\x11\x05\x19\x06\x4a\x90\x78\xe7\x6a\x21\xb1\xf7\x98\xb1\xc2\x12\xd9\xe3\x34\x7f\xcd\xd9\x3b\x31\x28\x65\x4c\x5a\xd7\xb0\x7c\xab\x8f\xe5\xcc\xd2\x63\x5c\xc3\xe0\xa2\x15\x55\x19\x7b\xff\x0b\x83\xe0\x65\xf6\x5d\x51\xd6\x47\x51\xe2\x18\x67\xd7\xf0\x70\x2e\x19\x88\x9a\x32\xb6\x88\x85\x6b\x80\x2c\x5c\x77\x8d\xd1\x60\xf9\x36\x1d\xbd\xe4\xd1\x2a\x80\x63\x56\x56\xc5\xbe\x05\x03\x32\x30\x78\x81\x45\xe9\x6f\x75\x85\x7f\x1e\x9a\xfe\x37\x7a\xfb\xe0\x7b\xf4\x83\x84\x2f\x91\x9e\x6e\x29\x9b\x93\xff\x0d\x7c\x3f\x3c\xd2\xc9\x1b\x98\x90\xdc\xe0\x17\xfa\x58\x0f\xb5\xdf\xe9\xa2\xd6\xa6\xfc\xda\xce\x60\xe9\xa1\xc9\xf5\x9c\x2c\xb8\x35\x71\x14\xc6\x46\x8e\xde\xde\x9a\xfa\xdb\x60\xec\x5b\x65\x80\x0e\x4d\xb3\x02\xde\x74\x67\xbd\x6d\x3a\x5e\x1f\x8b\xbf\xc6\xff\x01\x00\x00\xff\xff\x6a\x0e\x45\xc4\x14\x07\x00\x00"

func templatesViewsDumpHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDumpHtml,
		"templates/views/dump.html",
	)
}

func templatesViewsDumpHtml() (*asset, error) {
	bytes, err := templatesViewsDumpHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/dump.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xb0\xd9\xb5\x0d\xac\xa9\x66\xef\xe5\x90\xda\x3d\xec\x25\x2d\x36\x87\x76\xb3\x68\xb2\xb8\x87\xc3\x61\x41\x89\x63\x89\xae\x44\x32\x24\x6d\xc7\x30\xfc\xdd\x0f\x12\x2d\x4b\xfe\x2f\xb9\xc9\x75\xf5\x90\xd0\xd4\xfc\xe1\xcc\xfc\x66\x34\x1a\x2d\x16\xc0\x71\x24\x24\x02\x89\x94\x74\x28\x1d\x81\xe5\xf2\xe2\x62\xb1\x00\x31\x02\x1a\xa9\x4c\x2b\x89\xd2\xd9\x7c\x77\xc0\xc5\x14\xa2\x94\x59\x3b\x24\x46\xcd\xc8\xfb\x0b\x00\x80\xfa\x6e\xa4\xd2\x7e\xc6\xfb\x57\x3f\x43\xbe\xb2\x59\xb9\x7a\xb6\xfd\xab\x9f\x57\xf4\xdb\x3c\xcf\x7f\x6a\x26\x31\xad\xdd\xdd\xa5\x28\xcf\xb6\x49\x53\xd0\x39\x16\xa6\x58\x52\xfa\x1f\xc5\xdf\xbe\x75\x46\x68\xe4\xc0\x99\x63\x7e\x9f\xbb\xbe\x41\xab\x95\xb4\x62\x8a\x20\xd5\xcc\x30\x4d\xc0\xba\x79\x8a\x43\x32\x13\xdc\x25\xd7\x57\x6f\xdf\xfe\xb0\x47\x8b\xd7\x94\x20\xe3\xfb\xef\xf9\xfb\xe6\xf0\xcd\x95\x80\xf7\xb9\x5f\xaf\xfe\x2e\x81\xdc\xdd\x12\xa0\xb0\x5c\x0e\x02\x97\xb4\x60\x7b\x9c\x6b\x3c\x8b\xf1\x86\x39\x8c\x95\x99\x9f\xc5\xfc\x1b\xcb\xce\xd3\xfa\xe0\x98\x3b\x8f\xf3\x97\xc8\x09\x25\x6d\x13\xde\x41\x70\xc8\xf3\x39\xdf\xc1\x98\x0d\x5c\xa8\xf8\xfc\xb0\xd8\xc5\x02\x0c\x93\x31\xc2\xe5\x3a\x0b\xe0\x7a\xb8\x9d\x13\x87\x8d\x31\x3e\x87\xbe\x0a\xc9\xef\x2c\x10\x21\xa7\x2c\x15\x9c\xd4\xc4\xd1\xc2\x3d\xb0\x5c\x96\xf0\xe5\xb9\x3e\x43\x16\x0b\x40\xc9\x61\xb9\x3c\xe5\x2f\x9e\xfb\xab\x26\xef\xee\xd6\x3b\xeb\x08\x4a\xf7\x33\xe6\xb0\x3a\x93\xf5\x83\x74\xc2\xcd\x4b\x78\x9d\x29\x24\x07\x58\x63\xd6\xa3\x04\xe0\x23\x27\x46\x80\x4f\xdb\x16\xd2\x07\x67\x84\x8c\x81\xa4\x22\x4e\x7c\xa1\x3b\x25\x6a\xc0\x20\x31\x38\x1a\x92\x31\x9b\x32\x1b\x19\xa1\xdd\xf5\x54\x09\xde\x7d\xdb\x23\x65\xd4\x42\x27\x21\x74\xb2\x6f\x27\x51\x84\xd6\x16\x6b\x11\x29\xbf\xf9\x6c\x49\x51\x81\xfa\x4e\xc5\x71\x5e\x67\x32\xc5\x59\x5a\xee\x31\x13\xa3\x1b\x92\x37\xf5\xcd\x62\xdd\x77\xc2\xe5\xd4\x37\x6b\xe8\x19\x36\x03\x5b\xe0\xe5\xcd\x9e\xa0\x6f\xf0\x4e\x4c\x3a\xcc\x41\x74\x49\xbf\xe0\xd3\x04\xad\xa3\x7f\x7c\xf9\x44\x7f\x67\x2e\x81\xe5\xf2\x1f\xac\xc8\xac\x61\x21\xeb\x47\xc1\x87\xfb\xa4\x9d\xf6\x71\xe1\x1c\x51\xba\x20\x4e\xe7\x3a\x29\x6c\x5e\xaf\xfa\x96\x4d\x91\x13\x58\x19\x52\x95\x84\x44\xcd\x2a\x63\x08\x5c\x16\xfa\x06\x81\x38\xad\x73\x10\xb0\x46\xc1\xf7\xc9\x73\xd1\x84\x74\x3b\x19\x3f\x2a\x93\x31\x77\x0a\x19\x8d\x70\x5a\x83\x47\x3f\x36\x6a\xa2\xc1\xe1\xb3\xeb\x1b\x8f\x3d\xa3\x72\xaf\x14\xfb\x0d\xbc\xfd\xd7\x81\x61\xa4\xe4\x48\xc4\x2f\x84\x41\x2f\xec\x7b\x81\xd0\x6b\x6f\x8f\xc0\x86\xf5\x47\x19\xe8\xca\xfa\xd3\x83\xde\xa8\x2c\x63\x92\x3f\x2a\x2d\xa2\x75\x2d\x22\x3d\xe8\x6e\x96\xaa\xbb\x5b\xb8\xa4\xff\x14\x92\xd3\x9b\xe2\x84\xf4\xee\xf7\x5f\x38\x37\x68\xed\x03\x4a\xab\xcc\xdd\x6d\xaf\x49\xe9\xaa\x4e\xd2\xe4\x14\x0d\x05\xc2\xcb\x96\xd7\xfa\xb5\xc6\xf8\x69\xd4\xac\xb4\x1e\x02\xce\x76\x46\x08\x39\x52\x3b\xe9\xd0\x0c\x5d\x1b\x07\x3c\x8a\x34\x9c\x63\x5f\x69\x94\xbb\x60\xbb\x45\xc7\x44\x6a\x5b\x01\x6d\x43\x6f\x93\xb2\x57\x5e\x2d\xca\x5f\x8d\x45\x8c\x4a\xc8\x7d\x46\xc7\x8a\x52\x38\xb1\xf4\xce\xfa\xc5\xbd\x4c\xf3\x37\x84\x96\xf1\xac\xb2\xe0\x24\x54\x76\x52\x60\x83\xc6\xce\x84\x8b\x12\xd2\x18\xf4\xbb\x87\xc0\x27\xe8\x6a\x23\xa4\x1b\x01\xf9\x61\xba\xdb\x82\xf9\xaa\xdf\x03\x72\xff\xf1\x63\x6b\xdc\x96\x57\x1b\xfc\xe6\x09\x78\x00\xbd\x3f\x46\x19\x1f\xde\xff\xb6\x03\xe2\x19\x33\x32\x77\xc7\xb7\xe3\x78\x7d\xe0\xa3\x78\xd6\x29\x9b\xef\x62\xf9\x71\x62\x24\x28\x79\x36\x96\xd7\xba\xdb\x60\xba\xbc\x72\x6c\xa7\xb6\x35\x10\xd7\x3a\x5f\x32\x40\x39\x50\xbe\x73\x84\xac\x53\x7a\xcf\xa3\xad\xc8\x16\x50\xa3\xd1\xf7\x0b\x92\x2f\x40\xaf\xcb\xd5\x8e\xa3\x65\x59\xf4\x65\x83\x49\xde\xa0\x2c\xbe\xde\xd3\x1b\xea\xa0\x4d\x9c\xd3\xd7\x41\xb0\xa7\x67\x85\xe5\x32\x68\xf6\xcc\x83\xb2\xd3\xfb\x33\x4c\x99\xfc\xda\x12\x99\xc7\xd1\x18\xa7\x2a\xc4\x5d\x38\xde\x6b\x94\xf0\x6f\x0c\xc1\xa2\x99\xa2\x39\x0b\x93\x8d\x71\xd8\xae\xf7\x6f\x41\xba\xa7\x89\xca\x63\xfb\x19\xad\x65\x31\xd2\xf3\x7a\xa9\xc6\xf5\x88\x63\x8a\x87\xdf\xd5\xb6\x23\xef\x87\x08\xdf\x50\x85\x8e\xc7\xd9\x19\x66\x93\xdd\x38\x7f\xc1\x4c\x4d\xdb\xbd\xce\x41\xfb\x57\xba\xe3\xa2\x8e\xbd\x94\x1d\x1e\x12\x9d\xd6\x30\x08\x0e\x8c\x8a\x06\x41\x31\x58\xdc\x9a\x5c\x06\x5c\x4c\x6b\xa3\xce\xea\xe7\x6a\xb9\xfa\x57\x43\xe0\xe6\xb2\x1c\xc8\x26\xc8\xf8\xba\x1b\x59\x2c\x8a\x17\x66\x11\xfd\xfa\xf8\xf9\x13\x74\xfd\xfa\x8f\x2f\x9f\x80\x04\x9c\xd9\x24\x54\xcc\xf0\x80\x59\x8b\xce\x06\x53\x94\x5c\x19\x1b\x24\x22\x4e\x8a\x06\x6b\x6c\x83\xc8\xda\xc0\xa9\x4c\x19\xa3\x66\x34\x13\x92\x46\xd6\x12\x18\xb1\xd4\x62\xaf\x81\x8e\x50\xc5\x31\x33\x6e\x53\x43\x10\xa5\x42\x17\x9a\xe9\x4a\x43\xb5\xd1\x5e\xc5\x41\x33\xd6\x03\x5c\x4b\x25\xba\x7e\xe8\x55\xe5\xbb\x8f\x7e\x37\x54\xca\x59\x67\x98\x7e\x45\xad\xd5\xe0\xb8\x3c\x40\xb5\x73\xfc\x00\xfb\x83\x3b\xb6\x2f\x16\xda\x71\xed\x27\xd5\x2c\xfa\x5a\x9c\x62\xfc\xc2\xe1\x1d\x6f\x47\xb7\x95\x82\x86\x6e\xce\xb5\x8c\x9f\x26\x68\xe6\xb4\x16\xdf\xd7\xd2\x96\x47\x72\x7c\x04\x49\xaf\xa2\xb3\x82\xcd\x96\xee\x1a\x9e\xfe\x0f\xca\x57\xb6\x1f\x04\xf1\xa6\x7a\x5f\xbe\xfc\xe0\x09\xdc\x5c\xe3\x90\x30\xad\x53\x11\xb1\xfc\x01\x15\x54\x53\xa9\xda\x63\x66\xca\x0c\x44\xe1\xc3\x6a\x1a\x35\x84\xd1\x44\x16\x8f\xb3\x2e\xf6\x60\xb1\x51\x31\x91\x46\x29\x32\xf3\x80\x29\x7a\x8a\xde\xbb\x8d\xfb\x97\x5d\xa4\xce\x88\x38\x46\xd3\xa3\x4e\xa9\xd4\x09\xdd\x5d\xec\x54\xe3\xe2\x91\x74\x0d\x9d\xea\x9b\x87\x9f\x55\x45\x4a\x0b\xe4\xfe\x4b\x42\x67\x83\x6b\x59\x89\xeb\xd8\x44\xcd\x3a\x35\xc5\xcb\x77\x17\x5b\xa6\x7c\x30\x46\x99\xb3\x0d\xa9\xcb\xbb\xec\x72\x15\x4d\x32\x94\xae\x47\x0d\x32\x3e\xef\x96\x32\xa1\xbb\x2d\x33\x49\xc7\x96\x0a\x29\xdc\xaf\x65\x8e\x0b\x19\xdf\xcb\x4f\x8a\xf1\x5c\xfc\x06\xad\x18\x75\x6f\xca\x1c\xfd\xd7\x03\x15\xf6\x61\xa2\xb5\x32\x0e\x79\xb7\xb7\x2d\xd7\x9f\xa3\x43\xad\x14\x5a\xa3\xeb\xf4\x28\xb2\x28\x59\x1f\xa4\xdb\xdb\x25\xf7\x2c\x2e\x11\xb6\x47\xb5\x41\x8d\x92\x77\x3b\x83\x70\xe2\x9c\x92\xb5\x2e\x64\x35\x07\xd4\x29\x8b\x30\xb7\x71\x48\x42\xe5\x9c\xca\x56\xfb\xeb\x2a\xd2\x5f\xb5\x37\x24\x52\x7a\x4e\xde\x0f\x44\x16\xaf\xbf\x23\xa6\x42\xeb\x39\x81\xe2\xa3\xdc\x90\x5c\xfd\x8d\x80\x35\xd1\xb0\x51\xa1\x12\x19\x8b\xd1\x17\x2b\x3d\xa7\x76\x1a\x13\x60\xa9\xab\xb5\x2a\x37\x4a\xcf\xc1\x29\x58\x73\x79\x68\xe4\x5d\x8b\xb7\xe5\x7d\x67\x0b\x80\x1e\x2b\xef\x76\x5b\x45\x0f\x0c\x18\x82\xc4\x19\xd4\x5c\x5f\xf9\x15\xfe\xb3\xd7\xe8\xff\x76\x7e\xda\x13\x8f\xfc\xf2\x2d\xfa\x75\x85\xb2\x12\xf9\x07\xe8\xf3\xcb\xa0\xcb\xdf\xcb\x57\x94\x54\xe2\xb3\xfb\x90\x16\xbe\x7f\x10\x61\x2a\x64\xbc\x6b\x4e\x61\xd2\x5e\x23\xb7\xf7\xa2\x90\x2a\xd9\xed\xac\xc6\xca\x9d\x9f\xaa\xa4\x3e\x4c\x8c\x79\xaa\x14\xa4\x45\xd2\x1c\x76\xdd\x87\x67\xb7\xcf\x7b\x6f\x72\x48\xf4\x7d\x34\xf6\x05\xa3\x60\x6c\x75\xac\x92\x7e\xf7\x64\x1b\xf6\xfb\x01\xc3\xde\x4c\xd9\x3c\x13\x4d\x04\xc7\xed\x42\x55\x39\xb4\x74\xe4\x20\xf0\x75\xb1\xde\xee\xfd\x2f\x00\x00\xff\xff\x34\xfa\x98\x7c\x74\x1f\x00\x00"

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLightHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x9a\xdf\x6f\xdb\x36\x10\xc7\xdf\xf7\x57\x1c\x88\x62\x68\x1f\x14\x37\x09\x5a\x0c\x5b\x6c\x60\x2b\xba\xbd\x6c\x1d\xd0\x16\xd8\xa3\x41\x8b\xe7\x88\x1b\x45\xaa\x24\x9d\xb8\x0b\xf2\xbf\x0f\xfc\x21\x89\x56\xad\x5a\xe9\x2c\x23\x91\x1f\x02\x8a\x3f\xee\x8e\x5f\x7e\x8e\x54\x08\xdd\xdd\x01\xc3\x35\x97\x08\x24\x57\xd2\xa2\xb4\x04\xee\xef\xbf\x03\x00\xb8\xbb\x03\xbe\x86\x33\xd4\x5a\xe9\xba\xee\x8a\xf1\x1b\xc8\x05\x35\x66\x4e\xa8\x40\x6d\xc1\xff\xcd\x18\x95\xd7\xa8\xeb\x07\x6e\x4a\x6e\x0c\x5d\x09\x24\x0b\x3f\xcc\x0f\x5d\x6d\xac\x55\x12\xec\xe7\x0a\xe7\x24\x3c\x90\xda\x56\x2e\x94\x41\x02\x8c\x5a\x5a\x0f\x8f\x0e\x08\x50\xcd\x69\x56\x70\xc6\x50\xce\x89\xd5\x1b\x24\x8b\xef\x2d\x2f\xd1\xfc\x74\x35\x0b\x66\x16\x75\xbc\x9d\x60\x67\x8c\xdf\x34\x6d\x28\x99\x6b\x48\xa7\x96\xab\xb2\x52\x12\xa5\x4d\xa6\xfc\xcc\x58\x6a\x11\x7e\x9c\x27\xcd\x67\x1f\x7c\xdd\x1e\x0d\xb4\xba\x4d\xa7\x98\xb4\xe4\x4a\x64\x25\xcb\xce\x2f\xc0\x95\x4c\x59\x97\xb6\x26\x3b\xbf\x48\xc6\x74\xc7\x6d\x97\x15\x95\x28\x3a\x3d\xbe\xec\x65\xb9\xdd\x91\x77\xa7\x67\x71\xb1\x70\x6a\xb4\x13\x78\x47\x4b\x17\xff\xd5\xac\xb8\xe8\x19\x92\x86\x2e\x90\xea\x35\xdf\x92\x45\xa2\xe0\x4e\xe7\x9e\xea\x9d\x00\x6b\x9c\x7a\xfc\xad\x95\x2e\xeb\xce\xae\x9c\x15\x4a\xf3\x7f\x95\xb4\x54\x80\x7f\x16\x74\x85\x22\x13\xb8\xb6\x04\xb4\x12\x18\xba\x11\x28\xd1\x16\x8a\xcd\x49\xa5\x8c\x25\xc0\x99\x93\xba\x2c\xa9\x64\x04\xa4\xba\xa1\x82\x33\x6a\x71\xbf\xd3\x6e\x90\xdc\x62\x19\x9c\x5d\x6b\xb5\xa9\x7a\x42\x6d\x46\xfa\x88\x5c\xff\x39\xf1\x90\xb4\xf4\x2a\x69\xb5\x12\x21\x64\x88\x2b\x7f\x59\x2f\xfc\x65\xef\xba\x77\x7f\x0e\xcb\xf3\x1f\x24\x90\x0f\xc1\xfc\x59\x8d\x5c\x6f\x48\x33\xef\xf2\x40\xdc\x5f\x52\xf9\xba\x8e\xed\xf5\xe0\xd8\xba\x96\x06\x74\x87\x46\xb4\x61\x7d\x7d\x7f\x2e\xab\x8d\x8d\x9b\x44\x5e\x60\xfe\xcf\x4a\x6d\x1b\xa1\xff\x36\x99\xb9\xe5\x36\x2f\x08\x48\x5a\x62\xbd\x0e\x83\xad\xc7\x9f\x83\x26\xae\x60\xd8\x09\xf0\x53\xcc\xfb\x98\xe9\xe4\xcf\x77\x6e\x1b\x04\x1f\x00\xb2\x66\xf7\x80\xd9\xc0\x59\x0f\x59\x17\xe8\xcf\xa4\x07\x74\x39\xd0\x1c\xe7\x67\xaa\x42\x95\xb8\x2c\x3f\x59\xbb\xe4\x66\x49\x85\x50\xb7\x4b\xc1\xaf\x0b\xbb\xf4\xf3\x5e\xae\x39\x0a\x96\xee\x18\x6f\x94\x50\xfa\x0f\xc5\xd0\xb8\x93\x41\x28\x9d\x95\x8a\x21\x81\xaf\x21\x79\x9c\xdc\x4a\xbd\x1d\x39\xc1\x20\x4d\x32\x3f\x43\x08\x7e\x1e\x5d\xa6\x19\x14\x98\xdb\xb8\xbd\xb5\x7a\x04\xea\xf7\x28\xe4\x95\x8e\x32\x41\x18\x3c\xc4\x4f\x14\x44\xbb\xe3\x1b\x9e\x39\x8b\x9d\x93\x2f\xc1\xe0\x80\x42\x4d\xe8\xaa\xb2\x5c\x49\xb8\xa1\x62\x83\x73\xe2\x8e\x54\x6f\xf7\xfe\x9e\xb4\xc9\xe6\x6b\x9e\x57\x8a\x4b\x8b\xba\xce\xbd\xc6\xd7\x0b\x97\x6a\x61\x12\xe8\x52\x35\x96\x48\x93\x87\x8b\x7a\x11\x83\xa1\x67\xfe\x68\x0b\x7e\x07\xcf\x39\xbe\x0f\x1c\x9c\xce\x2c\xb8\x1f\x39\x49\x0f\x44\x73\x94\x34\x5e\x69\xd7\x53\xa2\x31\xa7\x48\xe3\xd4\xdb\x58\xe7\xe4\x2f\x89\x8f\x47\x97\xc2\xe9\x49\xe6\x13\x8c\x40\xc9\xe5\x9c\xbc\x24\x50\xd2\xed\x9c\x5c\xbc\x7a\x45\xc0\x58\xac\xe6\xe4\x7c\x6f\x1e\x87\xb7\x9b\x44\xc7\xa1\xe7\x5c\xd8\x25\xd2\x05\x68\x93\xb1\x93\x73\xad\x82\x2e\x41\x0f\x9d\x6f\x4f\x02\x73\x8d\xec\x14\x7c\x7b\x37\x63\x81\xfd\xde\x19\x9f\x2a\xd1\x5e\xb9\xc0\xa8\x2b\x0e\xa5\xba\x97\x61\xbf\xf8\x67\xef\x91\x4d\x06\xe1\x6b\x8d\x28\x4f\x01\x71\x74\x34\x16\xc6\xbf\x05\xf3\x53\x05\x39\xaa\x17\x50\x0e\x0f\x47\x82\xd9\x0b\x37\x19\x9c\x57\x62\x73\x92\xff\x1c\x82\x9f\xd1\x5e\x36\xbc\xf5\xa9\xb2\x1c\xb4\x8b\x6f\x0e\xae\x7c\x24\x92\x9d\x6a\x93\x01\xf9\xb6\xe0\xf6\x24\x24\x47\x47\x63\xa1\xfc\x57\x30\x3f\x55\x96\xa3\x7a\x01\xe6\xf0\x70\x24\x9a\xbd\x70\x93\xc1\x39\x57\x82\x65\x27\x63\x3a\xf5\x36\x16\xd8\x6f\x94\x60\x70\x3b\x6d\xba\x53\x1d\x9b\xfb\xa0\xba\xe6\x48\x9c\x3b\x1d\x27\xc7\xba\xd2\x99\xc5\xb2\x42\x4d\xed\x46\x9f\xf0\x2a\x73\xc7\xe9\x88\xe4\x2b\x0d\x3b\xae\x26\x9c\x00\x1d\x55\x1f\x76\x31\xb2\x67\x55\xbe\x9e\x0e\x1f\xdb\xae\x8f\x27\x1f\x24\xc2\x73\x81\x32\xe5\xfd\xed\x7a\x8d\xb9\xfd\x9d\x1b\xfb\x02\x5e\x8e\x4f\x37\x7a\x77\xe3\x21\xfd\x36\xda\x7f\x74\x1c\x27\x97\xf3\xb5\x06\x81\xac\x8e\x22\xdf\x78\x29\xdf\x5e\xc8\x07\x7b\x9d\x2b\xf9\x76\x95\xff\xc7\x95\x7c\xb4\xbc\x73\x29\x1f\xeb\xba\xd7\xf2\xc1\xdf\x03\xee\xe4\xa3\x9d\x87\xdd\xca\x3f\xb5\x1b\xf9\xe3\xa4\xd0\x5a\x50\x53\x64\x02\xe5\xb5\x2d\xc6\x4b\xa4\x5f\x9d\x17\x60\x1b\x4d\xdd\x5a\x3c\xc2\x84\x4a\x0f\x06\x8b\x5b\xdb\x9e\x0b\xbd\x87\xc0\xae\x72\x21\xfd\x76\xeb\x22\xed\x2f\x47\xde\xaf\x8f\x03\x82\xd5\x54\x1a\xee\x96\x67\x74\x1a\x3e\x36\xae\x9e\x16\x12\xbd\x28\xec\xd1\x2e\xf0\xb0\xa7\xa1\x86\xc2\x9c\x90\x0a\x21\x97\x46\x09\xce\x7a\xbf\xa7\xd9\x37\x68\x38\x45\x7d\x9a\x97\x2c\x53\xeb\xb5\x41\x9b\x5d\x0e\x11\x3c\x7e\x9e\xe5\xbf\x8d\x40\xc9\x48\xd4\xde\x6c\x56\x25\x6f\xd5\x5f\x59\x09\x2b\x2b\x33\xb3\xc9\x73\x34\x86\x34\xbb\x3e\xf9\xb9\xaa\xc4\xe7\x00\xd2\xee\x77\x59\xdf\xaa\x60\x7f\xf3\xd5\xcc\xa9\x33\xe8\xbb\xa4\x4e\x55\xf2\xb8\xf7\xeb\xb0\xb6\xf4\x5f\x00\x00\x00\xff\xff\x5e\x48\x86\xfa\x19\x27\x00\x00"

func templatesViewsLightHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLightHtml,
		"templates/views/light.html",
	)
}

func templatesViewsLightHtml() (*asset, error) {
	bytes, err := templatesViewsLightHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/light.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/dump.html":  templatesViewsDumpHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
	"templates/views/light.html": templatesViewsLightHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"dump.html":  &bintree{templatesViewsDumpHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
			"light.html": &bintree{templatesViewsLightHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
