// Code generated by go-bindata.
// sources:
// templates/views/config.html
// templates/views/index.html
// templates/views/light.html
// DO NOT EDIT!

package mqtt

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsConfigHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdf\xcb\xdb\x36\x14\x7d\xcf\x5f\x71\x27\x0a\xb6\xa1\x95\x57\xf6\x32\xbe\x2f\xf6\x4b\x29\x94\xf1\x8d\xc1\xb2\x3d\x8d\x3d\xc8\xd2\x8d\xad\xd4\x91\x84\x74\x93\x34\x78\xf9\xdf\x87\xfc\x23\x71\xdc\x14\x4a\xf9\xf4\xa4\x48\x47\xe7\xe8\x5c\x9f\xab\x74\x1d\x28\xdc\x6a\x83\xc0\xa4\x35\x84\x86\x18\x5c\x2e\x2b\x00\x80\x75\xa0\x73\x8b\x40\x67\x87\x05\x23\xfc\x42\xb9\x0c\x81\x95\xfd\x5e\x1c\x95\x55\x67\xe8\xa0\x12\xf2\x73\xed\xed\xc1\xa8\x27\x30\xd6\x20\xfc\xa4\xf7\xce\x7a\x12\x86\x60\x24\xca\x7b\xa6\x72\x35\xfc\x72\x1e\xa1\x5f\x28\x98\x13\x4a\x69\x53\x3f\xc1\xcf\xcf\x0c\x64\x2b\x42\x28\x58\x30\xda\x39\x24\x56\xae\xa5\x55\x38\xad\xee\x82\x35\x0c\xb4\x1a\x67\x65\xd7\x01\x8f\xb3\xff\xbc\x38\xc1\xe5\xb2\xce\x23\xb8\x5c\xe7\xce\x63\xb9\xea\x3a\x40\xa3\xa2\x8f\xd5\xcc\x5f\x83\x42\x5d\xcd\x75\x1d\x04\x12\xa4\xe5\xa7\xbf\x7e\x7f\x81\x74\x98\xff\xfd\xe7\x0b\xb0\x5c\x89\xd0\x54\x56\x78\x95\x8b\x10\x90\x42\x7e\x44\xa3\xac\x0f\x79\xa3\xeb\xa6\xd5\x75\x43\xbb\x10\x4b\x91\x93\xdd\x5b\xef\xed\x89\xef\xb5\xe1\xb1\x36\xb0\x15\x6d\xc0\xec\x3b\x34\x2a\x5b\xd7\xc2\xd3\xbd\x42\x2e\x5b\xed\x7a\x65\x3e\x2a\xdc\x16\x1e\x48\x3c\x76\xb9\x0b\xaf\xe6\x71\x37\xfb\xc9\x9d\x90\x9f\xfb\x5b\xec\x5e\xd9\xe7\x6e\x69\xf3\x5e\x60\x8c\xa2\xf4\xda\xd1\x98\x45\xe1\x5c\xab\xa5\x20\x6d\x4d\xbe\x13\x47\x31\x6c\xce\x92\x79\x14\x1e\x64\xb5\x39\x48\x89\x21\x40\x01\xdb\x83\x91\x11\x9d\x62\x06\xdd\x15\x15\x07\x72\xd9\xa2\xf0\x1b\x6c\x71\x40\x64\xcf\x77\xfb\x6f\x52\xe4\xe4\x75\x5d\xa3\xcf\x38\x59\xdb\x92\x76\xe9\x3d\x45\x1c\xa4\xa9\xc5\x27\x48\xba\x0e\xf4\xfb\x5f\x0d\xb0\x0f\xd6\x6c\x75\x0d\xd2\x3a\x8d\x8a\x01\x87\xcb\x25\xb9\x3b\x75\xb9\xd1\x25\xa1\xb1\xa7\x64\x26\x7c\x79\x5e\x2d\xac\x7c\xf4\xde\xfa\x1f\x36\x32\xe7\x7b\x93\x2a\x2b\x0f\x7b\x34\x94\x71\x8f\x42\x9d\xd3\x89\x13\xd2\x25\x67\xd3\xee\x02\xd7\x46\xd3\xa7\x29\x05\xda\xd4\x7f\x98\x17\x2b\x54\xa4\xbf\xc3\xea\x6d\xfa\x61\xfa\x8a\xbf\x6d\xb8\x0e\x9b\x83\x8b\xaf\x00\xaa\x34\x5b\xf2\x0e\xf7\x48\xf8\xd8\xe9\x49\xc6\x51\xc8\xe6\x7a\x91\x34\xfb\x1a\x3e\x1c\xa1\x46\x87\x8c\x3b\x8f\x0e\x8d\x4a\x93\x75\x75\x20\xb2\x66\x7a\x22\x2a\x32\x0c\x94\x20\xf1\xce\xb5\x42\x62\xf4\x58\xb0\xca\x12\xd9\xfd\xb8\x7e\xcd\xd9\x3b\xd1\x2b\x15\x4c\x5a\x77\x66\xe5\x5a\xef\xeb\x89\x25\x62\xdc\x99\xc1\x49\x2b\x6a\x0a\xf6\xfe\x17\x06\xc1\xcb\xe2\xbb\xa2\xac\xf7\xa2\xc6\x21\xce\xee\xcc\xc3\xb1\x66\x20\x5a\x2a\xd8\x2c\x16\xee\x0c\x64\xe1\x7a\x6a\x88\x06\x2b\xd7\xf9\xe0\xa5\x4c\x16\x01\x1c\xb2\xb2\x28\xf6\x2d\x18\x50\x80\xc1\x13\xcc\x4a\x7f\xab\x2b\xfc\xf3\xd0\xf4\xbf\xc9\xdb\x07\xdf\x23\x0e\x12\xbe\x46\x7a\xba\xa5\x6c\x4a\xfe\x37\xf0\x71\x78\xa4\x83\x37\x30\x22\xb9\xc1\x2f\xf4\xb1\xed\x6b\xbf\xd1\x55\xab\x4d\xfd\xb5\x9d\xde\xd2\x43\x93\xcb\x35\x59\x71\x6b\xd2\x24\x0c\x8d\x9c\xbc\xbd\x35\xf5\xb7\xc1\x18\x5b\xa5\x87\xf6\x4d\xb3\x00\xde\x74\x27\xbd\x75\x3e\x3c\x1f\xb3\x7f\x8d\xff\x03\x00\x00\xff\xff\x8b\x37\xd6\x64\x14\x07\x00\x00"

func templatesViewsConfigHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsConfigHtml,
		"templates/views/config.html",
	)
}

func templatesViewsConfigHtml() (*asset, error) {
	bytes, err := templatesViewsConfigHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/config.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xb0\xd9\xb5\x0d\xac\xa5\x66\xef\xe5\x90\xda\x39\xec\xa5\x2d\x36\x87\xb6\x59\x34\x59\xdc\xc3\xe1\xb0\xa0\xc5\xb1\x44\x57\x26\x19\x72\x6c\xc7\x30\xfc\xdd\x0f\x14\x2d\x5b\xfe\x1b\xc9\xdb\xdc\xea\xa1\xa5\xa9\xf9\x3f\xbf\x19\x52\x93\xc5\x02\x04\x0e\xa5\x42\x60\x89\x56\x84\x8a\x18\x2c\x97\x17\x17\x8b\x05\xc8\x21\x44\x89\x1e\x1b\xad\x50\x91\xf3\xbb\x3d\x21\xa7\x90\xe4\xdc\xb9\x3e\xb3\x7a\xc6\x6e\x2e\x00\x00\xaa\xbb\x89\xce\xbb\x63\xd1\xbd\xfa\x19\xfc\xca\x8d\xcb\xd5\xb3\xeb\x5e\xfd\xbc\xa2\xdf\xe5\x79\xfe\xc3\x70\x85\x79\xe5\xed\x3e\x45\x69\xdb\x36\x4d\x41\x47\x7c\x90\x63\x49\x19\x7e\x14\xff\x76\x1d\x59\x69\x50\x80\xe0\xc4\xc3\xbe\xa0\xae\x45\x67\xb4\x72\x72\x8a\xa0\xf4\xcc\x72\xc3\xc0\xd1\x3c\xc7\x3e\x9b\x49\x41\xd9\xf5\xd5\xdb\xb7\x3f\x1c\xd0\x12\x34\x65\xc8\xc5\xe1\x77\xe1\xbd\x3d\xfe\x72\x25\xe0\xc6\xc7\xf5\xea\xef\x0a\xd8\xdd\x7b\x06\x11\x2c\x97\xbd\x98\xb2\x06\x6c\x8f\x73\x83\x67\x31\xde\x72\xc2\x54\xdb\xf9\x59\xcc\x5f\xf8\xf8\x3c\xad\x0f\xc4\xe9\x3c\xce\x5f\x12\x92\x5a\xb9\x3a\xbc\xbd\xf8\x58\xe4\x3d\xdf\xd1\x9c\xf5\x68\xa0\xc5\xfc\xb8\xd8\xc5\x02\x2c\x57\x29\xc2\xe5\xba\x0a\xe0\xba\xbf\x5b\x13\xc7\x9d\xb1\xa1\x86\xbe\x49\x25\xee\x1c\x30\xa9\xa6\x3c\x97\x82\x55\xc4\x45\x45\x78\x60\xb9\x2c\xe1\x2b\xbc\x3e\xcb\x16\x0b\x40\x25\x60\xb9\x7c\x29\x5e\xc2\xc7\xab\x22\xef\xee\x7d\x08\xd6\x09\x94\x1e\x66\xf4\xb0\x3a\x93\xf5\x83\x22\x49\xf3\x12\x5e\x67\x0a\xf1\x00\x3b\x93\xb5\x88\xe1\x47\x6d\xc7\x9c\xea\x4a\x28\xc3\x3d\x20\xd5\x4d\xad\x9e\x18\x20\x7c\xa6\xae\x95\x69\x46\x0c\xac\xf6\xed\xa0\xd8\x3f\xd2\x09\xb6\xc4\x71\xc8\x2c\x0e\xfb\x6c\xc4\xa7\xdc\x25\x56\x1a\xba\x9e\x6a\x29\xda\x6f\x3b\xac\xa2\x07\xbc\x2e\x37\x49\x12\x74\xae\x58\xcb\x44\x87\xcd\x67\xc7\x8a\x16\xd5\x25\x9d\xa6\x5e\xf3\x58\x0b\x9e\x97\x7b\xdc\xa6\x48\x7d\xf6\xa6\xba\x59\xac\xbb\x24\xc9\x53\xdf\xae\xb1\x99\x68\x35\x94\x29\xbc\x39\x00\x89\x2d\xc6\x89\xcd\xfb\x1e\x62\x97\xd1\x57\x7c\x9a\xa0\xa3\xe8\xf7\xaf\x9f\xa2\xdf\x38\x65\xb0\x5c\xfe\x83\x17\x75\xd7\x0f\xc2\x7e\x94\xa2\x7f\x48\xdc\xcb\x61\x29\x42\x23\xcb\x00\xa4\xf9\xdc\x64\x85\xc7\xeb\x55\x37\xd1\x29\x83\x95\x13\x9b\x7e\x91\xe9\xd9\xca\x11\x06\x97\x85\xaa\x5e\x2c\x6b\x64\x21\xe6\x37\x17\x2f\x52\x85\x82\xd4\x16\xda\xaa\x5a\xd5\xd1\xad\x1e\x8f\xb9\x12\x8f\xda\xc8\x24\x7a\x20\x2b\x55\x0a\x8c\x75\xa0\x8d\x4f\x3b\xbe\x5f\x46\xff\x94\x4a\x44\xb7\x85\x85\xd1\xdd\x6f\xbf\x08\x61\xd1\xb9\x07\x54\x4e\xdb\xbb\xf7\x9d\x53\x1d\x61\xdf\x92\x3a\x56\xd4\x14\xb8\x11\xba\x6d\xb3\x2f\xec\xb5\xb0\x3c\x00\xbc\x81\x48\xa8\x22\xfc\x65\xcc\xac\xb4\x1e\x83\xcd\x6e\x3d\x48\x35\xd4\x7b\xc5\x50\x0f\x5b\x5b\x06\x9e\xc4\x19\xce\xb1\xab\x0d\xaa\x7d\xb0\xbd\x47\xe2\x32\x77\x8d\x80\xb6\xa5\xd7\x83\xae\x2e\xf1\xba\xa7\xbf\x0c\xd3\x0a\x8b\x1c\x96\x90\xfb\x8c\xc4\x8b\x5e\x37\x71\xd1\x9d\x0b\x8b\x7b\x95\xfb\x9b\x5b\xc3\x7c\x6e\xaa\xe0\x45\xa8\xec\x95\xc0\x16\x8d\x9b\x49\x4a\x32\x56\x1b\xf4\xfb\x46\xe0\x13\xb4\x8d\x95\x8a\x86\xc0\x7e\x98\xee\x1f\x8d\xa1\xad\x77\x80\xdd\x7f\x69\x0c\xdb\xf2\x69\x02\x5f\x5f\x7f\x47\xc0\xfb\x63\x32\x16\xfd\xfb\x8f\x1f\xf7\x40\x3c\xe3\x56\xf9\x70\xfc\x79\x1c\xaf\x2d\x3e\x89\x67\x47\xda\x1c\x68\x9c\x45\x2e\x40\x0f\x87\x67\xc3\x79\xad\xbe\x09\xac\xcb\xc7\xc3\x3b\x77\x8d\xb1\xb8\xd6\xf9\x3d\x93\xf4\xe5\x2f\xcf\x91\xc9\xf9\x7c\x3f\x47\x8f\x13\xab\x40\xab\xbf\x2e\x41\xa1\xff\xbc\x2e\x57\x33\x8e\x86\x5d\x31\x74\x0d\xae\x44\x8d\xae\xf8\x7a\x87\x37\x54\x01\x9b\x11\x99\xeb\x38\x3e\x70\x27\x85\xe5\x32\xae\x77\xe4\x41\x79\xcd\xfb\x63\x90\x73\xf5\xad\x21\x2c\x4f\x43\x31\xcd\xf5\x00\xf7\xb1\x78\x6f\x50\xc1\xbf\x71\x00\x0e\xed\x14\xed\x59\x98\xac\x8d\xc3\x06\x59\x6e\x46\x7a\xe0\x0e\xe5\x73\xfb\x19\x9d\xe3\x29\x46\xe7\x5d\xa5\x6a\xf7\x22\x81\x39\x12\xd6\xbd\xec\x84\x6f\xbb\x3f\xd1\x82\x4e\xe7\x99\x2c\x77\xd9\x7e\x9e\xbf\xe2\x58\x4f\xb1\x71\x7a\x6b\xa5\xb6\x5e\xa9\x9f\xfe\x22\x3b\xfe\xed\xfe\xb2\x86\x5e\x7c\xe4\x0b\xbe\x17\x17\xf3\x9e\x9d\x81\x52\x2c\xe4\xb4\x32\x81\xda\xfc\x5c\x2d\x57\xff\x55\x10\xb8\xbd\x2c\xe7\x64\x19\x72\xb1\xbe\x8d\x2c\x16\xe0\x88\x93\x4c\x7e\x7d\xfc\xfc\x09\xda\x61\xfd\xfb\xd7\x4f\xc0\x62\xc1\x5d\x36\xd0\xdc\x8a\x98\x3b\x87\xe4\xe2\x29\x2a\xa1\xad\x8b\x33\x99\x66\xc5\xfd\x6a\xe4\xe2\xc4\xb9\x98\xf4\x58\x5b\xab\x67\xd1\x58\xaa\x28\x71\x8e\xc1\x90\xe7\x0e\x3b\x35\x74\x0c\x74\x9a\x72\x4b\xdb\x1a\xe2\x24\x97\xa6\xd0\x1c\xad\x34\x6c\x36\x9a\xab\x38\xea\xc6\x7a\xae\xe6\x22\x85\xd4\x1d\x04\x55\x7e\xf7\x31\xec\x0e\xb4\x26\x47\x96\x9b\x57\xd4\xba\x99\xe7\x95\x06\x6c\x76\x4e\x1b\x70\x38\xb9\x23\xf7\xdd\x52\x3b\xaa\xfc\x8c\x0c\x4f\xbe\x15\x56\x8c\xbe\x73\x7a\x47\xbb\xd9\x6d\xa4\xa0\x66\x98\xbd\x96\xd1\xd3\x04\xed\x3c\xaa\xe4\xf7\xb5\xb4\xf9\x4c\x8e\x4e\x20\xe9\x55\x74\x6e\x60\xb3\xa3\xbb\x82\xa7\xff\x83\xf2\x95\xef\x47\x41\xbc\xad\x3e\xb4\xaf\x30\x75\x02\x9a\x1b\xec\x33\x6e\x4c\x2e\x13\xee\x0f\xa8\x78\x33\x92\xaa\x1c\x33\x53\x6e\x21\x19\x3c\xac\x46\x51\x7d\x18\x4e\x54\x71\x9c\xb5\xb1\x03\x8b\xad\x8e\x89\x51\x92\x23\xb7\x0f\x98\x63\xa0\xe8\xbc\xdb\x7a\x7f\xd9\xc6\x88\xac\x4c\x53\xb4\x9d\x88\xb4\xce\x49\x9a\xf6\x62\xaf\x1b\x17\x47\xd2\x35\xb4\x36\xa3\xe8\x30\xa8\x4a\xb4\x91\x28\xc2\x80\xb7\xb5\xc5\xb5\xdc\x88\x6b\xb9\x4c\xcf\x5a\x15\xc5\xcb\x77\x17\x3b\xae\x7c\xb0\x56\xdb\xb3\x1d\xa9\xca\xbb\x6c\x0b\x9d\x4c\xc6\xa8\xa8\x13\x59\xe4\x62\xde\x2e\x65\x42\x7b\x57\x66\x96\x8f\x5c\x24\x95\xa4\x5f\xcb\x1a\x97\x2a\xbd\x57\x9f\x34\x17\x5e\xfc\x16\xad\x1c\xb6\x6f\xcb\x1a\xfd\xd7\x43\x24\xdd\xc3\xc4\x18\x6d\x09\x45\xbb\xb3\x2b\x37\xd8\xd1\x8a\x9c\x92\xc6\x20\xb5\x3a\x11\xf2\x24\x5b\x1b\xd2\xee\xec\x93\x07\x16\xca\xa4\xeb\x44\xc6\xa2\x41\x25\xda\xad\xde\x60\x42\xa4\x55\xe5\x16\xb2\x1a\x02\x9a\x9c\x27\xe8\x7d\xec\xb3\x81\x26\xd2\xe3\xd5\xfe\xba\x8b\x74\x57\xd7\x1b\x96\x68\x33\x67\x37\x3d\x39\x4e\xd7\x7f\xde\xc9\xa5\x31\x73\x06\xc5\xdf\x4a\xfa\xec\xea\x6f\x0c\x9c\x4d\xfa\xb5\x1a\x95\x1c\xf3\x14\x43\xb3\x32\xf3\xc8\x4d\x53\x06\x3c\xa7\xca\x55\xe5\x56\x9b\x39\x90\x86\x35\x57\x80\x86\xbf\xb5\x04\x5f\x6e\x5a\x3b\x00\x0c\x58\x79\xb7\x7f\x55\x0c\xc0\x80\x3e\x28\x9c\x41\x25\xf4\x9b\xb8\xc2\x7f\x0e\x3a\xfd\xdf\xd6\x4f\x07\xf2\xe1\x9f\x70\x45\xbf\xde\xa0\xac\x44\xfe\x11\x7a\xff\x58\x24\xff\xc9\xb7\xa2\x8c\x14\x3e\xd3\x87\xbc\x88\xfd\x83\x1c\xe4\x52\xa5\xfb\xee\x14\x2e\x1d\x74\x72\x77\x2f\x19\x44\x5a\xb5\x5b\xab\x99\x72\xeb\xa7\x4d\x51\x1f\x27\x46\x5f\x2a\x05\x69\x51\x34\xc7\x43\xf7\xe1\x99\x0e\x45\xef\x8d\x87\x44\x37\x64\xe3\x50\x32\x0a\xc6\x46\x66\x95\xf4\xfb\x96\x6d\xf9\x1f\x86\x0b\x07\x2b\x65\xdb\xa6\x28\x93\x02\x77\x1b\xd5\x26\xa0\x65\x20\x7b\x71\xe8\x8b\xd5\xeb\xde\xff\x02\x00\x00\xff\xff\x34\xe9\x46\x9f\x0b\x1d\x00\x00"

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLightHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x99\xdf\x6f\xdb\x36\x10\xc7\xdf\xf7\x57\x1c\x88\x62\x68\x1e\x64\xe7\x07\x5a\x0c\x5b\x64\x60\x19\xb2\x62\xc0\xd6\x01\x49\x81\x3e\x16\xb4\x78\xb2\xb8\x51\xa4\x46\x52\x89\x3b\x23\xff\xfb\x40\x52\x92\x25\xc5\x4a\xd4\x26\x5a\x1d\xe7\x21\x20\x45\xf2\xee\xf8\xbd\x0f\x4f\xb6\xb9\xd9\x00\xc3\x94\x4b\x04\x92\x28\x69\x51\x5a\x02\x77\x77\xdf\x01\x00\x6c\x36\xc0\x53\x98\xa1\xd6\x4a\xd7\xcf\xce\x19\xbf\x81\x44\x50\x63\x62\x42\x05\x6a\x0b\xfe\x7f\xc4\xa8\x5c\xa1\xae\x3b\xdc\xe4\xdc\x18\xba\x14\x48\x16\x7e\x99\x5f\xba\x2c\xad\x55\x12\xec\xe7\x02\x63\x12\x3a\xa4\xb6\x95\x08\x65\x90\x00\xa3\x96\xd6\xcb\x2b\x07\x04\xa8\xe6\x34\xca\x38\x63\x28\x63\x62\x75\x89\x64\xf1\xbd\xe5\x39\x9a\x9f\xce\xe7\xc1\xcc\xa2\x8e\xb7\x17\xec\x9c\xf1\x9b\x66\x0c\x25\x73\x03\xed\xad\x25\x2a\x2f\x94\x44\x69\x5b\x5b\x7e\x65\x2c\xb5\x08\x3f\xc6\xad\xe1\xd9\xb5\x7f\xb6\x43\x03\xad\x6e\xdb\x5b\x6c\x8d\x24\x4a\x44\x39\x8b\x4e\x4e\xc1\xb5\x4c\x5e\xb7\xd6\x26\x3a\x39\x6d\xad\xe9\xaf\x5b\x7f\x2a\xa8\x44\xd1\x9b\x71\x7f\x96\xe5\xb6\x23\x6f\x67\x66\x76\xba\x70\x6a\x6c\x37\xf0\x9e\xe6\x2e\xfe\xf3\x79\x76\x3a\xb0\xa4\x1d\xba\x40\xaa\x53\xbe\x26\x8b\x96\x82\x9d\xc9\x03\x8f\x3b\x01\xd6\x38\x0d\xf8\x4b\x95\xce\xeb\xc9\xae\x1d\x65\x4a\xf3\x7f\x95\xb4\x54\x80\xef\x0b\xba\x44\x11\x09\x4c\x2d\x01\xad\x04\x86\x69\x04\x72\xb4\x99\x62\x31\x29\x94\xb1\x04\x38\x73\x52\xe7\x39\x95\x8c\x80\x54\x37\x54\x70\x46\x2d\xee\x76\xda\x0f\x92\x5b\xcc\x83\xb3\x95\x56\x65\x31\x10\x6a\xb3\xd2\x47\xe4\xe6\xc7\xc4\x43\xb2\xa5\x57\x49\xab\x95\x08\x21\x43\x95\xf9\xb3\x3a\xf1\x67\x83\x79\xef\xff\x39\x2c\x4f\x7e\x90\x40\xae\x83\xf9\x59\x8d\xdc\x60\x48\x73\xef\xf2\x91\xb8\xef\x53\xf9\xb6\x8e\xed\xed\xe8\xd8\xfa\x96\x46\x4c\x87\x46\xb4\x71\x73\xfd\x7c\x2e\x8b\xd2\x56\x45\x22\xc9\x30\xf9\x7b\xa9\xd6\x8d\xd0\x7f\x99\xc8\xdc\x72\x9b\x64\x04\x24\xcd\xb1\xce\xc3\x68\xeb\xd5\x9f\x83\xa6\xca\x60\xa8\x04\xf8\x4f\x75\xee\x67\xd7\x56\x73\xb9\x02\xf2\xe7\x7b\x57\x07\xc1\x47\x80\xac\x29\x1f\x30\x1f\xb9\xed\x31\x89\x81\xe1\xa3\xf4\x05\x53\x1e\x18\xee\x97\xb9\xd9\x2f\x4a\x28\xfd\x87\x62\x68\x66\xbf\x99\x0b\xcd\x57\x99\x95\x68\xcc\x43\x98\x3d\xcf\x79\x59\x36\xbe\xa6\x3b\x34\x17\x2d\x1f\x7b\x77\x72\xda\x58\x6b\xf7\xb2\x24\x90\x73\x19\x93\x63\x02\x39\x5d\xc7\xe4\xf4\xcd\x1b\x02\xc6\x62\x11\x93\x13\xd2\xa9\x8b\x95\x4e\xa1\xd4\xb5\x74\x1c\x0b\x7d\x38\x28\xed\x04\xdc\x50\x51\x62\x4c\x9a\x97\xdd\xac\x43\x02\x79\x8c\xf1\x27\xf1\x58\xbd\x85\x07\x46\x1f\xa0\xf5\xea\xdd\xc5\xf4\x98\x6a\x64\xd3\xf1\x79\xe5\x8c\x1f\x2a\x98\x5e\xb9\x80\x9a\x6b\x8e\x85\xf3\x1e\x8a\x3e\xe7\xb3\x2b\x64\xd3\x92\x08\xcf\x86\xcc\x4a\x23\xca\xe9\xa0\x79\x17\xcc\x1f\x2a\x36\x95\x7a\x01\x9c\xd0\x79\x22\x3a\x5e\xb0\x97\x02\xcf\x52\x94\x13\x7e\x8a\xbc\xf0\xd6\x0f\x15\x9d\xa0\x5d\xf5\x76\x73\xed\x27\x82\xe3\xd4\xda\xdf\xd7\xdf\xc7\x8c\x6f\xbf\x81\xee\xf4\xfb\x2c\x40\xde\x3a\x37\xd3\x11\xf9\x31\x98\x3f\x54\x24\x2b\xf5\x02\x93\xa1\xf3\xd5\x50\xd6\x09\xdf\x53\x1e\x7d\xe7\x03\xe6\x05\x6a\x6a\x4b\xfd\x3f\xa0\x99\x38\x8f\x91\xdd\xba\x9c\x0e\x53\xbf\x39\xe8\xb8\x3a\x54\x64\xef\xab\xfa\x65\xdf\x2b\x76\x64\x65\x77\x7d\xed\xb2\xf2\x8d\xa9\xa6\x92\xc1\xeb\x16\xda\x97\x69\x8a\x89\x3d\x82\xd7\x12\xe1\xb5\x40\x09\xf7\xc6\x7e\xe7\xc6\x1e\xc1\xf1\xd1\xf4\x9c\xa3\xf7\x37\x1d\xdc\x97\x95\xfd\xbd\x23\xda\xa0\xc0\xc4\x7a\x2a\x6b\x0d\x02\x63\x3d\x45\xda\x10\x43\x58\x34\xc6\xfe\x66\x03\xfe\x9c\xc0\xab\x60\xaf\xf7\x13\xef\x36\xcd\x8f\xe9\xd2\x04\xac\x0a\xcb\x95\x6c\xf3\x5e\x59\xbe\xbb\x23\xdb\xdf\x95\xaa\x67\xd5\x59\xb8\xac\x67\x54\x91\x23\x8b\x49\xdd\x22\x0d\xba\x8b\x3a\x5b\xcd\x6a\xff\xe3\x6d\x70\x38\x6a\xab\x0f\x1c\x81\xce\x1e\xe6\xc1\xf9\xfe\x7f\x54\x4e\x05\x35\x59\x24\x50\xae\x6c\x36\xdd\xe1\xf8\xd5\x79\x01\x56\x6a\xea\x94\xde\xc3\x43\xd2\x2e\xfb\x16\xd7\x76\x5b\xf5\x07\x4b\x7c\x57\xb9\x70\xa4\xba\xcf\x2a\x82\x8f\x5f\xc4\x77\x26\xab\xa9\x34\xdc\xa5\x67\x72\x1a\x3e\x34\xae\x5e\x16\x12\x83\x28\xec\xd0\x2e\xf0\xb0\x63\xa0\x86\xc2\x7c\xb3\x77\x75\x5f\x27\x21\x3f\x19\x25\x38\x1b\xbc\x97\xda\xb5\x68\x3c\x63\x43\x19\xc9\x59\xa4\xd2\xd4\xa0\x8d\xce\xc6\xa4\xa3\xba\xe6\xf4\x77\x0c\x28\x19\xa9\x32\x63\xca\x65\xce\xb7\xb9\x59\x5a\x09\x4b\x2b\x23\x53\x26\x09\x1a\x43\x9a\x8a\x4f\x7e\x2e\x0a\xf1\x39\x60\xd6\xbd\xdf\x1c\xf4\xf8\xd5\xf2\x9f\xcf\x9d\x3a\xa3\xee\xf7\x7a\x8f\x5a\xdd\x9d\xb7\xac\xdb\xd6\x7f\x01\x00\x00\xff\xff\x47\x9c\x33\x7c\x61\x1e\x00\x00"

func templatesViewsLightHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLightHtml,
		"templates/views/light.html",
	)
}

func templatesViewsLightHtml() (*asset, error) {
	bytes, err := templatesViewsLightHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/light.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/config.html": templatesViewsConfigHtml,
	"templates/views/index.html":  templatesViewsIndexHtml,
	"templates/views/light.html":  templatesViewsLightHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"config.html": &bintree{templatesViewsConfigHtml, map[string]*bintree{}},
			"index.html":  &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
			"light.html":  &bintree{templatesViewsLightHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
