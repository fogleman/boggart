// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package esphome

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xc1\x6e\xf2\x30\x0c\xc7\xef\x3c\x85\x15\xf1\xdd\xbe\x52\xca\x69\x42\x85\x17\x40\xda\x65\xbb\x4f\x01\x7b\x23\x52\x49\xab\xc4\x02\xa2\xa8\xef\x3e\xa5\x29\x1b\x63\xcd\xd8\x7a\x69\x9d\xd8\x3f\xbb\xf6\xbf\xf6\x1e\x90\x5e\x95\x26\x10\xbb\x5a\x33\x69\x16\xd0\xb6\x93\x12\xd5\x11\x76\x95\xb4\x76\x25\x4c\x7d\x12\xeb\x09\x00\xc0\xf5\xed\xae\xae\xb2\x03\x66\xc5\x02\x82\x65\x0f\x17\xeb\x6c\xb3\x62\xd1\xc7\xdf\x32\xe7\x97\x46\x6a\xaa\xae\xbc\xdf\x23\x2e\x5f\xf1\x35\xa6\x8b\x63\xb9\xad\xe8\x12\x19\x0f\xdd\x33\xb3\x6c\x54\x43\x08\x28\x59\xc6\x7b\xe4\xcc\x90\x6d\x6a\x6d\xd5\x91\x40\xd7\x27\x23\x1b\x01\x96\x5d\x45\x2b\x71\x52\xc8\xfb\x65\x31\x9f\xff\x1b\xa8\x12\x2b\xed\x49\xe2\xb0\x2f\xfa\x4d\xda\xd9\x27\x58\x7b\x0f\xaa\x78\xd0\x20\x36\xe4\x04\xcc\xa0\x6d\xcb\x9c\xf7\x7f\xe0\x9e\x5d\x43\xa3\xc0\x47\x79\x18\x07\x3e\xb1\xe4\x5f\x91\x65\x9e\x9a\x40\xe0\x92\xb3\x2b\x79\x5b\xa3\x4b\xa7\xf5\x1e\x8c\xd4\x6f\x04\x53\xf5\x1f\xa6\xa4\x59\xb1\x83\xe5\x0a\x66\x9d\xa9\xc8\x86\x5f\x33\xdd\xc9\x5d\x51\x30\xb4\xda\xe7\x9d\x6d\xc8\xc5\x3e\x7f\x10\x7a\x00\x0b\xaa\x8c\xe1\x82\x28\x63\xb8\x4e\x93\xbb\x60\x5a\x10\x88\x73\x25\x8d\xa9\xe1\x95\x79\x42\x96\x32\xef\x96\xe9\x66\x5b\x73\x54\xc7\xab\xf5\xfe\x3c\xf6\x66\xff\xfa\xa8\xf9\x1e\x00\x00\xff\xff\x5d\xaa\x79\x0b\x62\x04\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x4e\x41\x6b\x13\x5d\x14\x3d\x9d\xaf\x5f\xd5\xb8\xd1\xae\x5d\x5c\x17\x16\x5d\x4c\x9c\x89\x82\x32\xc9\x24\xa2\x6d\x21\xb4\xd1\x52\xa3\x2b\x37\xcf\xe4\x25\x9d\x9a\xbc\x17\xe6\xbd\x11\x0b\x75\x61\x37\x82\x82\x5d\x09\x22\x6e\xf4\x17\x68\x21\x50\xaa\x8d\x5b\x5d\x08\x77\x5c\x8b\x0b\x37\x2e\x04\x7f\x83\x4c\x32\x55\xf4\x2e\x1e\xe7\x9c\x7b\xce\x3b\xf7\xeb\xec\xf4\x53\x00\x38\x0c\xe0\x04\x80\x5b\x00\x8e\x02\x78\x81\xc9\x7c\x00\xf0\x1f\x80\x8f\x00\xa6\x01\x7c\x02\x70\x04\xc0\x67\x00\xff\x03\xf8\x92\xeb\xdf\x72\xdf\x77\x00\x0e\x80\x1f\x00\x6a\x53\xc0\xcf\xfc\xef\xa2\x03\xcc\x00\xb8\xe0\x00\xc7\x01\x54\x1d\x60\x16\xc0\x4a\xae\xb7\x72\xbe\xee\x00\xc7\x00\xdc\x77\x80\xa9\x3c\x7b\x30\x4e\xde\x99\xf5\xcc\xe4\xbd\xd9\x1c\xca\x9e\x25\xb9\x81\xab\xa2\x2f\x71\xed\xf6\xba\x6c\x59\xaa\xcf\xe3\xba\x15\x56\xa2\xb9\x31\x90\xd0\x9d\x0e\xb4\xc2\xaa\x1c\xe8\xd8\xba\x0d\xd3\x8d\xda\xee\xe5\xa4\x6b\xdc\xa6\x0e\xa8\x2d\xef\x5e\xba\x13\xad\x89\xbe\x2e\xc6\x49\x61\x59\x18\xeb\x36\x63\xa1\x4c\x4f\x58\x1d\x07\xb4\x34\x5e\x51\x23\x89\x45\x5f\xb7\x35\x55\xfe\xf2\x57\x0b\xcb\x42\x75\x13\xd1\x95\x6e\x53\x8a\x7e\x40\xbf\x79\x40\xab\x89\x31\x91\x50\x85\x46\xbd\xb1\xe0\xde\x94\xb1\x89\xb4\x0a\xc8\x2f\x7a\x85\x2b\x5a\x59\xa9\xac\x9b\x1d\x17\x90\x95\xf7\xec\xd9\x41\x4f\x44\xaa\x4c\xad\x35\x11\x1b\x69\xc3\x1b\xcd\x45\xf7\xe2\x1f\x5f\x76\x4f\x47\xc6\xee\x82\x6a\xe9\x76\xa4\xba\x01\x15\x56\x7a\x49\x2c\x7a\xee\xa2\x8e\xfb\x26\x20\x35\x18\x53\x13\x9e\x2b\xd3\x04\x86\xea\x94\xef\x85\xa1\x4f\x73\x73\x94\x41\xef\x64\xe8\xfb\x54\x23\x8f\x82\x31\xaf\x86\xa5\x83\x55\x25\x3c\x9f\xc1\xd3\x63\x5b\xc5\xf7\x68\x73\x73\x12\xa9\x86\x25\xef\x0c\xd5\xc8\xa7\x80\x4a\x65\xf0\x73\x7e\x9b\x3e\x49\x1f\x82\x9f\xf1\xbb\x74\x1b\xf5\x79\xe2\x11\xbf\x49\x1f\xf1\x90\xf7\xd2\x2d\x7e\x0d\x7e\xc9\xa3\xf4\x41\xba\xc5\xa3\x74\x9b\xf7\x79\x97\x87\xe0\x57\xbc\xcb\xef\xc1\x3b\xe9\x63\xde\x9b\xe4\x79\xc8\xfb\x3c\x02\xef\xfc\x23\xfc\x0a\x00\x00\xff\xff\xb2\x2e\x8d\x1a\x8e\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
