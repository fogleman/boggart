// Code generated by go-bindata.
// sources:
// templates/views/index.html
// templates/views/light.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package esphome

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\xcd\x6e\xdb\x30\x0c\xbe\xf7\x29\x08\xa1\xdb\x69\xb6\x9b\x9e\x86\xc2\xce\x30\x60\xe8\xa5\x43\x37\x64\xdb\x79\x50\x22\x26\x16\xe0\x48\xae\xc4\x26\x31\x0c\xbf\xfb\x20\xcb\x31\xf2\xe7\xc4\xf1\xb0\x5d\x7a\x49\x28\x89\x1f\x7f\x3e\x92\xb2\xca\x12\x04\xce\xa5\x42\x60\x33\xad\x08\x15\x31\xa8\xaa\x9b\x58\xc8\x15\xcc\x32\x6e\x6d\xc2\x8c\x5e\xb3\xf1\x0d\x00\xc0\xee\xee\x4c\x67\xc1\x52\x04\xa3\x7b\x70\x92\x5d\x6e\xa5\x8d\x0d\x46\xf7\x8d\xfe\x21\x66\xf3\x3b\xe7\x0a\xb3\x9d\xd3\x63\x8d\x6d\x14\xfb\x3a\xb5\x1e\xf1\x69\x86\x5b\x4d\xbf\xa8\x7f\x03\x4b\x46\xe6\x28\x40\x70\xe2\x7e\x5f\x50\x60\xd0\xe6\x5a\x59\xb9\x42\x50\x7a\x6d\x78\xce\xc0\x52\x91\x61\xc2\xd6\x52\x50\xfa\x30\xba\xbb\x7b\x77\xc2\x8b\xf7\x94\x22\x17\xa7\xcf\xfc\xb9\xe9\x3e\x6c\x0c\x8c\xcb\x12\xe4\xe8\xa3\x02\xf6\x84\x05\x83\x10\xaa\x2a\x8e\x28\xbd\x02\xf7\xb3\xc8\x71\x10\xf0\x99\x2f\x87\x01\x7f\x10\xa7\x61\xc8\xcf\x33\x92\x5a\xd9\x3e\xd8\x38\xea\x62\xcf\xe1\x3a\x79\x8f\x69\xaa\x45\xd1\x6d\xb6\x2c\xc1\x70\xb5\x40\xb8\x95\x1f\xe0\x16\x15\x49\x2a\xe0\x21\x81\xb0\x16\x25\x5a\xd7\xd6\xdd\xb9\x5c\x2c\xa8\x70\xc9\x36\x76\xc3\x27\x2c\x7c\x9e\x67\x9a\xe4\x04\xcc\x55\x74\x08\xce\x15\x74\x08\xae\xae\x67\x6f\xe0\x59\x05\x38\x18\xd4\x29\xa9\x60\x61\xf4\x6b\xce\xc0\x68\x37\x54\x7e\x71\xd9\x08\xf8\x5a\xc9\x39\xe0\xcb\x3e\x31\x2c\x93\x8b\xd4\x5f\x3f\x7d\x8c\xc4\x1c\x52\x83\xf3\x84\xb9\x84\xc3\x09\xbe\xbc\xa2\xa5\xf0\xd7\xe4\x6b\xf8\x9d\x53\x0a\x55\xf5\x89\xd7\x4d\x99\x78\x1f\xef\xa5\x48\x8e\x2a\xc8\x76\xd2\x01\x97\x92\x54\x73\xed\x85\x99\xf6\x3b\x1b\xdb\x33\xa9\x3a\x26\xb9\x35\xb8\xc8\x8a\x3c\xad\x8d\xb4\x52\x80\x05\x06\x3a\x47\xc5\x80\x24\x39\xce\xda\xf1\xf9\x82\xc4\x65\xd6\x8c\x0f\x1b\xc7\x91\xec\xe7\x33\x8e\x78\xff\xe0\x3c\xeb\x7b\xbd\x31\xe1\xeb\xbe\x74\xb7\x2e\xff\x05\xed\xc2\x4d\xae\xf9\x0b\xe2\xdb\xe8\xce\x16\xc0\x92\xce\x8f\xc9\xff\xf6\xf8\x78\x35\xf1\xad\xbf\x2b\x0b\x80\x99\xc5\xb7\xc4\x78\x9e\xf1\xe2\x04\xe3\xcf\xff\x8f\x70\x25\xfa\xf2\xdd\x5f\x3b\x8e\x84\x5c\x5d\xb8\x50\xcf\x5e\xb9\xdd\xdf\xc0\xcb\x81\xc4\x51\xc7\x97\x30\x8e\xea\xb7\xcf\xc1\xe3\x6a\x3f\xd4\x9d\x65\x23\x36\x7f\xad\xcf\x3f\x01\x00\x00\xff\xff\x29\x84\x09\x97\x11\x0a\x00\x00"

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsLightHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x99\xcd\x6e\xe3\x36\x10\x80\xef\x7d\x8a\x01\x11\x14\x2d\x50\xc9\x71\x16\x58\x14\x6d\xe4\x43\x8a\xa0\x97\xa2\x87\xa4\xe8\x1e\x0b\x5a\x1c\x5b\x6c\x29\x52\x25\x47\x89\xb7\x81\xdf\xbd\x10\x29\x31\xb2\xe5\x3a\x72\x11\x1b\x6b\x58\x87\x80\x14\x67\x38\x3f\xfc\x86\x13\xc8\x2f\x2f\x20\x70\x21\x35\x02\xcb\x8d\x26\xd4\xc4\x60\xbd\xfe\x0a\x9a\xe7\xe5\x05\xe4\x02\x52\xb4\xd6\xd8\xf8\xf2\x56\xc8\x27\xc8\x15\x77\x2e\x63\x5c\xa1\x25\xf0\x7f\x13\xc1\xf5\x12\x6d\x37\x91\xae\x94\xce\xf1\xb9\x42\x36\x0b\x7a\x5e\x77\x5e\x13\x19\x0d\xf4\xb9\xc2\x8c\x85\x09\xeb\x36\xcb\x95\x71\xc8\x40\x70\xe2\x9d\x7e\x6b\x81\x01\xb7\x92\x27\x85\x14\x02\x75\xc6\xc8\xd6\xc8\x66\x5f\x93\x2c\xd1\xfd\x78\x3b\x09\xdb\xcc\xa2\xcb\xdb\xfe\x4e\x84\x7c\x7a\x5d\x45\x2d\x9a\xa5\x7e\x80\x5c\x0b\x48\x51\x93\xa4\xcf\x90\x3a\xe2\x84\x51\x79\x10\xb1\x35\xcf\xfd\x80\x06\xeb\xb9\x51\x49\x29\x92\xe9\x0d\x34\x23\x57\x76\xa3\x95\x4b\xa6\x37\x03\xcd\x6d\xed\xd5\x1f\x15\xd7\xa8\x76\xca\x0d\x65\x49\xd2\x66\x7a\x87\xf2\xc5\xcd\xac\x89\x71\xfa\xbd\x06\xf6\x8b\x5c\x16\xc4\x20\x85\xf5\x3a\xa4\xc9\x47\x9c\xfe\xca\xcb\x26\xde\xdb\x49\x71\xb3\x77\xab\x7e\x90\x0a\xb9\x5d\xc8\x15\x9b\xf5\x93\x3b\x54\xd9\xbb\xb8\x11\x4a\x87\xde\x5e\x0f\x16\xc6\x96\x9d\x4a\x33\x4e\x0a\x63\xe5\x3f\x46\x13\x57\xe0\xe7\x8a\xcf\x51\x25\x0a\x17\xc4\xc0\x1a\x85\x41\x8c\x41\x89\x54\x18\x91\xb1\xca\x38\x62\x20\x45\x73\x4c\x65\xc9\xb5\x60\xa0\xcd\x13\x57\x52\x70\xc2\x7d\xa6\xb7\x1d\x96\x84\x65\x30\xb9\xb4\xa6\xae\xf6\xba\x1d\xf5\xbd\x77\x8d\x56\xc6\x3c\x64\xaf\xe0\x1b\x4d\xd6\xa8\xe0\x3e\xb4\x04\x7d\xe8\x00\xfa\xf0\x06\x3f\xbb\x9e\x78\xe6\x8f\xc1\x50\xba\x09\xf4\x7f\xba\x38\xf1\x2e\x8c\x8a\x66\xc8\xfc\xc7\xce\xe3\x8f\xff\xc3\xe3\xfe\x7e\xa3\x95\x20\xa6\xf5\x10\x0d\xaf\x25\x75\x55\x53\x7b\x0f\xe5\x05\xe6\x7f\xcd\xcd\x2a\x1e\xc8\x9f\x2e\x71\xcf\x92\xf2\x82\x81\xe6\x25\xc6\xf3\x6a\xc8\x69\x87\xed\xd5\xe8\x67\xe9\x63\x7b\x67\x80\xdf\x09\x45\xbc\x66\x60\x72\x50\x28\xe3\xd3\x0f\x6f\x95\xd7\xc1\x82\xa3\x84\xba\x86\x10\x6e\x8e\xc7\xba\xaa\x8c\x25\x77\x67\x9b\x9b\x45\xa3\x73\x6f\x63\xf6\x9e\x55\x34\x8f\x76\x8f\x56\x4a\xb1\x90\xee\x7a\xb6\xce\xa0\x9a\xfa\x78\xdb\xa6\x31\x33\x28\xa5\xce\xd8\x35\x83\x92\xaf\x32\x36\x65\xe0\x08\xab\x8c\xa5\xd7\x53\xb6\x71\xa7\xb6\x19\x0c\xb0\xf7\x33\x1c\x2a\xa1\xff\xe6\x89\xab\x1a\x33\xd6\xf4\x92\x50\x07\x1b\x20\x8c\x3b\xce\xf7\x44\xb3\x6d\xed\x6f\xca\xed\x40\xf8\x61\x39\x3f\x2d\xbb\x16\xc5\xf1\xa1\x7d\x68\x8c\x5c\x0e\xad\x3e\xa7\x01\x53\x3f\x1c\xf0\xf9\x80\xe2\xf4\x60\xbe\x27\x35\x4b\x8b\xa8\x8f\xcf\xcd\xcf\xc1\xcc\xe5\x90\xd3\xe6\x35\xb0\xd3\x4e\x06\xf4\xf8\xac\x9c\x37\x3f\x27\xb9\x75\xee\x54\x7d\x1e\xff\x72\xbe\x57\x93\xf4\xf1\xb6\xed\xd1\x8f\x87\x8d\x51\xd5\x78\x6e\x2d\xf1\x53\x21\x09\x7f\xe7\xc1\xf3\x13\x32\xfa\xdc\xd8\x3d\x3e\xa5\x9f\x82\x99\xcb\xc1\xb4\xcd\x6b\xe0\xb4\x9d\x0c\x40\xf5\x59\x39\x37\x52\x7f\x32\xca\xd8\xdf\xb0\xac\xd0\x72\xaa\xed\x89\x79\xcd\x1b\xeb\x09\xbd\x9a\x3f\x3e\xbb\x3e\x60\xd8\x30\x79\x39\x1c\xef\xc8\x77\x60\x7a\xc7\xc2\x80\xef\x1d\xa8\x7c\xd1\xa8\x6b\x84\x6f\x14\xea\x88\xfc\xfd\x62\x81\x39\xb9\x6f\xe1\xfa\xb4\x90\xa3\xb7\x7b\x7c\xb2\xef\x5b\x3b\x67\x80\xb3\x43\x85\x39\x79\x24\xb7\xb2\xd3\x67\x16\x82\xd8\xf8\x7d\x21\xa4\xc3\x17\x08\x5c\x2d\xbe\x83\xab\xb0\x3b\xfc\x90\x6d\x53\x30\x2e\x47\xd1\x61\x53\x91\x34\xba\x57\x13\xdd\xce\xeb\x35\x0b\xb4\xe1\xdf\xf1\xdd\x55\x5b\x30\xf7\x9d\x48\x1b\x08\x8a\x8c\x75\x23\x16\x59\x8e\x1f\x99\x3b\xf5\xd4\x7f\x51\x0e\x16\x0f\x8c\x7c\x54\x75\xc4\xa0\x26\xc1\x99\x2f\xaf\x86\x6f\x27\x0d\x06\x07\x7f\x1a\xdf\xb9\x30\x78\xb9\xfb\x37\x8d\x38\xfa\x37\x00\x00\xff\xff\x6a\xa1\xdc\xe1\xd4\x19\x00\x00"

func templatesViewsLightHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsLightHtml,
		"templates/views/light.html",
	)
}

func templatesViewsLightHtml() (*asset, error) {
	bytes, err := templatesViewsLightHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/light.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x4e\x3f\x6f\xd3\x5e\x14\x3d\xf6\xaf\x7f\x7e\x0d\x02\x41\x67\x86\xcb\x40\x05\x83\x8b\x5d\x18\x90\x5b\xb7\xfc\x69\x2b\x55\x6d\x0a\x2a\x81\x15\x3d\x92\xd7\xc4\x90\xbc\x17\xd9\xcf\x88\x4a\x5d\xda\x05\x09\x24\xb2\x14\x09\xc1\x04\x33\x42\x10\x29\x52\x28\x34\x7c\x85\xeb\x2f\x80\x60\x64\x60\x61\x66\x40\x8e\x0d\x15\x9c\xe9\x9c\x73\xcf\xd1\x3d\x9f\x27\x47\x9e\x02\xc0\x04\x80\x93\x00\x6a\x00\x8e\x02\x78\x8d\x1c\x5f\x00\x8c\x03\xf8\x0a\xe0\x3f\x00\xdf\x00\x8c\x00\xf8\x5e\x74\x7e\x00\x18\x05\xf0\xb3\xf0\x6d\x2b\xcf\x8d\x5b\x80\x0d\xe0\x88\x05\x2c\x58\xc0\x31\x0b\x38\x0e\x60\xdd\x06\xfe\x07\x70\xdb\x06\xc6\x00\x34\x6c\xe0\x04\x00\x6d\x03\x93\x00\x76\x0a\x7f\xaf\xd0\x2f\xec\xbc\xf7\xc6\x06\xac\xe2\x47\x86\x31\x1c\x62\xa2\xd8\x66\x17\x7a\xb4\xd8\x9c\xfd\xc1\xe5\xaa\x09\xb5\x8a\xb1\x2a\xb7\xb0\x2e\x5a\x12\xd7\xee\xdc\x95\x55\x43\x2b\x8b\xb8\x61\x84\x91\xa8\x6c\xb5\x25\xf4\xe6\x26\xb4\xc2\x86\x6c\xeb\xc8\x38\xe5\xb8\x1e\xd6\x9c\x2b\x49\x3d\x76\x2a\xda\xa7\x9a\xbc\x7f\xe9\x5e\xd8\x10\x2d\x3d\x1d\x25\xa5\x35\x11\x1b\xa7\x12\x09\x15\x37\x85\xd1\x91\x4f\xab\xc3\x13\x95\x93\x48\xb4\x74\x4d\xd3\xdc\x5f\xf9\xf9\xd2\x9a\x50\xf5\x44\xd4\xa5\x53\x91\xa2\xe5\xd3\x1f\xed\xd3\x46\x12\xc7\xa1\x50\xa5\xf2\x4a\x79\xc9\xb9\x25\xa3\x38\xd4\xca\x27\x6f\xda\x2d\x5d\xd5\xca\x48\x65\x9c\x6c\x9c\x4f\x46\x3e\x30\xe7\xda\x4d\x11\xaa\x59\xaa\x36\x44\x14\x4b\x13\xdc\xac\x2c\x3b\x17\x0f\x73\xd9\x9e\x4d\x19\x39\x4b\xaa\xaa\x6b\xa1\xaa\xfb\x54\xba\xde\x4c\x22\xd1\x74\x96\x75\xd4\x8a\x7d\x52\xed\xa1\x8c\x83\xf3\xb3\x94\xd3\x40\x9d\xf6\xdc\x20\xf0\x68\x6a\x8a\x32\xea\x9e\x0a\x3c\x8f\x16\xc8\x25\x7f\xa8\xe7\x83\x99\xdf\xa7\xb9\xe0\x42\x46\xcf\x0c\x63\x73\x9e\x4b\xdb\xdb\x79\x65\x3e\x98\x71\xcf\xd2\x02\x79\xe4\xd3\xcc\x2c\x78\x8f\x7b\xfc\x3e\xdd\x49\x77\xb9\xcb\xfd\xb4\x03\x7e\xce\x1f\xd2\x27\xe9\x43\xf0\x33\xfe\x98\x76\xb0\xb2\x48\x3c\xe0\x77\xe9\x23\xee\xf1\x7e\xba\xcb\x6f\xc1\x2f\x79\x30\x2c\x0c\xd2\x0e\x1f\x70\x9f\x7b\xe0\x57\xdc\xe7\x4f\xe0\x6e\xfa\x98\xf7\xf3\x3e\xf7\xf8\x80\x07\xe0\xee\x3f\xc6\xaf\x00\x00\x00\xff\xff\x60\x74\x35\x76\xbf\x02\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html":       templatesViewsIndexHtml,
	"templates/views/light.html":       templatesViewsLightHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
			"light.html": &bintree{templatesViewsLightHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
