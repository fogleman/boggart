// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package elektroset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xd1\x6f\x9b\x3e\x10\x7e\xcf\x5f\x71\x42\xbf\x9f\x9a\x3c\x00\x86\xae\xdb\x94\x91\x3c\x4d\x93\xf6\xb2\x97\x55\x9b\xb4\x97\xc9\xc1\x47\xe3\x89\xd8\xcc\x36\xa1\x15\xe2\x7f\x9f\x0c\xa4\x25\x5d\x48\xd2\x2e\x9d\xd4\x95\x3e\x50\xc3\xdd\xf9\xb3\xbf\xbb\xfb\x22\x5d\x59\x02\xc3\x84\x0b\x04\x27\x96\xc2\xa0\x30\x0e\x54\xd5\x28\xd2\xb1\xe2\x99\x01\x73\x93\xe1\xcc\xa1\x59\x96\xf2\x98\x1a\x2e\x85\xff\x83\xae\x69\x63\x74\xe6\x23\x00\x80\x24\x17\xb1\xb5\xc0\x9a\xa6\x39\x7e\x90\x6a\x45\xcd\x58\x4c\xa0\xac\xad\xf6\x4f\xa1\xc9\x95\x00\x81\x05\x7c\x14\x26\xf5\x3e\xe5\xab\x05\xaa\xd6\x73\xe2\x25\x9b\x90\x77\x75\x44\x35\x8a\xfc\x06\x60\x3e\x8a\x18\x5f\x43\x9c\x52\xad\x67\x8e\x92\x45\x8b\xd8\xfd\x1a\xcb\xd4\x5d\x31\x37\x08\xc1\xae\xf4\x6a\xb3\xba\xd6\x6e\x10\xb6\xfe\xf7\x63\xae\xbf\x67\x54\x60\xda\xb1\xfe\xee\xb1\x21\x63\xdb\xa7\xf6\x33\x74\x91\xe2\xc6\xb3\x79\xa9\x9f\xae\x36\x8a\x67\xc8\x80\x51\x43\x9b\xef\xcc\xb8\x0a\x75\x26\x85\xe6\x6b\x04\x21\x0b\x45\x33\x07\xb4\xb9\x49\x71\xe6\x14\x9c\x99\xe5\x34\x20\xe4\xff\x1d\x28\x0d\xd2\x12\x29\xeb\xb3\xa9\xdd\x86\x36\x70\x5e\x96\xc0\x83\xb7\x02\x9c\xf7\xd4\xa0\x03\x1e\x54\x55\xe4\x9b\x65\x7f\x90\x0d\x48\x00\x7f\xc2\x98\x0b\x86\xd7\xe0\x19\xaa\x78\x92\x68\x08\x26\x60\x54\x8e\x76\x83\xee\xbe\x97\x01\xf8\xf0\x75\xd9\xd9\xba\x2c\x01\x05\xb3\xe5\xf3\x60\x8c\xb0\x07\x23\x3c\x21\xc6\x79\x0f\xc6\xf9\xc3\x30\x22\xbf\x8f\x7a\x1b\xbc\x27\x61\x0b\xc9\x6e\x76\xdb\xca\x12\x14\x15\x57\x08\xff\x29\x59\xc0\x74\x06\x9e\x92\x85\xee\x3d\xc0\xfe\xd4\xb3\xf9\x71\xcd\xcb\x64\x9c\xaf\x50\x18\xaf\x50\xdc\xe0\x98\x51\x83\x97\xf2\xb3\x51\x5c\x5c\x8d\xcf\xca\xb2\x3e\x8b\x67\x8b\xc7\x6b\x3a\x15\x9c\x90\x90\xd7\x2e\x09\x5c\x12\x5e\x06\x17\x53\xf2\x6a\x4a\x2e\xbe\x91\x37\x53\x42\xac\x64\x9c\x4d\x26\xb7\x7d\x1b\xf9\xa6\x87\x85\xcd\x11\xf7\x65\xaf\xe0\x66\xd9\xa0\x7f\xb1\x8a\xa2\xdb\x04\x06\xfb\x92\x5e\xef\xfb\x98\x6b\x77\x45\xcb\x96\x44\x53\x32\x40\xa0\xaa\x3a\x17\xda\x8b\xdb\x14\xdc\x95\xb9\x2d\x38\x5b\xcd\xc4\x23\x87\xce\xdb\x9c\x39\xa3\x62\xa3\x25\x29\x5d\x60\x0a\xf5\xd3\x65\xb6\x1e\x94\xf3\xb8\x5c\xf6\x5c\x2a\xd8\xbe\x14\xf8\x27\xa5\x2c\xdc\xde\x3d\xf2\xed\xd5\x0e\x32\x87\xa9\x46\x4b\x5f\x7a\x5a\xfa\x74\x1e\xc7\xa8\xf5\xcb\xe1\xaf\xa3\x77\xa7\xe0\x8f\x8b\x44\xbe\x1c\xf2\xba\xbd\x1b\x9c\xa0\x77\x31\xa1\x79\x6a\x9e\x94\xbf\x63\x6f\x78\xf0\xb7\xf2\x80\xc7\x1f\x48\x39\xec\x95\xf3\xf0\x38\x8a\x07\x49\x7f\xb6\x5d\x35\x48\xfa\x20\xe9\x83\xa4\xff\x6d\x49\x3f\xce\xeb\xc9\x64\xfd\x7c\x90\xf5\x7f\xbc\xb3\x06\x59\x1f\x64\x7d\x90\xf5\xe7\x26\xeb\xfd\x53\xab\x83\xd3\xae\xdd\x73\xab\xc8\xaf\x47\x9c\xf7\x66\xa8\x3e\xe3\xeb\xce\xd0\xf5\xee\xb5\x5d\xb6\xff\xee\x30\x7f\x05\x00\x00\xff\xff\xbf\x23\x65\x4c\x80\x16\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
