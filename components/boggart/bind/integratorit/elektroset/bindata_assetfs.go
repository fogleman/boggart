// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package elektroset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x51\x6f\xd3\x30\x10\x7e\xef\xaf\x38\x45\x43\x5a\x1f\x9a\x34\xdd\x0b\x1a\x69\x9f\x10\x12\x42\xf0\x02\x02\xf1\x84\xdc\xf8\xb2\x1a\xb9\x76\xb0\x2f\xcd\xa6\x28\xff\x1d\x39\x49\xd7\x74\xb4\x69\x27\x32\xa4\xb1\xec\x21\x73\x72\x77\xfe\x7c\xdf\x9d\xbf\x4a\x57\x14\xc0\x31\x11\x0a\xc1\x8b\xb5\x22\x54\xe4\x41\x59\x8e\x22\x1b\x1b\x91\x12\xd0\x5d\x8a\x73\x8f\xa5\xa9\x14\x31\x23\xa1\x55\xf0\x93\x6d\x58\x6d\xf4\x16\x23\x00\x80\x24\x53\xb1\xb3\xc0\x86\xc9\x0c\xdf\x69\xb3\x66\x74\xa9\xc6\x50\x54\x56\xf7\x67\x90\x32\xa3\x40\x61\x0e\xef\x15\x49\xff\x53\xb6\x5e\xa2\x69\x3c\xc7\x7e\xb2\x0d\x79\x53\x45\x94\xa3\x28\xa8\x01\x16\xa3\x88\x8b\x0d\xc4\x92\x59\x3b\xf7\x8c\xce\x1b\xc4\xf6\xd7\x58\xcb\xc9\x9a\x4f\xc2\x19\xb8\x95\x5d\x6f\x57\xb7\x76\x12\xce\x1a\xff\x87\x31\xb7\x3f\x52\xa6\x50\xb6\xac\x7f\x7a\x6c\xc9\xd8\xf7\xa9\xfc\x88\x2d\x25\x6e\x3d\xeb\x97\xea\x39\xb1\x64\x44\x8a\x1c\x38\x23\x56\x7f\xe7\x34\x31\x68\x53\xad\xac\xd8\x20\x28\x9d\x1b\x96\x7a\x60\xe9\x4e\xe2\xdc\xcb\x05\xa7\xd5\x75\x38\x9d\xbe\x3a\x80\x52\x23\xad\x90\xf1\x63\x36\x73\xd8\xd0\x04\x2e\x8a\x02\x44\xf8\x5a\x81\xf7\x51\x2b\x5a\x79\xe0\x43\x59\x46\x01\xad\x8e\x47\xb9\x88\x04\xf0\x17\x5c\x0a\xc5\xf1\x16\x7c\x62\x46\x24\x89\x85\x70\x0c\x64\x32\x74\x1b\xb4\x37\xfe\x52\x99\x21\x84\x00\x3e\x7c\x6b\x23\x14\x05\xa0\xe2\xae\x8d\x1e\x0d\x35\xeb\x84\x9a\xf5\x09\x75\xd5\x09\x75\xf5\x48\xa8\x28\x38\x56\x10\x17\xdc\x51\xc6\xa5\xe6\x77\x87\x6d\x45\x01\x86\xa9\x1b\x84\x0b\xa3\x73\xb8\x9e\x83\x6f\x74\x6e\x8f\x1e\xa0\xbb\x21\xf8\x7d\x86\x6e\x37\xff\x2d\x23\xf4\xab\xce\xf0\x3f\x93\x11\xea\x06\x2e\x40\x09\x09\x1e\x67\x76\xb5\xd4\xcc\x70\x27\x03\xee\x08\x3b\xf7\xef\xc8\x4c\x4d\xc6\x91\x64\xb6\x48\x5d\xb5\xc8\x05\xad\xea\x3d\xbf\x3a\xb9\xb0\x4d\x39\xc2\xae\x12\x56\xfb\x9e\x25\x48\x5c\xc7\xd9\x1a\x15\xf9\xb9\x11\x84\x97\x6d\x45\x72\xe9\xd7\x0d\x00\x53\x28\xcb\xf1\x78\xa7\x32\x5d\xb8\x75\xfb\xdc\xd0\x7d\xfb\xb8\x16\x9d\xfa\xd3\x53\xe7\xad\xcf\x9c\x32\xb5\x15\x0a\xc9\x96\x28\xa1\x7a\x4e\xb8\x2b\xab\xf1\x16\x7d\x26\x15\xee\x27\x05\x41\xaf\x94\xcd\xf6\x77\x8f\x02\x97\xda\x49\xe6\x50\x5a\x74\xf4\xc9\x7e\xe9\xb3\x59\x1c\xa3\xb5\x2f\x87\xbf\x96\x7a\xf5\xc1\x9f\x50\x89\x7e\x39\xe4\xb5\xef\x6e\xd8\xc3\xdd\xc5\x84\x65\x92\x9e\x94\xbf\x73\x33\x3c\xf9\xcb\x77\xc2\xe3\x2f\xa4\x1c\x3a\xe5\x7c\x76\x1e\xc5\x83\xa4\x3f\xdb\x5b\x35\x48\xfa\x20\xe9\x83\xa4\xff\x6b\x49\x3f\xcf\xeb\xc9\x64\xfd\x6a\x90\xf5\xff\xfc\x66\x0d\xb2\x3e\xc8\xfa\x20\xeb\xcf\x4d\xd6\x8f\x0f\x9f\x4e\x0e\xad\x0e\x8f\x9f\xa2\xa0\x9a\x5f\x3e\x18\x90\x06\x5c\x6c\x5a\x13\xd5\xdd\x6b\xb3\x6c\xfe\xed\x30\x7f\x07\x00\x00\xff\xff\x88\x2b\x2d\x63\x5d\x16\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
