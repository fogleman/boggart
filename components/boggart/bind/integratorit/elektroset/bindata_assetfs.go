// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// DO NOT EDIT!

package elektroset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdf\x8f\xe2\x36\x10\x7e\xbf\xbf\x62\x94\xf2\xb0\x48\x0d\x61\x51\x55\x55\xd7\x6c\xa4\xd3\xa1\xaa\xf7\xb0\xa7\xeb\x5d\x55\xa9\x7d\x39\x99\x78\x00\xb7\xc6\x4e\x6d\x27\xb0\x45\xfc\xef\x95\x9d\x1f\x04\x76\x13\x12\xa0\x5c\x1f\x2e\x0f\x10\xf0\x37\xf3\xcd\xcc\x37\x71\x6c\x6f\xb7\x40\x71\xce\x04\x82\x17\x4b\x61\x50\x18\x0f\x76\xbb\x57\x00\x00\xa1\x8e\x15\x4b\x0c\x98\xa7\x04\x1f\x3c\x92\x24\x9c\xc5\xc4\x30\x29\x82\x3f\x49\x46\xf2\x41\x2f\x72\x50\x7b\xcd\x53\x11\xdb\x51\xc8\x08\x4f\xf1\x27\xa9\x56\xc4\xdc\x89\x21\x6c\x2b\x84\xbd\x14\x9a\x54\x09\x10\xb8\x86\x77\xc2\xf0\xd1\xfb\x74\x35\x43\x55\xa0\x87\xa3\x79\x69\xf6\x63\x65\x55\x04\x13\xe4\x84\xd1\x2b\xf7\x73\xbb\x05\x45\xc4\x02\x61\x40\xe2\x58\xa6\xc2\xc0\xeb\x07\x18\x15\xf7\xba\xca\x80\xb2\x0c\x62\x4e\xb4\x7e\xf0\x94\x5c\xd7\x82\xad\x8f\xc4\x92\xfb\x2b\xea\xdf\x4f\xc0\xde\xe9\x55\x79\xb7\xd1\xfe\xfd\xa4\x66\x73\x6c\xb7\xf9\x9c\x10\x81\xfc\x08\xf1\x1c\x65\x98\xe1\xf8\x02\xca\x21\x97\x93\xe8\x9b\xed\xb6\x4a\x63\xf4\x26\xff\x7e\x37\x85\xdd\x2e\x0c\x96\x93\x06\xb3\x94\x97\xfe\x05\xc9\x40\x90\x6c\x46\x94\xaf\xd8\x62\x69\xc0\x05\xf5\xd9\x48\xc9\x67\x72\xd3\x40\xeb\x7c\x70\x16\x85\xa4\x56\x04\x4e\x12\x8d\x3e\x67\xe2\x2f\x2f\x0a\x59\x39\x30\x27\x1a\xe6\xc4\x8f\x97\x98\x29\x29\xfc\x34\xf1\xa2\x30\x60\x51\x18\x90\x28\x0c\x38\x6b\x88\x2f\x48\x79\xc3\x48\xbd\xf0\x1c\x89\x9a\xb3\x8d\xf5\x48\x59\xf6\x42\x1d\x1b\xfe\x3e\x28\x6f\xd9\xb6\x0d\x7c\x1a\xf3\xae\xac\xf2\x74\x68\x60\x22\x93\x2c\x6e\x92\xe5\x98\x45\xc9\x75\x69\xe1\x33\x31\x97\x2d\x66\xcf\x92\xcc\x7b\xea\xbb\xca\x3e\x96\x2f\xb5\xcc\xf1\xb5\xdd\x02\xbb\xff\x41\x80\xf7\xb3\x4c\x35\x7a\x30\x28\x7b\xba\x95\x97\x50\xaa\x50\xeb\xd3\xee\x1d\x5a\x1b\x25\xc5\x22\xaa\xa8\xde\x93\x55\xc1\xf4\x3a\x0c\x8a\x41\xa8\x37\xa7\x8b\xc5\xa2\x6c\x73\xce\x14\x04\x67\x12\xbd\xc9\xc3\x3c\xcd\x55\x00\x3b\xe5\x1e\x74\x4a\xbe\xa1\xa5\x0e\x20\x57\x54\xef\x11\x0d\xaa\x1b\xa9\xe7\x66\xd2\xd6\x9a\xba\x68\x72\xdc\x85\x0a\xbe\x25\x9c\xcd\x94\x7b\x1b\x00\x25\xa6\xbd\x6d\x1c\x6d\xcd\x62\x4a\x0c\x8e\xf2\x29\x1f\xbc\xc9\x78\xfc\xbd\x3f\xbe\xf7\xc7\x13\xef\xc2\x98\x3e\x2c\x89\xee\x10\x88\x83\x5d\xa1\x89\x3f\x99\x4e\x79\x3b\xd8\x85\x54\x8f\x92\x22\x3f\x4d\xe5\x60\x17\x52\x7d\xec\x94\xd4\xc7\xcb\x73\xfa\x25\x25\xc2\x30\xf3\x74\x9a\xac\x44\x76\x27\xfc\x7f\xce\x05\x1f\x94\xcc\x18\xbd\xd9\x74\x70\x6a\x32\x2f\xc3\xb9\xc6\xa3\x80\x2a\xb3\x2f\xd3\x36\xba\x02\x53\xb0\xdd\x48\xc2\x13\xc3\x36\x81\xf9\x3e\xc4\xdf\xec\xc2\xb5\xf5\x65\xd3\xbc\xa0\x3c\x85\x36\x64\xd6\xb8\x08\x3c\xb0\x71\xc0\x03\x2b\x70\x9f\xbe\x36\x8a\x25\x48\x41\xc8\xb5\x22\x49\x07\x57\xb9\xbb\x25\x12\xda\x0d\x9b\xe3\x55\x77\x70\x41\xb0\xef\x83\x69\x35\x79\x84\x81\x59\xf6\x73\xb4\x5f\xd1\xff\x23\x05\xda\xe5\x7c\xa5\xcb\x1f\x52\xb4\xcb\xd2\xe2\xd3\xea\xeb\x1c\x9e\x61\x0e\x47\xf9\xe5\x8e\xce\x4b\xaf\x08\x07\x05\xed\x1b\x49\x7f\xab\x30\xe8\xaa\xa2\xcd\xa3\x73\x7f\x84\x66\x26\xe9\x53\x37\xec\x5e\x4d\xb7\x1b\x3c\x90\xf3\xf4\x63\x76\xc8\xda\xa3\x23\x43\x43\xad\x5a\x39\xe9\xc8\xad\x33\xa6\xc4\xbe\x38\xaa\x59\xb8\x3e\xf4\x28\x85\x59\x8e\x3e\x19\xc5\xc4\x02\x06\x20\x18\x07\x8f\x12\xbd\x9c\x49\xa2\xa8\x57\x58\xd5\x0d\x7e\x47\xa2\x72\xf5\x7b\x3c\x52\xfb\x52\xb0\x6f\xaf\xd5\xdc\x17\x36\x76\xd8\x27\xfe\x03\xc3\x4e\x47\x02\x54\xc6\xe9\x0a\x85\x19\xad\x15\x33\x78\x57\x3f\x0f\xb0\x81\x0b\x8a\x9b\xb2\xac\x6f\x53\xa5\xec\x76\x6c\xc0\x60\xb7\x1b\x0e\xf7\xbb\xfc\x73\xa2\xcb\xab\xb2\x30\x70\x77\xc0\xf1\xab\x42\x41\x35\x0c\xd8\x10\xc6\xa3\xf1\xb9\x13\x41\x9e\x7e\x42\xaa\x9d\x24\x27\x33\xe4\xe0\x3e\x7d\x6a\x05\x56\x5e\x74\xf5\xfa\x4c\x91\x1b\xa2\x9f\x95\x07\x82\xeb\x4b\x51\x95\xe9\x90\x2a\x0c\x6c\xd2\x67\x0b\x82\x5c\xa3\x55\x85\x7f\x01\x55\x74\x1a\xc7\x76\x9b\xf9\x55\x96\x46\x59\xf0\xef\xdb\xcb\x92\x1f\xa0\x7c\xd5\xa4\x49\x93\x2f\x32\x81\xe1\x9c\xa4\xdc\xdc\x4e\x96\x4b\x6b\xd5\x7f\x1d\x05\xf9\x7a\xa7\xe7\x9b\xaf\x3f\x57\x3f\x8b\xee\x6b\xb5\xde\x7e\xbb\xad\xd6\xc2\xc0\x6d\x2f\xfe\xab\x6d\x56\x7b\xd4\x61\x50\x1c\xcf\x76\x3a\xfb\x3d\xfa\xab\xf6\xb3\x76\xbb\x27\xdc\xdf\xfd\x1b\x00\x00\xff\xff\x7a\xbc\x82\xc3\xe5\x18\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
