// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package miio

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x6f\xdb\xb6\x16\xfe\xbe\x5f\xc1\x69\x1d\x6c\xdf\x55\xb2\x93\xbe\x6c\xf0\xec\x5c\xb4\x49\x7b\x13\x20\xe9\x72\x9b\x6c\x40\xef\x30\x14\xb4\x48\x5b\x6c\x24\x52\x25\x29\x27\x59\xe0\xff\x7e\x41\x52\x92\x25\x47\x72\x2c\xd9\x49\x94\xd5\xfa\xd0\xca\xd4\xe1\xe1\x79\xce\x0b\x79\x48\x8a\xca\xcd\x0d\x40\x78\x4c\x28\x06\x96\xcb\xa8\xc4\x54\x5a\x60\x36\xfb\x6e\x80\xc8\x14\xb8\x3e\x14\x62\x68\x71\x76\x69\xed\x7d\x07\x00\x00\xd9\x52\x97\xf9\x76\x80\xec\x9d\x5d\xa0\xee\x44\x90\xdc\x5d\x09\x7b\x67\x37\xa6\x5f\xac\x73\xf5\x39\x84\x14\xfb\x99\xa7\xb7\x29\x12\x29\xf2\x34\x29\x1d\x67\x3e\x1e\x5a\x12\x8e\x8a\x38\xa5\x94\x91\x9f\x30\xa4\x70\x0a\x28\x9c\xda\x12\x8e\x04\x18\x41\xfe\x59\xdd\x58\x73\x36\x3e\x11\x45\x6d\xa5\x9c\x7c\x12\xd3\x86\x1c\x0b\x4c\x25\x94\x84\x51\xeb\xe6\x06\x90\x31\xc0\x5f\x81\x03\x5d\x55\x00\x2c\xa5\xb5\xa4\x4d\x55\x36\xc5\x8a\x08\x53\x04\x66\xb3\xbd\x01\x04\x1e\xc7\xe3\x61\x49\xbd\x2f\x70\x0a\x85\xcb\x49\x28\xfb\x53\x46\x50\xbb\xd7\xf9\x55\xd5\xf5\x05\x06\xb3\xd9\xcd\x0d\x70\x3e\xe2\xaf\x11\x16\xd2\xf9\xfd\xe3\xb1\x73\x0a\xa5\x67\x8a\x0d\x73\x6b\x4f\x31\xdd\xf9\x85\x02\xeb\x4c\x42\x19\x09\x0b\x38\x60\x36\x1b\x74\xe1\xde\xa0\xeb\x93\x0d\x40\x13\x58\x4a\x42\x27\xa2\x2e\xc4\x6c\xfd\x3a\x50\xff\x6d\x18\x0d\x13\x3e\x85\xd0\xd3\x36\x36\x0c\xde\x23\x42\x32\x7e\x5d\x17\x7b\xa6\xfa\x3a\xd0\x63\x36\x45\xc8\x0f\x93\x16\xee\x06\x3e\xe8\x46\x7e\xc9\x93\x4c\x08\x4a\x38\xb2\xcb\x83\x30\x57\x63\x21\x18\xb3\x1c\x54\x09\x18\x43\x84\x81\x51\x17\x20\x74\x09\xb7\xe5\x4e\x53\x5a\x4d\x0b\x32\x66\x3c\x48\x5a\x56\xf7\xb6\xc7\x38\xf9\x9b\x51\x09\x7d\xa0\x7f\xfb\x70\x84\x7d\xdb\xc7\x63\x99\xc4\xbd\x2a\xb6\x00\x82\x12\xda\x92\x4d\x26\xaa\x68\x0a\x7d\x82\xa0\x64\xdc\x02\x04\x0d\x33\xcd\xc7\x16\x50\xb6\x7d\xb6\x8a\x77\x5a\x20\xc0\xd2\x63\x68\x68\x85\x6c\x69\xd7\x52\xa4\x7b\xe8\xba\x8c\x23\xe5\x89\x39\x29\xec\x4c\x79\xbe\xe7\x02\x90\x13\x68\x07\x91\x2f\x89\xc0\x3e\x76\x55\xb9\x7a\xcc\x23\xbc\x42\xd3\x8b\xcd\x2f\xeb\x53\x0b\xeb\xc2\x5c\x4d\xdb\xc3\x10\x11\x3a\xc9\x08\x59\x86\xc3\x76\x7d\x0c\xa9\xa6\xcd\x99\xc1\x65\xbe\x0f\x43\x81\xe3\xe2\x10\x72\x4c\xe5\xd0\xfa\xa1\x48\x13\x26\xe6\xe6\x8f\x92\xba\x19\xde\x5a\x3b\xf8\x2a\x84\x14\x61\x14\xab\xc5\x14\x2a\x0f\xe7\xcc\x17\x19\xe1\x6e\xd7\x5f\x5d\x13\x5a\x1b\xde\xcb\xbc\x3a\x24\x91\x3e\xce\x84\xea\x7e\x2a\x97\x89\x55\xef\x65\x05\x55\x77\x61\x05\x62\x65\xd3\x9c\xe2\x0b\x74\x93\x13\x35\x79\x0e\xd2\x1b\x92\xf5\xb5\x38\xbe\xb5\xe6\x74\x38\xf9\x18\x8d\xae\x97\x1b\xb6\xa2\xf2\x16\xdd\xd0\x1e\x31\x74\x5d\x91\x09\x48\xbb\x12\xc7\x85\x3c\xc4\xf2\x84\x21\x7c\x57\x07\x72\x97\x34\x44\xe2\xc0\x74\x24\x13\xce\xa2\xb0\x86\x48\x9a\xa3\x56\x9b\xe2\x33\xb4\x8c\x6c\x76\xc0\x10\xb6\x31\x55\x11\x8b\xac\x79\x5a\xa5\xfd\xd2\x68\x19\xc4\x49\xd6\x8b\x24\xc7\x7a\x51\x98\x62\x55\xb9\xe6\xce\xa8\x85\x00\x4a\x08\x90\x0a\xe1\xd4\x51\x96\x86\xd7\xd5\x02\xd7\xd4\xcd\xed\xb4\xf2\x75\x82\xf8\xf5\xda\x88\x75\x0b\x84\x86\x91\x04\xf2\x3a\x54\x7d\x8c\x87\xdd\x8b\x11\xbb\x4a\x75\xfe\x45\xd8\xe2\x92\x48\xd7\xb3\x00\x85\x01\x2e\x31\x90\x8a\xa7\xc2\x07\xe9\xe0\xd5\x0e\x39\xa1\x32\xeb\x7b\xce\x3b\x43\xd4\x01\x71\xdf\xa3\xb2\x08\xd5\x3c\x46\xe9\x58\x0e\xba\x35\xb5\xd6\x45\x64\x5a\xbd\x6a\xdd\x6a\x0f\x16\x11\x84\x4a\x3c\xe1\xd0\x7f\xb0\x90\x00\x65\x61\x31\x97\x44\xc5\x05\x18\x88\x10\xd2\x74\x52\x84\xbf\x46\x84\x63\x64\xed\xfd\x6b\xd0\x55\x0f\xea\x1a\xf1\xe9\xc4\x8d\xc4\x57\xd2\xca\x65\x5a\xb1\x65\x8a\xc2\x66\xae\xbb\xc5\xb8\x99\x3f\x99\x42\x3f\xc2\x3a\xb3\xca\x86\xcc\x7e\xc4\xd5\xa0\x7f\x14\x93\xa9\x6c\x17\x24\xda\xce\xe8\x7d\x1b\x36\x79\xb5\x7a\x64\xe2\x3d\xee\x28\x62\x24\xd8\x86\x4a\xd5\x50\x31\x7a\x5b\x0c\x13\x53\xba\x34\x44\x0e\xc9\xc4\xdb\x86\xc7\x02\xc7\x92\xf0\xf0\xd9\xe5\xe3\x46\x87\x16\x60\x1b\x1c\x55\x83\x43\xab\x6d\x31\x36\x74\xe1\xd2\xd0\x38\x66\x97\xdb\xc8\x58\xe0\x58\x12\x19\x42\x42\x5f\xcd\x55\x03\xfc\xb8\x01\xa2\xe5\x00\x46\x8e\x6d\x9c\x54\x8d\x93\xac\x15\x17\xc3\x25\xfb\xac\x38\x6a\xce\x14\xc5\x39\x09\xf0\xd3\x0e\x9a\x74\x4e\x55\x77\xd5\x60\x0c\xe9\x29\xbb\xc4\xbc\x79\x6b\x06\x63\x48\xed\x50\x89\xf6\xf0\x41\xfa\x1e\x52\x10\x37\xbd\x8d\x4b\x3c\xb4\x38\xa4\x13\x6c\x81\x80\xd0\xa1\xd5\xb3\x40\x00\xaf\x86\xd6\x4e\xaf\xb7\x34\x54\x33\xe6\x53\xd1\x99\xf9\x99\x09\xc8\x8c\xf7\x3d\xe1\x20\xfc\xe7\xc7\x01\xd0\x7b\x46\xf2\x1b\x0e\x07\xb3\xd7\xb0\xe8\xca\x05\xfe\x0f\x0c\xe5\x6e\xa1\x3f\xd7\x17\x40\x0b\xc1\x42\xbd\x55\x14\x07\x50\x76\x9d\x3d\x12\x92\x05\xc9\x2a\xbb\x21\xdb\x68\x5b\x2f\x7e\xc9\x6c\xf5\xa5\x51\xfb\xe2\x17\xe5\x0e\x06\x30\xd6\x8b\xef\xe6\x2e\xb3\x53\x98\x8a\xf8\xdf\x88\x24\x0e\x74\x2f\x12\xbe\xee\x15\x49\xf8\xba\xb7\xba\x84\x6f\xa1\x0f\xa9\x9b\x2c\x0a\xdf\x8b\x90\x3f\xbf\x2a\x12\xf2\xe7\x57\xab\x0b\x79\x1e\xf1\x11\xbb\x47\x09\x55\xb7\x5e\x20\xe2\x4e\xaf\x82\x22\x4f\xe0\xd5\xbd\x4a\x58\xa8\xc4\x9d\x5e\x05\x2d\x9e\xb0\xd1\xa6\x24\x1c\x74\x4d\x43\x4f\x61\xa0\xaa\x97\x2d\x56\x6c\xac\x02\x79\x05\xd2\x38\x5d\x45\xab\x8b\xff\x48\xdb\xbc\x88\xa2\xfb\xd8\xe1\xd5\x6c\xeb\x6d\xee\xaa\xaa\x1b\xde\xd7\x3d\x60\x80\x32\x09\x10\x11\x32\xe2\xa3\xc7\xdc\xdd\xd5\x7a\x59\xbe\xb1\x5b\x6f\x57\xb7\x86\xd6\x36\xb5\xa1\x7b\xbf\xf9\x24\xa2\xe8\xf1\xf6\x60\xdf\x6d\xf7\x5d\x73\xfb\xae\x39\x63\x28\x0f\xcf\x15\xdc\xda\x67\x45\x14\x6d\x37\x58\x97\x70\x5c\x70\xf3\xc7\x59\xe2\x3b\x4f\x17\xf4\xfe\xf1\x0e\x6e\x16\xec\x12\xbf\xcd\xa9\x3b\xbf\x26\x90\x99\xf3\x23\x8a\x3e\x0b\x09\xb9\x74\xde\x33\x1e\x40\x09\xac\xdd\x5e\xef\xb5\xd3\xdb\x71\x7a\xbb\x60\xe7\x55\xbf\xf7\x52\xfb\xb4\x0d\x12\x62\x4c\xd1\x52\xd2\x27\xb0\x4a\xd0\x94\x14\xaa\x42\xf6\xf7\x48\xe9\x13\x93\x9e\x9a\x58\x6f\x3e\x81\x8a\x19\xd7\x4b\xa1\x4c\xe5\x0d\x27\x51\xbf\x19\x89\x1e\x2f\x77\x8a\x55\x72\x1f\xd9\x53\x2d\x85\x6d\xf8\x85\xb8\x29\xf3\xa3\xa0\x81\x2f\xc3\x19\xb9\x1e\x7e\x5c\xfa\x23\x6e\xf7\x9b\x18\x99\xea\x2c\x59\x27\x86\x51\xd1\x92\xdc\x67\x06\xae\xd4\x9f\x9e\xf0\x52\xf5\xda\xfb\x45\x6a\x8c\xff\x9b\xd1\x06\x86\x55\x22\xd9\xe3\x24\x7c\xa6\xe5\x6f\x22\xb4\xee\xdc\xa5\x9d\x5b\x42\x45\xd2\xfc\x57\x26\x96\x32\x6e\xf4\xcd\x45\xd3\xa3\x27\x83\x2b\x90\x0d\xba\xca\xb0\x4b\x8f\xaf\xe8\x73\x3c\xe5\x87\x7f\x96\xb2\x8f\x3b\x13\x11\x05\x01\xe4\xd7\x2b\xe8\x6f\xe1\x74\x1e\x90\x2c\xfc\x2c\x89\x8f\x45\x8d\x33\x1f\x90\x92\x00\x4a\x8c\xc0\xd8\x27\xe1\x11\xfd\xa4\x23\xc4\x9f\xd8\x2f\x93\x3e\xe2\x65\x12\x3c\x2f\x6b\x05\x4f\xee\x68\x11\xf1\xf5\xdb\x08\x72\x55\x41\x8b\x98\x10\x97\x51\x6b\x6f\x40\xd2\x98\x83\x60\x0c\x6d\xd7\x67\xee\x85\xba\x79\x75\x65\xed\x0d\xba\x64\xaf\xce\xbc\x24\xd7\x73\x44\x54\xea\xf4\x34\xb1\x8b\x73\xce\x24\x4c\x5e\x92\xa8\xc3\xdd\x7b\x91\xd9\xb8\x50\xbc\xe2\x97\x5d\x74\xc2\xfb\xe2\xb1\xe7\x43\xff\x44\x9f\xe0\x2c\x7c\x00\x97\x78\xc3\x31\xdc\x98\x4b\x40\x8e\xe1\xd6\x25\xee\xcd\x25\x3c\x28\x3c\x09\x27\x0f\xe0\x15\xfa\xb0\x57\x14\x8a\x8d\x79\x86\x1b\x33\x6c\x82\x77\xac\x40\xb6\x5a\x36\x90\x6c\x64\x61\x09\x89\x2f\x56\xc9\x1d\x8a\x4f\xa6\xdf\x59\x4b\x1f\x8c\xcc\x1c\x50\xf5\x31\xd0\xff\xda\x42\x72\x12\x62\xa4\x17\x53\x4c\x39\x92\x36\xc7\x22\x64\x54\x90\x29\x06\x94\x5d\x72\x18\x5a\x40\xc8\x6b\x35\xf1\xbf\x24\x48\x7a\xfd\x9d\x5e\xef\xc7\x2a\xce\x2d\x3d\x0c\x51\x15\x7a\x5e\xd1\x5d\xa4\x97\x3b\x06\xce\x65\xe6\x45\xca\x41\x57\x7a\x6b\xb0\x7b\x47\xd1\xe6\x98\x1d\x44\xdc\x9c\xb4\xde\x04\xb3\x37\xba\xaf\xac\xce\x68\xd0\xad\xa2\x5f\xc5\xbb\xa2\xf5\x46\x0c\x5d\xaf\x4e\x7f\x73\x03\xf4\xfc\x1c\x3c\x33\x61\x00\xfa\xc3\x4a\x11\x31\x6f\x97\x27\x0e\x6e\xc2\x2a\xe6\xe7\xec\xb3\x20\xf4\xb1\xea\xbc\x67\x33\x11\xb9\x2e\x16\x62\x7e\xf2\x1c\xa9\xa6\x79\xe6\x64\x79\x45\x7b\xa0\xbd\x81\x39\xd5\x1e\xcf\x87\x60\x18\xfa\xc4\xd5\x46\xee\xce\x8f\xbc\x5b\x7b\x88\xb9\x51\x80\xa9\x74\x2e\x39\x91\xb8\x8d\xa0\xc4\xe7\xec\x4c\x72\x42\x27\xed\xd6\xcd\x4d\x2a\xac\xf6\x5e\x95\x65\xe5\x56\xb9\xed\xde\x8e\xdd\xdb\x3d\xd7\xab\xdc\xfd\xde\xab\xff\xf5\x7e\xee\xf7\x7a\xaa\x27\x6c\x75\x3a\x83\xae\x69\x63\x6f\xd0\x95\x15\xcc\x74\x3f\xe2\xbf\xa3\xe8\x21\x85\xcf\xb4\x9c\x9c\x2e\x4e\x42\xcc\x84\xc5\x7a\x3c\xd3\xd4\xa6\x0a\x9f\x6a\xe1\x55\x7d\xd6\x38\xe8\x56\x08\xb0\x41\x57\x77\xea\x0f\x34\xa4\xcd\xc3\x6a\x95\x51\x8f\xd0\x31\xbb\xf3\xf3\x06\x8f\x32\x70\x55\x19\xb0\x2a\x0d\x56\x03\xe9\x25\x58\x02\x64\xab\x44\x71\x37\xb3\x07\xf0\x07\xe4\x44\x21\xa9\xd5\xa9\xdf\xc1\xd9\x8f\x2a\xb3\x5d\xcd\x91\x57\x1e\x1f\xaa\x8c\x0b\x15\x95\x8a\x32\x2f\x73\xbd\xd9\x4f\x71\x56\x1a\xb4\x34\x0f\xed\x93\xce\xc9\x9b\xfd\x4a\x0c\x56\x8f\xf8\x35\x70\x31\x84\xfd\xf5\x91\x29\x2e\x8d\xc3\x76\x08\x39\xba\x84\x1c\x83\x29\xe6\x22\x9b\x1d\xd5\x85\x99\x30\xfc\xc3\xf0\x6b\x1c\xe0\xf7\x84\x07\x1b\x05\x9c\x30\x6c\x2a\xe0\x73\x76\x81\xd7\x47\xa9\xb9\x34\x0e\xdb\x31\x19\xe3\xfc\x0c\xa1\x2e\x3e\xc5\x29\x5d\x60\x6b\x12\xc4\x37\x3a\x69\x06\x21\x23\x54\x82\xb7\x67\x67\x47\x07\x6b\x63\x35\x2c\x4f\x15\x47\x47\x73\x6c\x36\xe8\x8f\x67\x67\x47\x1b\xc5\xac\x18\x36\x1b\xf2\xc6\xcd\xdc\x48\x2b\x7f\xc0\xf2\x92\xf1\x0b\xe0\x33\x17\xfa\xe0\xe8\x74\x6d\xc4\x31\x43\xe7\x58\x31\x3c\x3a\x6d\x2c\xe0\x09\x94\xf8\x12\x5e\x6f\x0c\xef\x7f\x0c\xbf\xc6\xe2\x0d\xa0\xb8\xd8\x18\xd8\x13\x28\x2e\xee\x01\xe9\x4a\x53\xbb\x95\xa6\x74\xf3\xb9\xda\x2a\x33\xb1\x4b\x32\x26\xdb\x99\xd8\x76\x26\x56\x48\x5b\x37\xf0\xce\x24\x94\x6b\xe5\x44\xca\x2b\x1d\xcd\xa5\x71\x9d\xca\x9b\x48\x7a\x60\x0c\x89\x0f\xcc\xfe\xc7\xba\x28\x15\xbf\xf7\x90\xf8\xfb\x8a\x5b\xe3\xd0\xee\x33\x4a\xb1\x2b\x41\xbc\x78\xba\x21\xcc\x31\xd7\x33\xc3\xb4\xd9\xc8\x37\x68\xea\x98\x65\x73\xad\x7d\x70\xb8\x7f\xba\x49\xc0\x8a\xdf\x7d\xa2\x7d\xac\x41\x53\xe8\xcf\x0d\x6f\x87\xcd\xed\xb0\x59\x48\x5b\x7b\xa1\x0f\x0b\x01\x27\x1b\x59\x1a\x32\x1e\xea\xc4\x1c\x9b\xba\x36\x94\x00\x16\xf8\x6b\x84\xa9\xbb\x56\xca\x90\x47\x7c\x16\x73\x6c\x1c\xe4\xb5\x53\xa3\x18\x67\x33\x93\xa3\xb7\x50\x4a\xcc\xd7\x9a\x59\xc6\xf8\x62\x4e\x60\x36\x03\x3f\x36\x0b\xa3\xde\x6d\x5c\x7b\xd5\x2f\x86\xa9\x99\x35\x72\xe1\xcf\xc0\x84\xd9\x17\x0d\xd6\x84\x19\x6f\xa9\x82\x20\x18\x88\x28\xdc\xdb\x1d\x74\xd5\x7f\xcd\x42\xfd\x8e\x73\xc6\x37\x00\x58\xf3\x69\x9c\x4d\x4f\x60\x08\xe2\xaf\xfe\x6f\xa2\xab\x85\xe1\xa9\x61\xd6\x38\xa0\x47\x14\xb8\x0b\x9f\x1c\x5f\x03\xe8\x11\x4d\xde\x30\x68\x22\x50\x8e\x65\xc4\x37\x86\xf4\x63\xc2\xad\x89\x50\xc7\x1c\x0b\x0f\x88\x0d\x0d\xa1\x47\xf4\xbd\xe2\xd7\xcc\x91\xf4\x18\x8e\x80\xc8\xfd\x55\x93\x35\x90\x1e\xc3\xd1\x59\x32\x65\x69\x16\xcc\x85\x2f\xac\xad\x85\xf2\xfd\xfc\x23\x62\xcd\x02\x79\xf0\xe1\x20\xff\xa1\xf9\xb5\x60\x1e\x7c\x38\x88\x8f\xfe\x3f\x91\x19\x75\x7d\x8a\x25\x6f\x26\x95\x3c\x2a\x28\x5e\x28\xca\xfc\x8c\x6f\xe3\xff\x32\x4b\x00\x99\x3f\x0d\xa5\xe6\x87\xe9\x31\x96\x15\xff\x58\xcb\xcd\x8d\x0e\x5d\xe2\x1e\x9e\x9f\x1c\x83\xb6\xb9\xff\xfd\xe3\x31\xb0\xba\x08\x0a\x6f\xc4\x20\x47\x5d\x28\x04\x96\xa2\x3b\xc5\x14\x31\x2e\xba\x23\xc6\xa4\x90\x1c\x86\x36\x82\x12\xeb\xb7\x22\x43\xe2\x5e\x60\xde\x75\x85\xe8\x2e\x94\x39\x01\xa1\x8e\x2b\x84\x05\xc6\xd0\x17\xb8\x93\x91\x2f\x86\x50\x0c\xe6\x8b\x78\x08\x28\xe9\x1f\x94\xe9\x7e\xc9\xfc\xd0\x32\x7f\xb9\x25\x72\xdd\x46\x02\x16\x60\x2a\x55\x0b\xe6\x6e\xc3\xec\xcb\xcd\xf1\xa5\xd8\x1a\xf9\xa6\xe7\xde\xb6\xd2\x2b\x96\x39\x7f\x7d\xd6\x4e\xde\xb8\xec\x38\x1c\x43\x74\xdd\x1e\x47\xd4\xd8\xa8\xdd\x01\x37\xb7\x5c\x7e\x0a\x79\x69\x00\x8d\x03\x79\x44\xc1\x10\xb4\x3e\x7d\xfa\xf4\xc9\x39\x39\x71\x0e\x0e\xc0\xe1\x61\x3f\x08\x5a\xcf\x97\xd5\xf9\x2d\x92\xaa\x92\xa1\xbc\x45\xf8\xeb\xed\x35\xb2\x67\xed\xd6\x0f\xc9\x97\x1f\x5a\x1d\x67\x41\x41\xed\xdb\x42\xab\x4b\x11\x9f\x6a\x02\xd0\x07\x92\x47\xb8\x58\xa6\x39\xd9\xee\xcb\x43\x16\xad\x4a\x7c\x44\x5d\x8e\x95\x16\x41\x1f\xec\xdc\x45\x7c\x86\x5d\x46\x91\x00\x7d\x63\xc3\x62\x72\x65\xbd\xeb\xb7\x91\x94\x8c\xee\xfb\xca\x5f\x44\x1f\xb4\x46\x92\xda\xf1\xe2\x78\x89\x4e\xf5\xf6\x32\x06\xfd\x02\xd3\x25\xd7\xd8\xbc\x32\xdb\x37\xf6\x2a\x24\x9b\x95\xc8\x14\x49\xf6\x7b\xa8\xf4\x7d\x44\xc3\x48\xc6\xf2\xdf\x22\x9d\x75\x1c\x46\xdb\x2d\xe1\xb1\xcb\x45\xe3\xb4\x9e\x83\xc4\xbf\xda\x78\xfa\x1c\x98\xd2\x22\x47\x53\x57\xec\xf1\x2e\xa3\x12\x12\x8a\xb9\x33\x26\x14\xb5\x5b\x8e\x82\x48\x11\xe4\xb6\x1e\x19\x5a\x1d\xc7\x23\x08\xb7\x3b\xbf\x96\x49\xa2\x75\xb9\x9e\x28\xcf\xda\xd2\x23\xa2\xe3\x4c\xa1\xdf\x8e\xc5\xd2\x9f\x13\x39\x80\x12\x3b\x46\xa3\x6d\xe3\xcb\x1d\xf0\x53\x0b\xd8\xa0\xf5\x53\x4c\x86\x29\x2a\x20\xea\x38\xae\xa7\x64\x29\x96\xfa\x6e\xa7\x57\x72\x14\x0a\x6a\x3a\x28\xfd\xae\xf4\x8a\x1f\x3d\x51\x8a\x50\x9e\xd0\xb9\x85\xa3\xb0\x01\x0d\xae\xe4\xd9\x62\xe3\x77\x7d\x44\xa5\xac\xe9\x32\x05\x24\xa3\x06\xd0\x27\x83\xff\x24\xe8\xaf\xe7\x60\x5e\x68\x3e\x89\x97\x2d\x91\xf8\x4a\x42\x8e\xa1\xa2\x6c\xa5\x2a\x4f\xcd\x5e\x66\xec\x65\x9d\x9c\xba\x30\x18\x26\x0e\x51\xde\xb3\xa9\x0b\x41\x09\xc1\x10\xdc\x94\xc4\x53\x72\x5d\x80\x21\xc0\x4e\xc8\x59\xd8\x6e\x11\xd4\xea\x14\x12\x17\xa8\x44\x5d\x64\x0c\xda\x49\x5d\xd5\xef\xb7\x3a\x60\x38\x1c\x82\x56\xf2\x15\xa8\x56\x19\xc8\x44\xbe\x3f\x2f\xfe\xca\x34\x1f\x7f\xd4\xa9\xd5\x01\xdf\x0f\x41\xab\x75\xdb\x39\xd5\x35\x33\x6f\x5f\xaf\xc6\x57\x79\x6a\x31\xa2\x92\xed\x8f\x67\x0e\xfc\x02\xaf\x4a\xba\x71\x75\x29\x98\xfd\x9c\x3f\xb4\x3a\xb1\xf8\xe6\x6f\xc2\xb5\x96\x98\x25\xe2\x7e\x49\x5d\x93\x9a\x2c\xab\xab\x60\xf5\xf5\xbf\xe5\x34\x71\xf7\xdc\x07\xf3\x71\xb4\xb4\x53\x49\x2e\x65\x43\xee\x70\x2c\x22\x5f\x1a\xeb\x8d\x21\xf1\xb5\x15\x96\x57\x54\x17\xc5\x97\xe0\xf4\x03\x93\x64\x7c\xbd\x44\x67\xd9\x4b\x7f\x12\xa6\x0f\x5a\x7a\xd9\x68\xc9\xd8\x9c\xab\x83\xaf\x64\x1f\x70\x27\x30\x2b\xde\x2b\x56\xd2\x86\x6a\xe1\x0a\xed\x08\x79\xed\x13\x3a\x51\x63\x5d\x92\x14\xbd\xb8\x9d\x14\x2c\x5e\xb3\x82\x5e\x34\xf7\x3c\x3d\x37\xde\x4e\x21\x80\xef\x95\xa2\x23\x6a\xd2\xd5\xfb\xd6\xf5\xd9\xd2\x51\xfb\x56\xad\x35\xb4\xbd\x3c\x3f\x58\xbc\xee\x49\xdf\xa5\x4f\x8b\x9f\x14\xf1\x5b\x2c\xcb\xfe\x4e\x4f\xf3\x94\x4d\x44\xfe\x1f\x00\x00\xff\xff\x37\xd7\xb2\x62\x6f\x77\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xcd\x4a\xc3\x40\x14\x85\x6f\xd1\x55\x96\xae\x5d\x5c\x41\x8b\x82\x53\x33\xd5\x45\x9d\x76\x5a\x51\x5a\x10\x1b\x90\x12\xdd\x5f\x9a\x31\x1d\x4c\x66\xc2\xfc\x88\x42\x5f\xc3\xd7\xf3\x59\xa4\xa9\x56\x3c\xab\xf3\x71\xbe\x0b\xf7\xeb\x60\xff\x13\x00\xa0\x03\x00\x87\x00\x70\x0c\x00\x7b\x00\x70\x0e\xdb\x0c\x00\x60\xd2\x01\xb8\xfe\x71\x76\x59\xa8\xc6\xba\xc0\x32\x5f\xea\x82\xdd\xc6\xd2\xb3\xdc\x0a\x2c\xd4\xdb\xcd\xab\x5e\x51\x6d\x7b\x2e\x26\x73\xf2\x81\xe5\x8e\x8c\xaf\x28\x58\x27\xf0\xa1\x9d\x30\x8b\x8e\x6a\x5b\x58\x1c\xfd\xf3\xc7\xc9\x9c\x4c\x19\xa9\x54\x2c\x57\x54\x0b\xdc\xb1\xc0\x45\xf4\x5e\x93\x49\xb2\xfb\x6c\xca\x9e\x95\xf3\xda\x1a\x81\xbc\x97\x26\x77\xd6\x04\x65\x02\xcb\x3f\x1a\x25\x30\xa8\xf7\x70\xd1\x54\xa4\xcd\x10\x97\x2b\x72\x5e\x05\xf9\x94\xcf\xd8\xe0\xcf\xdb\xfc\xf3\xa2\x1c\x9b\x9a\xa5\x2d\xb4\x29\x05\x26\x8f\x55\x74\x54\xb1\x99\x75\xb5\x17\x68\x9a\x16\xbd\xbc\x1c\xe2\xb6\x4a\x73\xc2\x53\x29\x39\x76\xbb\xb8\xa9\xe9\x91\xe4\x1c\x27\x98\xa2\x68\x79\x2c\xfb\xbf\xd3\x48\x5e\x6d\xea\x69\xab\x8d\x78\x8a\xeb\xf5\xf6\x64\x2c\xfb\xe9\x19\x4e\x90\xa3\xc0\xfe\x10\xbe\x03\x00\x00\xff\xff\xcf\x65\x2a\xf0\x79\x01\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
