// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
package miio

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x6f\xdb\xb6\xb7\x7f\xff\xff\x14\x9c\xd6\xc1\xf6\x5d\x25\x3b\xe9\xc3\x06\xcf\xce\x45\x9b\xb4\x37\x01\x92\x2e\xb7\xc9\x06\x14\xc3\x50\xd0\x22\x6d\xb1\x91\x48\x95\xa4\x9c\x64\x81\xbf\xfb\x1f\x24\x25\x59\x72\x24\xc7\x92\x9d\x58\x5d\xad\x17\xad\x42\x1d\x1e\x9e\xdf\x79\x20\x0f\x49\x51\xbe\xbb\x03\x08\x8f\x09\xc5\xc0\x72\x19\x95\x98\x4a\x0b\xcc\x66\xff\x19\x20\x32\x05\xae\x0f\x85\x18\x5a\x9c\x5d\x5b\x07\xff\x01\x00\x80\x6c\xa9\xcb\x7c\x3b\x40\xf6\xde\x3e\x50\x77\x22\x48\xee\x6e\x84\xbd\xb7\x1f\xd3\x2f\xd6\xb9\xf9\x1c\x42\x8a\xfd\xcc\xd3\xfb\x14\x89\x14\x79\x9a\x94\x8e\x33\x1f\x0f\x2d\x09\x47\x45\x9c\x52\xca\xc8\x4f\x18\x52\x38\x05\x14\x4e\x6d\x09\x47\x02\x8c\x20\xff\xac\x6e\xac\x39\x1b\x9f\x88\xa2\xb6\x52\x4e\x3e\x89\x69\x43\x8e\x05\xa6\x12\x4a\xc2\xa8\x75\x77\x07\xc8\x18\xe0\xaf\xc0\x81\xae\x2a\x00\x96\xd2\x5a\xd2\xa6\x2a\x9b\x62\x45\x84\x29\x02\xb3\xd9\xc1\x00\x02\x8f\xe3\xf1\xb0\xa4\xde\x17\x38\x85\xc2\xe5\x24\x94\xfd\x29\x23\xa8\xdd\xeb\xfc\xa6\xea\xfa\x02\x83\xd9\xec\xee\x0e\x38\x1f\xf1\xd7\x08\x0b\xe9\xfc\xf1\xf1\xd4\x39\x87\xd2\x33\xc5\x86\xb9\x75\xa0\x98\xee\xfd\x4a\x81\x75\x21\xa1\x8c\x84\x05\x1c\x30\x9b\x0d\xba\xf0\x60\xd0\xf5\xc9\x06\xa0\x09\x2c\x25\xa1\x13\x51\x17\x62\xb6\x7e\x1d\xa8\xff\x6b\x18\x0d\x13\x3e\x85\xd0\xd3\x36\x36\x0c\xde\x23\x42\x32\x7e\x5b\x17\x7b\xa6\xfa\x3a\xd0\x63\x36\x45\xc8\x8f\x93\x16\x1e\x06\x3e\xe8\x46\x7e\xc9\x93\x4c\x08\x4a\x38\xb2\xcb\x83\x30\x57\x63\x21\x18\xb3\x1c\x54\x09\x18\x43\x84\x81\x51\x17\x20\x74\x09\xb7\xe5\x4e\x53\x5a\x4d\x0b\x32\x66\x3c\x48\x5a\x56\xf7\xb6\xc7\x38\xf9\x87\x51\x09\x7d\xa0\xff\xf6\xe1\x08\xfb\xb6\x8f\xc7\x32\x89\x7b\x55\x6c\x01\x04\x25\xb4\x25\x9b\x4c\x54\xd1\x14\xfa\x04\x41\xc9\xb8\x05\x08\x1a\x66\x9a\x8f\x2d\xa0\x6c\xfb\x6c\x15\xef\xb4\x40\x80\xa5\xc7\xd0\xd0\x0a\xd9\xd2\xae\xa5\x48\xf7\xd0\x75\x19\x47\xca\x13\x73\x52\xd8\x99\xf2\x7c\xcf\x05\x20\x27\xd0\x0e\x22\x5f\x12\x81\x7d\xec\xaa\x72\xf5\x98\x47\x78\x85\xa6\x17\x9b\x5f\xd6\xa7\x16\xd6\x85\xb9\x9a\xb6\x87\x21\x22\x74\x92\x11\xb2\x0c\x87\xed\xfa\x18\x52\x4d\x9b\x33\x83\xcb\x7c\x1f\x86\x02\xc7\xc5\x21\xe4\x98\xca\xa1\xf5\x63\x91\x26\x4c\xcc\xcd\x1f\x25\x75\x33\xbc\xb5\x76\xf0\x4d\x08\x29\xc2\x28\x56\x8b\x29\x54\x1e\xce\x99\x2f\x32\xc2\xdd\xaf\xbf\xba\x26\xb4\x36\xbc\x97\x79\x75\x48\x22\x7d\x9c\x09\xd5\xc3\x54\x2e\x13\xab\xde\xcb\x0a\xaa\xee\xc2\x0a\xc4\xca\xa6\x39\xc5\x17\xe8\x26\x27\x6a\xf2\x1c\xa4\x37\x24\xeb\x6b\x71\x7c\x6b\xcd\xe9\x70\xf2\x31\x1a\xdd\x2e\x37\x6c\x45\xe5\x2d\xba\xa1\x3d\x62\xe8\xb6\x22\x13\x90\x76\x25\x8e\x0b\x79\x88\xe5\x19\x43\xf8\xa1\x0e\xe4\x21\x69\x88\xc4\x81\xe9\x48\x26\x9c\x45\x61\x0d\x91\x34\x47\xad\x36\xc5\x67\x68\x19\xd9\xec\x80\x21\x6c\x63\xaa\x22\x16\x59\xf3\xb4\x4a\xfb\xa5\xd1\x32\x88\x93\xac\x17\x49\x8e\xf5\xa2\x30\xc5\xaa\x72\xcd\x9d\x51\x0b\x01\x94\x10\x20\x15\xc2\xa9\xa3\x2c\x0d\xaf\xab\x05\xae\xa9\x9b\xfb\x69\xe5\xeb\x04\xf1\xeb\xb5\x11\xeb\x16\x08\x0d\x23\x09\xe4\x6d\xa8\xfa\x18\x0f\xbb\x57\x23\x76\x93\xea\xfc\x8b\xb0\xc5\x35\x91\xae\x67\x01\x0a\x03\x5c\x62\x20\x15\x4f\x85\x0f\xd2\xc1\xab\x1d\x72\x42\x65\xd6\xf7\x9c\x77\x86\xa8\x03\xe2\xbe\x47\x65\x11\xaa\x79\x8c\xd2\xb1\x1c\x74\x6b\x6a\xad\x8b\xc8\xb4\x7a\xd5\xba\xd5\x9e\x2c\x22\x08\x95\x78\xc2\xa1\xff\x64\x21\x01\xca\xc2\x62\x2e\x89\x8a\x0b\x30\x10\x21\xa4\xe9\xa4\x08\x7f\x8d\x08\xc7\xc8\x3a\xf8\x9f\x41\x57\x3d\xa8\x6b\xc4\x6f\x27\x6e\x24\xbe\x91\x56\x2e\xd3\x8a\x2d\x53\x14\x36\x73\xdd\x2d\xc6\xcd\xfc\xc9\x14\xfa\x11\xd6\x99\x55\x36\x64\x0e\x23\xae\x06\xfd\x93\x98\x4c\x65\xbb\x20\xd1\x76\x46\xef\xbb\xb0\xc9\xab\xd5\x23\x13\x6f\xbb\xa3\x88\x91\x60\x17\x2a\x55\x43\xc5\xe8\x6d\x31\x4c\x4c\xe9\xd2\x10\x39\x26\x13\x6f\x17\x1e\x0b\x1c\x4b\xc2\xc3\x67\xd7\xdb\x8d\x0e\x2d\xc0\x2e\x38\xaa\x06\x87\x56\xdb\x62\x6c\xe8\xc2\xa5\xa1\x71\xca\xae\x77\x91\xb1\xc0\xb1\x24\x32\x84\x84\xbe\x9a\xab\x06\x78\xbb\x01\xa2\xe5\x00\x46\x8e\x5d\x9c\x54\x8d\x93\xac\x15\x17\xc3\x25\xfb\xac\x38\x6a\x2e\x14\xc5\x25\x09\xf0\xb7\x1d\x34\xe9\x9c\xaa\xee\xaa\xc1\x18\xd2\x73\x76\x8d\x79\xf3\xd6\x0c\xc6\x90\xda\xa1\x12\xed\xe9\x83\xf4\x3d\xa4\x20\x6e\x7a\x17\x97\x78\x68\x71\x48\x27\xd8\x02\x01\xa1\x43\xab\x67\x81\x00\xde\x0c\xad\xbd\x5e\x6f\x69\xa8\x66\xcc\xa7\xa2\x33\xf3\x67\x26\x20\x33\xde\xf7\x0d\x07\xe1\xbf\x3f\x0e\x80\xde\x33\x92\xdf\x71\x38\x98\xbd\x86\x45\x57\x2e\xf0\x7f\x60\x28\xf7\x0b\xfd\xb9\xbe\x00\x5a\x08\x16\xea\xad\xa2\x38\x80\xb2\xeb\xec\x91\x90\x2c\x48\x56\xd9\x0d\xd9\x46\xdb\x7a\xf1\x6b\x66\xab\x2f\x8d\xda\x17\xbf\x2a\x77\x30\x80\xb1\x5e\x7c\x37\x77\x99\x9d\xc2\x54\xc4\xff\x8f\x48\xe2\x40\x8f\x22\xe1\xeb\x5e\x91\x84\xaf\x7b\xab\x4b\xf8\x16\xfa\x90\xba\xc9\xa2\xf0\xa3\x08\xf9\xcb\xab\x22\x21\x7f\x79\xb5\xba\x90\x97\x11\x1f\xb1\x47\x94\x50\x75\xeb\x05\x22\xee\xf5\x2a\x28\xf2\x0c\xde\x3c\xaa\x84\x85\x4a\xdc\xeb\x55\xd0\xe2\x19\x1b\x6d\x4a\xc2\x41\xd7\x34\xf4\x2d\x0c\x54\xf5\xb2\xc5\x8a\x8d\x55\x20\xaf\x40\x1a\xa7\xab\x68\x75\xf1\xb7\xb4\xcd\x8b\x28\x7a\x8c\x1d\x5e\xcd\xb6\xde\xe6\xae\xaa\xba\xe1\x7d\xdd\x23\x06\x28\x93\x00\x11\x21\x23\x3e\xda\xe6\xee\xae\xd6\xcb\xf2\x8d\xdd\x7a\xbb\xba\x35\xb4\xb6\xa9\x0d\xdd\xc7\xcd\x27\x11\x45\xdb\xdb\x83\x7d\xb7\xdb\x77\xcd\xed\xbb\xe6\x8c\xa1\x3c\x3c\x57\x70\x6f\x9f\x15\x51\xb4\xdb\x60\x5d\xc2\x71\xc1\xcd\xb7\xb3\xc4\x77\x99\x2e\xe8\xfd\xeb\x1d\xdc\x2c\xd8\x25\x7e\x9b\x53\x77\x7e\x4d\x20\x33\xe7\x47\x14\x7d\x16\x12\x72\xe9\xbc\x67\x3c\x80\x12\x58\xfb\xbd\xde\x6b\xa7\xb7\xe7\xf4\xf6\xc1\xde\xab\x7e\xef\xa5\xf6\x69\x1b\x24\xc4\x98\xa2\xa5\xa4\xdf\xc0\x2a\x41\x53\x52\xa8\x0a\xd9\xdf\x96\xd2\x27\x26\x3d\x35\xb1\xde\x7c\x02\x15\x33\xae\x97\x42\x99\xca\x1b\x4e\xa2\x7e\x37\x12\x6d\x2f\x77\x8a\x55\xf2\x18\xd9\x53\x2d\x85\x6d\xf8\x85\xb8\x29\xf3\xa3\xa0\x81\x2f\xc3\x19\xb9\x9e\x7e\x5c\xfa\x33\x6e\xf7\xbb\x18\x99\xea\x2c\x59\x27\x86\x51\xd1\x92\xdc\x67\x06\xae\xd4\x9f\xbe\xe1\xa5\xea\xb5\xf7\x8b\xd4\x18\xff\x0f\xa3\x0d\x0c\xab\x44\xb2\xed\x24\x7c\xa6\xe5\xef\x22\xb4\x1e\xdc\xa5\x9d\x5b\x42\x45\xd2\xfc\xaf\x4c\x2c\x65\xdc\xe8\xbb\x8b\xa6\xad\x27\x83\x2b\x90\x0d\xba\xca\xb0\x4b\x8f\xaf\xe8\x73\x3c\xe5\x87\x7f\x96\xb2\x8f\x3b\x13\x11\x05\x01\xe4\xb7\x2b\xe8\x6f\xe1\x74\x1e\x90\x2c\xfc\x2c\x89\x8f\x45\x8d\x33\x1f\x90\x92\x00\x4a\x8c\xc0\xd8\x27\xe1\x09\xfd\xa4\x23\xc4\x9f\xd8\x2f\x93\x3e\xe2\x65\x12\x3c\x2f\x6b\x05\x4f\xee\x68\x11\xf1\xf5\xdb\x08\x72\x55\x41\x8b\x98\x10\x97\x51\xeb\x60\x40\xd2\x98\x83\x60\x0c\x6d\xd7\x67\xee\x95\xba\x79\x75\x63\x1d\x0c\xba\xe4\xa0\xce\xbc\x24\xd7\x73\x44\x54\xea\xf4\x34\xb1\x8b\x73\xc9\x24\x4c\x5e\x92\xa8\xc3\xdd\x7b\x91\xd9\xb8\x50\xbc\xe2\x97\x5d\x74\xc2\xfb\x62\xdb\xf3\xa1\x7f\xa3\x4f\x70\x16\x3e\x81\x4b\xbc\xe1\x18\x6e\xcc\x25\x20\xc7\x70\xe7\x12\x8f\xe6\x12\x1e\x14\x9e\x84\x93\x27\xf0\x0a\x7d\xd8\x2b\x0a\xc5\xc6\x3c\xc3\x8d\x19\x36\xc1\x3b\x56\x20\x5b\x2d\x1b\x48\x36\xb2\xb0\x84\xc4\x17\xab\xe4\x0e\xc5\x27\xd3\x1f\xac\xa5\x0f\x46\x66\x0e\xa8\xfa\x18\xe8\x7f\x6d\x21\x39\x09\x31\xd2\x8b\x29\xa6\x1c\x49\x9b\x63\x11\x32\x2a\xc8\x14\x03\xca\xae\x39\x0c\x2d\x20\xe4\xad\x9a\xf8\x5f\x13\x24\xbd\xfe\x5e\xaf\xf7\x53\x15\xe7\x96\x1e\x86\xa8\x0a\x3d\xaf\xe8\x2e\xd2\xcb\x1d\x03\xe7\x32\xf3\x22\xe5\xa0\x2b\xbd\x35\xd8\xbd\xa3\x68\x73\xcc\x8e\x22\x6e\x4e\x5a\x6f\x82\xd9\x1b\xdd\x57\x56\x67\x34\xe8\x56\xd1\xaf\xe2\x5d\xd1\x7a\x23\x86\x6e\x57\xa7\xbf\xbb\x03\x7a\x7e\x0e\x9e\x99\x30\x00\xfd\x61\xa5\x88\x98\xb7\xcb\x13\x07\x37\x61\x15\xf3\x73\x0e\x59\x10\xfa\x58\x75\xde\xb3\x99\x88\x5c\x17\x0b\x31\x3f\x79\x8e\x54\xd3\x3c\x73\xb2\xbc\xa2\x3d\xd0\xc1\xc0\x9c\x6a\x8f\xe7\x43\x30\x0c\x7d\xe2\x6a\x23\x77\xe7\x47\xde\xad\x03\xc4\xdc\x28\xc0\x54\x3a\xd7\x9c\x48\xdc\x46\x50\xe2\x4b\x76\x21\x39\xa1\x93\x76\xeb\xee\x2e\x15\x56\x7b\xaf\xca\xb2\x72\xab\xdc\x76\x6f\xcf\xee\xed\x5f\xea\x55\xee\x7e\xef\x95\xdd\xfb\xa5\xdf\xeb\xa9\x9e\xb0\xd5\xe9\x0c\xba\xa6\x8d\x83\x41\x57\x56\x30\xd3\xe3\x88\xff\x8e\xa2\xa7\x14\x3e\xd3\x72\x72\xba\x38\x09\x31\x13\x16\xeb\xf1\x4c\x53\x9b\x2a\x7c\xaa\x85\x57\xf5\x59\xe3\xa0\x5b\x21\xc0\x06\x5d\xdd\xa9\x3f\xd1\x90\x36\x0f\xab\x55\x46\x3d\x42\xc7\xec\xc1\xcf\x1b\x6c\x65\xe0\xaa\x32\x60\x55\x1a\xac\x06\xd2\x4b\xb0\x04\xc8\x56\x89\xe2\x7e\x66\x0f\xe0\x4f\xc8\x89\x42\x52\xab\x53\x7f\x80\xb3\x1f\x55\x66\xbb\x9a\x23\xaf\x3c\x3e\x54\x19\x17\x2a\x2a\x15\x65\x5e\xe6\x7a\x73\x98\xe2\xac\x34\x68\x69\x1e\xda\x27\x9d\xb3\x37\x87\x95\x18\xac\x1e\xf1\x6b\xe0\x62\x08\xfb\xeb\x23\x53\x5c\x1a\x87\xed\x18\x72\x74\x0d\x39\x06\x53\xcc\x45\x36\x3b\xaa\x0b\x33\x61\xf8\xa7\xe1\xd7\x38\xc0\xef\x09\x0f\x36\x0a\x38\x61\xd8\x54\xc0\x97\xec\x0a\xaf\x8f\x52\x73\x69\x1c\xb6\x53\x32\xc6\xf9\x19\x42\x5d\x7c\x8a\x53\xba\xc0\xd6\x24\x88\x6f\x74\xd2\x0c\x42\x46\xa8\x04\x6f\x2f\x2e\x4e\x8e\xd6\xc6\x6a\x58\x9e\x2b\x8e\x8e\xe6\xd8\x6c\xd0\x1f\x2f\x2e\x4e\x36\x8a\x59\x31\x6c\x36\xe4\x8d\x9b\xb9\x91\x56\xfe\x80\xe5\x35\xe3\x57\xc0\x67\x2e\xf4\xc1\xc9\xf9\xda\x88\x63\x86\xce\xa9\x62\x78\x72\xde\x58\xc0\x13\x28\xf1\x35\xbc\xdd\x18\xde\xff\x33\xfc\x1a\x8b\x37\x80\xe2\x6a\x63\x60\xcf\xa0\xb8\x6a\x1c\xd2\x73\xe8\x5e\x61\x29\x80\x5e\x92\x9d\xbf\x4c\x54\x07\x6c\x68\x58\x7d\x8e\x59\x3d\x02\xd4\x95\x66\xb1\x2b\xcd\x5e\xe7\xd3\xd2\x55\x26\x9d\xd7\x64\x4c\x76\x93\xce\xdd\xa4\xb3\x90\xb6\x6e\xe4\x5d\x48\x28\xd7\x4a\xff\x94\x57\x3a\x9a\x4b\xe3\x7a\x95\x37\x91\xf4\xc0\x18\x12\xdf\xf4\x2b\x6b\xa3\x54\xfc\xde\x43\xe2\x1f\x2a\x6e\x8d\x43\x7b\xc8\x28\xc5\xae\x04\xf1\x3a\xf1\x86\x30\xc7\x5c\x2f\x0c\xd3\x66\x23\xdf\xa0\xa9\x63\x96\xcd\xb5\xf6\xd1\xf1\xe1\xf9\x26\x01\x2b\x7e\x8f\x89\x76\x5b\x83\xa6\xd0\x5f\x56\xde\x0d\x9b\xbb\x61\xb3\x90\xb6\xf6\x9a\x26\x16\x02\x4e\x36\xb2\x0a\x66\x3c\xd4\x89\x39\x36\x75\x19\x2c\x01\x2c\xf0\xd7\x08\x53\x77\xad\x94\x21\x8f\xf8\x22\xe6\xd8\x38\xc8\x6b\xa7\x46\x31\xce\x66\x26\x47\x6f\xa1\x94\x98\xaf\x35\x89\x8e\xf1\xc5\x9c\xc0\x6c\x06\x7e\x6a\x16\x46\xbd\xb1\xba\xf6\x02\x67\x0c\x53\x33\x6b\xe4\x1a\xa7\x81\x09\xb3\xef\x54\xac\x09\x33\xde\x3d\x06\x41\x30\x10\x51\x78\xb0\x3f\xe8\xaa\xff\x9a\x85\xfa\x1d\xe7\x6c\xad\x95\x82\x18\xb0\xe6\xd3\x38\x9b\x9e\xc1\x10\xc4\x3f\x70\xb0\x89\xae\x16\x86\xe7\x86\x59\xe3\x80\x9e\x50\xe0\x2e\x7c\x5d\x7d\x0d\xa0\x27\x34\x79\x99\xa2\x89\x40\x39\x96\x11\xdf\x18\xd2\x8f\x09\xb7\x26\x42\x1d\x73\x2c\x3c\x20\x36\x34\x84\x9e\xd0\xf7\x8a\x5f\x33\x47\xd2\x53\x38\x02\x22\xf7\x03\x2e\x6b\x20\x3d\x85\xa3\x8b\x64\xca\xd2\x2c\x98\x0b\x1f\x93\x5b\x0b\xe5\xfb\xf9\xf7\xd2\x9a\x05\xf2\xe8\xc3\x51\xfe\x9b\xfa\x6b\xc1\x3c\xfa\x70\x14\x7f\xe5\xe0\x1b\x99\x51\xd7\xa7\x58\xf2\x12\x56\xc9\xa3\x82\xe2\x85\xa2\xcc\x9f\xf1\x6d\xfc\x5f\x66\x09\x20\xf3\x2b\x58\x6a\x7e\x98\x9e\xd8\x59\xf1\x77\x69\xee\xee\x74\xe8\x12\xf7\xf8\xf2\xec\x14\xb4\xcd\xfd\x1f\x1f\x4f\x81\xd5\x45\x50\x78\x23\x06\x39\xea\x42\x21\xb0\x14\xdd\x29\xa6\x88\x71\xd1\x1d\x31\x26\x85\xe4\x30\xb4\x11\x94\x58\xbf\x00\x1a\x12\xf7\x0a\xf3\xae\x2b\x44\x77\xa1\xcc\x09\x08\x75\x5c\x21\x2c\x30\x86\xbe\xc0\x9d\x8c\x7c\x31\x84\x62\x30\x5f\xc4\x53\x40\x49\x7f\x3b\xa7\xfb\x25\xf3\x87\x96\xf9\xcb\x3d\x91\xeb\x36\x12\xb0\x00\x53\xa9\x5a\x30\x77\x1b\x66\x5f\x6e\x8e\x2f\xc5\xd6\xc8\x37\x3d\xf7\xb6\x95\xde\x26\xcd\xf9\xeb\xb3\x76\xf2\x72\x69\xc7\xe1\x18\xa2\xdb\xf6\x38\xa2\xc6\x46\xed\x0e\xb8\xbb\xe7\xf2\x53\xc8\x4b\x03\x68\x1c\xc8\x13\x0a\x86\xa0\xf5\xe9\xd3\xa7\x4f\xce\xd9\x99\x73\x74\x04\x8e\x8f\xfb\x41\xd0\x7a\xbe\xac\xce\xef\x91\x54\x95\x0c\xe5\x3d\xc2\xdf\xee\xaf\x91\x3d\x6b\xb7\x7e\x4c\x3e\x72\xd1\xea\x38\x0b\x0a\x6a\xdf\x17\x5a\x5d\x8a\xf8\x5c\x13\x80\x3e\x90\x3c\xc2\xc5\x32\xcd\xc9\xf6\x5f\x1e\xb3\x68\x55\xe2\x13\xea\x72\xac\xb4\x08\xfa\x60\xef\x21\xe2\x0b\xec\x32\x8a\x04\xe8\x1b\x1b\x16\x93\x2b\xeb\xdd\xbe\x8d\xa4\x64\xf4\xd0\x57\xfe\x22\xfa\xa0\x35\x92\xd4\x8e\x17\xc7\x4b\x74\xaa\x77\xd2\x31\xe8\x17\x98\x2e\xb9\xc6\xe6\xed\xe0\xbe\xb1\x57\x21\xd9\xac\x44\xa6\x48\xb2\x3f\x42\xa5\xef\x13\x1a\x46\x32\x96\xff\x1e\xe9\xac\xe3\x30\xda\x6e\x09\x8f\x5d\x2f\x1a\xa7\xf5\x1c\x24\xfe\xd5\xc6\xd3\xe7\xc0\x94\x16\x39\x9a\xba\x62\x8f\x77\x19\x95\x90\x50\xcc\x9d\x31\xa1\xa8\xdd\x72\x14\x44\x8a\x20\xb7\xf5\xc8\xd0\xea\x38\x1e\x41\xb8\xdd\xf9\xad\x4c\x12\xad\xcb\xf5\x44\x79\xd6\x96\x1e\x11\x1d\x67\x0a\xfd\x76\x2c\x96\xfe\x72\xca\x11\x94\xd8\x31\x1a\x6d\x1b\x5f\xee\x80\x9f\x5b\xc0\x06\xad\x9f\x63\x32\x4c\x51\x01\x51\xc7\x71\x3d\x25\x4b\xb1\xd4\x0f\x3b\xbd\x92\xa3\x50\x50\xd3\x41\xe9\xd7\xc2\x57\xfc\xbe\x8b\x52\x84\xf2\x84\xce\x3d\x1c\x85\x0d\x68\x70\x25\xcf\x16\x1b\x7f\xe8\x7b\x31\x65\x4d\x97\x29\x20\x19\x35\x80\x3e\x04\xfd\x17\x41\x7f\x3f\x07\xf3\x42\xf3\xf5\xbf\x6c\x89\xc4\x37\x12\x72\x0c\x15\x65\x2b\x55\x79\x6a\xf6\x32\x63\x2f\xeb\xe4\xd4\x85\xc1\x30\x71\x88\xf2\x9e\x4d\x5d\x08\x4a\x08\x86\xe0\xae\x24\x9e\x92\xeb\x0a\x0c\x01\x76\x42\xce\xc2\x76\x8b\xa0\x56\xa7\x90\xb8\x40\x25\xea\x22\x63\xd0\x4e\xea\xaa\x7e\xbf\xd5\x01\xc3\xe1\x10\xb4\x92\x0f\x5e\xb5\xca\x40\x26\xf2\xfd\x75\xf5\x77\xa6\xf9\xf8\xfb\x55\xad\x0e\xf8\x61\x08\x5a\xad\xfb\xce\xa9\xae\x99\x79\xd1\x7c\x35\xbe\xca\x53\x8b\x11\x95\x6c\x7f\x3c\x73\xe0\x17\x78\x53\xd2\x8d\xab\x4b\xc1\xec\xe7\xfc\xa1\xd5\x89\xc5\x37\x3f\x7f\xd7\x5a\x62\x96\x88\xfb\x25\x75\x4d\x6a\xb2\xac\xae\x82\xd5\xd7\xff\x96\xd3\xc4\xdd\x73\x1f\xcc\xc7\xd1\xd2\x4e\x25\xb9\x94\x0d\xb9\xc3\xb1\x88\x7c\x69\xac\x37\x86\xc4\xd7\x56\x58\x5e\x51\x5d\x14\x5f\x83\xf3\x0f\x4c\x92\xf1\xed\x12\x9d\x65\x2f\xfd\xf5\x9b\x3e\x68\xe9\x65\xa3\x25\x63\x73\xae\x0e\xbe\x91\x7d\xc0\x9d\xc0\xac\x78\xaf\x58\x49\x1b\xaa\x85\x2b\xb4\x23\xe4\xad\x4f\xe8\x44\x8d\x75\x49\x52\xf4\xe2\x7e\x52\xb0\x78\xcd\x0a\x7a\xd1\xdc\xf3\xf4\x88\x7c\x3b\x85\x00\x7e\x50\x8a\x8e\xa8\x49\x57\x1f\x5b\xd7\x17\x4b\x47\xed\x7b\xb5\xd6\xd0\xf6\xf2\xfc\x60\xf1\x7a\x24\x7d\x97\x3e\x2d\x7e\x52\xc4\x6f\xb1\x2c\xfb\x77\x7a\x70\xa9\x6c\x22\xf2\xdf\x00\x00\x00\xff\xff\x61\xe8\xc7\xea\x5a\x78\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xcd\x4a\xc3\x40\x14\x85\x6f\xd1\x55\x96\xae\x5d\x5c\x41\x8b\x82\x53\x33\xd5\x45\x9d\x76\x5a\x51\x5a\x10\x1b\x90\x12\xdd\x5f\x9a\x31\x1d\x4c\x66\xc2\xfc\x88\x42\x5f\xc3\xd7\xf3\x59\xa4\xa9\x56\x3c\xab\xf3\x71\xbe\x0b\xf7\xeb\x60\xff\x13\x00\xa0\x03\x00\x87\x00\x70\x0c\x00\x7b\x00\x70\x0e\xdb\x0c\x00\x60\xd2\x01\xb8\xfe\x71\x76\x59\xa8\xc6\xba\xc0\x32\x5f\xea\x82\xdd\xc6\xd2\xb3\xdc\x0a\x2c\xd4\xdb\xcd\xab\x5e\x51\x6d\x7b\x2e\x26\x73\xf2\x81\xe5\x8e\x8c\xaf\x28\x58\x27\xf0\xa1\x9d\x30\x8b\x8e\x6a\x5b\x58\x1c\xfd\xf3\xc7\xc9\x9c\x4c\x19\xa9\x54\x2c\x57\x54\x0b\xdc\xb1\xc0\x45\xf4\x5e\x93\x49\xb2\xfb\x6c\xca\x9e\x95\xf3\xda\x1a\x81\xbc\x97\x26\x77\xd6\x04\x65\x02\xcb\x3f\x1a\x25\x30\xa8\xf7\x70\xd1\x54\xa4\xcd\x10\x97\x2b\x72\x5e\x05\xf9\x94\xcf\xd8\xe0\xcf\xdb\xfc\xf3\xa2\x1c\x9b\x9a\xa5\x2d\xb4\x29\x05\x26\x8f\x55\x74\x54\xb1\x99\x75\xb5\x17\x68\x9a\x16\xbd\xbc\x1c\xe2\xb6\x4a\x73\xc2\x53\x29\x39\x76\xbb\xb8\xa9\xe9\x91\xe4\x1c\x27\x98\xa2\x68\x79\x2c\xfb\xbf\xd3\x48\x5e\x6d\xea\x69\xab\x8d\x78\x8a\xeb\xf5\xf6\x64\x2c\xfb\xe9\x19\x4e\x90\xa3\xc0\xfe\x10\xbe\x03\x00\x00\xff\xff\xcf\x65\x2a\xf0\x79\x01\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
