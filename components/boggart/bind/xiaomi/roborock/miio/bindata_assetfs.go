// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package miio

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x4d\x6f\xdb\x3c\x0c\xc7\xef\xfd\x14\x84\x81\x02\xcf\x73\xb0\xd3\xe4\x34\x74\x6e\x80\x2e\xc3\xb0\xc3\x06\x14\xed\xd6\x6b\xc1\x58\xf4\xa2\x41\x96\x5c\x49\x76\x5a\x04\xfe\xee\x83\x6c\x27\x75\xbb\xbc\xd8\x8d\x83\xa6\xc0\x72\x88\x15\x9a\xfa\x49\x7f\x52\x84\xe9\x2c\x16\xc0\x28\xe6\x92\xc0\x8b\x94\xb4\x24\xad\x07\x45\x71\x12\x32\x9e\x43\x24\xd0\x98\x0b\x4f\xab\xb9\x37\x3e\x01\x00\x68\x5a\x23\x25\xfc\x84\xf9\xc3\x11\xb8\x91\x49\x96\xa3\x07\xe3\x0f\x47\xb5\xff\xcb\x39\x0f\x77\x29\x4a\x12\x8d\xbb\x7f\x7b\x2c\x77\xf1\xdc\x67\xe5\xa7\x95\xa0\x0b\xcf\xe2\x74\x1d\x69\xe5\x99\x89\x25\x50\x62\x0e\x12\x73\xdf\xe2\xd4\xc0\x14\xf5\x9d\x1b\x78\x4f\x18\xc1\xcd\xba\xb5\x56\x24\xc1\x6b\xdf\x54\x93\x21\x69\xd1\x72\x25\xbd\xc5\x02\x78\x0c\x74\x0f\x01\x46\xce\x00\x9e\x8b\xda\x72\x4d\x67\xcb\xc9\x39\x91\x64\x50\x14\xe3\x10\x61\xa6\x29\xbe\xd8\x30\xef\x37\xe6\x68\x22\xcd\x53\x7b\x9e\x2b\xce\xfe\x3b\xfb\xff\xa3\x9b\x2b\x0c\x41\x51\x2c\x16\x10\x5c\xd3\x7d\x46\xc6\x06\x3f\xaf\xbf\x05\x57\x68\x67\x95\xb9\x82\x7b\x63\x07\x1d\x7e\x90\xe0\xdd\x58\xb4\x99\xf1\x20\x80\xa2\x08\x07\x38\x0e\x07\x82\x6f\x08\xd0\x20\x13\x1b\xee\x34\x92\x61\x71\xea\x6f\x4e\xc7\xb6\xb4\x34\x09\xce\x02\x31\x32\x82\x2a\x2e\xc0\xe5\x16\x9a\xfb\x54\x51\x0a\xb8\x8c\x95\x3b\x8b\xdb\x5c\x43\x97\x42\x6a\x2c\x27\x08\xca\x6f\xdf\x58\xcd\x53\x62\xc0\xd0\x62\x65\x67\xd6\xd7\x64\x52\x25\x8d\xdb\x85\x54\x73\x8d\xa9\x07\xc6\x3e\xba\xad\xcf\x39\xb3\xb3\xf3\xe1\xd9\xd9\xe9\x8e\xcd\x55\xab\xce\x08\x59\x1b\x3f\xbd\xdb\xa9\x06\x2e\x35\x24\xcc\x77\x65\x34\x6a\xe4\xf5\x16\x35\x77\x0a\x96\x99\xb5\xb3\x7e\xa8\x22\xeb\x84\x0c\x07\x6d\xe4\x38\x56\xcb\xe0\x4c\x15\x7b\xec\x35\x88\xec\x49\xdd\x77\xc5\xdc\x39\xac\xd5\xb5\xd8\x4e\x83\x50\x9e\xbc\xa0\x24\xb4\x9e\xde\x3a\x38\xbb\x45\x87\x83\xf2\xbc\xee\xac\x91\xaa\xfe\x4f\xda\x94\xd2\x9c\xc7\xfc\x7d\x97\x12\x74\x39\x09\x70\xb0\x92\x6a\x43\xee\x58\x56\xf0\x76\xa5\x05\xdd\x83\xca\x9e\x3f\x6e\xa8\x6b\x89\x35\x28\xe5\xa9\x0c\x4a\x4a\xb7\x2a\x6d\x15\x2c\xd8\x4b\xdb\x65\x66\x67\x10\x23\x17\x10\xa9\xcc\xf5\x44\x7b\xaa\x74\xbc\x2f\xc8\xc5\xc4\xd1\x8e\x4e\xed\x44\x49\x49\x91\x05\x93\x45\x11\x19\xd3\x93\xe6\x9a\x7a\x53\x41\x8f\x5b\x79\x8f\xa9\xae\x91\xc7\x9b\xed\xcf\x5f\x27\x57\x7d\x0a\x76\xbc\x43\xaa\x7d\xab\x87\xa6\x29\xdb\xe9\xf7\xfd\xd8\xfc\xd7\x81\x6e\xdd\xdd\x41\x3b\x50\x32\x06\x7f\x11\xe4\xa4\x8d\x7b\x67\x7c\x65\x2f\x5a\x9d\xc2\xa0\xa6\xdd\x56\xb0\xbe\xdb\xd2\xbd\x04\x1a\xf7\x76\x2a\xa3\xce\xad\xc0\x7a\x85\x37\x35\xed\x28\x24\xbe\xaa\xc5\x79\xa1\xab\x5b\x83\x73\x48\x35\x9f\xd0\x5a\xd2\x8f\x7b\xea\xa9\x29\x50\x14\x70\xfa\xf6\x9a\x26\x82\x50\x82\xe5\xc9\xbe\x69\x2a\x41\x3f\x78\x72\x1c\xa9\xaa\x64\xa1\x26\xec\x43\xd6\xa5\x26\x74\xf9\x4a\x92\xd0\x64\xe9\x78\x14\x0e\xdc\xe5\xd8\x5f\x6c\x37\x63\x18\xcf\x37\xfd\xaf\xb5\xf6\xd6\x1a\xf3\x0b\x53\xe3\x67\x3d\xac\x2f\xab\xed\xfc\x09\x00\x00\xff\xff\xe3\x80\x54\x39\x29\x15\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x51\x4b\xeb\x30\x18\x86\xbf\x71\xce\x55\x2f\xcf\xf5\xb9\xf8\x04\x1d\x8a\x66\x26\xad\xc3\x2d\x5b\x36\x71\x6e\x20\xae\x38\x46\xf5\x3e\xac\xb1\x2b\xb6\x49\x49\x52\x51\xd8\xdf\xf0\xef\xf9\x5b\x64\x9d\x4e\x7c\xaf\xde\x87\x3c\x79\xf9\x3e\xfe\xfd\x7d\x07\x00\x68\x01\xc0\x7f\x00\x38\x04\x80\x3f\x00\x70\x06\xbb\xf4\x00\x60\xdd\x02\xe8\x7f\x39\xfb\x2c\x55\x65\xac\x27\xb1\xcb\xf2\x94\x5c\xd7\x99\x23\x89\xe1\x98\xaa\x97\xab\xe7\x7c\x2d\x4b\xd3\xb1\x75\xb0\xb8\x4f\xc8\xc4\x2a\xe9\x73\xa3\xc9\x8d\xf4\x8a\x63\x48\x59\x9f\xd0\x88\x84\x97\x18\x46\xbc\xdb\x3d\xa5\x11\xa5\xc1\x5c\x3a\x4f\x12\x2b\xb5\x2b\xa4\x37\x96\xe3\x5d\xb3\x81\x71\x6d\x65\x69\x52\x83\xc3\x5f\xc3\xa3\x60\x2e\x75\x56\xcb\x4c\x91\x44\xc9\x92\xe3\x9e\x39\x2e\x6b\xe7\x72\xa9\x83\xf8\x36\x9e\x92\x47\x65\x5d\x6e\x34\x47\xd6\xa1\xc1\xc4\x68\xaf\xb4\x27\xc9\x5b\xa5\x38\x7a\xf5\xea\xcf\xab\x42\xe6\x7a\x80\xab\xb5\xb4\x4e\x79\xf1\x90\xcc\x48\xef\xc7\xdb\xde\xf3\xa4\x2c\x99\xea\x95\x49\x73\x9d\x71\x0c\x16\x45\x6d\x65\x41\x66\xc6\x96\x8e\xa3\xae\x1a\x74\x22\x1a\xe0\xae\x0a\x7d\xc4\xa8\x10\x0c\xdb\x6d\xdc\x56\x7a\x20\x18\xc3\x31\x52\xe4\x0d\x8f\x44\xf8\xfd\x34\x14\x17\xdb\x7a\xdc\x68\x43\x46\x71\xb3\xd9\x7d\x19\x89\x90\x9e\xe0\x18\x19\x72\x0c\x07\xf0\x19\x00\x00\xff\xff\xa8\xda\x1b\xb3\xa2\x01\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
