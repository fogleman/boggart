// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package miio

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x6f\xdb\xb6\xf6\x7f\xbf\x4f\x71\xa6\x75\xb0\xfd\x5f\x25\x3b\x69\xd7\x0d\x9e\x9d\x3f\xda\x64\xb9\x09\x90\x74\xb9\x4d\x37\xa0\x18\x86\x81\x16\xe9\x98\x89\x44\xaa\x24\x65\x27\x0b\xfc\xdd\x2f\x48\x4a\xb6\x6c\x4b\x8a\x9f\xd2\x28\xab\xf5\xa2\x91\xa9\xc3\xc3\xf3\x3b\x0f\xe4\x21\x29\xaa\xf7\xf7\x80\x49\x9f\x32\x02\x8e\xcf\x99\x22\x4c\x39\x30\x1e\x7f\xd3\xc1\x74\x08\x7e\x80\xa4\xec\x3a\x82\x8f\x9c\x83\x6f\x00\x00\xb2\xa5\x3e\x0f\xdc\x10\xbb\x7b\xfb\xa0\xef\x64\x98\xde\xdd\x4a\x77\x6f\x3f\xa1\x9f\xaf\x73\xfb\x77\x84\x18\x09\x32\x4f\x17\x29\x52\x29\x66\x69\x26\x74\x82\x07\xa4\xeb\x28\xd4\xcb\xe3\x34\xa1\x8c\x83\x94\x21\x43\x43\x60\x68\xe8\x2a\xd4\x93\xd0\x43\xe2\x6f\x7d\xe3\x4c\xd9\x04\x54\xe6\xb5\x35\xe1\x14\xd0\x84\x36\x12\x44\x12\xa6\x90\xa2\x9c\x39\xf7\xf7\x40\xfb\x40\x3e\x83\x87\x7c\x5d\x00\x8e\xd6\x5a\xda\xa6\x2e\x1b\x12\x4d\x44\x18\x86\xf1\xf8\xa0\x83\x60\x20\x48\xbf\x5b\x50\xef\x1a\x0d\x91\xf4\x05\x8d\x54\x7b\xc8\x29\xae\xb7\x1a\xbf\xe8\xba\x81\x24\x30\x1e\xdf\xdf\x83\xf7\x81\x7c\x8e\x89\x54\xde\xef\x1f\xce\xbc\x0b\xa4\x06\xb6\xd8\x32\x77\x0e\x34\xd3\xbd\x9f\x19\x38\x97\x0a\xa9\x58\x3a\xe0\xc1\x78\xdc\x69\xa2\x83\x4e\x33\xa0\x5b\x80\x26\x89\x52\x94\x5d\xc9\x75\x21\x66\xeb\xaf\x03\xf5\xff\x2d\xa3\x6e\xca\x27\x17\xfa\xa4\x8d\x87\xc1\x77\x9a\x71\x50\xf0\x24\xe3\x89\x0a\xf5\xdc\x62\x5f\x2c\xf3\xc9\x2c\x07\x5d\x02\x7d\x84\x09\x58\x8d\x01\x65\x25\xdc\xca\x75\x57\x58\xcd\x08\xd2\xe7\x22\x4c\x5b\xd6\xf7\xee\x80\x0b\xfa\x0f\x67\x0a\x05\x60\x7e\x07\xa8\x47\x02\x37\x20\x7d\x95\xba\xbf\x2e\x76\x00\x23\x85\x5c\xc5\xaf\xae\x74\xd1\x10\x05\x14\x23\xc5\x85\x03\x14\x77\x33\xcd\x27\x36\xd0\xe6\x7d\xb1\x8c\x91\x1c\x08\x89\x1a\x70\xdc\x75\x22\x5e\x1a\x61\x79\xba\x47\xbe\xcf\x05\xd6\xde\x38\x23\x85\x9b\x29\x9f\x0d\x60\x40\x82\x22\x37\x8c\x03\x45\x25\x09\x88\xaf\xcb\xf5\x63\x11\x93\x25\x9a\x9e\x6f\xbe\xac\x6b\xc9\xad\x8b\x66\x6a\xba\x03\x82\x30\x65\x57\x19\x21\x8b\x70\xb8\x7e\x40\x10\x33\xb4\x33\x66\xf0\x79\x10\xa0\x48\x92\xa4\x38\x42\x82\x30\xd5\x75\xbe\xcb\xd3\x84\x0d\xbb\xe9\xa3\xb4\x6e\x86\xb7\xd1\x0e\xb9\x8d\x10\xc3\x04\x27\x6a\xb1\x85\xda\xc3\x05\x0f\x64\x46\xb8\xc5\xfa\xcb\x6b\xc2\x68\x63\xf0\x7a\x56\x1d\x8a\xaa\x80\x64\x62\xf5\x70\x22\x97\x8d\xd5\xc1\xeb\x15\x54\xdd\x44\x2b\x10\x6b\x9b\xce\x28\x3e\x47\x37\x33\xa2\xa6\xcf\x61\x72\x43\xb3\xbe\x96\xc4\xb7\xd1\x9c\x09\xa7\x80\xe0\xde\x5d\xb9\x61\x57\x54\xde\xbc\x1b\xba\x3d\x8e\xef\x56\x64\x02\x93\xae\xc4\xf3\x91\x88\x88\x3a\xe7\x98\x3c\xd4\x81\x3c\x24\x0d\x55\x24\xb4\x1d\xc9\x95\xe0\x71\xb4\x86\x48\x86\xa3\x51\x9b\xe6\xd3\x75\xac\x6c\x6e\xc8\x31\x71\x09\xd3\x11\x8b\x9d\x69\x76\x61\xfc\xd2\x6a\x19\x92\x5c\xe3\x55\x9a\x6a\xbc\xca\xcd\x34\x56\xb9\xa6\xce\x68\x84\x00\x2d\x04\x4c\x84\xf0\xd6\x51\x96\x81\xd7\x34\x02\xaf\xa9\x9b\xc5\xec\xea\x4d\x8a\xf8\xcd\xc6\x88\x4d\x0b\x94\x45\xb1\x02\x75\x17\xe9\x3e\x66\x40\xfc\x9b\x1e\xbf\x9d\xe8\xfc\x5a\xba\x72\x44\x95\x3f\x70\x80\xa1\x90\x14\x18\x48\xc7\x53\xee\x83\xc9\xe0\x55\x8f\x04\x65\x2a\xeb\x7b\xde\xaf\x96\xa8\x01\x49\xdf\xa3\x13\x09\xdd\x3c\xc1\x93\xc1\x1c\x9a\x6b\x6a\xad\x89\xe9\x70\xf5\xaa\xeb\x56\xfb\x62\x11\x41\x99\x22\x57\x02\x05\x5f\x2c\x24\xa0\x28\x2c\xa6\x92\xe8\xb8\x80\x8e\x8c\x10\x9b\xcc\x0d\xc8\xe7\x98\x0a\x82\x9d\x83\xff\xeb\x34\xf5\x83\x75\x8d\xf8\x7c\xe2\x46\x91\x5b\xe5\xcc\x64\x5a\x89\x65\xf2\xc2\x66\xaa\xbb\xf9\xb8\x99\x3e\x19\xa2\x20\x26\x26\xb3\xca\x86\xcc\x61\x2c\xf4\xa0\x7f\x9a\x90\xe9\x74\x17\x52\x6d\x67\xf4\xbe\x0b\x9b\x59\xb5\x0e\xe8\xd5\xe0\x69\x47\x11\x2b\xc1\x2e\x54\x56\x0d\x15\xab\xb7\xf9\x30\xb1\xa5\xa5\x21\x72\x42\xaf\x06\xbb\xf0\x98\xe3\x58\x10\x1e\x01\x1f\x3d\x6d\x74\x18\x01\x76\xc1\xb1\x6a\x70\x18\xb5\xcd\xc7\x86\x29\x2c\x0d\x8d\x33\x3e\xda\x45\xc6\x1c\xc7\x82\xc8\x90\x0a\x05\x7a\xae\x1a\x92\xa7\x0d\x10\x23\x07\x58\x39\x76\x71\xb2\x6a\x9c\x64\xad\x38\x1f\x2e\xd9\x67\xf9\x51\x73\xa9\x29\x3e\xd2\x90\x3c\xef\xa0\x99\xcc\xa9\xd6\x5d\x35\xe8\x23\x76\xc1\x47\x44\x54\x6f\xcd\xa0\x8f\x98\x1b\x69\xd1\xbe\x7c\x90\x1e\x23\x06\x49\xd3\xbb\xb8\x24\x5d\x47\x20\x76\x45\x1c\x08\x29\xeb\x3a\x2d\x07\x42\x74\xdb\x75\xf6\x5a\xad\xd2\x50\xcd\x98\x4f\x47\x67\xe6\x67\x26\x20\x33\xde\xf7\x8c\x83\xf0\xdf\x1f\x07\x60\xf6\x8d\xd4\x57\x1c\x0e\x76\xaf\x61\xde\x95\x73\xfc\x1f\x2c\xe5\x7e\xae\x3f\xaf\x2f\x80\x11\x82\x47\x66\xab\x28\x09\xa0\xec\x3a\x7b\x2c\x15\x0f\xd3\x55\x76\x4b\xb6\xd5\xb6\x5e\xfd\x9c\xd9\xed\x9b\x44\xed\xab\x9f\xb5\x3b\x58\xc0\xc4\x2c\xbe\xdb\xbb\xcc\x66\xe1\x44\xc4\xff\xc6\x34\x75\xa0\x47\x91\xf0\x4d\x2b\x4f\xc2\x37\xad\xe5\x25\x7c\x87\x02\xc4\xfc\x74\x51\xf8\x51\x84\xfc\xe9\xc7\x3c\x21\x7f\xfa\x71\x79\x21\x3f\xc6\xa2\xc7\x1f\x51\x42\xdd\xad\xe7\x88\xb8\xd7\x5a\x41\x91\xe7\xe8\xf6\x51\x25\xcc\x55\xe2\x5e\x6b\x05\x2d\x9e\xf3\xde\xb6\x24\xec\x34\x6d\x43\xcf\x61\xa0\x5a\x2f\x5b\x5c\xb1\xb1\x15\xc8\x57\x20\x4d\xd2\x55\xbc\xbc\xf8\x4f\xb4\xcd\x8b\x19\x7e\x8c\x1d\x5e\xc3\x76\xbd\xcd\x5d\x5d\x75\xcb\xfb\xba\x47\x1c\x18\x57\x80\xa9\x54\xb1\xe8\x3d\xe5\xee\xae\xd1\x4b\xf9\xc6\xee\x7a\xbb\xba\x6b\x68\x6d\x5b\x1b\xba\x8f\x9b\x4f\x62\x86\x9f\x6e\x0f\xf6\xd7\xdd\xbe\xeb\xcc\xbe\xeb\x8c\x31\xb4\x87\xcf\x14\x2c\xec\xb3\x62\x86\x77\x1b\xac\x25\x1c\xe7\xdc\xfc\x69\x96\xf8\x3e\x4e\x16\xf4\xfe\xf5\x0e\x6e\x17\xec\x52\xbf\x9d\x51\xf7\xec\x9a\x40\x66\xce\x8f\x19\xfe\x5b\x2a\x24\x94\x77\xcc\x45\x88\x14\x38\xfb\xad\xd6\x1b\xaf\xb5\xe7\xb5\xf6\x61\xef\xc7\x76\xeb\xb5\xf1\x69\x17\x52\x62\xc2\x70\x29\xe9\x33\x58\x25\xa8\x4a\x0a\xb5\x42\xf6\xf7\x44\xe9\x13\x57\x03\x3d\xb1\xde\x7e\x02\x95\x30\x5e\x2f\x85\xb2\x95\xb7\x9c\x44\xfd\x66\x25\x7a\xba\xdc\x29\x51\xc9\x63\x64\x4f\x6b\x29\x6c\xcb\x2f\xc4\x0d\x79\x10\x87\x15\x7c\x19\xce\xca\xf5\xe5\xc7\xa5\x3f\x92\x76\xbf\x8a\x91\x69\x9d\x25\xeb\xd4\x30\x3a\x5a\xd2\xfb\xcc\xc0\x35\xf1\xa7\x67\xbc\x54\xbd\xf1\x7e\x91\x1e\xe3\xff\xe1\xac\x82\x61\x95\x4a\xf6\x34\x09\x9f\x6d\xf9\xab\x08\xad\x07\x77\x69\xa7\x96\xd0\x91\x34\xfd\x95\x89\xa5\x8c\x1b\x7d\x75\xd1\xf4\xe4\xc9\xe0\x12\x64\x9d\xa6\x36\x6c\xe9\xf1\x95\xe4\x24\x4f\x29\x9b\xa4\xd3\xa0\xac\xcf\x1f\x3c\xd5\x62\x0e\x72\x64\x0e\xd4\x04\x04\xcc\xbf\xae\x54\x82\x46\x04\x9b\xe4\xcf\x96\x63\xe5\x0a\x22\x23\xce\x24\x1d\x12\x60\x7c\x24\x50\xe4\x80\x54\x77\x3a\x51\x19\x51\xac\x06\xed\xbd\x56\xeb\xfb\x65\x8e\xa2\x28\x9d\x9b\x2e\xa9\x5d\x25\x56\xb0\x9a\x1a\xa4\x58\x42\xac\xb3\x2a\x77\x3f\x93\xfa\xfd\xa1\x73\xa8\x5e\x40\xd2\xec\x4f\x0d\xb6\xc7\x39\x88\x57\x66\xdb\x69\x2e\x03\x4d\xf3\x5b\x4a\x59\x1d\xa5\x13\xb7\x47\x51\x2a\xce\xac\xe1\xbf\x3d\x9c\xe0\x5c\xd2\x82\x19\x1e\xc6\x27\xbd\xf3\xb7\x87\x2b\x31\x58\x4e\x51\xb0\x19\x2e\x8e\x49\xb0\x39\x32\xcd\xa5\x72\xd8\x4e\x90\xc0\x23\x24\x08\x0c\x89\x90\x66\xbe\xb6\x21\xcc\x94\xe1\x1f\x96\x5f\xe5\x00\x1f\x53\x11\x6e\x15\x70\xca\xb0\xaa\x80\x3f\xf2\x1b\xb2\x39\x4a\xc3\xa5\x72\xd8\xce\x68\x9f\x64\x5e\xd7\xdb\x00\x9f\xe6\x94\xbc\x7c\x56\x2d\x88\x6f\x7d\x9f\x48\x09\x11\xa7\x4c\xc1\xbb\xcb\xcb\xd3\xa3\x8d\xb1\x5a\x96\x17\x9a\xa3\x67\x38\x56\x1b\xf4\x87\xcb\xcb\xd3\xad\x62\xd6\x0c\xab\x0d\x79\xeb\x66\xae\xa4\x95\xdf\x13\x35\xe2\xe2\x06\x02\xee\xa3\x00\x4e\x2f\x36\x46\x9c\x30\xf4\xce\x34\xc3\xd3\x8b\xca\x02\xbe\x42\x8a\x8c\xd0\xdd\xd6\xf0\xfe\xc7\xf2\xab\x2c\xde\x10\xc9\x9b\xad\x81\x3d\x47\xf2\xe6\x11\x90\x76\x9a\x4b\xe4\xc8\x9d\xa6\x99\xee\x94\x13\x4d\xe7\xa0\xcb\xcc\xc4\x46\xb4\x4f\x77\x33\xb1\xdd\x4c\x2c\x97\x76\xdd\xc0\xbb\x54\x48\x6d\x94\x13\x69\xaf\xf4\x0c\x97\xca\x75\x2a\x6f\x63\x35\x80\x3e\xa2\x01\xf8\x3c\x66\x6a\x63\x94\x9a\xdf\x31\xa2\xc1\xa1\xe6\x56\x39\xb4\x87\x9c\x31\xe2\x2b\x90\xb1\xcd\x0f\xb6\x83\x39\xe1\x7a\x69\x99\x56\x1b\xf9\x16\x4d\x9d\xb0\xac\xae\xb5\x8f\x4e\x0e\x2f\xb6\x09\x58\xf3\x7b\x4c\xb4\x4f\x35\x68\x4a\xf3\xb1\xa5\xdd\xb0\xb9\x1b\x36\x73\x69\xd7\x5e\xe8\x23\x52\xa2\xab\xad\x2c\x0d\x59\x0f\xf5\x12\x8e\x55\x5d\x1b\x4a\x01\x4b\xf2\x39\x26\xcc\xdf\x28\x65\x98\x45\x7c\x99\x70\xac\x1c\xe4\x8d\x53\xa3\x04\x67\x35\x93\xa3\x77\x48\x29\x22\x36\x9a\x59\x26\xf8\x12\x4e\x30\x1e\xc3\xf7\xd5\xc2\x68\x3e\x61\xb5\xf1\xaa\x5f\x02\xd3\x30\xab\xe4\xc2\x9f\x85\x89\x04\x41\xdb\x82\xf9\x56\x10\xa4\xed\x19\x86\x1d\x19\x47\x07\xfb\x9d\xa6\xfe\x53\x2d\xd4\xbf\x0a\xc1\xc5\x16\x00\x1b\x3e\x95\xb3\xe9\x39\x8a\x20\xf9\xe0\xe3\x36\xba\x5a\x14\x5d\x58\x66\x95\x03\x7a\xca\xc0\x9f\xfb\xd2\xdc\x06\x40\x4f\x59\xfa\xd9\xba\x2a\x02\x15\x44\xc5\x62\x6b\x48\x3f\xa4\xdc\xaa\x08\xb5\x2f\x88\x1c\x80\xdc\xd2\x10\x7a\xca\x8e\x35\xbf\x6a\x8e\xa4\x67\xa8\x07\x72\xe6\x9b\xae\x1b\x20\x3d\x43\xbd\xcb\x74\xca\x52\x2d\x98\x73\x07\xeb\x37\x42\x79\x3c\x3d\x3b\x5e\x2d\x90\x47\xef\x8f\x66\xbf\x2f\xb8\x11\xcc\xa3\xf7\x47\xc9\x89\x8f\x67\x32\xa3\x5e\x9f\xa2\xe4\xbd\xa4\x82\x47\x39\xc5\x73\x45\x99\x9f\xc9\x6d\xf2\x27\xb3\x04\x90\xf9\x30\xb6\x9e\x1f\x4e\x3e\xc0\xbb\xe4\x37\x7a\xef\xef\x4d\xe8\x52\xff\xe4\xe3\xf9\x19\xd4\xed\xfd\xef\x1f\xce\xc0\x69\x62\x24\x07\x3d\x8e\x04\x6e\x22\x29\x89\x92\xcd\x21\x61\x98\x0b\xd9\xec\x71\xae\xa4\x12\x28\x72\x31\x52\xc4\xbc\xac\x1a\x51\xff\x86\x88\xa6\x2f\x65\x73\xae\xcc\x0b\x29\xf3\x7c\x29\x1d\xe8\xa3\x40\x92\x46\x46\xbe\x04\x42\x3e\x98\x6b\xf9\x25\xa0\x4c\xbe\x23\xdc\xbc\xce\xfc\x30\x32\x5f\x2f\x88\xbc\x6e\x23\x21\x0f\x09\x53\xba\x05\x7b\xb7\x65\xf6\xc5\xe6\xb8\xce\xb7\xc6\x6c\xd3\x53\x6f\xb3\x1f\xbc\x4e\x5e\x94\x44\x51\x14\x50\xdf\x7c\x6b\xbb\x39\xfd\x1a\xf6\xdc\xa2\xce\x8b\x3a\xe6\x7e\xac\x31\x35\x3c\x41\x10\xbe\xab\xf7\x63\x66\x6d\x54\x6f\xc0\xfd\x82\xcb\x0f\x91\x28\x0c\xa0\x7e\xa8\x4e\x19\x74\xa1\xf6\xe9\xd3\xa7\x4f\xde\xf9\xb9\x77\x74\x04\x27\x27\xed\x30\xac\xbd\x2c\xab\xf3\x5b\xac\x74\x25\x4b\xb9\x40\xf8\xcb\xe2\x1a\xd9\x8b\x7a\xed\xbb\xf4\xc0\x4f\xad\xe1\xcd\x29\xa8\xbe\x28\xb4\xbe\x34\xf1\x85\x21\x80\x36\x28\x11\x93\x7c\x99\xa6\x64\xfb\xaf\x4f\x78\xbc\x2c\xf1\x29\xf3\x05\xd1\x5a\x84\x36\xec\x3d\x44\x7c\x49\x7c\xce\xb0\x84\xb6\xb5\x61\x3e\xb9\xb6\xde\xdd\xbb\x58\x29\xce\x0e\x03\xed\x2f\xb2\x0d\xb5\x9e\x62\x6e\xb2\x38\x5e\xa0\x53\xb3\xbd\x4c\xa0\x9d\x63\xba\xf4\xea\xdb\xc3\x4c\x6d\x6b\xaf\x5c\xb2\x71\x81\x4c\xb1\xe2\xbf\x47\x5a\xdf\xa7\x2c\x8a\x55\x22\xff\x02\xe9\xb8\xe1\x71\x56\xaf\xc9\x01\x1f\xcd\x1b\xa7\xf6\x12\x52\xff\xaa\x93\xe1\x4b\xb0\xa5\x79\x8e\xa6\xaf\xc4\xe3\x7d\xce\x14\xa2\x8c\x08\xaf\x4f\x19\xae\xd7\x3c\x0d\x91\x61\x24\x5c\x33\x32\xd4\x1a\xde\x80\x62\x52\x6f\xfc\x52\x24\x89\xd1\xe5\x66\xa2\xbc\xa8\xab\x01\x95\x0d\x6f\x88\x82\x7a\x22\x96\x39\x45\x76\x84\x14\xf1\xac\x46\xeb\xd6\x97\x1b\xf0\x43\x0d\x5c\xa8\xfd\x90\x90\x11\x86\x73\x88\x1a\x9e\x3f\xd0\xb2\xe4\x4b\xfd\xb0\xd3\x6b\x39\x72\x05\xb5\x1d\x54\xbd\xb6\xfc\x59\x37\xad\x08\xed\x09\x8d\x05\x1c\xb9\x0d\x18\x70\x05\xcf\xe6\x1b\x7f\xe8\xec\x5c\x51\xd3\x45\x0a\x48\x47\x0d\x30\x2f\x84\xff\x49\xf1\x5f\x2f\x61\x5a\x68\xbf\x84\x90\x2d\x51\xe4\x56\x21\x41\x90\xa6\xac\x4d\x54\x3e\x31\x7b\x91\xb1\xcb\x3a\x39\x7d\x11\xe8\xa6\x0e\x51\xdc\xb3\xe9\x0b\x23\x85\xa0\x0b\xf7\x05\xf1\x94\x5e\x37\xd0\x05\xe2\x45\x82\x47\xf5\x1a\xc5\xb5\x46\x2e\x71\x8e\x4a\xf4\x45\xfb\x50\x4f\xeb\xea\x7e\xbf\xd6\x80\x6e\xb7\x0b\xb5\xf4\xf0\x6f\xad\x08\x64\x2a\xdf\x9f\x37\x7f\x65\x9a\x4f\xce\xf2\xd6\x1a\xf0\x6d\x17\x6a\xb5\x45\xe7\xd4\xd7\xd8\xbe\x7d\xbd\x1c\x5f\xed\xa9\xf9\x88\x0a\xb6\x3f\x5e\x78\xe8\x1a\xdd\x16\x74\xe3\xfa\xd2\x30\xdb\x33\xfe\x50\x6b\x24\xe2\xdb\xff\x0a\xa0\x56\x62\x96\x58\x04\x05\x75\x6d\x6a\x52\x56\x57\xc3\x6a\x9b\x7f\x8b\x69\x92\xee\xb9\x0d\xd3\x71\xb4\xb0\x53\x49\x2f\x6d\x43\xe1\x09\x22\xe3\x40\x59\xeb\xf5\x11\x0d\x8c\x15\xca\x2b\xea\x8b\x91\x11\x5c\xbc\xe7\x8a\xf6\xef\x4a\x74\x96\xbd\xcc\x49\xc0\x36\xd4\xcc\xb2\x51\xc9\xd8\x3c\x53\x87\xdc\xaa\x36\x08\x2f\xb4\x2b\xde\x4b\x56\x32\x86\xaa\x91\x15\xda\x91\xea\x2e\xa0\xec\x4a\x8f\x75\x69\x52\xf4\x6a\x31\x29\x98\xbf\xc6\x39\xbd\xe8\xcc\x73\xeb\xb0\x56\xcf\x09\x04\xf8\x56\x2b\x3a\x66\x36\x5d\x7d\x6c\x5d\x5f\x96\x8e\xda\x0b\xb5\x36\xd0\x76\x79\x7e\x30\x7f\x3d\x92\xbe\x0b\x9f\xe6\x3f\xc9\xe3\x37\x5f\x96\xfd\xdd\x69\xda\x64\xf6\xa0\x68\x22\xf2\xbf\x00\x00\x00\xff\xff\x39\x81\x86\x38\x6d\x68\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x51\x4b\xeb\x30\x18\x86\xbf\x71\xce\x55\x2f\xcf\xf5\xb9\xf8\x04\x1d\x8a\x66\x26\xad\xc3\x2d\x5b\x36\x71\x6e\x20\xae\x38\x46\xf5\x3e\xac\xb1\x2b\xb6\x49\x49\x52\x51\xd8\xdf\xf0\xef\xf9\x5b\x64\x9d\x4e\x7c\xaf\xde\x87\x3c\x79\xf9\x3e\xfe\xfd\x7d\x07\x00\x68\x01\xc0\x7f\x00\x38\x04\x80\x3f\x00\x70\x06\xbb\xf4\x00\x60\xdd\x02\xe8\x7f\x39\xfb\x2c\x55\x65\xac\x27\xb1\xcb\xf2\x94\x5c\xd7\x99\x23\x89\xe1\x98\xaa\x97\xab\xe7\x7c\x2d\x4b\xd3\xb1\x75\xb0\xb8\x4f\xc8\xc4\x2a\xe9\x73\xa3\xc9\x8d\xf4\x8a\x63\x48\x59\x9f\xd0\x88\x84\x97\x18\x46\xbc\xdb\x3d\xa5\x11\xa5\xc1\x5c\x3a\x4f\x12\x2b\xb5\x2b\xa4\x37\x96\xe3\x5d\xb3\x81\x71\x6d\x65\x69\x52\x83\xc3\x5f\xc3\xa3\x60\x2e\x75\x56\xcb\x4c\x91\x44\xc9\x92\xe3\x9e\x39\x2e\x6b\xe7\x72\xa9\x83\xf8\x36\x9e\x92\x47\x65\x5d\x6e\x34\x47\xd6\xa1\xc1\xc4\x68\xaf\xb4\x27\xc9\x5b\xa5\x38\x7a\xf5\xea\xcf\xab\x42\xe6\x7a\x80\xab\xb5\xb4\x4e\x79\xf1\x90\xcc\x48\xef\xc7\xdb\xde\xf3\xa4\x2c\x99\xea\x95\x49\x73\x9d\x71\x0c\x16\x45\x6d\x65\x41\x66\xc6\x96\x8e\xa3\xae\x1a\x74\x22\x1a\xe0\xae\x0a\x7d\xc4\xa8\x10\x0c\xdb\x6d\xdc\x56\x7a\x20\x18\xc3\x31\x52\xe4\x0d\x8f\x44\xf8\xfd\x34\x14\x17\xdb\x7a\xdc\x68\x43\x46\x71\xb3\xd9\x7d\x19\x89\x90\x9e\xe0\x18\x19\x72\x0c\x07\xf0\x19\x00\x00\xff\xff\xa8\xda\x1b\xb3\xa2\x01\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
