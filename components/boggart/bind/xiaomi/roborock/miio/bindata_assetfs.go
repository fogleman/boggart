// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package miio

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x6f\xdb\xb6\xf6\x7f\xbf\x4f\x71\xa6\x75\xb0\xfd\x5f\x25\x3b\x69\xd7\x0d\x9e\x9d\x3f\xda\x64\xb9\x09\x90\x74\xb9\x4d\x37\xa0\x18\x86\x81\x16\xe9\x98\x89\x44\xaa\x24\x65\x27\x0b\xfc\xdd\x2f\x48\x4a\xb6\x6c\x4b\x8a\x9f\xd2\x28\xab\xf5\xa2\x91\xa9\xc3\xc3\xf3\x3b\x0f\xe4\x11\x29\xb2\xf7\xf7\x80\x49\x9f\x32\x02\x8e\xcf\x99\x22\x4c\x39\x30\x1e\x7f\xd3\xc1\x74\x08\x7e\x80\xa4\xec\x3a\x82\x8f\x9c\x83\x6f\x00\x00\xb2\xa5\x3e\x0f\xdc\x10\xbb\x7b\xfb\xa0\xef\x64\x98\xde\xdd\x4a\x77\x6f\x3f\xa1\x9f\xaf\x73\xfb\x77\x84\x18\x09\x32\x4f\x17\x29\x52\x29\x66\x69\x26\x74\x82\x07\xa4\xeb\x28\xd4\xcb\xe3\x34\xa1\x8c\x83\x94\x21\x43\x43\x60\x68\xe8\x2a\xd4\x93\xd0\x43\xe2\x6f\x7d\xe3\x4c\xd9\x04\x54\xe6\xb5\x35\xe1\x14\xd0\x84\x36\x12\x44\x12\xa6\x90\xa2\x9c\x39\xf7\xf7\x40\xfb\x40\x3e\x83\x87\x7c\x5d\x00\x8e\xd6\x5a\xda\xa6\x2e\x1b\x12\x4d\x44\x18\x86\xf1\xf8\xa0\x83\x60\x20\x48\xbf\x5b\x50\xef\x1a\x0d\x91\xf4\x05\x8d\x54\x7b\xc8\x29\xae\xb7\x1a\xbf\xe8\xba\x81\x24\x30\x1e\xdf\xdf\x83\xf7\x81\x7c\x8e\x89\x54\xde\xef\x1f\xce\xbc\x0b\xa4\x06\xb6\xd8\x32\x77\x0e\x34\xd3\xbd\x9f\x19\x38\x97\x0a\xa9\x58\x3a\xe0\xc1\x78\xdc\x69\xa2\x83\x4e\x33\xa0\x5b\x80\x26\x89\x52\x94\x5d\xc9\x75\x21\x66\xeb\xaf\x03\xf5\xff\x2d\xa3\x6e\xca\x27\x17\xfa\xa4\x8d\x87\xc1\x77\x9a\x71\x50\xf0\x24\xe3\x89\x0a\xf5\xdc\x62\x5f\x2c\xf3\xc9\x2c\x07\x5d\x02\x7d\x84\x09\x58\x8d\x01\x65\x25\xdc\xca\x75\x57\x58\xcd\x08\xd2\xe7\x22\x4c\x5b\xd6\xf7\xee\x80\x0b\xfa\x0f\x67\x0a\x05\x60\x7e\x07\xa8\x47\x02\x37\x20\x7d\x95\xba\xbf\x2e\x76\x00\x23\x85\x5c\xc5\xaf\xae\x74\xd1\x10\x05\x14\x23\xc5\x85\x03\x14\x77\x33\xcd\x27\x36\xd0\xe6\x7d\xb1\x8c\x91\x1c\x08\x89\x1a\x70\xdc\x75\x22\x5e\x1a\x61\x79\xba\x47\xbe\xcf\x05\xd6\xde\x38\x23\x85\x9b\x29\x9f\x0d\x60\x40\x82\x22\x37\x8c\x03\x45\x25\x09\x88\xaf\xcb\xf5\x63\x11\x93\x25\x9a\x9e\x6f\xbe\xac\x6b\xc9\xad\x8b\x66\x6a\xba\x03\x82\x30\x65\x57\x19\x21\x8b\x70\xb8\x7e\x40\x10\x33\xb4\x33\x66\xf0\x79\x10\xa0\x48\x92\xa4\x38\x42\x82\x30\xd5\x75\xbe\xcb\xd3\x84\x0d\xbb\xe9\xa3\xb4\x6e\x86\xb7\xd1\x0e\xb9\x8d\x10\xc3\x04\x27\x6a\xb1\x85\xda\xc3\x05\x0f\x64\x46\xb8\xc5\xfa\xcb\x6b\xc2\x68\x63\xf0\x7a\x56\x1d\x8a\xaa\x80\x64\x62\xf5\x70\x22\x97\x8d\xd5\xc1\xeb\x15\x54\xdd\x44\x2b\x10\x6b\x9b\xce\x28\x3e\x47\x37\x33\xa2\xa6\xcf\x61\x72\x43\xb3\xbe\x96\xc4\xb7\xd1\x9c\x09\xa7\x80\xe0\xde\x5d\xb9\x61\x57\x54\xde\xbc\x1b\xba\x3d\x8e\xef\x56\x64\x02\x93\xae\xc4\xf3\x91\x88\x88\x3a\xe7\x98\x3c\xd4\x81\x3c\x24\x0d\x55\x24\xb4\x1d\xc9\x95\xe0\x71\xb4\x86\x48\x86\xa3\x51\x9b\xe6\xd3\x75\xac\x6c\x6e\xc8\x31\x71\x09\xd3\x11\x8b\x9d\x69\x76\x61\xfc\xd2\x6a\x19\x92\x5c\xe3\x55\x9a\x6a\xbc\xca\xcd\x34\x56\xb9\xa6\xce\x68\x84\x00\x2d\x04\x4c\x84\xf0\xd6\x51\x96\x81\xd7\x34\x02\xaf\xa9\x9b\xc5\xec\xea\x4d\x8a\xf8\xcd\xc6\x88\x4d\x0b\x94\x45\xb1\x02\x75\x17\xe9\x3e\x66\x40\xfc\x9b\x1e\xbf\x9d\xe8\xfc\x5a\xba\x72\x44\x95\x3f\x70\x80\xa1\x90\x14\x18\x48\xc7\x53\xee\x83\xc9\xe0\x55\x8f\x04\x65\x2a\xeb\x7b\xde\xaf\x96\xa8\x01\x49\xdf\xa3\x13\x09\xdd\x3c\xc1\x93\xc1\x1c\x9a\x6b\x6a\xad\x89\xe9\x70\xf5\xaa\xeb\x56\xfb\x62\x11\x41\x99\x22\x57\x02\x05\x5f\x2c\x24\xa0\x28\x2c\xa6\x92\xe8\xb8\x80\x8e\x8c\x10\x9b\xbc\x1b\x90\xcf\x31\x15\x04\x3b\x07\xff\xd7\x69\xea\x07\xeb\x1a\xf1\xf9\xc4\x8d\x22\xb7\xca\x99\xc9\xb4\x12\xcb\xe4\x85\xcd\x54\x77\xf3\x71\x33\x7d\x32\x44\x41\x4c\x4c\x66\x95\x0d\x99\xc3\x58\xe8\x41\xff\x34\x21\xd3\xe9\x2e\xa4\xda\xce\xe8\x7d\x17\x36\xb3\x6a\x1d\xd0\xab\xc1\xd3\x8e\x22\x56\x82\x5d\xa8\xac\x1a\x2a\x56\x6f\xf3\x61\x62\x4b\x4b\x43\xe4\x84\x5e\x0d\x76\xe1\x31\xc7\xb1\x20\x3c\x02\x3e\x7a\xda\xe8\x30\x02\xec\x82\x63\xd5\xe0\x30\x6a\x9b\x8f\x0d\x53\x58\x1a\x1a\x67\x7c\xb4\x8b\x8c\x39\x8e\x05\x91\x21\x15\x0a\xf4\xbb\x6a\x48\x9e\x36\x40\x8c\x1c\x60\xe5\xd8\xc5\xc9\xaa\x71\x92\xb5\xe2\x7c\xb8\x64\x9f\xe5\x47\xcd\xa5\xa6\xf8\x48\x43\xf2\xbc\x83\x66\xf2\x4e\xb5\xee\xac\x41\x1f\xb1\x0b\x3e\x22\xa2\x7a\x73\x06\x7d\xc4\xdc\x48\x8b\xf6\xe5\x83\xf4\x18\x31\x48\x9a\xde\xc5\x25\xe9\x3a\x02\xb1\x2b\xe2\x40\x48\x59\xd7\x69\x39\x10\xa2\xdb\xae\xb3\xd7\x6a\x95\x86\x6a\xc6\x7c\x3a\x3a\x33\x3f\x33\x01\x99\xf1\xbe\x67\x1c\x84\xff\xfe\x38\x00\xb3\x6e\xa4\xbe\xe2\x70\xb0\x6b\x0d\xf3\xae\x9c\xe3\xff\x60\x29\xf7\x73\xfd\x79\x7d\x01\x8c\x10\x3c\x32\x4b\x45\x49\x00\x65\xe7\xd9\x63\xa9\x78\x98\xce\xb2\x5b\xb2\xad\xb6\xf5\xea\xe7\xcc\x6a\xdf\x24\x6a\x5f\xfd\xac\xdd\xc1\x02\x26\x66\xf2\xdd\xde\x65\x16\x0b\x27\x22\xfe\x37\xa6\xa9\x03\x3d\x8a\x84\x6f\x5a\x79\x12\xbe\x69\x2d\x2f\xe1\x3b\x14\x20\xe6\xa7\x93\xc2\x8f\x22\xe4\x4f\x3f\xe6\x09\xf9\xd3\x8f\xcb\x0b\xf9\x31\x16\x3d\xfe\x88\x12\xea\x6e\x3d\x47\xc4\xbd\xd6\x0a\x8a\x3c\x47\xb7\x8f\x2a\x61\xae\x12\xf7\x5a\x2b\x68\xf1\x9c\xf7\xb6\x25\x61\xa7\x69\x1b\x7a\x0e\x03\xd5\x7a\xd9\xe2\x8a\x8d\xad\x40\xbe\x02\x69\x92\xae\xe2\xe5\xc5\x7f\xa2\x65\x5e\xcc\xf0\x63\xac\xf0\x1a\xb6\xeb\x2d\xee\xea\xaa\x5b\x5e\xd7\x3d\xe2\xc0\xb8\x02\x4c\xa5\x8a\x45\xef\x29\x57\x77\x8d\x5e\xca\x17\x76\xd7\x5b\xd5\x5d\x43\x6b\xdb\x5a\xd0\x7d\xdc\x7c\x12\x33\xfc\x74\x6b\xb0\xbf\xee\xd6\x5d\x67\xd6\x5d\x67\x8c\xa1\x3d\x7c\xa6\x60\x61\x9d\x15\x33\xbc\x5b\x60\x2d\xe1\x38\xe7\xe6\x4f\x33\xc5\xf7\x71\x32\xa1\xf7\xaf\x77\x70\x3b\x61\x97\xfa\xed\x8c\xba\x67\xe7\x04\x32\xef\xfc\x98\xe1\xbf\xa5\x42\x42\x79\xc7\x5c\x84\x48\x81\xb3\xdf\x6a\xbd\xf1\x5a\x7b\x5e\x6b\x1f\xf6\x7e\x6c\xb7\x5e\x1b\x9f\x76\x21\x25\x26\x0c\x97\x92\x3e\x83\x59\x82\xaa\xa4\x50\x2b\x64\x7f\x4f\x94\x3e\x71\x35\xd0\x2f\xd6\xdb\x4f\xa0\x12\xc6\xeb\xa5\x50\xb6\xf2\x96\x93\xa8\xdf\xac\x44\x4f\x97\x3b\x25\x2a\x79\x8c\xec\x69\x2d\x85\x6d\xf9\x83\xb8\x21\x0f\xe2\xb0\x82\x1f\xc3\x59\xb9\xbe\xfc\xb8\xf4\x47\xd2\xee\x57\x31\x32\xad\x33\x65\x9d\x1a\x46\x47\x4b\x7a\x9f\x19\xb8\x26\xfe\xf4\x8c\xa7\xaa\x37\x5e\x2f\xd2\x63\xfc\x3f\x9c\x55\x30\xac\x52\xc9\x9e\x26\xe1\xb3\x2d\x7f\x15\xa1\xf5\xe0\x2a\xed\xd4\x12\x3a\x92\xa6\xbf\x32\xb1\x94\x71\xa3\xaf\x2e\x9a\x9e\x3c\x19\x5c\x82\xac\xd3\xd4\x86\x2d\xdd\xbe\x92\xec\xe4\x29\x65\x93\x74\x1a\x94\xf5\xf9\x83\xbb\x5a\xcc\x46\x8e\xcc\x86\x9a\x80\x80\xf9\xd7\x95\x4a\xd0\x88\x60\x93\xfc\xd9\x72\xac\x5c\x41\x64\xc4\x99\xa4\x43\x02\x8c\x8f\x04\x8a\x1c\x90\xea\x4e\x27\x2a\x23\x8a\xd5\xa0\xbd\xd7\x6a\x7d\xbf\xcc\x56\x14\xa5\x73\xd3\x25\xb5\xab\xc4\x0a\x56\x53\x83\x14\x4b\x88\x75\x56\xe5\xee\x67\x52\xbf\x3f\x74\x0e\xd5\x0b\x48\x9a\xfd\xa9\xc1\xf6\x38\x07\xf1\xca\x6c\x3b\xcd\x65\xa0\x69\x7e\x4b\x29\xab\xa3\x74\xe2\xf6\x28\x4a\xc5\x99\x39\xfc\xb7\x87\x13\x9c\x4b\x5a\x30\xc3\xc3\xf8\xa4\x77\xfe\xf6\x70\x25\x06\xcb\x29\x0a\x36\xc3\xc5\x31\x09\x36\x47\xa6\xb9\x54\x0e\xdb\x09\x12\x78\x84\x04\x81\x21\x11\xd2\xbc\xaf\x6d\x08\x33\x65\xf8\x87\xe5\x57\x39\xc0\xc7\x54\x84\x5b\x05\x9c\x32\xac\x2a\xe0\x8f\xfc\x86\x6c\x8e\xd2\x70\xa9\x1c\xb6\x33\xda\x27\x99\xcf\xf5\x36\xc0\xa7\x39\x25\x1f\x9f\x55\x0b\xe2\x5b\xdf\x27\x52\x42\xc4\x29\x53\xf0\xee\xf2\xf2\xf4\x68\x63\xac\x96\xe5\x85\xe6\xe8\x19\x8e\xd5\x06\xfd\xe1\xf2\xf2\x74\xab\x98\x35\xc3\x6a\x43\xde\xba\x99\x2b\x69\xe5\xf7\x44\x8d\xb8\xb8\x81\x80\xfb\x28\x80\xd3\x8b\x8d\x11\x27\x0c\xbd\x33\xcd\xf0\xf4\xa2\xb2\x80\xaf\x90\x22\x23\x74\xb7\x35\xbc\xff\xb1\xfc\x2a\x8b\x37\x44\xf2\x66\x6b\x60\xcf\x91\xbc\x79\x04\xa4\x9d\xe6\x12\x39\x72\xa7\x69\x5e\x77\xca\x89\xa6\xef\xa0\xcb\xbc\x89\x8d\x68\x9f\xee\xde\xc4\x76\x6f\x62\xb9\xb4\xeb\x06\xde\xa5\x42\x6a\xa3\x9c\x48\x7b\xa5\x67\xb8\x54\xae\x53\x79\x1b\xab\x01\xf4\x11\x0d\xc0\xe7\x31\x53\x1b\xa3\xd4\xfc\x8e\x11\x0d\x0e\x35\xb7\xca\xa1\x3d\xe4\x8c\x11\x5f\x81\x8c\x6d\x7e\xb0\x1d\xcc\x09\xd7\x4b\xcb\xb4\xda\xc8\xb7\x68\xea\x84\x65\x75\xad\x7d\x74\x72\x78\xb1\x4d\xc0\x9a\xdf\x63\xa2\x7d\xaa\x41\x53\x9a\xc3\x96\x76\xc3\xe6\x6e\xd8\xcc\xa5\x5d\x7b\xa2\x8f\x48\x89\xae\xb6\x32\x35\x64\x3d\xd4\x4b\x38\x56\x75\x6e\x28\x05\x2c\xc9\xe7\x98\x30\x7f\xa3\x94\x61\x16\xf1\x65\xc2\xb1\x72\x90\x37\x4e\x8d\x12\x9c\xd5\x4c\x8e\xde\x21\xa5\x88\xd8\xe8\xcd\x32\xc1\x97\x70\x82\xf1\x18\xbe\xaf\x16\x46\x73\x84\xd5\xc6\xb3\x7e\x09\x4c\xc3\xac\x92\x13\x7f\x16\x26\x12\x04\x6d\x0b\xe6\x5b\x41\x90\xb6\x67\x18\x76\x64\x1c\x1d\xec\x77\x9a\xfa\x4f\xb5\x50\xff\x2a\x04\x17\xe0\x73\xbc\x0d\xe3\x1a\x66\x87\xf6\xfc\xad\x6a\xc1\x3c\x47\x11\x24\x27\x3f\x6e\xa3\xcf\x45\xd1\x85\x65\x56\x39\xa0\xa7\x0c\xfc\xb9\x23\xe7\x36\x00\x7a\xca\xd2\xf3\xeb\xaa\x08\x54\x10\x15\x8b\xad\x21\xfd\x90\x72\xab\x22\xd4\xbe\x20\x72\x00\x72\x4b\x63\xe9\x29\x3b\xd6\xfc\xaa\x39\xa4\x9e\xa1\x1e\xc8\x99\xc3\x5d\x37\x40\x7a\x86\x7a\x97\xe9\xbb\x4b\xb5\x60\xce\xed\xb0\xdf\x08\xe5\xf1\x74\x13\x79\xb5\x40\x1e\xbd\x3f\x9a\x3d\x68\x70\x23\x98\x47\xef\x8f\x92\xad\x1f\xcf\xe4\xd5\x7a\x7d\x8a\x92\x0f\x94\x0a\x1e\xe5\x14\xcf\x15\x65\x7e\x26\xb7\xc9\x9f\xcc\x5c\x40\xe6\x84\x6c\xfd\xa2\x38\x39\x89\x77\xc9\xc3\x7a\xef\xef\x4d\xe8\x52\xff\xe4\xe3\xf9\x19\xd4\xed\xfd\xef\x1f\xce\xc0\x69\x62\x24\x07\x3d\x8e\x04\x6e\x22\x29\x89\x92\xcd\x21\x61\x98\x0b\xd9\xec\x71\xae\xa4\x12\x28\x72\x31\x52\xc4\x7c\xb5\x1a\x51\xff\x86\x88\xa6\x2f\x65\x73\xae\xcc\x0b\x29\xf3\x7c\x29\x1d\xe8\xa3\x40\x92\x46\x46\xbe\x04\x42\x3e\x98\x6b\xf9\x25\xa0\x4c\x0e\x14\x6e\x5e\x67\x7e\x18\x99\xaf\x17\x44\x5e\xb7\x91\x90\x87\x84\x29\xdd\x82\xbd\xdb\x32\xfb\x62\x73\x5c\xe7\x5b\x63\xb6\xe9\xa9\xb7\xd9\x93\xaf\x93\x2f\x26\x51\x14\x05\xd4\x37\x87\x6e\x37\xa7\xc7\x62\xcf\xcd\xee\xbc\xa8\x63\xee\xc7\x1a\x53\xc3\x13\x04\xe1\xbb\x7a\x3f\x66\xd6\x46\xf5\x06\xdc\x2f\xb8\xfc\x10\x89\xc2\x00\xea\x87\xea\x94\x41\x17\x6a\x9f\x3e\x7d\xfa\xe4\x9d\x9f\x7b\x47\x47\x70\x72\xd2\x0e\xc3\xda\xcb\xb2\x3a\xbf\xc5\x4a\x57\xb2\x94\x0b\x84\xbf\x2c\x4e\x96\xbd\xa8\xd7\xbe\x4b\x77\xfe\xd4\x1a\xde\x9c\x82\xea\x8b\x42\xeb\x4b\x13\x5f\x18\x02\x68\x83\x12\x31\xc9\x97\x69\x4a\xb6\xff\xfa\x84\xc7\xcb\x12\x9f\x32\x5f\x10\xad\x45\x68\xc3\xde\x43\xc4\x97\xc4\xe7\x0c\x4b\x68\x5b\x1b\xe6\x93\x6b\xeb\xdd\xbd\x8b\x95\xe2\xec\x30\xd0\xfe\x22\xdb\x50\xeb\x29\xe6\x26\xb3\xe4\x05\x3a\x35\xeb\xcc\x04\xda\x39\xa6\x4b\xaf\xbe\xdd\xd5\xd4\xb6\xf6\xca\x25\x1b\x17\xc8\x14\x2b\xfe\x7b\xa4\xf5\x7d\xca\xa2\x58\x25\xf2\x2f\x90\x8e\x1b\x1e\x67\xf5\x9a\x1c\xf0\xd1\xbc\x71\x6a\x2f\x21\xf5\xaf\x3a\x19\xbe\x04\x5b\x9a\xe7\x68\xfa\x4a\x3c\xde\xe7\x4c\x21\xca\x88\xf0\xfa\x94\xe1\x7a\xcd\xd3\x10\x19\x46\xc2\x35\x23\x43\xad\xe1\x0d\x28\x26\xf5\xc6\x2f\x45\x92\x18\x5d\x6e\x26\xca\x8b\xba\x1a\x50\xd9\xf0\x86\x28\xa8\x27\x62\x99\xed\x64\x47\x48\x11\xcf\x6a\xb4\x6e\x7d\xb9\x01\x3f\xd4\xc0\x85\xda\x0f\x09\x19\x61\x38\x87\xa8\xe1\xf9\x03\x2d\x4b\xbe\xd4\x0f\x3b\xbd\x96\x23\x57\x50\xdb\x41\xd5\x6b\xcb\x6f\x7a\xd3\x8a\xd0\x9e\xd0\x58\xc0\x91\xdb\x80\x01\x57\xf0\x6c\xbe\xf1\x87\x36\xd1\x15\x35\x5d\xa4\x80\x74\xd4\x00\xf3\x65\xf8\x9f\x14\xff\xf5\x12\xa6\x85\xf6\x48\x84\x6c\x89\x22\xb7\x0a\x09\x82\x34\x65\x6d\xa2\xf2\x89\xd9\x8b\x8c\x5d\xd6\xc9\xe9\x8b\x40\x37\x75\x88\xe2\x9e\x4d\x5f\x18\x29\x04\x5d\xb8\x2f\x88\xa7\xf4\xba\x81\x2e\x10\x2f\x12\x3c\xaa\xd7\x28\xae\x35\x72\x89\x73\x54\xa2\x2f\xda\x87\x7a\x5a\x57\xf7\xfb\xb5\x06\x74\xbb\x5d\xa8\xa5\xbb\x80\x6b\x45\x20\x53\xf9\xfe\xbc\xf9\x2b\xd3\x7c\xb2\xa9\xb7\xd6\x80\x6f\xbb\x50\xab\x2d\x3a\xa7\xbe\xc6\xf6\x33\xec\xe5\xf8\x6a\x4f\xcd\x47\x54\xb0\x0e\xf2\xc2\x43\xd7\xe8\xb6\xa0\x1b\xd7\x97\x86\xd9\x9e\xf1\x87\x5a\x23\x11\xdf\xfe\x9f\x00\xb5\x12\xb3\xc4\x22\x28\xa8\x6b\x53\x93\xb2\xba\x1a\x56\xdb\xfc\x5b\x4c\x93\x74\xcf\x6d\x98\x8e\xa3\x85\x9d\x4a\x7a\x69\x1b\x0a\x4f\x10\x19\x07\xca\x5a\xaf\x8f\x68\x60\xac\x50\x5e\x51\x5f\x8c\x8c\xe0\xe2\x3d\x57\xb4\x7f\x57\xa2\xb3\xec\x65\xb6\x04\xb6\xa1\x66\xa6\x8e\x4a\xc6\xe6\x99\x3a\xe4\x56\xb5\x41\x78\xa1\x9d\xfa\x5e\xb2\x92\x31\x54\x8d\xac\xd0\x8e\x54\x77\x01\x65\x57\x7a\xac\x4b\x93\xa2\x57\x8b\x49\xc1\xfc\x35\xce\xe9\x45\x67\x9e\x5b\x87\xb5\x7a\x4e\x20\xc0\xb7\x5a\xd1\x31\xb3\xe9\xea\x63\xeb\xfa\xb2\x74\xd4\x5e\xa8\xb5\x81\xb6\xcb\xf3\x83\xf9\xeb\x91\xf4\x5d\xf8\x34\xff\x49\x1e\xbf\xf9\xb2\xec\xef\x4e\xd3\x26\xb3\x07\x45\x2f\x22\xff\x0b\x00\x00\xff\xff\x59\xe7\x50\x02\x76\x68\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x51\x4b\xeb\x30\x18\x86\xbf\x71\xce\x55\x2f\xcf\xf5\xb9\xf8\x04\x1d\x8a\x66\x26\xad\xc3\x2d\x5b\x36\x71\x6e\x20\xae\x38\x46\xf5\x3e\xac\xb1\x2b\xb6\x49\x49\x52\x51\xd8\xdf\xf0\xef\xf9\x5b\x64\x9d\x4e\x7c\xaf\xde\x87\x3c\x79\xf9\x3e\xfe\xfd\x7d\x07\x00\x68\x01\xc0\x7f\x00\x38\x04\x80\x3f\x00\x70\x06\xbb\xf4\x00\x60\xdd\x02\xe8\x7f\x39\xfb\x2c\x55\x65\xac\x27\xb1\xcb\xf2\x94\x5c\xd7\x99\x23\x89\xe1\x98\xaa\x97\xab\xe7\x7c\x2d\x4b\xd3\xb1\x75\xb0\xb8\x4f\xc8\xc4\x2a\xe9\x73\xa3\xc9\x8d\xf4\x8a\x63\x48\x59\x9f\xd0\x88\x84\x97\x18\x46\xbc\xdb\x3d\xa5\x11\xa5\xc1\x5c\x3a\x4f\x12\x2b\xb5\x2b\xa4\x37\x96\xe3\x5d\xb3\x81\x71\x6d\x65\x69\x52\x83\xc3\x5f\xc3\xa3\x60\x2e\x75\x56\xcb\x4c\x91\x44\xc9\x92\xe3\x9e\x39\x2e\x6b\xe7\x72\xa9\x83\xf8\x36\x9e\x92\x47\x65\x5d\x6e\x34\x47\xd6\xa1\xc1\xc4\x68\xaf\xb4\x27\xc9\x5b\xa5\x38\x7a\xf5\xea\xcf\xab\x42\xe6\x7a\x80\xab\xb5\xb4\x4e\x79\xf1\x90\xcc\x48\xef\xc7\xdb\xde\xf3\xa4\x2c\x99\xea\x95\x49\x73\x9d\x71\x0c\x16\x45\x6d\x65\x41\x66\xc6\x96\x8e\xa3\xae\x1a\x74\x22\x1a\xe0\xae\x0a\x7d\xc4\xa8\x10\x0c\xdb\x6d\xdc\x56\x7a\x20\x18\xc3\x31\x52\xe4\x0d\x8f\x44\xf8\xfd\x34\x14\x17\xdb\x7a\xdc\x68\x43\x46\x71\xb3\xd9\x7d\x19\x89\x90\x9e\xe0\x18\x19\x72\x0c\x07\xf0\x19\x00\x00\xff\xff\xa8\xda\x1b\xb3\xa2\x01\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
