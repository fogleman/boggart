// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package miio

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x6f\xdb\xb6\x16\xfe\xbe\x5f\xc1\x69\x1d\x6c\xdf\x55\xb2\x93\xbe\x6c\xf0\xec\x5c\xb4\x49\x7b\x13\x20\xe9\x72\x9b\x6c\x40\xef\x30\x14\xb4\x48\x5b\x6c\x24\x52\x25\x29\x27\x59\xe0\xff\x7e\x41\x52\xb2\x25\x5b\x72\x2c\xd9\x89\x95\xd5\xfa\xd0\xca\xd4\xe1\xe1\x79\xce\x0b\x79\x48\x8a\xca\xdd\x1d\x40\x78\x48\x28\x06\x96\xcb\xa8\xc4\x54\x5a\x60\x32\xf9\xae\x87\xc8\x18\xb8\x3e\x14\xa2\x6f\x71\x76\x6d\x1d\x7c\x07\x00\x00\xe9\x52\x97\xf9\x76\x80\xec\xbd\x7d\xa0\xee\x44\x90\xdc\xdd\x08\x7b\x6f\x3f\xa6\x9f\xaf\x73\xf3\x39\x84\x14\xfb\xa9\xa7\x8b\x14\x89\x14\x59\x9a\x29\x1d\x67\x3e\xee\x5b\x12\x0e\xf2\x38\x4d\x29\x23\x3f\x61\x48\xe1\x18\x50\x38\xb6\x25\x1c\x08\x30\x80\xfc\xb3\xba\xb1\x66\x6c\x7c\x22\xf2\xda\x9a\x72\xf2\x49\x4c\x1b\x72\x2c\x30\x95\x50\x12\x46\xad\xbb\x3b\x40\x86\x00\x7f\x05\x0e\x74\x55\x01\xb0\x94\xd6\x92\x36\x55\xd9\x18\x2b\x22\x4c\x11\x98\x4c\x0e\x7a\x10\x78\x1c\x0f\xfb\x05\xf5\xbe\xc0\x31\x14\x2e\x27\xa1\xec\x8e\x19\x41\xcd\x4e\xeb\x57\x55\xd7\x17\x18\x4c\x26\x77\x77\xc0\xf9\x88\xbf\x46\x58\x48\xe7\xf7\x8f\xa7\xce\x39\x94\x9e\x29\x36\xcc\xad\x03\xc5\x74\xef\x17\x0a\xac\x0b\x09\x65\x24\x2c\xe0\x80\xc9\xa4\xd7\x86\x07\xbd\xb6\x4f\x36\x00\x4d\x60\x29\x09\x1d\x89\xaa\x10\xd3\xf5\xab\x40\xfd\xb7\x61\xd4\x4f\xf8\xe4\x42\x9f\xb6\xb1\x61\xf0\x1e\x11\x92\xf1\xdb\xaa\xd8\x53\xd5\xd7\x81\x1e\xb3\xc9\x43\x7e\x9c\xb4\x70\x3f\xf0\x5e\x3b\xf2\x0b\x9e\xa4\x42\x50\xc2\x81\x5d\x1c\x84\x99\x1a\x73\xc1\x98\xe6\xa0\x4a\xc0\x10\x22\x0c\x8c\xba\x00\xa1\x4b\xb8\x2d\x77\x9a\xc2\x6a\x5a\x90\x21\xe3\x41\xd2\xb2\xba\xb7\x3d\xc6\xc9\xdf\x8c\x4a\xe8\x03\xfd\xdb\x87\x03\xec\xdb\x3e\x1e\xca\x24\xee\x55\xb1\x05\x10\x94\xd0\x96\x6c\x34\x52\x45\x63\xe8\x13\x04\x25\xe3\x16\x20\xa8\x9f\x6a\x3e\xb6\x80\xb2\xed\xb3\x55\xbc\xd3\x02\x01\x96\x1e\x43\x7d\x2b\x64\x4b\xbb\x96\x3c\xdd\x43\xd7\x65\x1c\x29\x4f\xcc\x48\x61\xa7\xca\xb3\x3d\x17\x80\x9c\x40\x3b\x88\x7c\x49\x04\xf6\xb1\xab\xca\xd5\x63\x1e\xe1\x15\x9a\x9e\x6f\x7e\x59\x9f\x9a\x5b\x17\x66\x6a\xda\x1e\x86\x88\xd0\x51\x4a\xc8\x22\x1c\xb6\xeb\x63\x48\x35\x6d\xc6\x0c\x2e\xf3\x7d\x18\x0a\x1c\x17\x87\x90\x63\x2a\xfb\xd6\x0f\x79\x9a\x30\x31\x37\x7b\x94\xd4\x4d\xf1\xd6\xda\xc1\x37\x21\xa4\x08\xa3\x58\x2d\xa6\x50\x79\x38\x67\xbe\x48\x09\xb7\x58\x7f\x75\x4d\x68\x6d\x78\x2f\xb3\xea\x90\x44\xfa\x38\x15\xaa\x87\x53\xb9\x4c\xac\x7a\x2f\x4b\xa8\xba\x0d\x4b\x10\x2b\x9b\x66\x14\x9f\xa3\x9b\x8c\xa8\xc9\x73\x30\xbd\x21\x69\x5f\x8b\xe3\x5b\x6b\x4e\x87\x93\x8f\xd1\xe0\x76\xb9\x61\x4b\x2a\x6f\xde\x0d\xed\x01\x43\xb7\x25\x99\x80\x69\x57\xe2\xb8\x90\x87\x58\x9e\x31\x84\xef\xeb\x40\xee\x93\x86\x48\x1c\x98\x8e\x64\xc4\x59\x14\x56\x10\x49\x73\xd4\x6a\x53\x7c\xfa\x96\x91\xcd\x0e\x18\xc2\x36\xa6\x2a\x62\x91\x35\x4b\xab\xb4\x5f\x1a\x2d\x83\x38\xc9\x7a\x91\xe4\x58\x2f\x72\x53\xac\x32\xd7\xcc\x19\xb5\x10\x40\x09\x01\xa6\x42\x38\x55\x94\xa5\xe1\xb5\xb5\xc0\x15\x75\xb3\x98\x56\xbe\x4e\x10\xbf\x5e\x1b\xb1\x6e\x81\xd0\x30\x92\x40\xde\x86\xaa\x8f\xf1\xb0\x7b\x35\x60\x37\x53\x9d\x7f\x11\xb6\xb8\x26\xd2\xf5\x2c\x40\x61\x80\x0b\x0c\xa4\xe2\x29\xf7\xc1\x74\xf0\x6a\x86\x9c\x50\x99\xf6\x3d\xe7\x9d\x21\x6a\x81\xb8\xef\x51\x59\x84\x6a\x1e\xa3\xe9\x58\x0e\xda\x15\xb5\xd6\x46\x64\x5c\xbe\x6a\xd5\x6a\x8f\x16\x11\x84\x4a\x3c\xe2\xd0\x7f\xb4\x90\x00\x45\x61\x31\x93\x44\xc5\x05\xe8\x89\x10\xd2\xe9\xa4\x08\x7f\x8d\x08\xc7\xc8\x3a\xf8\x57\xaf\xad\x1e\x54\x35\xe2\xd3\x89\x1b\x89\x6f\xa4\x95\xc9\xb4\x62\xcb\xe4\x85\xcd\x4c\x77\xf3\x71\x33\x7b\x32\x86\x7e\x84\x75\x66\x95\x0e\x99\xc3\x88\xab\x41\xff\x24\x26\x53\xd9\x2e\x48\xb4\x9d\xd2\xfb\x2e\x6c\xb2\x6a\xf5\xc8\xc8\xdb\xee\x28\x62\x24\xd8\x85\x4a\xd9\x50\x31\x7a\x9b\x0f\x13\x53\xba\x34\x44\x8e\xc9\xc8\xdb\x85\xc7\x1c\xc7\x82\xf0\xf0\xd9\xf5\x76\xa3\x43\x0b\xb0\x0b\x8e\xb2\xc1\xa1\xd5\x36\x1f\x1b\xba\x70\x69\x68\x9c\xb2\xeb\x5d\x64\xcc\x71\x2c\x88\x0c\x21\xa1\xaf\xe6\xaa\x01\xde\x6e\x80\x68\x39\x80\x91\x63\x17\x27\x65\xe3\x24\x6d\xc5\xf9\x70\x49\x3f\xcb\x8f\x9a\x0b\x45\x71\x49\x02\xfc\xb4\x83\x66\x3a\xa7\xaa\xba\x6a\x30\x84\xf4\x9c\x5d\x63\x5e\xbf\x35\x83\x21\xa4\x76\xa8\x44\x7b\xfc\x20\x7d\x0f\x29\x88\x9b\xde\xc5\x25\xee\x5b\x1c\xd2\x11\xb6\x40\x40\x68\xdf\xea\x58\x20\x80\x37\x7d\x6b\xaf\xd3\x59\x1a\xaa\x29\xf3\xa9\xe8\x4c\xfd\x4c\x05\x64\xca\xfb\x9e\x70\x10\xfe\xf3\xe3\x00\xe8\x3d\x23\xf9\x0d\x87\x83\xd9\x6b\x98\x77\xe5\x1c\xff\x07\x86\x72\x3f\xd7\x9f\xab\x0b\xa0\x85\x60\xa1\xde\x2a\x8a\x03\x28\xbd\xce\x1e\x09\xc9\x82\x64\x95\xdd\x90\x6d\xb4\xad\x17\xbf\xa4\xb6\xfa\xa6\x51\xfb\xe2\x17\xe5\x0e\x06\x30\xd6\x8b\xef\xe6\x2e\xb5\x53\x38\x15\xf1\xbf\x11\x49\x1c\xe8\x41\x24\x7c\xdd\xc9\x93\xf0\x75\x67\x75\x09\xdf\x42\x1f\x52\x37\x59\x14\x7e\x10\x21\x7f\x7e\x95\x27\xe4\xcf\xaf\x56\x17\xf2\x32\xe2\x03\xf6\x80\x12\xaa\x6e\x3d\x47\xc4\xbd\x4e\x09\x45\x9e\xc1\x9b\x07\x95\x30\x57\x89\x7b\x9d\x12\x5a\x3c\x63\x83\x4d\x49\xd8\x6b\x9b\x86\x9e\xc2\x40\x55\x2d\x5b\x2c\xd9\x58\x09\xf2\x12\xa4\x71\xba\x8a\x56\x17\x7f\x4b\xdb\xbc\x88\xa2\x87\xd8\xe1\xd5\x6c\xab\x6d\xee\xaa\xaa\x1b\xde\xd7\x3d\x62\x80\x32\x09\x10\x11\x32\xe2\x83\x6d\xee\xee\x6a\xbd\x2c\xdf\xd8\xad\xb6\xab\x5b\x41\x6b\x9b\xda\xd0\x7d\xd8\x7c\x12\x51\xb4\xbd\x3d\xd8\x77\xbb\x7d\xd7\xcc\xbe\x6b\xc6\x18\xca\xc3\x33\x05\x0b\xfb\xac\x88\xa2\xdd\x06\xeb\x12\x8e\x73\x6e\xbe\x9d\x25\xbe\xcb\xe9\x82\xde\x3f\xde\xc1\xcd\x82\x5d\xe2\xb7\x19\x75\x67\xd7\x04\x52\x73\x7e\x44\xd1\x67\x21\x21\x97\xce\x7b\xc6\x03\x28\x81\xb5\xdf\xe9\xbc\x76\x3a\x7b\x4e\x67\x1f\xec\xbd\xea\x76\x5e\x6a\x9f\xb6\x41\x42\x8c\x29\x5a\x4a\xfa\x04\x56\x09\xea\x92\x42\x95\xc8\xfe\xb6\x94\x3e\x31\xe9\xa9\x89\xf5\xe6\x13\xa8\x98\x71\xb5\x14\xca\x54\xde\x70\x12\xf5\x9b\x91\x68\x7b\xb9\x53\xac\x92\x87\xc8\x9e\x2a\x29\x6c\xc3\x2f\xc4\x8d\x99\x1f\x05\x35\x7c\x19\xce\xc8\xf5\xf8\xe3\xd2\x1f\x71\xbb\xdf\xc4\xc8\x54\x65\xc9\x3a\x31\x8c\x8a\x96\xe4\x3e\x35\x70\x4d\xfd\xe9\x09\x2f\x55\xaf\xbd\x5f\xa4\xc6\xf8\xbf\x19\xad\x61\x58\x25\x92\x6d\x27\xe1\x33\x2d\x7f\x13\xa1\x75\xef\x2e\xed\xcc\x12\x2a\x92\x66\xbf\x52\xb1\x94\x72\xa3\x6f\x2e\x9a\xb6\x9e\x0c\xae\x40\xd6\x6b\x2b\xc3\x2e\x3d\xbe\xa2\xcf\xf1\x14\x1f\xfe\x59\xca\x3e\xee\x4c\x44\x14\x04\x90\xdf\xae\xa0\xbf\xb9\xd3\x79\x40\xb2\xf0\xb3\x24\x3e\x16\x15\xce\x7c\x40\x4a\x02\x28\x31\x02\x43\x9f\x84\x27\xf4\x93\x8e\x10\x7f\x64\xbf\x4c\xfa\x88\x97\x49\xf0\xbc\xac\x14\x3c\x99\xa3\x45\xc4\xd7\x6f\x23\xc8\x55\x05\xcd\x63\x42\x5c\x46\xad\x83\x1e\x99\xc6\x1c\x04\x43\x68\xbb\x3e\x73\xaf\xd4\xcd\xab\x1b\xeb\xa0\xd7\x26\x07\x55\xe6\x25\x99\x9e\x23\xa2\x52\xa7\xa7\x89\x5d\x9c\x4b\x26\xa1\x7e\x49\xe2\x38\x0a\x20\xd5\x79\x6a\xf9\x26\xbc\x17\xa9\xdd\x0b\xc5\x30\x7e\xe3\x45\x67\xbd\x2f\xb6\x3d\x29\xfa\x27\x3a\x06\x67\xe1\x23\xf8\xc5\x1b\x8e\xe1\x66\xfd\x02\x72\x0c\x77\x7e\xf1\x60\x7e\xe1\x41\xe1\x49\x38\x7a\x04\xd7\xd0\xc7\xbe\xa2\x50\x6c\xcc\x33\xdc\x98\x61\x1d\xbc\x63\x05\xb2\xd5\xf2\x82\x64\x4b\x0b\x4b\x48\x7c\xb1\x4a\x16\x91\x7f\x46\xfd\xde\x5a\xfa\x88\x64\xea\xa8\xaa\x8f\x81\xfe\xd7\x16\x92\x93\x10\x23\xbd\xac\x62\xca\x91\xb4\x39\x16\x21\xa3\x82\x8c\x31\xa0\xec\x9a\xc3\xd0\x02\x42\xde\xfa\xb8\x6f\x5d\x13\x24\xbd\xee\x5e\xa7\xf3\x63\x19\xe7\x96\x1e\x86\xa8\x0c\x3d\x2f\xe9\x2e\xd2\xcb\x1c\x08\xe7\x32\xf5\x4a\x65\xaf\x2d\xbd\x35\xd8\xbd\xa3\x68\x73\xcc\x8e\x22\x6e\xce\x5c\x6f\x82\xd9\x1b\xdd\x57\x96\x67\xd4\x6b\x97\xd1\xaf\xe2\x5d\xd2\x7a\x03\x86\x6e\x57\xa7\xbf\xbb\x03\x7a\xa6\x0e\x9e\x99\x30\x00\xdd\x7e\xa9\x88\x98\xb5\xcb\x13\x07\x37\x61\x15\xf3\x73\x0e\x59\x10\xfa\x58\x75\xde\x93\x89\x88\x5c\x17\x0b\x31\x3b\x83\x8e\x54\xd3\x3c\x75\xc6\xbc\xa4\x3d\xd0\x41\xcf\x9c\x6f\x8f\x67\x46\x30\x0c\x7d\xe2\x6a\x23\xb7\x67\x87\xdf\xad\x03\xc4\xdc\x28\xc0\x54\x3a\xd7\x9c\x48\xdc\x44\x50\xe2\x4b\x76\x21\x39\xa1\xa3\x66\xe3\xee\x6e\x2a\xac\xf6\x5e\x95\x6f\x65\xd6\xbb\xed\xce\x9e\xdd\xd9\xbf\xd4\xeb\xdd\xdd\xce\xab\xff\x75\x7e\xee\x76\x3a\xaa\x27\x6c\xb4\x5a\xbd\xb6\x69\xe3\xa0\xd7\x96\x25\xcc\xf4\x30\xe2\xbf\xa3\xe8\x31\x85\x4f\xb5\x9c\x9c\x33\x4e\x42\xcc\x84\xc5\x7a\x3c\x55\x84\x95\xe6\x53\x2e\xbc\xca\xcf\x1f\x7b\xed\x12\x01\xd6\x6b\xeb\x4e\xfd\x91\x86\xb4\x59\x58\xad\x32\xea\x11\x3a\x64\xf7\x7e\xe8\x60\x2b\x03\x57\x99\x01\xab\xd4\x60\xd5\x93\x5e\x82\x25\x40\xb6\x4a\x14\xf7\x53\xbb\x01\x7f\x40\x4e\x14\x92\x4a\x9d\xfa\x3d\x9c\xfd\xa8\x34\xdb\xd5\x1c\x79\xe5\xf1\xa1\xcc\xb8\x50\x52\xa9\x28\xf5\x5a\xd7\x9b\xc3\x29\xce\x52\x83\x96\xe6\xa1\x7d\xd2\x39\x7b\x73\x58\x8a\xc1\xea\x11\xbf\x06\x2e\x86\xb0\xbf\x3e\x32\xc5\xa5\x76\xd8\x8e\x21\x47\xd7\x90\x63\x30\xc6\x5c\xa4\xb3\xa3\xaa\x30\x13\x86\x7f\x18\x7e\xb5\x03\xfc\x9e\xf0\x60\xa3\x80\x13\x86\x75\x05\x7c\xc9\xae\xf0\xfa\x28\x35\x97\xda\x61\x3b\x25\x43\x9c\x9d\x21\x54\xc5\xa7\x38\xc5\xe7\x91\xea\x05\xf1\x8d\x4e\x9a\x41\xc8\x08\x95\xe0\xed\xc5\xc5\xc9\xd1\xda\x58\x0d\xcb\x73\xc5\xd1\xd1\x1c\xeb\x0d\xfa\xe3\xc5\xc5\xc9\x46\x31\x2b\x86\xf5\x86\xbc\x71\x33\xd7\xd2\xca\x1f\xb0\xbc\x66\xfc\x0a\xf8\xcc\x85\x3e\x38\x39\x5f\x1b\x71\xcc\xd0\x39\x55\x0c\x4f\xce\x6b\x0b\x78\x04\x25\xbe\x86\xb7\x1b\xc3\xfb\x1f\xc3\xaf\xb6\x78\x03\x28\xae\x36\x06\xf6\x0c\x8a\xab\x07\x40\xba\xd2\xd4\x6e\xa5\x29\xdd\x6c\xae\xb6\xca\x4c\xec\x9a\x0c\xc9\x6e\x26\xb6\x9b\x89\xe5\xd2\x56\x0d\xbc\x0b\x09\xe5\x5a\x39\x91\xf2\x4a\x47\x73\xa9\x5d\xa7\xf2\x26\x92\x1e\x18\x42\xe2\x03\xb3\xff\xb1\x2e\x4a\xc5\xef\x3d\x24\xfe\xa1\xe2\x56\x3b\xb4\x87\x8c\x52\xec\x4a\x10\x2f\x9e\x6e\x08\x73\xcc\xf5\xc2\x30\xad\x37\xf2\x0d\x9a\x3a\x66\x59\x5f\x6b\x1f\x1d\x1f\x9e\x6f\x12\xb0\xe2\xf7\x90\x68\xb7\x35\x68\x0a\xfd\xe1\xe1\xdd\xb0\xb9\x1b\x36\x73\x69\x2b\x2f\xf4\x61\x21\xe0\x68\x23\x4b\x43\xc6\x43\x9d\x98\x63\x5d\xd7\x86\x12\xc0\x02\x7f\x8d\x30\x75\xd7\x4a\x19\xb2\x88\x2f\x62\x8e\xb5\x83\xbc\x76\x6a\x14\xe3\xac\x67\x72\xf4\x16\x4a\x89\xf9\x5a\x33\xcb\x18\x5f\xcc\x09\x4c\x26\xe0\xc7\x7a\x61\xd4\xbb\x8d\x6b\xaf\xfa\xc5\x30\x35\xb3\x5a\x2e\xfc\x19\x98\x30\xfd\xa2\xc1\x9a\x30\xe3\x2d\x55\x10\x04\x3d\x11\x85\x07\xfb\xbd\xb6\xfa\xaf\x5e\xa8\xdf\x71\xce\xf8\x06\x00\x6b\x3e\xb5\xb3\xe9\x19\x0c\x41\xfc\xfd\xff\x4d\x74\xb5\x30\x3c\x37\xcc\x6a\x07\xf4\x84\x02\x77\xee\xe3\xe3\x6b\x00\x3d\xa1\xc9\x1b\x06\x75\x04\xca\xb1\x8c\xf8\xc6\x90\x7e\x4c\xb8\xd5\x11\xea\x90\x63\xe1\x01\xb1\xa1\x21\xf4\x84\xbe\x57\xfc\xea\x39\x92\x9e\xc2\x01\x10\x99\xbf\x6f\xb2\x06\xd2\x53\x38\xb8\x48\xa6\x2c\xf5\x82\x39\xf7\xad\xb5\xb5\x50\xbe\x9f\x7d\x4e\xac\x5e\x20\x8f\x3e\x1c\x65\x3f\x39\xbf\x16\xcc\xa3\x0f\x47\xf1\x47\x00\x9e\xc8\x8c\xba\x3a\xc5\x92\x37\x93\x0a\x1e\xe5\x14\xcf\x15\xa5\x7e\xc6\xb7\xf1\x7f\xa9\x25\x80\xd4\x1f\x89\x52\xf3\xc3\xe9\x81\x96\x15\xff\x6c\xcb\xdd\x9d\x0e\x5d\xe2\x1e\x5f\x9e\x9d\x82\xa6\xb9\xff\xfd\xe3\x29\xb0\xda\x08\x0a\x6f\xc0\x20\x47\x6d\x28\x04\x96\xa2\x3d\xc6\x14\x31\x2e\xda\x03\xc6\xa4\x90\x1c\x86\x36\x82\x12\xeb\xb7\x22\x43\xe2\x5e\x61\xde\x76\x85\x68\xcf\x95\x39\x01\xa1\x8e\x2b\x84\x05\x86\xd0\x17\xb8\x95\x92\x2f\x86\x90\x0f\xe6\x8b\x78\x0c\x28\xd3\x3f\x2d\xd3\xfe\x92\xfa\xa1\x65\xfe\xb2\x20\x72\xd5\x46\x02\x16\x60\x2a\x55\x0b\xe6\x6e\xc3\xec\x8b\xcd\xf1\x25\xdf\x1a\xd9\xa6\x67\xde\xb6\xd2\x2b\x96\x19\x7f\x7d\xd6\x4c\xde\xb8\x6c\x39\x1c\x43\x74\xdb\x1c\x46\xd4\xd8\xa8\xd9\x02\x77\x0b\x2e\x3f\x86\xbc\x30\x80\x86\x81\x3c\xa1\xa0\x0f\x1a\x9f\x3e\x7d\xfa\xe4\x9c\x9d\x39\x47\x47\xe0\xf8\xb8\x1b\x04\x8d\xe7\xcb\xea\xfc\x16\x49\x55\xc9\x50\x2e\x10\xfe\xba\xb8\x46\xf6\xac\xd9\xf8\x21\xf9\x06\x44\xa3\xe5\xcc\x29\xa8\xb9\x28\xb4\xba\x14\xf1\xb9\x26\x00\x5d\x20\x79\x84\xf3\x65\x9a\x91\xed\xbf\x3c\x66\xd1\xaa\xc4\x27\xd4\xe5\x58\x69\x11\x74\xc1\xde\x7d\xc4\x17\xd8\x65\x14\x09\xd0\x35\x36\xcc\x27\x57\xd6\xbb\x7d\x1b\x49\xc9\xe8\xa1\xaf\xfc\x45\x74\x41\x63\x20\xa9\x1d\x2f\x8e\x17\xe8\x54\x6f\x2f\x63\xd0\xcd\x31\x5d\x72\x0d\xcd\x2b\xb3\x5d\x63\xaf\x5c\xb2\x49\x81\x4c\x91\x64\xbf\x87\x4a\xdf\x27\x34\x8c\x64\x2c\xff\x02\xe9\xa4\xe5\x30\xda\x6c\x08\x8f\x5d\xcf\x1b\xa7\xf1\x1c\x24\xfe\xd5\xc4\xe3\xe7\xc0\x94\xe6\x39\x9a\xba\x62\x8f\x77\x19\x95\x90\x50\xcc\x9d\x21\xa1\xa8\xd9\x70\x14\x44\x8a\x20\xb7\xf5\xc8\xd0\x68\x39\x1e\x41\xb8\xd9\xfa\xb5\x48\x12\xad\xcb\xf5\x44\x79\xd6\x94\x1e\x11\x2d\x67\x0c\xfd\x66\x2c\x96\xfe\xb0\xc8\x11\x94\xd8\x31\x1a\x6d\x1a\x5f\x6e\x81\x9f\x1a\xc0\x06\x8d\x9f\x62\x32\x4c\x51\x0e\x51\xcb\x71\x3d\x25\x4b\xbe\xd4\xf7\x3b\xbd\x92\x23\x57\x50\xd3\x41\xe9\x77\xa5\x57\xfc\xfc\x89\x52\x84\xf2\x84\xd6\x02\x8e\xdc\x06\x34\xb8\x82\x67\xf3\x8d\xdf\xf7\x39\x95\xa2\xa6\x8b\x14\x90\x8c\x1a\x40\x9f\x11\xfe\x93\xa0\xbf\x9e\x83\x59\xa1\xf9\x38\x5e\xba\x44\xe2\x1b\x09\x39\x86\x8a\xb2\x31\x55\xf9\xd4\xec\x45\xc6\x5e\xd6\xc9\xa9\x0b\x83\x7e\xe2\x10\xc5\x3d\x9b\xba\x10\x94\x10\xf4\xc1\x5d\x41\x3c\x25\xd7\x15\xe8\x03\xec\x84\x9c\x85\xcd\x06\x41\x8d\x56\x2e\x71\x8e\x4a\xd4\x45\x86\xa0\x99\xd4\x55\xfd\x7e\xa3\x05\xfa\xfd\x3e\x68\x24\xdf\x83\x6a\x14\x81\x4c\xe4\xfb\xf3\xea\xaf\x54\xf3\xf1\xe7\x9d\x1a\x2d\xf0\x7d\x1f\x34\x1a\x8b\xce\xa9\xae\x89\x79\xfb\x7a\x35\xbe\xca\x53\xf3\x11\x15\x6c\x7f\x3c\x73\xe0\x17\x78\x53\xd0\x8d\xab\x4b\xc1\xec\x66\xfc\xa1\xd1\x8a\xc5\x37\x7f\x1d\xae\xb1\xc4\x2c\x11\xf7\x0b\xea\x9a\xd4\x64\x59\x5d\x05\xab\xab\xff\x2d\xa6\x89\xbb\xe7\x2e\x98\x8d\xa3\x85\x9d\x4a\x72\x29\x1b\x72\x87\x63\x11\xf9\xd2\x58\x6f\x08\x89\xaf\xad\xb0\xbc\xa2\xba\x28\xbe\x06\xe7\x1f\x98\x24\xc3\xdb\x25\x3a\x4b\x5f\xfa\xe3\x30\x5d\xd0\xd0\xcb\x46\x4b\xc6\xe6\x4c\x1d\x7c\x23\xbb\x80\x3b\x81\x59\xf1\x5e\xb1\x92\x36\x54\x03\x97\x68\x47\xc8\x5b\x9f\xd0\x91\x1a\xeb\x92\xa4\xe8\xc5\x62\x52\x30\x7f\x4d\x72\x7a\xd1\xcc\xf3\xe9\x09\xf2\xe6\x14\x02\xf8\x5e\x29\x3a\xa2\x26\x5d\x7d\x68\x5d\x5f\x2c\x1d\xb5\x17\x6a\xad\xa1\xed\xe5\xf9\xc1\xfc\xf5\x40\xfa\x2e\x7c\x9a\xff\x24\x8f\xdf\x7c\x59\xfa\xf7\xf4\x34\x4f\xd1\x44\xe4\xff\x01\x00\x00\xff\xff\x10\x76\xbf\x87\x79\x77\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xcd\x4a\xc3\x40\x14\x85\x6f\xd1\x55\x96\xae\x5d\x5c\x41\x8b\x82\x53\x33\xd5\x45\x9d\x76\x5a\x51\x5a\x10\x1b\x90\x12\xdd\x5f\x9a\x31\x1d\x4c\x66\xc2\xfc\x88\x42\x5f\xc3\xd7\xf3\x59\xa4\xa9\x56\x3c\xab\xf3\x71\xbe\x0b\xf7\xeb\x60\xff\x13\x00\xa0\x03\x00\x87\x00\x70\x0c\x00\x7b\x00\x70\x0e\xdb\x0c\x00\x60\xd2\x01\xb8\xfe\x71\x76\x59\xa8\xc6\xba\xc0\x32\x5f\xea\x82\xdd\xc6\xd2\xb3\xdc\x0a\x2c\xd4\xdb\xcd\xab\x5e\x51\x6d\x7b\x2e\x26\x73\xf2\x81\xe5\x8e\x8c\xaf\x28\x58\x27\xf0\xa1\x9d\x30\x8b\x8e\x6a\x5b\x58\x1c\xfd\xf3\xc7\xc9\x9c\x4c\x19\xa9\x54\x2c\x57\x54\x0b\xdc\xb1\xc0\x45\xf4\x5e\x93\x49\xb2\xfb\x6c\xca\x9e\x95\xf3\xda\x1a\x81\xbc\x97\x26\x77\xd6\x04\x65\x02\xcb\x3f\x1a\x25\x30\xa8\xf7\x70\xd1\x54\xa4\xcd\x10\x97\x2b\x72\x5e\x05\xf9\x94\xcf\xd8\xe0\xcf\xdb\xfc\xf3\xa2\x1c\x9b\x9a\xa5\x2d\xb4\x29\x05\x26\x8f\x55\x74\x54\xb1\x99\x75\xb5\x17\x68\x9a\x16\xbd\xbc\x1c\xe2\xb6\x4a\x73\xc2\x53\x29\x39\x76\xbb\xb8\xa9\xe9\x91\xe4\x1c\x27\x98\xa2\x68\x79\x2c\xfb\xbf\xd3\x48\x5e\x6d\xea\x69\xab\x8d\x78\x8a\xeb\xf5\xf6\x64\x2c\xfb\xe9\x19\x4e\x90\xa3\xc0\xfe\x10\xbe\x03\x00\x00\xff\xff\xcf\x65\x2a\xf0\x79\x01\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
