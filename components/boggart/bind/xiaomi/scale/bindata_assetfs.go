// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/views/widget.html
package scale

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x6f\xdb\xb6\x16\xfe\x9e\x5f\x71\x2e\x6f\x00\xc9\x40\x2c\xd9\x29\x6e\x71\xe1\xc6\x01\x92\x9b\x5b\x74\x40\xb3\x15\xcd\xf6\x21\x2b\x8a\x82\x96\x8e\x65\xa6\x12\xa9\x91\xb4\xeb\xcc\xd0\x7f\x1f\x28\x4a\xb2\xde\x1c\x3b\x4b\x33\x64\xc0\xfc\xc5\x14\x79\x78\x5e\x9f\x87\x6f\x9b\x0d\x84\x38\x67\x1c\x81\x04\x82\x6b\xe4\x9a\x40\x96\x1d\x9d\x85\x6c\x05\x41\x4c\x95\x9a\x12\x29\xbe\x91\xf3\x23\x00\x80\x7a\x6f\x20\xe2\x61\x12\x0e\xc7\xa7\x60\x5a\x2a\x29\x5b\x6b\x35\x1c\x9f\x16\xf2\xed\x39\xeb\x2f\x29\xe5\x18\xd7\x46\xbb\x12\x9a\xe9\x18\x5b\x12\xb9\xd4\xe2\xf4\x7c\xb3\x01\x36\xfe\x2f\x07\x72\x13\xd0\x18\x09\x78\x90\x65\x67\xfe\xe2\xb4\x47\xba\xee\x69\x8c\x54\xce\xd9\x9a\x9c\x9f\xf9\x21\x5b\xb5\x8c\xf7\x74\x35\xfc\x29\xb3\xd2\x63\x63\x2e\x64\x52\x0a\x9a\xf6\x70\x21\x24\xfb\x5d\x70\x4d\x63\xc8\xbf\x63\x3a\xc3\x78\x18\xe3\x5c\x13\x90\x22\x46\x2b\x46\x20\x41\xbd\x10\xe1\x94\xa4\x42\x69\x02\x2c\x9c\x12\x85\x7d\x16\xda\xde\x30\x8d\x89\xd5\x1c\x49\xb1\x4c\x77\xcc\xc8\x67\xe5\xa6\x8d\xec\x94\xa4\x52\xcc\x99\x49\x57\x55\x39\xae\xa5\x88\xad\x77\x50\xd4\xf1\x55\x59\xc6\x57\xbd\x55\x6c\xff\xaa\x4a\x7c\x28\x95\x9b\x5a\xec\x76\xc7\xcf\x8d\x3d\xe0\x6f\x17\x59\xaf\x4b\x8f\x5e\x1f\xe4\x51\xae\x45\x61\x8c\x81\xce\x33\x5a\x45\xcd\x69\x82\xdd\x24\xe4\x59\x2c\x32\x01\x76\xda\x3e\xed\x9b\x0d\x48\xca\x23\x84\xe3\x42\x19\x4c\xa6\xe0\x15\x6d\xf5\x50\xf8\x95\x7f\x22\xd5\x4c\x70\x58\xd1\x78\x89\x53\xb2\xd9\x54\xaa\xbc\x1f\x69\x82\x90\x65\xa6\x8f\xcd\x01\x7f\x83\x63\x2f\x58\x4a\x89\x5c\x7f\x69\x88\xb4\x27\xec\xb5\x59\xfe\x6c\x8c\x98\x63\xcd\xb6\x8c\x2d\xe4\x21\x64\xd9\x79\x8f\x27\x67\xbe\x75\x76\x6f\x4e\xac\x8a\x87\xeb\xe2\x5b\x9b\x0f\xd4\xbf\x4b\xc3\x43\x86\x9e\xcc\x0d\x85\xeb\xe7\xe1\xc5\x8d\x51\xfc\xd2\x38\x91\x47\x6b\xf9\x50\x0f\xbc\x97\x0b\x16\x88\x1c\xa1\x83\xc3\xff\x87\x4c\xd3\x59\x8c\xa0\xe5\xd2\x20\x05\x42\xa6\xcc\x77\x38\x25\x65\xab\x06\xad\xc7\x92\x62\xb4\xa5\x40\xc7\xf2\x0d\xae\x61\x4e\x63\x95\x5b\xdd\x07\x68\x5b\x87\xeb\xda\x46\x71\x08\xa0\x7b\x3c\x1a\xef\xf1\xa8\x4c\xc3\x61\x0e\xbd\xc5\xe4\x91\x2e\xbd\x5c\xf6\x2c\x90\x45\x0b\xfd\x3c\x04\x7a\x57\xe8\x7e\x11\x1c\x62\x3c\x5d\x6a\xd0\xf7\x29\x4e\x89\xc6\xb5\xee\xa5\x4e\x49\xad\x32\x2b\x86\x71\x45\xfb\x90\x55\x7a\xbb\x29\x74\x50\x66\x73\xb1\xdd\x1e\x0e\x61\xe5\x21\x26\x25\xd2\x50\xf0\xf8\x7e\x4a\xca\x16\x81\x90\x6a\x3a\x2c\x78\x3c\x25\x46\xd9\x16\xc5\xe0\xbf\x3c\x0c\xd2\xe8\x99\x4e\x36\x17\xd1\x4b\x39\xd5\x3c\x0a\x7d\x79\x3e\x0c\xf4\x4c\xe3\x89\xb8\xbb\x88\xf0\x1f\xd0\x55\xb3\x6a\xa0\x9b\x31\xa9\x17\x21\xbd\x7f\x1e\xe4\x5d\x56\xda\xff\x7e\xf0\xdb\x66\xc6\x60\xb0\xfa\x7a\x1c\x10\x77\xa0\xad\xcc\x8b\xf7\x83\xfa\x15\xa5\x28\x41\xd7\x87\xdc\x4a\xf4\xad\x90\x09\xd5\x40\x4e\x47\xa3\xd7\xde\x68\xec\x8d\x4e\x89\x9d\x62\xc1\xf5\xfc\xd8\xfe\x8b\x70\x1c\xf3\x2f\x4a\xc4\x2c\xec\xbd\xe4\xf6\x4d\x38\x0c\xf3\xbb\x10\x94\x84\x43\x31\x9f\x2b\xd4\xc3\x57\xfb\xe0\x33\x5b\x6a\x2d\x78\x71\xfe\xe4\x21\x29\x90\xa4\x96\xb3\x84\x6d\xb1\x34\xd3\x1c\x66\x9a\x0f\xd5\x32\x08\x50\x29\x52\xbb\xeb\xd3\x55\x75\x5c\xb2\xba\xbe\x67\x1e\xcf\x7c\x93\x88\x07\xdf\x04\x6a\x9f\x45\xb3\xf8\xdb\x5e\x7e\x8e\x6a\xcf\x28\x0b\xa4\x21\x29\xf1\xb2\xd9\x80\xd2\x54\xb3\xe0\xdd\xcf\xd7\xef\xc1\xb5\xed\x5f\x3e\xbe\x07\xe2\xcf\x44\x14\x51\xa9\x7d\xaa\x14\x6a\xe5\xaf\x90\x87\x42\xfa\x4c\x70\x2f\xbf\x65\xde\xc4\x2c\x44\xe9\x07\x4a\xb5\xfb\xbc\x84\x71\x2f\x50\x8a\xd8\xb3\xf0\xe0\x00\x5b\x21\x55\x8b\x99\xa0\x32\x6c\x5a\x53\xfe\x4c\x08\xad\xb4\xa4\xe9\x30\xa4\x1a\x73\x23\x29\x0b\xbe\x16\x86\x5b\x7d\x7d\x86\xfb\x73\x70\xa7\x48\x31\xf8\xb4\xe8\xef\xfa\x83\xbf\x6b\xbb\xf0\xe8\xb8\x13\x91\x20\xd7\x46\xbf\x6d\x7d\x27\xb5\xbb\xd3\x79\xd7\x9f\xcd\xa6\xc9\xa3\x33\x15\x48\x96\x96\x8b\x2d\x4d\xd3\x98\x05\xd4\xdc\x10\xfc\x3b\xba\xa2\x76\xb0\xe0\xdb\x8a\x4a\xa8\xde\x1e\xa6\xb0\xa9\xe0\xba\x7d\xa6\x60\x27\xfb\x9f\x2a\xaa\xf5\xef\x98\xc1\x28\xcb\x4e\xaa\x7a\x3a\x3d\x6f\x02\xce\xa4\x66\x07\xf2\x47\x85\xf5\xa4\x50\x71\x5c\xbf\x12\x65\xd9\xd8\x28\xb2\x37\xb5\x51\xa5\xf3\xa4\x31\xd9\x9e\x8d\xf3\xf9\xc7\x9d\x93\x6e\x53\x94\x46\xd8\x94\xb3\x27\x93\xa6\xd0\x36\x94\x3d\x1b\x46\xb9\x2b\x35\x55\xee\xd9\x32\x4e\xfa\x9f\x3a\xb0\xd8\x25\x3a\x69\xa8\xb6\x8f\x2c\x33\x66\xb7\xe9\xc8\xcb\xdd\x55\xd6\x28\x49\x6d\x2c\x7b\x73\x94\xff\x1f\xbb\xa1\x08\x96\x06\xab\x03\xcf\x6c\x2e\xf7\xee\x7c\xc9\x83\xfc\x9e\xea\x0e\x6a\x65\x59\x51\xd9\x59\xe4\xf0\x06\xa6\x70\xec\x3a\xff\x56\xb8\x76\x06\x27\xdd\xf1\x77\xc5\xb8\x2d\x49\xaf\xc8\x45\x21\x42\x23\xec\x1d\xbf\x2c\xc6\xcb\xe4\x3a\x83\xc2\x71\x6b\xc0\x63\x82\x7f\xdc\xd2\xd8\x6d\xe1\xe8\x2b\xe3\x13\x70\x12\x11\xa2\xe4\x4e\x53\x7b\x62\x86\xc6\xad\x3e\xba\x9e\xc0\xe9\x7f\x46\xdb\xec\x0d\xde\x6c\x8d\x5d\x3c\xd1\xd8\xa8\xc7\xd8\x78\xb4\xc3\xd8\xa5\xd7\xe2\x75\xcb\x5a\xc2\xf8\x15\xd5\x38\x01\xbb\xd0\xb8\x03\x4f\x2d\x67\x5a\xd2\x40\xbb\xe3\xd1\xe8\x04\x9c\x7b\xa4\xb2\x9d\xd1\x84\xae\x5b\x93\x90\x87\x3f\xcd\x5d\x27\x4f\x6c\x8b\x1b\x69\x1a\xdf\x5f\xe6\x1b\xe3\xff\xcc\x5e\x8a\x6a\x02\x4e\x6d\x2b\x6d\x45\x18\x8b\x80\xe6\x70\xed\x94\x70\x9e\xe3\x7e\x02\xce\xed\xed\xed\xad\x77\x7d\xed\x5d\x5d\x39\x0d\xa1\x16\xdf\x34\x4b\xf0\x43\x1e\xf2\xc4\xae\x61\xcd\x61\xc5\x78\x14\xa3\x09\xa3\x14\x32\x3c\x68\xc9\x2c\xc4\xb7\x2b\x29\xd2\x50\x7c\xe3\xca\x0a\x34\xb2\x5c\x7d\x18\x64\x15\xcc\x72\x06\x5e\xb0\x30\xe9\xde\x41\x00\x28\x17\xc7\x1c\x90\x7a\xc1\xd4\xc0\x5b\xd1\xd8\xad\xab\x33\x3f\x36\x07\x37\x05\xc6\xab\x55\xb4\xad\x24\x2f\xef\x4d\x3e\xb7\x14\xf9\x94\x7e\xf6\x14\xae\x07\x9e\x96\x2c\x8a\x50\xba\x8e\x75\xc5\xa9\x21\x62\xdf\xd4\xe2\x81\xcd\xdd\x94\x8f\x65\x13\xf8\x57\x5d\xa8\x5c\x51\xb2\xb6\xc3\x60\x89\x64\xee\x4a\x2e\x69\x22\x9c\x0c\xbc\x65\x6a\x70\xe8\x76\x43\xc8\x4b\x2b\x45\x32\x81\xba\x15\xcb\xf4\x2e\x8f\xcd\xaf\x70\x6c\x87\x5f\xdd\x39\x59\x5f\xf4\x17\xdf\xc9\x51\x1a\xf5\x58\xfc\xb3\x5e\x76\x3a\x0d\x08\x9c\x6a\xc9\xaa\xa3\xe1\x53\xfa\xb9\x0f\x10\x60\x39\xdf\xae\x6c\xa9\xa2\x27\x13\x99\x5d\xf8\x1f\x54\xe5\xf4\x01\xa8\x7b\xe3\xc0\x4b\x8f\x6a\x2d\x5d\xa7\xbc\x5d\x38\x27\xfd\xd1\xb7\xb4\x65\x9d\xa5\xcb\xfc\x9f\xf9\xf6\x40\x51\x3b\xc8\xfe\x11\x00\x00\xff\xff\x1c\xad\x9e\x3c\x0e\x1c\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html": templatesViewsWidgetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
