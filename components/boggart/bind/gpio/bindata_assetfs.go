// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package gpio

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xcf\x6e\xdb\x30\x0c\xc6\xef\x7d\x0a\x42\x1b\x90\xf8\xe0\x18\x49\x81\x62\xc0\xec\x5c\x87\x9d\x36\x60\x0f\x30\x28\x12\x5d\xab\x93\x25\x4f\xa2\xd3\x74\x46\xde\x7d\x90\xfc\xa7\x69\xea\x34\xc9\xc5\x34\xf9\xb3\xf8\x99\x1f\x9d\xae\x03\x89\xa5\x32\x08\x4c\x58\x43\x68\x88\xc1\xf1\x78\x97\x7b\xe1\x54\x43\x40\x2f\x0d\x16\x8c\x37\x8d\x56\x82\x93\xb2\x26\x7b\xe2\x7b\xde\x17\xd9\xf6\x0e\x00\xe0\xf3\x52\x5a\xd1\xd6\x68\x28\x59\x39\xe4\xf2\x65\x59\xb6\x46\x04\x16\x96\x09\x74\x91\xe9\xb9\xc5\x27\x4f\x9c\x70\x91\xac\x44\xc5\xcd\x23\x4e\xe0\x1b\x6e\x62\x91\x16\xc9\xca\xb7\xbb\x5a\xd1\x32\xf9\x3a\xd5\x8f\x43\x1c\xae\x79\xd6\x4b\xd9\xde\xe5\x52\xed\x41\x68\xee\x7d\xc1\x9c\x7d\x1e\xb4\x9d\x66\x85\xd5\x69\x2d\xd3\xf5\x06\x42\xe4\xeb\x31\x3a\xf8\x74\xbd\x19\xf8\xf3\x67\x0e\xbf\x1b\x6e\x50\x9f\x54\xdf\x13\xa4\x48\xe3\x19\x11\xa9\x6a\xb3\xed\x3a\x50\xeb\x2f\x06\xd8\xb7\x9f\xdf\x7f\x30\x58\xc1\xf1\x98\x67\xd5\x66\x06\x3e\x15\xaa\x91\xbb\x52\x1d\xd8\x36\xcf\xa4\xda\x9f\xf5\x9e\x49\xbd\x91\x33\xba\x38\xd3\xa3\xb4\xae\x1e\xc1\x10\xa7\x95\x75\xea\x9f\x35\xc4\x35\xc4\x7b\xcd\x77\xa8\x53\x8d\x25\x31\x70\x56\x63\x8f\x31\xa8\x91\x2a\x2b\x0b\xd6\x58\x4f\x0c\x94\x2c\x98\xc7\xb9\x0e\xe7\x6a\xe2\xa1\x8f\xce\xb6\xcd\x05\x38\x3e\x10\xbb\x06\x01\x05\xdb\x5b\xdd\xd6\xc8\x5e\x2d\x33\xe4\xac\xee\x75\xc1\x60\xe0\xfd\xe8\xdf\xfd\xac\x7d\x73\xbf\xc9\x86\x5f\x61\xff\x7a\x1f\x2e\xeb\xc9\x62\xbb\x0f\x04\xbf\x5f\xaa\x87\x51\xd3\xc3\xcd\x9a\x4e\x4f\xb9\x82\xbe\x4e\xe9\x3a\x17\x59\x65\x9a\x76\xfc\x76\x45\x85\xe2\xcf\xce\x1e\xa6\xa1\x3e\xf9\xd4\x3f\x2b\x12\x15\x03\xc3\x6b\x2c\x98\xef\x87\x12\x6d\xed\xc3\x30\xaf\x12\xf0\x2f\x2c\x1b\xa7\x0c\xc1\x2a\xe6\x13\x60\xe4\x5a\x0c\xff\x0f\x10\x4f\x45\xd9\x75\x80\x46\x86\x44\x76\xc3\x2b\x5c\x1b\x2c\xcc\xef\xf7\x8d\xe5\x0b\xa5\x3c\x0b\x5b\xf8\xe1\x47\x74\x72\x3b\x84\xc3\x65\x7a\xbd\xff\x01\x00\x00\xff\xff\xab\x41\x2a\x64\x26\x05\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x51\x41\x6b\x13\x5d\x14\x3d\x49\xdb\x6f\x91\x2e\x3e\xe9\x5a\xe1\x0a\xb6\x56\xe4\xd5\x99\xc4\xa2\x4e\x3b\xad\xb4\xb6\x20\x36\x58\x6a\x74\xff\x48\x5e\x93\xc1\xc9\xbc\xf0\xe6\x8d\x55\xe8\xc2\xea\xa6\x0b\xc1\x95\x3f\x40\xdc\xe8\x2e\x16\x82\xb5\xa5\x71\xe9\xf6\xce\xce\x95\xe0\x8f\x70\x2f\x33\x69\x1b\x0b\xba\xf3\xc2\x83\x73\xef\x39\xef\xdc\x0b\xe7\xfb\xc4\xe8\x1b\x00\xf8\x0f\xc0\x79\x00\x6b\x00\xc6\x01\x6c\x63\x50\xef\x01\x5c\x00\xf0\x01\xc0\x39\x00\x5f\x8f\x75\xdf\x00\xfc\x0f\xe0\x27\x80\xb1\xec\x15\x80\x56\x01\x18\x2f\x00\xcb\x00\x6c\x11\x98\x06\xb0\x5f\x04\x96\x00\xfc\x28\x02\x97\x01\x5c\x1a\x01\x26\xb2\x3d\x23\x40\x01\xc0\x08\x86\x35\x76\x7c\xc7\xe8\x6f\xb3\xe2\x09\x78\xa0\x2c\xb5\x82\x66\x8b\x36\x65\x10\xaa\x06\x6d\x05\xb6\x45\xca\x18\x6d\x68\x32\x1e\xb2\x71\x52\xaf\xab\x78\x30\x08\xf5\xd6\xdf\xd5\x19\x79\x2a\xb6\xd2\x2a\x6c\xa8\x8e\x36\x56\x54\xe3\x66\xd0\x10\x4b\x49\x33\x16\x35\xed\x51\x43\x3d\xb9\xfd\x38\x68\xc9\xb6\x9e\x31\x49\x69\xfd\x7e\x4d\x2c\x1b\x25\x6d\xa0\x23\x71\x47\x5a\xe5\x51\xd9\x71\x6f\x09\xa7\x22\xca\x37\xa8\x5c\xf1\x66\x67\xaf\x3a\x15\xc7\x29\xad\xc9\xd8\x8a\x9a\x91\x51\x1c\x4a\xab\x8d\x47\xf7\x72\x0f\xaa\x26\x46\xb6\x75\x43\xd3\xfc\x19\xe3\x85\xd2\x9a\x8c\x9a\x89\x6c\x2a\x51\x53\xb2\xed\xd1\x69\xef\xd1\x46\x12\xc7\x81\x8c\x4a\xd5\xbb\xd5\x15\xf1\x48\x99\x38\xd0\x91\x47\xee\x8c\x53\x5a\xd6\x91\x55\x91\x15\xb5\x67\x1d\xe5\x91\x55\x4f\xed\xb5\x4e\x28\x83\x68\x8e\xea\x2d\x69\x62\x65\xfd\x87\xb5\x55\x71\x73\xa8\xcb\xee\xd9\x54\x46\xac\x44\x75\xdd\x08\xa2\xa6\x47\xa5\xf5\x30\x31\x32\x14\xab\xda\xb4\x63\x8f\xa2\x4e\xde\xc6\x7e\x65\x8e\x06\xd0\x8f\x26\x5d\xc7\xf7\x5d\x9a\x9a\xa2\x0c\x3a\x17\x7d\xd7\xa5\x45\x72\xc8\xcb\xfb\x05\xbf\x7c\x42\xcd\xfb\xd7\x33\x38\x9d\xcb\xe6\x5d\x87\xb6\xb7\x07\x5f\x16\xfc\xb2\x73\x85\x16\xc9\x25\x8f\xca\x73\xe0\x77\xe9\x4e\xfa\x82\xbb\x7c\xc4\x7d\xde\xe3\x03\xee\x0e\xb2\xe3\x4f\xdc\xe5\x3d\xee\xa5\xcf\xd3\x5d\xde\xe7\x43\xee\xa6\x3b\xe9\x2b\x4a\x77\x88\xfb\xf9\xe4\x23\x1f\x70\x9f\x3f\x67\x11\x66\x1e\xfc\x85\x7b\xe9\x6e\xe6\x42\xe9\xcb\x33\x96\x87\xdc\xe3\xa3\xdc\xf4\x4f\xcb\xb2\xe8\xff\xf5\xae\x50\x6f\x81\xdf\x72\x3f\xa7\xfa\xe9\x6b\x3e\xe2\x7d\xee\xe1\x57\x00\x00\x00\xff\xff\x8e\x24\x0f\x32\x5f\x03\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
