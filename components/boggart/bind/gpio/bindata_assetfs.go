// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package gpio

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x8f\x9b\x30\x10\xbd\xef\xaf\x18\xb9\x95\x36\x1c\x00\x25\x2b\xad\x2a\x35\xe4\xda\x56\xaa\xd4\xfe\x83\xca\x31\x43\xf0\xd6\xd8\xae\x6d\x92\x6c\xa3\xfc\xf7\xca\xe6\x23\x09\x4b\x60\xcb\x85\xc1\xf3\x98\x79\x7e\x6f\xec\xd3\x09\x72\x2c\xb8\x44\x20\x4c\x49\x87\xd2\x11\x38\x9f\x1f\x4e\x27\xe0\x05\x48\x84\xa4\x52\x39\xc2\xd2\xaf\xad\x2d\x33\x5c\x3b\x70\xaf\x1a\x33\x42\xb5\x16\x9c\x51\xc7\x95\x4c\x5f\xe8\x9e\x36\x49\xb2\x79\x00\x00\xf8\xb8\xc8\x15\xab\x2b\x94\x2e\x4a\x0c\xd2\xfc\x75\x51\xd4\x92\x79\x2c\x2c\x22\x38\x05\x4c\x83\x7b\xfc\x20\x70\x8f\xe2\x31\x4a\x58\x49\xe5\x0e\x7b\xe0\x0d\xae\xc3\x5a\x74\x8f\x51\x62\xeb\x6d\xc5\xdd\x22\xfa\xdc\xe7\xcf\x6d\xec\xdf\xeb\xb4\xa1\xb2\xf1\x9b\x40\x99\x07\xea\x39\xdf\x03\x13\xd4\xda\x8c\x18\x75\x68\x59\x5e\xaf\x32\x25\xe2\x2a\x8f\x97\x2b\xf0\x91\xad\xba\xe8\x68\xe3\xe5\xaa\xc5\x0f\xff\x39\xfe\xd2\x54\xa2\xb8\xca\xbe\x45\x38\xee\x04\x0e\x10\x01\x55\xae\x36\x5e\xe4\xe5\x27\x09\xe4\xcb\xcf\x6f\x3f\x08\x24\x70\x3e\xaf\xd3\x72\x35\x02\xbe\x26\x2a\x90\x9a\x82\x1f\xc9\x66\x9d\xe6\x7c\x3f\xe8\x3d\xb2\x74\x43\xa7\xf3\x78\xa4\x47\xa1\x4c\xd5\x01\x7d\x1c\x97\xca\xf0\xbf\x4a\x3a\x2a\x20\x7c\x0b\xba\x45\x11\x0b\x2c\x1c\x01\xa3\x04\x36\x30\x02\x15\xba\x52\xe5\x19\xd1\xca\x3a\x02\x3c\xcf\x88\xc5\xb1\x0e\x43\x36\xa1\xe8\xce\xa8\x5a\xdf\x01\x87\x1f\x42\x57\x4f\x20\x23\x7b\x25\xea\x0a\xc9\xc5\x32\xe9\x8c\x12\x0d\x2f\x68\x0d\x7c\xea\xfc\x7b\x1a\xb5\x6f\xec\xe9\x6d\xf8\xee\x27\xb1\xf1\xe1\x3e\x9f\x34\xb4\x9b\x20\xfc\x76\xa8\x9e\x3b\x4e\xcf\xff\xc5\x69\x78\xfe\xa6\xf0\xd7\x5d\x67\x4a\x43\xaf\xea\x3c\x2e\x60\xb9\xd4\x75\x77\xea\x59\x89\xec\xf7\x56\x1d\x7b\x13\x5e\x6c\x6c\x0f\xdc\xb1\x92\x80\xa4\x15\x66\x44\x34\x22\xfa\x31\x68\xc3\x66\x2f\xf8\x07\x16\xda\x70\xe9\x20\x09\xeb\x11\x10\x67\x6a\xf4\xb7\x0d\x84\xaa\x98\xf7\xe7\x15\xd2\x77\x6c\x61\xce\x08\x18\x3f\x0f\xc3\xc7\x37\x15\x16\xe7\x04\x0e\xd5\xf4\xcd\xe8\x76\xf3\x67\x1d\x75\x9c\xbd\x43\x75\xe8\x8d\x9d\x10\xa3\x9f\xc6\xaf\x7c\x57\x36\xc3\x78\xa1\x78\x19\x55\x75\xb8\xe4\x9a\x3b\x6e\x96\x7d\xaa\xe7\x95\x98\x2e\x35\x21\xe7\x9d\xd4\x3a\xf5\x52\x4d\x5e\x52\x57\x9f\x6d\xd8\xbe\x7a\x3e\xff\x02\x00\x00\xff\xff\x80\xc5\xa8\x8e\xa4\x06\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\xcb\x6b\x13\x51\x14\xc6\xbf\x24\xad\x4a\x14\x17\xbe\x56\x2e\x8e\x4a\x8b\x2e\xa6\x26\x55\x44\xa6\x9d\xc6\x07\x2d\x8a\x09\x48\x8d\x5d\x88\x9b\x21\xb9\x9d\x0c\x4e\x66\xc2\xbd\x33\xad\x42\x17\x8d\x6e\x0a\x16\x04\xc1\x95\xba\x72\xe7\x2a\xad\x94\xa6\x2d\x89\x5b\xdd\xc8\xb9\xe0\xc2\x95\x7f\x89\x0b\x99\x49\xda\xd4\x22\xb8\xf3\x6c\xe6\x3c\xbe\xef\x9c\x1f\x73\x7f\x9e\x18\x7a\x03\x00\x47\x00\x9c\x05\xf0\x18\xc0\x51\x00\xef\xd0\x8b\x2f\x00\x86\x00\x7c\x05\x30\x0c\xe0\x1b\x80\x0c\x80\xef\x00\x2e\x00\xf8\x01\xe0\x0c\x80\x5f\x00\xce\x03\x38\x99\x02\x4e\x03\xb8\x96\x02\x0a\x29\xa0\x98\x02\x8e\x03\x58\x4d\xf7\xbe\x6f\xd3\xc0\x31\x00\x1f\xd3\xbd\x5b\x9b\x69\xe0\x26\x80\x53\x19\xe0\x11\x80\xb9\x0c\x50\x00\xb0\x96\x01\x52\x00\xd2\x7d\xb6\xe1\x3e\xc7\x21\x00\x87\x31\x88\xcc\x6e\x72\xc7\x75\x6a\x28\x8a\x05\xe1\xa1\x18\x2c\xe2\x81\x08\xa9\xe6\x3a\x35\xf2\xe2\x16\xcd\xdb\xae\x27\xaa\xb4\xe8\x86\x35\x12\x52\x06\x92\x46\xd4\x41\x8d\x8a\x2a\x15\xa1\x7a\x6d\x2f\x58\xfc\x97\x73\x20\xd9\x35\xce\x8a\x46\x20\x43\xa3\xa4\x1c\xb7\x6a\xdc\x8a\x1c\x65\x94\x03\x93\xaa\x62\xe1\xc6\x13\xb7\x66\xd7\x83\x31\x19\x65\x8b\xb6\x0a\x8d\xb2\xb4\x7d\xe5\xd9\x61\x20\x4d\xba\x97\x8c\xa8\x14\x49\xbb\x1e\x54\x03\x9a\xfc\x43\x3f\x95\x2d\xda\xbe\x13\xd9\x8e\x30\xca\xc2\xae\x9b\xb4\x57\x9b\x34\x1b\x29\xe5\xda\x7e\xb6\x74\xb7\x34\x6d\xcc\x09\xa9\xdc\xc0\x37\x29\x3f\x96\xcb\xde\x0e\xfc\x50\xf8\xa1\x51\x7e\xd6\x10\x26\x85\xe2\x69\x78\xb9\xe1\xd9\xae\x3f\x41\x95\x9a\x2d\x95\x08\xad\x87\xe5\x19\xe3\xfa\x40\x17\xf3\xcc\x0b\x69\x4c\xfb\x95\xa0\xea\xfa\x8e\x49\xd9\xfb\x5e\x24\x6d\xcf\x98\x09\x64\x5d\x99\xe4\x37\x92\x52\x59\x57\x26\xa8\x97\x5a\xfe\x48\x3e\x67\x59\x79\x1a\x1d\xa5\x38\xcd\x9d\xb3\xf2\x79\x2a\x50\x8e\xcc\xa4\x9e\xb2\xc6\x77\x47\x93\xd6\xd5\x38\xbd\x98\xc8\x26\xf3\x39\x5a\x5a\xea\x59\xa6\xac\xf1\xdc\x25\x2a\x50\x9e\x4c\x1a\x9f\x00\xbf\xd6\x2f\x75\x93\xbb\xbc\xcd\x6d\xde\x02\x7f\xd0\xcb\xdc\xe5\x75\xde\xe0\x8e\x5e\x05\xbf\xe7\x36\x6f\x0e\x66\x4d\xfd\x9c\x5b\xdc\x49\x14\xdb\xdc\x22\x5e\xdf\x73\x77\xf9\x13\x77\x49\xbf\xe8\xfb\x3b\xfa\x15\xf1\x26\xb7\xe2\x55\x7a\x59\xaf\x70\x9b\x77\xb8\xa5\x9b\x7a\x95\x74\x93\xb8\x9b\x74\xd6\x12\xdf\x56\xfc\xba\xf1\x72\xfe\xcc\x1b\x7a\x25\x5e\x1f\xef\xd9\x7f\x6b\x27\xe6\xd9\x7f\xad\xcd\x5b\x83\x5b\x7d\xd6\xbf\xe0\x75\xfa\xf8\xff\x03\xae\x33\xf8\x55\x07\xd1\x7e\x07\x00\x00\xff\xff\x66\x8e\xf0\x7e\xf1\x03\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
