// Code generated by go-bindata.
// sources:
// templates/views/widget.html
// locales/ru/LC_MESSAGES/widget.mo
// DO NOT EDIT!

package gpio

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsWidgetHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x8f\x9b\x30\x10\xbd\xef\xaf\x18\xb9\x95\x36\x1c\x00\x25\x2b\xad\x2a\x35\xe4\xda\x56\xaa\xd4\xfe\x83\xca\x31\x43\xf0\xd6\xd8\xae\x6d\x92\x6c\xa3\xfc\xf7\xca\xe6\x23\x09\x4b\x60\xcb\x85\xc1\xf3\x98\x79\x7e\x6f\xec\xd3\x09\x72\x2c\xb8\x44\x20\x4c\x49\x87\xd2\x11\x38\x9f\x1f\x4e\x27\xe0\x05\x48\x84\xa4\x52\x39\xc2\xd2\xaf\xad\x2d\x33\x5c\x3b\x70\xaf\x1a\x33\x42\xb5\x16\x9c\x51\xc7\x95\x4c\x5f\xe8\x9e\x36\x49\xb2\x79\x00\x00\xf8\xb8\xc8\x15\xab\x2b\x94\x2e\x4a\x0c\xd2\xfc\x75\x51\xd4\x92\x79\x2c\x2c\x22\x38\x05\x4c\x83\x7b\xfc\x20\x70\x8f\xe2\x31\x4a\x58\x49\xe5\x0e\x7b\xe0\x0d\xae\xc3\x5a\x74\x8f\x51\x62\xeb\x6d\xc5\xdd\x22\xfa\xdc\xe7\xcf\x6d\xec\xdf\xeb\xb4\xa1\xb2\xf1\x9b\x40\x99\x07\xea\x39\xdf\x03\x13\xd4\xda\x8c\x18\x75\x68\x59\x5e\xaf\x32\x25\xe2\x2a\x8f\x97\x2b\xf0\x91\xad\xba\xe8\x68\xe3\xe5\xaa\xc5\x0f\xff\x39\xfe\xd2\x54\xa2\xb8\xca\xbe\x45\x38\xee\x04\x0e\x10\x01\x55\xae\x36\x5e\xe4\xe5\x27\x09\xe4\xcb\xcf\x6f\x3f\x08\x24\x70\x3e\xaf\xd3\x72\x35\x02\xbe\x26\x2a\x90\x9a\x82\x1f\xc9\x66\x9d\xe6\x7c\x3f\xe8\x3d\xb2\x74\x43\xa7\xf3\x78\xa4\x47\xa1\x4c\xd5\x01\x7d\x1c\x97\xca\xf0\xbf\x4a\x3a\x2a\x20\x7c\x0b\xba\x45\x11\x0b\x2c\x1c\x01\xa3\x04\x36\x30\x02\x15\xba\x52\xe5\x19\xd1\xca\x3a\x02\x3c\xcf\x88\xc5\xb1\x0e\x43\x36\xa1\xe8\xce\xa8\x5a\xdf\x01\x87\x1f\x42\x57\x4f\x20\x23\x7b\x25\xea\x0a\xc9\xc5\x32\xe9\x8c\x12\x0d\x2f\x68\x0d\x7c\xea\xfc\x7b\x1a\xb5\x6f\xec\xe9\x6d\xf8\xee\x27\xb1\xf1\xe1\x3e\x9f\x34\xb4\x9b\x20\xfc\x76\xa8\x9e\x3b\x4e\xcf\xff\xc5\x69\x78\xfe\xa6\xf0\xd7\x5d\x67\x4a\x43\xaf\xea\x3c\x2e\x60\xb9\xd4\x75\x77\xea\x59\x89\xec\xf7\x56\x1d\x7b\x13\x5e\x6c\x6c\x0f\xdc\xb1\x92\x80\xa4\x15\x66\x44\x34\x22\xfa\x31\x68\xc3\x66\x2f\xf8\x07\x16\xda\x70\xe9\x20\x09\xeb\x11\x10\x67\x6a\xf4\xb7\x0d\x84\xaa\x98\xf7\xe7\x15\xd2\x77\x6c\x61\xce\x08\x18\x3f\x0f\xc3\xc7\x37\x15\x16\xe7\x04\x0e\xd5\xf4\xcd\xe8\x76\xf3\x67\x1d\x75\x9c\xbd\x43\x75\xe8\x8d\x9d\x10\xa3\x9f\xc6\xaf\x7c\x57\x36\xc3\x78\xa1\x78\x19\x55\x75\xb8\xe4\x9a\x3b\x6e\x96\x7d\xaa\xe7\x95\x98\x2e\x35\x21\xe7\x9d\xd4\x3a\xf5\x52\x4d\x5e\x52\x57\x9f\x6d\xd8\xbe\x7a\x3e\xff\x02\x00\x00\xff\xff\x80\xc5\xa8\x8e\xa4\x06\x00\x00"

func templatesViewsWidgetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsWidgetHtml,
		"templates/views/widget.html",
	)
}

func templatesViewsWidgetHtml() (*asset, error) {
	bytes, err := templatesViewsWidgetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/widget.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesWidgetMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4f\x6b\x13\x51\x14\xc5\x4f\x92\x56\x25\x8a\x0b\x45\x57\x2e\xae\x4a\x8b\x22\x53\x67\x12\xeb\x9f\x69\xa7\x55\x6b\x8b\x62\x82\xa5\x46\x17\xe2\xe6\x91\xbc\x26\x83\x93\x99\xf0\x66\xd2\x2a\x14\x6c\x74\x53\xb0\x20\x08\xee\x74\xe5\x17\x88\x95\xd2\xb4\x25\x71\xe3\x42\x37\x72\x07\x5d\x88\x0b\xf1\x83\xb8\x90\x49\xd2\xa6\x16\xc1\x9d\x6f\x33\xf7\xde\x77\xce\xb9\x3f\x86\xf7\xe3\x50\xdf\x4b\x00\xd8\x07\xe0\x18\x80\xfb\x00\xf6\x03\x78\x85\xce\xf9\x08\xa0\x0f\xc0\x27\x00\xfd\x00\x3e\x03\x48\x00\xf8\x0a\xe0\x24\x80\x6f\x00\x8e\x02\xf8\x05\xe0\x04\x80\xc3\x31\xe0\x08\x80\xf3\x31\xa0\x14\x03\x32\x31\xe0\x20\x80\xd5\x78\xe7\xfb\x21\x0e\x1c\x00\xf0\x25\xde\xd9\xf5\x33\x0e\x5c\x01\x60\x25\x80\x7b\x00\x1e\x27\x80\x71\x00\xdf\x13\x40\x0c\x40\xbc\xcb\xd6\xdf\xe5\xd8\x03\x60\x2f\x7a\x27\xb1\x55\x5c\xb7\x8b\x25\x64\xe4\x9c\x74\x90\xf1\xe6\x71\x5b\x06\x54\xb2\x8b\x25\x72\xa2\x11\xcd\x0a\xdb\x91\x05\x9a\xb7\x83\x12\x49\xa5\x3c\x45\x03\xfe\x6e\x8d\x5f\xcd\xe7\xa5\xdf\x19\x3b\xde\xfc\xbf\x9c\x3d\xc9\x96\x71\x46\x56\x3c\x15\x68\x59\xbf\x68\x17\xb4\xab\xd5\xa2\xaf\xe5\x3c\x93\x0a\x72\xee\xf2\x03\xbb\x24\xca\xde\x90\xaa\x26\xa7\x6f\xe5\xb4\x09\x25\x45\x60\x7b\xae\x76\x4d\x04\xd2\xa4\x94\x6e\x5c\xd2\xf4\xb4\x96\xba\x40\xa9\xb4\x39\x3c\x7c\x46\x4f\xeb\x7a\x32\x23\xfc\x40\xcb\x29\xe1\xfa\x8e\x08\x3c\x65\xd2\xcd\x76\x06\x65\xab\x4a\x94\xbd\x82\x47\xa3\x7f\x04\x8f\x25\x33\xc2\x2d\x56\x45\x51\x6a\x39\x29\xca\x26\x6d\xf7\x26\xcd\x54\x7d\xdf\x16\x6e\x32\x7b\x23\x3b\xa9\xdd\x95\xca\xb7\x3d\xd7\x24\x63\x48\x4f\x4e\x78\x6e\x20\xdd\x40\xcb\x3d\xaa\x48\x93\x02\xf9\x30\x38\x5b\x71\x84\xed\x8e\x50\xbe\x24\x94\x2f\x03\xeb\x4e\x6e\x4a\xbb\xd8\xd3\x45\x3c\xb3\x52\x69\x93\x6e\xde\x2b\xd8\x6e\xd1\xa4\xe4\xb4\x53\x55\xc2\xd1\xa6\x3c\x55\xf6\x4d\x72\x2b\xed\xd6\xb7\xd2\x23\xd4\x29\x2d\x77\xc0\xd0\x2d\xcb\xa0\xc1\x41\x8a\x4a\xfd\xb8\x65\x18\x34\x4e\x3a\x99\xed\x7e\xcc\x4a\x6d\x5d\x8d\x5a\xe7\xa2\xf2\x54\x5b\x36\x6a\xe8\xb4\xb0\xd0\xb1\x8c\x59\x29\xfd\x34\x8d\x93\x41\x26\xa5\x46\xc0\x2f\xc2\x67\x61\x8d\x5b\xbc\xc1\x0d\x5e\x07\xbf\x09\x17\xb9\xc5\x2b\xbc\xca\xcd\x70\x19\xfc\x9a\x1b\xbc\xd6\xbb\xab\x85\x4f\xb8\xce\xcd\xb6\x62\x83\xeb\xc4\x2b\xdb\xee\x16\xbf\xe3\x16\x85\x4f\xbb\xfe\x66\xf8\x9c\x78\x8d\xeb\x51\x54\xb8\x18\x2e\x71\x83\x37\xb9\x1e\xd6\xc2\x65\x0a\x6b\xc4\xad\xf6\xe4\x6d\xdb\xb7\x1e\x3d\x83\x28\x9c\xdf\xf3\x6a\xb8\x14\xc5\x47\x39\x3b\x77\x6d\x46\x3c\x3b\xb7\x35\x78\xbd\xb7\xab\xcb\xfa\x17\xbc\x66\x17\xff\x7f\xc0\x35\x7b\xbf\x6a\x37\xda\xef\x00\x00\x00\xff\xff\x0b\xe0\x07\xe8\x1a\x04\x00\x00"

func localesRuLc_messagesWidgetMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesWidgetMo,
		"locales/ru/LC_MESSAGES/widget.mo",
	)
}

func localesRuLc_messagesWidgetMo() (*asset, error) {
	bytes, err := localesRuLc_messagesWidgetMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/widget.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/widget.html":      templatesViewsWidgetHtml,
	"locales/ru/LC_MESSAGES/widget.mo": localesRuLc_messagesWidgetMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"widget.mo": &bintree{localesRuLc_messagesWidgetMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"widget.html": &bintree{templatesViewsWidgetHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
