// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xdf\x8f\xe2\x36\x10\x7e\xdf\xbf\x62\x14\x21\xdd\xae\x44\xe2\x2c\xea\xb5\x12\xca\x46\xaa\xca\x9d\x0e\x89\xf6\xa1\x47\x5f\xfa\x52\x99\x78\x72\x98\x06\x27\xf5\x18\x6e\x51\xc4\xff\x5e\x39\x3f\xb8\x00\x49\x00\x75\x69\xfb\x92\x75\xc6\x33\xf3\x79\x3e\x4f\xbe\x59\xf2\x1c\x04\xc6\x52\x21\x38\x51\xaa\x0c\x2a\xe3\xc0\x7e\xff\xf0\x10\x08\xb9\x85\x28\xe1\x44\x2f\x8e\x4e\xbf\x3a\xe1\x03\x00\x40\xd3\xfa\xfa\x47\xc6\x15\x26\xd5\xce\xf9\xae\x91\x26\xc1\xc6\x6e\xe1\xb1\x1c\x85\x13\xdc\xca\x08\x29\x60\xcb\xd1\xc9\x66\x23\x3c\x4a\x90\xeb\x58\xbe\x3a\x61\xc0\x84\xdc\x36\x30\x4e\x5e\x8f\x20\xeb\x0a\x4e\xf2\x1a\xbe\x48\xb0\xf6\x2a\x5f\x8a\xa7\x4b\x46\xcb\x0c\x05\x08\x6e\x78\x61\x39\x89\x2c\xa3\x97\xc8\x45\x9b\x5d\x9f\x1b\xab\x80\x70\xbe\xcb\x30\x60\x66\xd9\xe9\x51\x9f\x66\x2d\xdc\x28\x4d\xdc\x91\x13\x4e\x45\x6f\x40\x38\x41\x8a\xb4\xcc\x8c\x4c\xd5\x2d\x99\x9f\x9d\x70\xce\xe9\x4f\xba\x31\xe6\xb3\xe1\x66\xd3\x11\x14\xb0\xb6\xd2\xad\x6f\x07\x51\x8b\x54\xec\xce\xed\x79\x0e\x9a\xab\x2f\x08\x03\x39\x84\x81\x28\xba\x02\xc6\x2f\xe0\x95\x4b\xb2\x6d\x78\x9e\xab\x93\xf4\x16\xe4\x73\x24\x33\x84\x81\xd9\x65\x05\x4e\x05\xe9\xd9\xbb\x6a\x05\x3b\xe4\xa6\x8c\xab\x9a\xa2\x84\x2f\x30\x81\xe2\xe9\xd2\x26\x8a\x90\xc8\x09\xf3\xbc\x4a\xbb\xdf\x07\xcc\x7a\xf7\x9e\x05\x95\xe8\x82\x0b\x58\x57\x1d\xb6\x40\x0b\x53\x1d\x7a\x2a\x0a\xac\x2b\xbd\x1b\xbd\x73\x4b\x58\xd1\x38\x3f\xa5\x1b\x65\xae\x89\x92\xf1\x21\xf0\x83\xb2\x1f\x93\x3d\x62\xb5\xb2\x55\x27\x64\xf9\x99\x48\x3a\x58\x54\x77\x11\xed\x3d\xd6\x4d\x5e\xc0\x5a\xba\x2c\x60\xc5\x47\xdd\x2a\x1e\xd5\xb2\xfa\x73\x47\xb9\x0b\x64\xed\x13\x73\x88\xb9\x2b\x90\xc7\x56\xd5\x64\x08\x33\x49\x06\x15\xea\x7f\x53\x0b\x1b\x3e\xa5\x06\x6a\xa4\x2c\x55\x24\xb7\xed\xe2\xf7\x4f\xa4\x13\x7a\xe4\x13\xfa\xbe\xe6\x2a\x30\x9c\x4e\xba\x65\xab\xf6\xf9\x85\xaf\x7b\xa4\xb6\xf6\xfa\xb0\x45\x65\x7a\x44\xb0\xf6\xfb\x28\x35\x5e\xe7\x46\x06\x62\xa9\xb1\x47\xb5\x6b\xe7\x19\xbf\xec\xdb\xde\xef\xd0\xa7\xab\x70\xa4\x6c\xc9\x10\x06\x49\xd5\x4f\x85\x8a\xd6\x2f\x9d\xd2\x76\x81\xfd\x52\x09\xea\x2c\x97\x04\xa7\x35\xc6\x5e\xcd\x55\x51\x9d\x9b\xc7\x35\xa2\xbd\xc4\xa9\x18\x56\xab\x22\xbd\x15\xf2\x03\x60\x79\xcb\x7d\x5a\x0e\x7d\x7a\x2e\x55\x9c\x96\x62\xfe\x2d\xff\x65\x45\x87\x8b\xaa\x0e\xbd\xca\x0e\x6d\xd4\x15\x7d\xf8\x26\xdc\x59\x59\x6e\xa6\x25\x63\x73\x8b\x1f\xcd\x65\x9a\x8a\x99\x01\x76\xb0\xbd\x38\x3c\xcb\x12\x19\x71\x3b\x42\xd8\x8a\x6f\x79\xb9\xe9\x84\x22\x8d\x36\x6b\x54\xc6\xfb\xaa\xa5\xc1\x47\xc1\x0d\xce\xd3\xcf\x46\x4b\xf5\xe5\xf1\xdd\x69\x49\x07\x6c\xef\x63\xaa\xd7\xdc\x80\x33\xf2\xfd\xef\x5d\xff\xd9\xf5\x47\xf3\xe7\xf7\x63\xff\xbb\xb1\xff\xfe\x77\xff\x87\xb1\xef\xdb\xff\x42\xdf\x3d\x3d\x05\xac\x04\xba\x3f\xfd\x37\xf1\x68\x3f\xe9\xff\x88\xc6\x06\xf4\xff\x88\xc5\x6e\xfd\xea\x9d\xd9\xc7\xe3\x19\x5a\x66\x5a\xd7\xc4\xfe\x96\xf6\xa1\xf1\x13\xc6\x2a\xa5\x53\x63\xe5\x39\x90\xe1\x46\x46\x9f\xe6\x3f\xcf\xe0\xb1\x5c\xff\xf6\xeb\x0c\x1c\x26\x38\x2d\x17\x29\xd7\x82\x71\x22\x34\xc4\xb6\xa8\x44\xaa\x89\x1d\xc6\x19\x79\x0a\x8d\xbb\x20\x16\x51\x69\x9d\x97\xd6\x45\x9a\x1a\x32\x9a\x67\xde\x5a\x2a\x2f\x22\x72\x20\xe6\x09\xe1\xd3\x1b\xa2\xc6\xf2\x15\x85\x2d\x05\x75\x7d\x82\xc2\xf4\xa9\x30\xf5\x1f\xa1\x9d\x97\x15\xbd\x21\x2b\x6c\x45\x6c\xf5\xd7\x06\xf5\xce\x6b\x10\x63\xcf\xb2\xba\x07\x1b\x0b\xb2\x80\x9d\x57\x70\x17\xcc\xc6\x0d\x9c\x80\x37\x2f\xe2\x1c\xfe\xc0\xfe\xdf\x01\x00\x00\xff\xff\x63\xc5\x98\x4f\x57\x0f\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 3927, mode: os.FileMode(420), modTime: time.Unix(1518952939, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\x1b\xc7\x15\x7e\xd7\xaf\x18\x10\x06\x24\x03\x21\x29\x51\x01\x8a\xc8\x92\x81\x38\xbd\x02\x49\x1b\x34\xa9\xf3\xb8\x18\xee\x1e\x72\xc7\xde\xdd\xd9\xcc\xcc\xf2\x02\x42\x00\x4d\x39\x4e\x03\xb7\x70\x90\x16\x68\x51\x14\x49\x51\xa0\x8f\x05\x18\xc5\x6a\x54\x59\x64\xfe\x40\x1f\xce\xfc\xa3\x62\x86\x4b\x8a\xa2\x48\x9a\x37\x3b\x92\xa5\x7d\xe1\xee\xce\xcc\x7e\xe7\x9c\xf9\xe6\x5c\x66\x97\x8d\x06\xf1\xa0\xc4\x22\x20\x19\x97\x47\x0a\x22\x95\x21\xfb\xfb\x6b\xbb\x1e\xab\x10\x37\xa0\x52\xee\x65\x04\xaf\x92\x22\x2f\x97\xa9\x50\x99\xbb\x6b\x84\x10\x32\xdc\xea\xf2\x20\x1b\x7a\xd9\xad\x42\xda\x36\xda\x3e\x74\x7b\xb4\xa9\xe6\x28\xa6\x02\x18\xe9\x61\x7b\xf9\x85\xbb\xf8\x0f\x3c\xd2\x8f\xf4\x81\x6e\xea\x47\xfa\xe9\x6e\xde\x2f\x8c\xe9\x37\x2c\x48\x00\x54\x94\x58\x2d\x73\x77\x37\xef\xb1\xca\x08\xec\x98\x5b\xe7\x24\xe9\x2b\x3f\x1d\x43\xf0\xea\x98\x1e\xe6\x68\x34\x08\x2b\x91\xdc\x7b\x3c\x2a\xb1\x72\xee\x1e\xe7\x01\xc9\xa4\x46\xcb\xc5\x49\x20\xa9\xc8\x41\x44\x8b\x01\x78\xd6\xbe\xe3\x1e\x31\xc6\xaa\xdb\xc4\x9c\xd4\x64\x76\xab\x40\xaa\xcc\x2b\x83\x4a\x7f\x1c\x45\x83\xa0\xee\x14\x79\x6d\x82\x3c\x17\x35\x8c\x69\x04\xc1\x94\xde\xf3\xd8\x64\xec\x38\xe6\xed\x65\x04\x48\x9e\x08\x17\xb2\x3e\x50\x95\x65\x51\x86\x48\x55\x0f\x60\x2f\xe3\x03\x2b\xfb\x6a\x67\x7b\x73\x33\xae\xdd\x99\xe1\x89\xe6\xf8\x55\x34\x53\xb7\x46\x83\xe4\x52\x53\x3b\x1e\x54\x98\x0b\x8e\x41\x77\x42\x50\x20\x9c\x9e\xf1\x1d\x05\x61\x0c\x82\xaa\x44\x80\xc3\x22\xc7\x85\x40\xb2\x44\xe6\xee\xd3\x20\x01\xb2\xbf\x4f\xde\x9b\x09\x6a\xb7\x28\x48\x7e\x36\xe1\x7f\x93\xa8\x57\x23\x3d\x4f\xd4\x6b\x10\xff\xa7\x10\x28\xfa\x6a\x14\xf0\xcc\xa3\x17\x51\x61\xcc\x22\x9e\xb3\xcb\x94\xe6\x69\x4d\x6f\xdc\xc2\xe4\x89\x5a\x6a\x65\xe2\x37\xd8\xc5\x13\x6c\xe3\xf7\xd8\xc6\x0e\x1e\xeb\x67\x44\xff\x11\x3b\x78\xa4\x9b\xf8\x1d\x1e\xe3\xf1\xea\x98\x03\x11\x88\x72\xdd\x29\xb3\x32\x75\x79\xc0\x05\x83\x21\xce\x0c\xdf\xbd\xa1\xcf\x14\xbd\x56\x4b\x1f\xbb\x82\x57\x4e\xa0\x16\x1e\xe1\x89\x3e\xd0\x5f\xe0\x11\x1e\xff\xef\x09\xc1\x53\xec\xea\x2f\xb0\x83\x5d\xfd\x48\xb7\x56\xc9\x29\x97\x47\x32\x09\x63\xc5\x78\xe4\xb8\x49\x91\xb9\xa6\x59\x80\x74\x62\x10\x8e\xcf\x13\x71\xc6\x30\xdb\x4c\x7a\xcd\x24\x06\x41\x4c\xf3\x0d\xd5\xa6\xe8\xb5\x32\xaa\x55\xa9\x02\x91\x75\x79\xe0\x2d\x47\xb5\x7f\x61\x17\x5f\x60\x17\x9f\x63\x07\xdb\xfa\x19\xc1\x43\x7b\xd1\x9e\x9b\x4f\x03\xf6\x04\x9e\x63\x85\x73\x5c\x1a\x53\x97\xa9\xfa\x39\x16\x8d\x27\xcf\x0d\x67\xa6\xe8\xb5\x62\xce\xf8\x7c\xc9\xf0\xf6\x27\xec\xea\xa6\x7e\xa6\x3f\x5f\x09\x61\x7c\xae\xde\x20\xbe\x34\x1a\x04\x22\x6f\x52\x11\x33\xad\x0e\x0a\x41\xb8\x89\xa8\x5f\xaf\x42\x08\x02\x70\x95\x60\x66\xd6\x97\xe3\xe4\xbf\xf1\x85\x0d\x90\x2d\xdd\xc4\x63\xfd\xb9\x2d\x8e\x5b\x86\x9a\x73\x64\xf5\x1f\x6f\xed\x9c\x23\x68\x3a\x23\x8e\xda\x32\x04\x55\x36\xf6\x39\x8a\x2b\x1a\x9c\x91\xf2\x93\xbc\x3f\x0f\x42\x61\x02\x42\x61\x65\x08\xdb\x13\x10\xb6\x57\x86\xf0\xf6\x04\x84\xb7\x57\x85\x70\x9f\x07\x8a\x96\x61\x67\x5c\xba\x32\x44\x98\x34\x6b\xe9\xe3\x17\x36\x37\x9d\x4a\x6f\xa4\xfd\x5d\x14\xfd\x5d\x5b\x8b\x2d\x04\x4f\xd3\xa1\xbd\x13\x38\x93\xe0\xdd\x39\xf0\x3f\xe4\x55\x10\x0b\x80\xc7\x66\x9c\x9d\x82\x21\xcd\xe7\xc0\xbd\x47\x95\x02\x51\x5f\x00\xb9\xd8\x1b\x39\xc1\xfa\xf7\x67\x94\xe1\xf2\x79\xec\x97\xef\x94\x0d\x5d\xa6\xa7\xe9\xcf\xa5\xd8\x22\xfc\x27\x1e\xf5\xbc\x22\x76\xf1\x14\x4f\xf5\x81\xa9\x25\x4c\x5d\xa1\x9f\x98\x2a\xf4\x2a\x6f\x1a\x4a\x5e\x52\x15\xe6\x01\xbf\x16\xe1\xd2\xe5\x61\x98\x44\xcc\xa5\xa6\x26\xcb\xb2\x48\x81\x88\x60\xc9\x24\xee\xaf\xd8\x31\x35\xa5\x6e\xda\x8d\x89\xd6\xa2\xe5\x63\x5f\x18\x27\x16\xdc\x4c\x88\x70\x06\x53\xe3\x14\x69\x40\x23\x17\x1c\x91\x14\x03\x90\x23\x31\x61\x26\x40\xdd\xd4\x07\xf8\x6d\xee\x0a\xfa\x0e\xf2\xb2\x6c\x8f\x17\x59\x00\xd7\x90\xbd\xb1\xcf\x23\x58\x8e\xba\x7f\xc7\x63\xec\xe8\x03\xdd\xd2\x4f\x09\xfe\x80\x5d\xa2\x5b\xd8\xb6\x79\xdf\x63\xec\x18\x5f\xa7\x0f\xcc\xfd\x17\xd8\x36\xdd\x16\x65\xb6\x15\xd4\x09\xa1\x4c\x4b\x3c\x72\x12\x09\x9e\x53\xe1\xa6\x21\x64\x51\xa2\x86\x0a\x93\xd9\x84\x3e\xed\x0b\xbd\xea\xbd\xe8\x8f\x3e\xf8\xe8\xf5\x5a\x41\x86\x73\xea\xae\x7f\xaf\x5b\x2f\x5f\xc3\x64\x3e\xb5\x47\x1d\xd8\xeb\xb5\xc1\xc0\xed\x95\x59\x99\x16\xeb\x73\xd3\xe1\x17\xf7\x56\x6f\x90\x2f\xf1\x50\xb7\xb0\x8b\x3f\xe8\xa6\xad\xc8\x4d\xe8\x37\x01\xff\xe8\x55\xe8\x1d\x0b\x1e\xf0\xa8\x6c\xd7\xf4\xe2\x46\x58\xa5\x0d\xae\x60\x0c\xb8\x46\x15\xff\xf9\x20\x50\x65\x25\xb6\x54\x0c\xf8\x84\xfd\x9c\x11\x3c\xc1\x17\x86\xdf\xc6\x11\xe8\xa7\x8b\xb2\x5c\xf0\xc4\x16\x34\xec\xa1\xe0\x8a\x3d\x74\x8c\x6c\x8e\x1b\x30\x88\xd4\xdc\x39\xcb\xe5\xe3\xe0\x55\xaf\x61\xbe\xc1\x2e\x7e\xd7\xdb\x60\xbc\xec\xf5\xca\x9b\xb0\x4c\xab\x40\x95\x0f\x22\xcb\x13\xe5\x71\x2e\x26\xad\xd1\xe1\x69\x21\xd8\xc1\x36\xd1\x07\x66\x2d\xea\x27\x78\x74\xb3\x53\xbf\xbc\xf9\x59\x34\xbb\xf5\x0f\x8d\x1f\x3c\x34\x69\x8f\x6e\xe1\xb1\x6e\xfe\x38\x33\x70\xd5\xfd\xcc\xd7\xfa\x33\xdd\xb4\x6f\x5b\x2f\xbd\x9f\x99\x96\x52\xb8\x34\x04\x41\x73\x3e\x7b\x58\x61\x92\xf1\x28\x27\x95\x00\x50\xd7\x22\xc5\x90\xe0\x26\x82\xa9\x7a\xb6\x0a\x45\x97\x86\xd9\x9e\xea\xcb\x95\x9a\x7f\xc3\x36\x9e\xda\x22\xe3\xa2\x9f\x9b\x3d\x35\xdf\x65\x61\x99\x48\xe1\xee\x65\xf2\xe9\x44\xe5\x7b\x13\x95\xef\xc9\x98\x8f\x05\x54\x18\x54\x07\xb2\x86\xcc\xe4\x48\x9e\xf2\x77\xb6\x7e\xf2\x4e\x5c\xbb\x13\xd2\x5a\x7a\x5d\xd8\x7e\x67\x36\xf1\x2f\x5f\x2a\x42\xe6\xe5\xae\x4f\x83\xe0\x5a\x32\xd7\x28\x9e\xdd\x5a\x1d\x73\x4d\x15\x7c\xa8\x3f\x4b\xdf\xf2\x77\xf1\xbf\x04\x9f\xe3\xa1\x6d\x3c\x5e\x09\x8d\x8d\xc0\xd7\x87\xc4\x6f\x2c\xe5\x0a\x13\x33\x8e\x73\x7e\xf0\x90\x60\x17\xbf\xb5\x5f\x22\x9d\x9a\xe4\xa3\xab\x9b\x86\x49\xf8\xdc\x9c\xe1\x91\xa5\x9b\x71\x92\x8f\x75\xcb\x44\xd3\x9b\x74\x70\xe9\x49\xb2\xdb\x2e\x2e\x0f\x27\xce\xcf\x9f\xed\x2b\x9e\xae\x7e\x8c\x5d\xec\xfc\x88\xab\x66\xa2\x73\x37\xf9\xac\xbc\x5e\xce\x1c\x22\x25\x68\xe4\x42\x76\x5a\x2e\x3f\x9b\x33\xff\x6a\xe0\xbc\xed\x17\x37\xa9\xf3\xd6\x7f\x58\x9b\x75\xd3\x83\x95\x08\x7c\x7a\x61\xeb\xc3\x08\xe6\x94\x63\xc6\x1d\x01\xe0\x39\xb2\xca\x94\xeb\x3b\x52\x51\x35\xf8\xf4\x78\x33\xb7\x39\xeb\x76\x9e\x95\xf4\x2f\xd8\xc6\x13\xdd\xd4\x4f\xcd\xda\x9f\x55\x3a\x08\xe4\xcc\x9b\x86\x16\xe5\x6b\xdd\x5a\x00\x65\xb2\x47\x1f\x3e\x6e\x62\xce\x4c\x23\x96\x59\x19\xf4\xd3\x84\x66\x5d\x2a\x26\xbe\x07\xc2\x2f\xd3\x9a\xf6\x91\x6e\xd9\xa0\xd2\xc5\xff\xdc\x04\x92\x15\x58\xbe\x08\x41\x30\xd1\xe8\x5f\x9d\x4f\x11\xbf\xb7\x5f\xf6\x99\x8b\x93\x2b\xb6\xa3\x70\xb6\x94\xd6\x86\xfe\xc1\xe5\x03\xed\x45\x9e\x5d\xab\x3f\x51\xf5\x18\xf6\x32\x0a\x6a\x2a\xef\x4a\x99\x9a\xb3\xef\x22\x49\x2e\x9d\x1a\xd2\x18\xe0\xc5\xd4\xf3\x58\x54\xde\x21\x9b\x77\xec\xbd\xfd\xb5\x91\x21\x29\x17\xc6\x8c\x28\xc4\xb5\xfe\x98\xdd\xbc\x85\x9f\x24\xe5\x03\x39\x88\x8e\x8d\x06\x31\xbe\x98\xb9\xbf\xfc\xf8\x83\xf7\xc9\x46\xef\xfc\x77\xbf\x7d\x9f\x64\xf2\x1e\x95\x7e\x91\x53\xe1\xe5\xa9\x94\xa0\x64\xbe\x02\x91\xc7\x85\xcc\x83\xeb\x53\xa1\x64\xfe\xc1\xe0\x34\x17\xb2\x28\x67\x9e\x5a\xa2\x81\x84\xdb\x16\x8f\x9c\x45\x6b\x10\x82\x0b\xd9\x87\xdc\x95\xae\x60\xb1\x1a\xb6\xcd\x03\x5a\xa1\xbd\xbb\x43\x8c\xbb\xb5\xe1\x71\x37\x09\x21\x52\xb7\x73\x02\xa8\x57\xdf\x28\x25\x91\xab\x18\x8f\xc8\xc6\xed\x21\x03\xa4\x40\x82\x46\x65\x20\xb7\xe0\x2d\x72\xcb\xe2\x91\x9d\xbd\x51\xe4\xfe\x11\x41\x95\x7c\xf8\x6b\xae\x58\xa9\xbe\xd1\xb8\x40\x0a\xbb\x87\xb3\x43\xd6\x7f\x66\xc6\xae\xbf\x75\xb1\x1d\x6a\x6a\x87\xac\x37\x1a\x7d\xa0\xfd\xfd\x71\xbd\xea\xb1\x79\x08\x4c\x78\x88\xcf\x3c\xd8\xe9\x99\xeb\x62\xa3\x99\x3c\x3b\xa5\xeb\x45\xce\x95\x54\x82\xc6\xdb\xeb\xe7\x7a\xed\xdf\xbe\x33\xaa\xff\x88\x63\xef\xf7\xd8\xcd\xf7\x0c\x3b\xcc\x85\xb3\xb3\xff\x07\x00\x00\xff\xff\x15\xaa\x6e\xe9\x7d\x38\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 14461, mode: os.FileMode(420), modTime: time.Unix(1518814225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
