// Code generated by go-bindata.
// sources:
// templates/views/devices.html
// assets/js/devices.js
// locales/ru/LC_MESSAGES/boggart.mo
// locales/ru/LC_MESSAGES/devices.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4f\x6f\xdb\x3e\x0c\xbd\xf7\x53\x10\x02\x7e\x40\x7b\x88\xd5\xf6\xf4\xc3\xe0\x04\x18\xd6\x15\x1b\x90\xed\x30\x64\xe7\x41\xb1\x68\x58\x99\x23\x79\x22\xe7\x34\x30\xf2\xdd\x07\xff\xab\xdd\xcc\xee\x92\x25\xed\x69\xa7\x28\x22\xf9\x1e\xf5\xa8\x17\xa5\x28\x40\x63\x6c\x2c\x82\x88\x9c\x65\xb4\x2c\x60\xb7\xbb\xb8\x08\xb5\xc9\x21\x4a\x15\xd1\x54\x78\xb7\x11\x60\xf4\x54\x68\xcc\x4d\x84\x24\x66\x17\x00\x00\xfd\x94\x87\x6f\x99\xb2\x98\x36\x91\xdf\xa3\x6c\x38\xc5\x5e\xb4\xca\x48\x6e\x67\x45\x01\xe6\xe6\x7f\x0b\xe2\xae\x81\x86\x00\x76\xbb\x50\x26\xb7\x7b\xb9\x3d\xb4\x28\x45\xe5\x63\xf3\x20\x66\xa1\xd4\x26\xef\x51\xee\x7d\x7d\xd2\x41\x7b\xba\x71\x5c\x56\xcb\x14\x27\x1e\x29\x73\x96\x4c\xbe\xdf\x6e\x95\x5e\xe5\x3c\x29\x80\xba\x8c\xd8\x9b\x0c\x35\x68\xee\x21\x80\x75\x1b\xaf\x32\x01\xc4\xdb\x14\xa7\x62\x63\x34\x27\x6f\x6e\xae\xaf\xff\x1b\xc0\xae\xf1\x13\x54\x7a\x2c\xe6\x87\x03\x4d\x61\xa7\xe5\x62\x9b\x61\x2b\x24\x27\xcf\x16\xb5\x47\x59\xeb\x49\xe4\xd2\xc9\xad\xe8\x50\x3e\xde\x1d\x88\xd1\x1f\x22\x45\xde\x64\x6c\x9c\xfd\x3b\xfe\x9b\x1e\xff\x42\xd1\x77\x3a\x1d\xe6\x6d\x54\xb6\xf3\x47\xa0\x50\x8e\xc9\x5b\xd6\x0c\x0e\x25\x94\xd5\xe8\xf7\x2e\xd4\xe8\x95\x6c\x96\xcd\xc7\xb0\xc1\x52\x43\x8c\x16\xfd\x39\x2d\x16\x9a\x36\x27\x56\x10\xab\x89\x46\x15\x97\xd6\x31\x33\x78\x14\x69\xfe\xc8\xfb\xcf\x7f\xa7\xfb\xef\xb3\x5a\x1f\xea\xbf\xae\xe8\xde\x78\x3c\xf4\xba\x9f\x64\xd2\xf7\x39\x5a\x3e\x9e\xe9\xde\x78\x62\x88\x8d\x47\x7d\x74\xed\x5c\x1d\x5a\xfa\xda\x36\x2c\x0a\x40\xab\xab\x17\xaf\xf7\x12\x96\x44\xd5\x33\x58\x16\x14\x05\x10\x2b\x36\xd1\x87\xc5\xa7\x39\x5c\xd6\xeb\xaf\x5f\xe6\x20\xa4\x56\x94\x2c\x9d\xf2\x5a\x2a\x22\x64\x92\x39\x5a\xed\x3c\x49\xad\x58\x55\x5d\x51\x60\x91\x27\x4b\x92\x11\xd5\xbb\x8b\x7a\x77\xe9\x1c\x13\x7b\x95\x05\x6b\x63\x83\x88\x48\x40\xac\x52\xc2\xab\x33\xb2\x76\x3e\x68\x1b\xe8\x76\x9e\x6f\x60\x58\x95\x15\x9d\x51\x13\xb9\x22\xb9\xfa\xf1\x13\xfd\x36\xe8\xc9\x52\xf6\xb2\x7a\x09\x2d\x96\x54\x12\x8e\x0e\xe0\x45\x38\x3b\xb5\xf7\xb8\x7b\x63\x78\x05\xf2\xe6\xec\xa3\xb3\x3f\x82\xfe\x32\xf3\xc6\x32\x08\x29\x20\x78\xe7\xd6\x99\xb3\x68\xb9\xfc\xb5\x03\xd1\xb6\x53\x9e\xb4\xfe\x2b\x57\x02\x5f\x0d\x5d\xaa\x5f\x01\x00\x00\xff\xff\xc5\xf3\x3b\xd7\x73\x0a\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 2675, mode: os.FileMode(420), modTime: time.Unix(1543056805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsDevicesJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xb8\xba\x01\x28\x21\xb6\xbc\x61\x18\x30\x28\x91\xf7\xd0\xf4\xa1\x40\xb1\x16\x68\xde\xda\xa2\xa0\xc5\x93\xcc\x86\x26\x0d\x92\xb2\xe3\x15\xfe\xee\x03\x45\x59\xb1\x62\x5b\x52\x66\x67\xeb\x30\x3d\x04\x12\xcd\x3b\xde\xdd\xef\x77\x7f\x98\x8b\x80\xa9\xb4\x98\xa3\xb4\x61\xa4\x91\xb2\x75\x90\x15\x32\xb5\x5c\x49\x08\x42\xf8\xfe\x02\x00\x60\x49\x35\x58\x3a\x15\x78\x83\x4b\x9e\xa2\x81\x04\x2e\x02\xf2\x8a\x55\x5f\xe5\x4f\x24\x2c\xb7\xba\x27\xba\xa1\x96\xde\xba\xc5\xe0\x7b\xbd\xe8\x9e\x05\xcd\xf1\x1d\xca\xdc\xce\x62\xf8\xf5\xa7\x61\xe3\x37\x41\x65\x5e\xd0\x1c\x63\x68\xca\xb8\xa7\xd0\x22\x06\x32\x66\xd4\xcc\xa6\x8a\x6a\x36\x66\xd4\xd2\xf2\x54\x33\xe6\x3f\xff\x26\xa3\x6f\x46\x49\xd2\x10\xdb\x34\xb5\xd3\x6f\xf4\xbe\x45\xf3\x54\xe5\x39\xd5\x76\x5c\x79\x34\xfe\x1d\xa5\xe5\x76\x9d\x54\xdf\x64\xb8\x27\xe8\x2c\xf8\xa8\xd3\x18\x88\x7b\x6b\x3d\x3b\x55\xa2\x98\x4b\x13\xc3\xa7\x3d\x2d\xfb\x06\x6d\x75\xc7\x40\xec\x7a\x71\xf0\x68\xf7\x68\x94\x0c\x75\x0c\x0f\x58\x95\xbb\xc3\x23\x1a\xa1\x02\x31\x55\xd2\xa2\xb4\x90\x00\x21\x57\x2f\x8e\x6e\xcd\x94\x86\xc0\xed\xe7\xc0\x25\x74\x6a\xf6\x4e\x7a\xcd\x97\x09\x90\x6b\xb3\xa0\x12\x52\x41\x8d\x49\x06\x82\x4e\x51\x40\xf9\x77\x64\x8a\x34\x45\x63\x06\x13\x02\x97\x5e\xed\x27\xfe\x05\x2e\x81\x5c\x8f\x9d\xc8\x04\xc8\xd5\xd1\x43\x36\xc7\xcd\xd5\x68\x0b\x2d\xb7\x26\x1c\x56\xb1\xd9\x5b\xdd\xec\x47\xb6\x15\x0e\xce\xc8\xc9\x3a\x18\x9a\x54\xf3\x85\x43\xec\x74\x65\x96\x9a\x3b\xf3\x35\x55\x85\xb4\xa7\x2b\x43\xe9\xd2\x89\xf5\xa6\x9b\x13\x1b\x96\x18\x0e\x41\xab\x55\x4f\xe2\xb5\x70\x8e\x67\x10\x68\xb5\x8a\x2a\x43\xfa\xf2\xcd\xd1\x6d\x5a\x58\xab\x3c\x4f\x93\x81\xff\x18\x6c\xe9\x37\xb5\x12\xa6\x56\x8e\x18\x95\x39\xea\xf2\x95\xa7\xee\x77\xe7\xc0\xc8\xaa\x3c\x17\x98\x0c\xe6\x8a\x51\xb1\x5d\xa3\x3a\x47\x9b\x0c\x5e\xed\x2e\x96\xef\x23\xcb\xad\xdb\xfd\x5a\xc9\x8c\xeb\x39\x30\x6e\x9c\xad\xe0\xab\x04\xbc\x72\xac\x76\x2e\x70\xe6\x38\xdd\x90\x4c\xa9\x10\x53\x9a\xde\x25\x03\xbf\xf9\xb6\x3c\x38\xf8\x4c\xb6\x32\x1a\x73\x6e\x2c\xea\xaf\x5e\xf8\x33\x09\xaf\xca\x34\x69\x0d\x82\x7b\xc8\x35\xdf\xfa\x9a\x8b\xf5\x62\xe6\xbc\x83\xfa\x6d\xa4\x71\xae\x96\x38\x80\xca\xf4\x9b\x86\xc9\x83\xc9\xf5\x98\x4f\xf6\xc9\xb3\x7d\x36\x80\xc2\xe0\x99\x91\xa8\x8a\xc0\x79\xa1\xf0\xac\xf9\xa1\x91\x50\x77\x35\x0a\x6f\xe4\x53\x40\xe8\x2c\x7c\xe4\x9a\xf1\xe5\x4e\x98\x47\xb9\x56\xc5\x02\xea\xb7\xd1\x7d\x55\x72\xeb\x22\xed\x2a\xae\x87\xa7\xd3\xb3\x7e\xa0\x72\x99\xa9\x1a\xd1\xca\xb1\x51\x3a\xc3\xf4\x6e\x30\xe9\x22\x68\xa6\xd1\xcc\xea\xd8\xbc\xae\x84\xc6\x7c\x72\x66\x1b\x57\x54\x4b\x2e\xf3\x3d\x33\x17\x5c\xe6\xdd\x56\x1a\xfe\x27\x8e\xcc\x9c\x0a\x51\x9b\xfa\xc1\x0b\x3e\xcd\xd2\x31\xe3\xcb\xc9\x91\x3e\x77\xa0\x49\x35\x56\xbe\xd4\x5f\x9b\xb0\x2a\xa5\xf5\x68\xf6\xce\x91\x56\xa2\xde\x0e\x67\xa2\xfe\xee\x3d\x9e\xfd\x90\x23\x58\xed\xc7\xbf\x33\x84\x49\x3a\xc7\xd3\xbb\x6b\xc6\x35\x9a\xd3\xd5\x9c\x63\x04\xc1\x25\x4a\xdb\x7f\xac\x74\x52\xe7\x9e\x2a\x4b\x13\xde\x32\x37\x5b\x76\xa9\x87\xbe\xa3\xa5\x2b\x40\xbe\xc8\x39\x95\x9f\xaa\x23\xfe\x33\xc3\xa5\x23\xc8\xd7\x8c\x6b\x63\x9f\x82\x0c\xb6\x85\xce\x0d\x54\x2f\xbb\x36\xed\x78\x48\x4e\x8a\x8f\x3b\xe8\x56\x7d\xb4\x9a\xcb\xdc\x9b\xf6\xac\xa1\x12\xf4\xff\x18\xa9\xae\x66\xb0\x77\x29\x07\x3b\x55\x6c\x4d\xc2\x48\xc9\x80\xa4\x82\xa7\x77\x64\x08\xc4\xf7\xaa\x68\xb7\x4b\x93\xe1\x4e\xbc\x1a\x71\xc0\x68\xa1\xcb\x6c\xba\xc1\x8c\x16\xc2\x06\x3b\xe6\xba\x64\xf6\x5a\xde\x32\x48\x1a\xff\x22\x88\xb4\x5a\x05\x17\x81\x9d\x71\x13\x46\xa9\x50\x06\x8d\x0d\x88\xd5\x24\x0c\x23\x07\x64\x10\xee\x0e\x5a\x3b\x55\xe3\x22\x72\x8d\xe2\x51\x67\x72\x7d\x3d\x06\xf2\xe1\xfd\xc7\xdb\x47\xa8\x1f\xe9\x1e\x65\x21\xd8\x5a\x76\x09\x64\x5c\x79\xd9\x90\xad\x26\xd1\x07\xaa\x04\x87\x08\xd0\xf0\xca\xd9\x16\x69\x14\x8a\xb2\xe0\x11\x6e\x9b\x06\x1e\xa7\xe3\xe2\xc6\x92\x53\x61\x79\x32\x28\xcf\x08\xc4\xe3\xc1\x7a\xec\x1d\xec\x40\x44\x1f\x82\xa4\xbc\x2b\x96\x16\xc3\xcb\x24\x01\x52\x48\x86\x19\x97\xc8\xc8\xb1\x0c\x2e\x53\xdc\x8b\xb4\x25\xb9\xc4\x15\x7c\xf8\x43\x59\x9e\xad\x83\xf6\x52\x50\x8e\x80\x31\x90\xf7\x59\x26\xb8\xc4\x23\xb5\xa8\xde\x8d\xf7\x36\x06\xe2\x61\x80\x9d\x98\xf8\x50\x00\x37\xa0\xfa\x29\xf2\xf1\x47\xad\x95\xee\xd8\x6a\xec\x5a\x70\x99\xc7\x40\xa6\x4a\x59\x63\x35\x5d\xfc\xd2\x72\xcb\x38\x56\x85\xba\xae\x80\x7f\x23\x64\xf2\x4c\x11\xeb\xa5\xc7\x07\xac\x22\xd6\x3f\x13\xb2\x8e\xc2\xdd\x52\x28\x56\x5c\x32\xb5\x8a\x76\x6f\xa6\x90\x3c\x24\xc3\xb6\xa2\xed\x52\xf8\x99\xea\xa5\xbf\x8e\x9f\x92\x9e\x1a\x4d\x21\x2c\x24\x2e\x41\x33\xca\x45\x4b\x76\xf6\xe3\xd0\x96\x3f\x6f\x3a\xc8\xef\xa9\xa3\xa3\x39\x1a\x43\x73\x6c\xd9\xd8\x2f\x99\x66\x9c\x61\x0c\x19\x15\xa6\x45\x57\x7f\xea\x1c\xa3\x8d\x1f\x0f\x0e\x70\xe7\x9c\x1d\xe9\xc5\x26\xbc\xfa\x2b\x00\x00\xff\xff\xb8\xb2\xc8\x2d\xf2\x17\x00\x00")

func assetsJsDevicesJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsDevicesJs,
		"assets/js/devices.js",
	)
}

func assetsJsDevicesJs() (*asset, error) {
	bytes, err := assetsJsDevicesJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/devices.js", size: 6130, mode: os.FileMode(420), modTime: time.Unix(1543435031, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesBoggartMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x3f\x6f\x13\x4b\x14\xc5\x4f\xfc\xf2\x5e\xe1\xc7\x1f\x81\x28\x29\x6e\x0a\x22\x10\x9a\xb0\x6b\x13\x29\xda\x64\x13\x44\xfe\x48\x88\x58\x44\xc1\x50\xd1\x0c\xf6\x60\xaf\xf0\xce\x58\xb3\xb3\x11\x91\x22\x14\x82\xa8\x40\xa2\x40\x74\x08\x8a\x34\xa1\x8b\x02\x91\x12\x25\x36\x15\xfd\xdd\x82\x96\x86\x8f\xc0\x17\x40\x5e\x2f\x44\x9c\x66\xce\x4f\xf7\x9c\x3b\xf7\xfb\xf9\xd1\xb7\x00\xf0\x1f\x80\x8b\x00\x96\x01\xfc\x0f\x60\x03\x43\xed\x00\x38\x03\xe0\x23\x80\x53\x00\x0e\x00\x9c\x05\xf0\x15\xc0\x69\x00\xdf\x0a\xfe\x01\xa0\x3d\x02\xfc\x04\x30\x06\xe0\x41\x09\xb8\x00\xe0\x69\xf1\xbe\x29\x0d\xfb\x3b\x25\xe0\x1c\x80\xfd\x12\x30\x52\xfc\xf1\x2f\x80\x7f\x70\xa2\x52\xf1\x8e\x16\x77\xe5\x8a\x95\x4e\x47\x17\x64\xd2\x7e\x68\xa4\x6d\x16\xa8\xd6\xa2\x86\x4a\x86\x50\x33\x3a\x72\xc6\x46\xba\x35\xe4\xbb\xaa\x91\xda\xc8\xad\x17\x14\x4b\xeb\xa8\x6d\x62\x85\x55\xd5\x35\xd6\x89\x5a\xd2\x8a\x9a\xe2\x66\xda\x4a\x44\xdd\x04\xd4\x54\x6b\x37\x1e\x47\x6d\x19\x9b\x09\x9b\x96\x57\xee\xd4\xc5\xbc\x55\xd2\x45\x46\x8b\x05\xe9\x54\x40\x15\xcf\x9f\x12\x5e\x55\x54\xaa\x54\xa9\x06\x93\x93\x57\xbd\xaa\xe7\x95\x97\x65\xe2\x44\xdd\x4a\x9d\x74\xa4\x33\x36\xa0\xdb\xf9\x0e\xaa\xa5\x56\xc6\xa6\x69\x68\xe6\xaf\xc5\xb3\xe5\x65\xa9\x5b\xa9\x6c\x29\x51\x57\x32\x0e\xe8\x0f\x07\xb4\x9a\x26\x49\x24\x75\xb9\x76\xab\xb6\x28\xee\x2b\x9b\x44\x46\x07\xe4\x4f\x78\xe5\x79\xa3\x9d\xd2\x4e\xd4\xd7\xbb\x2a\x20\xa7\x9e\xb8\x6b\xdd\x8e\x8c\xf4\x34\x35\xda\xd2\x26\xca\x85\xf7\xea\x4b\x62\xea\x24\x37\xb8\xe7\x91\xb2\x62\x51\x37\x4c\x33\xd2\xad\x80\xca\x2b\x9d\xd4\xca\x8e\x58\x32\x36\x4e\x02\xd2\xdd\x1c\x93\xb0\x3a\x4d\x43\x1b\xea\x4b\xbe\x17\x86\x3e\x8d\x8f\xd3\xc0\x7a\x63\xa1\xef\xd3\x1c\x79\x14\xe4\x3c\x1b\x56\x7e\x8f\x66\xc2\xeb\x03\x7b\x39\x8f\xcd\xf8\x1e\x6d\x6c\x0c\x2b\xb3\x61\xc5\xbb\x42\x73\xe4\x53\x40\x95\x69\xf0\x07\xde\xe5\x1e\xef\xf3\x51\xf6\x8a\xb2\xe7\xfc\x25\xdb\xe4\x5d\xde\xe3\x23\xde\xe7\x1e\x1f\x64\xaf\xc1\xdb\xd9\xb3\x6c\x2b\xdb\xe4\x3e\x1f\x0e\x1c\xef\xf1\x2e\xf8\x1d\xf7\xf3\xf9\x16\xf7\xb3\x4d\x3e\xe0\x1e\x7f\x02\xbf\xcf\x5e\xe4\xf5\xde\x20\xb1\xcd\xc7\xdc\xcb\x5e\xf2\x21\xf1\x67\xee\xf3\x31\x7e\x05\x00\x00\xff\xff\x45\x49\x1e\x80\xc7\x02\x00\x00")

func localesRuLc_messagesBoggartMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesBoggartMo,
		"locales/ru/LC_MESSAGES/boggart.mo",
	)
}

func localesRuLc_messagesBoggartMo() (*asset, error) {
	bytes, err := localesRuLc_messagesBoggartMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/boggart.mo", size: 711, mode: os.FileMode(420), modTime: time.Unix(1543436976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesDevicesMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x52\xcf\x4f\x2b\x55\x14\xfe\xe6\x4d\x9f\xfa\xc6\xe7\x8f\xbc\x68\xdc\x68\x72\x5d\x48\x34\x66\x70\xa6\x95\x84\x0c\x0c\xa0\x14\x12\x22\x55\x24\xd5\xfd\xa5\xbd\x94\x09\xed\x4c\x9d\x3b\x45\x4d\x30\x01\x8c\xc1\x48\x82\x09\xc1\x1f\x89\x51\x82\xec\xdc\x58\x09\x0d\xc5\x4a\x59\xba\x31\xf1\x5c\x37\xee\xfc\x1b\xfc\x13\xcc\x9d\x19\x30\xbc\xbb\x98\x73\xbe\x7b\xbe\xf3\x9d\xef\xdc\xcc\x3f\x0f\x0a\x5f\x01\xc0\x53\x00\x9e\x07\x70\x08\xe0\x39\x00\xf7\x0d\xa4\x67\xcd\x00\x1e\x05\x10\x18\xc0\xe3\x00\x3e\xc8\xf1\x27\x06\xf0\x18\x80\xcf\x72\xbc\x6f\x00\x8f\x00\xf8\xda\x00\xee\x02\xf8\x3e\xe7\x9f\x18\xc0\x1d\x00\x3f\x1b\x80\x05\xe0\xd4\x00\xee\x01\xb8\x34\x80\x02\x80\xdf\x73\xfe\x1f\x39\xfe\xcb\xc8\x66\xfe\x6d\x00\x4f\x03\x98\x31\xb3\xf8\xae\x09\x3c\x03\x60\xc5\x04\x1e\x00\xf8\x30\xbf\xff\xc2\x04\x9e\x04\xf0\x9d\x09\xdc\x07\xf0\x93\x99\xf9\x3f\x37\xb3\xb9\x7f\x9a\xc0\x0b\x5a\x37\xef\xfb\xd7\xcc\x7c\x9a\x85\xcc\x8f\x55\xc8\xf0\xb3\x05\x20\x5f\x39\x3d\x7a\x37\x33\xcf\xb5\xbe\xf6\x76\x2f\x7f\x27\x7d\xf4\x2c\xdd\x67\xe5\x58\xbf\x81\xde\xf7\x4e\x8e\xef\xe6\xf1\x89\x6b\xc1\x37\x6a\x49\x10\x85\x12\x65\x21\x6b\x71\xd0\xd6\x00\x65\xb1\x11\xd4\x84\x44\x39\x90\x7c\xa5\x29\xea\x98\x0b\xf3\xb8\x21\xc2\x44\x62\x3e\x88\x45\xfa\x95\x09\x5b\x0d\x62\x51\xc7\x42\x19\x8b\xfc\x06\x2d\x06\x32\x11\xa1\x88\x25\xde\xe6\x2d\x81\x2a\x97\xeb\x12\xd5\x8f\xdb\x02\xcb\xa2\x1d\xc5\x89\x5d\x91\x8d\xa0\x6e\xbf\xd9\x69\x48\xbb\x1a\x79\xac\x2e\x36\x66\xd6\x83\x35\xde\x8a\x46\xe3\x8e\xb5\xf4\x4e\xd5\x9e\x8d\x05\xd7\x56\xec\x32\x4f\x84\xc7\x8a\x8e\x3b\x6e\x3b\x25\xbb\x58\x62\xc5\x92\x37\x36\xf6\xaa\x53\x72\x1c\x4b\x4f\xb4\xab\x31\x0f\x65\x93\x27\x51\xec\xb1\xb7\x52\x0d\x56\xe9\xc4\xbc\x15\xd5\x23\x36\x79\x4b\x78\xca\x5a\xe4\x61\xa3\xc3\x1b\xc2\xae\x0a\xde\xf2\xd8\x0d\xf6\xd8\x72\x47\xca\x80\x87\x56\x65\xa1\x32\x67\xbf\x2f\x62\x19\x44\xa1\xc7\xdc\x51\xc7\x9a\x8d\xc2\x44\x84\x89\xad\xed\x7b\x2c\x11\x1f\x25\xaf\xb5\x9b\x3c\x08\x27\x58\x6d\x8d\xc7\x52\x24\xfe\x7b\xd5\x79\x7b\xfc\x7f\x9e\xf6\xb3\x2a\x62\x7b\x2e\xac\x45\xf5\x20\x6c\x78\xcc\x5a\x6a\x76\x62\xde\xb4\xe7\xa3\xb8\x25\x3d\x16\xb6\x53\x28\xfd\xd2\x04\xcb\x52\x3f\x7c\xc9\x75\x7c\xdf\x65\x23\x23\x4c\xa7\xce\x8b\xbe\xeb\xb2\x69\xe6\x30\x2f\xc5\x53\x7e\xf1\xba\x34\xe9\xbf\xae\xd3\x97\x53\xda\xa4\xeb\xb0\xcd\xcd\xac\x65\xca\x2f\x3a\xaf\xb0\x69\xe6\x32\x8f\x15\x27\x40\x87\xd4\xa3\x0b\xb5\xad\x76\xe8\x94\xfa\xea\x4b\xd0\x0f\x74\x45\x7d\xb5\x4d\x5d\xba\xa4\x3e\xf5\x40\x27\xba\xaa\xb6\x68\x78\xc3\xeb\x82\x0e\xd4\x1e\xfd\x4a\x03\xb5\xaf\x76\xa9\x47\x97\x34\x04\x1d\x3c\x7c\x71\x4c\x43\xfa\x45\xed\xa9\x9d\x4c\x58\xb7\x9c\xd3\x90\x4e\xd5\x1e\xe8\x88\x7a\x6a\x4b\xa7\x74\xc1\xd2\x90\x56\xf4\xff\x41\x47\x34\x54\xdb\x34\xa0\x1e\x9d\xa5\x16\x6e\x11\xe8\x98\x06\xea\x53\xf5\x39\x75\xd5\x0e\xf5\x68\x40\x7d\xd0\xb7\xf4\x9b\xd6\xff\x86\xba\x74\x46\x5d\xb5\x0b\xfa\x91\xfa\x74\x85\xff\x02\x00\x00\xff\xff\xc7\xff\x7a\x4d\x1c\x04\x00\x00")

func localesRuLc_messagesDevicesMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesDevicesMo,
		"locales/ru/LC_MESSAGES/devices.mo",
	)
}

func localesRuLc_messagesDevicesMo() (*asset, error) {
	bytes, err := localesRuLc_messagesDevicesMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/devices.mo", size: 1052, mode: os.FileMode(420), modTime: time.Unix(1543436976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"assets/js/devices.js": assetsJsDevicesJs,
	"locales/ru/LC_MESSAGES/boggart.mo": localesRuLc_messagesBoggartMo,
	"locales/ru/LC_MESSAGES/devices.mo": localesRuLc_messagesDevicesMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"devices.js": &bintree{assetsJsDevicesJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"boggart.mo": &bintree{localesRuLc_messagesBoggartMo, map[string]*bintree{}},
				"devices.mo": &bintree{localesRuLc_messagesDevicesMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
