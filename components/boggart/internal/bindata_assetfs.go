// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xa8\xad\xe5\xe2\xaa\xae\x56\x48\xcd\x4b\x01\x31\x01\x01\x00\x00\xff\xff\x3e\x64\xd4\x00\x22\x00\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 34, mode: os.FileMode(420), modTime: time.Unix(1515575925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\x1b\xc7\x11\x7f\xf7\xa7\x58\x10\x06\x24\x03\x21\x29\x51\x01\x8a\xc8\x94\x81\x38\xfd\x0b\x24\x6d\xd0\xa4\xce\xe3\x61\x79\x37\xe4\xad\x7d\xdc\xbd\xec\xee\xf1\x0f\x08\x01\x34\xe5\x38\x0d\xdc\xc2\x41\x5a\xa0\x45\x51\x24\x45\x81\x3e\x16\x60\x14\xab\x51\x65\x91\xf9\x02\x7d\x98\xfd\x46\xc5\x2e\x49\x89\xa2\x48\x9a\x14\x0f\x8e\x64\xe9\x5e\x78\x77\xb3\xb7\xf3\x67\x7f\x33\x3b\x33\x77\x6c\xb5\x48\x00\x65\xc6\x81\x64\x7c\xc1\x35\x70\x9d\x21\xbb\xbb\xb7\x8a\x01\xab\x11\x3f\xa2\x4a\xed\x64\xa4\xa8\x93\x92\xa8\x54\xa8\xd4\x99\x7b\xb7\x08\x21\x64\x9c\xea\x8b\x28\x5b\x0d\xb2\x9b\x85\x21\x6d\x92\x3e\x76\x7b\x92\xd4\xf0\x34\xd3\x11\x4c\x8c\x70\xa3\xc2\xc2\x3d\xfc\x07\x1e\x98\xc7\x66\xcf\xb4\xcd\x63\xf3\xac\x98\x0f\x0b\x53\xc6\x8d\x0b\x12\x01\x95\x65\xd6\xc8\xdc\x2b\xe6\x03\x56\x9b\x60\x3b\xe5\xd6\x19\x49\x46\xca\xcf\xe7\x21\x45\x7d\xca\x08\x7b\xb4\x5a\x84\x95\x49\xee\x3d\xc1\xcb\xac\x92\xbb\x2f\x44\x44\x32\x43\xa3\xe5\xe2\x24\x52\x54\xe6\x80\xd3\x52\x04\x81\xb3\xef\xb4\x29\xa6\x58\x75\x8b\xd8\x93\x86\xca\x6e\x16\x48\x9d\x05\x15\xd0\xc3\x1f\x4f\xd3\x28\x6a\x7a\x25\xd1\x98\x21\xcf\x79\x0d\x63\xca\x21\x9a\x33\x7a\x19\x9b\x4c\x7d\x8e\x05\x3b\x19\x09\x4a\x24\xd2\x87\x6c\x08\x54\x67\x19\xcf\x10\xa5\x9b\x11\xec\x64\x42\x60\x95\x50\x6f\x6f\x6d\x6c\xc4\x8d\xbb\x0b\xcc\x68\x8f\x5f\xf1\x85\x86\xb5\x5a\x24\x37\x34\xb5\x37\x30\xb5\xa7\xa1\x1a\x83\xa4\x3a\x91\xe0\x31\xee\xf9\x10\x29\x96\xa8\xdc\x03\x1a\x25\x40\x76\x77\xc9\x7b\x0b\x4d\x5c\x2c\x49\x92\x5f\x4c\xd4\xdf\x24\x3a\x0d\x59\x45\xa2\x5f\x83\xb0\x3f\x85\x48\xd3\x34\xc4\x0d\xec\x44\x17\x11\x78\x8a\x3b\x2e\x39\x64\x0e\x79\x1e\xe9\x8d\x73\x31\x91\xe8\x95\x7c\x0c\xbf\xc1\x3e\x1e\x61\x17\xbf\xc7\x2e\xf6\xf0\xd0\x3c\x27\xe6\x8f\xd8\xc3\x03\xd3\xc6\xef\xf0\x10\x0f\x2f\x8a\x13\xe0\x20\x2b\x4d\xaf\xc2\x2a\xd4\x17\x91\x90\x0c\xc6\x10\x32\x7e\xf7\x06\x2c\x73\xf4\x4a\x17\x2c\xce\x5f\x53\x87\x4b\x07\x0f\xf0\xc8\xec\x99\x2f\xf0\x00\x0f\xff\xf7\x94\xe0\x31\xf6\xcd\x17\xd8\xc3\xbe\x79\x6c\x3a\x17\x47\x90\x2f\xb8\x4a\xaa\xb1\x66\x82\x7b\x7e\x52\x62\xbe\x57\x05\x2d\x41\x79\x31\x48\x2f\x14\x89\x3c\xc5\x93\x23\x93\x01\x99\xc4\x20\x89\x25\xdf\x00\x6b\x8e\x5e\xa9\x01\xab\x4e\x35\xc8\xac\x2f\xa2\x60\x35\x60\xfd\x0b\xfb\xf8\x12\xfb\xf8\x02\x7b\xd8\x35\xcf\x09\xee\xbb\x8b\xee\xc5\xd1\x13\x05\x9e\x13\xce\xf3\x69\x4c\x7d\xa6\x9b\x67\x50\x34\x1d\x3c\x37\x98\x99\xa3\x57\xca\x98\x09\xc5\x8a\x5b\xd7\x9f\xb0\x6f\xda\xe6\xb9\xf9\x3c\x15\xc0\x84\x42\xbf\x41\x78\x69\xb5\x08\xf0\x60\x56\xa9\x31\xaf\x5a\xa9\x82\xf4\x13\xd9\xbc\x5e\xe5\x0a\x44\xe0\x6b\xc9\xec\xaa\xaf\x86\xc9\x7f\xe3\x4b\xb7\x1d\x76\x4c\x1b\x0f\xcd\xe7\xae\x84\xed\x58\x68\x2e\x91\x9f\x7f\xbc\xb9\x7d\x06\xa0\xc3\x15\xf1\xf4\xa6\x05\xa8\x76\x7b\x9f\xa7\x85\xa6\xd1\x29\x28\x3f\xc9\x87\xcb\x70\x28\xcc\xe0\x50\x48\x8d\xc3\xd6\x0c\x0e\x5b\xa9\x71\x78\x7b\x06\x87\xb7\xd3\xe2\xf0\x40\x44\x9a\x56\x60\x3a\x9b\xda\x80\xe8\x7e\x2f\xca\xe0\x5d\x57\x4a\xcd\xe2\x40\x87\xd4\xc1\x09\x9c\x32\x79\x77\x09\x16\x1f\x8a\x3a\xc8\xe9\xf3\xc7\x96\xe4\x6c\x35\x26\xff\x12\x53\xdf\xa7\x5a\x83\x6c\x4e\x9f\xbc\x34\x20\xce\x30\xd3\x83\x05\xd9\x5c\xbe\xe8\xf9\xea\xde\xd2\xd8\xe5\xf0\x74\xf8\x73\x29\x9a\x6a\xff\xc4\x83\x41\x84\xc2\x3e\x1e\xe3\xb1\xd9\xb3\x59\xbc\xcd\xe8\xcd\x53\x5b\xed\x5d\xe5\x36\x9b\x12\x65\x5d\x63\x01\x88\x6b\xb1\x75\xf9\xa2\x5a\x4d\x38\xf3\xa9\xad\x8f\xb2\x8c\x6b\x90\x1c\x56\x4c\xa8\xfe\x8a\x3d\x5b\xcd\x99\xb6\x6b\x00\x74\x96\xce\xa4\x4e\x56\xc0\x2b\xd1\x88\x72\x1f\x3c\x99\x94\x22\x50\x13\x61\x78\xa1\x79\x4d\xdb\xec\xe1\xb7\xb9\x2b\x18\x22\xc8\xab\x12\x2c\x51\x62\x11\x5c\x43\x90\xc6\xa1\xe0\xb0\x1a\x42\xff\x8e\x87\xd8\x33\x7b\xa6\x63\x9e\x11\xfc\x01\xfb\xc4\x74\xb0\xeb\x52\xad\x27\xd8\xb3\x21\xcd\xec\xd9\xfb\x2f\xb1\x6b\x87\x2d\x0d\xe0\xc1\xd2\x78\x55\xa8\xd0\xb2\xe0\x5e\xa2\x20\xf0\x6a\x82\xf9\xe0\x55\x19\x4f\xf4\x58\x15\xb0\x98\xb8\xc7\x23\x71\xd3\x6e\xe1\x7e\xf4\xc1\x47\xaf\x4b\x7f\x55\x5d\x52\x6b\xf3\x7b\xd3\x79\xb5\xdf\x92\xe5\x14\x9e\x8c\x4d\xaf\x4b\xfb\x51\x60\x75\x8d\xcc\x52\x73\x69\x08\xfc\xe2\x7e\xfa\xa6\xf8\x12\xf7\x4d\x07\xfb\xf8\x83\x69\xbb\x92\xd7\xee\xe7\x76\x17\x3f\x48\x57\xe3\x58\x8a\x48\xf0\x8a\xf3\xdd\x8b\xab\x9f\xa6\xf6\x57\x30\xd6\x5f\xa3\x62\xfa\x6c\xb0\xaf\xb3\x32\x5b\x29\xd6\x7f\xc2\x7e\xce\x08\x1e\xe1\x4b\x8b\x6c\xeb\xfc\xe6\xd9\xf2\xf8\x66\x8f\xa4\xd0\xec\x91\x67\xa5\xf1\xfc\x88\x01\xd7\x4b\x67\x23\x97\x0f\x75\x57\xbd\x08\xf9\x06\xfb\xf8\xdd\xa0\x5b\x77\xd9\x0b\x8e\x37\xc1\x31\xeb\x40\x75\x08\x32\x2b\x12\x1d\x08\x21\x67\x79\xe5\xf8\xb2\x10\xec\x61\x97\x98\x3d\xeb\x7d\xe6\x29\x1e\xdc\xb4\xbd\x57\x37\x3f\xe3\x8b\x5b\x7f\xdf\x46\xbe\x7d\x9b\xdc\x98\x0e\x1e\x9a\xf6\x8f\xb3\x02\x57\x3d\xce\x7c\x6d\x3e\x33\x6d\xf7\xa2\xf2\xd2\xc7\x99\x79\x49\x44\xc8\x1e\xd5\x98\x62\x82\xe7\x94\x96\x00\xfa\x5a\x64\x13\x0a\xfc\x44\x32\xdd\xcc\xd6\xa1\xe4\xd3\x6a\x76\xa0\xfa\x6a\xd5\xe3\xdf\xb0\x8b\xc7\xae\x86\x38\x1f\xe0\x16\xcf\xbf\x8b\xac\x5a\x21\x4a\xfa\x3b\x99\xfc\x70\x85\xf2\x27\x2b\x94\x1f\x88\x99\x8f\x25\xd4\x18\xd4\x4f\xc4\xad\x32\x9b\x11\x05\x3a\xdc\xde\xfc\xc9\x3b\x71\xe3\x6e\x95\x36\x86\xd7\x85\xad\x77\x16\xd3\xe0\xf2\xa5\x21\x64\x61\xdc\x86\x34\x8a\xae\x25\x6a\xad\xe2\xd9\xcd\xf4\x50\x6b\x0b\xdc\x7d\xf3\xd9\xf0\x3d\x79\x1f\xff\x4b\xf0\x05\xee\x3b\xe2\x61\x5a\x10\xb6\x32\x5f\x1f\x00\xbf\xb1\xa8\x2b\xcc\xcc\x34\xce\x84\xc1\x7d\x82\x7d\xfc\xd6\x7d\xbc\x73\x6c\x93\x8e\xbe\x69\x5b\x30\xe1\x0b\x7b\x86\x07\x0e\x71\x36\x46\x3e\x31\x1d\xbb\x8b\xde\xa4\x81\x2b\x2f\x92\x6b\xb0\xf8\xa2\x3a\x73\x7d\xfe\xec\xde\xcd\xf4\xcd\x13\xec\x63\xef\x47\xf4\x9a\x99\x81\xdd\xe6\xb1\xea\x7a\xc5\x73\xe0\x5a\x52\xee\x43\x76\x5e\x0e\xbf\x58\x3c\xff\xea\x24\x7e\xbb\xcf\x56\x86\xf1\xdb\xfc\xe1\xd6\xa2\xed\x0d\x56\x26\xf0\xe9\x69\x93\xc3\xad\x86\x37\x12\xd0\x53\x9a\xea\x93\xaf\x71\x37\x72\x1b\x8b\xb6\xea\x9c\x6c\x7f\xc1\x2e\x1e\x99\xb6\x79\x66\xbd\x7d\x51\x79\x20\x52\x0b\x37\x04\x1d\x97\xaf\x4d\xe7\x02\x5c\x66\xc7\xf0\xf1\xe3\x66\x97\x59\xe8\x89\x55\x7c\x81\x7e\x9a\xd0\xac\x4f\xe5\xcc\x77\x39\xf8\xe5\xb0\x7a\x7d\x6c\x3a\x6e\x1b\xe9\xe3\x7f\x6e\xb6\x8e\x14\x2c\x5f\x82\x28\x9a\x69\xf4\xaf\xce\xe6\x85\xdf\xbb\x0f\xe2\xec\xc5\xd1\x15\xeb\x1d\x9c\xba\xd2\xad\xb1\xbf\x27\x85\x40\x07\x7b\x4d\xd1\xe9\x4f\x74\x33\x86\x9d\x8c\x86\x86\xce\xfb\x4a\x0d\xcd\x39\x0a\x8a\x24\x37\x5c\x1a\xd2\x3a\xe1\x17\xd3\x20\x60\xbc\xb2\x4d\x36\xee\xba\x7b\xbb\xb7\x26\x1e\x19\x62\x61\xca\x13\x85\xb8\x31\x7a\xa6\x98\x77\xec\x67\x49\xf9\x50\x9d\xec\x87\xad\x16\xb1\xb1\x98\xf9\xbf\xfc\xf8\x83\xf7\xc9\xfa\xe0\xfc\x77\xbf\x7d\x9f\x64\xf2\x01\x55\x61\x49\x50\x19\xe4\xa9\x52\xa0\x55\xbe\x06\x3c\x10\x52\xe5\xc1\x0f\xa9\xd4\x2a\xff\xf0\xe4\x34\x57\x65\x3c\x67\x67\x2d\xd3\x48\xc1\x1d\xc7\x8f\x9c\xee\xcf\x20\xa5\x90\x6a\xc4\xb2\xa8\x7c\xc9\x62\x3d\x6e\x9b\x87\xb4\x46\x07\x77\xc7\x10\x77\x7b\x3d\x10\x7e\x52\x05\xae\xef\xe4\x24\xd0\xa0\xb9\x5e\x4e\xb8\xaf\x99\xe0\x64\xfd\xce\x98\x01\x86\x8c\x24\xe5\x15\x20\xb7\xe1\x2d\x72\xdb\xf1\x23\xdb\x3b\x93\x9c\x47\x07\x87\x3a\xf9\xf0\xd7\x42\xb3\x72\x73\xbd\x75\x0e\x14\xae\x5b\xb3\x4d\xd6\x7e\x66\x9f\x5d\x7b\xeb\x3c\x1d\x1a\x7a\x9b\xac\xb5\x5a\x23\x46\xbb\xbb\xd3\x46\x35\x63\x3b\x09\xcc\x98\x24\x64\x01\x6c\x0f\xcc\x75\x9e\x68\x17\xcf\x2d\xe9\x5a\x49\x08\xad\xb4\xa4\xf1\xd6\xda\x99\x51\xbb\x77\xee\x4e\xea\x3f\x11\xd8\x47\x23\x8a\xf9\x81\x61\xc7\xb1\x70\x7a\xf6\xff\x00\x00\x00\xff\xff\xd6\x6c\xfc\x1b\x5a\x37\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 14170, mode: os.FileMode(420), modTime: time.Unix(1517692976, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
