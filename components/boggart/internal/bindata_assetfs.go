// Code generated by go-bindata.
// sources:
// templates/views/devices.html
// assets/js/devices.js
// locales/ru/LC_MESSAGES/boggart.mo
// locales/ru/LC_MESSAGES/devices.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xc1\x4e\x1b\x31\x10\xbd\xf3\x15\x23\x4b\x95\xe0\x90\x18\x38\x55\x55\xc8\x05\x8a\x5a\x29\x54\x6a\x9b\x9e\x2b\xef\x7a\x96\x4c\xba\xb1\xb7\x9e\x49\x00\xad\xf2\xef\x95\x37\x09\x59\xd2\x2c\x74\x61\xe1\xd4\x53\x36\xf6\xbc\x37\xcf\x6f\x3c\x23\x97\x25\x58\xcc\xc8\x21\xa8\xd4\x3b\x41\x27\x0a\x96\xcb\x83\x83\x81\xa5\x05\xa4\xb9\x61\x3e\x53\xc1\xdf\x28\x20\x7b\xa6\x2c\x2e\x28\x45\x56\xc3\x03\x00\x80\x7a\xc8\xed\xcf\xc2\x38\xcc\xd7\x3b\x7f\xef\x0a\x49\x8e\xb5\xdd\x2a\x62\x72\x3a\x2c\x4b\xa0\x93\xf7\x0e\xd4\xc5\x9a\x1a\xfa\xb0\x5c\x0e\xf4\xe4\x74\x27\xb6\xc6\x96\xe6\x68\x42\x46\xb7\x6a\x38\xd0\x96\x16\xb5\x94\x3b\x7f\x1f\x28\xd8\x9c\xae\x99\x57\x4c\x92\x63\x2f\x20\x17\xde\x31\x2d\x76\xe5\x56\xe1\x55\xcc\x03\x00\xac\x60\x2c\x81\x0a\xb4\x60\xa5\xc6\x00\xce\xdf\x04\x53\x28\x60\xb9\xcb\xf1\x4c\xdd\x90\x95\xc9\x87\x93\xe3\xe3\x77\x7b\xb8\x57\xfc\x13\x34\xb6\x69\x2f\xec\xdf\x58\x03\xb7\x5e\x8e\xcd\xf5\xbd\x91\x32\x79\x14\xb4\x39\xca\xcc\xf6\x52\x9f\xf7\x4e\xd4\x96\xe5\xbb\x18\x99\x77\xc0\x33\x36\xfc\x8b\x21\xf5\xf3\x78\xb5\x5e\x4a\x76\xf5\x75\x3c\x06\xf1\x05\xa5\x1d\x28\xab\xc8\x78\x9e\x70\x1a\x28\xc1\xf0\xaf\x8c\x35\x8b\x30\x90\xc9\xc1\xcd\x67\x09\x86\xe7\xe9\x39\xad\xe9\xf9\x7c\xd1\x5a\xc1\x05\x46\xf1\x85\x90\x77\xad\xb1\x55\x61\x5a\xa3\xda\x57\xa0\x43\xc3\xcf\xbd\xcb\xe8\xfa\x29\xd8\x40\x37\xb5\x4a\xc4\xec\x6d\xb0\x81\xae\xda\x78\x67\x38\x34\x8e\x97\xf5\xe7\xfa\x67\xff\xb0\xcc\x89\x05\x5d\x3c\x65\x77\xe3\x72\x40\x9b\x98\xcc\x40\x66\x7a\x16\x4d\x16\xc7\x20\x0d\xe1\xde\xa3\xd1\x7d\xde\xff\xb3\xf4\xe5\xb3\xf4\x8b\x99\x61\xeb\x6b\xfa\x8c\x46\xbe\xa4\x80\xed\xfb\xe1\x92\x02\x0b\x64\x14\xd0\xb6\xc6\x8e\xcc\xb3\xa1\x1f\x17\xe8\xe4\x49\xb5\x6f\xdd\x86\x65\x09\xe8\x6c\xf5\x7a\xa9\xbd\x6a\x62\xa2\xea\x49\x13\x01\x65\x09\x2c\x46\x28\xfd\x34\xbe\x1a\xc1\xe1\xea\xfb\xc7\xb7\x11\x28\x6d\x0d\x4f\x12\x6f\x82\xd5\x86\x19\x85\xf5\x02\x9d\xf5\x81\xb5\x35\x62\x2a\x55\xdc\x77\x28\xbd\x84\x75\xca\xab\xd5\xf1\x6a\x35\xf1\x5e\x58\x82\x29\xfa\x33\x72\xfd\x94\x59\x41\x66\x72\xc6\xa3\x0e\xb3\x6e\xfb\x60\x23\x60\xbb\xf2\xb8\x80\xfd\xae\x4c\xb9\x43\x4f\xf4\x94\xf5\xf4\xf7\x1c\xc3\x5d\xbf\x66\x4b\xd4\x32\x7d\x0d\x2f\x12\x8e\x09\x1b\x0b\xf0\x2a\x39\xb7\x6e\xef\xe4\xae\x95\xe1\x0d\x92\xaf\xcf\xde\x58\xfb\x16\xe9\x0f\x8b\x40\x4e\x40\x69\x05\xfd\x73\x3f\x2b\xbc\x43\x27\x71\xda\x81\xda\xc8\x89\x27\x5d\x3d\xcb\x23\xf1\xd1\xbe\x4b\xf5\x27\x00\x00\xff\xff\xed\x55\xde\x56\x3f\x0c\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 3135, mode: os.FileMode(420), modTime: time.Unix(1547080005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsDevicesJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xb8\x76\x01\x28\x21\xa9\xbc\x61\x18\x30\x28\x75\xf7\xb0\xec\xa1\x43\xd0\x14\x48\xde\x82\x22\xa0\xc5\x93\xcc\x86\x26\x3d\xf2\x14\xd7\x28\xfc\xdd\x07\x4a\xf2\x1f\xc5\xb6\x24\xc7\x76\xdb\x00\xd5\x43\x10\xd1\x77\x3f\xde\xdd\xef\xfe\x90\x3a\x0d\x84\x49\xf2\x11\x6a\x0a\x23\x8b\x5c\x4c\x83\x34\xd7\x09\x49\xa3\x21\x08\xe1\xeb\x09\x00\xc0\x23\xb7\x40\x7c\xa0\xf0\x12\x1f\x65\x82\x0e\xfa\x70\x1a\xb0\x5f\x44\xf5\x56\xfc\xc4\xc2\x42\xd4\x3f\xd1\x25\x27\x7e\xeb\x17\x83\xaf\x8b\x45\xff\x8c\x79\x86\x57\xa8\x33\x1a\xc6\xf0\xc7\xaf\xe7\xb5\xdf\x14\xd7\x59\xce\x33\x8c\xa1\xae\xe3\x9f\xdc\xaa\x18\x58\x4f\x70\x37\x1c\x18\x6e\x45\x4f\x70\xe2\xc5\xae\xae\x27\x7f\xfb\x53\x47\x9f\x9d\xd1\xac\xa6\x36\xab\xa3\xf3\xcf\xfc\x4b\x03\xf2\xc0\x64\x19\xb7\xd4\xab\x3c\xea\xfd\x85\x9a\x24\x4d\xfb\xd5\x3b\x3b\x5f\x53\xf4\x16\xdc\xd8\x24\x06\xe6\xff\x6b\xdc\x3b\x31\x2a\x1f\x69\x17\xc3\xdd\x1a\xca\xba\x41\x73\xec\x18\x18\xf1\x6c\xd3\xce\xfe\xb1\xa8\x05\xda\x18\x96\x54\x79\xe1\x70\x0b\x1e\x54\x14\x26\x46\x13\x6a\x82\x3e\x30\x76\x71\xb2\x55\x34\x35\x16\x02\x2f\x2f\x41\x6a\x68\x03\x2e\x3d\x2c\x81\xcf\xfa\xc0\xde\xba\x31\xd7\x90\x28\xee\x5c\xff\xb5\xe2\x03\x54\x50\xfc\x7d\xe3\xf2\x24\x41\xe7\x5e\xbf\x63\x70\x56\xa0\xde\xc9\x4f\x70\x06\xec\x6d\xcf\x6b\xbc\x03\x76\xb1\x75\x8f\xd9\x76\x63\x2d\x52\x6e\xf5\xdc\x82\xcd\x10\xb3\xb5\xd5\xd9\x7a\x58\x1b\xa9\x70\xc4\x29\xef\x4e\x46\x29\xde\x14\x35\x37\x91\x94\x0c\x2b\xc1\x88\xcc\x95\x99\xa0\xfd\x9b\x3b\x0c\xc2\xd6\x60\x73\x87\xc0\x8c\x56\x52\x23\x8b\x1b\x45\x61\x19\xa0\x8e\xbc\x94\x06\xad\xd0\xd2\x94\x28\x2b\xd6\xa4\xe9\xa1\xcc\x11\x5c\x67\x68\xf7\xb2\xc6\xe2\xc8\x3c\x4a\x9d\x1d\xc2\x1c\xa9\x53\xb3\xbf\x31\x28\x0e\x61\xcb\x84\x5b\x2d\x75\xf6\x4c\x73\x04\xa6\x3c\x57\x74\x08\x8a\x4a\xa4\xed\x76\x6c\x43\x5e\x2f\xc4\xcd\xab\xbb\x96\x27\x71\xf7\xb0\x4b\xab\x74\x0f\x8d\xc5\x59\x05\xa0\x90\x8b\x54\x31\xaf\x8e\xd5\x58\x46\xff\x11\xdd\x93\x19\xcb\x64\x07\xfb\x0b\xf1\x2e\x0e\x14\x82\xdf\xc2\x03\x97\x0f\x5c\x62\xe5\x00\xed\x0e\x4d\x72\xa9\xd3\xc1\x97\x15\xe9\x23\x3b\xe4\xd0\x4a\xae\xee\x75\x3e\x1a\xa0\x65\x7b\xc3\x49\xb1\x3f\x86\x40\xef\xfb\xd8\xc7\x6d\x7f\xb0\x03\x17\xcb\x1e\x07\x8b\x16\x64\xe8\x7a\xb2\xa8\xf5\xc5\x02\xf6\x05\x1d\x2d\x8e\xd3\x01\x9e\xcf\x4a\x2b\x34\x74\xa5\x65\x6c\xe5\x88\xdb\x69\x45\x4b\x81\xfb\xd2\x78\x39\x62\x5f\x7b\x36\x43\x1d\xf1\xa1\x2b\x4d\x2b\x27\x9c\x25\xf2\x0b\x22\x2a\x31\x3a\x95\x59\x67\x7a\x4a\xf1\x0e\x13\xe7\xdf\x9b\xeb\x0f\x91\x23\x2b\x75\x26\xd3\xe9\x5c\xaf\xb3\x17\xb5\x95\x4f\x8b\xb7\x59\x58\x11\xbd\xb8\x53\x5f\x49\x47\xa8\xd1\xce\x6f\xd5\x6a\xf1\xde\xf9\x5e\xfd\x43\xde\x9d\x17\x7e\x7c\x9f\xdb\xb3\xe6\x23\xfc\x31\xa6\x77\x2a\x2d\xba\xc3\xc0\xdc\xa7\xd2\x3a\xea\x9c\xeb\x82\x13\x36\x65\xba\x4c\x21\x78\xd5\x26\x04\x2b\x57\x82\xbd\xfa\x80\xdf\xe8\xd6\xdc\x14\x15\x55\x9a\x76\xac\x96\x50\x84\x4a\xf1\x9f\x91\x82\xb6\x48\xe1\x23\x6a\xea\x3e\xdb\xbc\xd6\xa1\x87\x5a\x61\xc2\x7b\xe1\x47\x5b\x1b\x3c\xec\x3e\xd3\x3c\xe4\x5d\xb5\xc5\xf7\x1b\x69\x6d\xc3\x60\xed\x6b\x2a\xd0\xc0\x88\x29\x0b\x23\xa3\x03\x96\x28\x99\x3c\xb0\x73\x60\x83\x9c\xc8\xe8\xa8\x94\x7c\x93\x0c\xb1\x58\x5e\xd2\x53\xcb\x4e\x8c\xc6\xb6\x70\xfc\xb2\xbc\xae\x07\x2b\x49\xe4\xe3\x5e\xa2\xbc\x17\xd0\xaf\x7d\xdb\x8d\xac\x99\x04\xa7\x01\x0d\xa5\x0b\xa3\x44\x19\x87\x8e\x02\x46\x96\x85\x61\xe4\x83\x19\x84\x91\xc5\xcc\xf7\x76\x7b\x2f\xc5\x0a\xc1\xa7\x91\x1f\x14\x4f\x26\x13\x4d\xc7\x18\x03\xfb\x78\x7d\x73\xfb\x24\xc9\xb6\x4c\x8f\x82\xb3\xb9\x65\x67\xc0\x7a\x95\x97\x35\xdd\xea\x93\xd5\x32\x33\x83\x4d\x59\x53\xf3\xca\xdb\x16\x59\x54\x86\x8b\xe0\x49\x35\xcd\x6a\x7c\xec\xcf\xcb\x58\xea\x6c\x5f\x5a\x76\x26\xe5\x88\x44\xac\xf2\x5d\x50\x52\x3a\xd8\xc2\x88\xdd\x44\x89\x6f\xa3\xb6\xb0\x18\x5e\xf5\xfb\xc0\x72\x2d\x30\x95\x1a\x05\xdb\x56\xf6\x45\xe3\x2d\x55\x9a\x3a\x83\xc6\x09\x7c\xfc\x60\xc8\x9f\xd4\x9a\xfb\x07\x49\x52\x3e\x12\xd7\xd5\x27\xcb\xcd\xad\x6f\x21\x8d\x5f\x28\x06\x56\xd2\x00\x2b\x31\x29\x43\x01\xd2\x81\xe9\x06\x54\xc6\x1f\xad\x35\xb6\x45\xd4\xd1\x54\x49\x9d\xc5\xc0\x06\xc6\x90\x23\xcb\xc7\xbf\xaf\x1f\x1f\xe6\xcf\x6c\xdb\x6c\x00\x54\x0e\x0f\x1b\x32\x7d\xa0\x88\x75\xc2\x29\x03\x56\x25\xd6\xb7\x09\x59\x4b\xe3\x6e\x68\x14\x13\xa9\x85\x99\x54\x1d\xe0\xd6\x64\x99\xf2\x25\xbc\x28\x86\x79\x47\x5b\x4d\xe1\x23\xf5\x4b\x2a\x36\xdf\xa7\x3c\x2d\xba\x5c\x11\xf4\x7d\x81\xa6\x5c\xaa\x86\xea\xec\x96\x43\xf3\xfc\xf9\xa7\x25\xf9\xcb\xd4\xb1\xd1\x08\x9d\xe3\x19\x36\x08\x76\x2b\xa6\xa1\x14\x18\x43\xca\x95\x6b\xc0\xea\x9e\x3a\xdb\xd2\xa6\x3c\x13\x6c\xc8\x9d\x43\x4e\xa4\x93\x59\x78\xf1\x7f\x00\x00\x00\xff\xff\x3a\x18\x2a\x9f\xab\x1d\x00\x00")

func assetsJsDevicesJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsDevicesJs,
		"assets/js/devices.js",
	)
}

func assetsJsDevicesJs() (*asset, error) {
	bytes, err := assetsJsDevicesJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/devices.js", size: 7595, mode: os.FileMode(420), modTime: time.Unix(1547080048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesBoggartMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6a\x14\x41\x18\x85\xdf\x84\xb8\xe9\x8d\xe8\xda\xc5\xef\xc2\xa0\x68\xc5\xaa\x6e\x03\xa1\x66\x6a\x22\xc6\x04\xc4\x0c\x8e\xb1\x75\xff\x93\x29\x7b\x1a\xa7\xab\x9a\xaa\x6a\x51\xc8\x0d\x5c\x7b\x02\xaf\xe0\x46\x88\x1e\xc0\x55\x7b\x01\xcf\x22\xd3\x43\x0c\x79\xab\xef\xa3\x5e\x3d\xfe\xbf\xb7\xb7\xbf\x02\xc0\x16\x80\x3b\x00\x1e\x01\xb8\x01\x60\x82\x4d\xe6\x00\x6e\x02\x78\x0d\x60\x39\x02\x18\xc0\x2d\x00\xbf\x47\xc0\x08\x57\xd9\xba\x84\xc6\xba\x6e\xfb\x4d\xc3\x21\xd1\xd2\x37\x16\xa7\xb6\xf5\x21\x89\x59\xac\xea\x85\x78\xd6\x55\x51\x94\x5e\xd3\xc2\x7e\x7c\xfa\xa1\x5e\x72\xe3\x77\x43\x97\xcd\x5f\x95\xe2\x30\x58\x4e\xb5\x77\xe2\x39\x27\xab\x29\x97\x6a\x5f\xc8\x42\xe4\x05\xe5\x85\xde\xdb\x7b\x28\x0b\x29\xb3\x13\x8e\x49\x94\x81\x5d\x5c\x71\xf2\x41\xd3\xcb\x61\x83\x66\x5d\xe0\xc6\x2f\x3c\x4d\xae\x0d\x4f\xb3\x13\x76\x55\xc7\x95\x15\xa5\xe5\x46\xd3\x7f\xd7\x74\xda\xc5\x58\xb3\xcb\x66\x2f\x66\x47\xe2\x9d\x0d\xb1\xf6\x4e\x93\xda\x95\xd9\xa1\x77\xc9\xba\x24\xca\xcf\xad\xd5\x94\xec\xa7\xf4\xb8\x5d\x71\xed\xc6\x74\xb6\xe4\x10\x6d\x32\x6f\xcb\x63\xb1\x7f\xd5\x5b\xdf\xf3\xde\x06\x71\xe4\xce\xfc\xa2\x76\x95\xa6\x6c\xbe\xea\x02\xaf\xc4\xb1\x0f\x4d\xd4\xe4\xda\x41\xa3\x29\xc6\xb4\x41\xe3\xee\x29\x69\x8c\xa2\x9d\x1d\x5a\xa3\xbc\x6b\x94\xa2\x03\x92\xa4\x07\x9f\x9a\xfc\xf2\x69\x62\x9e\xac\xf1\xfe\x50\x9b\x28\x49\xe7\xe7\x9b\x2f\x53\x93\xcb\x07\x74\x40\x8a\x34\xe5\x63\xf4\xdf\xfa\x8b\xfe\xe7\x9f\x2f\xfd\x0f\xea\xbf\xf7\xbf\xfa\x0b\xfc\x0b\x00\x00\xff\xff\x6d\x20\x21\x24\xdc\x01\x00\x00")

func localesRuLc_messagesBoggartMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesBoggartMo,
		"locales/ru/LC_MESSAGES/boggart.mo",
	)
}

func localesRuLc_messagesBoggartMo() (*asset, error) {
	bytes, err := localesRuLc_messagesBoggartMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/boggart.mo", size: 476, mode: os.FileMode(420), modTime: time.Unix(1547080114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesDevicesMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x52\xc1\x6f\x1b\xc5\x17\xfe\xbc\x5d\xff\x7e\xc5\x90\x42\x0b\x15\x48\x80\x34\x20\x28\x20\xb4\x61\xd7\xa1\x52\xb4\x89\x53\x20\x4e\x50\x45\x0c\xa5\x35\x70\x65\x62\x4f\x9c\x55\xed\x5d\xb3\xb3\x1b\x81\x54\xa4\xc4\x41\xb4\x52\x54\x90\xaa\x22\x10\x07\xaa\x80\x90\x38\x9a\x36\x16\x4e\x53\xbb\x17\xc4\xf9\xcd\x91\x0b\x82\x23\x27\xf8\x03\x40\x42\xb3\xb3\x0d\x0d\x73\x98\x7d\xef\x9b\xef\x7d\xef\x9b\xb7\xf3\xcb\x31\xfb\x33\x00\x38\x0e\xe0\x31\x00\x3f\x02\x78\x1c\x40\xbb\x80\x6c\xfd\x5a\x00\xfe\x0f\xe0\xb7\x02\xf0\x3f\x00\xbf\x17\x80\x7b\x01\xfc\x99\xe3\x7f\x15\x80\xc3\x00\x6c\xcb\xe4\x13\x96\xe1\x1d\xb7\x80\xa2\xd6\xb4\x0c\xff\x49\x0b\xb0\x00\x4c\x5a\x40\x09\x80\x67\x01\xf7\x00\x98\xb5\x80\x07\x00\x2c\xe6\xbc\x77\x2c\xc0\x06\xd0\xb0\x80\x09\x00\xab\xb9\xde\x5a\x8e\x7f\x98\xeb\xf6\x72\xfe\x25\x0b\x58\x2d\x00\x57\x73\x9d\xbf\x0f\x01\x8f\x00\x38\x62\x9b\xfc\x19\x1b\x78\x08\xc0\xb4\x0d\x1c\x03\x50\xcb\xf1\x77\x6d\xe0\x08\x80\xf7\x6c\xe0\x3e\x00\xeb\x36\xf0\x30\x80\xcb\xb6\xf1\xf9\xad\x6d\xe6\xf0\x5d\x5e\xf7\x93\x6d\x66\xf4\xb3\x0d\x1c\x05\xf0\x87\x6d\x7c\x15\x8a\xc0\xa3\x00\x0e\x17\x8d\xce\x53\x45\x33\x0f\x2f\xcf\xfd\xa2\xb9\xef\xab\x45\x20\x1f\x69\xb6\x8e\xde\x15\x6b\x7f\xda\xcb\xa1\xfc\x3f\x14\xef\x3a\xd3\x3d\x1e\x84\xf1\xac\x97\x9e\x81\xbe\xf7\xfd\x30\xfa\x7a\xe6\xda\x9f\x9e\xa5\xee\xab\xbd\x4f\xe4\x5c\xdd\x17\x2f\x37\x92\x20\x0a\x25\xe6\xa3\x70\x25\x68\xa1\x2a\x64\x23\x0e\xba\x1a\x43\x55\xac\x05\x0d\x21\x51\x0d\x24\x5f\x6e\x8b\x26\x16\xc2\xfc\xbb\x26\xc2\x44\x62\x31\x88\x45\xb6\xcb\x84\xad\x04\xb1\x68\xe2\x74\x15\x4b\x7c\x3f\x5b\x0a\x64\x22\x42\x11\x4b\xd4\xde\xac\xd7\x99\x4c\x97\xb5\xf6\xf2\x3e\x90\x44\xdd\xa0\x21\xf1\x3a\xef\x08\x9c\x13\x71\xc0\xdb\x2c\x4c\x3b\xcb\x22\xc6\xb9\x84\x27\xa9\x44\x9d\xb7\xf4\x26\xcf\xe7\x3b\x6b\x44\x69\x98\xe0\xac\xe8\x46\x71\xe2\xd4\x64\x2b\x68\x3a\xaf\xa4\x2d\xe9\xd4\x23\x9f\x35\xc5\xda\x4b\xe7\x83\x55\xde\x89\x26\xe3\xb4\x74\xe6\x8d\xba\x33\x1f\x0b\xae\x2f\xe2\x54\x79\x22\x7c\x56\x76\xbd\x69\xc7\x9d\x72\xca\x53\xac\x3c\xe5\x9f\x3c\xf9\xbc\x3b\xe5\xba\x25\xed\xd7\xa9\xc7\x3c\x94\x6d\x9e\x44\xb1\xcf\x5e\xcb\x34\x58\x2d\x8d\x79\x27\x6a\x46\x6c\xf6\x80\xf0\x5c\x69\x89\x87\xad\x94\xb7\x84\x53\x17\xbc\xe3\xb3\xfd\xdc\x67\x67\x53\x29\x03\x1e\x96\x6a\xa7\x6b\x0b\xce\xdb\x22\x96\x41\x14\xfa\xcc\x9b\x74\x4b\xf3\x51\x98\x88\x30\x71\xea\x1f\x74\x85\xcf\x12\xf1\x7e\xf2\x42\xb7\xcd\x83\x70\x86\x35\x56\x79\x2c\x45\x52\x79\xab\xbe\xe8\x4c\xff\xcb\xd3\x7e\x56\x44\xec\x2c\x84\x8d\xa8\x19\x84\x2d\x9f\x95\xce\xb4\xd3\x98\xb7\x9d\xc5\x28\xee\x48\x9f\x85\xdd\x2c\x95\x95\xa9\x19\x66\xc2\x4a\xf8\xb4\xe7\x56\x2a\x1e\x3b\x71\x82\xe9\xd0\x7d\xa2\xe2\x79\xec\x14\x73\x99\x9f\xe5\x73\x95\xf2\x9d\xa3\xd9\xca\x8b\x3a\x7c\x36\xa3\xcd\x7a\x2e\xbb\x70\xc1\x94\xcc\x55\xca\xee\x73\xec\x14\xf3\x98\xcf\xca\x33\xa0\xab\x34\xa0\x5d\xb5\xa1\x7a\x74\x9d\x86\xea\x53\xd0\x97\x34\xa6\x91\xfa\x88\x86\x74\x43\x6d\xaa\x75\xea\xab\x8f\xcd\xc1\x57\x74\x9b\x86\x6a\x83\xfa\x34\xa2\x21\x0d\x40\xdf\xe8\x32\xb5\x4e\xe3\x7d\x81\x3e\xe8\x8a\xda\xa2\x9b\xb4\xa7\x3e\x51\x17\x69\x40\x23\x1a\x83\xae\xfc\x17\xd8\xa6\x31\x7d\xaf\xb6\x54\xcf\x08\xeb\x92\x1f\x68\x4c\xd7\xd5\x16\xe8\x1a\x0d\xd4\xba\x0e\x69\x97\x65\x9f\xec\x44\x3f\x3b\xba\x46\x63\xb5\x41\x7b\x34\xa0\x9d\xcc\xc2\x01\x02\x6d\xd3\x9e\xda\x54\x97\xa8\xaf\x7a\x34\xa0\x3d\x1a\x9a\x17\x48\xb7\x69\x4c\x3b\xb9\xf5\x9b\x77\x50\xd5\xa3\xb1\xc6\x32\x84\xbe\xa0\x5b\xda\xc7\x76\xd6\x7a\x48\xbb\x34\x32\xed\x47\x34\xa6\x5b\x1a\x04\x6d\xab\x9e\x56\x56\x9b\x6a\x03\xf4\xb5\xba\x4c\x37\x74\xe1\xe7\xd4\xa7\x1d\xea\xab\x8b\x07\x12\xfc\x13\x00\x00\xff\xff\x1a\x3a\x40\xec\x52\x05\x00\x00")

func localesRuLc_messagesDevicesMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesDevicesMo,
		"locales/ru/LC_MESSAGES/devices.mo",
	)
}

func localesRuLc_messagesDevicesMo() (*asset, error) {
	bytes, err := localesRuLc_messagesDevicesMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/devices.mo", size: 1362, mode: os.FileMode(420), modTime: time.Unix(1547080114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/devices.html":      templatesViewsDevicesHtml,
	"assets/js/devices.js":              assetsJsDevicesJs,
	"locales/ru/LC_MESSAGES/boggart.mo": localesRuLc_messagesBoggartMo,
	"locales/ru/LC_MESSAGES/devices.mo": localesRuLc_messagesDevicesMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"devices.js": &bintree{assetsJsDevicesJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"boggart.mo": &bintree{localesRuLc_messagesBoggartMo, map[string]*bintree{}},
				"devices.mo": &bintree{localesRuLc_messagesDevicesMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
