// Code generated by go-bindata.
// sources:
// templates/views/devices.html
// assets/js/devices.js
// locales/ru/LC_MESSAGES/boggart.mo
// locales/ru/LC_MESSAGES/devices.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xc1\x4e\xe3\x48\x10\xbd\xf3\x15\xa5\x96\x56\x82\x43\x6c\xe0\xb4\x5a\x85\x5c\x60\xd1\xae\x14\x46\x9a\x99\xcc\x79\xd4\x76\x97\xe3\x0a\x4e\xb7\xa7\xab\x92\x80\xac\xfc\xfb\xc8\x76\x42\x4c\xc6\x01\x9c\x31\x9c\xe6\x14\xdb\x5d\xf5\xde\xeb\xea\xaa\xa7\x4e\x51\x80\xc1\x84\x2c\x82\x8a\x9d\x15\xb4\xa2\x60\xbd\x3e\x39\x19\x1a\x5a\x42\x9c\x69\xe6\x2b\xe5\xdd\x4a\x01\x99\x2b\x65\x70\x49\x31\xb2\x1a\x9d\x00\x00\x34\x43\x1e\xbe\xe7\xda\x62\xb6\x59\xf9\x75\x55\x48\x32\x6c\xac\x56\x11\xe9\xe5\xa8\x28\x80\x2e\xfe\xb6\xa0\x6e\x36\xd0\x10\xc0\x7a\x3d\x0c\xd3\xcb\xbd\xd8\x06\x5a\x9c\xa1\xf6\x09\x3d\xa8\xd1\x30\x34\xb4\x6c\x50\xee\xbd\x3e\x53\xb0\xdd\xdd\x61\x5c\xd1\x51\x86\x03\x8f\x9c\x3b\xcb\xb4\xdc\x97\x5b\x85\x57\x31\xcf\x12\xa0\x4e\x63\xf1\x94\xa3\x01\x23\x0d\x04\xb0\x6e\xe5\x75\xae\x80\xe5\x31\xc3\x2b\xb5\x22\x23\xe9\x3f\x17\xe7\xe7\x7f\xb5\x60\xd7\xf8\x29\x6a\x73\x68\xcd\xb7\x2f\x6c\x12\xb7\xaa\xe6\x66\x10\xbb\x6c\x70\xa1\x76\xc5\x9d\x3c\xe6\xb8\xad\xac\xa4\x2f\xa2\x34\x92\xf4\x94\xdf\x98\xf4\x02\xf5\x57\xd1\xb2\xe8\x01\x67\xa2\xf9\x9e\x21\x76\x8b\xb2\x41\x7f\x17\xec\xee\xf3\x64\x02\xe2\x72\x8a\x7b\x50\x56\x81\xf1\x22\xe2\xd8\x53\x84\xfe\xad\x88\x8d\x12\xa1\x27\x9d\x81\x5d\xcc\x23\xf4\xc7\xe9\xb9\x6c\xe8\xf9\xff\xa6\xb3\x82\x1b\x2c\xc5\xe7\x42\xce\x1e\xd1\x26\x7c\xdf\x7d\xcf\xdd\x4f\xa0\xc7\x82\x5f\x3b\x9b\xd0\xf4\xb5\xb4\x61\x78\x68\xe0\xca\x9c\xd6\x31\x1d\x86\x95\x19\xec\x59\xcc\x41\x93\xda\x3c\x6e\x7e\xda\x2d\x37\x23\x16\xb4\xe5\x2e\xfb\x33\xdd\x21\x6d\x63\x12\x0d\x89\x1e\x18\xd4\x49\x69\xa6\x34\x82\xa7\x1a\x8d\x9f\x78\xff\x38\xf2\xb1\x8e\xbc\xeb\xb8\x4f\x7a\xde\xdd\x80\x8f\x18\xe4\x5b\xf2\xd8\x7d\x1e\x6e\xc9\xb3\x40\x42\x1e\x4d\xe7\xdc\xb1\x3e\x3a\xf5\xdf\x25\x5a\x79\x55\xed\x47\x8f\x61\x51\x00\x5a\x53\xdd\x81\x1a\x77\xa3\x92\xa8\xba\x18\x95\x09\x45\x01\x2c\x5a\x28\xfe\x6f\x72\x37\x86\xd3\xfa\xf9\xdb\x97\x31\xa8\xd0\x68\x4e\x23\xa7\xbd\x09\x35\x33\x0a\x87\x4b\xb4\xc6\x79\x0e\x8d\x16\x5d\xa9\xe2\xc0\xa2\x0c\x22\x0e\x63\xae\xbf\x4e\xea\xaf\x91\x73\xc2\xe2\x75\x1e\xcc\xc9\x06\x31\xb3\x82\x44\x67\x8c\x67\x3d\xb2\xee\xe6\x60\x2b\x60\xf7\xe5\x7d\x04\xa4\x34\x4d\x33\x9a\xa6\x32\xab\xf9\xc4\xcd\x9d\xf7\x6e\xd5\xc6\xd1\x5e\xf9\x19\xf7\x58\xf7\x70\xc6\xe1\xec\xc7\x02\xfd\x63\xd0\x28\x7d\xa9\x65\xf6\x1e\xf5\x8e\xb8\x24\x3c\x78\xc8\xef\xc2\xb9\x3b\xd1\x3d\xee\xc6\x51\x7f\x00\xf9\x66\xef\x07\xfb\xab\x1f\xfa\x66\x7b\xcd\x1a\xaf\x41\xae\xe3\xfb\xae\x3c\xa7\xb9\x27\x2b\xa0\x42\x05\xc1\xb5\x9b\xe7\xce\xa2\x95\xd2\xb9\x41\x6d\x79\xcb\x8a\xd6\x7f\x54\x4a\xe0\xb3\xb6\xe6\xfd\x19\x00\x00\xff\xff\x8b\xee\x8b\x33\x51\x0d\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 3409, mode: os.FileMode(420), modTime: time.Unix(1547153336, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsDevicesJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdf\x6f\xdb\x36\x10\x7e\xef\x5f\x71\xed\x02\x50\x42\x52\xb9\xc3\x30\x60\x50\xe2\xec\x61\xd9\x43\x81\x60\x2d\x90\xbc\x05\x45\x40\x89\x27\x99\x0d\x4d\x6a\x24\x15\xd7\x28\xfc\xbf\x0f\x94\xe4\x1f\x8a\xad\x1f\x8e\xec\x36\x01\xa6\x87\x20\x92\x8f\x1f\xef\xbe\xfb\xee\x8e\xe0\x89\xc7\x54\x9c\x4f\x51\x5a\x3f\xd0\x48\xd9\xdc\x4b\x72\x19\x5b\xae\x24\x78\x3e\x7c\x7f\x03\x00\xf0\x48\x35\x58\x1a\x09\xbc\xc2\x47\x1e\xa3\x81\x31\x9c\x78\xe4\x17\x56\xbd\x15\x3f\x11\xbf\x30\x75\x4f\x70\x45\x2d\xbd\x75\x1f\xbd\xef\xab\x8f\xee\xc9\x68\x8a\xd7\x28\x53\x3b\x09\xe1\xf7\x0f\x67\xb5\xdf\x04\x95\x69\x4e\x53\x0c\xa1\xbe\xc6\x3d\xb9\x16\x21\x90\x11\xa3\x66\x12\x29\xaa\xd9\x88\x51\x4b\x8b\x5d\xcd\x88\xff\xfa\x87\x0c\xbe\x1a\x25\x49\x6d\xd9\xa2\x8e\x4e\xbf\xd2\x6f\x2d\xc8\x91\x4a\x53\xaa\xed\xa8\x8a\x68\xf4\x27\x4a\xcb\xed\x7c\x5c\xbd\x93\xb3\xad\x85\xce\x83\x1b\x1d\x87\x40\xdc\x7f\xad\x7b\xc7\x4a\xe4\x53\x69\x42\xb8\xdb\x42\xd9\x76\x68\x89\x1d\x02\xb1\xf3\x0c\x77\xec\xbc\xd8\xfe\xd4\x0e\x43\xd3\x5d\x01\xb8\x47\xa3\x64\xa8\x43\x58\x67\xdc\x19\xfb\x0d\x78\x50\x29\x21\x56\xd2\xa2\xb4\x30\x06\x42\xce\xdf\x34\x9a\x26\x4a\x83\xe7\xec\x39\x70\x09\x5d\xc0\x50\x10\x55\x02\x9f\x8e\x81\x5c\x98\x8c\x4a\x88\x05\x35\x66\xfc\x4e\xd0\x08\x05\x14\x7f\xdf\x9b\x3c\x8e\xd1\x98\x77\x97\x04\x4e\x0b\xd4\x3b\xfe\x05\x4e\x81\x5c\x8c\xdc\x8a\x4b\x20\xe7\x8d\x7b\x2c\x9a\x9d\xd5\x68\x73\x2d\x97\x1e\xec\x86\x58\x0c\x4e\x85\xb1\xd4\xe6\xfd\x93\x51\x9a\xb7\xb1\x66\x66\xdc\xc6\x93\xca\x30\xb0\xea\x5a\xcd\x50\xff\x45\x0d\x7a\x7e\x27\xd9\xd4\x20\x10\x25\x05\x97\x48\xc2\x56\x53\x58\x13\xd4\x33\x2f\xa5\x43\x1b\x69\x69\x13\xca\x86\x37\x49\x72\x28\x77\x18\x95\x29\xea\x41\xde\x68\x9c\xaa\x47\x2e\xd3\x43\xb8\xc3\x65\xa2\x86\x3b\x83\xec\x10\xbe\xcc\xa8\x96\x5c\xa6\xcf\x74\x87\x61\x42\x73\x61\x0f\x91\xa2\x12\xa9\xd9\x8f\x26\xe4\xed\x42\xdc\xfd\x75\xff\x4e\x69\x1e\xf6\x69\x95\xe6\xa1\xb5\x38\x2b\x02\x0a\xbb\x40\x14\x63\xef\x58\x8d\x65\xfa\xaf\xb5\xf7\x56\x65\x3c\xde\xc3\xff\xc2\xbc\x4f\x00\x85\xe1\x8f\x88\xc0\xe4\x91\x89\x35\x8f\x50\xef\xd1\x24\xd7\x6b\x7a\xc4\xb2\x61\x7d\xe4\x80\x0c\x6a\x4e\xc5\xbd\xcc\xa7\x11\x6a\x32\x18\x8e\xb3\xe1\x18\x0c\x5d\xec\x99\xe3\x6d\x38\xd8\x81\x8b\x65\xc0\xc1\xa2\x03\xd9\x3d\x3c\x01\x8f\xc3\x25\x7c\xe8\x32\x84\xa7\xc7\x90\x48\xc3\xa8\xad\x17\x41\xfb\xb9\x62\x0b\xaf\x57\x53\x2e\x62\xaa\x9f\x6b\x5e\xf2\xb1\xe6\x38\xdd\xe7\xf9\x8a\xe8\x84\x86\x57\x21\x89\x4c\xf3\x29\xd5\xf3\x4a\x12\x45\x50\xaf\x4c\x13\x47\xec\xe7\xcf\x56\x47\x4f\x7c\x78\x15\x12\xd9\x38\x56\xae\xc3\x7a\x3d\x22\x89\x95\x4c\x78\xda\x5b\x1a\xa5\x79\x8f\x29\x4f\x2e\x32\x8d\x97\x17\xb1\x62\xb8\x64\x6d\x4e\xa7\xa2\x64\xaa\x44\x29\x19\x72\x16\x97\x17\x23\x67\xdd\xc0\xd3\x8e\x20\x6b\x5f\xbe\xac\xde\x16\x7e\xa5\xc1\xd5\x6d\xc9\x35\x37\x16\x25\xea\xe5\x7d\x89\x58\xbd\xf7\xbe\x31\x79\x91\xb7\x22\xab\x38\x7e\xce\xbd\x88\xa4\x53\x7c\x19\x07\xaa\x84\x6b\x34\x87\x81\xb9\x4f\xb8\x36\xb6\x77\x29\x30\x6a\xb1\xad\x10\x5c\xeb\x7a\xdb\x65\x04\x1b\x15\x33\xa8\x4d\xb8\x8d\x6e\xd5\x8d\xd5\x5c\xa6\xa5\x6b\xc7\xea\x18\x05\x55\x82\xfe\xcf\x14\x74\x31\x85\x8f\x28\x6d\xff\xb1\xeb\x56\x1d\x7a\xde\x16\x2e\x7c\x64\x6e\xea\x76\xc1\xc3\xfe\x13\xcf\x41\xde\x55\x5b\xfc\xbc\x1b\xc0\xae\x61\xb0\x75\x4f\x0e\x36\x52\x6c\x4e\xfc\x40\x49\x8f\xc4\x82\xc7\x0f\xe4\x0c\x48\x94\x5b\xab\x64\x50\x5a\xbe\x8f\x27\x58\x7c\x5e\xa7\xa7\xa6\x4e\x0c\x32\x5d\x04\x7e\x55\xde\xa0\x78\x1b\x22\x72\xbc\x97\x28\x1f\x19\x8c\x6b\xb7\xf6\x81\x56\x33\xef\xc4\xb3\x13\x6e\xfc\x20\x16\xca\xa0\xb1\x1e\xb1\x9a\xf8\x7e\xe0\xc8\xf4\xfc\x40\x63\xea\x7a\xbb\xbe\xe7\x6c\x23\xc1\x27\x81\x1b\x14\x4f\x26\x93\x9d\x67\x18\x02\xf9\xfc\xe9\xe6\xf6\x89\xc8\x1a\xa6\x47\x91\xb3\xa5\x67\xa7\x40\x46\x55\x94\xb5\xb5\xd5\x2d\xe2\x5a\x99\xde\x2e\xd5\xd4\xa2\x72\xbe\x05\x1a\x85\xa2\xcc\x7b\x52\x4d\x8b\x5a\x3e\x86\xe7\x25\xe3\x32\x1d\x9a\x96\xbd\x93\x72\xc4\x44\x6c\xe6\xbb\x48\x49\x19\x60\x47\x46\xf4\xae\x94\xb8\x36\xaa\x0b\x8f\xe1\xed\x78\x0c\x24\x97\x0c\x13\x2e\x91\x91\xa6\xb2\x2f\x1a\x6f\xb9\xa4\xad\x33\x48\x9c\xc1\xe7\x7f\x94\xe5\xc9\xdc\x6b\xef\x1f\x96\x5b\xe1\x98\xf8\x54\xdd\x22\xef\x6e\x7d\x2b\x6b\xfc\x66\x43\x20\x65\x1a\x60\x83\x93\x92\x0a\xe0\x06\x54\x3f\xa0\x92\x7f\xd4\x5a\xe9\x0e\x53\x63\xe7\x82\xcb\x34\x04\x12\x29\x65\x8d\xd5\x34\xfb\x6d\xfb\xf8\xb0\x7c\x16\x4d\xb3\x01\x50\x18\x3c\x2c\x65\xf2\x40\x8c\xf5\xc2\x29\x09\xab\x84\xf5\x63\x28\xeb\x68\xdc\x2d\x8d\x62\xc6\x25\x53\xb3\xaa\x03\xdc\xaa\x34\x15\xae\x84\x57\xc5\xb0\xec\x68\x9b\x12\x3e\x52\xbf\xb4\xc5\xe6\x43\xca\x53\xa3\xc9\x85\x85\xb1\x2b\xd0\x84\x72\xd1\x52\x9d\xfd\x34\xb4\xd4\xcf\xdf\x1d\xe2\x2f\xa5\xa3\x83\x29\x1a\x43\x53\x6c\x31\xec\x57\x4c\x13\xce\x30\x84\x84\x0a\xd3\x82\xd5\x5f\x3a\x4d\xb2\x29\xcf\x04\x3b\xb4\x73\xc8\x89\xf4\x66\xe1\x9f\xff\x17\x00\x00\xff\xff\x1e\x19\x79\xf0\x85\x1f\x00\x00")

func assetsJsDevicesJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsDevicesJs,
		"assets/js/devices.js",
	)
}

func assetsJsDevicesJs() (*asset, error) {
	bytes, err := assetsJsDevicesJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/devices.js", size: 8069, mode: os.FileMode(420), modTime: time.Unix(1547152683, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesBoggartMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6a\x14\x41\x18\x85\xdf\x84\xb8\xe9\x8d\xe8\xda\xc5\xef\xc2\xa0\x68\xc5\xaa\x6e\x03\xa1\x66\x6a\x22\xc6\x04\xc4\x0c\x8e\xb1\x75\xff\x93\x29\x7b\x1a\xa7\xab\x9a\xaa\x6a\x51\xc8\x0d\x5c\x7b\x02\xaf\xe0\x46\x88\x1e\xc0\x55\x7b\x01\xcf\x22\xd3\x43\x0c\x79\xab\xef\xa3\x5e\x3d\xfe\xbf\xb7\xb7\xbf\x02\xc0\x16\x80\x3b\x00\x1e\x01\xb8\x01\x60\x82\x4d\xe6\x00\x6e\x02\x78\x0d\x60\x39\x02\x18\xc0\x2d\x00\xbf\x47\xc0\x08\x57\xd9\xba\x84\xc6\xba\x6e\xfb\x4d\xc3\x21\xd1\xd2\x37\x16\xa7\xb6\xf5\x21\x89\x59\xac\xea\x85\x78\xd6\x55\x51\x94\x5e\xd3\xc2\x7e\x7c\xfa\xa1\x5e\x72\xe3\x77\x43\x97\xcd\x5f\x95\xe2\x30\x58\x4e\xb5\x77\xe2\x39\x27\xab\x29\x97\x6a\x5f\xc8\x42\xe4\x05\xe5\x85\xde\xdb\x7b\x28\x0b\x29\xb3\x13\x8e\x49\x94\x81\x5d\x5c\x71\xf2\x41\xd3\xcb\x61\x83\x66\x5d\xe0\xc6\x2f\x3c\x4d\xae\x0d\x4f\xb3\x13\x76\x55\xc7\x95\x15\xa5\xe5\x46\xd3\x7f\xd7\x74\xda\xc5\x58\xb3\xcb\x66\x2f\x66\x47\xe2\x9d\x0d\xb1\xf6\x4e\x93\xda\x95\xd9\xa1\x77\xc9\xba\x24\xca\xcf\xad\xd5\x94\xec\xa7\xf4\xb8\x5d\x71\xed\xc6\x74\xb6\xe4\x10\x6d\x32\x6f\xcb\x63\xb1\x7f\xd5\x5b\xdf\xf3\xde\x06\x71\xe4\xce\xfc\xa2\x76\x95\xa6\x6c\xbe\xea\x02\xaf\xc4\xb1\x0f\x4d\xd4\xe4\xda\x41\xa3\x29\xc6\xb4\x41\xe3\xee\x29\x69\x8c\xa2\x9d\x1d\x5a\xa3\xbc\x6b\x94\xa2\x03\x92\xa4\x07\x9f\x9a\xfc\xf2\x69\x62\x9e\xac\xf1\xfe\x50\x9b\x28\x49\xe7\xe7\x9b\x2f\x53\x93\xcb\x07\x74\x40\x8a\x34\xe5\x63\xf4\xdf\xfa\x8b\xfe\xe7\x9f\x2f\xfd\x0f\xea\xbf\xf7\xbf\xfa\x0b\xfc\x0b\x00\x00\xff\xff\x6d\x20\x21\x24\xdc\x01\x00\x00")

func localesRuLc_messagesBoggartMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesBoggartMo,
		"locales/ru/LC_MESSAGES/boggart.mo",
	)
}

func localesRuLc_messagesBoggartMo() (*asset, error) {
	bytes, err := localesRuLc_messagesBoggartMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/boggart.mo", size: 476, mode: os.FileMode(420), modTime: time.Unix(1547153341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesDevicesMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x52\xcf\x6f\x1b\x45\x14\xfe\xb2\xac\xa1\x98\xf2\xa3\xa5\x14\x24\xa8\x34\x08\xb5\x02\xc1\x96\xb5\x4d\xa5\xb2\x89\x53\x4a\x9c\x48\x15\x31\x2d\xad\xe9\x89\xcb\xd8\x9e\x38\xab\xda\xbb\xd6\xce\x6e\x54\xa4\x1c\x12\x07\xb5\x48\x51\x41\x8a\xa8\xa8\x38\x50\x25\x70\xe1\x66\xda\x58\x38\x49\xed\xfc\x03\x1c\xde\x9c\x91\xf8\x13\x10\x1c\xb9\xa1\xd9\xd9\x06\xc2\x1c\x66\xe6\x7d\xf3\xbd\xef\x7d\xf3\x66\x7e\x3f\x6e\xdf\x05\x80\x93\x00\x5e\x03\xf0\x2b\x80\x53\x00\x96\x27\x90\x8e\x3f\x27\x80\xa7\x00\xfc\x35\x01\x3c\x09\xe0\xef\x09\xe0\x19\x7d\x60\x19\xfc\xa8\x05\x1c\x01\x70\x22\x8b\x4f\x59\x86\x77\xda\x02\x72\x00\xde\xb1\x0c\xbf\x68\xa5\x29\x98\xb6\x80\x3c\x80\x8b\x16\xf0\x34\x80\x79\x0b\x78\x01\xc0\xf5\x8c\xd7\xb2\x00\x1b\x80\xb4\x80\x67\x01\xdc\xcc\xf4\x6e\x65\xf8\x9d\x4c\x77\x23\xe3\xdf\xcb\xf0\x1f\x2d\x60\x71\x02\xf8\x29\xd3\x3b\x6e\x03\xaf\x00\x78\xc3\x36\xf1\x94\x0d\x9c\x00\x50\xb5\x81\xe3\x00\xea\x19\x9e\xd8\xc0\x73\x5a\xdf\x06\x8e\x02\xb8\x6b\x03\x2f\x03\xd8\xb2\x8d\xdf\x5d\xdb\xf4\x63\x94\xe5\xfd\x66\x03\x2f\x01\xf8\xc3\x06\x8e\x01\xb0\x73\xc6\xdf\xc9\x1c\xf0\xaa\xbe\x7f\xce\xe8\xbc\x9f\x33\x7d\x99\xcb\xe2\xcb\x39\x73\xef\xcf\x32\x7e\x2b\x07\x64\x2d\x4e\xc7\xb1\x6c\xd5\xef\xa0\x7d\x6a\x4f\x4f\xc0\xd4\xca\xfd\x87\xa7\x73\x5f\x84\xf1\xae\x87\xbe\xbb\xee\xc3\xf3\x30\x75\xf4\x1b\x68\x9f\xba\xb7\x47\xcc\x33\xa5\x7d\xd4\x43\xd7\xc7\xc5\x46\xec\x87\x81\xc4\x4c\x18\x2c\xf8\x2d\x54\x84\x6c\x44\x7e\x57\x63\xa8\x88\x25\xbf\x21\x24\x2a\xbe\xe4\xf5\xb6\x68\x62\x36\xc8\xd6\x25\x11\xc4\x12\x73\x7e\x24\xd2\x59\xc6\x6c\xc1\x8f\x44\x13\x97\x2a\x98\xe7\x07\xd1\xbc\x2f\x63\x11\x88\x48\xa2\xfa\x49\xad\xc6\x64\x52\xd7\xda\xf5\x03\x20\x0e\xbb\x7e\x43\xe2\x63\xde\x11\xb8\x26\x22\x9f\xb7\x59\x90\x74\xea\x22\xc2\xb5\x98\xc7\x89\x44\x8d\xb7\xf4\x24\x6f\x64\x33\x6b\x84\x49\x10\xa3\xf6\x79\x57\xe0\xaa\xe8\x86\x51\xec\x54\x65\xcb\x6f\x3a\x1f\x26\x2d\xe9\xd4\x42\x8f\x35\xc5\xd2\x07\x37\xfc\x45\xde\x09\xcf\x46\x49\xfe\xca\xe5\x9a\x33\x13\x09\xae\x6f\xe3\x54\x78\x2c\x3c\x56\x74\x0b\xe7\x1d\xb7\xe4\x14\x4b\xac\x58\xf2\xce\x9d\x7b\xdb\x2d\xb9\x6e\x5e\x9b\x76\x6a\x11\x0f\x64\x9b\xc7\x61\xe4\xb1\x8f\x52\x0d\x56\x4d\x22\xde\x09\x9b\x21\x9b\x3a\x24\x3c\x9d\x9f\xe7\x41\x2b\xe1\x2d\xe1\xd4\x04\xef\x78\xec\x20\xf6\xd8\xd5\x44\x4a\x9f\x07\xf9\xea\xa5\xea\xac\x73\x5d\x44\xd2\x0f\x03\x8f\x15\xce\xba\xf9\x99\x30\x88\x45\x10\x3b\xda\xbe\xc7\x62\x71\x33\x7e\xb7\xdb\xe6\x7e\x30\xc9\x1a\x8b\x3c\x92\x22\x2e\x7f\x5a\x9b\x73\xce\xff\xcb\xd3\x7e\x16\x44\xe4\xcc\x06\x8d\xb0\xe9\x07\x2d\x8f\xe5\xaf\xb4\x93\x88\xb7\x9d\xb9\x30\xea\x48\x8f\x05\xdd\x34\x94\xe5\xd2\x24\x33\xdb\x72\x70\xba\xe0\x96\xcb\x05\x76\xe6\x0c\xd3\x5b\xf7\xf5\x72\xa1\xc0\x2e\x30\x97\x79\x69\x3c\x5d\x2e\x3e\x3e\x9a\x2a\xbf\xa7\xb7\x6f\xa6\xb4\xa9\x82\xcb\x96\x97\x4d\xca\x74\xb9\xe8\xbe\xc5\x2e\xb0\x02\xf3\x58\x71\x12\xf4\x0d\x0d\x68\x47\xad\xaa\x1e\x3d\xa0\xa1\xfa\x1a\xf4\x1d\x8d\x69\xa4\xbe\xa0\x21\x3d\x54\x6b\x6a\x85\xfa\xea\x96\x39\xf8\x9e\xf6\x69\xa8\x56\xa9\x4f\x23\x1a\xd2\x00\xf4\x83\x4e\x53\x2b\x34\x3e\x10\xe8\x83\x36\xd4\x3a\xed\xd2\x9e\xfa\x4a\xdd\xa6\x01\x8d\x68\x0c\xda\xf8\x3f\xb0\x49\x63\xfa\x59\xad\xab\x9e\x11\xd6\x29\xbf\xd0\x98\x1e\xa8\x75\xd0\x7d\x1a\xa8\x15\xbd\xa5\x1d\x96\x2e\xe9\x89\xfe\x7b\x74\x9f\xc6\x6a\x95\xf6\x68\x40\xdb\xa9\x85\x43\x04\xda\xa4\x3d\xb5\xa6\xbe\xa4\xbe\xea\xd1\x80\xf6\x68\x68\xbe\x21\xed\xd3\x98\xb6\x33\xeb\xbb\x8f\x51\xd5\xa3\xb1\xc6\x52\x84\xee\xd1\x23\xed\x63\x33\x2d\x3d\xa4\x1d\x1a\x99\xf2\x23\x1a\xd3\x23\x0d\x82\x36\x55\x4f\x2b\xab\x35\xb5\x0a\xda\x52\x77\xe8\xa1\x4e\xfc\x96\xfa\xb4\x4d\x7d\x75\xfb\x50\x00\xda\xa2\x21\xed\xe3\x9f\x00\x00\x00\xff\xff\xde\x09\x7a\x2e\x6e\x05\x00\x00")

func localesRuLc_messagesDevicesMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesDevicesMo,
		"locales/ru/LC_MESSAGES/devices.mo",
	)
}

func localesRuLc_messagesDevicesMo() (*asset, error) {
	bytes, err := localesRuLc_messagesDevicesMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/devices.mo", size: 1390, mode: os.FileMode(420), modTime: time.Unix(1547153341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/devices.html":      templatesViewsDevicesHtml,
	"assets/js/devices.js":              assetsJsDevicesJs,
	"locales/ru/LC_MESSAGES/boggart.mo": localesRuLc_messagesBoggartMo,
	"locales/ru/LC_MESSAGES/devices.mo": localesRuLc_messagesDevicesMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"devices.js": &bintree{assetsJsDevicesJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"boggart.mo": &bintree{localesRuLc_messagesBoggartMo, map[string]*bintree{}},
				"devices.mo": &bintree{localesRuLc_messagesDevicesMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
