// Code generated by go-bindata.
// sources:
// templates/views/devices.html
// assets/js/devices.js
// locales/ru/LC_MESSAGES/boggart.mo
// locales/ru/LC_MESSAGES/devices.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x41\x6f\x1a\x3d\x10\xbd\xe7\x57\x8c\x2c\x7d\x52\x72\x00\x27\x39\x7d\xaa\x08\x97\xa4\x51\x2b\x91\x4a\x6d\xe9\xb9\xf2\xae\x67\xc3\x90\xc5\xde\x7a\x06\x92\x68\xc5\x7f\xaf\xbc\x40\xd8\x50\x20\x59\xba\xc9\xa9\x27\x16\x7b\xe6\xcd\x9b\x67\xcf\x93\xcb\x12\x2c\x66\xe4\x10\x54\xea\x9d\xa0\x13\x05\xf3\xf9\xd1\x51\xcf\xd2\x0c\xd2\xdc\x30\x5f\xa8\xe0\xef\x15\x90\xbd\x50\x16\x67\x94\x22\xab\xfe\x11\x00\x40\x3d\xe4\xe1\x67\x61\x1c\xe6\xcb\x9d\x3f\x77\x85\x24\xc7\xda\x6e\x15\x31\x3a\xef\x97\x25\xd0\xd9\xff\x0e\xd4\xd5\x12\x1a\xba\x30\x9f\xf7\xf4\xe8\x7c\x23\xb6\x86\x96\xe6\x68\x42\x46\x0f\xaa\xdf\xd3\x96\x66\xb5\x92\x1b\x7f\x9f\x31\x58\x75\xb7\x1b\x57\x4c\x92\x63\x27\x20\x17\xde\x31\xcd\x36\xe9\x56\xe1\x55\xcc\xb3\x04\x58\xa4\xb1\x04\x2a\xd0\x82\x95\x1a\x02\x38\x7f\x1f\x4c\xa1\x80\xe5\x31\xc7\x0b\x75\x4f\x56\x46\x1f\xce\x4e\x4f\xff\xdb\x82\xbd\xc0\x1f\xa1\xb1\xbb\xf6\xc2\xf6\x8d\x65\xe2\x8a\xd5\xc4\x76\x52\x9f\x77\xce\xd4\x5a\xdc\xe1\x63\x81\x2b\x65\x65\xb4\x17\xa5\x96\x64\x6e\xf9\x95\x49\x7b\x4a\x7f\x17\x23\xd3\x16\x70\x86\x86\xef\x18\x52\x3f\x8d\x17\xf4\x6f\xc1\x6e\xbe\x0e\x87\x20\xbe\xa0\xb4\x05\x66\x15\x18\x4f\x13\x4e\x03\x25\x18\x5e\x8b\x58\x93\x08\x03\x99\x1c\xdc\x74\x92\x60\x38\x8c\xcf\x79\x8d\xcf\xe7\xab\xc6\x0c\xae\x30\x92\x2f\x84\xbc\x3b\xe0\x9a\xf0\x5d\xf3\x9e\x9b\x9f\x40\x8b\x82\x5f\x7a\x97\xd1\xed\x4b\x69\x3d\xbd\x6b\xe0\x62\xce\xd6\x31\xed\xe9\xca\x0c\x36\x2c\x66\xa7\x49\x2d\x3f\x97\x3f\xdb\x2d\x37\x27\x16\x74\xb1\xcb\xf6\x4c\xb7\x47\xab\x98\xcc\x40\x66\x3a\x16\x4d\x16\xcd\x94\xfa\xf0\xa4\xd1\xe0\xa9\xee\x3f\x47\x3e\xd4\x91\xd7\x37\xee\x8b\x99\x34\x37\xe0\x03\x06\xf9\x9a\x02\x36\x9f\x87\x6b\x0a\x2c\x90\x51\x40\xdb\x38\x77\x60\x0e\x4e\xfd\x38\x43\x27\x2f\xb2\x7d\xef\x31\x2c\x4b\x40\x67\xab\x37\x50\xed\x6d\x14\x0b\x55\x0f\xa3\x98\x50\x96\xc0\x62\x84\xd2\x4f\xc3\x9b\x01\x1c\x2f\xbe\x7f\x7c\x1b\x80\xd2\xd6\xf0\x28\xf1\x26\x58\x6d\x98\x51\x58\xcf\xd0\x59\x1f\x58\x5b\x23\xa6\x62\xc5\x5d\x87\xd2\x49\x58\xa7\xbc\x58\x1d\x2e\x56\x13\xef\x85\x25\x98\xa2\x3b\x21\xd7\x4d\x99\x15\x64\x26\x67\x3c\x69\xb1\xea\x7a\x0e\x56\x04\xd6\x2b\xfb\x09\x6c\x57\x65\xcc\x2d\x6a\xa2\xc7\xac\xc7\xbf\xa6\x18\x1e\xbb\x35\x59\x22\x97\xf1\x5b\x68\x91\x70\x2c\xb8\xf3\x00\xde\xa4\xe6\x5a\xed\x8d\xda\xb5\x63\x78\x87\xe2\xcb\xde\x77\x9e\x7d\x83\xf2\xc7\x45\x20\x27\xa0\xb4\x82\xee\xa5\x9f\x14\xde\xa1\x93\xe8\x76\xa0\x56\x74\x62\xa7\x8b\xc7\x7d\x04\x3e\xd9\x76\xa9\x7e\x07\x00\x00\xff\xff\xf9\xb3\x68\x41\x85\x0c\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 3205, mode: os.FileMode(420), modTime: time.Unix(1547080975, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsDevicesJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xb8\x76\x01\x28\x21\xa9\xbc\x61\x18\x30\x28\x75\xf7\xb0\xec\xa1\x43\xd0\x14\x48\xde\x82\x22\xa0\xc5\x93\xcc\x86\x26\x3d\x92\x8a\x6b\x14\xfe\xee\x03\x29\xf9\x8f\x62\x5b\x92\x23\xb9\x6d\x80\xea\x21\x88\xe8\xbb\x1f\xef\xee\x77\x7f\x48\x9d\x06\x4c\x25\xf9\x04\xa5\x0d\x23\x8d\x94\xcd\x83\x34\x97\x89\xe5\x4a\x42\x10\xc2\xd7\x13\x00\x80\x47\xaa\xc1\xd2\x91\xc0\x4b\x7c\xe4\x09\x1a\x18\xc2\x69\x40\x7e\x61\xe5\x9b\xff\x89\x84\x5e\xd4\x3d\xd1\x25\xb5\xf4\xd6\x2d\x06\x5f\x57\x8b\xee\x99\xd2\x0c\xaf\x50\x66\x76\x1c\xc3\x1f\xbf\x9e\x57\x7e\x13\x54\x66\x39\xcd\x30\x86\xaa\x8e\x7b\x72\x2d\x62\x20\x03\x46\xcd\x78\xa4\xa8\x66\x03\x46\x2d\xf5\xbb\x9a\x01\xff\xed\x4f\x19\x7d\x36\x4a\x92\x8a\xda\xa2\x8a\x4e\x3f\xd3\x2f\x35\xc8\x23\x95\x65\x54\xdb\x41\xe9\xd1\xe0\x2f\x94\x96\xdb\xf9\xb0\x7c\x27\xe7\x5b\x8a\xce\x82\x1b\x9d\xc4\x40\xdc\x7f\xb5\x7b\x27\x4a\xe4\x13\x69\x62\xb8\xdb\x42\xd9\x36\x68\x89\x1d\x03\xb1\xf3\x29\xee\xd8\x79\xb1\xbd\x54\x0f\x43\xb3\x5d\x0e\xb8\x47\xa3\x64\xa8\x63\x58\x33\xee\x84\xc3\x3d\x78\x50\x66\x42\xa2\xa4\x45\x69\x61\x08\x84\x5c\x9c\xec\x15\x4d\x95\x86\xc0\xc9\x73\xe0\x12\x9a\x80\xc1\x07\xaa\x00\x3e\x1b\x02\x79\x6b\xa6\x54\x42\x22\xa8\x31\xc3\xd7\x82\x8e\x50\x80\xff\xfb\xc6\xe4\x49\x82\xc6\xbc\x7e\x47\xe0\xcc\xa3\xde\xf1\x4f\x70\x06\xe4\xed\xc0\x69\xbc\x03\x72\xb1\x77\x8f\xc5\x7e\x63\x35\xda\x5c\xcb\xa5\x05\xbb\x21\x16\x9d\xa9\x30\x96\xda\xbc\x3d\x19\x85\x78\x5d\xd4\xcc\x8c\xdb\x64\x5c\x0a\x46\x56\x5d\xa9\x19\xea\xbf\xa9\xc1\x20\x6c\x0c\x36\x35\x08\x44\x49\xc1\x25\x92\xb8\x56\x14\xd6\x01\x6a\xc9\x4b\x61\xd0\x06\x2d\x75\x89\xb2\x61\x4d\x9a\xf6\x65\x0e\xa3\x32\x43\xdd\xc9\x1a\x8d\x13\xf5\xc8\x65\xd6\x87\x39\x5c\xa6\xaa\xbb\x31\xc8\xfa\xb0\x65\x46\xb5\xe4\x32\x7b\xa6\x39\x0c\x53\x9a\x0b\xdb\x07\x45\x05\xd2\x7e\x3b\xf6\x21\x6f\x17\xe2\xee\xd5\xc3\x3b\xa5\x79\x38\xa4\x55\x9a\x87\xda\xe2\x2c\x03\xe0\xe5\x22\xe1\xc7\xde\xb1\x1a\xcb\xe4\x3f\x6b\xef\xad\x9a\xf2\xe4\x00\xfb\xbd\x78\x1b\x07\xbc\xe0\xb7\xf0\xc0\xe4\x23\x93\x68\x3e\x42\x7d\x40\x93\x5c\xeb\xb4\xf0\x65\x43\xfa\xc8\x0e\x19\xd4\x9c\x8a\x7b\x99\x4f\x46\xa8\x49\x67\x38\xce\xba\x63\x30\x74\xbe\x4f\x5d\xdc\xba\x83\xf5\x5c\x2c\x1d\x0e\x16\x0d\xc8\xd0\xf6\x64\x51\xe9\x8b\x1e\xf6\x05\x1d\x2d\x8e\xd3\x01\x9e\xcf\x4a\x23\x34\xb4\xa5\x65\xaa\xf9\x84\xea\x79\x49\x8b\xc7\x7d\x69\xbc\x1c\xb1\xaf\x3d\x9b\xa1\x96\xf8\xd0\x96\xa6\x8d\x13\xce\x1a\xf9\x05\x11\x95\x28\x99\xf2\xac\x35\x3d\x85\x78\x8b\x89\xf3\xef\xcd\xf5\x87\xc8\x58\xcd\x65\xc6\xd3\xf9\x52\xaf\xb5\x17\x95\x95\x4f\xab\xb7\x45\x58\x12\xbd\xba\x9a\x5f\x71\x63\x51\xa2\x5e\x5e\xce\xc5\xea\xbd\xf5\xf5\xfc\x87\xbc\x82\xaf\xfc\xf8\x3e\x97\x70\x49\x27\xf8\x63\x4c\xef\x94\x6b\x34\xfd\xc0\xdc\xa7\x5c\x1b\xdb\x3a\xd7\x19\xb5\x58\x97\xe9\x3c\x85\xe0\x55\x93\x10\x6c\x5c\x09\x3a\xf5\x01\xb7\xd1\xad\xba\xf1\x15\x55\x98\x76\xac\x96\xe0\x43\x25\xe8\xcf\x48\x41\x53\xa4\xf0\x11\xa5\x6d\x3f\xdb\x9c\x56\xdf\x43\xcd\x9b\xf0\x9e\xb9\xd1\xd6\x04\x0f\x87\xcf\x34\x07\x79\x57\x6e\xf1\xfd\x46\x5a\xd3\x30\xd8\xfa\x28\x0b\x76\xa4\xd8\x9c\x84\x91\x92\x01\x49\x04\x4f\x1e\xc8\x39\x90\x51\x6e\xad\x92\x51\x21\xf9\x26\x19\xa3\x5f\x5e\xd3\x53\xc9\x4e\x8c\xa6\xda\x3b\x7e\x59\x5c\xd7\x83\x8d\x24\x72\x71\x2f\x50\xde\x33\x18\x56\x3e\x11\x47\x5a\xcd\x82\xd3\xc0\x8e\xb9\x09\xa3\x44\x28\x83\xc6\x06\xc4\x6a\x12\x86\x91\x0b\x66\x10\x46\x1a\x33\xd7\xdb\xf5\x3d\x67\x1b\x04\x9f\x46\x6e\x50\x3c\x99\x4c\x76\x3e\xc5\x18\xc8\xc7\xeb\x9b\xdb\x27\x49\xb6\x67\x7a\x78\xce\x96\x96\x9d\x01\x19\x94\x5e\x56\x74\xcb\x4f\x56\xeb\xcc\x0c\x76\x65\x4d\xc5\x2b\x67\x5b\xa4\x51\x28\xca\x82\x27\xd5\xb4\xa8\xf0\xd1\x9d\x97\x29\x97\x59\x57\x5a\x0e\x26\xe5\x88\x44\x6c\xf2\xed\x29\x29\x1c\x6c\x60\x44\xef\xa2\xc4\xb5\x51\xed\x2d\x86\x57\xc3\x21\x90\x5c\x32\x4c\xb9\x44\x46\xf6\x95\xbd\x6f\xbc\x85\x4a\x5d\x67\x90\x38\x83\x8f\x1f\x94\x75\x27\xb5\xfa\xfe\x61\xb9\x15\x2e\x12\xd7\xe5\x27\xcb\xdd\xad\x6f\x25\x8d\x5f\x6c\x0c\xa4\xa0\x01\x36\x62\x52\x84\x02\xb8\x01\xd5\x0e\xa8\x88\x3f\x6a\xad\x74\x83\xa8\xb1\x73\xc1\x65\x16\x03\x19\x29\x65\x8d\xd5\x74\xfa\xfb\xf6\xf1\x61\xf9\x2c\xf6\xcd\x06\x40\x61\xb0\xdf\x90\xc9\x9e\x22\xd6\x0a\xa7\x08\x58\x99\x58\xdf\x26\x64\x0d\x8d\xbb\xa6\x51\xcc\xb8\x64\x6a\x56\x76\x80\x5b\x95\x65\xc2\x95\xf0\xaa\x18\x96\x1d\x6d\x33\x85\x8f\xd4\x2f\xad\xdf\xbc\x4b\x79\x6a\x34\xb9\xb0\x30\x74\x05\x9a\x52\x2e\x6a\xaa\xb3\x5d\x0e\x2d\xf3\xe7\x9f\x86\xe4\x2f\x52\x47\x47\x13\x34\x86\x66\x58\x23\xd8\xae\x98\xc6\x9c\x61\x0c\x29\x15\xa6\x06\xab\x7d\xea\xec\x4b\x9b\xe2\x4c\xb0\x23\x77\xfa\x9c\x48\x27\x8b\xf0\xe2\xff\x00\x00\x00\xff\xff\xed\xdf\x4a\xfa\xf2\x1d\x00\x00")

func assetsJsDevicesJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsDevicesJs,
		"assets/js/devices.js",
	)
}

func assetsJsDevicesJs() (*asset, error) {
	bytes, err := assetsJsDevicesJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/devices.js", size: 7666, mode: os.FileMode(420), modTime: time.Unix(1547080909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesBoggartMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6a\x14\x41\x18\x85\xdf\x84\xb8\xe9\x8d\xe8\xda\xc5\xef\xc2\xa0\x68\xc5\xaa\x6e\x03\xa1\x66\x6a\x22\xc6\x04\xc4\x0c\x8e\xb1\x75\xff\x93\x29\x7b\x1a\xa7\xab\x9a\xaa\x6a\x51\xc8\x0d\x5c\x7b\x02\xaf\xe0\x46\x88\x1e\xc0\x55\x7b\x01\xcf\x22\xd3\x43\x0c\x79\xab\xef\xa3\x5e\x3d\xfe\xbf\xb7\xb7\xbf\x02\xc0\x16\x80\x3b\x00\x1e\x01\xb8\x01\x60\x82\x4d\xe6\x00\x6e\x02\x78\x0d\x60\x39\x02\x18\xc0\x2d\x00\xbf\x47\xc0\x08\x57\xd9\xba\x84\xc6\xba\x6e\xfb\x4d\xc3\x21\xd1\xd2\x37\x16\xa7\xb6\xf5\x21\x89\x59\xac\xea\x85\x78\xd6\x55\x51\x94\x5e\xd3\xc2\x7e\x7c\xfa\xa1\x5e\x72\xe3\x77\x43\x97\xcd\x5f\x95\xe2\x30\x58\x4e\xb5\x77\xe2\x39\x27\xab\x29\x97\x6a\x5f\xc8\x42\xe4\x05\xe5\x85\xde\xdb\x7b\x28\x0b\x29\xb3\x13\x8e\x49\x94\x81\x5d\x5c\x71\xf2\x41\xd3\xcb\x61\x83\x66\x5d\xe0\xc6\x2f\x3c\x4d\xae\x0d\x4f\xb3\x13\x76\x55\xc7\x95\x15\xa5\xe5\x46\xd3\x7f\xd7\x74\xda\xc5\x58\xb3\xcb\x66\x2f\x66\x47\xe2\x9d\x0d\xb1\xf6\x4e\x93\xda\x95\xd9\xa1\x77\xc9\xba\x24\xca\xcf\xad\xd5\x94\xec\xa7\xf4\xb8\x5d\x71\xed\xc6\x74\xb6\xe4\x10\x6d\x32\x6f\xcb\x63\xb1\x7f\xd5\x5b\xdf\xf3\xde\x06\x71\xe4\xce\xfc\xa2\x76\x95\xa6\x6c\xbe\xea\x02\xaf\xc4\xb1\x0f\x4d\xd4\xe4\xda\x41\xa3\x29\xc6\xb4\x41\xe3\xee\x29\x69\x8c\xa2\x9d\x1d\x5a\xa3\xbc\x6b\x94\xa2\x03\x92\xa4\x07\x9f\x9a\xfc\xf2\x69\x62\x9e\xac\xf1\xfe\x50\x9b\x28\x49\xe7\xe7\x9b\x2f\x53\x93\xcb\x07\x74\x40\x8a\x34\xe5\x63\xf4\xdf\xfa\x8b\xfe\xe7\x9f\x2f\xfd\x0f\xea\xbf\xf7\xbf\xfa\x0b\xfc\x0b\x00\x00\xff\xff\x6d\x20\x21\x24\xdc\x01\x00\x00")

func localesRuLc_messagesBoggartMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesBoggartMo,
		"locales/ru/LC_MESSAGES/boggart.mo",
	)
}

func localesRuLc_messagesBoggartMo() (*asset, error) {
	bytes, err := localesRuLc_messagesBoggartMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/boggart.mo", size: 476, mode: os.FileMode(420), modTime: time.Unix(1547081041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesDevicesMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x52\xcf\x6f\x1b\x45\x14\xfe\xb2\xac\xa1\x98\xf2\xa3\xa5\x14\x24\xa8\x34\x08\xb5\x02\xc1\x96\xb5\x4d\xa5\xb2\x89\x53\x4a\x9c\x48\x15\x31\x2d\xad\xe9\x89\xcb\xd8\x9e\x38\xab\xda\xbb\xd6\xce\x6e\x54\xa4\x1c\x12\x07\xb5\x48\x51\x41\x8a\xa8\xa8\x38\x50\x25\x70\xe1\x66\xda\x58\x38\x49\xed\xfc\x03\x1c\xde\x9c\x91\xf8\x13\x10\x1c\xb9\xa1\xd9\xd9\x06\xc2\x1c\x66\xe6\x7d\xf3\xbd\xef\x7d\xf3\x66\x7e\x3f\x6e\xdf\x05\x80\x93\x00\x5e\x03\xf0\x2b\x80\x53\x00\x96\x27\x90\x8e\x3f\x27\x80\xa7\x00\xfc\x35\x01\x3c\x09\xe0\xef\x09\xe0\x19\x7d\x60\x19\xfc\xa8\x05\x1c\x01\x70\x22\x8b\x4f\x59\x86\x77\xda\x02\x72\x00\xde\xb1\x0c\xbf\x68\xa5\x29\x98\xb6\x80\x3c\x80\x8b\x16\xf0\x34\x80\x79\x0b\x78\x01\xc0\xf5\x8c\xd7\xb2\x00\x1b\x80\xb4\x80\x67\x01\xdc\xcc\xf4\x6e\x65\xf8\x9d\x4c\x77\x23\xe3\xdf\xcb\xf0\x1f\x2d\x60\x71\x02\xf8\x29\xd3\x3b\x6e\x03\xaf\x00\x78\xc3\x36\xf1\x94\x0d\x9c\x00\x50\xb5\x81\xe3\x00\xea\x19\x9e\xd8\xc0\x73\x5a\xdf\x06\x8e\x02\xb8\x6b\x03\x2f\x03\xd8\xb2\x8d\xdf\x5d\xdb\xf4\x63\x94\xe5\xfd\x66\x03\x2f\x01\xf8\xc3\x06\x8e\x01\xb0\x73\xc6\xdf\xc9\x1c\xf0\xaa\xbe\x7f\xce\xe8\xbc\x9f\x33\x7d\x99\xcb\xe2\xcb\x39\x73\xef\xcf\x32\x7e\x2b\x07\x64\x2d\x4e\xc7\xb1\x6c\xd5\xef\xa0\x7d\x6a\x4f\x4f\xc0\xd4\xca\xfd\x87\xa7\x73\x5f\x84\xf1\xae\x87\xbe\xbb\xee\xc3\xf3\x30\x75\xf4\x1b\x68\x9f\xba\xb7\x47\xcc\x33\xa5\x7d\xd4\x43\xd7\xc7\xc5\x46\xec\x87\x81\xc4\x4c\x18\x2c\xf8\x2d\x54\x84\x6c\x44\x7e\x57\x63\xa8\x88\x25\xbf\x21\x24\x2a\xbe\xe4\xf5\xb6\x68\x62\x36\xc8\xd6\x25\x11\xc4\x12\x73\x7e\x24\xd2\x59\xc6\x6c\xc1\x8f\x44\x13\x97\x2a\x98\xe7\x07\xd1\xbc\x2f\x63\x11\x88\x48\xa2\xfa\x49\xad\xc6\x64\x52\xd7\xda\xf5\x03\x20\x0e\xbb\x7e\x43\xe2\x63\xde\x11\xb8\x26\x22\x9f\xb7\x59\x90\x74\xea\x22\xc2\xb5\x98\xc7\x89\x44\x8d\xb7\xf4\x24\x6f\x64\x33\x6b\x84\x49\x10\xa3\xf6\x79\x57\xe0\xaa\xe8\x86\x51\xec\x54\x65\xcb\x6f\x3a\x1f\x26\x2d\xe9\xd4\x42\x8f\x35\xc5\xd2\x07\x37\xfc\x45\xde\x09\xcf\x46\x49\xfe\xca\xe5\x9a\x33\x13\x09\xae\x6f\xe3\x54\x78\x2c\x3c\x56\x74\x0b\xe7\x1d\xb7\xe4\x14\x4b\xac\x58\xf2\xce\x9d\x7b\xdb\x2d\xb9\x6e\x5e\x9b\x76\x6a\x11\x0f\x64\x9b\xc7\x61\xe4\xb1\x8f\x52\x0d\x56\x4d\x22\xde\x09\x9b\x21\x9b\x3a\x24\x3c\x9d\x9f\xe7\x41\x2b\xe1\x2d\xe1\xd4\x04\xef\x78\xec\x20\xf6\xd8\xd5\x44\x4a\x9f\x07\xf9\xea\xa5\xea\xac\x73\x5d\x44\xd2\x0f\x03\x8f\x15\xce\xba\xf9\x99\x30\x88\x45\x10\x3b\xda\xbe\xc7\x62\x71\x33\x7e\xb7\xdb\xe6\x7e\x30\xc9\x1a\x8b\x3c\x92\x22\x2e\x7f\x5a\x9b\x73\xce\xff\xcb\xd3\x7e\x16\x44\xe4\xcc\x06\x8d\xb0\xe9\x07\x2d\x8f\xe5\xaf\xb4\x93\x88\xb7\x9d\xb9\x30\xea\x48\x8f\x05\xdd\x34\x94\xe5\xd2\x24\x33\xdb\x72\x70\xba\xe0\x96\xcb\x05\x76\xe6\x0c\xd3\x5b\xf7\xf5\x72\xa1\xc0\x2e\x30\x97\x79\x69\x3c\x5d\x2e\x3e\x3e\x9a\x2a\xbf\xa7\xb7\x6f\xa6\xb4\xa9\x82\xcb\x96\x97\x4d\xca\x74\xb9\xe8\xbe\xc5\x2e\xb0\x02\xf3\x58\x71\x12\xf4\x0d\x0d\x68\x47\xad\xaa\x1e\x3d\xa0\xa1\xfa\x1a\xf4\x1d\x8d\x69\xa4\xbe\xa0\x21\x3d\x54\x6b\x6a\x85\xfa\xea\x96\x39\xf8\x9e\xf6\x69\xa8\x56\xa9\x4f\x23\x1a\xd2\x00\xf4\x83\x4e\x53\x2b\x34\x3e\x10\xe8\x83\x36\xd4\x3a\xed\xd2\x9e\xfa\x4a\xdd\xa6\x01\x8d\x68\x0c\xda\xf8\x3f\xb0\x49\x63\xfa\x59\xad\xab\x9e\x11\xd6\x29\xbf\xd0\x98\x1e\xa8\x75\xd0\x7d\x1a\xa8\x15\xbd\xa5\x1d\x96\x2e\xe9\x89\xfe\x7b\x74\x9f\xc6\x6a\x95\xf6\x68\x40\xdb\xa9\x85\x43\x04\xda\xa4\x3d\xb5\xa6\xbe\xa4\xbe\xea\xd1\x80\xf6\x68\x68\xbe\x21\xed\xd3\x98\xb6\x33\xeb\xbb\x8f\x51\xd5\xa3\xb1\xc6\x52\x84\xee\xd1\x23\xed\x63\x33\x2d\x3d\xa4\x1d\x1a\x99\xf2\x23\x1a\xd3\x23\x0d\x82\x36\x55\x4f\x2b\xab\x35\xb5\x0a\xda\x52\x77\xe8\xa1\x4e\xfc\x96\xfa\xb4\x4d\x7d\x75\xfb\x50\x00\xda\xa2\x21\xed\xe3\x9f\x00\x00\x00\xff\xff\xde\x09\x7a\x2e\x6e\x05\x00\x00")

func localesRuLc_messagesDevicesMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesDevicesMo,
		"locales/ru/LC_MESSAGES/devices.mo",
	)
}

func localesRuLc_messagesDevicesMo() (*asset, error) {
	bytes, err := localesRuLc_messagesDevicesMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/devices.mo", size: 1390, mode: os.FileMode(420), modTime: time.Unix(1547081041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/devices.html":      templatesViewsDevicesHtml,
	"assets/js/devices.js":              assetsJsDevicesJs,
	"locales/ru/LC_MESSAGES/boggart.mo": localesRuLc_messagesBoggartMo,
	"locales/ru/LC_MESSAGES/devices.mo": localesRuLc_messagesDevicesMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"devices.js": &bintree{assetsJsDevicesJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"boggart.mo": &bintree{localesRuLc_messagesBoggartMo, map[string]*bintree{}},
				"devices.mo": &bintree{localesRuLc_messagesDevicesMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
