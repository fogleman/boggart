// Code generated by go-bindata.
// sources:
// templates/views/devices.html
// assets/js/devices.js
// locales/ru/LC_MESSAGES/boggart.mo
// locales/ru/LC_MESSAGES/devices.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x51\x6b\xdb\x30\x10\x7e\xef\xaf\x38\x04\x83\xf6\x21\x51\xdb\xa7\x31\xd2\xc0\x58\x57\x36\x48\x07\x1b\xd9\xf3\x90\xa5\x33\x51\xe6\x48\x9e\xee\x9a\xb6\x98\xfc\xf7\x21\xc7\xae\xdd\xcc\x2e\x75\x9a\x8e\x3d\xec\x29\x8e\x74\xdf\x77\x9f\x3e\xdd\x1d\x2a\x0a\x30\x98\x5a\x87\x20\xb4\x77\x8c\x8e\x05\x6c\x36\x47\x47\x13\x63\xd7\xa0\x33\x45\x74\x21\x82\xbf\x15\x60\xcd\x85\x30\xb8\xb6\x1a\x49\x4c\x8f\x00\x00\xda\x21\x77\x3f\x72\xe5\x30\xab\x76\xfe\xdc\x65\xcb\x19\xb6\x76\xcb\x88\xc5\xf9\xb4\x28\xc0\x9e\xbd\x75\x20\x2e\x2b\x6a\x18\xc3\x66\x33\x91\x8b\xf3\x9d\xd8\x16\x9b\xce\x50\x85\xd4\xde\x89\xe9\x44\x1a\xbb\x6e\xa5\xdc\xf9\xfb\x48\x41\x7d\xba\x7e\x5e\x56\x49\x86\xa3\x80\x94\x7b\x47\x76\xbd\x2b\xb7\x0c\x2f\x63\x1e\x01\x60\x0b\x23\x0e\x36\x47\x03\x86\x5b\x0c\xe0\xfc\x6d\x50\xb9\x00\xe2\xfb\x0c\x2f\xc4\xad\x35\xbc\x78\x77\x76\x7a\xfa\xa6\x83\x7b\xcb\xbf\x40\x65\xfa\xf6\x42\xf7\x46\x05\x6c\xbc\x9c\xdf\xe7\x58\x1b\xc9\x8b\x27\x41\xf5\x51\x56\x66\xa4\x7d\x36\x3a\x17\x0d\xcb\xe7\xcb\xfd\x38\xce\x5a\x1c\x73\x45\x3f\x09\xb4\xbf\x89\x65\xf5\x52\xb2\xeb\xaf\xf3\x39\xb0\xcf\xad\xa6\x03\x91\xd1\x4d\x42\x3a\xd8\x04\xc3\x01\x18\xdf\x6b\xb6\xde\x3d\x97\xa8\x5d\xf9\x51\x43\x1e\xc1\x83\xb1\xa5\xbf\x83\x51\xc3\x8d\xdc\xdf\xb7\x89\xec\x2b\xdb\x88\xe9\x2c\xf6\x89\x2c\x5b\x6a\xa7\x51\x7b\x5b\xbd\xfa\xac\x7e\xba\x07\x57\x66\x89\xd1\x45\xb9\x87\x1b\x5d\x13\x5b\xc7\xa4\x0a\x52\x35\x32\xa8\xd2\x38\x92\xec\x14\x1e\xdc\x9a\x3d\xe4\xfd\x3f\xd7\x5e\x3e\xd7\xbe\xa8\xd5\x73\xe7\xda\x1e\x63\xac\x81\x5c\xd9\x80\xc3\x3b\xe3\xca\x06\x62\x48\x6d\x40\x33\x18\x3b\x53\x7b\x43\x3f\xae\xd1\xf1\x3f\xd7\x86\x45\x01\xe8\x4c\xf9\x92\x68\xbd\x30\x62\xa2\xf2\x79\x11\x01\x45\x01\xc4\x8a\xad\xfe\x34\xbf\x9e\xc1\xf1\xf6\xfb\xfb\xb7\x19\x08\x69\x14\x2d\x12\xaf\x82\x91\x8a\x08\x99\xe4\x1a\x9d\xf1\x81\xa4\x51\xac\x4a\x55\x34\x76\xc8\xa3\x84\xa4\xa6\xed\xea\x7c\xbb\x9a\x78\xcf\xc4\x41\xe5\xe3\x95\x75\x63\x4d\x24\x20\x55\x19\xe1\xc9\x01\xb3\x36\x7d\x50\x0b\x68\x56\x9e\x16\xd0\xed\xca\x92\x0e\xe8\x89\x5c\x92\x5c\xfe\xba\xc1\x70\x3f\x6e\xd9\x12\xb5\x2c\x5f\xc3\x8b\x84\x62\xc2\xde\x0b\x78\x95\x9c\x8d\xdb\x3b\xb9\x5b\xd7\xf0\x17\x92\x57\x67\xef\xbd\xfb\x01\xe9\x8f\xf3\x60\x1d\x83\x90\x02\xc6\x1f\xfc\x2a\xf7\x0e\x1d\xc7\x69\x07\xa2\x96\x13\x4f\xba\x7d\x22\x47\xe2\x93\xae\xa2\xfa\x1d\x00\x00\xff\xff\x38\x82\x65\xd3\xcb\x0b\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 3019, mode: os.FileMode(420), modTime: time.Unix(1545007593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsDevicesJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x51\x6f\xdb\xb8\x0f\x7f\xdf\xa7\xe0\xb2\x02\x72\xd0\xc6\xf9\xff\x71\x38\xe0\x90\xd6\xb9\x87\x75\x0f\x03\x86\xdb\x80\xf5\x6d\x1b\x06\xd9\xa2\x1d\xad\x8a\x94\x93\xe4\x66\xb9\x21\xdf\xfd\x20\xcb\xf1\xec\xa6\xb1\x9d\x26\xd9\x3a\xe0\xfc\x10\xd8\x0e\x49\x93\xfc\x51\x3f\x4a\x3c\x0b\x98\x4a\xf2\x39\x4a\x3b\x0c\x35\x52\xb6\x0a\xd2\x5c\x26\x96\x2b\x09\xc1\x10\xbe\x3d\x03\x00\xb8\xa3\x1a\x2c\x8d\x05\x5e\xe3\x1d\x4f\xd0\x40\x04\x67\x01\x79\xc1\xca\xa7\xe2\x2f\x32\x2c\x44\xdd\x15\x5e\x53\x4b\x6f\xdc\xcb\xe0\x5b\xf5\xd2\x5d\x0b\x9a\xe1\x1b\x94\x99\x9d\x4d\xe0\xf7\xff\x5d\x34\xfe\x13\x54\x66\x39\xcd\x70\x02\x4d\x1d\x77\xe5\x5a\x4c\x80\x8c\x19\x35\xb3\x58\x51\xcd\xc6\x8c\x5a\x5a\x7c\xd5\x8c\xf9\xff\xff\x90\xe1\x17\xa3\x24\x69\xa8\xad\x9b\xd6\xe9\x17\xfa\xb5\xc5\x72\xac\xb2\x8c\x6a\x3b\x2e\x23\x1a\xff\x89\xd2\x72\xbb\x8a\xca\x67\x72\xb1\xa5\xe8\x3c\x78\xaf\x93\x09\x10\x77\xd7\xfa\xed\x44\x89\x7c\x2e\xcd\x04\x3e\x6c\x59\xd9\x76\x68\x63\x7b\x02\xc4\xae\x16\x0f\x7e\xda\x5d\x1a\x25\x43\x3d\x81\xef\x58\x15\xd2\xc3\x1d\x16\xa1\x04\x31\x51\xd2\xa2\xb4\x10\x01\x21\x97\xcf\x76\x8a\xa6\x4a\x43\xe0\xe4\x39\x70\x09\x9d\x96\x7d\x90\xde\xf2\x79\x04\xe4\xca\x2c\xa8\x84\x44\x50\x63\xa2\x81\xa0\x31\x0a\x28\x7e\x47\x26\x4f\x12\x34\x66\x30\x25\x70\xee\xcd\x7e\xe0\x9f\xe0\x1c\xc8\xd5\xd8\xa9\x4c\x81\x5c\xee\xfc\xc8\x7a\xb7\xbb\x1a\x6d\xae\xe5\xc6\x85\x87\x4d\xac\xb7\xde\xae\xb7\x33\xdb\x0a\x07\x67\xe4\x60\x1b\x96\x9a\xdb\x3d\x20\x75\xd2\x6d\x89\x2f\x03\x2f\xe4\x42\x51\x2c\xac\x53\x45\x3f\xff\xdb\xda\xcf\x56\x2d\x78\xb2\x87\xff\x85\x78\x9f\x00\x0a\xc1\x1f\x11\x81\xc9\x63\x93\x68\x1e\xa3\xee\x1f\x46\x4d\xa7\x47\x2c\x35\xe9\x13\x07\x84\xd2\x31\x20\xeb\x1d\x87\x53\xbb\x28\x96\xdd\x05\x68\xb5\xec\xc9\x15\x2d\x34\xc1\x53\x08\xb4\x5a\x86\xa5\x23\x7d\x29\xc2\x31\x44\x9c\x5b\xab\x3c\xb5\x44\x03\xff\x30\xd8\x30\x46\x6c\x25\xc4\x56\x8e\x18\x95\x19\xea\xe2\x96\x27\xee\x7f\x17\xc0\xc8\xaa\x2c\x13\x18\x0d\xe6\x8a\x51\xb1\x79\x47\x75\x86\x36\x1a\xbc\xa8\xbf\x2c\xee\x47\x96\x5b\x27\xfd\x52\xc9\x94\xeb\x39\x30\x6e\x9c\xaf\xe0\x89\x1d\x5e\x38\x22\x72\x21\x70\xe6\x68\xa8\xa1\x99\x50\x21\x62\x9a\xdc\x46\x03\x2f\x7c\x53\x7c\x38\xf8\x48\x36\x3a\x1a\x33\x6e\x2c\xea\xcf\x5e\xf9\x23\x19\x5e\x16\xcc\xd6\x9a\x04\x77\x91\x2b\xbe\x89\x35\x13\xab\xc5\xcc\x45\x07\xd5\xdd\x48\xe3\x5c\xdd\xe1\x00\x4a\xd7\xaf\x1b\x2e\x0f\xa6\x57\x63\x3e\xdd\x66\xa2\xcd\xb5\x06\x14\x06\x8f\x8c\x44\xc9\xdb\xc7\x85\xc2\x57\xcd\x93\x46\x42\xdd\x56\x28\xbc\x92\xfb\x80\xd0\xd9\xab\xc8\x15\xe3\x77\xb5\x34\x8f\x32\xad\xf2\x05\x54\x77\xa3\xaf\x65\x97\xac\xfa\xaa\x6b\x92\x1e\x9e\xce\xc8\xfa\x81\xca\x65\xaa\x2a\x44\xcb\xc0\x46\xc9\x0c\x93\xdb\xc1\xb4\xab\x40\x53\x8d\x66\x56\xe5\xe6\x65\xa9\x34\xe6\xd3\x23\xfb\xb8\xa4\x5a\x72\x99\x6d\xb9\xb9\xe0\x32\xeb\xf6\xd2\xf0\x7f\x70\x64\xe6\x54\x88\xca\xd5\x77\x5e\x71\x3f\x4f\xc7\x8c\xdf\x4d\x77\x6c\x4d\x0e\xa7\x71\x86\xae\x5f\x2c\x1c\x47\x3f\xb9\x0d\xc6\xe3\xf7\x8c\x5d\x96\xa1\xef\x9e\xb1\x2c\x81\x72\xcf\xe8\xcc\xfe\x42\x7b\xc6\xd3\xec\x9a\x1e\x8f\x4a\xa7\x69\xe8\x0b\xcb\x42\xf3\x39\xd5\xab\x12\x96\xc2\xee\xaf\x86\xcb\x09\xf7\x82\x8f\x46\xa8\xa7\x7d\xe8\x0b\x93\x23\x79\x8f\x51\xcd\xf2\xcf\x04\xaa\xf1\xe6\x53\xf5\xb4\x1e\x96\x29\xaa\x46\x0d\x6f\x5c\x47\x97\xa8\x37\xc3\x06\x51\x3d\xf7\x1e\x37\x3c\xc9\x91\x42\x15\xc7\xcf\x19\x2a\x48\x3a\xc7\xc3\xdb\xcc\x31\xce\xc2\x29\xd7\x68\x8e\x63\xe6\x73\xca\xb5\xb1\xfb\x1c\x84\xb0\x6d\x75\xb9\x73\xcd\xf3\x2e\x21\xa8\x6d\xe6\x0e\x5a\x41\xee\x43\x37\xea\xbd\xd5\x5c\x66\xde\xb5\x53\xb1\x5e\x91\x2a\x41\xff\xcb\x14\x74\x1e\xad\xef\x50\xda\xfe\x5d\xc1\x69\x1d\xbb\x1d\x14\x2e\xbc\x66\xae\x29\x74\x99\x87\xfd\xbb\x81\x33\xf9\xa1\xfc\xc4\xd3\x6d\x06\x5b\x43\x66\xb0\xb1\x62\x2b\x32\x0c\x95\x0c\x48\x22\x78\x72\x4b\x2e\x80\xf8\x8d\x7c\x58\x3f\xc2\x90\x8b\x1a\x3c\x8d\xea\xc4\x70\xa1\x8b\xc0\xaf\x31\xa5\xb9\xb0\x41\xad\x88\x5c\xde\xbd\x95\xd7\x0c\xa2\xc6\xc8\x3b\xd4\x6a\x19\x9c\x05\x76\xc6\xcd\x30\x4c\x84\x32\x68\x6c\x40\xac\x26\xc3\x61\xe8\x92\x19\x0c\xeb\xa7\xd0\x1a\xc0\x67\xa1\x6b\x14\xf7\x3a\x93\x3b\xf4\x4c\x80\xbc\x7b\xfb\xfe\xe6\x5e\x91\xed\xe8\x1e\x05\x66\x1b\xcf\xce\x81\x8c\xcb\x28\x1b\xba\xe5\x31\xfd\x7b\x65\x06\x0f\x55\x4d\x23\x2a\xe7\x5b\xa8\x51\x28\xca\x82\x7b\xab\x69\xdd\xc0\xe3\x70\x5c\xdc\x99\xed\x50\x58\xf6\x06\xe5\x84\x40\xdc\x9f\x3a\x8c\x7d\x80\x1d\x88\xe8\x87\x20\x29\x06\x69\x85\xc7\xf0\x3c\x8a\x80\xe4\x92\x61\xca\x25\x32\xb2\x6b\xd9\x17\xc4\xeb\x55\xda\x98\x41\xe2\x12\xde\xfd\xa5\x2c\x4f\x57\x41\x3b\x7f\x14\xe7\xe3\x09\x90\xb7\x69\x2a\xb8\xc4\x1d\xd4\x57\x49\xe3\x57\x3b\x01\xe2\x61\x80\x5a\x4e\x7c\x2a\x80\x1b\x50\xfd\x0c\xf9\xfc\xa3\xd6\x4a\x77\x88\x1a\xbb\x12\x5c\x66\x13\x20\xb1\x52\xd6\x58\x4d\x17\xbf\xb5\x8c\x60\x76\xf5\x86\xae\xf9\xd8\x23\x52\x26\x8f\x94\xb1\x5e\x76\x7c\xc2\xca\xc2\xfa\x31\x29\xeb\x20\xee\x16\xa2\x58\x72\xc9\xd4\x32\xac\x8f\xed\x20\xfa\xbe\x18\x36\x8c\x56\x2f\xe1\x13\xf1\xa5\x9f\x55\x1e\xb2\x3c\x35\x9a\x5c\x58\x88\xdc\x02\x4d\x29\x17\x2d\xab\xb3\x5f\x0d\x6d\xea\xe7\x55\x47\xf1\xfb\xd2\xd1\xe1\x1c\x8d\xa1\x19\xb6\x08\xf6\x5b\x4c\x33\xce\x70\x02\x29\x15\xa6\xc5\x56\xff\xd2\xd9\x55\x36\x7e\x4f\xf0\x40\xed\x1c\xb3\x23\x3d\x5b\x0f\x2f\xff\x0d\x00\x00\xff\xff\x7a\xea\x68\x04\xc2\x1e\x00\x00")

func assetsJsDevicesJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsDevicesJs,
		"assets/js/devices.js",
	)
}

func assetsJsDevicesJs() (*asset, error) {
	bytes, err := assetsJsDevicesJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/devices.js", size: 7874, mode: os.FileMode(420), modTime: time.Unix(1545007693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesBoggartMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6a\x14\x41\x18\x85\xdf\x84\xb8\xe9\x8d\xe8\xda\xc5\xef\xc2\xa0\x68\xc5\xaa\x6e\x03\xa1\x66\x6a\x22\xc6\x04\xc4\x0c\x8e\xb1\x75\xff\x93\x29\x7b\x1a\xa7\xab\x9a\xaa\x6a\x51\xc8\x0d\x5c\x7b\x02\xaf\xe0\x46\x88\x1e\xc0\x55\x7b\x01\xcf\x22\xd3\x43\x0c\x79\xab\xef\xa3\x5e\x3d\xfe\xbf\xb7\xb7\xbf\x02\xc0\x16\x80\x3b\x00\x1e\x01\xb8\x01\x60\x82\x4d\xe6\x00\x6e\x02\x78\x0d\x60\x39\x02\x18\xc0\x2d\x00\xbf\x47\xc0\x08\x57\xd9\xba\x84\xc6\xba\x6e\xfb\x4d\xc3\x21\xd1\xd2\x37\x16\xa7\xb6\xf5\x21\x89\x59\xac\xea\x85\x78\xd6\x55\x51\x94\x5e\xd3\xc2\x7e\x7c\xfa\xa1\x5e\x72\xe3\x77\x43\x97\xcd\x5f\x95\xe2\x30\x58\x4e\xb5\x77\xe2\x39\x27\xab\x29\x97\x6a\x5f\xc8\x42\xe4\x05\xe5\x85\xde\xdb\x7b\x28\x0b\x29\xb3\x13\x8e\x49\x94\x81\x5d\x5c\x71\xf2\x41\xd3\xcb\x61\x83\x66\x5d\xe0\xc6\x2f\x3c\x4d\xae\x0d\x4f\xb3\x13\x76\x55\xc7\x95\x15\xa5\xe5\x46\xd3\x7f\xd7\x74\xda\xc5\x58\xb3\xcb\x66\x2f\x66\x47\xe2\x9d\x0d\xb1\xf6\x4e\x93\xda\x95\xd9\xa1\x77\xc9\xba\x24\xca\xcf\xad\xd5\x94\xec\xa7\xf4\xb8\x5d\x71\xed\xc6\x74\xb6\xe4\x10\x6d\x32\x6f\xcb\x63\xb1\x7f\xd5\x5b\xdf\xf3\xde\x06\x71\xe4\xce\xfc\xa2\x76\x95\xa6\x6c\xbe\xea\x02\xaf\xc4\xb1\x0f\x4d\xd4\xe4\xda\x41\xa3\x29\xc6\xb4\x41\xe3\xee\x29\x69\x8c\xa2\x9d\x1d\x5a\xa3\xbc\x6b\x94\xa2\x03\x92\xa4\x07\x9f\x9a\xfc\xf2\x69\x62\x9e\xac\xf1\xfe\x50\x9b\x28\x49\xe7\xe7\x9b\x2f\x53\x93\xcb\x07\x74\x40\x8a\x34\xe5\x63\xf4\xdf\xfa\x8b\xfe\xe7\x9f\x2f\xfd\x0f\xea\xbf\xf7\xbf\xfa\x0b\xfc\x0b\x00\x00\xff\xff\x6d\x20\x21\x24\xdc\x01\x00\x00")

func localesRuLc_messagesBoggartMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesBoggartMo,
		"locales/ru/LC_MESSAGES/boggart.mo",
	)
}

func localesRuLc_messagesBoggartMo() (*asset, error) {
	bytes, err := localesRuLc_messagesBoggartMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/boggart.mo", size: 476, mode: os.FileMode(420), modTime: time.Unix(1545010709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesDevicesMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x52\xcf\x8f\xdb\x44\x14\xfe\x1c\x9b\x1f\x6b\xca\xaf\xaa\x88\x0b\x48\xc3\x81\x0a\x04\x2e\x76\x42\xa5\xca\xbb\xde\x16\x9a\x5d\xa9\x62\x03\xa5\x32\xbd\xcf\x26\xd3\xc4\x6a\x62\x47\x1e\x67\x05\xa8\x48\xdd\x70\x68\xd1\x4a\x45\x54\x20\xb8\xc0\xaa\xfc\xb8\xa2\x50\x25\x90\x6e\xd8\xec\x81\x03\x47\xde\x70\xe2\x02\x57\xfe\x01\x0e\x1c\xd1\xd8\xde\xa0\xed\x1c\x3c\xef\x7b\xf3\xbd\xef\x7d\xef\xc9\x7f\x1d\xb7\x3e\x03\x80\x27\x01\x3c\x03\xe0\x5b\x00\x4f\x03\x78\xd9\x40\x7e\x6e\x1a\xc0\x43\x00\x3e\x32\x80\x47\x00\x7c\x52\xe2\x2f\x0d\xe0\x61\x00\xdf\x95\xf8\x7b\x03\x78\x10\xc0\x8f\x06\xf0\x00\x80\xfd\x92\xff\x8b\x01\x54\x00\xfc\x66\x00\x36\x80\xdf\x0d\x60\x09\xc0\x9f\x06\xf0\x04\x80\xbf\x4b\xde\xbf\x06\x60\x01\xb0\x2a\x45\xfd\x52\xa5\xc0\x8f\x57\x80\x8e\x01\x9c\xa8\x14\xfc\x0f\xcc\xe2\xbe\x65\x02\x27\x00\xec\x9a\xc0\x71\x00\xe3\x32\xff\xab\x09\x3c\x06\xe0\x0f\x13\x38\xa6\xf5\xcd\x62\x9e\x7f\xcc\xc2\xc7\x31\x0b\x78\x56\xeb\x5a\x45\x9d\x63\x01\x4f\x01\x38\x67\x15\x3b\xb8\x6c\x15\x73\x74\xac\xc2\x6f\x52\xe2\xf7\x2d\xa0\x5c\x49\x7e\xf4\xec\x26\x8a\x5e\xba\xaf\xf6\xba\x54\xee\x51\x1f\xdd\x5b\xd7\xd9\x25\xd6\x3b\xd2\x73\x56\x4a\xac\x67\x7c\x54\xfb\x38\x14\x7c\xad\x99\x45\x49\x2c\x51\x17\xb2\x99\x46\x7d\x0d\x50\x17\x5b\x51\x53\x48\xd4\x23\xc9\x37\xbb\xa2\x85\xb5\xb8\xbc\xb7\x44\x9c\x49\xac\x47\xa9\xc8\xbf\x32\x63\x57\xa2\x54\xb4\x70\xa1\x8e\x0d\xbe\x40\x1b\x91\xcc\x44\x2c\x52\x89\xc6\xdb\x61\xc8\xe4\x60\x53\x6b\x6f\x2e\x12\x59\xd2\x8f\x9a\x12\x6f\xf2\x9e\x40\xc8\xe5\x55\x89\xf0\xbd\xbe\xc0\x25\xd1\x4f\xd2\xcc\x69\xc8\x76\xd4\x72\x5e\x1f\xb4\xa5\x13\x26\x3e\x6b\x89\xad\x73\x57\xa3\x0e\xef\x25\xa7\xd2\x81\x7d\xf1\xad\xd0\x39\x9f\x0a\xae\x7d\x3a\x75\x9e\x09\x9f\x55\x5d\xef\x8c\xe3\xd6\x9c\x6a\x8d\x55\x6b\xfe\xe9\xd3\x2f\xb9\x35\xd7\xb5\xb5\x1d\x27\x4c\x79\x2c\xbb\x3c\x4b\x52\x9f\xbd\x91\x6b\xb0\xc6\x20\xe5\xbd\xa4\x95\xb0\x95\x23\xc2\xab\xf6\x06\x8f\xdb\x03\xde\x16\x4e\x28\x78\xcf\x67\x0b\xec\xb3\x4b\x03\x29\x23\x1e\xdb\x8d\x0b\x8d\x35\xe7\xb2\x48\x65\x94\xc4\x3e\xf3\x4e\xb9\xf6\xf9\x24\xce\x44\x9c\x39\xda\xbe\xcf\x32\xf1\x6e\xf6\x4a\xbf\xcb\xa3\x78\x99\x35\x3b\x3c\x95\x22\x0b\xde\x09\xd7\x9d\x33\xff\xf3\xb4\x9f\x2b\x22\x75\xd6\xe2\x66\xd2\x8a\xe2\xb6\xcf\xec\x8b\xdd\x41\xca\xbb\xce\x7a\x92\xf6\xa4\xcf\xe2\x7e\x0e\x65\x50\x5b\x66\x45\x18\xc4\xcf\x7b\x6e\x10\x78\xec\xe4\x49\xa6\x43\xf7\xb9\xc0\xf3\xd8\x59\xe6\x32\x3f\xc7\xab\x41\xf5\xf0\x69\x25\x78\x55\x87\x2f\xe4\xb4\x15\xcf\x65\xd7\xae\x15\x25\xab\x41\xd5\x7d\x91\x9d\x65\x1e\xf3\x59\x75\x19\xf4\x29\x4d\xe8\x9e\xda\x56\x43\xba\x4b\x53\xf5\x31\xe8\x2b\x3a\xa0\xa9\xda\xa6\x11\xed\xd3\x94\x26\xa0\x6f\xf4\xab\xba\x4e\xf3\x05\x6f\x04\xba\xad\x76\x68\x8f\x66\xea\x96\xba\x41\x13\xda\xa7\x39\xe8\xf6\xfd\x89\x3b\x34\xa7\x1f\xd4\x8e\x1a\x16\xc2\xba\xe4\x27\x9a\xd3\x5d\xb5\x03\xda\xa5\x89\xba\xae\x43\xba\xc7\xf2\x2b\x7f\xd1\x3f\x0f\xed\xd2\x5c\x6d\xd3\x8c\x26\x34\xce\x2d\x1c\x21\xd0\x1d\x9a\xa9\x0f\xd5\x4d\x1a\xa9\x21\x4d\x68\x46\xd3\xe2\x3f\xa2\x03\x9a\xd3\xb8\xb4\xbe\x77\x98\x55\x43\x9a\xeb\x5c\x9e\xa1\x2f\xe8\x67\xed\xe3\x73\x1a\xd1\x98\x46\xea\x06\xe8\x6b\x9a\xd2\x01\xfe\x0b\x00\x00\xff\xff\x59\x60\x98\x2f\x81\x04\x00\x00")

func localesRuLc_messagesDevicesMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesDevicesMo,
		"locales/ru/LC_MESSAGES/devices.mo",
	)
}

func localesRuLc_messagesDevicesMo() (*asset, error) {
	bytes, err := localesRuLc_messagesDevicesMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/devices.mo", size: 1153, mode: os.FileMode(420), modTime: time.Unix(1545010709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/devices.html":      templatesViewsDevicesHtml,
	"assets/js/devices.js":              assetsJsDevicesJs,
	"locales/ru/LC_MESSAGES/boggart.mo": localesRuLc_messagesBoggartMo,
	"locales/ru/LC_MESSAGES/devices.mo": localesRuLc_messagesDevicesMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"devices.js": &bintree{assetsJsDevicesJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"boggart.mo": &bintree{localesRuLc_messagesBoggartMo, map[string]*bintree{}},
				"devices.mo": &bintree{localesRuLc_messagesDevicesMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
