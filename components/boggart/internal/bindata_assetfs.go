// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xa8\xad\xe5\xe2\xaa\xae\x56\x48\xcd\x4b\x01\x31\x01\x01\x00\x00\xff\xff\x3e\x64\xd4\x00\x22\x00\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 34, mode: os.FileMode(420), modTime: time.Unix(1515575925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x6f\x1b\xb7\x13\xbf\xfb\x53\x10\x42\x00\xdb\x40\x24\x25\xce\xcd\xb1\x73\xf9\x3f\xd0\x02\xe9\x03\x45\x1f\xc7\x05\xc5\x1d\x69\x99\xac\x48\x95\xe4\x5a\x12\x16\x02\x64\x39\x0f\x04\x69\x91\xa2\xed\xa1\xe8\xa1\x2d\x0a\xf4\x58\xc0\x71\xa2\x46\x75\xec\xfd\x04\x3d\x0c\xbf\x51\xc1\x95\x9c\xc8\xb2\x24\xc8\xd6\xe6\xd5\xee\x5e\xcc\xe5\x70\x87\xc3\xf9\xfd\x66\x38\xa4\x15\xc7\xc4\x87\x2a\x17\x40\x0a\x4c\x0a\x03\xc2\x14\x48\xa7\xb3\xb2\xe5\xf3\x1d\xc2\x42\xaa\xf5\x76\x41\xc9\x66\xe1\xc6\x0a\x21\x84\x8c\xf7\x32\x19\x16\xeb\x7e\xf1\xea\xc6\x48\x36\x29\x1f\xeb\x9e\x14\xb5\x3c\xc3\x4d\x08\x13\x23\xd2\x51\xc1\xc6\x0d\xfc\x05\xfb\x76\xd7\xee\xd9\xae\xdd\xb5\x0f\xb7\xca\xc1\xc6\x94\x71\xe3\x86\x84\x40\x55\x95\xb7\x0a\x37\xb6\xca\x3e\xdf\x99\x98\x76\x4a\xd7\x29\x4b\x4e\x16\x3d\x7f\x8e\x97\x2e\x98\x6b\xc9\xd0\x25\xd7\x88\x6b\xb4\x74\xf1\xea\x06\x69\x72\xbf\x06\x66\xf4\xc7\x33\x34\x0c\xdb\x5e\x45\xb6\x66\x28\x3b\x6b\x5e\x83\x0a\x08\xe7\x8c\x3e\xcf\x82\xa6\x7e\xc7\xfd\xed\x82\x02\x2d\x23\xc5\xa0\x18\x00\x35\x45\x2e\x0a\x44\x9b\x76\x08\xdb\x85\x00\x78\x2d\x30\x9b\xd7\xae\x5c\x69\xb4\xae\x2f\xa0\xd1\x3d\xef\x8b\x85\x86\xc5\x31\x29\x55\x64\xad\x46\x95\xf1\x1a\x51\xa8\xa9\xf2\x0c\xd4\x1b\xa0\xa8\x89\x14\x78\x5c\x78\x0c\x42\xcd\x23\x5d\xfa\x9c\x86\x11\x90\x4e\x87\xfc\x67\x21\xc5\x5b\x15\x45\xca\x8b\x99\xfa\x51\x64\xb2\xb0\x55\x46\xe6\x35\x18\xfb\x5f\x08\x0d\xcd\xc2\x5c\xdf\x29\xba\x88\xc1\x53\x62\xe9\x9c\x43\xe6\x88\x47\xa2\x7f\x49\x8c\xc9\xc8\x2c\x15\x64\xf8\x33\x26\x78\x88\xfb\xf8\x0c\xf7\xf1\x18\x07\xf6\x11\xb1\x5f\xe3\x31\xf6\x6d\x17\x9f\xe0\x00\x07\x17\x25\x0a\x08\x50\xb5\xb6\x57\xe3\x35\xca\x64\x28\x15\x87\x31\x8a\x8c\xf7\xe6\x6c\x99\xb7\xb0\x6c\xd9\x92\x46\x6c\xe6\x7c\xe9\x61\x1f\x0f\xed\x9e\x7d\x80\x7d\x1c\xfc\x75\x8f\xe0\x11\x26\xf6\x01\x1e\x63\x62\x77\x6d\xef\xe2\x14\x62\x52\xe8\xa8\xde\x30\x5c\x0a\x8f\x45\x15\xce\xbc\x3a\x18\x05\xda\x6b\x80\xf2\x02\x19\xa9\x97\x84\x4a\xc5\x64\x28\x26\x0d\x50\xc4\x89\x73\x66\xcd\x5b\x58\x66\xcc\x6a\x52\x03\xaa\xc8\x64\xe8\x2f\xc7\xac\xdf\x30\xc1\xe7\x98\xe0\x53\x3c\xc6\x7d\xfb\x88\xe0\x41\xfa\xb2\x7f\x71\xfa\x84\xbe\x97\x1a\xe7\x31\xda\xa0\x8c\x9b\xf6\x29\x1a\x4d\x67\x4f\x4e\x9a\x79\x0b\xcb\x98\x34\x81\x5c\x72\xf7\xfa\x0e\x13\xdb\xb5\x8f\xec\xfd\x4c\x18\x13\x48\x93\x13\xe6\x2d\x25\x0c\x84\xc0\x8c\xe2\x0e\x94\x59\x94\xc1\xdf\xf1\x79\xba\x15\xf5\x6c\x17\x07\xf6\x7e\x7a\xfa\xeb\x39\x52\xbc\x0e\x08\x16\xe8\x9e\xe8\x1a\x7b\x1d\x35\x4f\xd0\x7c\x93\x87\xe6\x5f\xb1\x3f\x74\x23\x26\x78\x84\x47\x76\xcf\x6d\xf3\x6e\xcb\xb7\xf7\x5c\x3d\x98\x1f\xa3\x5f\x3d\xe9\x99\xac\xd7\x23\xc1\x19\x75\xa5\x4f\x91\x0b\x03\x4a\xc0\x92\x99\xf2\x07\x3c\x76\x85\x9a\xed\xa6\xc5\x7d\xef\xdc\x29\x52\xcb\xaa\xd9\xe1\x3e\x48\xaf\x42\x43\x2a\x18\x78\x2a\xaa\x84\xa0\x3d\x23\x0d\x0d\x5f\xa4\xc6\x85\xf4\xda\xae\xdd\xc3\xc7\xa5\xb7\x22\x73\x4e\x15\xfd\xe3\x38\xd4\x08\xa4\x80\x99\x79\x73\x14\xf2\xf6\x0e\x26\x78\x9c\x3b\x3d\x2b\xa7\x37\x79\x95\x2f\x15\xb4\x5f\xf0\xff\x73\x82\x87\xf8\x1c\x07\xd8\x77\xf1\x6b\x1f\x9e\x3b\x6e\xeb\xfc\xb6\x92\x86\xdf\xf6\x9c\x35\x1e\x0b\x39\x08\x73\xee\xa0\xcd\xf7\xcf\xc5\xf7\x4f\x77\x40\x7e\x32\xac\x43\xf3\xbd\xf2\xd5\x87\x5c\x13\xa8\x09\x40\x15\x65\x64\x7c\x29\xd5\xcc\x1c\x37\x06\x0b\x71\x07\x4c\x62\xf7\x5c\x5c\xd9\x7b\xd8\xcf\x33\xde\xf2\xee\xe7\x62\x71\xef\x1f\xb8\x9c\x76\x80\xfb\xb6\x6b\x7b\x38\xb0\xdd\x37\x83\xc0\xbb\x9a\x5f\x7e\xb2\x77\x6d\x37\xbd\x7c\xcb\xf3\xcb\x6b\x20\xb8\x06\x16\x29\x6e\xda\xc5\x26\x54\x18\xad\x17\xb5\x51\x30\xbb\x16\xc7\x1f\x71\x1f\x8f\xd2\x32\x3b\x4f\x33\xb3\xbe\xc8\x00\x85\x80\x86\x61\xf1\xea\x62\x28\x1c\x10\x4c\xf0\x71\x7a\x3b\x7d\xe4\x32\x4f\x62\xbb\xb6\x8b\x03\x7c\xea\x5a\xd8\x27\x76\x8f\xe0\x81\xbd\x3b\xba\x79\x4c\xf0\x4f\x82\x4f\xf1\x20\xfd\x7a\x90\x63\x96\x31\x66\x1b\xd9\x61\xe6\xc2\xea\x8e\xed\xb9\x34\x98\x83\xb4\x34\x48\xe9\x2d\x03\x93\xf5\x99\xf8\x7c\x9f\xde\x07\x25\xf9\x21\x31\x33\x97\x83\x30\x8a\x0a\x06\xc5\xb9\xa5\xd3\xb7\x2f\x52\x53\x7a\xc5\x3d\x4a\x4d\xf6\xab\x1c\x82\x0c\x20\xa0\x5f\x46\xb4\xc8\xa8\x9a\x7d\x37\xf2\xcd\xa8\x56\xdd\xb5\xbd\x34\xf7\x24\xf8\x47\xee\xf9\x0c\x3c\x5f\x81\x30\x5c\x80\xf3\xe9\x76\xfc\x2c\xfd\xc7\x8e\x7b\x39\x7c\xc7\x4e\x0a\x71\x4c\x40\xf8\xa4\xd3\x59\x59\x19\xfb\x7d\xdc\x2d\x5d\x38\xb9\x75\x89\x63\xa2\x0d\x35\x9c\xbd\xf7\xe9\x07\x37\xc9\xda\xb0\xfd\xd9\x27\x37\x49\xa1\xec\x53\x1d\x54\x24\x55\x7e\x99\x6a\x0d\x46\x97\x77\x40\xf8\x52\xe9\x32\xb0\x80\x2a\xa3\xcb\xb7\x5e\x34\x4b\x75\x2e\x4a\x4e\x6b\x95\x86\x1a\xd6\xd3\xf9\x46\xda\x79\x95\x94\x40\x29\xa9\xf4\xc9\x94\x5b\x9a\x29\xde\x30\xc4\xb4\x1b\xb0\x5d\x30\xd0\x32\xe5\x5b\x74\x87\x0e\x7b\xc7\xb0\xbc\xb4\xe6\x4b\x16\xd5\x41\x98\xf5\x92\x02\xea\xb7\xd7\xaa\x91\x60\x86\x4b\x41\xd6\xd6\x49\x7c\xca\x1f\x71\x4c\x14\x15\x35\x20\x97\xe0\x32\xb9\x94\xce\x47\x36\xb7\x27\x67\x3e\x79\x04\x34\xc9\xc7\x1f\x4a\xc3\xab\xed\xb5\xf8\x8c\xbb\xd3\xd3\xcf\x26\x59\xfd\x9f\xfb\x76\xf5\xf2\x59\x39\xb4\xcc\x26\x59\x8d\xe3\x93\x89\x3a\x9d\x69\xa3\xda\x0d\xa7\x04\x66\x28\x09\xb8\x0f\x9b\x43\x77\x9d\x15\x3a\x56\x72\x51\xdb\x24\xab\x15\x29\x8d\x36\x8a\x36\xae\xad\x9e\x1a\xd5\x59\xbf\x3e\xb9\xfe\x11\xce\x93\x23\xb6\xca\x43\xc7\x8e\x73\xe1\x65\xeb\xef\x00\x00\x00\xff\xff\xab\x21\xfe\x8b\x35\x29\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 10549, mode: os.FileMode(420), modTime: time.Unix(1515722346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
