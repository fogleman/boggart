// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xa8\xad\xe5\xe2\xaa\xae\x56\x48\xcd\x4b\x01\x31\x01\x01\x00\x00\xff\xff\x3e\x64\xd4\x00\x22\x00\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 34, mode: os.FileMode(420), modTime: time.Unix(1515575925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5d\x6f\x1a\x47\x17\xbe\xcf\xaf\x18\xa1\x48\xb6\xa5\x00\xfe\xc8\x95\x63\x47\xca\xfb\xb6\x55\x2b\xa5\x6d\x54\xa5\xc9\xe5\x6a\xd8\x3d\xb0\x93\x2c\x33\x64\x66\xd6\x18\x21\x4b\x18\xe7\x43\x51\x5a\xa5\x4a\x2b\xb5\xea\x45\x52\x55\xea\x65\x25\xe2\x84\x86\x3a\x36\xbf\xa0\x17\x67\xfe\x51\x35\x0b\x18\x8c\x01\x81\xd9\x7c\x76\xb9\x61\x98\x33\x3b\xcf\x99\x73\x9e\x73\x66\xce\x2c\xd5\x2a\xf1\x20\xcf\x38\x90\x94\x2b\xb8\x06\xae\x53\x64\x67\xe7\xdc\x86\xc7\xb6\x88\x1b\x50\xa5\x36\x53\x52\x94\x53\x97\xcf\x11\x42\xc8\x60\xaf\x2b\x82\x74\xd1\x4b\xaf\xac\x76\x65\xc3\xf2\x81\xee\x61\xd1\xb6\xa3\x99\x0e\x60\x68\x44\x34\xca\x5f\xbd\x8c\xbf\x61\xd3\xec\x9a\x3d\x53\x33\xbb\xe6\xd1\x46\xd6\x5f\x1d\x31\x6e\x50\x91\x00\xa8\xcc\xb3\xed\xd4\xe5\x8d\xac\xc7\xb6\x86\x60\x47\x74\x9d\xd0\xa4\xb7\xe8\xc9\x18\x7d\x13\x4c\xd4\xa4\x63\x92\x35\x62\x1b\xdb\x2a\xbd\xb2\x4a\xca\xcc\x2b\x80\xee\x7e\x39\x9a\x06\x41\xc5\xc9\x89\xed\x31\x93\x9d\x56\xaf\x44\x39\x04\x13\x46\xcf\xb2\xa0\x91\xcf\x31\x6f\x33\x25\x41\x89\x50\xba\x90\xf6\x81\xea\x34\xe3\x29\xa2\x74\x25\x80\xcd\x94\x0f\xac\xe0\xeb\xf5\xb5\xe5\xe5\xd2\xf6\xa5\x29\x66\xb4\x9f\x2f\xf8\x54\xc3\xaa\x55\x92\xc9\x89\x42\x81\x4a\xed\x94\xc2\x40\x51\xe9\x68\x28\x96\x40\x52\x1d\x4a\x70\x18\x77\x5c\x08\x14\x0b\x55\xe6\x06\x0d\x42\x20\x3b\x3b\xe4\xff\x53\x4d\xbc\x91\x93\x24\x3b\x9d\xaa\x5f\x87\x3a\x0e\x5d\x45\xa8\xdf\x82\xb2\x9f\x40\xa0\x69\x1c\xea\x7a\x76\xa2\xb3\x28\x3c\x22\x96\x66\x1c\x32\x41\xdc\x15\xfd\x47\x62\x4c\x84\x7a\xae\x20\xc3\x67\xd8\xc6\x03\x6c\xe0\x2b\x6c\xe0\x11\xb6\xcc\x63\x62\xbe\xc7\x23\x6c\x9a\x1a\xbe\xc0\x16\xb6\xce\x4a\x14\xe0\x20\x0b\x15\xa7\xc0\x0a\xd4\x15\x81\x90\x0c\x06\x28\x32\xd8\x9b\xb0\x65\xd2\xc2\xe2\x65\x4b\x14\xb1\xb1\xf3\xa5\x8e\x4d\x3c\x30\x7b\xe6\x21\x36\xb1\xf5\xcf\x7d\x82\x87\xd8\x36\x0f\xf1\x08\xdb\x66\xd7\xd4\xcf\x4e\x21\x57\x70\x15\x16\x4b\x9a\x09\xee\xb8\x61\x8e\xb9\x4e\x11\xb4\x04\xe5\x94\x40\x3a\xbe\x08\x65\x9f\x50\x91\x98\x74\xc4\xa4\x04\x92\x58\x71\xc2\xac\x49\x0b\x8b\x8d\x59\x65\xaa\x41\xa6\x5d\x11\x78\xf3\x31\xeb\x0f\x6c\xe3\x6b\x6c\xe3\x4b\x3c\xc2\x86\x79\x4c\x70\x3f\xfa\xd1\x38\x3b\x7d\x02\xcf\x89\x94\x73\x5c\x5a\xa2\x2e\xd3\x95\x13\x34\x1a\xcd\x9e\x84\x34\x93\x16\x16\x33\x69\x7c\x31\xe7\xee\xf5\x23\xb6\x4d\xcd\x3c\x36\x0f\x62\x61\x8c\x2f\x74\x42\x98\xf7\x94\x30\x10\x80\xab\x25\xb3\x4e\x99\x8f\x32\x7f\xe2\xeb\x68\xbf\xaa\x9b\x1a\xb6\xcc\x83\xa8\x44\xac\x5b\xe6\xcc\x70\x84\xbe\xbe\xb2\x7e\x82\x3f\x45\x90\x6e\x28\x2b\x8e\x5e\xb1\xfc\xd1\xd1\xe6\xe4\x68\xa1\x69\xd0\xe7\xcc\xcd\xac\x3f\x0b\xc2\xea\x18\x84\xd5\xd8\x10\xd6\xc6\x20\xac\xc5\x86\x70\x71\x0c\xc2\xc5\xb8\x10\x6e\x88\x40\xd3\x02\x8c\x86\xd9\xea\x08\xa3\xef\xb3\x02\x5c\x89\xaa\x9d\x71\x08\xb4\x2b\xed\x34\xa0\x0f\x72\x65\x06\x88\x6b\xa2\x0c\x72\xf4\xfc\x25\x2b\x8a\x6c\x35\xa0\xff\x0c\x53\xff\x8f\x6a\x0d\xb2\x32\x7a\xf2\x5c\x47\x38\xc6\x4c\x37\xa6\x84\x79\x1b\xc9\x6d\x8a\xee\xa1\xae\x81\x9f\xdd\x66\x2f\x4f\xbe\xcb\xeb\xa8\xdf\xb1\xd9\xc9\x3d\xd8\xc6\x43\x3c\x34\x7b\xf6\x00\x6d\x0f\xd3\xe6\xbe\xad\xb4\x92\x0b\xaa\x37\xbf\x9d\xb8\xa2\x58\x0c\x39\x73\xa9\x2d\x2a\xd2\x8c\x6b\x90\x1c\xe6\x3c\x83\xfc\x82\x47\xb6\x04\x32\xb5\xa8\x6c\xae\xcf\x7c\xf8\x50\x22\xaf\xb7\x98\x07\xc2\xc9\xd1\x80\x72\x17\x1c\x19\xe6\x02\x50\x43\xa9\x71\xaa\x79\x4d\xcd\xec\xe1\xf3\xcc\x7b\x19\xb6\xe4\xa3\xe4\x50\xc9\x17\x1c\xc6\x11\xa8\x17\xf2\xe6\x2e\xb6\xf1\x28\x31\x7a\x5c\x46\x2f\xb3\x3c\x9b\x2b\x68\x6f\xb2\xcf\x18\xc1\x03\x7c\x8d\x2d\x6c\xda\xf8\x35\x8f\x66\x8e\xdb\x22\xbb\x2d\x85\x66\xb7\x1d\xab\x8d\xe3\x06\x0c\xb8\x9e\x39\x68\x93\xfd\x73\xfa\xfd\xf3\x19\xb6\xf1\x45\xa7\xc2\x4b\xf6\xca\x37\x1f\x72\x65\xa0\xda\x07\x99\x16\xa1\xf6\x84\x90\x63\x73\xdc\x80\x5b\x08\x1e\x61\x83\x98\x3d\x1b\x57\xe6\x3e\x36\x93\x8c\x37\xbf\xf9\x19\x9f\xde\xfa\xfb\x36\xa7\xed\x63\xc3\xd4\x4c\x1d\x5b\xa6\xf6\x6e\x3c\xf0\xa1\xe6\x97\xa7\xe6\x9e\xa9\x45\xd7\xda\x49\x7e\x79\x0b\x04\x57\xe0\x86\x92\xe9\x4a\xba\x0c\x39\x97\x16\xd3\x4a\x4b\x18\x7f\x16\xc7\x5f\xb1\x81\x87\xd1\x31\x3b\x49\x33\xe3\x9e\x88\xc1\x0b\x3e\x0d\x82\xf4\xca\x74\x5e\xd8\x27\xd8\xc6\xe7\xd1\x7b\x9f\x43\x9b\x79\xda\xa6\x66\x6a\xd8\xc2\x97\xb6\x85\x4d\x62\xf6\x08\xee\x9b\x7b\xdd\x3b\xfd\x36\xfe\x4d\xf0\x25\xee\x47\x4f\xb7\x12\x9f\xc5\xec\xb3\xd5\xf8\x7c\x66\xc3\xea\xae\xa9\xdb\x34\x98\x38\x69\x6e\x27\x45\xb7\x0c\xae\x28\x8e\xf5\xcf\x4f\xd1\x7d\x50\x3b\x29\x12\x63\x33\x39\x70\x2d\x29\x77\x21\x3d\xe9\xe8\x34\xdd\xed\xce\x93\xe3\xfc\x15\xbd\x61\xea\xe6\x2f\xf3\xdd\xe8\x57\x2e\xc3\x9f\x6a\x95\xb0\x3c\x81\x3b\xfd\xaa\xd1\x6a\xa4\x9c\x9e\x82\x8e\xd2\x54\x1f\xff\x79\x66\x39\xb3\x3c\xed\x45\x4f\xa4\xdb\xcf\xd8\xc0\x03\x53\x33\x8f\x6c\xac\x4e\xab\x0f\x04\x6a\xea\xeb\xa4\x08\xe5\xa9\xa9\x9f\x01\x85\x7b\xef\x6b\xf9\x4b\x3e\x36\xb6\xd3\x3b\x21\x4d\xbb\x54\x8e\xbf\x86\xfa\xa1\x5b\x16\xec\x9a\x7a\x94\xe6\xdb\xf8\x57\x62\xf9\x18\x2c\x9f\x83\x20\x18\x6b\xf4\x27\x27\x4f\x3e\xaf\xa2\xb7\xd3\xf6\xc7\xc1\x07\x56\x94\xf5\xc3\xf9\xdc\xc0\x9f\x7c\x6f\xa9\x54\x2f\xc2\xab\x55\x62\xf3\x18\x73\x3f\xbf\xfe\xe5\x55\xb2\xd8\x69\x7f\xfb\xcd\x55\x92\xca\x7a\x54\xf9\x39\x41\xa5\x97\xa5\x4a\x81\x56\xd9\x2d\xe0\x9e\x90\x2a\x0b\xae\x4f\xa5\x56\xd9\x5b\xc7\xcd\x4c\x91\xf1\x8c\x9d\x35\x4f\x03\x05\x4b\x11\x1e\x39\xce\xa1\x19\x90\x52\x48\xd5\x83\xdc\x50\xae\x64\x25\x4d\x74\xa5\x04\x9b\x29\x0d\xdb\x3a\x7b\x8b\x6e\xd1\x4e\xef\x80\x2f\xcf\x2f\x7a\xc2\x0d\x8b\xc0\xf5\x52\x46\x02\xf5\x2a\x8b\xf9\x90\xbb\x9a\x09\x4e\x16\x97\x48\xf5\x84\x3d\xaa\x55\x22\x29\x2f\x00\x39\x0f\x17\xc8\xf9\x08\x8f\xac\x6f\x0e\x23\xf7\x3e\x1c\xca\xe4\xda\x57\x42\xb3\x7c\x65\xb1\x7a\xca\xdc\x51\xa1\xb9\x4e\x16\x3e\xb5\xcf\x2e\x5c\x38\x2d\x87\x6d\xbd\x4e\x16\xaa\xd5\x1e\xd0\xce\xce\xa8\x51\x95\x92\x9d\x04\xc6\x4c\xe2\x33\x0f\xd6\x3b\xe6\x3a\x2d\xb4\xac\x64\xbc\xb0\x4e\x16\x72\x42\x68\xa5\x25\x2d\xad\x2d\x9c\x18\xb5\xb3\x74\x69\x78\xfd\x43\x69\xbb\x37\x62\x23\xdb\x31\xec\x20\x17\xfa\xad\x7f\x03\x00\x00\xff\xff\x43\x04\xd5\x58\xfa\x2d\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 11770, mode: os.FileMode(420), modTime: time.Unix(1516274874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
