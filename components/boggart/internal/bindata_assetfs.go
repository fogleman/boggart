// Code generated by go-bindata.
// sources:
// templates/views/devices.html
// assets/js/devices.js
// locales/ru/LC_MESSAGES/boggart.mo
// locales/ru/LC_MESSAGES/devices.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x6f\xdb\x3c\x0c\xbe\xf7\x57\x10\x02\x5e\xa0\x3d\x24\x6a\x7b\x7a\x31\xa4\x01\x86\x75\xc5\x06\xa4\x03\x36\x64\xe7\x41\x96\x68\x44\x99\x23\x79\x22\xeb\xb6\x30\xf2\xdf\x07\xf9\xa3\x76\x33\xbb\x6b\xfa\x31\xec\xb0\x53\x5d\x91\xcf\x43\xf2\x11\x49\xa5\x2c\xc1\x60\x6a\x1d\x82\xd0\xde\x31\x3a\x16\xb0\xdd\x1e\x1c\xcc\x8c\x2d\x40\x67\x8a\xe8\x4c\x04\x7f\x2d\xc0\x9a\x33\x61\xb0\xb0\x1a\x49\xcc\x0f\x00\x00\xfa\x2e\x37\xdf\x72\xe5\x30\x6b\x2c\xbf\x5a\xd9\x72\x86\x3d\x6b\xe5\xb1\x3a\x9d\x97\x25\xd8\x93\xff\x1d\x88\xf3\x86\x1a\xa6\xb0\xdd\xce\xe4\xea\x74\xc7\xb7\xc7\xa6\x33\x54\x21\xb5\x37\x62\x3e\x93\xc6\x16\xbd\x90\x3b\xff\xde\xcb\xa0\xad\x6e\x9c\x97\x55\x92\xe1\x24\x20\xe5\xde\x91\x2d\x76\xd3\xad\xdc\x2b\x9f\x7b\x00\xa8\x61\xc4\xc1\xe6\x68\xc0\x70\x8f\x01\x9c\xbf\x0e\x2a\x17\x40\x7c\x9b\xe1\x99\xb8\xb6\x86\x57\x6f\x4e\x8e\x8f\xff\x1b\xe0\xae\xf9\x57\xa8\xcc\x98\x2d\x0c\x1b\x1a\x60\xa7\xe5\xf2\x36\xc7\x56\x48\x5e\x3d\x08\x6a\x4b\xd9\x98\x89\xf6\xd9\xe4\x54\x74\x2c\x1f\xcf\x9f\xc6\x71\xd2\xe3\x58\x2a\xfa\x4e\xa0\xfd\x55\x6c\xab\xe7\x92\x5d\x7e\x5e\x2e\x81\xae\x12\xd2\xc1\x26\x18\xe8\xf9\x8c\x6f\x35\x5b\xef\x1e\x4b\xd4\x6f\xd6\x98\x43\x1e\xc1\x7b\x63\x2b\x49\xf6\x46\x55\xb5\xb3\xcf\xad\xfe\x2d\x76\x26\xc7\x1a\x25\x62\x06\xdb\x6b\x26\xab\x26\xde\x19\x8d\xd1\xe1\x6a\x3e\x9b\x3f\xc3\xab\x22\xb3\xc4\xe8\xe2\x2d\xbd\xdc\xb2\x98\xd9\xd6\x27\x55\x90\xaa\x89\x41\x95\xc6\x25\x60\xe7\x70\x27\xd4\xe2\x2e\xee\xbf\x4d\xf2\xfc\x4d\xf2\x49\x6d\x1e\xbb\x49\x9e\xb0\x38\x3a\xc8\x85\x0d\xb8\xff\x50\x5c\xd8\x40\x0c\xa9\x0d\x68\xf6\xc6\x2e\xd4\x93\xa1\xef\x0b\x74\xfc\xd7\x8d\x61\x59\x02\x3a\x53\xbd\xdd\xbd\x37\x3d\x06\xaa\x1e\xf4\x08\x28\x4b\x20\x56\x6c\xf5\x87\xe5\xe5\x02\x0e\xeb\xef\xaf\x5f\x16\x20\xa4\x51\xb4\x4a\xbc\x0a\x46\x2a\x22\x64\x92\x05\x3a\xe3\x03\x49\xa3\x58\x55\x59\xd1\xd4\x21\x4f\x12\x92\x9a\xea\xd3\x65\x7d\x9a\x78\xcf\xc4\x41\xe5\xd3\x8d\x75\x53\x4d\x24\x20\x55\x19\xe1\xd1\x0b\x46\xed\xe6\xa0\x4d\xa0\x3b\x79\x38\x81\x61\x55\xd6\xf4\x82\x9a\xc8\x35\xc9\xf5\x8f\x2b\x0c\xb7\xd3\x9e\x2c\x31\x97\xf5\x6b\x68\x91\x50\x0c\x38\x7a\x01\xaf\x12\xb3\x53\x7b\x27\x76\xef\x1a\xfe\x40\xf0\xa6\xf6\xd1\xbb\xdf\x23\xfc\x61\x1e\xac\x63\x10\x52\xc0\xf4\x9d\xdf\xe4\xde\xa1\xe3\xb8\xed\x40\xb4\xe9\xc4\x4a\xeb\x1f\xa5\x91\xf8\x68\xa8\xa9\x7e\x06\x00\x00\xff\xff\xc8\xd5\x20\x15\x3d\x0b\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 2877, mode: os.FileMode(420), modTime: time.Unix(1545003767, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsDevicesJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdf\x6f\xda\xc8\x13\x7f\xef\x5f\x31\xa5\x91\xd6\x56\xc0\x7c\xbf\x3a\x9d\x74\x72\x62\xee\xa1\xe9\x43\xa5\xea\x5a\x29\x79\x4b\xab\x68\xf1\x8e\xcd\x36\xcb\x2e\xb7\xbb\x86\x70\x15\xff\xfb\x69\x6d\xe3\xe0\x10\x6c\x13\xe0\x9a\x93\xce\x0f\xc8\x36\x33\xb3\x33\xf3\x99\x9f\x3e\xf3\x98\x8a\xb3\x29\x4a\xeb\x07\x1a\x29\x5b\x7a\x49\x26\x63\xcb\x95\x04\xcf\x87\x1f\x6f\x00\x00\xe6\x54\x83\xa5\x63\x81\x57\x38\xe7\x31\x1a\x88\xe0\xcc\x23\xef\x58\xf9\x94\xff\x45\xfc\x9c\xd4\x5d\xc1\x15\xb5\xf4\xc6\xbd\xf4\x7e\x54\x2f\xdd\x35\xa3\x29\x7e\x42\x99\xda\x49\x08\xbf\xfe\xaf\x5f\xfb\x4f\x50\x99\x66\x34\xc5\x10\xea\x3c\xee\xca\xb4\x08\x81\x0c\x19\x35\x93\xb1\xa2\x9a\x0d\x19\xb5\x34\x3f\xd5\x0c\xf9\xff\x7f\x93\xc1\x77\xa3\x24\xa9\xb1\xad\xea\xd2\xe9\x77\xfa\xd0\x20\x79\xac\xd2\x94\x6a\x3b\x2c\x2d\x1a\xfe\x8e\xd2\x72\xbb\x8c\xca\x67\xd2\xdf\x62\x74\x1a\x5c\xeb\x38\x04\xe2\xee\x1a\xcf\x8e\x95\xc8\xa6\xd2\x84\x70\xbb\x25\x65\x5b\xa1\xb5\xec\x10\x88\x5d\xce\x9e\x3d\xda\x5d\x1a\x25\x43\x1d\xc2\x23\x56\x39\xb5\xbf\x43\x22\x94\x20\xc6\x4a\x5a\x94\x16\x22\x20\xe4\xe2\xcd\x4e\xd2\x44\x69\xf0\x1c\x3d\x07\x2e\xa1\x55\x72\x61\x64\x21\xf9\x3c\x02\x72\x69\x66\x54\x42\x2c\xa8\x31\x51\x4f\xd0\x31\x0a\xc8\x7f\x07\x26\x8b\x63\x34\xa6\x37\x22\x70\x5e\x88\xbd\xe5\xdf\xe0\x1c\xc8\xe5\xd0\xb1\x8c\x80\x5c\xec\x3c\x64\xb5\x5b\x5d\x8d\x36\xd3\x72\xad\xc2\xf3\x22\x56\x5b\x6f\x57\xdb\x9e\x6d\x84\x83\x33\x72\xb0\x0c\x4b\xcd\xfd\x1e\x90\x3a\xea\x26\xc7\x97\x86\xe7\x74\x81\xc8\x13\xeb\x54\xd6\x4f\xff\xb4\xf6\xce\xaa\x19\x8f\xf7\xd0\x3f\x27\xef\x62\x40\x4e\x78\x62\x0b\x50\xba\x82\xc1\x3a\x6b\xef\xd8\xfa\x79\x94\xf6\x41\xab\x45\xc7\xd4\x6a\xc8\x2a\x9e\x80\xa7\xd5\x22\x28\x15\xe9\x9a\x51\x2e\xa1\xc6\x99\xb5\xaa\xc8\xc4\xa8\x57\x3c\xf4\xd6\x09\x36\xb6\x12\xc6\x56\x0e\x18\x95\x29\xea\xfc\x96\xc7\xee\x7f\x67\xc0\xc0\xaa\x34\x15\x18\xf5\xa6\x8a\x51\xb1\x7e\x47\x75\x8a\x36\xea\xbd\xdb\x7c\x99\xdf\x0f\x2c\xb7\x8e\xfa\xbd\x92\x09\xd7\x53\x60\xdc\x38\x5d\xa1\xa8\x83\xf0\xce\xe5\xad\x33\x81\x33\x97\xb5\x35\xce\x98\x0a\x31\xa6\xf1\x7d\xd4\x2b\x88\x6f\xf2\x83\xbd\xaf\x64\xcd\xa3\x31\xe5\xc6\xa2\xbe\x2b\x98\xbf\x12\xff\x22\x2f\x04\x8d\x4e\x70\x17\xb9\xe4\x6b\x5b\x53\xb1\x9c\x4d\x9c\x75\x50\xdd\x0d\x34\x4e\xd5\x1c\x7b\x50\xaa\x7e\x55\x53\xb9\x37\xba\x1c\xf2\xd1\x76\xe2\xae\xaf\x15\xa0\x30\x78\x64\x24\xca\x32\x77\x5c\x28\x8a\xa8\x79\xd5\x48\xa8\xfb\x0a\x85\x0f\x72\x1f\x10\x5a\x4b\x3b\xb9\x64\x7c\xbe\xe1\xe6\x41\xaa\x55\x36\x83\xea\x6e\xf0\x50\x36\x95\xaa\x0d\xb9\x9e\x52\xc0\xd3\x6a\x59\x37\x50\xb9\x4c\x54\x85\x68\x69\xd8\x20\x9e\x60\x7c\xdf\x1b\xb5\x05\x68\xa2\xd1\x4c\x2a\xdf\xbc\x2f\x99\x86\x7c\x74\x64\x1d\x17\x54\x4b\x2e\xd3\x2d\x35\x67\x5c\xa6\xed\x5a\x1a\xfe\x17\x0e\xcc\x94\x0a\x51\xa9\xfa\xa5\x60\xdc\x4f\xd3\x21\xe3\xf3\xd1\x8e\x4e\x7e\x78\x19\x67\x68\x62\xcd\x67\xae\x46\xbf\xba\x7e\xfc\xf2\x11\xab\x4d\x32\x74\x1d\xb1\x66\x9a\x4f\xa9\x5e\x96\x23\x96\x13\xfb\x2f\x1a\xb1\x4e\x33\x64\xbc\x1c\x95\x56\xd1\xd0\x15\x16\x57\x3d\x4a\x4c\x72\xa1\x3f\x13\x94\xda\x9b\x6f\xd5\xd3\xca\x2f\x1d\x53\x6d\x7b\x9f\x5c\x97\x90\xa8\xd7\xfb\x9e\xa8\x9e\x3b\x6f\x7c\xaf\x72\xab\xab\xec\xf8\x39\x7b\x9d\xa4\x53\x3c\xbc\x74\x1d\x63\x1d\x49\xb8\x46\x73\x1c\x31\x77\x09\xd7\xc6\xee\x33\x5c\x63\x53\x62\xb9\x59\xf9\x6d\x1b\x11\x6c\x0c\x08\x07\x65\x90\x3b\xe8\x46\x5d\x5b\xcd\x65\x5a\xa8\x76\xaa\x0a\x97\xbb\x4a\xd0\xff\x3c\x05\xad\xeb\xda\x1c\xa5\xed\xde\x06\x1c\xd7\xb1\x9b\x40\xae\xc2\x47\xe6\x5a\x41\x9b\x78\xd8\xbf\x11\x38\x91\xb7\xe5\x11\xaf\xb7\x19\x6c\x7d\xe7\x03\x3b\x56\x6c\x49\xfc\x40\x49\x8f\xc4\x82\xc7\xf7\xa4\x0f\xa4\x18\x0e\x83\xcd\xb1\x98\xf4\x37\xe0\xa9\x45\x27\x06\x33\x9d\x1b\x7e\x85\x09\xcd\x84\xf5\x36\x82\xc8\xf9\xbd\x90\xf2\x91\x41\x54\xfb\xea\x18\x68\xb5\xf0\xce\x3c\x3b\xe1\xc6\x0f\x62\xa1\x0c\x1a\xeb\x11\xab\x89\xef\x07\xce\x99\x9e\xbf\xb9\xd9\x6c\x00\x7c\x16\xb8\x46\xf1\xa4\x33\xb9\x41\x3a\x04\xf2\xe5\xf3\xf5\xcd\x93\x20\xdb\xd1\x3d\x72\xcc\xd6\x9a\x9d\x03\x19\x96\x56\xd6\x78\xcb\xd5\xef\x31\x32\xbd\xe7\xa2\xa6\x66\x95\xd3\x2d\xd0\x28\x14\x65\xde\x93\x6c\x5a\xd5\xf0\x38\x1c\x17\xb7\x07\x1c\x0a\xcb\xde\xa0\x9c\x10\x88\xa7\x9b\xec\xb0\x30\xb0\x05\x11\xfd\x1c\x24\xf9\xc7\x99\x5c\x63\x78\x1b\x45\x40\x32\xc9\x30\xe1\x12\x19\xd9\x95\xf6\x79\xe1\x2d\x58\x9a\x2a\x83\xc4\x05\x7c\xf9\x43\x59\x9e\x2c\xbd\xe6\xfa\x91\xef\x5c\x21\x90\xcf\x49\x22\xb8\xc4\x1d\xa5\xaf\xa2\xc6\x07\x1b\x02\x29\x60\x80\x0d\x9f\x14\xae\x00\x6e\x40\x75\x13\x54\xf8\x1f\xb5\x56\xba\x85\xd4\xd8\xa5\xe0\x32\x0d\x81\x8c\x95\xb2\xc6\x6a\x3a\xfb\xa5\x61\xad\xdf\xd5\x1b\xda\xbe\xb9\xbc\xc0\x65\xf2\x48\x1e\xeb\x24\xa7\x70\x58\x19\x58\xff\x8c\xcb\x5a\x0a\x77\x43\xa1\x58\x70\xc9\xd4\x22\xd8\xfc\x14\x04\xd1\x63\x32\xac\x2b\xda\x66\x08\x9f\xa8\x5e\x16\xdf\xbf\x0e\x49\x4f\x8d\x26\x13\x16\x22\x97\xa0\x09\xe5\xa2\x21\x3b\xbb\xc5\xd0\x3a\x7e\x3e\xb4\x04\x7f\x11\x3a\x3a\x98\xa2\x31\x34\xc5\x06\xc2\x6e\xc9\x34\xe1\x0c\x43\x48\xa8\x30\x0d\xb2\xba\x87\xce\xae\xb0\x29\x66\x82\x67\x62\xe7\x98\x1d\xe9\xcd\xca\xbf\xf8\x3b\x00\x00\xff\xff\xb6\xaf\x5e\xb5\x45\x1c\x00\x00")

func assetsJsDevicesJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsDevicesJs,
		"assets/js/devices.js",
	)
}

func assetsJsDevicesJs() (*asset, error) {
	bytes, err := assetsJsDevicesJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/devices.js", size: 7237, mode: os.FileMode(420), modTime: time.Unix(1545004025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesBoggartMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6a\x14\x41\x18\x85\xdf\x84\xb8\xe9\x8d\xe8\xda\xc5\xef\xc2\xa0\x68\xc5\xaa\x6e\x03\xa1\x66\x6a\x22\xc6\x04\xc4\x0c\x8e\xb1\x75\xff\x93\x29\x7b\x1a\xa7\xab\x9a\xaa\x6a\x51\xc8\x0d\x5c\x7b\x02\xaf\xe0\x46\x88\x1e\xc0\x55\x7b\x01\xcf\x22\xd3\x43\x0c\x79\xab\xef\xa3\x5e\x3d\xfe\xbf\xb7\xb7\xbf\x02\xc0\x16\x80\x3b\x00\x1e\x01\xb8\x01\x60\x82\x4d\xe6\x00\x6e\x02\x78\x0d\x60\x39\x02\x18\xc0\x2d\x00\xbf\x47\xc0\x08\x57\xd9\xba\x84\xc6\xba\x6e\xfb\x4d\xc3\x21\xd1\xd2\x37\x16\xa7\xb6\xf5\x21\x89\x59\xac\xea\x85\x78\xd6\x55\x51\x94\x5e\xd3\xc2\x7e\x7c\xfa\xa1\x5e\x72\xe3\x77\x43\x97\xcd\x5f\x95\xe2\x30\x58\x4e\xb5\x77\xe2\x39\x27\xab\x29\x97\x6a\x5f\xc8\x42\xe4\x05\xe5\x85\xde\xdb\x7b\x28\x0b\x29\xb3\x13\x8e\x49\x94\x81\x5d\x5c\x71\xf2\x41\xd3\xcb\x61\x83\x66\x5d\xe0\xc6\x2f\x3c\x4d\xae\x0d\x4f\xb3\x13\x76\x55\xc7\x95\x15\xa5\xe5\x46\xd3\x7f\xd7\x74\xda\xc5\x58\xb3\xcb\x66\x2f\x66\x47\xe2\x9d\x0d\xb1\xf6\x4e\x93\xda\x95\xd9\xa1\x77\xc9\xba\x24\xca\xcf\xad\xd5\x94\xec\xa7\xf4\xb8\x5d\x71\xed\xc6\x74\xb6\xe4\x10\x6d\x32\x6f\xcb\x63\xb1\x7f\xd5\x5b\xdf\xf3\xde\x06\x71\xe4\xce\xfc\xa2\x76\x95\xa6\x6c\xbe\xea\x02\xaf\xc4\xb1\x0f\x4d\xd4\xe4\xda\x41\xa3\x29\xc6\xb4\x41\xe3\xee\x29\x69\x8c\xa2\x9d\x1d\x5a\xa3\xbc\x6b\x94\xa2\x03\x92\xa4\x07\x9f\x9a\xfc\xf2\x69\x62\x9e\xac\xf1\xfe\x50\x9b\x28\x49\xe7\xe7\x9b\x2f\x53\x93\xcb\x07\x74\x40\x8a\x34\xe5\x63\xf4\xdf\xfa\x8b\xfe\xe7\x9f\x2f\xfd\x0f\xea\xbf\xf7\xbf\xfa\x0b\xfc\x0b\x00\x00\xff\xff\x6d\x20\x21\x24\xdc\x01\x00\x00")

func localesRuLc_messagesBoggartMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesBoggartMo,
		"locales/ru/LC_MESSAGES/boggart.mo",
	)
}

func localesRuLc_messagesBoggartMo() (*asset, error) {
	bytes, err := localesRuLc_messagesBoggartMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/boggart.mo", size: 476, mode: os.FileMode(420), modTime: time.Unix(1545004032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesDevicesMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x52\xcf\x6f\xdc\x44\x14\xfe\xbc\x36\x3f\x62\xca\xaf\xaa\x88\x0b\x48\xc3\x81\x0a\x04\x2e\xf6\x2e\x95\x2a\x27\x4e\x0b\xdd\x44\xaa\xc8\x42\xa9\x4c\xef\x93\xdd\xe9\xc6\xea\xae\xbd\xf2\x78\x23\x40\x45\x6a\xc2\xa1\x45\x91\x8a\xa8\x40\x70\x81\xa8\xfc\xb8\xa2\xa5\xca\xc2\x36\x21\xce\x81\x03\x47\xde\x70\xe2\x02\x57\xfe\x01\x0e\x1c\xd1\x78\xdc\xa0\x76\x0e\x9e\xf7\xbd\xf9\xde\xf7\xbe\xf7\xe4\xbf\x8e\x3a\x9f\x01\xc0\x93\x00\x9e\x01\xf0\x2d\x80\xa7\x01\xbc\x6c\xa1\x3a\xd7\x2d\xe0\x21\x00\x1f\x59\xc0\x23\x00\x3e\xa9\xf1\x97\x16\xf0\x30\x80\xef\x6a\xfc\xbd\x05\x3c\x08\xe0\x47\x0b\x78\x00\xc0\x7e\xcd\xff\xc5\x02\x1a\x00\x7e\xb3\x00\x17\xc0\xef\x16\x30\x07\xe0\x4f\x0b\x78\x02\xc0\xdf\x35\xef\x5f\x0b\x70\x00\x38\x0d\x53\x3f\xd7\x30\xf8\xf1\x06\xb0\x66\x01\xc7\x1a\x86\xff\x81\x6d\xee\x1b\x36\x70\x0c\xc0\xb6\x0d\x1c\x05\xb0\x53\xe7\x7f\xb5\x81\xc7\x00\xfc\x61\x03\x47\xb4\xbe\x6d\xe6\xf9\xc7\x36\x3e\x8e\x38\xc0\xb3\x5a\xd7\x31\x75\x9e\x03\x3c\x05\xe0\x8c\x63\x76\x70\xd1\x31\x73\xac\x39\xc6\x6f\x56\xe3\xf7\x1d\xa0\x5e\x49\x75\xf4\xec\x36\x4c\x2f\xdd\x57\x7b\x9d\xab\xf7\xa8\x8f\xee\xad\xeb\xdc\x1a\xeb\x1d\xe9\x39\x1b\x35\xd6\x33\x3e\xaa\x7d\xdc\x15\x7c\xad\x5b\x24\x59\x2a\xd1\x16\xb2\x9b\x27\x23\x0d\xd0\x16\xeb\x49\x57\x48\xb4\x13\xc9\x57\x07\xa2\x87\xa5\xb4\xbe\xd7\x45\x5a\x48\x2c\x27\xb9\xa8\xbe\xb2\x60\x97\x92\x5c\xf4\x70\xae\x8d\x15\x7e\x88\x56\x12\x59\x88\x54\xe4\x12\x9d\xb7\xe3\x98\xc9\xf1\xaa\xd6\x5e\x3d\x4c\x14\xd9\x28\xe9\x4a\xbc\xc9\x87\x02\x31\x97\x97\x25\xe2\xf7\x46\x02\x17\xc4\x28\xcb\x0b\xaf\x23\xfb\x49\xcf\x7b\x7d\xdc\x97\x5e\x9c\x85\xac\x27\xd6\xcf\x5c\x4e\xd6\xf8\x30\x3b\x91\x8f\xdd\xf3\x6f\xc5\xde\xd9\x5c\x70\xed\xd3\x6b\xf3\x42\x84\xac\xe9\x07\xa7\x3c\xbf\xe5\x35\x5b\xac\xd9\x0a\x4f\x9e\x7c\xc9\x6f\xf9\xbe\xab\xed\x78\x71\xce\x53\x39\xe0\x45\x96\x87\xec\x8d\x4a\x83\x75\xc6\x39\x1f\x66\xbd\x8c\x2d\xdc\x23\xbc\xe8\xae\xf0\xb4\x3f\xe6\x7d\xe1\xc5\x82\x0f\x43\x76\x88\x43\x76\x61\x2c\x65\xc2\x53\xb7\x73\xae\xb3\xe4\x5d\x14\xb9\x4c\xb2\x34\x64\xc1\x09\xdf\x3d\x9b\xa5\x85\x48\x0b\x4f\xdb\x0f\x59\x21\xde\x2d\x5e\x19\x0d\x78\x92\xce\xb3\xee\x1a\xcf\xa5\x28\xa2\x77\xe2\x65\xef\xd4\xff\x3c\xed\xe7\x92\xc8\xbd\xa5\xb4\x9b\xf5\x92\xb4\x1f\x32\xf7\xfc\x60\x9c\xf3\x81\xb7\x9c\xe5\x43\x19\xb2\x74\x54\x41\x19\xb5\xe6\x99\x09\xa3\xf4\xf9\xc0\x8f\xa2\x80\x1d\x3f\xce\x74\xe8\x3f\x17\x05\x01\x3b\xcd\x7c\x16\x56\x78\x31\x6a\xde\x7d\x5a\x88\x5e\xd5\xe1\x0b\x15\x6d\x21\xf0\xd9\x95\x2b\xa6\x64\x31\x6a\xfa\x2f\xb2\xd3\x2c\x60\x21\x6b\xce\x83\x3e\xa5\x29\xdd\x51\x1b\x6a\x93\x6e\xd3\x4c\x7d\x0c\xfa\x8a\x0e\x68\xa6\x36\x68\x42\xfb\x34\xa3\x29\xe8\x1b\xfd\xaa\xae\x52\x79\xc8\x9b\x80\x6e\xaa\x2d\xda\xa5\x3d\x75\x43\x5d\xa3\x29\xed\x53\x09\xba\x79\x7f\xe2\x16\x95\xf4\x83\xda\x52\x9b\x46\x58\x97\xfc\x44\x25\xdd\x56\x5b\xa0\x6d\x9a\xaa\xab\x3a\xa4\x3b\xac\xba\xaa\x17\xfd\xf3\xd0\x36\x95\x6a\x83\xf6\x68\x4a\x3b\x95\x85\x7b\x08\x74\x8b\xf6\xd4\x87\xea\x3a\x4d\xd4\x26\x4d\x69\x8f\x66\xe6\x3f\xa2\x03\x2a\x69\xa7\xb6\x5e\xd2\xae\xc9\xaa\x4d\x2a\x75\x8e\x76\x69\x06\xfa\x82\x7e\xd6\x3e\x3e\xa7\x09\xed\xd0\x44\x5d\x03\x7d\x4d\x33\x3a\xc0\x7f\x01\x00\x00\xff\xff\x55\x1d\x50\xcd\x81\x04\x00\x00")

func localesRuLc_messagesDevicesMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesDevicesMo,
		"locales/ru/LC_MESSAGES/devices.mo",
	)
}

func localesRuLc_messagesDevicesMo() (*asset, error) {
	bytes, err := localesRuLc_messagesDevicesMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/devices.mo", size: 1153, mode: os.FileMode(420), modTime: time.Unix(1545004032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/devices.html":      templatesViewsDevicesHtml,
	"assets/js/devices.js":              assetsJsDevicesJs,
	"locales/ru/LC_MESSAGES/boggart.mo": localesRuLc_messagesBoggartMo,
	"locales/ru/LC_MESSAGES/devices.mo": localesRuLc_messagesDevicesMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"devices.js": &bintree{assetsJsDevicesJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"boggart.mo": &bintree{localesRuLc_messagesBoggartMo, map[string]*bintree{}},
				"devices.mo": &bintree{localesRuLc_messagesDevicesMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
