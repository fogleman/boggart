// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xa8\xad\xe5\xe2\xaa\xae\x56\x48\xcd\x4b\x01\x31\x01\x01\x00\x00\xff\xff\x3e\x64\xd4\x00\x22\x00\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 34, mode: os.FileMode(420), modTime: time.Unix(1515575925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\x1a\xc7\x17\x7f\xcf\xa7\x18\xa1\x48\xb6\xa5\x00\xbe\xe4\xc9\xb1\x23\x25\xff\x4b\x5b\x29\x69\xa3\x26\x4d\x1e\x57\xc3\xee\x01\x26\x59\x66\xc8\xec\xac\x31\x42\x96\x30\xce\xa5\x91\x5b\x25\x4a\x2b\xb5\xaa\xaa\xa4\xaa\xd4\xc7\x4a\xc4\x09\x0d\xb5\xcd\xe6\x0b\xf4\xe1\xcc\x37\xaa\x66\x01\x1b\x63\xa0\x60\x36\xce\xa5\xcb\x0b\xc3\x9c\xd9\x39\xb7\xdf\x39\x73\xce\x2c\x95\x0a\x71\x20\xcb\x38\x90\x84\x2d\xb8\x02\xae\x12\x64\x63\xe3\xcc\x8a\xc3\xd6\x88\xed\x52\xcf\x5b\x4d\x48\x51\x4a\x5c\x3c\x43\x08\x21\xbd\xb3\xb6\x70\x93\x05\x27\xb9\xb0\xd8\xa1\xf5\xd3\x7b\xa6\xfb\x49\xeb\x96\x62\xca\x85\xbe\x15\xe1\xaa\xfc\xe2\x45\xfc\x05\x1b\x7a\x53\x6f\xe9\xaa\xde\xd4\xdb\x2b\xe9\xfc\xe2\x80\x75\xbd\x82\xb8\x40\x65\x96\xad\x27\x2e\xae\xa4\x1d\xb6\xd6\xc7\x76\xc0\xd4\x11\x49\xba\x4a\x8f\xe6\x71\x68\x82\x91\x92\xb4\x4d\xb2\x44\xcc\x60\xdd\x4b\x2e\x2c\x92\x12\x73\x72\xa0\x3a\x5f\x96\xa2\xae\x5b\xb6\x32\x62\x7d\xc8\x66\xc7\xc5\x2b\x52\x0e\xee\x88\xd5\x93\x28\x34\xf0\x39\xe6\xac\x26\x24\x78\xc2\x97\x36\x24\xf3\x40\x55\x92\xf1\x04\xf1\x54\xd9\x85\xd5\x44\x1e\x58\x2e\xaf\x96\x97\xe6\xe7\x8b\xeb\x17\xc6\xd8\xd1\x7c\x3e\xe3\x63\x2d\xab\x54\x48\x2a\x23\x72\x39\x2a\x95\x55\xf4\x5d\x8f\x4a\x4b\x41\xa1\x08\x92\x2a\x5f\x82\xc5\xb8\x65\x83\xeb\x31\xdf\x4b\xdd\xa4\xae\x0f\x64\x63\x83\xfc\x67\xac\x8d\x57\x32\x92\xa4\xc7\x13\xf5\x0b\x5f\x45\x21\xab\xf0\xd5\x29\x08\xfb\x5f\x70\x15\x8d\x42\x5c\xc7\x6c\x74\x12\x81\x07\xc4\xd2\x84\x4b\x46\x90\x3b\xa4\x7f\x49\x8c\x09\x5f\x4d\x15\x64\xf8\x1c\x03\xdc\xc5\x3a\xbe\xc6\x3a\xb6\xb0\xa9\x1f\x13\xfd\x2d\xb6\xb0\xa1\xab\xf8\x12\x9b\xd8\x3c\x29\x50\x80\x83\xcc\x95\xad\x1c\xcb\x51\x5b\xb8\x42\x32\xe8\x81\x48\xef\x6c\x8c\x96\x51\x8a\x45\x8b\x96\x30\x62\x23\xc7\x4b\x0d\x1b\xb8\xab\xb7\xf4\x23\x6c\x60\xf3\xaf\x07\x04\xf7\x31\xd0\x8f\xb0\x85\x81\xde\xd4\xb5\x93\x43\xc8\x16\xdc\xf3\x0b\x45\xc5\x04\xb7\x6c\x3f\xc3\x6c\xab\x00\x4a\x82\x67\x15\x41\x5a\x79\xe1\xcb\x43\x40\x85\x64\xd2\x26\x93\x22\x48\x62\xc8\x31\xb2\x46\x29\x16\x19\xb2\x4a\x54\x81\x4c\xda\xc2\x75\xa6\x43\xd6\x6f\x18\xe0\x1e\x06\xf8\x0a\x5b\x58\xd7\x8f\x09\xee\x84\x3f\xea\x27\x87\x8f\xeb\x58\xa1\x70\x96\x4d\x8b\xd4\x66\xaa\x7c\x04\x46\x83\xd1\x13\x83\x66\x94\x62\x11\x83\x26\x2f\xa6\x3c\xbd\xbe\xc3\x40\x57\xf5\x63\xfd\x30\x12\xc4\xe4\x85\x8a\x01\xf3\x9e\x02\x06\x5c\xb0\x95\x64\xc6\x29\xd3\x41\xe6\x77\xdc\x0b\xcf\xab\x9a\xae\x62\x53\x3f\x0c\x5b\xc4\x9a\x41\xce\x04\x25\xf4\x8d\x85\xe5\x23\xf8\x29\x80\xb4\x7d\x59\xb6\xd4\x82\xc1\x8f\x0a\x0f\x27\x4b\x09\x45\xdd\x43\xcc\xdc\x4a\xe7\x27\xe1\xb0\x38\x84\xc3\x62\x64\x1c\x96\x86\x70\x58\x8a\x8c\xc3\xf9\x21\x1c\xce\x47\xc5\xe1\xa6\x70\x15\xcd\xc1\x60\x36\x6b\x6d\x62\xf8\x7d\x52\x06\x97\xc2\x6e\x67\x18\x07\xda\xa1\xb6\x07\x70\xc8\xe4\xd2\x04\x2c\xae\x89\x12\xc8\xc1\xfb\x17\x0d\x29\xb4\x55\x8f\xfc\x13\x6c\x7d\x99\x2a\x05\xb2\x3c\x78\xf3\x4c\x9b\x38\xc4\x4c\x37\xc7\x64\x73\x1a\xc9\x6d\x8c\xe9\xbe\xa9\x9e\x9f\x9d\x61\x37\x4f\xbe\xcb\xeb\xa8\x5f\xb1\xd1\xce\x3d\x18\xe0\x3e\xee\xeb\x2d\x53\x40\x9b\x62\x5a\x3f\x30\x9d\x56\x7c\x41\xf5\xf6\x8f\x13\x5b\x14\x0a\x3e\x67\x36\x35\x4d\x45\x92\x71\x05\x92\xc3\x94\x35\xc8\x8f\xd8\x32\x2d\x90\xae\x86\x6d\x73\x6d\xe2\xe2\xc3\x13\x59\xb5\xc6\x1c\x10\x56\x86\xba\x94\xdb\x60\x49\x3f\xe3\x82\xd7\x97\x1a\xc7\xda\x57\x57\xf5\x16\xbe\x48\xbd\x97\x61\x4b\x3e\x4a\x0c\x15\xf3\x82\xc3\x74\x00\xfa\x19\x9b\xd8\xd2\x5b\xba\xa6\xb7\x09\xbe\xc1\xc0\x74\xd4\xf5\xb0\x3a\xb9\x67\x9a\x68\x93\x29\xcc\xfc\x9e\xe9\xb8\xf5\xd6\xc4\xf8\x2a\x88\x0c\x73\xc1\x2a\x40\x8e\x66\x05\xb7\x7c\x0f\x1c\x6b\x4d\x30\x1b\xac\x02\xe3\xbe\xea\xa9\x6b\xc7\x13\x77\xbf\x2b\x6e\xd4\x17\x93\xd7\xaf\x5e\x3f\x2d\xfd\xbd\xc2\x84\x5a\xeb\xaf\x75\xed\x9f\xc3\x8a\x4c\xa6\x70\x7f\xea\x38\x2d\xed\xbb\x79\x2f\xbc\x9d\xcb\x94\x27\x86\xc0\x27\x97\xa3\x37\xc5\x13\xdc\xd1\x35\x0c\xf0\x8d\xae\x86\x4d\x9c\x39\x28\xcd\xf1\xd8\x88\x56\xe3\xa2\x14\xae\xe0\xb9\x30\x76\x4f\xae\x7e\x94\xda\xc7\xa9\x38\xaa\x54\x5c\x62\x59\x36\x55\x26\xbe\xc5\xfe\xcf\x08\xee\xe2\x9e\xc1\x9d\x09\x4d\xbd\x3d\x39\xfa\xd8\x1d\x29\x14\xbb\x63\x19\x69\x2c\xdb\x65\xc0\xd5\xc4\x47\x79\x5c\x55\x8f\x5f\x55\x3f\xc7\x00\x5f\xb6\xef\x7d\xe2\x0a\xfa\xed\x87\x5c\x09\xa8\xca\x83\x4c\x0a\x5f\x39\x42\xc8\x61\xf1\xd6\xeb\x16\x82\x2d\xac\x13\xbd\x65\xe2\x4a\x3f\xc0\x46\x9c\xf1\xa6\x37\x3f\xe3\xe3\x5b\x7f\xc7\xe4\xb4\x1d\x53\x54\xe8\x1a\x36\x75\xf5\xdd\x78\xe0\x43\xcd\x2f\xcf\xf4\x7d\x5d\x0d\x5f\x76\xc5\xf9\xe5\x14\x00\xee\x81\xed\x4b\xa6\xca\xc9\x12\x64\x6c\x5a\x48\x7a\x4a\xc2\xf0\x0e\x1d\x7f\xc2\x3a\xee\x87\x15\x74\x9c\x66\x86\x3d\x11\x81\x17\xf2\xd4\x75\x93\x0b\xe3\x79\x61\x87\x60\x80\x2f\xc2\xb7\xc1\xfb\x26\xf3\x04\xba\x6a\xda\x19\x7c\x65\x46\xd8\x20\xa6\x9f\xd9\xd1\xf7\x3b\x6f\xfa\x02\xfc\x93\xe0\x2b\xdc\x09\x9f\x6e\xc6\x3e\x8b\xd8\x67\x8b\xd1\xf9\xcc\x84\xd5\x3d\xd3\x9c\xc6\x4e\x8a\xc0\x49\x61\x47\x6a\x8b\xc2\x50\xff\x7c\x1f\xde\x12\x07\xfa\x1e\x06\xd8\x8a\x4d\x1e\x81\xc9\x81\x2b\x49\xb9\x0d\xc9\x51\xa5\xd3\x78\xb7\x15\x4f\x0f\xf2\x57\xf8\xde\xb9\x93\xbf\xf4\x37\x83\x5f\xc4\xf6\x7f\x2a\x15\xc2\xb2\x04\xee\x1e\x76\x8d\x46\x22\xcf\xea\x0a\x68\x79\x8a\xaa\x83\xbf\xd4\xcd\xa7\xe6\xc7\xbd\x99\x08\x65\xfb\x01\xeb\xb8\xab\xab\x7a\xdb\xc4\xea\xb8\xf2\x80\xeb\x8d\x7d\xff\x11\x72\x79\xa6\x6b\x27\xe0\xc2\x9d\xf7\xb5\xfd\x25\x1f\x1b\xda\xe9\x5d\x9f\x26\x6d\x2a\x87\x5e\x4e\xe3\x93\x4e\x5b\xb0\xa9\x6b\x61\x9a\x0f\xf0\x8f\xd8\xf2\x11\x58\x3e\x03\xae\x3b\xd4\xe8\x4f\x8f\x56\x3e\xaf\xc3\xff\xac\x98\x1f\xbb\x1f\x58\x53\x76\x18\xce\x67\x7a\xfe\xfa\x7f\xdb\x4b\x74\x23\xbc\x52\x21\x26\x8f\x31\xfb\xd3\x1b\x57\xaf\x90\xd9\xf6\xf8\xab\x2f\xaf\x90\x44\xda\xa1\x5e\x3e\x23\xa8\x74\xd2\xd4\xf3\x40\x79\xe9\x35\xe0\x8e\x90\x5e\x1a\xec\x3c\x95\xca\x4b\xdf\x3e\x18\xa6\x0a\x8c\xa7\xcc\xae\x59\xea\x7a\x30\x17\xf2\x23\x07\x39\x34\x05\x52\x0a\xe9\x75\x59\xae\x78\xb6\x64\x45\x45\x54\xb9\x08\xab\x09\x05\xeb\x2a\x7d\x9b\xae\xd1\xf6\x6c\x8f\x2f\xcf\xce\x3a\xc2\xf6\x0b\xc0\xd5\x5c\x4a\x02\x75\xca\xb3\x59\x9f\xdb\x8a\x09\x4e\x66\xe7\x48\xe5\x88\x3d\x2a\x15\x22\x29\xcf\x01\x39\x0b\xe7\xc8\xd9\x90\x1f\x59\x5e\xed\xe7\xdc\xfd\x70\x28\x91\x6b\x9f\x0b\xc5\xb2\xe5\xd9\xca\x31\x73\x87\x8d\xe6\x32\x99\xf9\x9f\x79\x76\xe6\xdc\x71\x3a\xac\xab\x65\x32\x53\xa9\x74\x19\x6d\x6c\x0c\x5a\x55\x2e\x9a\x4d\x60\xc8\x26\x79\xe6\xc0\x72\xdb\x5c\xc7\x89\x06\x95\x8c\xe7\x96\xc9\x4c\x46\x08\xe5\x29\x49\x8b\x4b\x33\x47\x56\x6d\xcc\x5d\xe8\xd7\xbf\x2f\x6d\x77\x57\xac\xa4\xdb\x86\xed\xc5\xc2\xe1\xe8\xef\x00\x00\x00\xff\xff\x3c\x31\xea\xd4\x10\x32\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 12816, mode: os.FileMode(420), modTime: time.Unix(1517408352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
