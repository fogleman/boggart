// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x58\x56\x0f\x20\x6d\x63\xd1\x23\xca\xe6\x42\x91\x76\xa5\xe5\x02\xe5\x8c\x1c\x7b\x4a\x5d\xb2\x76\xf0\x4c\x4b\xab\xa8\xff\x1d\xd9\x49\x4a\xc8\x47\xb5\x95\x76\x2f\x89\xf3\x3c\x6f\xde\xcc\xf3\xc4\x55\xc5\x34\x6c\x8c\x05\xc6\x95\xb3\x04\x96\x38\x3b\x9f\x67\xb3\x54\x9b\x03\x53\x85\x44\xbc\xe7\xde\xfd\xe1\xd9\x8c\x31\xc6\xba\xe8\xf1\x47\x29\x2d\x14\xcd\xce\x70\x97\x0c\x15\xd0\xd9\x8d\x11\xdb\x65\xb6\x82\x83\x51\x80\xa9\xd8\x2e\x7b\x9b\x1d\xba\x2a\x40\xfa\x8d\x39\xf2\x2c\x15\xda\x1c\x3a\x1a\xbd\xcf\xff\x24\xdb\x0e\x7a\x79\x49\xe6\x05\xb4\x51\xf5\x47\x7c\x2e\x90\xbc\x29\x41\x33\x2d\x49\x46\xa4\xc7\xac\xd9\x5b\x90\x7a\x0c\xf7\x43\xb0\x21\x64\xeb\x53\x09\xa9\xa0\xed\x64\x44\x5b\xcd\xb3\x5e\x28\x57\x2c\x96\x3c\x7b\xd4\x57\x09\xd9\x0a\x50\x79\x53\x92\x71\xf6\x96\xcc\x1f\x78\xb6\x96\xf8\x0b\x6f\xe4\x7c\x23\x49\xfb\x09\x52\x2a\xc6\x5a\x0f\xb1\x13\x46\xe5\x4e\x9f\x86\x78\x55\x31\x2f\xed\x4f\x60\x73\x73\xc7\xe6\x3a\x4e\x05\xfb\x78\xcf\x92\x7a\x89\x61\x0c\x87\xb9\x26\x4d\x1f\x51\x1e\x2a\xd1\x1d\x9b\xd3\xa9\x8c\x3a\x8d\x64\x12\xce\x6a\x54\xec\x92\x1b\x4b\x69\x5b\x8b\x0a\x99\x43\xc1\xe2\x73\x81\x7b\xa5\x00\x91\x67\x55\xd5\xa4\x3d\x9f\x53\x11\xa2\xaf\xd6\x02\x56\x4f\xc9\xa5\x62\xaa\x8f\xd0\x60\x90\x69\x8a\x7e\xd4\x51\xeb\x85\xd1\x9d\xd9\xb9\x85\x16\x07\xe7\x93\xdb\x5b\x7a\x09\xcb\x6c\x2e\xc4\xcf\x36\xfc\x4c\xa1\xc4\x66\x15\xba\x2e\x30\xf8\xb3\x32\x78\x41\xec\x74\x13\xe3\x33\x36\x6d\x5e\x2a\x46\xa6\x2c\x15\xf1\xa7\x1e\xbd\x3c\x9a\x65\xf3\xfa\x97\x78\xd6\xb9\x10\xc3\x3c\xf3\x56\xad\xaa\x18\x92\x24\xa3\x1e\xd6\x5f\x9e\xd8\xbb\x7a\xfd\xfd\xeb\x13\xe3\x42\x4b\xdc\xe6\x4e\x7a\x2d\x24\x22\x10\x8a\x03\x58\xed\x3c\x8a\xcb\xbd\x82\x89\x05\x5a\xe4\x28\x14\xd6\xe8\xba\x46\x73\xe7\x08\xc9\xcb\x32\x79\x36\x36\x51\x88\x9c\x6d\x64\x81\xf0\xfe\x15\x55\x37\xe6\x08\x3a\xb4\x02\xbe\xad\x20\x42\x0f\x11\xba\x5e\xc2\xb8\x2f\x3b\x7c\x45\x57\xc4\x0e\xc5\xee\xf7\x1e\xfc\x29\xe9\x18\x13\x6a\xd9\xbd\x85\x1b\x39\x06\xc1\xc9\x23\x78\x13\xcd\xce\x09\xf4\xc4\xbb\x07\x31\x94\xbf\xb8\xff\x37\x00\x00\xff\xff\x6c\x3e\xb5\x15\xa5\x07\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 1957, mode: os.FileMode(420), modTime: time.Unix(1518700072, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\x1b\xc7\x15\x7e\xd7\xaf\x18\x10\x06\x24\x03\x21\x29\x51\x01\x8a\xd0\x94\x81\x38\xbd\x02\x49\x1b\x34\xa9\xf3\xb8\x18\xee\x1e\x72\xc7\xde\xdd\xd9\xcc\xce\xf2\x02\x42\x00\x4d\x39\x4e\x03\xb7\x70\x90\x16\x68\x51\x14\x49\x51\xa0\x8f\x05\x18\xc5\x6a\x54\x59\x64\xfe\x40\x1f\xce\xfc\xa3\x62\x86\x4b\x6a\x45\x91\x34\x6f\x76\x24\x4b\xfb\xc2\xdd\x9d\x99\xfd\xce\x9c\xf3\xcd\xb9\xcc\x2e\x5b\x2d\xe2\x40\x85\x05\x40\x32\x36\x0f\x24\x04\x32\x43\xf6\xf7\x37\x4a\x0e\xab\x11\xdb\xa3\x51\xb4\x97\x11\xbc\x4e\xca\xbc\x5a\xa5\x42\x66\xee\x6e\x10\x42\x48\xba\xd5\xe6\x5e\xd6\x77\xb2\x3b\x85\xa4\x6d\xbc\x3d\x75\x7b\xbc\xa9\x61\x49\x26\x3d\x18\xeb\x61\x7a\xb9\x85\xbb\xf8\x0f\x3c\x52\x8f\xd4\x81\x6a\xab\x47\xea\x69\x29\xef\x16\x26\xf4\x4b\x0b\xe2\x01\x15\x15\xd6\xc8\xdc\x2d\xe5\x1d\x56\x1b\x83\x9d\x70\xeb\x9c\x24\xc3\xc9\xcf\xc6\x10\xbc\x3e\xa1\x87\x3e\x5a\x2d\xc2\x2a\x24\xf7\x1e\x0f\x2a\xac\x9a\xbb\xc7\xb9\x47\x32\x89\xd2\x72\x61\xec\x45\x54\xe4\x20\xa0\x65\x0f\x1c\xa3\xdf\x49\x8f\x98\xa0\xd5\x5d\xa2\x4f\x1a\x51\x76\xa7\x40\xea\xcc\xa9\x82\x4c\x7e\x2c\x49\x3d\xaf\x69\x95\x79\x63\x8a\x3c\x17\x67\x18\xd2\x00\xbc\x19\xbd\x17\xd1\xc9\xc4\x71\xcc\xd9\xcb\x08\x88\x78\x2c\x6c\xc8\xba\x40\x65\x96\x05\x19\x12\xc9\xa6\x07\x7b\x19\x17\x58\xd5\x95\xc5\xdd\xed\xed\xb0\x71\x67\x8e\x27\xea\xe3\x57\xc1\x5c\xdd\x5a\x2d\x92\x4b\x54\x6d\x39\x50\x63\x36\x58\x1a\xdd\xf2\x41\x82\xb0\x06\xca\xb7\x24\xf8\x21\x08\x2a\x63\x01\x16\x0b\x2c\x1b\xbc\x88\xc5\x51\xee\x3e\xf5\x62\x20\xfb\xfb\xe4\xbd\xb9\xa0\x4a\x65\x41\xf2\xf3\x09\xff\x9b\x58\xbe\x1a\xe9\x79\x2c\x5f\x83\xf8\x3f\x05\x4f\xd2\x57\x33\x01\x47\x3f\x7a\x99\x29\x4c\x58\xc4\x0b\x76\x99\xd1\x3c\xab\xe9\x8d\x5b\x98\x3c\x96\x2b\xad\x4c\xfc\x06\xfb\x78\x82\x5d\xfc\x1e\xbb\xd8\xc3\x63\xf5\x8c\xa8\x3f\x62\x0f\x8f\x54\x1b\xbf\xc3\x63\x3c\x5e\x1f\x73\x20\x00\x51\x6d\x5a\x55\x56\xa5\x36\xf7\xb8\x60\x90\xe2\x4c\xfa\xee\x0d\x7d\x66\xcc\x6b\xbd\xf4\x31\x2b\x78\xed\x04\xea\xe0\x11\x9e\xa8\x03\xf5\x05\x1e\xe1\xf1\xff\x9e\x10\x3c\xc5\xbe\xfa\x02\x7b\xd8\x57\x8f\x54\x67\x9d\x9c\xb2\x79\x10\xc5\x7e\x28\x19\x0f\x2c\x3b\x2e\x33\x5b\x37\x0b\x88\xac\x10\x84\xe5\xf2\x58\x9c\x31\xcc\x34\x93\x41\x33\x09\x41\x10\xdd\x7c\x43\xb5\x19\xf3\x5a\x1b\xd5\xea\x54\x82\xc8\xda\xdc\x73\x56\xa3\xda\xbf\xb0\x8f\x2f\xb0\x8f\xcf\xb1\x87\x5d\xf5\x8c\xe0\xa1\xb9\xe8\x2e\xcc\xa7\x11\x7b\x3c\xc7\x32\xc2\x59\x36\x0d\xa9\xcd\x64\xf3\x1c\x8b\x26\x93\xe7\x86\x33\x33\xe6\xb5\x66\xce\xb8\x7c\xc5\xf0\xf6\x27\xec\xab\xb6\x7a\xa6\x3e\x5f\x0b\x61\x5c\x2e\xdf\x20\xbe\xb4\x5a\x04\x02\x67\x5a\x11\x33\xab\x0e\xf2\x41\xd8\xb1\x68\x5e\xaf\x42\x08\x3c\xb0\xa5\x60\xda\xea\xab\x71\xf2\xdf\xf8\xc2\x04\xc8\x8e\x6a\xe3\xb1\xfa\xdc\x14\xc7\x1d\x4d\xcd\x05\xb2\xfa\x8f\x77\x8a\xe7\x08\x9a\x58\xc4\x92\x3b\x9a\xa0\xd2\xc4\x3e\x4b\x72\x49\xbd\x33\x52\x7e\x92\x77\x17\x41\x28\x4c\x41\x28\xac\x0d\x61\x77\x0a\xc2\xee\xda\x10\xde\x9e\x82\xf0\xf6\xba\x10\xee\x73\x4f\xd2\x2a\x14\x27\xa5\x2b\x29\xc2\x24\x59\xcb\x10\xbf\xb0\xbd\x6d\xd5\x06\x23\xcd\xef\xb2\xe8\xef\x9a\x5a\x6c\x29\x78\x9a\x0c\x1d\x9c\xc0\x99\x04\xef\x2e\x80\xff\x21\xaf\x83\x58\x02\x3c\xd4\xe3\x8c\x09\x52\x33\x5f\x00\xf7\x1e\x95\x12\x44\x73\x09\xe4\xf2\x60\xe4\x14\xed\xdf\x9f\x53\x86\xcb\xe7\xb1\x5f\xbe\x53\x96\xba\x4c\x4e\x93\x9f\x4b\xb1\x45\xf8\x4f\x3c\x1a\x78\x45\xec\xe3\x29\x9e\xaa\x03\x5d\x4b\xe8\xba\x42\x3d\xd1\x55\xe8\x55\xde\x34\x8c\x78\x45\xd6\x98\x03\xfc\x5a\x84\x4b\x9b\xfb\x7e\x1c\x30\x9b\xea\x9a\x2c\xcb\x02\x09\x22\x80\x15\x93\xb8\xbf\x62\x4f\xd7\x94\xaa\x6d\x36\x26\x3a\xcb\x96\x8f\x43\x61\xac\x50\x70\x6d\x10\x61\x8d\x4c\x63\x95\xa9\x47\x03\x1b\x2c\x11\x97\x3d\x88\xc6\x62\xc2\x5c\x80\xaa\xad\x0e\xf0\xdb\xdc\x15\xf4\x1d\xe4\x65\xd9\x1e\x2f\x33\x0f\xae\x21\x7b\x43\x97\x07\xb0\x1a\x75\xff\x8e\xc7\xd8\x53\x07\xaa\xa3\x9e\x12\xfc\x01\xfb\x44\x75\xb0\x6b\xf2\xbe\xc7\xd8\xd3\xbe\x4e\x1d\xe8\xfb\x2f\xb0\xab\xbb\x2d\xcb\x6c\x23\xa8\xe5\x43\x95\x56\x78\x60\xc5\x11\x38\x56\x8d\xeb\x06\x9f\x05\xb1\x4c\x15\x26\xf3\x09\x7d\x3a\x14\x7a\xdd\x7b\xd1\x1f\x7d\xf0\xd1\xeb\xd5\x42\xe4\x2f\x38\x77\xf5\x7b\xd5\x79\xf9\x1a\x26\x8b\x4d\x7b\xdc\x81\xbd\x5e\x1d\x8c\xdc\x5e\x95\x55\x69\xb9\xb9\x30\x1d\x7e\x71\x6f\xfd\x0a\xf9\x12\x0f\x55\x07\xfb\xf8\x83\x6a\x9b\x8a\x5c\x87\x7e\x1d\xf0\x8f\x5e\xc5\xbc\x43\xc1\x3d\x1e\x54\xcd\x9a\x5e\x5e\x09\xeb\xd4\xc1\x15\x8c\x01\xd7\xa8\xe2\x3f\x1f\x04\xea\xac\xc2\x56\x8a\x01\x9f\xb0\x9f\x33\x82\x27\xf8\x42\xf3\x5b\x3b\x02\xf5\x74\x59\x96\x0b\x1e\x9b\x82\x86\x3d\x14\x5c\xb2\x87\x96\x96\xcd\xb2\x3d\x06\x81\x5c\x38\x67\xb9\x7c\x1c\xbc\xea\x35\xcc\x37\xd8\xc7\xef\x06\x1b\x8c\x97\xbd\x5e\x79\x13\x96\x69\x1d\xa8\x74\x41\x64\x79\x2c\x1d\xce\xc5\xb4\x35\x9a\x36\x0b\xc1\x1e\x76\x89\x3a\xd0\x6b\x51\x3d\xc1\xa3\x9b\x9d\xfa\xd5\xd5\xcf\x82\xf9\xb5\x7f\xa8\xfd\xe0\xa1\x4e\x7b\x54\x07\x8f\x55\xfb\xc7\xb1\xc0\x55\xf7\x33\x5f\xab\xcf\x54\xdb\xbc\x6d\xbd\xf4\x7e\x66\x56\x4a\x61\x53\x1f\x04\xcd\xb9\xec\x61\x8d\x45\x8c\x07\xb9\x48\x0a\x00\x79\x2d\x52\x8c\x08\xec\x58\x30\xd9\xcc\xd6\xa1\x6c\x53\x3f\x3b\x98\xfa\x6a\xa5\xe6\xdf\xb0\x8b\xa7\xa6\xc8\xb8\xe8\xe7\xe6\x4f\xcd\x4b\xcc\xaf\x92\x48\xd8\x7b\x99\x7c\x62\xa8\xfc\xc0\x50\xf9\x81\x8c\xf9\x50\x40\x8d\x41\x7d\x24\xab\xcf\x74\x8e\xe4\x48\xb7\xb8\xf3\x93\x77\xc2\xc6\x1d\x9f\x36\x92\xeb\xc2\xee\x3b\xf3\x89\x7f\xf9\x52\x11\xb2\x28\x77\x5d\xea\x79\xd7\x92\xb9\x7a\xe2\xd9\x9d\xf5\x31\x57\x57\xc1\x87\xea\xb3\xe4\x2d\x7f\x1f\xff\x4b\xf0\x39\x1e\x9a\xc6\xe3\xb5\xd0\x58\x0b\x7c\x7d\x48\xfc\xc6\x52\xae\x30\x35\xe3\x38\xe7\x07\x0f\x09\xf6\xf1\x5b\xf3\x25\xd2\xa9\x4e\x3e\xfa\xaa\xad\x99\x84\xcf\xf5\x19\x1e\x19\xba\x69\x27\xf9\x58\x75\x74\x34\xbd\x49\x07\x57\x36\x92\xd9\x76\xb1\xb9\x3f\xd5\x3e\x7f\x36\xaf\x78\xfa\xea\x31\xf6\xb1\xf7\x23\xae\x9a\xa9\xce\x5d\xe7\xb3\xd1\xf5\x72\xe6\x10\x48\x41\x03\x1b\xb2\xb3\x72\xf9\xf9\x9c\xf9\x57\x23\xe7\x6d\xbe\xb8\x49\x9c\xb7\xfa\xc3\xc6\xbc\x9b\x1e\xac\x42\xe0\xd3\xd4\xd6\x87\xb6\x86\x35\x14\xd0\x8a\x24\x95\xa3\x8f\x8d\xb7\x73\xdb\xf3\x6e\xe0\x19\xd9\xfe\x82\x5d\x3c\x51\x6d\xf5\x54\xaf\xf6\x79\xe5\x01\x2f\x9a\x7b\x9b\xd0\xa0\x7c\xad\x3a\x4b\xa0\x4c\xf7\xe1\xe9\xe3\x26\xca\xcc\x35\x62\x95\xb5\x40\x3f\x8d\x69\xd6\xa6\x62\xea\x9b\x1f\xfc\x32\xa9\x62\x1f\xa9\x8e\x09\x23\x7d\xfc\xcf\x4d\xe8\x58\x83\xe6\xcb\xe0\x79\x53\x95\xfe\xd5\xf9\xa4\xf0\x7b\xf3\x2d\x9f\xbe\x38\xb9\x62\x7b\x08\x67\x4b\x69\x23\xf5\x9f\x2d\x17\xe8\x20\xd6\x94\xcc\xfc\x89\x6c\x86\xb0\x97\x91\xd0\x90\x79\x3b\x8a\x12\x75\x0e\x9d\x22\xc9\x25\xa6\x21\xad\x11\x5e\x48\x1d\x87\x05\xd5\x22\xd9\xbe\x63\xee\xed\x6f\x8c\x0d\x49\xb8\x30\x61\x44\x21\x6c\x0c\xc7\x94\xf2\x06\x7e\x9a\x94\x0f\xa2\x51\x3c\x6c\xb5\x88\xf6\xc5\xcc\xfe\xe5\xc7\x1f\xbc\x4f\xb6\x06\xe7\xbf\xfb\xed\xfb\x24\x93\x77\x68\xe4\x96\x39\x15\x4e\x9e\x46\x11\xc8\x28\x5f\x83\xc0\xe1\x22\xca\x83\xed\x52\x21\xa3\xfc\x83\xd1\x69\xce\x67\x41\x4e\x3f\xb5\x42\xbd\x08\x6e\x1b\x3c\x72\x16\x9f\x41\x08\x2e\xa2\x21\x64\x29\xb2\x05\x0b\x65\x5a\x37\x0f\x68\x8d\x0e\xee\xa6\x18\x77\x6b\xcb\xe1\x76\xec\x43\x20\x6f\xe7\x04\x50\xa7\xb9\x55\x89\x03\x5b\x32\x1e\x90\xad\xdb\x29\x05\x24\x40\x82\x06\x55\x20\xb7\xe0\x2d\x72\xcb\xe0\x91\xe2\xde\x38\xf2\xf0\x08\xa0\x4e\x3e\xfc\x35\x97\xac\xd2\xdc\x6a\x5d\x20\x85\xd9\xb5\x29\x92\xcd\x9f\xe9\xb1\x9b\x6f\x5d\x6c\x87\x86\x2c\x92\xcd\x56\x6b\x08\xb4\xbf\x3f\xa9\x57\x33\xd4\x0f\x81\x29\x0f\x71\x99\x03\xc5\x81\xba\x2e\x36\x6a\xe3\x19\x93\x6e\x96\x39\x97\x91\x14\x34\xdc\xdd\x3c\xd7\x6b\xff\xf6\x9d\xf1\xf9\x8f\x39\xf6\x61\x8f\x52\x7e\xa0\xd8\x34\x17\xce\xce\xfe\x1f\x00\x00\xff\xff\x3c\xcc\x19\x60\x6f\x38\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 14447, mode: os.FileMode(420), modTime: time.Unix(1518806766, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
