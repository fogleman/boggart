// Code generated by go-bindata.
// sources:
// templates/views/devices.html
// assets/js/devices.js
// locales/ru/LC_MESSAGES/boggart.mo
// locales/ru/LC_MESSAGES/devices.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xc1\x6e\x1a\x31\x10\xbd\xe7\x2b\x46\x96\x2a\x25\x07\x70\x92\x53\x55\x11\x2e\x4d\xa3\x56\x22\x95\xda\xd2\x73\xe5\x5d\xcf\x8a\xa1\x8b\xbd\xf5\x0c\x24\xd1\x8a\x7f\xaf\xbc\x40\xd8\xd0\xdd\x28\x0b\xa4\xea\xa1\x27\x16\x7b\xde\x9b\xe7\x37\x9e\x91\xcb\x12\x2c\x66\xe4\x10\x54\xea\x9d\xa0\x13\x05\xcb\xe5\xc9\xc9\xc0\xd2\x02\xd2\xdc\x30\x5f\xa9\xe0\xef\x14\x90\xbd\x52\x16\x17\x94\x22\xab\xe1\x09\x00\x40\x3d\xe4\xfe\x47\x61\x1c\xe6\xeb\x9d\x3f\x77\x85\x24\xc7\xda\x6e\x15\x31\xb9\x1c\x96\x25\xd0\xc5\x5b\x07\xea\x7a\x4d\x0d\x7d\x58\x2e\x07\x7a\x72\xb9\x13\x5b\x63\x4b\x73\x34\x21\xa3\x7b\x35\x1c\x68\x4b\x8b\x5a\xca\x9d\xbf\x4f\x14\x6c\x4e\xd7\xce\x2b\x26\xc9\xb1\x17\x90\x0b\xef\x98\x16\xbb\x72\xab\xf0\x2a\xe6\x09\x00\x56\x30\x96\x40\x05\x5a\xb0\x52\x63\x00\xe7\xef\x82\x29\x14\xb0\x3c\xe4\x78\xa5\xee\xc8\xca\xe4\xdd\xc5\xf9\xf9\x9b\x06\xee\x15\xff\x04\x8d\x6d\xdb\x0b\xcd\x1b\x6b\xe0\xd6\xcb\xf1\x43\x81\x1b\x23\x65\xf2\x2c\x68\x73\x94\x99\xed\xa5\x3e\xef\x5d\xa8\x2d\xcb\x37\x31\x32\xe7\xc3\x79\xc6\x86\x7f\x32\xa4\x7e\x1e\xaf\xd6\xa1\x64\xb7\x5f\xc6\x63\x10\x5f\x50\x7a\x04\x65\x15\x19\xcf\x13\x4e\x03\x25\x18\x5e\xca\x58\xb3\x08\x03\x99\x1c\xdc\x7c\x96\x60\xd8\x4f\xcf\x65\x4d\xcf\xa7\xeb\xce\x0a\xae\x31\x8a\x2f\x84\xbc\xeb\x8c\xad\x0a\xd3\x19\xd5\xbd\x02\xfb\x1b\x3e\xd0\x6d\x77\x3e\x62\x1a\x3b\x65\xa0\xab\x7e\xdc\xe9\xf2\xd6\x39\xb1\xfe\x5c\xff\x34\x4f\xbd\x9c\x58\xd0\x45\xb9\xc7\x9b\x7b\x03\xda\xc4\x64\x06\x32\xd3\xb3\x68\xb2\x38\xcf\x68\x08\x8f\x6e\x8d\x1e\xf3\xfe\x1f\x8a\x87\x0f\xc5\xcf\x66\xf6\xd2\xa1\x78\x50\x47\xde\x50\xc0\xee\x9d\x71\x43\x81\x05\x32\x0a\x68\x3b\x63\x47\x66\x6f\xe8\x87\x05\x3a\xf9\xe7\xda\xb0\x2c\x01\x9d\xad\x9e\x21\xb5\xe7\x49\x4c\x54\xbd\x4d\x22\xa0\x2c\x81\xc5\x08\xa5\x1f\xc7\xb7\x23\x38\x5d\x7d\x7f\xff\x3a\x02\xa5\xad\xe1\x49\xe2\x4d\xb0\xda\x30\xa3\xb0\x5e\xa0\xb3\x3e\xb0\xb6\x46\x4c\xa5\x8a\xfb\x0e\xa5\x97\xb0\x4e\x79\xb5\x3a\x5e\xad\x26\xde\x0b\x4b\x30\x45\x7f\x46\xae\x9f\x32\x2b\xc8\x4c\xce\x78\x76\xc4\xac\xdb\x3e\xd8\x08\xd8\xae\x3c\x2f\xa0\xd9\x95\x29\x1f\xd1\x13\x3d\x65\x3d\xfd\x35\xc7\xf0\xd0\xaf\xd9\x12\xb5\x4c\x5f\xc3\x8b\x84\x63\xc2\xd6\x02\xbc\x4a\xce\xad\xdb\x3b\xb9\x6b\x65\xf8\x0b\xc9\xd7\x67\x6f\xad\x7d\x87\xf4\xa7\x45\x20\x27\xa0\xb4\x82\xfe\x7b\x3f\x2b\xbc\x43\x27\x71\xda\x81\xda\xc8\x89\x27\x5d\xbd\xaf\x23\xf1\x59\xd3\xa5\xfa\x1d\x00\x00\xff\xff\x67\xc0\x83\xc3\x08\x0c\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 3080, mode: os.FileMode(420), modTime: time.Unix(1545686919, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsJsDevicesJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x4c\xfb\x06\xa0\x84\xa4\xf2\xbb\x58\x2c\xb0\x50\xea\xee\x61\xb3\x87\x02\xc1\xb6\x40\x72\x0b\x8a\x80\x16\x47\x32\x5b\x9a\xf4\x92\xa3\xb8\x46\xe1\xff\xbe\xa0\x24\x7f\x28\xb6\x25\x39\x96\xdb\x14\x58\x1e\x82\x88\x1e\x3e\x9c\x99\x67\x3e\x48\x9e\x07\xc2\x24\xf9\x04\x35\x85\x91\x45\x2e\xe6\x41\x9a\xeb\x84\xa4\xd1\x10\x84\xf0\xed\x0c\x00\xe0\x91\x5b\x20\x3e\x52\x78\x8d\x8f\x32\x41\x07\x43\x38\x0f\xd8\xff\x44\xf5\x55\xfc\xc4\xc2\x42\xd4\x8f\xe8\x9a\x13\xbf\xf3\x93\xc1\xb7\xd5\xa4\x1f\x53\x9e\xe1\x0d\xea\x8c\xc6\x31\xfc\xf6\xff\xcb\xda\x6f\x8a\xeb\x2c\xe7\x19\xc6\x50\x5f\xe3\x47\x6e\x55\x0c\x6c\x20\xb8\x1b\x8f\x0c\xb7\x62\x20\x38\xf1\x62\x57\x37\x90\xbf\xfc\xae\xa3\xcf\xce\x68\x56\x5b\xb6\xa8\xa3\xf3\xcf\xfc\x6b\x03\xf2\xc8\x64\x19\xb7\x34\xa8\x2c\x1a\xfc\x81\x9a\x24\xcd\x87\xd5\x37\xbb\xdc\x5a\xe8\x35\xb8\xb5\x49\x0c\xcc\xff\xd7\xb8\x77\x62\x54\x3e\xd1\x2e\x86\xfb\x2d\x94\x6d\x85\x96\xd8\x31\x30\x9a\x4f\x77\x6e\xed\x87\x45\x2d\xd0\xc6\xb0\xe6\xaa\x90\x0e\xf7\x20\x42\x45\x62\x62\x34\xa1\x26\x18\x02\x63\x57\x67\x7b\x45\x53\x63\x21\xf0\xf2\x12\xa4\x86\x56\xe4\xd2\xc8\x12\xf9\x62\x08\xec\xad\x9b\x72\x0d\x89\xe2\xce\x0d\x5f\x2b\x3e\x42\x05\xc5\xdf\x37\x2e\x4f\x12\x74\xee\xf5\x3b\x06\x17\x25\xec\xbd\xfc\x04\x17\xc0\xde\x0e\xfc\x92\x77\xc0\xae\xf6\x6e\xb2\xd8\xaf\xae\x45\xca\xad\x5e\xaa\xb0\x1b\x62\xb1\x35\xbb\xd8\xf6\x6c\x23\x1d\x8e\x38\xe5\xdd\xf9\x28\xc5\x9b\xdc\xe6\x66\x92\x92\x71\x25\x18\x91\xb9\x31\x33\xb4\x7f\x72\x87\x41\xd8\xea\x6d\xee\x10\x98\xd1\x4a\x6a\x64\x71\xa3\x28\xac\x1d\xd4\x91\x98\x52\xa1\x0d\x5a\x9a\x42\x65\x43\x9b\x34\xed\x4b\x1d\xc1\x75\x86\xf6\x28\x6d\x2c\x4e\xcc\xa3\xd4\x59\x1f\xea\x48\x9d\x9a\xe3\x95\x41\xd1\x87\x2e\x33\x6e\xb5\xd4\xd9\x33\xd5\x11\x98\xf2\x5c\x51\x1f\x14\x95\x48\xfb\xf5\xd8\x87\xbc\x9d\x88\xbb\x67\x0f\x4d\x4f\xe2\xee\xcb\x01\xd5\xd2\x4b\x37\x65\x59\xe5\x80\x42\x2e\x52\x45\xcf\x3a\x55\x61\x99\xfc\x43\xf4\x40\x66\x2a\x93\x03\xf4\x2f\xc4\xbb\x18\x50\x08\x7e\x0f\x0b\x5c\x3e\x72\x89\x95\x23\xb4\x07\x14\xc9\xf5\x9a\x0e\xb6\x6c\x48\x9f\xd8\x20\x87\x56\x72\xf5\xa0\xf3\xc9\x08\x2d\x3b\x1a\x4e\x8a\xe3\x31\x04\x7a\xdb\xa7\xde\x6f\xc7\x83\xf5\x9c\x2c\xcf\x3f\x5a\xb4\x21\x43\xd7\xa3\x45\xad\x2e\x16\xb0\x3f\xd1\xd1\xe2\x34\x15\xe0\xf9\xac\xb4\x42\x43\x57\x5a\xa6\x56\x4e\xb8\x9d\x57\xb4\x14\xb8\x3f\x1b\x2f\x27\xac\x6b\xcf\x66\xa8\x23\x3e\x74\xa5\x69\xe3\x84\xb3\x46\xfe\x91\x44\xd5\x66\x3e\xad\xbe\x16\x61\xe5\xa2\xd5\x8d\xf4\x46\x3a\x42\x8d\x76\x79\x27\x55\xab\xef\xce\xb7\xd2\x17\x79\xf3\x5c\xd9\xf1\x63\xee\x9e\x9a\x4f\xf0\x65\xf4\xbd\x54\x5a\x74\xfd\xc0\x3c\xa4\xd2\x3a\xea\x9c\xc4\x82\x13\x36\x65\x97\x4c\x21\x78\xd5\x26\x04\x1b\x87\xe9\xa3\x32\xc8\x6f\x74\x67\x6e\xc9\x4a\x9d\x95\xaa\x9d\xaa\xea\x15\xae\x52\xfc\x3f\x4f\x41\x9b\xa7\xf0\x11\x35\x75\xef\x0a\x7e\x55\xdf\xed\xa0\x50\xe1\xbd\xf0\x4d\xa1\x0d\x1e\x0e\xef\x06\x1e\xf2\xbe\xda\xe2\xe5\x36\x83\xad\xb7\x48\xa0\x91\x11\x73\x16\x46\x46\x07\x2c\x51\x32\xf9\xc2\x2e\x81\x8d\x72\x22\xa3\xa3\x52\xf2\x4d\x32\xc6\x62\x7a\x4d\x4f\x2d\x3a\x31\x9a\xda\xc2\xf0\xeb\xf2\xa2\x1b\x6c\x04\x91\xf7\x7b\x89\xf2\x5e\xc0\xb0\xf6\x32\x1a\x59\x33\x0b\xce\x03\x1a\x4b\x17\x46\x89\x32\x0e\x1d\x05\x8c\x2c\x0b\xc3\xc8\x3b\x33\x08\x23\x8b\x99\xaf\xed\xf6\x41\x8a\x0d\x82\xcf\x23\xdf\x28\x9e\x74\x26\x9a\x4f\x31\x06\xf6\xf1\xc3\xed\xdd\x93\x20\xdb\xd3\x3d\x0a\xce\x96\x9a\x5d\x00\x1b\x54\x56\xd6\xd6\x56\x8f\x3d\xeb\xc8\x0c\x76\x45\x4d\xcd\x2a\xaf\x5b\x64\x51\x19\x2e\x82\x27\xd9\xb4\xa8\xf1\x71\x3c\x2f\x53\xa9\xb3\x63\x69\x39\x98\x94\x13\x12\xb1\xc9\x77\x41\x49\x69\x60\x0b\x23\x76\x17\x25\xbe\x8c\xda\x42\x63\x78\x35\x1c\x02\xcb\xb5\xc0\x54\x6a\x14\x6c\x5f\xda\x17\x85\xb7\x5c\xd2\x54\x19\x34\xce\xe0\xe3\xdf\x86\x64\x3a\x0f\x9a\xeb\x07\x49\x52\xde\x13\x1f\xaa\xc7\xbe\xdd\xa5\x6f\x25\x8d\x5f\x29\x06\x56\xd2\x00\x1b\x3e\x29\x5d\x01\xd2\x81\xe9\x06\x54\xfa\x1f\xad\x35\xb6\x45\xd4\xd1\x5c\x49\x9d\xc5\xc0\x46\xc6\x90\x23\xcb\xa7\xbf\x6e\x1f\x1f\x96\x63\xb1\xaf\x37\x00\x2a\x87\xfd\xba\x4c\xf7\xe4\xb1\x4e\x38\xa5\xc3\xaa\xc0\xfa\x3e\x2e\x6b\x29\xdc\x0d\x85\x62\x26\xb5\x30\xb3\xaa\x02\xdc\x99\x2c\x53\x3e\x85\x57\xc9\xb0\xac\x68\x9b\x21\x7c\xa2\x7a\x49\xc5\xe6\xc7\xa4\xa7\x45\x97\x2b\x82\xa1\x4f\xd0\x94\x4b\xd5\x90\x9d\xdd\x62\x68\x19\x3f\x7f\xb5\x04\x7f\x19\x3a\x36\x9a\xa0\x73\x3c\xc3\x06\xc1\x6e\xc9\x34\x96\x02\x63\x48\xb9\x72\x0d\x58\xdd\x43\x67\x5f\xd8\x94\x67\x82\x1d\xb1\xd3\x67\x47\x3a\x5b\x84\x57\xff\x06\x00\x00\xff\xff\x39\x8b\x9f\x4e\xe9\x1c\x00\x00")

func assetsJsDevicesJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsJsDevicesJs,
		"assets/js/devices.js",
	)
}

func assetsJsDevicesJs() (*asset, error) {
	bytes, err := assetsJsDevicesJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/js/devices.js", size: 7401, mode: os.FileMode(420), modTime: time.Unix(1545686938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesBoggartMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6a\x14\x41\x18\x85\xdf\x84\xb8\xe9\x8d\xe8\xda\xc5\xef\xc2\xa0\x68\xc5\xaa\x6e\x03\xa1\x66\x6a\x22\xc6\x04\xc4\x0c\x8e\xb1\x75\xff\x93\x29\x7b\x1a\xa7\xab\x9a\xaa\x6a\x51\xc8\x0d\x5c\x7b\x02\xaf\xe0\x46\x88\x1e\xc0\x55\x7b\x01\xcf\x22\xd3\x43\x0c\x79\xab\xef\xa3\x5e\x3d\xfe\xbf\xb7\xb7\xbf\x02\xc0\x16\x80\x3b\x00\x1e\x01\xb8\x01\x60\x82\x4d\xe6\x00\x6e\x02\x78\x0d\x60\x39\x02\x18\xc0\x2d\x00\xbf\x47\xc0\x08\x57\xd9\xba\x84\xc6\xba\x6e\xfb\x4d\xc3\x21\xd1\xd2\x37\x16\xa7\xb6\xf5\x21\x89\x59\xac\xea\x85\x78\xd6\x55\x51\x94\x5e\xd3\xc2\x7e\x7c\xfa\xa1\x5e\x72\xe3\x77\x43\x97\xcd\x5f\x95\xe2\x30\x58\x4e\xb5\x77\xe2\x39\x27\xab\x29\x97\x6a\x5f\xc8\x42\xe4\x05\xe5\x85\xde\xdb\x7b\x28\x0b\x29\xb3\x13\x8e\x49\x94\x81\x5d\x5c\x71\xf2\x41\xd3\xcb\x61\x83\x66\x5d\xe0\xc6\x2f\x3c\x4d\xae\x0d\x4f\xb3\x13\x76\x55\xc7\x95\x15\xa5\xe5\x46\xd3\x7f\xd7\x74\xda\xc5\x58\xb3\xcb\x66\x2f\x66\x47\xe2\x9d\x0d\xb1\xf6\x4e\x93\xda\x95\xd9\xa1\x77\xc9\xba\x24\xca\xcf\xad\xd5\x94\xec\xa7\xf4\xb8\x5d\x71\xed\xc6\x74\xb6\xe4\x10\x6d\x32\x6f\xcb\x63\xb1\x7f\xd5\x5b\xdf\xf3\xde\x06\x71\xe4\xce\xfc\xa2\x76\x95\xa6\x6c\xbe\xea\x02\xaf\xc4\xb1\x0f\x4d\xd4\xe4\xda\x41\xa3\x29\xc6\xb4\x41\xe3\xee\x29\x69\x8c\xa2\x9d\x1d\x5a\xa3\xbc\x6b\x94\xa2\x03\x92\xa4\x07\x9f\x9a\xfc\xf2\x69\x62\x9e\xac\xf1\xfe\x50\x9b\x28\x49\xe7\xe7\x9b\x2f\x53\x93\xcb\x07\x74\x40\x8a\x34\xe5\x63\xf4\xdf\xfa\x8b\xfe\xe7\x9f\x2f\xfd\x0f\xea\xbf\xf7\xbf\xfa\x0b\xfc\x0b\x00\x00\xff\xff\x6d\x20\x21\x24\xdc\x01\x00\x00")

func localesRuLc_messagesBoggartMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesBoggartMo,
		"locales/ru/LC_MESSAGES/boggart.mo",
	)
}

func localesRuLc_messagesBoggartMo() (*asset, error) {
	bytes, err := localesRuLc_messagesBoggartMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/boggart.mo", size: 476, mode: os.FileMode(420), modTime: time.Unix(1545689716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesDevicesMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x52\xcf\x6f\x1b\x45\x14\xfe\xbc\x59\x43\x71\x7f\x50\x0a\xa8\xe2\x97\x34\x1c\x5a\x81\xd0\xb6\x6b\x87\x4a\xd5\x26\x4e\x5b\xea\x44\xaa\x88\x21\x6d\x0d\x27\x10\x9a\xd8\x13\x67\x55\x7b\xd7\xda\xd9\x8d\x82\x54\xa4\xc6\x3d\x14\x29\x12\x48\x15\xbf\x4e\x54\x81\x13\x37\x53\xc5\xc2\x69\x12\xe7\x5f\x78\x73\x83\x0b\x37\xb8\x71\x43\x70\x43\x68\x76\x26\x46\x65\x0e\xfb\xde\xf7\xe6\x7b\xdf\x7e\xef\x69\x7e\x3d\xe5\x7e\x09\x00\xcf\x01\x78\x19\xc0\x1e\x80\x57\x00\x7c\x50\x40\x7e\xa8\x00\x3c\x09\x40\x15\x80\xa3\x00\x7e\xb1\xf8\xb7\x02\x70\x04\xc0\x1f\x16\xff\x55\x00\x9e\x00\xf0\x4f\x01\x28\x02\x28\x3a\x86\x7f\xd4\x01\x1c\x00\xa7\x1d\xa0\x04\xe0\x45\x07\x78\x0a\xc0\x19\x07\x38\x09\xe0\xbc\xe5\x5d\x76\x00\x17\xc0\xa2\x03\x1c\x07\x70\xdd\x31\x7a\x1f\x39\x46\x6f\xc5\xf2\x3a\x96\xb7\xee\x00\xab\x05\xe0\x13\xab\xf3\xfb\x94\x89\x7f\x4f\x99\x59\x8e\xb8\xc0\x29\x3d\x8b\x6b\xea\xbe\x0b\x9c\x00\x70\xc5\x05\x8e\x01\x58\x72\x81\xd3\x00\x3e\x74\x8d\xbf\xcc\x35\x73\xaf\xdb\xbe\xaf\x5c\xe0\x79\x00\x3f\xb8\xc0\x33\x00\x0e\x5c\xe3\x47\xb9\xc0\x4b\x00\x7e\xb6\x3a\x7f\xda\x58\x28\x9a\xf9\x4e\x14\x0d\xef\x85\x22\x60\x57\x98\x9f\x93\x36\x6a\x6f\x5a\xff\xb8\xc5\xcf\xc2\xcc\x73\x78\x8a\x36\x3e\x6d\xe3\x14\xac\x2e\xcc\xfc\x5a\x5b\xfb\xd1\xbb\xd7\x7b\xd7\xde\x8f\x59\xae\xde\x2b\xae\x34\xd3\x30\x8e\x24\x6a\x42\x36\x93\xb0\xa7\x01\x6a\x62\x2d\x6c\x0a\x89\x5a\x28\xf9\x72\x47\xb4\x30\x1f\xd9\xb8\x26\xa2\x54\x62\x21\x4c\x44\xfe\x95\x29\x5b\x09\x13\xd1\xc2\xb5\x1a\x16\xf9\x04\x2d\x86\x32\x15\x91\x48\x24\xea\xd7\x1b\x0d\x26\xb3\x65\xad\xbd\x3c\x29\xa4\x71\x2f\x6c\x4a\xbc\xc3\xbb\x02\x37\x45\x12\xf2\x0e\x8b\xb2\xee\xb2\x48\x70\x33\xe5\x69\x26\xd1\xe0\xf2\x96\xfd\xb2\x66\x9c\x45\x29\x1a\x1f\xf7\x04\x6e\x88\x5e\x9c\xa4\x5e\x5d\xb6\xc3\x96\xf7\x56\xd6\x96\x5e\x23\x0e\x58\x4b\xac\x5d\xbe\x15\xae\xf2\x6e\x7c\x2e\xc9\x4a\x4b\xef\x36\xbc\xab\x89\xe0\x7a\x10\xaf\xc6\x53\x11\xb0\x8a\x5f\xbe\xe8\xf9\xd3\x5e\x65\x9a\x55\xa6\x83\x0b\x17\xde\xf0\xa7\x7d\xbf\xa4\xfd\x7a\x8d\x84\x47\xb2\xc3\xd3\x38\x09\xd8\xdb\xb9\x06\xab\x67\x09\xef\xc6\xad\x98\xcd\x3e\x26\x3c\x57\x5a\xe4\x51\x3b\xe3\x6d\xe1\x35\x04\xef\x06\x6c\x82\x03\x76\x23\x93\x32\xe4\x51\xa9\x7e\xad\x3e\xef\xbd\x2f\x12\x19\xc6\x51\xc0\xca\xe7\xfc\xd2\xd5\x38\x4a\x45\x94\x7a\xda\x7e\xc0\x52\xb1\x9e\x9e\xef\x75\x78\x18\xcd\xb0\xe6\x2a\x4f\xa4\x48\xab\xef\x35\x16\xbc\x8b\xff\xf1\xb4\x9f\x15\x91\x78\xf3\x51\x33\x6e\x85\x51\x3b\x60\xa5\xa5\x4e\x96\xf0\x8e\xb7\x10\x27\x5d\x19\xb0\xa8\x97\x43\x59\x9d\x9e\x61\x26\xad\x46\x67\xca\x7e\xb5\x5a\x66\x67\xcf\x32\x9d\xfa\xaf\x56\xcb\x65\x76\x89\xf9\x2c\xc8\xf1\x5c\xb5\x72\x78\x35\x5b\x7d\x53\xa7\xaf\xe5\xb4\xd9\xb2\xcf\x6e\xdf\x36\x2d\x73\xd5\x8a\xff\x3a\xbb\xc4\xca\x2c\x60\x95\x19\xd0\x17\x34\xa4\x1d\xb5\xa1\xfa\xf4\x90\x46\xea\x73\xd0\xb7\x74\x40\x23\xb5\x41\x03\xda\xa7\x11\x0d\x41\xdf\xeb\x5b\x75\x87\xc6\x13\xde\x00\x74\x5f\x6d\xd2\x23\xda\x55\x9f\xa9\x7b\x34\xa4\x7d\x1a\x83\xee\xff\xbf\xb0\x45\x63\xfa\x51\x6d\xaa\xbe\x11\xd6\x2d\x3f\xd1\x98\x1e\xaa\x4d\xd0\x03\x1a\xaa\x3b\x3a\xa5\x1d\x96\x87\xfc\x46\xbf\x2e\x7a\x40\x63\xb5\x41\xbb\x34\xa4\xed\xdc\xc2\x63\x04\xda\xa2\x5d\x75\x57\x7d\x4a\x03\xd5\xa7\x21\xed\xd2\xc8\x3c\x34\x3a\xa0\x31\x6d\x5b\xeb\x8f\x0e\xab\xaa\x4f\x63\x5d\xcb\x2b\xf4\x0d\xed\x69\x1f\x5b\xf9\xaf\x47\xb4\x43\xfb\xe6\xf7\xfb\x34\xa6\x3d\x5d\x04\x6d\xa9\xbe\x56\x56\x77\xd5\x06\xe8\x6b\x1a\xd0\x36\x0d\xd4\x3d\xdd\x3c\x01\xa0\xef\x68\x44\x07\xf8\x37\x00\x00\xff\xff\xd8\xf1\x6a\xd5\x20\x05\x00\x00")

func localesRuLc_messagesDevicesMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesDevicesMo,
		"locales/ru/LC_MESSAGES/devices.mo",
	)
}

func localesRuLc_messagesDevicesMo() (*asset, error) {
	bytes, err := localesRuLc_messagesDevicesMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/devices.mo", size: 1312, mode: os.FileMode(420), modTime: time.Unix(1545689716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"assets/js/devices.js": assetsJsDevicesJs,
	"locales/ru/LC_MESSAGES/boggart.mo": localesRuLc_messagesBoggartMo,
	"locales/ru/LC_MESSAGES/devices.mo": localesRuLc_messagesDevicesMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"js": &bintree{nil, map[string]*bintree{
			"devices.js": &bintree{assetsJsDevicesJs, map[string]*bintree{}},
		}},
	}},
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"boggart.mo": &bintree{localesRuLc_messagesBoggartMo, map[string]*bintree{}},
				"devices.mo": &bintree{localesRuLc_messagesDevicesMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
