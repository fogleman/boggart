// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xa8\xad\xe5\xe2\xaa\xae\x56\x48\xcd\x4b\x01\x31\x01\x01\x00\x00\xff\xff\x3e\x64\xd4\x00\x22\x00\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 34, mode: os.FileMode(420), modTime: time.Unix(1515575925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x6f\x1b\xb7\x13\xbf\xe7\x53\x10\x42\x00\xdb\x40\x24\x39\xce\xcd\xb1\x73\xf9\x3f\xf0\xff\x03\xe9\x03\x45\x1f\xc7\x05\xc5\x1d\x69\x99\xac\x48\x85\xe4\x5a\x12\x16\x02\x64\x39\x0f\x04\x69\x91\x22\x2d\xd0\xa2\x87\xb4\x28\xd0\x63\x01\xc5\x89\x1a\xd5\xb1\xf5\x09\x7a\x18\x7e\xa3\x82\x2b\xc9\x96\x65\x49\x90\x2d\xe5\xd9\xdd\x8b\xb9\x1c\x2e\x39\x9c\xf9\xcd\x8f\x9c\x91\xe3\x98\xf8\x50\xe4\x02\x48\x86\x49\x61\x40\x98\x0c\x69\x34\x2e\x6d\xf9\x7c\x87\xb0\x90\x6a\xbd\x9d\x51\xb2\x9a\xb9\x71\x89\x10\x42\x46\x7b\x99\x0c\xb3\x65\x3f\x7b\x75\x63\x20\x1b\x97\x8f\x74\x8f\x8b\x6a\x9e\xe1\x26\x84\xb1\x11\xc9\xa8\x60\xe3\x06\xfe\x82\x1d\xbb\x6b\xf7\x6c\xd3\xee\xda\x47\x5b\xf9\x60\x63\xc2\xb8\x51\x45\x42\xa0\xaa\xc8\x6b\x99\x1b\x5b\x79\x9f\xef\x8c\x2d\x3b\xa1\xeb\x94\x26\xc3\x4d\xcf\x5e\xe3\xc4\x04\x33\x35\xe9\x9b\xe4\x1a\x71\x8d\x9a\xce\x5e\xdd\x20\x55\xee\x97\xc0\x0c\xfe\x78\x86\x86\x61\xdd\x2b\xc8\xda\x94\xc9\xce\xaa\x57\xa1\x02\xc2\x19\xa3\xcf\xb3\xa1\x89\xdf\x71\x7f\x3b\xa3\x40\xcb\x48\x31\xc8\x06\x40\x4d\x96\x8b\x0c\xd1\xa6\x1e\xc2\x76\x26\x00\x5e\x0a\xcc\xe6\xb5\xf5\xf5\x4a\xed\xfa\x1c\x33\xba\xe7\xff\x62\xae\x61\x71\x4c\x72\x05\x59\x2a\x51\x65\xbc\x4a\x14\x6a\xaa\x3c\x03\xe5\x0a\x28\x6a\x22\x05\x1e\x17\x1e\x83\x50\xf3\x48\xe7\xbe\xa4\x61\x04\xa4\xd1\x20\xff\x9a\x6b\xe2\xad\x82\x22\xf9\xf9\x54\xfd\x24\x32\xcb\xd0\x55\x46\xe6\x0d\x28\xfb\x6f\x08\x0d\x5d\x86\xba\xbe\x9b\xe8\x22\x0a\x4f\x88\xa5\x73\x0e\x99\x21\x1e\x88\xfe\x21\x31\x26\x23\xb3\x50\x90\xe1\xcf\xd8\xc3\x03\x6c\xe3\x4b\x6c\xe3\x11\x76\xed\x63\x62\xbf\xc1\x23\xec\xd8\x26\x3e\xc7\x2e\x76\x2f\x0a\x14\x10\xa0\x4a\x75\xaf\xc4\x4b\x94\xc9\x50\x2a\x0e\x23\x10\x19\xed\x4d\xd1\x32\x6b\x63\xcb\x45\x4b\x12\xb1\x4b\xc7\x4b\x0b\x3b\x78\x60\xf7\xec\x43\xec\x60\xf7\xaf\xfb\x04\x0f\xb1\x67\x1f\xe2\x11\xf6\xec\xae\x6d\x5d\x1c\x42\x4c\x0a\x1d\x95\x2b\x86\x4b\xe1\xb1\xa8\xc0\x99\x57\x06\xa3\x40\x7b\x15\x50\x5e\x20\x23\x75\x02\xa8\x44\x4c\xfa\x62\x52\x01\x45\x9c\x38\x45\xd6\xac\x8d\x2d\x0d\x59\x55\x6a\x40\x65\x99\x0c\xfd\xc5\x90\xf5\x1b\xf6\xf0\x15\xf6\xf0\x05\x1e\x61\xdb\x3e\x26\xb8\x9f\xbc\xb4\x2f\x0e\x9f\xd0\xf7\x12\xe5\x3c\x46\x2b\x94\x71\x53\x3f\x05\xa3\xc9\xe8\x49\x41\x33\x6b\x63\x4b\x06\x4d\x20\x17\x3c\xbd\xbe\xc3\x9e\x6d\xda\xc7\xf6\xc1\x52\x10\x13\x48\x93\x02\xe6\x1d\x05\x0c\x84\xc0\x8c\xe2\xce\x29\xd3\x20\x83\xbf\xe3\xab\xe4\x28\x6a\xd9\x26\x76\xed\x83\x24\xfb\x6b\x39\x50\xbc\x09\x17\xcc\xd1\x3d\xd6\x35\xf2\x3a\x68\x0e\xbd\xf9\x36\x93\xe6\x5f\xb1\xd3\x37\x23\xf6\xf0\x10\x0f\xed\x9e\x3b\xe6\xdd\x91\x6f\xef\xbb\xfb\x60\x9a\x46\xbf\x7e\xd0\x33\x59\x2e\x47\x82\x33\xea\xae\x3e\x59\x2e\x0c\x28\x01\x0b\x32\xe5\x8f\x78\xe4\x2e\x6a\xb6\x99\x5c\xee\x5b\xe7\xa6\x48\x2d\x8b\x66\x87\xfb\x20\xbd\x02\x0d\xa9\x60\xe0\xa9\xa8\x10\x82\xf6\x8c\x34\x34\x3c\xa6\xc6\xb9\xe6\xb5\x4d\xbb\x87\xcf\x72\xef\x04\x73\x4e\x14\x7d\x70\x18\xaa\x04\x52\xc0\x54\xde\x1c\x84\xbc\xbd\x8b\x3d\x3c\x4a\x8d\xbe\x2c\xa3\x57\x79\x91\x2f\x14\xb4\x5f\xf1\xff\x72\x82\x07\xf8\x0a\xbb\xd8\x71\xf1\x6b\x1f\x9d\x3b\x6e\xcb\xfc\xb6\x92\x86\xdf\xf6\x9c\x36\x1e\x0b\x39\x08\x73\xee\xa0\x4d\xcf\xcf\xf9\xcf\x4f\x97\x20\x3f\xef\xdf\x43\xd3\xb3\xf2\xf5\x87\x5c\x15\xa8\x09\x40\x65\x65\x64\x7c\x29\xd5\x54\x8e\x1b\x71\x0b\x71\x09\x26\xb1\x7b\x2e\xae\xec\x7d\xec\xa4\x8c\xb7\xb8\xf9\xb9\x98\xdf\xfa\xfb\x8e\xd3\xf6\xb1\x6d\x9b\xb6\x85\x5d\xdb\x7c\x3b\x1e\x78\x5f\xf9\xe5\xa9\xbd\x67\x9b\x49\xf1\x2d\xe5\x97\x37\x00\x70\x0d\x2c\x52\xdc\xd4\xb3\x55\x28\x30\x5a\xce\x6a\xa3\x60\xfa\x5d\x1c\x7f\xc2\x36\x1e\x26\xd7\xec\x94\x66\xa6\x7d\xb1\x04\x2f\x04\x34\x0c\xb3\x57\xe7\xf3\xc2\x3e\xc1\x1e\x3e\x4b\xaa\xd3\x87\x8e\x79\x7a\xb6\x69\x9b\xd8\xc5\x17\xae\x85\x1d\x62\xf7\x08\xee\xdb\x7b\x83\xca\x63\x0f\xff\x24\xf8\x02\xf7\x93\xaf\xbb\xa9\xcf\x96\xec\xb3\x8d\xe5\xf9\xcc\x85\xd5\x5d\xdb\x72\x34\x98\x3a\x69\x61\x27\x25\x55\x06\x26\xcb\x53\xfd\xf3\x7d\x52\x0f\xea\xa5\x49\xe2\xd2\x4c\x0e\xc2\x28\x2a\x18\x64\x67\x5d\x9d\xe6\xab\xee\x3c\x39\xe6\xaf\xa4\x0e\x3e\xe0\x2f\xfb\xf5\xe4\xc2\xf0\xf8\x13\xc7\x84\x17\x09\xdc\x39\xc9\x1a\x9d\x46\xda\x1b\x2a\xe8\x69\x43\xcd\xf1\x4f\xfc\xeb\xb9\xf5\x79\x0b\x3d\x89\x6e\x3f\x60\x1b\x0f\x6c\xd3\x3e\x72\xb1\x3a\xaf\x3e\x10\xea\xb9\xcb\x49\xc9\x2a\x4f\x6d\xeb\x02\xab\x08\xff\x5d\x4d\x7f\xc9\x87\x86\x76\x7a\x27\xa2\x59\x46\xd5\xf4\x32\xd4\xb7\x83\xb4\x60\xd7\xb6\x12\x9a\xef\xe1\x1f\xa9\xe5\x97\x60\xf9\x02\x84\xe1\x54\xa3\x3f\x39\x7d\xf3\x79\x99\xfc\x86\xe6\x5e\x0e\xde\xb3\xa4\xec\x24\x9c\x2f\x8d\xfc\x2b\xe2\x2d\x9d\x19\x46\x78\x1c\x13\xc7\x63\x9c\xfd\xef\xf3\x8f\x6e\x92\xd5\x7e\xfb\x8b\xcf\x6e\x92\x4c\xde\xa7\x3a\x28\x48\xaa\xfc\x3c\xd5\x1a\x8c\xce\xef\x80\xf0\xa5\xd2\x79\x60\x01\x55\x46\xe7\x6f\x1d\x37\x73\x65\x2e\x72\x6e\xd6\x22\x0d\x35\xac\x25\xeb\x91\x63\x0e\xcd\x81\x52\x52\xe9\xe1\x92\x5b\x9a\x29\x5e\x31\xc4\xd4\x2b\xb0\x9d\x31\x50\x33\xf9\x5b\x74\x87\xf6\x7b\x47\x7c\x79\x79\xd5\x97\x2c\x2a\x83\x30\x6b\x39\x05\xd4\xaf\xaf\x16\x23\xc1\x0c\x97\x82\xac\xae\x91\xf8\x94\x3d\xe2\x98\x28\x2a\x4a\x40\x2e\xc3\x15\x72\x39\x59\x8f\x6c\x6e\x8f\xaf\x3c\x7c\x04\x54\xc9\xa7\x1f\x4b\xc3\x8b\xf5\xd5\xf8\x8c\xb9\x93\x44\x73\x93\xac\xfc\xc7\x7d\xbb\x72\xe5\xac\x1c\x6a\x66\x93\xac\xc4\xf1\x70\xa1\x46\x63\xd2\xa8\x7a\xc5\x4d\x02\x53\x26\x09\xb8\x0f\x9b\x7d\x73\x9d\x15\x3a\x54\x72\x51\xda\x24\x2b\x05\x29\x8d\x36\x8a\x56\xae\xad\x9c\x1a\xd5\x58\xbb\x3e\xbe\xff\x31\xda\x1e\x8e\xd8\xca\xf7\x0d\x3b\x8a\x85\x93\xd6\xdf\x01\x00\x00\xff\xff\x53\xda\x91\xea\xa0\x2a\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 10912, mode: os.FileMode(420), modTime: time.Unix(1516017188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
