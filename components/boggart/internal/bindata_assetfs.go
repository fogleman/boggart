// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xa8\xad\xe5\xe2\xaa\xae\x56\x48\xcd\x4b\x01\x31\x01\x01\x00\x00\xff\xff\x3e\x64\xd4\x00\x22\x00\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 34, mode: os.FileMode(420), modTime: time.Unix(1515575925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x6f\x1b\x37\x10\xbe\xe7\x57\x10\x42\x00\xdb\x40\x24\xf9\x91\x93\x63\x07\xe8\x13\x2d\x90\xb6\x41\x91\x26\xc7\x05\xb5\x3b\xd2\x32\x59\x91\x0a\xc9\xb5\x2c\x08\x06\x64\x39\x0f\x04\x69\x91\x22\x2d\xd0\xa2\x87\xa4\x28\xd0\x63\x01\xc5\x89\x1a\xd5\xb1\xf5\x0b\x7a\x18\xfe\xa3\x82\x2b\xc9\x96\x65\x49\xd0\x63\xf3\xec\xea\x22\x8a\xc3\xe5\x37\x9c\xf9\x66\xc8\xe1\xaa\x5a\x25\x1e\xe4\x19\x07\x92\x72\x05\xd7\xc0\x75\x8a\xec\xec\x9c\xdb\xf0\xd8\x16\x71\x03\xaa\xd4\x66\x4a\x8a\x72\xea\xf2\x39\x42\x08\xe9\xef\x75\x45\x90\x2e\x7a\xe9\x95\xd5\xae\x6c\x50\xde\xd7\x3d\x28\xda\x76\x34\xd3\x01\x0c\x8c\x88\x46\xf9\xab\x97\xf1\x77\x6c\x9a\x5d\xb3\x67\x6a\x66\xd7\x3c\xdc\xc8\xfa\xab\x43\xc6\xf5\x2b\x12\x00\x95\x79\xb6\x9d\xba\xbc\x91\xf5\xd8\xd6\x00\xec\x90\xae\x53\x9a\xf4\x16\x3d\x1e\xe3\xc4\x04\x63\x35\xe9\x98\x64\x8d\xd8\xc6\xb6\x4a\xaf\xac\x92\x32\xf3\x0a\xa0\xbb\x5f\x8e\xa6\x41\x50\x71\x72\x62\x7b\xc4\x64\x67\xd5\x2b\x51\x0e\xc1\x98\xd1\xd3\x2c\x68\xe8\x73\xcc\xdb\x4c\x49\x50\x22\x94\x2e\xa4\x7d\xa0\x3a\xcd\x78\x8a\x28\x5d\x09\x60\x33\xe5\x03\x2b\xf8\x7a\x7d\x6d\x79\xb9\xb4\x7d\x69\x82\x19\xed\xe7\x4b\x3e\xd1\xb0\x6a\x95\x64\x72\xa2\x50\xa0\x52\x3b\xa5\x30\x50\x54\x3a\x1a\x8a\x25\x90\x54\x87\x12\x1c\xc6\x1d\x17\x02\xc5\x42\x95\xb9\x4e\x83\x10\xc8\xce\x0e\xf9\x64\xa2\x89\x37\x72\x92\x64\x27\x53\xf5\x9b\x50\xc7\xa1\xab\x08\xf5\x1b\x50\xf6\x53\x08\x34\x8d\x43\x5d\xcf\x4e\x34\x8b\xc2\x43\x62\x69\xca\x21\x63\xc4\x5d\xd1\xff\x24\xc6\x44\xa8\xe7\x0a\x32\x7c\x8a\x6d\x3c\xc0\x06\xbe\xc4\x06\x1e\x61\xcb\x3c\x22\xe6\x07\x3c\xc2\xa6\xa9\xe1\x73\x6c\x61\x6b\x56\xa2\x00\x07\x59\xa8\x38\x05\x56\xa0\xae\x08\x84\x64\xd0\x47\x91\xfe\xde\x84\x2d\xe3\x16\x16\x2f\x5b\xa2\x88\x8d\x9d\x2f\x75\x6c\xe2\x81\xd9\x33\x0f\xb0\x89\xad\x7f\xef\x11\x3c\xc4\xb6\x79\x80\x47\xd8\x36\xbb\xa6\x3e\x3b\x85\x5c\xc1\x55\x58\x2c\x69\x26\xb8\xe3\x86\x39\xe6\x3a\x45\xd0\x12\x94\x53\x02\xe9\xf8\x22\x94\x27\x84\x8a\xc4\xa4\x23\x26\x25\x90\xc4\x8a\x13\x66\x8d\x5b\x58\x6c\xcc\x2a\x53\x0d\x32\xed\x8a\xc0\x9b\x8f\x59\x7f\x62\x1b\x5f\x61\x1b\x5f\xe0\x11\x36\xcc\x23\x82\xfb\xd1\x8f\xc6\xec\xf4\x09\x3c\x27\x52\xce\x71\x69\x89\xba\x4c\x57\x4e\xd1\x68\x38\x7b\x12\xd2\x8c\x5b\x58\xcc\xa4\xf1\xc5\x9c\xbb\xd7\x4f\xd8\x36\x35\xf3\xc8\xdc\x8f\x85\x31\xbe\xd0\x09\x61\xde\x51\xc2\x40\x00\xae\x96\xcc\x3a\x65\x3e\xca\xfc\x85\xaf\xa2\xfd\xaa\x6e\x6a\xd8\x32\xf7\xa3\x12\xb1\x6e\x99\x33\xc5\x11\xfa\xda\xca\xfa\x29\xfe\x14\x41\xba\xa1\xac\x38\x7a\xc5\xf2\x47\x47\x9b\x93\xa3\x85\xa6\xc1\x09\x67\x6e\x64\xfd\x69\x10\x56\x47\x20\xac\xc6\x86\xb0\x36\x02\x61\x2d\x36\x84\x8b\x23\x10\x2e\xc6\x85\x70\x5d\x04\x9a\x16\x60\x38\xcc\x56\x47\x18\x7d\xcf\x0a\xf0\x51\x54\xed\x8c\x42\xa0\x5d\x69\xa7\x01\xb3\x82\x5c\x15\x65\x90\xc3\x11\x4a\x56\x14\x59\x6b\xd6\xc9\x3f\xa6\x5a\x83\xac\x0c\x9f\x3e\xd7\x11\xce\x6d\xaa\x37\x91\xe2\x26\xe8\x1e\xe8\xea\xfb\xd9\x6d\xf6\xb2\xe5\xdb\xbc\x94\xfa\x03\x9b\x9d\x0c\x84\x6d\x3c\xc4\x43\xb3\x67\x8f\xd1\xf6\x48\x6d\xee\xd9\x7a\x2b\xb9\xa6\x7a\xfd\x9b\x8a\x2b\x8a\xc5\x90\x33\x97\xda\xd2\x22\xcd\xb8\x06\xc9\x61\xce\x93\xc8\xaf\x78\x64\x0b\x21\x53\x8b\x8a\xe7\xfa\xd4\x47\x10\x25\xf2\x7a\x8b\x79\x20\x9c\x1c\x0d\x28\x77\xc1\x91\x61\x2e\x00\x35\x90\x20\x27\x9a\xd7\xd4\xcc\x1e\x3e\xcb\xbc\x93\x61\x4b\x3e\x48\x0e\x95\x7c\xc1\x61\x14\x81\x7a\x21\x6f\xee\x60\x1b\x8f\x12\xa3\xc7\x65\xf4\x32\xcb\xb3\xb9\x82\xf6\x06\xfb\x9c\x11\x3c\xc0\x57\xd8\xc2\xa6\x8d\x5f\xf3\x70\xea\xb8\x2d\xb2\x5b\x52\x68\x76\xcb\xb1\xda\x38\x6e\xc0\x80\xeb\xa9\x83\x36\xd9\x3f\x27\xdf\x3f\x9f\x62\x1b\x9f\x77\xea\xbc\x64\xaf\x7c\xfd\x21\x57\x06\xaa\x7d\x90\x69\x11\x6a\x4f\x08\x39\x32\xc7\xf5\xb9\x85\xe0\x11\x36\x88\xd9\xb3\x71\x65\xee\x61\x33\xc9\x78\xf3\x9b\x9f\xf1\xc9\xad\xbf\x6f\x73\xda\x3e\x36\x4c\xcd\xd4\xb1\x65\x6a\x6f\xc7\x03\xef\x6b\x7e\x79\x62\xee\x9a\x5a\x74\xb9\x9d\xe4\x97\x37\x40\x70\x05\x6e\x28\x99\xae\xa4\xcb\x90\x73\x69\x31\xad\xb4\x84\xd1\x67\x71\xfc\x0d\x1b\x78\x18\x1d\xb3\x93\x34\x33\xea\x89\x18\xbc\xe0\xd3\x20\x48\xaf\x4c\xe6\x85\x7d\x82\x6d\x7c\x16\xbd\xfd\x39\xb4\x99\xa7\x6d\x6a\xa6\x86\x2d\x7c\x61\x5b\xd8\x24\x66\x8f\xe0\xbe\xb9\xdb\xbd\xd9\x6f\xe3\x3f\x04\x5f\xe0\x7e\xf4\x74\x2b\xf1\x59\xcc\x3e\x5b\x8d\xcf\x67\x36\xac\xee\x98\xba\x4d\x83\x89\x93\xe6\x76\x52\x74\xcb\xe0\x8a\xe2\x48\xff\xfc\x1c\xdd\x07\xb5\x93\x22\x31\x36\x93\x03\xd7\x92\x72\x17\xd2\xe3\x8e\x4e\x93\xdd\xee\x3c\x3e\xce\x5f\xd1\x7b\xa6\x6e\xfe\x32\xdf\x0f\x7f\xf1\x32\xf8\xa9\x56\x09\xcb\x13\xb8\x7d\x52\x35\x5a\x8d\x94\xd3\x53\xd0\x51\x9a\xea\xe3\xbf\xd0\x2c\x67\x96\x27\xbd\xe8\x89\x74\xfb\x05\x1b\x78\x60\x6a\xe6\xa1\x8d\xd5\x49\xf5\x81\x40\x4d\x7c\x9d\x14\xa1\x3c\x31\xf5\x19\x50\xb8\xf7\xae\x96\xbf\xe4\x43\x63\x3b\xbd\x1d\xd2\xb4\x4b\xe5\xe8\x6b\xa8\x1f\xbb\x65\xc1\xae\xa9\x47\x69\xbe\x8d\x7f\x27\x96\x8f\xc1\xf2\x39\x08\x82\x91\x46\x7f\x7c\xfa\xe4\xf3\x32\x7a\x47\x6d\x7f\x1c\xbc\x67\x45\xd9\x49\x38\x9f\xeb\xfb\xab\xef\x4d\x95\xea\x45\x78\xb5\x4a\x6c\x1e\x63\xee\x17\xd7\xbe\xba\x42\x16\x3b\xed\xef\xbe\xbd\x42\x52\x59\x8f\x2a\x3f\x27\xa8\xf4\xb2\x54\x29\xd0\x2a\xbb\x05\xdc\x13\x52\x65\xc1\xf5\xa9\xd4\x2a\x7b\xf3\xb8\x99\x29\x32\x9e\xb1\xb3\xe6\x69\xa0\x60\x29\xc2\x23\xc7\x39\x34\x03\x52\x0a\xa9\x7a\x90\x1b\xca\x95\xac\xa4\x89\xae\x94\x60\x33\xa5\x61\x5b\x67\x6f\xd2\x2d\xda\xe9\xed\xf3\xe5\xf9\x45\x4f\xb8\x61\x11\xb8\x5e\xca\x48\xa0\x5e\x65\x31\x1f\x72\x57\x33\xc1\xc9\xe2\x12\xa9\x9e\xb2\x47\xb5\x4a\x24\xe5\x05\x20\xe7\xe1\x02\x39\x1f\xe1\x91\xf5\xcd\x41\xe4\xde\x87\x43\x99\x5c\xfd\x5a\x68\x96\xaf\x2c\x56\xcf\x98\x3b\x2a\x34\xd7\xc9\xc2\x67\xf6\xd9\x85\x0b\x67\xe5\xb0\xad\xd7\xc9\x42\xb5\xda\x03\xda\xd9\x19\x36\xaa\x52\xb2\x93\xc0\x88\x49\x7c\xe6\xc1\x7a\xc7\x5c\x67\x85\x96\x95\x8c\x17\xd6\xc9\x42\x4e\x08\xad\xb4\xa4\xa5\xb5\x85\x53\xa3\x76\x96\x2e\x0d\xae\x7f\x20\x6d\xf7\x46\x6c\x64\x3b\x86\xed\xe7\xc2\x49\xeb\xbf\x00\x00\x00\xff\xff\xc9\x6b\x63\xe4\x00\x2e\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 11776, mode: os.FileMode(420), modTime: time.Unix(1516274750, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
