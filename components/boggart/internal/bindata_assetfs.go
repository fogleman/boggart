// Code generated by go-bindata.
// sources:
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xa8\xad\xe5\xe2\xaa\xae\x56\x48\xcd\x4b\x01\x31\x01\x01\x00\x00\xff\xff\x3e\x64\xd4\x00\x22\x00\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 34, mode: os.FileMode(420), modTime: time.Unix(1515575925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6b\xe3\x46\x14\x7e\xcf\xaf\x18\x44\x20\x09\xac\xe2\x4d\xf2\xe6\x4d\x02\x85\x6d\x69\x61\x7b\xa1\x6c\xe9\x63\x98\x48\xc7\xd1\x04\x79\xc6\x9d\x19\xc7\x36\x42\xe0\x38\x7b\xa1\xb4\xb0\xa5\xed\x43\xe9\x43\x5b\x0a\x7d\x2c\xb8\x6e\xdc\xba\xb9\xe8\x37\x9c\xf9\x47\x65\x64\x7b\xe3\x38\x96\xeb\x10\x67\x43\xba\xca\x4b\x46\x73\xce\x99\xcb\xf7\x1d\x7d\x3e\x33\x28\x8a\x88\x0f\x25\xc6\x81\x38\x9e\xe0\x1a\xb8\x76\x48\x1c\x2f\x6c\xfa\xec\x80\x78\x21\x55\x6a\xcb\x91\xa2\xe6\x6c\x2f\x10\x42\xc8\x68\xaf\x27\x42\xb7\xec\xbb\x6b\xeb\x03\xdb\xb8\x7d\xa4\x7b\xdc\x54\xdf\xd1\x4c\x87\x30\xe6\x91\x7a\x05\xeb\xdb\xf8\x0b\x76\xcd\xa1\x39\x32\x4d\x73\x68\xbe\xda\x2c\x04\xeb\x13\xfc\x46\x17\x12\x02\x95\x25\x56\x77\xb6\x37\x0b\x3e\x3b\x18\x9b\x76\x42\xd7\xa5\x95\x0c\x37\x3d\x7d\x8e\x0b\x08\xa6\xae\xa4\x0f\xc9\x06\xb1\x8d\xba\x72\xd7\xd6\x49\x8d\xf9\x7b\xa0\x07\xff\x76\x34\x0d\xc3\xc6\xce\xae\xa8\x67\x0c\x76\x75\x79\x15\xca\x21\x9c\xe2\x7d\x9d\x0d\x4d\x8c\x63\xfe\x96\x23\x41\x89\xaa\xf4\xc0\x0d\x80\x6a\x97\x71\x87\x28\xdd\x08\x61\xcb\x09\x80\xed\x05\xba\xb8\xf1\xf0\x61\xa5\xfe\xc8\xd9\x8e\x22\xb2\x5a\xa9\x86\x8a\xca\xa7\x50\xae\x80\xa4\xba\x2a\xe1\x03\x4e\xe2\x98\x5c\x98\x1e\xc3\x01\xf3\xe0\x1d\xdf\x97\xa0\x14\x89\xe3\x09\x0c\x5c\x59\xc8\x74\x97\x29\xe6\x81\xe9\x2d\x61\x46\x54\xf5\xb5\xa8\xf9\xb8\xaa\x73\x6e\x66\x8b\xb8\x31\x37\x3e\x84\x9a\x5e\x8b\x9d\xc7\x36\x22\xe7\x67\xb6\x88\x9b\xf0\x53\xa3\x1a\xa4\xeb\x89\xd0\xcf\xe2\x07\x7f\xc3\x04\x4f\x31\xc1\x63\x3c\xc7\xb6\x79\x45\xb0\x93\x3e\xb4\x73\x02\xe6\x47\x40\x20\x32\xd5\x0b\xbf\xc3\xc4\x34\xcd\x2b\xf3\x32\x47\x7f\x62\xc4\x4d\xd0\x87\x10\x3c\x2d\x99\xc7\x74\x23\x13\xff\xdf\xf1\x14\xbb\x78\x62\x5a\xa6\x89\x3d\xf3\x32\x2d\xc0\x5a\x96\x86\x37\x41\xc1\x0c\xdd\x63\x5d\x23\x8f\x83\xe6\x90\xcd\xbb\xac\x5b\x7f\xc5\x6e\x1f\x46\x4c\xf0\x0c\xcf\xcc\x11\x9e\x63\x0f\x4f\xb0\x6d\x5e\x60\x0f\x7b\x79\x25\x7b\xfb\x49\xef\x89\x72\xb9\xca\x99\x47\x35\x13\xdc\x65\x5c\x83\xe4\x90\x2d\x3b\x3f\xe0\xb9\x69\x61\xd7\x34\xf1\x1c\xbb\xa6\x75\x17\xc9\x3e\xbe\xed\xff\x07\xf2\x95\x40\x70\xc8\x84\x7d\xf0\xa2\x98\x67\x98\xe0\x79\x0e\xfa\xbc\x40\xaf\xb1\x12\xcb\xc2\xfc\x73\xf6\x1e\x23\x78\x82\xa7\xd8\xc3\xae\xcd\x7a\x7b\xb2\xce\xa5\x7d\x56\x69\xff\x19\x13\xfc\x73\x58\x94\xe4\x32\x7e\xdb\x79\x5d\x03\xaa\x03\x90\xf6\xc0\xeb\x0b\x21\x33\x85\x64\x84\x16\x62\x2b\x77\x62\x8e\x6c\x86\x9b\x17\xd8\xcd\x65\xe5\xe6\xf0\x33\x3e\x3b\xfa\x1d\xab\x2e\x1d\x6c\x9b\xa6\x69\x61\xcf\x34\xef\x86\x81\xfb\xaa\x2f\x3f\x99\xe7\xa6\x89\x6d\x9b\xc3\xb9\xbe\xdc\x7e\x82\x2b\xf0\xaa\x92\xe9\x86\x5b\x83\x5d\x8f\x96\x5d\xa5\x25\x4c\x29\x13\x7f\xc4\x36\x9e\xa5\x65\x62\x2e\x33\x59\x11\x73\x60\x21\xa0\x61\xe8\xae\xcd\xc6\x42\x87\x60\x82\x7f\x98\x2f\xb1\x8b\x67\x56\x79\x12\xd3\xb4\x47\x57\x3c\xb6\x2d\xec\x12\x73\x44\xb0\x63\x9e\x0f\xae\x74\x12\xfc\x87\xe0\x31\x76\xd2\xe8\x5e\xce\xd9\x9c\x39\x5b\x9f\x1f\x67\xf6\xb5\x7a\x66\x5a\x6f\xe6\xee\xe7\xbf\x10\xba\xf7\x24\xa5\x07\x60\x4f\x94\x33\xf9\xf9\x3e\xbd\xaa\x48\xf2\x93\xd8\xdc\x20\x07\xae\x25\xe5\x1e\xb8\x53\x4b\xa7\x6f\x5f\x4b\x53\x7a\xdf\x39\x90\x26\xf3\x75\x4e\xc1\x1c\x28\xa0\x5f\x54\xa9\xeb\x51\x99\x7d\x01\xf1\xcd\xa0\x56\x3d\x34\xad\x54\x7b\x12\xfc\x2b\x47\x7e\x0e\xc8\xef\x42\x18\xce\x90\xf3\xe9\xcf\xf1\xdf\xe9\x2d\xbf\x7d\x38\xb9\x67\x27\x85\x28\x22\xc0\x7d\x12\xc7\x0b\x0b\x23\x5f\x4f\xec\xab\xf4\xc3\x09\xeb\x1e\x45\x44\x69\xaa\x99\xf7\xfe\xd3\x0f\x9f\x90\xe5\x7e\xfb\xb3\x4f\x9f\x10\xa7\xe0\x53\x15\xec\x0a\x2a\xfd\x02\x55\x0a\xb4\x2a\x1c\x00\xf7\x85\x54\x05\xf0\x02\x2a\xb5\x2a\xec\xbf\x6e\xae\x96\x19\x5f\xb5\xa3\x96\x68\xa8\x60\x25\x9d\x6f\x30\x3a\x2b\x91\x55\x90\x52\x48\x35\x9c\x72\x53\x79\x92\x55\x34\xd1\x8d\x0a\x6c\x39\x1a\xea\xba\xb0\x4f\x0f\x68\xbf\x77\x84\xcb\xc5\x65\x5f\x78\xd5\x32\x70\xbd\xb2\x2a\x81\xfa\x8d\xe5\x52\x95\x7b\x9a\x09\x4e\x96\x57\x48\x74\x09\x8f\x28\x22\x92\xf2\x3d\x20\x8b\xf0\x80\x2c\xa6\xf3\x91\xe2\xd6\xf8\xcc\xc3\x3f\x0e\x35\xf2\xc9\x47\x42\xb3\x52\x63\x39\xba\x02\x77\x7a\xfa\x29\x92\xa5\x77\x6d\xec\xd2\x83\xab\x76\xa8\xeb\x22\x59\x8a\xa2\xe1\x44\x71\x3c\xc9\xab\x51\xb1\x83\x40\xc6\x20\x01\xf3\xa1\xd8\x87\xeb\xaa\xd1\x66\x25\xe3\x7b\x45\xb2\xb4\x2b\x84\x56\x5a\xd2\xca\xc6\xd2\x25\xaf\x78\xe5\xd1\xf8\xfe\x07\x3c\x8f\x7b\x6c\x16\xfa\xc0\x8e\xe6\xc2\x45\xeb\xdf\x00\x00\x00\xff\xff\x91\x2b\x99\xb9\x53\x23\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 9043, mode: os.FileMode(420), modTime: time.Unix(1515574995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
