// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xc1\x8e\xda\x30\x10\xbd\xf3\x15\x23\x8b\x43\x2b\x2d\xb1\xca\xb1\xca\xe6\x52\x2a\xed\x4a\xdb\x4b\x45\xcf\x95\x63\x0f\xc5\x34\x6b\xa7\x1e\x43\x41\x51\xfe\xbd\xb2\x93\xd0\x2c\x49\xd0\x22\xed\x5e\x82\xfd\x3c\x6f\xde\xcc\xf3\xe0\xaa\x02\x85\x1b\x6d\x10\x98\xb4\xc6\xa3\xf1\x0c\xea\x7a\x36\x4b\x95\x3e\x80\x2c\x04\xd1\x3d\x73\xf6\x2f\xcb\x66\x00\x00\x7d\xf4\xf8\xb3\x14\x06\x8b\xf6\x64\x78\xea\xb5\x2f\xb0\x77\x1a\x23\xb6\xcb\x6c\x85\x07\x2d\x91\x52\xbe\x5d\x5e\x1c\xf6\xe8\xb2\x40\xe1\x36\xfa\xc8\xb2\x94\x2b\x7d\xe8\x69\x5c\x6c\x5f\x48\x76\x1d\x5c\xe4\xf5\x22\x2f\xb0\x8b\x6a\x36\xf1\xbb\x20\xef\x74\x89\x0a\x94\xf0\x22\x22\x17\xcc\x86\xbd\x45\xa1\xc6\x70\x37\x04\x5b\x42\xb6\x3e\x95\x98\x72\xbf\x9d\x8c\xe8\xaa\x79\x56\x0b\x69\x8b\xc5\x92\x65\x8f\xea\x2a\x21\x5b\x21\x49\xa7\x4b\xaf\xad\xb9\x25\xf3\x27\x96\xad\x05\xfd\xa6\x1b\x39\x5f\x4d\xb0\x63\xa2\xa4\x94\x8f\xf5\x1e\x62\x27\x9c\xca\xad\x3a\x0d\xf1\xaa\x02\x27\xcc\x2f\x84\xb9\xbe\x83\xb9\x8a\x63\x01\x9f\xef\x21\x69\x96\x14\xe6\x70\x98\x6b\xd2\xf5\x11\xe5\xa1\x92\xbf\x83\xb9\x3f\x95\x51\xa7\x95\x4c\xc2\x65\x8d\x8a\x9d\x73\x53\x29\x4c\xe7\x51\x21\x72\x2c\x20\x7e\x17\xb4\x97\x12\x89\x58\x56\x55\x6d\xda\xba\x4e\x79\x88\xbe\x5a\x0b\x1a\x35\x25\x97\xf2\xa9\x3e\x42\x83\x41\xa6\x2d\xfa\x51\x45\xad\x57\x46\xf7\x86\xe7\x16\x5a\x9c\x9c\x2f\x76\x6f\xfc\x6b\x58\x7a\x73\x26\xb6\xe3\x03\x75\xdd\xae\x42\xd7\x05\x05\x7f\x56\x9a\xce\x88\x99\x6e\x62\x7c\xc6\xa6\xcd\x4b\xf9\xc8\x94\xa5\x3c\xfe\xab\x47\x5f\x8f\x76\xd9\xfe\xfc\x4f\x3c\xeb\xbd\x88\x61\x9e\x59\xa7\x56\x55\x40\x5e\x78\x2d\x1f\xd6\xdf\x9e\xe0\x43\xb3\xfe\xf1\xfd\x09\x18\x57\x82\xb6\xb9\x15\x4e\x71\x41\x84\x9e\xf8\x01\x8d\xb2\x8e\xf8\xf9\x61\xa1\xc4\xa0\x5f\xe4\xc4\x25\x35\xe8\xba\x41\x73\x6b\x3d\x79\x27\xca\xe4\x59\x9b\x44\x12\x31\xd8\x88\x82\xf0\xe3\x1b\xaa\x6e\xf4\x11\x55\x68\x05\x5d\x57\x41\x84\x1e\x22\x74\xbd\x84\x71\x5f\x76\xf4\x86\xae\xf0\x1d\xf1\xdd\x9f\x3d\xba\x53\xd2\x33\x26\xd4\xb2\x7b\x0f\x37\x72\x0a\x82\x93\x57\xf0\x2e\x9a\xbd\x1b\xb8\x10\xef\x5f\xc4\x50\xfe\xec\xfe\xbf\x00\x00\x00\xff\xff\x64\xa5\x26\xa7\xa6\x07\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 1958, mode: os.FileMode(420), modTime: time.Unix(1518424287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\x1b\xc7\x11\x7f\xd7\x5f\xb1\x20\x0c\x48\x06\x42\x52\xa2\x02\x14\x91\x29\x03\x71\xfa\x09\x24\x6d\xd0\xa4\xce\xe3\x61\x79\x37\xe4\xad\x7d\x77\x7b\xd9\xdd\xe3\x07\x08\x01\x34\xe5\x38\x0d\xdc\xc2\x41\x5a\xa0\x45\x51\x24\x45\x81\x3e\x16\x60\x14\xab\x51\x65\x91\xf9\x07\xfa\x30\xfb\x1f\x15\xbb\x3c\x4a\x14\x45\xd2\xfc\x8a\x2d\x59\xba\x17\xde\xdd\xec\xed\xcc\xce\xfc\x76\xbe\xee\xd8\x6c\x12\x0f\xca\x2c\x02\x92\x71\x79\xa4\x20\x52\x19\xb2\xb7\xb7\x56\xf4\x58\x95\xb8\x01\x95\x72\x37\x23\x78\x8d\x94\x78\xa5\x42\x85\xca\xdc\x5d\x23\x84\x90\x61\xaa\xcb\x83\x6c\xe8\x65\xb7\x0a\x29\x6d\x94\x3e\x74\x7b\x94\x54\x77\x14\x53\x01\x8c\x8c\xb0\xa3\xfc\xc2\x5d\xfc\x07\x1e\xea\x47\x7a\x5f\xb7\xf4\x23\xfd\xb4\x98\xf7\x0b\x63\xc6\x0d\x0b\x12\x00\x15\x65\x56\xcf\xdc\x2d\xe6\x3d\x56\x1d\x61\x3b\xe6\xd6\x39\x49\x06\x8b\x9f\xce\x43\xf0\xda\x98\x11\xe6\x68\x36\x09\x2b\x93\xdc\x7b\x3c\x2a\xb3\x4a\xee\x1e\xe7\x01\xc9\xa4\x4a\xcb\xc5\x49\x20\xa9\xc8\x41\x44\x4b\x01\x78\x56\xbf\xe3\xa6\x18\xa3\xd5\x6d\x62\x4e\xea\x32\xbb\x55\x20\x35\xe6\x55\x40\xa5\x3f\x8e\xa2\x41\xd0\x70\x4a\xbc\x3e\x41\x9e\x8b\x2b\x8c\x69\x04\xc1\x94\xd1\xf3\xe8\x64\xec\x73\xcc\xdb\xcd\x08\x90\x3c\x11\x2e\x64\x7d\xa0\x2a\xcb\xa2\x0c\x91\xaa\x11\xc0\x6e\xc6\x07\x56\xf1\xd5\xce\xf6\xe6\x66\x5c\xbf\x33\xc3\x8c\xe6\xf8\x55\x34\xd3\xb0\x66\x93\xe4\x52\x55\x3b\x7d\x55\x3b\x0a\xc2\x18\x04\x55\x89\x00\x87\x45\x8e\x0b\x81\x64\x89\xcc\xdd\xa7\x41\x02\x64\x6f\x8f\xbc\x37\xd3\xc4\xc5\x92\x20\xf9\xd9\x44\xfd\x4d\xa2\x56\x21\x2b\x4f\xd4\x2b\x10\xf6\xa7\x10\x28\xba\x0a\x71\x3d\x33\xd1\x22\x02\x8f\xd9\x8e\x73\x0e\x99\x42\x9e\x46\x7a\xe3\xb6\x18\x4f\xd4\x52\x7b\x0c\xbf\xc1\x1e\x1e\x63\x07\xbf\xc7\x0e\x76\xf1\x48\x3f\x23\xfa\x8f\xd8\xc5\x43\xdd\xc2\xef\xf0\x08\x8f\x16\xc5\x09\x44\x20\x2a\x0d\xa7\xc2\x2a\xd4\xe5\x01\x17\x0c\x86\x10\x32\x7c\xf7\x06\x2c\x53\xd6\xb5\x5a\xb0\xd8\xfd\xba\x72\xb8\xb4\xf1\x10\x8f\xf5\xbe\xfe\x02\x0f\xf1\xe8\x7f\x4f\x08\x9e\x60\x4f\x7f\x81\x5d\xec\xe9\x47\xba\xbd\x38\x82\x5c\x1e\xc9\x24\x8c\x15\xe3\x91\xe3\x26\x25\xe6\x3a\x21\x28\x01\xd2\x89\x41\x38\x3e\x4f\xc4\x19\x9e\x2c\x99\xf4\xc9\x24\x06\x41\x0c\xf9\x06\x58\x53\xd6\xb5\x32\x60\xd5\xa8\x02\x91\x75\x79\xe0\x2d\x07\xac\x7f\x61\x0f\x5f\x60\x0f\x9f\x63\x17\x3b\xfa\x19\xc1\x03\x7b\xd1\x59\x1c\x3d\x81\xe7\x58\xe1\x1c\x97\xc6\xd4\x65\xaa\x71\x0e\x45\xe3\xc1\x73\x83\x99\x29\xeb\x5a\x31\x66\x7c\xbe\x64\xe8\xfa\x13\xf6\x74\x4b\x3f\xd3\x9f\xaf\x04\x30\x3e\x57\x6f\x10\x5e\x9a\x4d\x02\x91\x37\xa9\xd4\x98\x56\xad\x84\x20\xdc\x44\x34\xae\x57\xb9\x02\x01\xb8\x4a\x30\x63\xf5\xe5\x30\xf9\x6f\x7c\x61\xc3\x61\x5b\xb7\xf0\x48\x7f\x6e\x4b\xd8\xb6\x81\xe6\x1c\xf9\xf9\xc7\x5b\x3b\xe7\x00\x9a\x5a\xc4\x51\x5b\x06\xa0\xca\xc6\x3e\x47\x71\x45\x83\x33\x50\x7e\x92\xf7\xe7\xe1\x50\x98\xc0\xa1\xb0\x32\x0e\xdb\x13\x38\x6c\xaf\x8c\xc3\xdb\x13\x38\xbc\xbd\x2a\x0e\xf7\x79\xa0\x68\x05\xc6\xb3\xa9\xf6\x89\xf6\x77\x51\x06\xef\xda\x52\x6a\x12\x07\x9a\x52\xfb\x27\x70\xc6\xe4\xdd\x39\x58\x7c\xc8\x6b\x20\xc6\xcf\x1f\x1b\x92\xd5\xd5\x90\xfc\x73\x4c\x7d\x8f\x2a\x05\xa2\x31\x7e\xf2\x52\x9f\x38\x41\x4d\xf7\x67\x64\x73\xf9\xbc\xe7\xcb\x7b\x4b\x43\x97\xe9\x69\xfa\x73\x29\x9a\x6a\xff\xc4\xc3\xbe\x87\xc2\x1e\x9e\xe0\x89\xde\x37\x59\xbc\xc9\xe8\xf5\x13\x53\xed\x5d\xe5\x36\x9b\xe4\x65\x55\x65\x1e\xf0\x6b\x11\xba\x5c\x1e\x86\x49\xc4\x5c\x6a\xea\xa3\x2c\x8b\x14\x88\x08\x96\x4c\xa8\xfe\x8a\x5d\x53\xcd\xe9\x96\x6d\x00\xb4\xe7\xce\xa4\x3c\xa8\x32\x17\x9c\x81\x30\x4e\x2c\xb8\x31\x88\x70\x4e\x4d\xe3\x94\x68\x40\x23\x17\x1c\x91\x94\x02\x90\x23\xfe\x79\x26\x86\xba\xa5\xf7\xf1\xdb\xdc\x15\xf4\x1d\xe4\x65\x99\x17\x2f\xb1\x00\xae\x21\x7a\x63\x9f\x47\xb0\x1c\x74\xff\x8e\x47\xd8\xd5\xfb\xba\xad\x9f\x12\xfc\x01\x7b\x44\xb7\xb1\x63\x73\xb0\xc7\xd8\x35\xbe\x4e\xef\x9b\xfb\x2f\xb0\x63\x86\x2d\x8a\x6c\x2b\xa8\x13\x42\x85\x96\x79\xe4\x24\x12\x3c\xa7\xca\x0d\x21\x64\x51\xa2\x86\x8a\x84\xd9\x84\x3e\x19\x08\xbd\xea\x0e\xef\x47\x1f\x7c\xf4\x6a\xb5\x20\xc3\x39\xd7\xae\x7f\xaf\xdb\x2f\xdf\xc3\x64\xbe\x65\x8f\x3a\xb0\x57\xab\x83\x53\xb7\x57\x61\x15\x5a\x6a\xcc\x0d\x87\x5f\xdc\x5b\xbd\x42\xbe\xc4\x03\xdd\xc6\x1e\xfe\xa0\x5b\xb6\x3a\x36\xa1\xdf\x04\xfc\xc3\x1f\x63\xdd\xb1\xe0\x01\x8f\x2a\x76\x4f\x2f\xae\x84\x55\xea\xe0\x0a\xc6\x80\x6b\x54\x7d\x9f\x0f\x02\x35\x56\x66\x4b\xc5\x80\x4f\xd8\xcf\x19\xc1\x63\x7c\x61\xf0\x6d\x1c\x81\x7e\xba\x28\xca\x05\x4f\x14\x08\x27\x64\x0f\x05\x57\xec\xa1\x63\x64\x73\xdc\x80\x41\xa4\xe6\xce\x59\x2e\x1f\x06\xaf\x7a\x0d\xf3\x0d\xf6\xf0\xbb\x7e\xb3\xef\xb2\xd7\x2b\x6f\xc2\x36\xad\x01\x55\x3e\x88\x2c\x4f\x94\xc7\xb9\x98\xb4\x47\x87\xcd\x42\xb0\x8b\x1d\xa2\xf7\xcd\x5e\xd4\x4f\xf0\xf0\xa6\x6b\xbe\xbc\xfa\x59\x34\xbb\xf6\x0f\x8c\x1f\x3c\x30\x69\x8f\x6e\xe3\x91\x6e\xbd\x1e\x0b\x5c\x75\x3f\xf3\xb5\xfe\x4c\xb7\xec\x7b\xce\x4b\xef\x67\xa6\xa5\x14\x2e\x0d\x41\xd0\x9c\xcf\x1e\x56\x99\x64\x3c\xca\x49\x25\x00\xd4\xb5\x48\x31\x24\xb8\x89\x60\xaa\x91\xad\x41\xc9\xa5\x61\xb6\xbf\xf4\xe5\x4a\xcd\xbf\x61\x07\x4f\x6c\x91\x71\xd1\xcf\xcd\x9e\x9a\x17\x59\x58\x21\x52\xb8\xbb\x99\x7c\x6a\xa8\x7c\xdf\x50\xf9\xbe\x8c\xf9\x58\x40\x95\x41\xed\x54\xd6\x90\x99\x1c\xc9\x53\xfe\xce\xd6\x4f\xde\x89\xeb\x77\x42\x5a\x4f\xaf\x0b\xdb\xef\xcc\x26\xfe\xe5\x4b\x45\xc8\xbc\xd8\xf5\x69\x10\x5c\x4b\xe4\x9a\x85\x67\xb7\x56\x87\x5c\x53\x05\x1f\xe8\xcf\xd2\x37\xee\x3d\xfc\x2f\xc1\xe7\x78\x60\x89\x47\x2b\x81\xb1\x11\xf8\xfa\x80\xf8\x8d\x85\x5c\x61\x62\xc6\x71\xce\x0f\x1e\x10\xec\xe1\xb7\xf6\x1b\xa0\x13\x93\x7c\xf4\x74\xcb\x20\x09\x9f\x9b\x33\x3c\xb4\x70\x33\x4e\xf2\xb1\x6e\x9b\x68\x7a\x93\x0e\x2e\x6d\x24\xdb\x76\x71\x79\x38\xd1\x3e\x7f\xb6\xaf\x78\x7a\xfa\x31\xf6\xb0\xfb\x1a\x77\xcd\x44\xe7\x6e\xf2\x59\x79\xbd\x9c\x39\x44\x4a\xd0\xc8\x85\xec\xb4\x5c\x7e\x36\x67\xfe\xd5\xa9\xf3\xb6\x5f\xbf\xa4\xce\x5b\xff\x61\x6d\xd6\xa6\x07\x2b\x13\xf8\x74\xa8\xf5\x61\xac\xe1\x0c\x04\x74\xa4\xa2\xea\xf4\xa3\xde\xcd\xdc\xe6\xac\x0d\x3c\x2b\xdb\x5f\xb0\x83\xc7\xba\xa5\x9f\x9a\xdd\x3e\xab\x3c\x10\xc8\x99\xdb\x84\x96\xcb\xd7\xba\xbd\x00\x97\xc9\x3e\x7c\xf8\xb8\x89\x32\x33\x3d\xb1\xcc\x5e\xa0\x9f\x26\x34\xeb\x52\x31\xf1\xcd\x0f\x7e\x99\x56\xb1\x8f\x74\xdb\x86\x91\x1e\xfe\xe7\x26\x74\xac\x40\xf3\x25\x08\x82\x89\x4a\xff\xea\x7c\x52\xf8\xbd\xfd\xae\xce\x5c\x1c\x5f\xb1\x1e\xc2\xd9\x56\x5a\x1b\xfa\x97\x93\x0f\xb4\x1f\x6b\x8a\x76\xfd\x44\x35\x62\xd8\xcd\x28\xa8\xab\xbc\x2b\x65\xaa\xce\x81\x53\x24\xb9\xd4\x34\xa4\x79\xca\x2f\xa6\x9e\xc7\xa2\xca\x0e\xd9\xbc\x63\xef\xed\xad\x8d\x3c\x92\x62\x61\xcc\x13\x85\xb8\x3e\x78\xa6\x98\xb7\xec\x27\x49\xf9\x40\x9e\xc6\xc3\x66\x93\x18\x5f\xcc\xdc\x5f\x7e\xfc\xc1\xfb\x64\xa3\x7f\xfe\xbb\xdf\xbe\x4f\x32\x79\x8f\x4a\xbf\xc4\xa9\xf0\xf2\x54\x4a\x50\x32\x5f\x85\xc8\xe3\x42\xe6\xc1\xf5\xa9\x50\x32\xff\xe0\xf4\x34\x17\xb2\x28\x67\x66\x2d\xd3\x40\xc2\x6d\xcb\x8f\x9c\xc5\x67\x10\x82\x0b\x39\x60\x59\x94\xae\x60\xb1\x1a\xd6\xcd\x03\x5a\xa5\xfd\xbb\x43\x88\xbb\xb5\xe1\x71\x37\x09\x21\x52\xb7\x73\x02\xa8\xd7\xd8\x28\x27\x91\xab\x18\x8f\xc8\xc6\xed\x21\x05\xa4\x8c\x04\x8d\x2a\x40\x6e\xc1\x5b\xe4\x96\xe5\x47\x76\x76\x47\x39\x0f\x8e\x08\x6a\xe4\xc3\x5f\x73\xc5\xca\x8d\x8d\xe6\x05\x50\xd8\xae\xcd\x0e\x59\xff\x99\x79\x76\xfd\xad\x8b\x74\xa8\xab\x1d\xb2\xde\x6c\x0e\x18\xed\xed\x8d\x1b\xd5\x88\xcd\x24\x30\x61\x12\x9f\x79\xb0\xd3\x57\xd7\x45\xa2\x31\x9e\x35\xe9\x7a\x89\x73\x25\x95\xa0\xf1\xf6\xfa\xb9\x51\x7b\xb7\xef\x8c\xae\x7f\xc4\xb1\x0f\x46\x14\xf3\x7d\xc5\x0e\x63\xe1\xec\xec\xff\x01\x00\x00\xff\xff\x08\x50\xf6\xa1\xa1\x37\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 14241, mode: os.FileMode(420), modTime: time.Unix(1518439922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
