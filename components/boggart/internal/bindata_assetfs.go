// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x8b\xdb\x30\x10\xbd\xe7\x57\x0c\x22\x87\x16\x36\x16\xcd\xb1\x78\x7d\x4a\x61\x17\xb6\x97\x92\x9e\x8b\x2c\x4d\x1a\x05\xad\xec\x6a\xb4\x69\x82\xf1\x7f\x2f\x92\x3f\xea\xfa\x23\x6c\x61\xf7\xe2\x48\x4f\x33\xf3\xe6\x3d\x8d\x52\x55\xa0\xf0\xa0\x2d\x02\x93\x85\xf5\x68\x3d\x83\xba\x5e\xad\x52\xa5\xcf\x20\x8d\x20\xba\x67\xae\xf8\xcd\xb2\x15\x00\xc0\x10\xbd\xfc\x28\x85\x45\xd3\x9e\x4c\x4f\xbd\xf6\x06\x07\xa7\x31\xe2\xb8\xcd\x76\x78\xd6\x12\x29\xe5\xc7\xed\xe8\x70\x90\x2e\x0d\x0a\x77\xd0\x17\x96\xa5\x5c\xe9\xf3\x80\x63\xb4\xfd\x87\xb2\x53\x30\xaa\xeb\x45\x6e\xb0\x8b\x6a\x36\xf1\xbb\x21\xef\x74\x89\x0a\x94\xf0\x22\x22\xa3\xcc\x26\xfb\x88\x42\xcd\xe1\x6e\x0a\xb6\x09\xd9\xfe\x5a\x62\xca\xfd\x71\x31\xa2\xeb\xe6\x59\x6d\x64\x61\x36\x5b\x96\x3d\xaa\x9b\x09\xd9\x0e\x49\x3a\x5d\x7a\x5d\xd8\xff\xa9\xfc\x89\x65\x5f\x6c\x90\xb6\x50\x3e\xe5\x73\x3a\x42\xec\x82\xea\xbc\x50\xd7\x29\x5e\x55\xe0\x84\xfd\x89\xb0\xd6\x77\xb0\x56\xf1\x8a\xe1\xf3\x3d\x24\xcd\x92\xc2\x4c\x4d\x6b\x2d\x3a\x38\xc3\x3c\x65\xf2\x77\xb0\xf6\xd7\x32\xf2\xb4\x94\x49\x30\x7e\x96\xac\xaf\x4d\xa5\xb0\x9d\x47\x46\xe4\x68\x20\x7e\x37\xf4\x22\x25\x12\xb1\xac\xaa\xda\xb2\x75\x9d\xf2\x10\x7d\xb3\x17\xb4\x6a\x89\x2e\xe5\x4b\x3a\x82\xc0\x40\xd3\x36\xfd\xa8\x22\xd7\x2b\xa3\x07\x83\xf0\x9a\x34\x7d\xe8\x33\xdb\x41\x80\xba\x6e\x57\xa1\x7f\x43\x41\xe9\x4e\x53\x8f\xd8\xe5\x76\xe6\xa7\x65\xd9\x86\x94\xcf\xcc\x4b\xca\xe3\x5b\x9b\x7d\xd3\xed\xb2\xfd\xf9\x5b\x78\x35\xf8\x9f\x0a\x93\xc9\x3a\xb6\xaa\x02\xf2\xc2\x6b\xf9\xb0\xff\xfa\x04\x1f\x9a\xf5\xf7\x6f\x4f\xc0\xb8\x12\x74\xcc\x0b\xe1\x14\x17\x44\xe8\x89\x9f\xd1\xaa\xc2\x11\xef\x9f\x3b\x25\x16\xfd\x26\x27\x2e\xa9\x41\xf7\x0d\x9a\x17\x85\x27\xef\x44\x99\x3c\x6b\x9b\x48\x22\x06\x07\x61\x08\x3f\xbe\x21\xeb\x41\x5f\x50\x05\x29\xe8\xba\x0e\x22\xf4\x10\xa1\xdb\x2d\xcc\xfb\x72\xa2\x37\x74\x85\x9f\x88\x9f\x7e\xbd\xa0\xbb\x26\x03\x63\x42\x2f\xa7\xf7\x70\x23\xa7\x40\xb8\x78\x05\xef\xc2\x39\xb8\x81\x11\xf9\xf0\x22\xa6\xf4\xbd\xfb\x7f\x02\x00\x00\xff\xff\xe8\x45\xdc\x0a\x3c\x07\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 1852, mode: os.FileMode(420), modTime: time.Unix(1518193229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\x1b\xc7\x11\x7f\xf7\xa7\x58\x10\x06\x24\x03\x21\x29\x51\x01\x8a\xc8\x94\x81\x38\xfd\x0b\x24\x6d\xd0\xa4\xce\xe3\x61\x79\x37\xe4\xad\x7d\xb7\x7b\xd9\xdd\xe3\x1f\x10\x02\x68\xca\x71\x1a\xb8\x85\x83\xb4\x40\x8b\xa2\x48\x8a\x02\x7d\x2c\xc0\x28\x56\xa3\xca\x22\xf3\x05\xfa\x30\xfb\x8d\x8a\x5d\x92\x12\x45\x91\x34\x29\x12\x8e\x64\xe9\x5e\x78\x77\xb3\xb7\xf3\x67\x7f\x33\x3b\x33\x77\x6c\x36\x49\x00\x65\xc6\x81\x64\x7c\xc1\x35\x70\x9d\x21\xbb\xbb\xb7\x8a\x01\xab\x12\x3f\xa2\x4a\xed\x64\xa4\xa8\x91\x92\xa8\x54\xa8\xd4\x99\x7b\xb7\x08\x21\x64\x94\xea\x8b\x28\x1b\x07\xd9\xcd\xc2\x80\x36\x4e\x1f\xb9\x3d\x4e\xaa\x7b\x9a\xe9\x08\xc6\x46\xb8\x51\x61\xe1\x1e\xfe\x03\x0f\xcc\x63\xb3\x67\x5a\xe6\xb1\x79\x56\xcc\x87\x85\x09\xe3\x46\x05\x89\x80\xca\x32\xab\x67\xee\x15\xf3\x01\xab\x8e\xb1\x9d\x70\xeb\x8c\x24\x43\xe5\x67\xf3\x90\xa2\x36\x61\x84\x3d\x9a\x4d\xc2\xca\x24\xf7\x9e\xe0\x65\x56\xc9\xdd\x17\x22\x22\x99\x81\xd1\x72\x49\x1a\x29\x2a\x73\xc0\x69\x29\x82\xc0\xd9\x77\xd2\x14\x13\xac\xba\x45\xec\x49\x5d\x65\x37\x0b\xa4\xc6\x82\x0a\xe8\xc1\x8f\xa7\x69\x14\x35\xbc\x92\xa8\x4f\x91\xe7\xbc\x86\x09\xe5\x10\xcd\x18\xbd\x88\x4d\x26\x3e\xc7\x82\x9d\x8c\x04\x25\x52\xe9\x43\x36\x04\xaa\xb3\x8c\x67\x88\xd2\x8d\x08\x76\x32\x21\xb0\x4a\xa8\xb7\xb7\x36\x36\x92\xfa\xdd\x39\x66\xb4\xc7\xaf\xf8\x5c\xc3\x9a\x4d\x92\x1b\x98\xda\xeb\x9b\xda\xd3\x10\x27\x20\xa9\x4e\x25\x78\x8c\x7b\x3e\x44\x8a\xa5\x2a\xf7\x80\x46\x29\x90\xdd\x5d\xf2\xde\x5c\x13\x17\x4b\x92\xe4\xe7\x13\xf5\x37\xa9\x5e\x85\xac\x22\xd5\xaf\x41\xd8\x9f\x42\xa4\xe9\x2a\xc4\x0d\xec\x44\x17\x11\x78\x82\x3b\x2e\x38\x64\x06\x79\x16\xe9\x8d\x73\x31\x91\xea\xa5\x7c\x0c\xbf\xc1\x1e\x1e\x61\x07\xbf\xc7\x0e\x76\xf1\xd0\x3c\x27\xe6\x8f\xd8\xc5\x03\xd3\xc2\xef\xf0\x10\x0f\x2f\x8a\x13\xe0\x20\x2b\x0d\xaf\xc2\x2a\xd4\x17\x91\x90\x0c\x46\x10\x32\x7a\xf7\x06\x2c\x33\xf4\x5a\x2d\x58\x9c\xbf\xae\x1c\x2e\x6d\x3c\xc0\x23\xb3\x67\xbe\xc0\x03\x3c\xfc\xdf\x53\x82\xc7\xd8\x33\x5f\x60\x17\x7b\xe6\xb1\x69\x5f\x1c\x41\xbe\xe0\x2a\x8d\x13\xcd\x04\xf7\xfc\xb4\xc4\x7c\x2f\x06\x2d\x41\x79\x09\x48\x2f\x14\xa9\x3c\xc5\x93\x23\x93\x3e\x99\x24\x20\x89\x25\xdf\x00\x6b\x86\x5e\x2b\x03\x56\x8d\x6a\x90\x59\x5f\x44\xc1\x72\xc0\xfa\x17\xf6\xf0\x25\xf6\xf0\x05\x76\xb1\x63\x9e\x13\xdc\x77\x17\x9d\x8b\xa3\x27\x0a\x3c\x27\x9c\xe7\xd3\x84\xfa\x4c\x37\xce\xa0\x68\x32\x78\x6e\x30\x33\x43\xaf\x15\x63\x26\x14\x4b\x6e\x5d\x7f\xc2\x9e\x69\x99\xe7\xe6\xf3\x95\x00\x26\x14\xfa\x0d\xc2\x4b\xb3\x49\x80\x07\xd3\x4a\x8d\x59\xd5\x4a\x0c\xd2\x4f\x65\xe3\x7a\x95\x2b\x10\x81\xaf\x25\xb3\xab\xbe\x1c\x26\xff\x8d\x2f\xdd\x76\xd8\x36\x2d\x3c\x34\x9f\xbb\x12\xb6\x6d\xa1\xb9\x40\x7e\xfe\xf1\xe6\xf6\x19\x80\x0e\x56\xc4\xd3\x9b\x16\xa0\xda\xed\x7d\x9e\x16\x9a\x46\xa7\xa0\xfc\x24\x1f\x2e\xc2\xa1\x30\x85\x43\x61\x65\x1c\xb6\xa6\x70\xd8\x5a\x19\x87\xb7\xa7\x70\x78\x7b\x55\x1c\x1e\x88\x48\xd3\x0a\x4c\x66\x53\xed\x13\xdd\xef\x45\x19\xbc\xeb\x4a\xa9\x69\x1c\xe8\x80\xda\x3f\x81\x53\x26\xef\x2e\xc0\xe2\x43\x51\x03\x39\x79\xfe\xc4\x92\x9c\xad\x46\xe4\x5f\x60\xea\xfb\x54\x6b\x90\x8d\xc9\x93\x97\xfa\xc4\x29\x66\x7a\x30\x27\x9b\xcb\x17\x3d\x5f\xdd\x5b\x1a\xb9\x1c\x9c\x0e\x7e\x2e\x45\x53\xed\x9f\x78\xd0\x8f\x50\xd8\xc3\x63\x3c\x36\x7b\x36\x8b\xb7\x19\xbd\x79\x6a\xab\xbd\xab\xdc\x66\x53\xa2\xac\xab\x2c\x00\x71\x2d\xb6\x2e\x5f\xc4\x71\xca\x99\x4f\x6d\x7d\x94\x65\x5c\x83\xe4\xb0\x64\x42\xf5\x57\xec\xda\x6a\xce\xb4\x5c\x03\xa0\xbd\x70\x26\x75\xb2\x02\x5e\x89\x46\x94\xfb\xe0\xc9\xb4\x14\x81\x1a\x0b\xc3\x73\xcd\x6b\x5a\x66\x0f\xbf\xcd\x5d\xc1\x10\x41\x5e\x95\x60\x89\x12\x8b\xe0\x1a\x82\x34\x09\x05\x87\xe5\x10\xfa\x77\x3c\xc4\xae\xd9\x33\x6d\xf3\x8c\xe0\x0f\xd8\x23\xa6\x8d\x1d\x97\x6a\x3d\xc1\xae\x0d\x69\x66\xcf\xde\x7f\x89\x1d\x3b\x6c\x61\x00\xf7\x97\xc6\x8b\xa1\x42\xcb\x82\x7b\xa9\x82\xc0\xab\x0a\xe6\x83\x17\x33\x9e\xea\x91\x2a\x60\x3e\x71\x8f\x87\xe2\xae\xba\x85\xfb\xd1\x07\x1f\xbd\x2e\xfd\x55\xbc\xa0\xd6\xe6\xf7\xa6\xfd\x6a\xbf\x25\x8b\x29\x3c\x1e\x9b\x5e\x97\xf6\xc3\xc0\xea\x1a\x99\xa5\xc6\xc2\x10\xf8\xc5\xfd\xd5\x9b\xe2\x4b\xdc\x37\x6d\xec\xe1\x0f\xa6\xe5\x4a\x5e\xbb\x9f\xdb\x5d\xfc\x60\xb5\x1a\x27\x52\x44\x82\x57\x9c\xef\x5e\x5c\xfd\x55\x6a\x7f\x05\x63\xfd\x35\x2a\xa6\xcf\x06\xfb\x1a\x2b\xb3\xa5\x62\xfd\x27\xec\xe7\x8c\xe0\x11\xbe\xb4\xc8\xb6\xce\x6f\x9e\x2d\x8e\x6f\xf6\x48\x0a\xcd\x1e\x79\x56\x1a\xcf\x8f\x18\x70\xbd\x70\x36\x72\xf9\x50\x77\xd5\x8b\x90\x6f\xb0\x87\xdf\xf5\xbb\x75\x97\xbd\xe0\x78\x13\x1c\xb3\x06\x54\x87\x20\xb3\x22\xd5\x81\x10\x72\x9a\x57\x8e\x2e\x0b\xc1\x2e\x76\x88\xd9\xb3\xde\x67\x9e\xe2\xc1\x4d\xdb\x7b\x79\xf3\x33\x3e\xbf\xf5\xf7\x6d\xe4\xdb\xb7\xc9\x8d\x69\xe3\xa1\x69\xfd\x38\x2b\x70\xd5\xe3\xcc\xd7\xe6\x33\xd3\x72\x2f\x2a\x2f\x7d\x9c\x99\x95\x44\x84\xec\x51\x95\x29\x26\x78\x4e\x69\x09\xa0\xaf\x45\x36\xa1\xc0\x4f\x25\xd3\x8d\x6c\x0d\x4a\x3e\x8d\xb3\x7d\xd5\x97\xab\x1e\xff\x86\x1d\x3c\x76\x35\xc4\xf9\x00\x37\x7f\xfe\x5d\x64\x71\x85\x28\xe9\xef\x64\xf2\x83\x15\xca\xfb\x34\x06\x49\xf3\x7d\x19\xf3\x89\x84\x2a\x83\xda\x89\xac\x31\xb3\xe9\x50\xa0\xc3\xed\xcd\x9f\xbc\x93\xd4\xef\xc6\xb4\x3e\xb8\x2e\x6c\xbd\x33\x9f\xf8\x97\x2f\x07\x21\x73\x83\x36\xa4\x51\x74\x2d\x21\x6b\x15\xcf\x6e\xae\x0e\xb2\xb6\xba\xdd\x37\x9f\x0d\x5e\x92\xf7\xf0\xbf\x04\x5f\xe0\xbe\x23\x1e\xae\x04\xbf\x56\xe0\xeb\x83\xde\x37\x16\x72\x85\xa9\x39\xc6\x99\x00\xb8\x4f\xb0\x87\xdf\xba\xcf\x76\x8e\x6d\xba\xd1\x33\x2d\x8b\x24\x7c\x61\xcf\xf0\xc0\xc1\xcd\x46\xc7\x27\xa6\x6d\xf7\xcf\x9b\x04\x70\xe9\x45\x72\xad\x15\x5f\xc4\x53\xd7\xe7\xcf\xee\xad\x4c\xcf\x3c\xc1\x1e\x76\x7f\x44\xaf\x99\x1a\xd5\x6d\x06\xab\xae\x57\x30\x07\xae\x25\xe5\x3e\x64\x67\x65\xef\xf3\x05\xf3\xaf\x4e\x82\xb7\xfb\x60\x65\x10\xbc\xcd\x1f\x6e\xcd\xdb\xd8\x60\x65\x02\x9f\x9e\xb6\x37\xdc\x6a\x78\x43\x01\x3d\xa5\xa9\x3e\xf9\x0e\x77\x23\xb7\x31\x6f\x93\xce\xc9\xf6\x17\xec\xe0\x91\x69\x99\x67\xd6\xdb\xe7\x95\x07\x22\x35\x77\x2b\xd0\x71\xf9\xda\xb4\x2f\xc0\x65\x7a\x0c\x1f\x3d\x6e\x76\x99\xb9\x9e\x58\xc6\x17\xe8\xa7\x29\xcd\xfa\x54\x4e\x7d\x8b\x83\x5f\x0e\xea\xd6\xc7\xa6\xed\xb6\x91\x1e\xfe\xe7\x66\xeb\x58\x81\xe5\x4b\x10\x45\x53\x8d\xfe\xd5\xd9\xa4\xf0\x7b\xf7\x29\x9c\xbd\x38\xba\x62\x5d\x83\x53\x57\xba\x35\xf2\xc7\xa4\x10\x68\x7f\xaf\x29\x3a\xfd\x89\x6e\x24\xb0\x93\xd1\x50\xd7\x79\x5f\xa9\x81\x39\x87\x41\x91\xe4\x06\x4b\x43\x9a\x27\xfc\x12\x1a\x04\x8c\x57\xb6\xc9\xc6\x5d\x77\x6f\xf7\xd6\xd8\x23\x03\x2c\x4c\x78\xa2\x90\xd4\x87\xcf\x14\xf3\x8e\xfd\x34\x29\x1f\xaa\x93\xfd\xb0\xd9\x24\x36\x16\x33\xff\x97\x1f\x7f\xf0\x3e\x59\xef\x9f\xff\xee\xb7\xef\x93\x4c\x3e\xa0\x2a\x2c\x09\x2a\x83\x3c\x55\x0a\xb4\xca\x57\x81\x07\x42\xaa\x3c\xf8\x21\x95\x5a\xe5\x1f\x9e\x9c\xe6\x62\xc6\x73\x76\xd6\x32\x8d\x14\xdc\x71\xfc\xc8\xe9\xfe\x0c\x52\x0a\xa9\x86\x2c\x8b\xca\x97\x2c\xd1\xa3\xb6\x79\x48\xab\xb4\x7f\x77\x04\x71\xb7\xd7\x03\xe1\xa7\x31\x70\x7d\x27\x27\x81\x06\x8d\xf5\x72\xca\x7d\xcd\x04\x27\xeb\x77\x46\x0c\x30\x60\x24\x29\xaf\x00\xb9\x0d\x6f\x91\xdb\x8e\x1f\xd9\xde\x19\xe7\x3c\x3c\x38\xd4\xc8\x87\xbf\x16\x9a\x95\x1b\xeb\xcd\x73\xa0\x70\x7d\x9a\x6d\xb2\xf6\x33\xfb\xec\xda\x5b\xe7\xe9\x50\xd7\xdb\x64\xad\xd9\x1c\x32\xda\xdd\x9d\x34\xaa\x91\xd8\x49\x60\xca\x24\x21\x0b\x60\xbb\x6f\xae\xf3\x44\xbb\x78\x6e\x49\xd7\x4a\x42\x68\xa5\x25\x4d\xb6\xd6\xce\x8c\xda\xbd\x73\x77\x5c\xff\xb1\xc0\x3e\x1c\x51\xcc\xf7\x0d\x3b\x8a\x85\xd3\xb3\xff\x07\x00\x00\xff\xff\x27\x22\xd4\x8a\x54\x37\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 14164, mode: os.FileMode(420), modTime: time.Unix(1518182011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
