// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xa8\xad\xe5\xe2\xaa\xae\x56\x48\xcd\x4b\x01\x31\x01\x01\x00\x00\xff\xff\x3e\x64\xd4\x00\x22\x00\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 34, mode: os.FileMode(420), modTime: time.Unix(1515575925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6e\x1b\xc7\xf5\xbf\xd7\x53\x0c\x08\x03\x92\x81\x90\x94\xa8\x00\x7f\x44\xa6\x0c\xc4\xf9\xb7\x69\x81\xa4\x0d\x9a\xd4\xb9\x5c\x0c\x77\x0f\xb9\x63\x2f\x67\x36\x33\xb3\xfc\x00\x21\x80\xa6\x1c\xa7\x81\x5b\x38\x48\x0b\xb4\x28\x8a\xa4\x28\xd0\xcb\x02\x8c\x62\x35\xaa\x2c\x32\x2f\xd0\x8b\x33\x6f\x54\xcc\x90\x94\x28\x9a\xa4\x49\x71\xe1\x48\x96\xf6\x86\xbb\x7b\x66\xe7\x7c\xfd\xe6\x7c\xcc\x2e\x5b\x2d\x12\x40\x99\x71\x20\x19\x5f\x70\x0d\x5c\x67\xc8\xde\xde\x5a\x31\x60\x35\xe2\x47\x54\xa9\xdd\x8c\x14\x75\x52\x12\x95\x0a\x95\x3a\x73\x77\x8d\x10\x42\xc6\xa9\xbe\x88\xb2\xd5\x20\xbb\x55\x18\xd2\x26\xe9\x63\xb7\x27\x49\x0d\x4f\x33\x1d\xc1\xc4\x08\x37\x2a\x2c\xdc\xc5\xbf\xe3\xa1\x79\x64\xf6\x4d\xdb\x3c\x32\x4f\x8b\xf9\xb0\x30\x65\xdc\xb8\x20\x11\x50\x59\x66\x8d\xcc\xdd\x62\x3e\x60\xb5\x09\xb6\x53\x6e\x9d\x93\x64\xa4\xfc\x7c\x1e\x52\xd4\xa7\x8c\xb0\x47\xab\x45\x58\x99\xe4\xde\x13\xbc\xcc\x2a\xb9\xf7\x41\xdf\x13\x22\x22\x99\xa1\xdd\x72\x71\x12\x29\x2a\x73\xc0\x69\x29\x82\xc0\x99\x78\xda\x2c\x53\x0c\xbb\x4d\xec\x49\x43\x65\xb7\x0a\xa4\xce\x82\x0a\xe8\xe1\x8f\xa7\x69\x14\x35\xbd\x92\x68\xcc\x10\xe9\x65\x25\x63\xca\x21\x9a\x33\x7a\x19\xb3\x4c\x7d\x8e\x05\xbb\x19\x09\x4a\x24\xd2\x87\x6c\x08\x54\x67\x19\xcf\x10\xa5\x9b\x11\xec\x66\x42\x60\x95\x50\xef\x6c\x6f\x6e\xc6\x8d\x3b\x0b\xcc\x68\x8f\x5f\xf2\x85\x86\xb5\x5a\x24\x37\x34\xb5\x37\x30\xb5\xa7\xa1\x1a\x83\xa4\x3a\x91\xe0\x31\xee\xf9\x10\x29\x96\xa8\xdc\x7d\x1a\x25\x40\xf6\xf6\xc8\x7b\x0b\x4d\x5c\x2c\x49\x92\x5f\x4c\xd4\x5f\x27\x3a\x0d\x59\x45\xa2\x5f\x83\xb0\xff\x0f\x91\xa6\x69\x88\x1b\xd8\x89\x2e\x22\xf0\x94\x15\xb9\xe4\x90\x39\xe4\x79\xa4\x37\x6e\x89\x89\x44\xaf\xb4\xc6\xf0\x5b\xec\xe3\x31\x76\xf1\x07\xec\x62\x0f\x8f\xcc\x33\x62\xfe\x80\x3d\x3c\x34\x6d\xfc\x1e\x8f\xf0\xe8\xa2\x38\x01\x0e\xb2\xd2\xf4\x2a\xac\x42\x7d\x11\x09\xc9\x60\x0c\x21\xe3\x77\x6f\xc0\x32\x47\xaf\x74\xc1\xe2\xd6\x6b\xea\x70\xe9\xe0\x21\x1e\x9b\x7d\xf3\x25\x1e\xe2\xd1\x7f\x9f\x10\x3c\xc1\xbe\xf9\x12\x7b\xd8\x37\x8f\x4c\xe7\xe2\x08\xf2\x05\x57\x49\x35\xd6\x4c\x70\xcf\x4f\x4a\xcc\xf7\xaa\xa0\x25\x28\x2f\x06\xe9\x85\x22\x91\x67\x78\x72\x64\x32\x20\x93\x18\x24\xb1\xe4\x1b\x60\xcd\xd1\x2b\x35\x60\xd5\xa9\x06\x99\xf5\x45\x14\xac\x06\xac\x7f\x62\x1f\x5f\x60\x1f\x9f\x63\x0f\xbb\xe6\x19\xc1\x03\x77\xd1\xbd\x38\x7a\xa2\xc0\x73\xc2\x79\x3e\x8d\xa9\xcf\x74\xf3\x1c\x8a\xa6\x83\xe7\x06\x33\x73\xf4\x4a\x19\x33\xa1\x58\x31\x75\xfd\x11\xfb\xa6\x6d\x9e\x99\x2f\x52\x01\x4c\x28\xf4\x1b\x84\x97\x56\x8b\x00\x0f\x66\xb5\x1a\xaf\x68\x58\xaa\x20\xfd\x44\x36\xaf\x57\xc7\x02\x11\xf8\x5a\x32\xeb\xf8\xd5\x60\xf9\x2f\x7c\xe1\x32\x62\xc7\xb4\xf1\xc8\x7c\xe1\x1a\xd9\x8e\x45\xe7\x12\x25\xfa\x27\x5b\x3b\xe7\x30\x3a\xf4\x88\xa7\xb7\x2c\x46\xb5\x4b\x7f\x9e\x16\x9a\x46\x67\xb8\xfc\x34\x1f\x2e\xc3\xa1\x30\x83\x43\x21\x35\x0e\xdb\x33\x38\x6c\xa7\xc6\xe1\xed\x19\x1c\xde\x4e\x8b\xc3\x7d\x11\x69\x5a\x81\xe9\x6c\x6a\x03\xa2\xfb\xbd\x28\x83\x77\x5d\x37\x35\x8b\x03\x1d\x52\x07\x27\x70\xc6\xe4\xdd\x25\x58\x7c\x24\xea\x20\xa7\xcf\x1f\x5b\x92\xb3\xd5\x98\xfc\x4b\x4c\x7d\x8f\x6a\x0d\xb2\x39\x7d\xf2\xd2\x80\x38\xc3\x4c\xf7\x17\x64\x73\xf9\x02\xe8\xab\x77\x98\xc6\x2e\x87\xa7\xc3\x9f\x4b\xb1\xb5\xf6\x0f\x3c\x1c\x44\x28\xec\xe3\x09\x9e\x98\x7d\x5b\xc8\xdb\xa2\xde\x3c\xb1\x0d\xdf\x15\xdf\x6c\x53\xa2\xac\x6b\x2c\x00\x71\x2d\xb2\x97\x2f\xaa\xd5\x84\x33\x9f\xda\x2e\x29\xcb\xb8\x06\xc9\x61\xc5\xb2\xea\x2f\xd8\xb3\x3d\x9d\x69\xbb\x6d\x80\xce\xd2\xf5\xd4\xa9\x07\xbc\x12\x8d\x28\xf7\xc1\x93\x49\x29\x02\x35\x11\x89\x17\x9a\xd7\xb4\xcd\x3e\x7e\x97\xbb\x82\x51\x82\x2c\x50\x66\x89\x12\x8b\xe0\x1a\xe2\x34\x0e\x05\x87\xd5\x40\xfa\x37\x3c\xc2\x9e\xd9\x37\x1d\xf3\x94\xe0\x8f\xd8\x27\xa6\x83\x5d\x57\x70\x3d\xc6\x9e\x0d\x6c\x66\xdf\xde\x7f\x81\x5d\x3b\x6c\x69\x0c\x0f\x5c\xe3\x55\xa1\x42\xcb\x82\x7b\x89\x82\xc0\xab\x09\xe6\x83\x57\x65\x3c\xd1\x63\xed\xc0\x62\xe2\x9e\x8c\xc4\x4d\x7b\x2f\xf7\xe3\x0f\x3f\x7e\x5d\xfa\xab\xea\x92\x5a\x9b\xdf\x99\xce\xab\x97\x2e\x59\x4e\xe1\xc9\xf0\xf4\xba\xb4\x1f\xc5\x56\xb7\xa3\x59\x6a\x2e\x0d\x81\xf7\xef\xa5\x6f\x8a\xaf\xf0\xc0\x74\xb0\x8f\x3f\x9a\xb6\xeb\x7d\x6d\x56\xb7\xb9\xfc\x30\x5d\x8d\x63\x29\x22\xc1\x2b\x6e\xed\x5e\x5c\xfd\x34\xb5\xbf\x9a\xe1\xfe\x1a\x75\xd5\xe7\xe3\x7d\x9d\x95\xd9\x4a\xe1\xfe\x53\xf6\x73\x46\xf0\x18\x5f\x58\x70\xdb\xf5\x6f\x9e\x2e\x0f\x71\xf6\x50\x0a\xcd\x1e\x7a\x56\x1a\xcf\x8f\x18\x70\xbd\x74\x4d\x72\xf9\x80\x77\xd5\xbb\x91\x6f\xb1\x8f\xdf\x0f\x76\xee\x2e\x7b\xe7\xf1\x26\x2c\xcc\x3a\x50\x1d\x82\xcc\x8a\x44\x07\x42\xc8\x59\xab\x72\xdc\x2d\x04\x7b\xd8\x25\x66\xdf\xae\x3e\xf3\x04\x0f\x6f\xb6\xc0\x57\x37\x3f\xe3\x8b\x5b\xff\xc0\x46\xbe\x03\x5b\xdf\x98\x0e\x1e\x99\xf6\x4f\xe3\x81\xab\x1e\x67\xbe\x31\x9f\x9b\xb6\x7b\x69\x79\xe9\xe3\xcc\x2b\xea\x88\x90\x3d\xac\x31\xc5\x04\xcf\x29\x2d\x01\xf4\xb5\x28\x28\x14\xf8\x89\x64\xba\x99\xad\x43\xc9\xa7\xd5\xec\x40\xf5\x95\x8a\x8a\x22\xab\x56\x88\x92\xfe\x6e\x26\x3f\x34\x6d\xfe\xd4\xb4\xf9\xc1\xfc\xf9\x58\x42\x8d\x41\xfd\x94\x4f\x95\xd9\x6a\x26\xd0\xe1\xce\xd6\xff\xbd\x13\x37\xee\x54\x69\x63\x78\x5d\xd8\x7e\x67\x31\xd6\x97\xaf\x84\x20\x6f\x28\x46\x42\x1a\x45\xd9\xad\x99\x41\xf6\xaf\xd8\xc5\x13\xd7\x48\x0e\x82\x6c\x1f\xbf\x73\xdf\x30\x9c\xd8\x78\xdb\x37\x6d\xdb\x4f\xe2\x73\x7b\x86\x87\xc4\x36\x94\x07\xe6\xf3\xe1\x0b\xea\x3e\xfe\x87\xe0\x73\x3c\x70\x4f\x1f\xdd\x24\xc4\x94\x7d\x56\x48\xcf\x67\xb6\x66\x79\x6c\x3a\x36\xe8\xdf\x38\x69\x65\x27\xb9\x2d\x01\x5f\x54\x67\xfa\xe7\x4f\xee\x9d\x42\xdf\x3c\xc6\x3e\xf6\x7e\xc2\x48\x37\x2f\x7f\xda\xca\x4b\x5d\xaf\xa4\x09\x5c\x4b\xca\x7d\xc8\xce\xab\x3a\x17\xdb\x73\xfa\xfa\x34\x08\xba\x8f\x2e\x86\x41\xd0\xfc\x7e\x6d\xd1\x86\x9c\x95\x09\x7c\x76\xd6\x96\x3b\x6f\x78\x23\x01\x3d\xa5\xa9\x3e\xfd\x96\x74\x33\xb7\xb9\xe8\xfe\x92\x93\xed\xcf\xd8\xc5\x63\xd3\x36\x4f\xed\x82\x5f\x54\x1e\x88\xd4\xc2\xbb\x58\x8e\xcb\x37\xa6\x73\x01\x2e\xb3\x53\xef\xf8\x71\x53\x1c\x2c\xf4\xc4\x2a\x6b\x81\x7e\x96\xd0\xac\x4f\xe5\xcc\x17\x10\xf8\xd5\xb0\xdf\x7a\x64\x3a\x2e\x93\xf4\xf1\xdf\x37\xd9\x23\x05\xcb\x97\x20\x8a\x66\x1a\xfd\xeb\xf3\xc5\xd5\x0f\xee\x73\x2e\x7b\x71\x7c\xc5\xba\xdd\xb3\xa5\xb4\x36\xf6\xff\x9a\x10\xe8\x20\xd7\x14\x9d\xfe\x44\x37\x63\xd8\xcd\x68\x68\xe8\xbc\xaf\xd4\xd0\x9c\xa3\xa0\x48\x72\x43\xd7\x90\xd6\x29\xbf\x98\x06\x01\xe3\x95\x1d\xb2\x79\xc7\xdd\xdb\x5b\x9b\x78\x64\x88\x85\x29\x4f\x14\xe2\xc6\xe8\x99\x62\xde\xb1\x9f\x25\xe5\x03\x75\x9a\x0f\x5b\x2d\x62\x63\x31\xf3\x7f\xf1\xc9\x87\x1f\x90\x8d\xc1\xf9\x6f\x7f\xf3\x01\xc9\xe4\x03\xaa\xc2\x92\xa0\x32\xc8\x53\xa5\x40\xab\x7c\x0d\x78\x20\xa4\xca\x83\x1f\x52\xa9\x55\xfe\xc1\xe9\x69\xae\xca\x78\xce\xce\x5a\xa6\x91\x82\xdb\x8e\x1f\x39\x4b\xd1\x20\xa5\x90\x6a\xc4\xb2\xa8\x7c\xc9\x62\x3d\x6e\x9b\x07\xb4\x46\x07\x77\xc7\x10\x77\x6b\x23\x10\x7e\x52\x05\xae\x6f\xe7\x24\xd0\xa0\xb9\x51\x4e\xb8\xaf\x99\xe0\x64\xe3\xf6\x98\x01\x86\x8c\x24\xe5\x15\x20\xb7\xe0\x2d\x72\xcb\xf1\x23\x3b\xbb\x93\x9c\x47\x07\x87\x3a\xf9\xe8\x57\x42\xb3\x72\x73\xa3\xf5\x12\x28\xdc\xfe\xc2\x0e\x59\xff\x99\x7d\x76\xfd\xad\x97\xe9\xd0\xd0\x3b\x64\xbd\xd5\x1a\x31\xda\xdb\x9b\x36\xaa\x19\xdb\x49\x60\xc6\x24\x21\x0b\x60\x67\x60\xae\x97\x89\xd6\x79\xce\xa5\xeb\x25\x21\xb4\xd2\x92\xc6\xdb\xeb\xe7\x46\xed\xdd\xbe\x33\xa9\xff\x44\x60\x1f\x8d\x28\xe6\x07\x86\x1d\xc7\xc2\xd9\xd9\xff\x02\x00\x00\xff\xff\x90\xba\x7b\x5a\x1b\x36\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 13851, mode: os.FileMode(420), modTime: time.Unix(1517683512, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
