// Code generated by go-bindata.
// sources:
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xa8\xad\xe5\xe2\xaa\xae\x56\x48\xcd\x4b\x01\x31\x01\x01\x00\x00\xff\xff\x3e\x64\xd4\x00\x22\x00\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 34, mode: os.FileMode(420), modTime: time.Unix(1515575925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\x22\xb7\x17\x7f\xcf\xa7\xb0\x50\xa4\x24\xd2\x0e\x6c\x92\x37\x36\xc9\xd3\xff\x5f\xb5\xd2\xf6\xa2\xaa\x97\xc7\x91\x99\x39\x30\xce\x1a\x9b\xda\x9e\x00\x1a\x21\x11\xb2\x17\x55\x5b\x69\xab\xb6\x0f\x55\x1f\xda\xaa\x52\x1f\x2b\xb1\x34\xb4\x34\x17\x3e\xc3\xf1\x37\xaa\x66\x80\x5d\x42\x20\x4b\x04\xd9\x34\xed\xcc\x4b\x3c\xf6\xf1\x65\x7e\xbf\xdf\x39\x3e\x76\x88\x22\xe2\x43\x91\x09\x20\x19\x4f\x0a\x03\xc2\x64\x48\xa3\xb1\xb2\xe3\xb3\x03\xe2\x71\xaa\xf5\x6e\x46\xc9\x6a\x66\x6f\x85\x10\x42\xc6\x6b\x3d\xc9\x9d\xb2\xef\x6c\x6e\x0d\xdb\x26\xdb\xc7\xaa\x27\x9b\x6a\xae\x61\x86\xc3\x84\x45\x62\x15\x6c\xed\xe1\xcf\xd8\xb5\x87\xf6\xc8\x36\xed\xa1\x7d\xbe\x93\x0b\xb6\xa6\xd8\x8d\x2f\x84\x03\x55\x45\x56\xcb\xec\xed\xe4\x7c\x76\x30\x31\xed\x94\xaa\x0b\x2b\x19\x7d\xf4\xd5\x73\xbc\x86\xe0\xca\x95\x0c\x20\xd9\x26\x71\xa1\xa6\x9d\xcd\x2d\x52\x65\x7e\x09\xcc\xf0\x8f\x6b\x28\xe7\x75\xb7\x20\x6b\x33\x06\xbb\xbc\xbc\x0a\x15\xc0\xaf\xb0\xbe\xce\x07\x4d\xed\xc7\xfc\xdd\x8c\x02\x2d\x43\xe5\x81\x13\x00\x35\x0e\x13\x19\xa2\x4d\x9d\xc3\x6e\x26\x00\x56\x0a\x4c\x7e\xfb\xfe\xfd\x4a\xed\xc1\x1c\x23\xc6\xcf\x7b\x62\x2e\xb3\x28\x22\xd9\x82\x2c\x95\xa8\x32\x6e\x25\xe4\x9a\x2a\xd7\x40\xb9\x02\x8a\x9a\x50\x81\xcb\x84\xeb\x01\xd7\x2c\xd4\xd9\xcf\x28\x0f\x21\xd6\xe4\x1b\xbf\xe7\x32\xd7\xd7\x34\xb9\xa2\x79\xd8\xf4\x1f\xd1\x80\x0c\xcd\x42\x22\xf8\x30\x34\xcb\x50\x81\x0c\x4d\x2a\x83\x5b\x94\x81\x0f\xdc\xd0\x85\x84\xf0\xbf\x78\x84\x65\x48\x21\x59\x4a\x2a\x86\xdb\x11\x43\x95\x1a\x50\x8e\x27\xb9\x3f\x4b\x0c\xf8\x2b\xf6\xf1\x14\xfb\x78\x8c\xe7\xd8\xb6\x2f\x08\x76\x92\x97\x76\x4a\xc0\xf2\x08\x08\xe4\xcc\xa8\x8c\xdf\x62\xdf\x36\xed\x0b\xfb\x2c\x45\x7f\x6a\x8f\x45\xd0\x07\x0e\x9e\x51\xcc\x63\xa6\x3e\x13\xff\xdf\xf0\x14\xbb\x78\x62\x5b\xb6\x89\x3d\xfb\x2c\x49\x61\x5b\x31\x0d\x6f\x83\x82\x39\xaa\x27\xaa\xc6\x5e\x87\xc5\x11\x9b\xb7\x99\xf9\xff\x82\xdd\x01\x8c\xd8\xc7\x33\x3c\xb3\x47\x78\x8e\x3d\x3c\xc1\xb6\x7d\x8a\x3d\xec\xa5\x67\x81\x9b\x17\xbd\x27\xcb\xe5\x50\x30\x8f\x1a\x26\x85\xc3\x84\x01\x25\x60\xb1\x64\x10\xbf\xc7\x73\xdb\xc2\xae\x6d\xe2\x39\x76\x6d\xeb\xda\xe9\x80\x96\x45\x73\xc0\x7c\x90\x6e\x81\x72\x2a\x3c\x70\x55\x58\xe0\xa0\x5d\x23\x0d\xe5\xf3\x27\x03\xf1\x63\x9b\xf6\x08\x5f\x66\xff\x11\x89\xc3\xd4\xa6\x7f\x9d\x86\x2a\x81\x14\x30\x33\x6e\x0e\x5d\xde\x3e\xc6\x3e\x9e\xa7\xa0\x2f\x0b\xf4\x2a\x2b\xb2\x85\x9c\xf6\x73\xf6\x0e\x23\x78\x82\xa7\xd8\xc3\x6e\xec\xbf\xf6\xf9\xb5\xfd\xb6\xcc\x1e\x29\x69\xd8\x23\x37\x5e\x8d\xeb\x71\x06\xc2\x5c\xdb\x69\xd3\xfd\x73\xfe\xfd\xf3\x27\xec\xe3\xef\xa3\xcc\x2f\xdd\x2b\x6f\xda\xe5\xaa\x40\x4d\x00\xca\x91\xa1\xf1\xa5\x54\x33\x63\xdc\x18\x2d\x24\x3e\x1e\x11\x7b\x14\xfb\x95\x7d\x8a\xdd\x34\xe2\x2d\x0e\x3f\x13\xf3\xa3\xdf\x89\x63\x5a\x07\xdb\xb6\x69\x5b\xd8\xb3\xcd\xdb\x61\xe0\xae\xc6\x97\x1f\xed\x13\xdb\xc4\x76\xac\xe1\x34\xbe\xdc\xbc\xc0\x35\x78\xa1\x62\xa6\xee\x54\xa1\xe0\xd1\xb2\xa3\x8d\x82\xd9\xb9\x38\xfe\x80\x6d\x3c\x4b\xd2\xec\x34\xcc\xcc\xea\xb1\x04\x16\x02\xca\xb9\xb3\x39\x1f\x0b\x1d\x82\x7d\x7c\x69\xbf\xc4\x2e\x9e\xc5\x91\xa7\x6f\x9b\xb6\x89\x3d\x3c\x8e\x4b\xd8\x25\xf6\x88\x60\xc7\x3e\x19\xde\x9b\xf5\xf1\x2f\x82\xc7\xd8\x49\x7a\xf7\x52\xce\x96\xcc\xd9\xd6\xf2\x38\x8b\xdd\xea\xb1\x6d\xbd\x9d\x0b\xb6\x37\x21\x74\xe7\x49\x4a\x6e\x19\x3c\x59\x9e\xc9\xcf\x77\xc9\x7d\x50\x3f\x3d\x24\x2e\x0d\x72\x10\x46\x51\xe1\x81\x73\x65\xea\xf4\xcd\xab\xd0\x94\x5c\x2a\x0f\x43\x93\xfd\x2a\xa5\x60\x09\x14\xd0\x2f\x42\xea\x78\x54\xcd\xbe\x1b\xf9\x7a\x98\xab\x1e\xda\x56\x12\x7b\xfa\xf8\x47\x8a\xfc\x12\x90\x2f\x00\xe7\x73\x68\x3e\xd9\x8e\xff\x4c\xfe\x95\x12\xbf\x9c\xdc\xb1\x93\x42\x14\x11\x10\x3e\x69\x34\x56\x56\xc6\x7e\xe4\xb3\xaf\x33\xa3\x5b\x97\x28\x22\xda\x50\xc3\xbc\x77\x3f\x79\xff\x21\x59\x1f\x94\x3f\xfd\xf8\x21\xc9\xe4\x7c\xaa\x83\x82\xa4\xca\xcf\x51\xad\xc1\xe8\xdc\x01\x08\x5f\x2a\x9d\x03\x2f\xa0\xca\xe8\xdc\xfe\xab\x62\xb6\xcc\x44\x36\x1e\xb5\x48\xb9\x86\x8d\x64\xbe\xe1\xe8\xac\x48\xb2\xa0\x94\x54\x7a\x34\xe5\x8e\xf6\x14\xab\x18\x62\xea\x15\xd8\xcd\x18\xa8\x99\xdc\x3e\x3d\xa0\x83\xda\x31\x2e\x57\xd7\x7d\xe9\x85\x65\x10\x66\x23\xab\x80\xfa\xf5\xf5\x62\x28\x3c\xc3\xa4\x20\xeb\x1b\x24\xba\x80\x47\x14\x11\x45\x45\x09\xc8\x2a\xdc\x23\xab\xc9\x7c\x24\xbf\x3b\x39\xf3\xe8\x11\x50\x25\x1f\x7d\x20\x0d\x2b\xd6\xd7\xa3\x4b\x70\x27\xa7\x9f\x3c\x59\xfb\x7f\xdc\x77\xed\xde\xe5\x76\xa8\x99\x3c\x59\x8b\xa2\xd1\x44\x8d\xc6\x34\xab\x7a\x25\x1e\x04\x66\x0c\x12\x30\x1f\xf2\x03\xb8\x2e\x37\xc6\xaa\x64\xa2\x94\x27\x6b\x05\x29\x8d\x36\x8a\x56\xb6\xd7\x2e\x58\x35\x36\x1e\x4c\x7e\xff\x90\xe7\x49\x8b\x9d\xdc\x00\xd8\x71\x2d\xbc\x2e\xfd\x1d\x00\x00\xff\xff\xcd\x52\x55\xc4\xfa\x25\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 9722, mode: os.FileMode(420), modTime: time.Unix(1515661463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
