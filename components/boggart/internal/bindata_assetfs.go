// Code generated by go-bindata.
// sources:
// templates/views/detect.html
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDetectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesViewsDetectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDetectHtml,
		"templates/views/detect.html",
	)
}

func templatesViewsDetectHtml() (*asset, error) {
	bytes, err := templatesViewsDetectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/detect.html", size: 0, mode: os.FileMode(420), modTime: time.Unix(1515662635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xc1\x8e\xda\x30\x10\xbd\xf3\x15\x23\x8b\x43\x2b\x2d\xb1\xca\xb1\xca\xe6\x52\x2a\xed\x4a\xdb\x4b\x45\xcf\x95\x63\x0f\xc5\x34\x6b\xa7\x1e\x43\x41\x51\xfe\xbd\xb2\x93\xd0\x2c\x49\xd0\x22\xed\x5e\x82\xfd\x3c\x6f\xde\xcc\xf3\xe0\xaa\x02\x85\x1b\x6d\x10\x98\xb4\xc6\xa3\xf1\x0c\xea\x7a\x36\x4b\x95\x3e\x80\x2c\x04\xd1\x3d\x73\xf6\x2f\xcb\x66\x00\x00\x7d\xf4\xf8\xb3\x14\x06\x8b\xf6\x64\x78\xea\xb5\x2f\xb0\x77\x1a\x23\xb6\xcb\x6c\x85\x07\x2d\x91\x52\xbe\x5d\x5e\x1c\xf6\xe8\xb2\x40\xe1\x36\xfa\xc8\xb2\x94\x2b\x7d\xe8\x69\x5c\x6c\x5f\x48\x76\x1d\x5c\xe4\xf5\x22\x2f\xb0\x8b\x6a\x36\xf1\xbb\x20\xef\x74\x89\x0a\x94\xf0\x22\x22\x17\xcc\x86\xbd\x45\xa1\xc6\x70\x37\x04\x5b\x42\xb6\x3e\x95\x98\x72\xbf\x9d\x8c\xe8\xaa\x79\x56\x0b\x69\x8b\xc5\x92\x65\x8f\xea\x2a\x21\x5b\x21\x49\xa7\x4b\xaf\xad\xb9\x25\xf3\x27\x96\xad\x05\xfd\xa6\x1b\x39\x5f\x4d\xb0\x63\xa2\xa4\x94\x8f\xf5\x1e\x62\x27\x9c\xca\xad\x3a\x0d\xf1\xaa\x02\x27\xcc\x2f\x84\xb9\xbe\x83\xb9\x8a\x63\x01\x9f\xef\x21\x69\x96\x14\xe6\x70\x98\x6b\xd2\xf5\x11\xe5\xa1\x92\xbf\x83\xb9\x3f\x95\x51\xa7\x95\x4c\xc2\x65\x8d\x8a\x9d\x73\x53\x29\x4c\xe7\x51\x21\x72\x2c\x20\x7e\x17\xb4\x97\x12\x89\x58\x56\x55\x6d\xda\xba\x4e\x79\x88\xbe\x5a\x0b\x1a\x35\x25\x97\xf2\xa9\x3e\x42\x83\x41\xa6\x2d\xfa\x51\x45\xad\x57\x46\xf7\x86\xe7\x16\x5a\x9c\x9c\x2f\x76\x6f\xfc\x6b\x58\x7a\x73\x26\xb6\xe3\x03\x75\xdd\xae\x42\xd7\x05\x05\x7f\x56\x9a\xce\x88\x99\x6e\x62\x7c\xc6\xa6\xcd\x4b\xf9\xc8\x94\xa5\x3c\xfe\xab\x47\x5f\x8f\x76\xd9\xfe\xfc\x4f\x3c\xeb\xbd\x88\x61\x9e\x59\xa7\x56\x55\x40\x5e\x78\x2d\x1f\xd6\xdf\x9e\xe0\x43\xb3\xfe\xf1\xfd\x09\x18\x57\x82\xb6\xb9\x15\x4e\x71\x41\x84\x9e\xf8\x01\x8d\xb2\x8e\xf8\xf9\x61\xa1\xc4\xa0\x5f\xe4\xc4\x25\x35\xe8\xba\x41\x73\x6b\x3d\x79\x27\xca\xe4\x59\x9b\x44\x12\x31\xd8\x88\x82\xf0\xe3\x1b\xaa\x6e\xf4\x11\x55\x68\x05\x5d\x57\x41\x84\x1e\x22\x74\xbd\x84\x71\x5f\x76\xf4\x86\xae\xf0\x1d\xf1\xdd\x9f\x3d\xba\x53\xd2\x33\x26\xd4\xb2\x7b\x0f\x37\x72\x0a\x82\x93\x57\xf0\x2e\x9a\xbd\x1b\xb8\x10\xef\x5f\xc4\x50\xfe\xec\xfe\xbf\x00\x00\x00\xff\xff\x64\xa5\x26\xa7\xa6\x07\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 1958, mode: os.FileMode(420), modTime: time.Unix(1518424287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\x1b\xc7\x15\x7e\xd7\xaf\x18\x10\x06\x24\x03\x21\xa9\x4b\x80\x22\x32\x65\x20\x4e\xaf\x40\xd2\x06\x4d\xea\x3c\x2e\x86\xbb\x87\xdc\xb1\x77\x67\x36\x33\xb3\xbc\x80\x10\x40\x53\x8e\xd3\xc0\x2d\x1c\xa4\x05\x5a\x14\x45\x52\x14\xe8\x63\x01\x46\xb1\x1a\x55\x16\x99\x3f\xd0\x87\x33\xff\xa8\x98\x21\x29\x51\x14\x49\x93\x22\x63\x4b\x96\xf6\x85\xbb\x7b\x66\xe7\x9c\x39\xf3\x9d\xeb\x2e\x1b\x0d\x12\x40\x89\x71\x20\x19\x5f\x70\x0d\x5c\x67\xc8\xee\xee\x4a\x21\x60\x15\xe2\x47\x54\xa9\x9d\x8c\x14\x55\x52\x14\xe5\x32\x95\x3a\x73\x77\x85\x10\x42\x86\xa9\xbe\x88\xb2\x71\x90\xdd\xd8\xec\xd3\x46\xe9\x43\xb7\x47\x49\x35\x4f\x33\x1d\xc1\xc8\x08\x37\x2a\xdc\xbc\x8b\xff\xc0\x03\xf3\xc8\xec\x99\xa6\x79\x64\x9e\x16\xf2\xe1\xe6\x98\x71\xc3\x82\x44\x40\x65\x89\xd5\x32\x77\x0b\xf9\x80\x55\x46\xd8\x8e\xb9\x75\x46\x92\xc1\xe2\xa7\xf3\x90\xa2\x3a\x66\x84\x3d\x1a\x0d\xc2\x4a\x24\xf7\x9e\xe0\x25\x56\xce\xdd\x13\x22\x22\x99\xbe\xd2\x72\x49\x1a\x29\x2a\x73\xc0\x69\x31\x82\xc0\xe9\x77\xdc\x14\x63\xb4\xba\x45\xec\x49\x4d\x65\x37\x36\x49\x95\x05\x65\xd0\xfd\x1f\x4f\xd3\x28\xaa\x7b\x45\x51\x9b\x20\xcf\xf9\x15\x26\x94\x43\x34\x65\xf4\x3c\x3a\x19\xfb\x1c\x0b\x76\x32\x12\x94\x48\xa5\x0f\xd9\x10\xa8\xce\x32\x9e\x21\x4a\xd7\x23\xd8\xc9\x84\xc0\xca\xa1\xde\xde\x5a\x5f\x4f\x6a\x77\x66\x98\xd1\x1e\xbf\xe2\x33\x0d\x6b\x34\x48\xae\xaf\x6a\xaf\xa7\x6a\x4f\x43\x9c\x80\xa4\x3a\x95\xe0\x31\xee\xf9\x10\x29\x96\xaa\xdc\x7d\x1a\xa5\x40\x76\x77\xc9\x7b\x33\x4d\x5c\x28\x4a\x92\x9f\x4d\xd4\xdf\xa4\x7a\x19\xb2\x8a\x54\xbf\x02\x61\x7f\x0a\x91\xa6\xcb\x10\x37\xb0\x13\x5d\x44\xe0\x31\xe6\x38\xe7\x90\x29\xe4\x69\xa4\x37\xce\xc4\x44\xaa\x17\xb2\x31\xfc\x06\xbb\x78\x84\x6d\xfc\x1e\xdb\xd8\xc1\x43\xf3\x8c\x98\x3f\x62\x07\x0f\x4c\x13\xbf\xc3\x43\x3c\xbc\x28\x4e\x80\x83\x2c\xd7\xbd\x32\x2b\x53\x5f\x44\x42\x32\x18\x42\xc8\xf0\xdd\x1b\xb0\x4c\x59\xd7\x72\xc1\xe2\xec\x75\xe9\x70\x69\xe1\x01\x1e\x99\x3d\xf3\x05\x1e\xe0\xe1\xff\x9e\x10\x3c\xc6\xae\xf9\x02\x3b\xd8\x35\x8f\x4c\xeb\xe2\x08\xf2\x05\x57\x69\x9c\x68\x26\xb8\xe7\xa7\x45\xe6\x7b\x31\x68\x09\xca\x4b\x40\x7a\xa1\x48\xe5\x29\x9e\x1c\x99\xf4\xc8\x24\x01\x49\x2c\xf9\x06\x58\x53\xd6\xb5\x34\x60\x55\xa9\x06\x99\xf5\x45\x14\x2c\x06\xac\x7f\x61\x17\x5f\x60\x17\x9f\x63\x07\xdb\xe6\x19\xc1\x7d\x77\xd1\xbe\x38\x7a\xa2\xc0\x73\xc2\x79\x3e\x4d\xa8\xcf\x74\xfd\x0c\x8a\xc6\x83\xe7\x06\x33\x53\xd6\xb5\x64\xcc\x84\x62\xc1\xd0\xf5\x27\xec\x9a\xa6\x79\x66\x3e\x5f\x0a\x60\x42\xa1\xdf\x20\xbc\x34\x1a\x04\x78\x30\xa9\xd4\x98\x56\xad\xc4\x20\xfd\x54\xd6\xaf\x57\xb9\x02\x11\xf8\x5a\x32\xbb\xeb\x8b\x61\xf2\xdf\xf8\xc2\x85\xc3\x96\x69\xe2\xa1\xf9\xdc\x95\xb0\x2d\x0b\xcd\x39\xf2\xf3\x8f\x37\xb6\xcf\x00\xb4\xbf\x23\x9e\xde\xb0\x00\xd5\x2e\xf6\x79\x5a\x68\x1a\x9d\x82\xf2\x93\x7c\x38\x0f\x87\xcd\x09\x1c\x36\x97\xc6\x61\x6b\x02\x87\xad\xa5\x71\x78\x7b\x02\x87\xb7\x97\xc5\xe1\xbe\x88\x34\x2d\xc3\x78\x36\x95\x1e\xd1\xfd\x5e\x94\xc1\xbb\xae\x94\x9a\xc4\x81\xf6\xa9\xbd\x13\x38\x65\xf2\xee\x1c\x2c\x3e\x14\x55\x90\xe3\xe7\x4f\x2c\xc9\xe9\x6a\x48\xfe\x39\xa6\xbe\x47\xb5\x06\x59\x1f\x3f\x79\xb1\x47\x9c\xa0\xa6\xfb\x33\xb2\xb9\x7c\xde\xf3\xe5\xbd\xa5\xa1\xcb\xfe\x69\xff\xe7\x52\x34\xd5\xfe\x89\x07\x3d\x0f\x85\x5d\x3c\xc6\x63\xb3\x67\xb3\x78\x9b\xd1\x9b\x27\xb6\xda\xbb\xca\x6d\x36\x25\x4a\xba\xc2\x02\x10\xd7\x22\x74\xf9\x22\x8e\x53\xce\x7c\x6a\xeb\xa3\x2c\xe3\x1a\x24\x87\x05\x13\xaa\xbf\x62\xc7\x56\x73\xa6\xe9\x1a\x00\xad\xb9\x33\xa9\x93\x1d\xf0\x8a\x34\xa2\xdc\x07\x4f\xa6\xc5\x08\xd4\x88\x1b\x9e\x69\x5e\xd3\x34\x7b\xf8\x6d\xee\x0a\xba\x08\xf2\xb2\x04\x4b\x14\x59\x04\xd7\x10\xa4\x49\x28\x38\x2c\x86\xd0\xbf\xe3\x21\x76\xcc\x9e\x69\x99\xa7\x04\x7f\xc0\x2e\x31\x2d\x6c\xbb\x54\xeb\x31\x76\xac\x4b\x33\x7b\xf6\xfe\x0b\x6c\xdb\x61\x73\x03\x38\x80\x0a\xf3\xc1\x73\x82\x7a\x31\x94\x69\x49\x70\x2f\x55\x10\x78\x15\x61\x09\x31\xe3\xa9\x1e\xaa\x05\x66\x13\xfa\x78\x20\xf4\xb2\x1b\xb9\x1f\x7d\xf0\xd1\xab\xd5\x82\x8a\xe7\x5c\xbb\xf9\xbd\x69\xbd\xdc\x86\xc9\x7c\xcb\x1e\xf5\x53\xaf\x56\x07\x03\x57\xeb\x5a\x9b\xc5\xfa\xdc\x70\xf8\xc5\xbd\xe5\x2b\xe4\x4b\xdc\x37\x2d\xec\xe2\x0f\xa6\xe9\x8a\x60\x1b\xe1\x6d\x5c\x3f\xf8\x31\xd6\x9d\x48\x11\x09\x5e\x76\x36\x7d\x71\x25\x2c\x53\x07\x57\x30\x06\x5c\xa3\x22\xfb\x6c\x10\xa8\xb2\x12\x5b\x28\x06\x7c\xc2\x7e\xce\x08\x1e\xe1\x0b\x8b\x6f\xeb\x08\xcc\xd3\xb9\x51\x1e\xb3\x87\x52\x68\xf6\xd0\xb3\xd2\x78\x7e\xc4\x80\xeb\xb9\xb3\x94\xcb\x87\xba\xab\x5e\x9c\x7c\x83\x5d\xfc\xae\xd7\xc5\xbb\xec\x85\xc8\x9b\x60\x98\x55\xa0\x3a\x04\x99\x15\xa9\x0e\x84\x90\x93\xac\x72\x78\x5b\x08\x76\xb0\x4d\xcc\x9e\xb5\x3e\xf3\x04\x0f\x6e\xda\xe1\x8b\xab\x9f\xf1\xd9\xb5\xbf\x6f\x3d\xdf\xbe\x4d\x74\x4c\x0b\x0f\x4d\xf3\xf5\xec\xc0\x55\xf7\x33\x5f\x9b\xcf\x4c\xd3\xbd\xc0\xbc\xf4\x7e\x66\x5a\x12\x11\xb2\x87\x15\xa6\x98\xe0\x39\xa5\x25\x80\xbe\x16\xd9\x84\x02\x3f\x95\x4c\xd7\xb3\x55\x28\xfa\x34\xce\xf6\x96\xbe\x58\x55\xf9\x37\x6c\xe3\xb1\xab\x27\xce\x3b\xb8\xd9\xb3\xf0\x02\x8b\xcb\x44\x49\x7f\x27\x93\xef\xef\x50\xde\xa7\x31\x48\x9a\xef\xc9\x98\x4f\x24\x54\x18\x54\x4f\x64\x8d\x99\x4d\x87\x02\x1d\x6e\x6f\xfc\xe4\x9d\xa4\x76\x27\xa6\xb5\xfe\xf5\xe6\xd6\x3b\xb3\x89\x7f\xf9\x72\x10\x32\x33\x68\x43\x1a\x45\xd7\x12\xb2\x76\xe1\xd9\x8d\xe5\x41\xd6\x56\xba\xfb\xe6\xb3\xfe\xcb\xf3\x2e\xfe\x97\xe0\x73\xdc\x77\xc4\xc3\xa5\xe0\xd7\x0a\x7c\x7d\xd0\xfb\xc6\x42\x6e\x73\x62\x8e\x71\xc6\x01\xee\x13\xec\xe2\xb7\xee\x73\x9e\x63\x9b\x6e\x74\x4d\xd3\x22\x09\x9f\xdb\x33\x3c\x70\x70\xb3\xde\xf1\xb1\x69\xd9\xf8\x79\x93\x00\x2e\xbc\x49\xae\xb5\xe2\x8b\x78\xe2\xfe\xfc\xd9\xbd\xad\xe9\x9a\xc7\xd8\xc5\xce\x6b\xb4\x9a\x89\x5e\xdd\x66\xb0\xea\x7a\x39\x73\xe0\x5a\x52\xee\x43\x76\x5a\xf6\x3e\x9b\x33\xff\xea\xc4\x79\xbb\x0f\x59\xfa\xce\xdb\xfc\x61\x65\xd6\xc6\x06\x2b\x11\xf8\x74\xa8\x89\x67\x77\xc3\x1b\x08\xe8\x29\x4d\xf5\xc9\xf7\xb9\xeb\xb9\xf5\x59\x9b\x74\x4e\xb6\xbf\x60\x1b\x8f\x4c\xd3\x3c\xb5\xd6\x3e\xab\x3c\x10\xa9\x99\x5b\x81\x8e\xcb\xd7\xa6\x75\x01\x2e\x93\x7d\xf8\xf0\x71\x13\x65\x66\x7a\x62\x11\x5b\xa0\x9f\xa6\x34\xeb\x53\x39\xf1\xed\x0e\x7e\xd9\xaf\x5b\x1f\x99\x96\x0b\x23\x5d\xfc\xcf\x4d\xe8\x58\x82\xe6\x8b\x10\x45\x13\x95\xfe\xd5\xd9\xa4\xf0\x7b\xf7\x89\x9c\xbd\x38\xba\x62\x5d\x83\x53\x53\x5a\x19\xfa\xc3\x52\x08\xb4\x17\x6b\x0a\x6e\xfd\x44\xd7\x13\xd8\xc9\x68\xa8\xe9\xbc\xaf\x54\x5f\x9d\x03\xa7\x48\x72\xfd\xad\x21\x8d\x13\x7e\x09\x0d\x02\xc6\xcb\xdb\x64\xfd\x8e\xbb\xb7\xbb\x32\xf2\x48\x1f\x0b\x63\x9e\xd8\x4c\x6a\x83\x67\x0a\x79\xc7\x7e\x92\x94\x0f\xd4\x49\x3c\x6c\x34\x88\xf5\xc5\xcc\xff\xe5\xc7\x1f\xbc\x4f\xd6\x7a\xe7\xbf\xfb\xed\xfb\x24\x93\x0f\xa8\x0a\x8b\x82\xca\x20\x4f\x95\x02\xad\xf2\x15\xe0\x81\x90\x2a\x0f\x7e\x48\xa5\x56\xf9\x07\x27\xa7\xb9\x98\xf1\x9c\x9d\xb5\x44\x23\x05\xb7\x1d\x3f\x72\x1a\x9f\x41\x4a\x21\xd5\x80\x65\x41\xf9\x92\x25\x7a\x58\x37\x0f\x68\x85\xf6\xee\x0e\x21\xee\xd6\x5a\x20\xfc\x34\x06\xae\x6f\xe7\x24\xd0\xa0\xbe\x56\x4a\xb9\xaf\x99\xe0\x64\xed\xf6\x90\x02\xfa\x8c\x24\xe5\x65\x20\xb7\xe0\x2d\x72\xcb\xf1\x23\xdb\x3b\xa3\x9c\x07\x07\x87\x2a\xf9\xf0\xd7\x42\xb3\x52\x7d\xad\x71\x0e\x14\xae\x4f\xb3\x4d\x56\x7f\x66\x9f\x5d\x7d\xeb\x3c\x1d\x6a\x7a\x9b\xac\x36\x1a\x03\x46\xbb\xbb\xe3\x46\xd5\x13\x3b\x09\x4c\x98\x24\x64\x01\x6c\xf7\xd4\x75\x9e\x68\x37\xcf\x6d\xe9\x6a\x51\x08\xad\xb4\xa4\xc9\xd6\xea\x99\x51\xbb\xb7\xef\x8c\xae\x7f\xc4\xb1\x0f\x46\x14\xf2\x3d\xc5\x0e\x63\xe1\xf4\xec\xff\x01\x00\x00\xff\xff\xfb\x4e\x78\x7c\x6c\x37\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 14188, mode: os.FileMode(420), modTime: time.Unix(1518431035, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/detect.html": templatesViewsDetectHtml,
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"detect.html": &bintree{templatesViewsDetectHtml, map[string]*bintree{}},
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
