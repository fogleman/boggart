// Code generated by go-bindata.
// sources:
// templates/views/devices.html
// templates/views/index.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsDevicesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xce\xcf\x2b\x49\xcd\x2b\x51\x52\xa8\xad\xe5\xe2\xaa\xae\x56\x48\xcd\x4b\x01\x31\x01\x01\x00\x00\xff\xff\x3e\x64\xd4\x00\x22\x00\x00\x00")

func templatesViewsDevicesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsDevicesHtml,
		"templates/views/devices.html",
	)
}

func templatesViewsDevicesHtml() (*asset, error) {
	bytes, err := templatesViewsDevicesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/devices.html", size: 34, mode: os.FileMode(420), modTime: time.Unix(1515575925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6b\x23\xb7\x17\x7f\xcf\xa7\x10\x66\x21\x09\xec\xd8\x9b\xe4\xcd\x9b\xe4\xe9\xff\x2f\x2d\x6c\x2f\x94\x5e\x1e\x8d\x3c\x73\xec\x51\x90\x25\x57\xd2\xc4\x36\x83\xc1\x71\xf6\x42\xd9\xc2\x96\xb6\x0f\xa5\x0f\x6d\x29\xf4\xb1\xe0\x75\xe3\xd6\xcd\x65\x3e\xc3\xd1\x37\x2a\x33\xb6\x77\x1d\xc7\x93\x75\x88\xb3\x69\xda\x99\x97\x68\x74\x8e\x6e\xbf\xdf\x6f\x8e\x8e\x14\x87\x21\xf1\xa0\xc2\x04\x90\x9c\x2b\x85\x01\x61\x72\xa4\xdd\x5e\xd9\xf6\xd8\x3e\x71\x39\xd5\x7a\x27\xa7\x64\x23\xb7\xbb\x42\x08\x21\xd3\xb5\xae\xe4\x4e\xcd\x73\x36\x36\xc7\xb6\x59\xfb\x54\xf5\xac\xa9\x59\x32\xcc\x70\x98\xf1\x48\xbc\xfc\xcd\x5d\xfc\x19\x07\xf6\xc0\x1e\xda\x8e\x3d\xb0\xcf\xb7\x0b\xfe\xe6\x1c\xbf\xe9\x89\x70\xa0\xaa\xc2\x9a\xb9\xdd\xed\x82\xc7\xf6\x67\x86\x9d\x53\x75\x6e\x26\x93\x45\x5f\x3e\xc6\x6b\x08\x2e\x9d\xc9\x08\x92\x2d\x12\x17\x9a\xda\xd9\xd8\x24\x0d\xe6\x55\xc1\x8c\xff\x94\x0c\xe5\xbc\x55\x2a\xcb\x66\x4a\x67\x17\xa7\x57\xa7\x02\xf8\x25\xde\x57\x59\xd0\xdc\x76\xcc\xdb\xc9\x29\xd0\x32\x50\x2e\x38\x3e\x50\xe3\x30\x91\x23\xda\xb4\x38\xec\xe4\x7c\x60\x55\xdf\x14\xb7\x1e\x3c\xa8\x37\x1f\x2e\xd0\x63\xfc\xbc\x27\x16\x72\x0b\x43\x92\x2f\xcb\x6a\x95\x2a\x53\xaa\x07\x5c\x53\x55\x32\x50\xab\x83\xa2\x26\x50\x50\x62\xa2\xe4\x02\xd7\x2c\xd0\xf9\xcf\x28\x0f\x20\xd6\xe4\x1b\xd7\x73\x91\xeb\x2b\xba\x5c\x62\x1e\x9b\xfe\x23\x1a\x90\x81\xb9\x96\x08\x3e\x0c\xcc\x32\x54\x20\x03\x93\xc9\xe0\x16\x65\xe0\x01\x37\xf4\x5a\x42\xf8\x5f\xdc\xc3\x32\xa4\x90\x4c\x25\x13\xc3\xed\x88\xa1\x41\x0d\x28\xc7\x95\xdc\x4b\x13\x03\xfe\x8a\x11\x9e\x60\x84\x47\x78\x86\x3d\xfb\x82\x60\x3f\x79\xe9\x65\x04\x2c\x8f\x00\x5f\xa6\x46\x65\xfc\x16\x23\xdb\xb1\x2f\xec\xb3\x0c\xfd\xb9\x2d\xae\x83\x3e\x70\x70\x8d\x62\x2e\x33\xad\x54\xfc\x7f\xc3\x13\x1c\xe0\xb1\xed\xda\x0e\x0e\xed\xb3\x24\x85\xed\xc6\x34\xbc\x0d\x0a\x16\xa8\x9e\xa9\x9a\x7a\x1d\x17\x27\x6c\xde\x66\xe6\xff\x0b\x0e\x46\x30\x62\x84\xa7\x78\x6a\x0f\xf1\x0c\x87\x78\x8c\x3d\xfb\x14\x87\x38\xcc\xce\x02\x37\x2f\x7a\x57\xd6\x6a\x81\x60\x2e\x35\x4c\x0a\x87\x09\x03\x4a\xc0\xf5\x92\x41\xfc\x1e\xcf\x6c\x17\x07\xb6\x83\x67\x38\xb0\xdd\x2b\xa7\x03\x5a\x56\xcc\x3e\xf3\x40\x96\xca\x94\x53\xe1\x42\x49\x05\x65\x0e\xba\x64\xa4\xa1\x7c\xf1\x64\x20\x7e\x6c\xc7\x1e\xe2\xcb\xfc\x3f\x22\x71\x98\x6b\xfa\xd7\x69\xa8\xee\x4b\x01\xa9\x71\x73\xfc\xc9\xdb\xc7\x18\xe1\x59\x06\xfa\xb2\x40\x6f\xb0\x0a\x4b\xc3\xfc\x73\xf6\x0e\x23\x78\x8c\x27\x38\xc4\x41\xfc\x69\xda\xe7\xd9\x26\xb5\xf8\x26\xf5\x13\x46\xf8\xfb\x24\xbd\xca\x36\xa4\x9b\xd6\x75\x03\xa8\xf1\x41\x39\x32\x30\x9e\x94\x2a\x35\x90\x4c\xd1\x42\xe2\x33\x08\xb1\x87\xb1\xc2\xed\x53\x1c\x64\x61\xe5\xfa\xf0\x33\xb1\x38\xfa\xfd\x38\xba\xf4\xb1\x67\x3b\xb6\x8b\x43\xdb\xb9\x1d\x06\xee\x6a\x7c\xf9\xd1\x3e\xb1\x1d\xec\xc5\x1a\xce\xe2\xcb\xcd\x0b\x5c\x83\x1b\x28\x66\x5a\x4e\x03\xca\x2e\xad\x39\xda\x28\x48\x4f\x78\xf1\x07\xec\xe1\x69\x92\xcb\x66\x61\x26\xad\xc5\x12\x58\xf0\x29\xe7\xce\xc6\x62\x2c\xf4\x09\x46\xf8\xd2\x7e\x89\x03\x3c\x8d\x23\x4f\x64\x3b\xf1\x21\x1c\x8f\xe2\x12\x0e\x88\x3d\x24\xd8\xb7\x4f\xc6\x97\x53\x11\xfe\x45\xf0\x08\xfb\x49\xeb\x61\xc6\xd9\x92\x39\xdb\x5c\x1e\x67\xf1\x67\xf5\xd8\x76\xdf\xce\x2d\xd6\x9b\x10\xba\xf3\x24\x25\x47\x79\x57\xd6\x52\xf9\xf9\x2e\xb9\x74\x89\xb2\x93\xd8\xd2\x20\x07\x61\x14\x15\x2e\x38\x97\xa6\x4e\xdf\xbc\x0a\x4d\xc9\xcd\xed\x38\x34\xd9\xaf\x32\x0a\x96\x40\x01\xfd\x22\xa0\x8e\x4b\x55\xfa\x05\xc4\xd7\xe3\x5c\xf5\xc0\x76\x93\xd8\x13\xe1\x1f\x19\xf2\x4b\x40\xbe\x0c\x9c\x2f\xa0\xf9\x64\x3b\xfe\x33\xf9\x7f\x45\xfc\x72\x7c\xc7\x4e\x0a\x61\x48\x40\x78\xa4\xdd\x5e\x59\x99\xfa\x25\xcd\x9e\xce\x4d\xee\x23\xc3\x90\x68\x43\x0d\x73\xdf\xfd\xe4\xfd\x47\x64\x6d\x54\xfe\xf4\xe3\x47\x24\x57\xf0\xa8\xf6\xcb\x92\x2a\xaf\x40\xb5\x06\xa3\x0b\xfb\x20\x3c\xa9\x74\x01\x5c\x9f\x2a\xa3\x0b\x7b\xaf\x8a\xf9\x1a\x13\xf9\xb8\xd7\x0a\xe5\x1a\xd6\x93\xf1\xc6\xbd\xb3\x0a\xc9\x83\x52\x52\xe9\xc9\x90\xdb\xda\x55\xac\x6e\x88\x69\xd5\x61\x27\x67\xa0\x69\x0a\x7b\x74\x9f\x8e\x6a\xa7\xb8\xbc\xb7\xe6\x49\x37\xa8\x81\x30\xeb\x79\x05\xd4\x6b\xad\x55\x02\xe1\x1a\x26\x05\x59\x5b\x27\xe1\x39\x3c\xc2\x90\x28\x2a\xaa\x40\xee\xc1\x7d\x72\x2f\x19\x8f\x14\x77\x66\x47\x9e\x3c\x02\x1a\xe4\xa3\x0f\xa4\x61\x95\xd6\x5a\x78\x01\xee\xe4\xf4\x53\x24\xab\xff\x8f\xdb\xae\xde\xbf\x68\x87\xa6\x29\x92\xd5\x30\x9c\x0c\xd4\x6e\xcf\xf3\x6a\xd5\xe3\x4e\x20\xa5\x13\x9f\x79\x50\x1c\xc1\x75\xd1\x18\xab\x92\x89\x6a\x91\xac\x96\xa5\x34\xda\x28\x5a\xdf\x5a\x3d\xe7\xd5\x5e\x7f\x38\xbb\xfe\x31\xcf\xb3\x1e\xdb\x85\x11\xb0\xd3\x5a\x78\x5d\xfa\x3b\x00\x00\xff\xff\x2a\x93\xbd\xac\x5f\x25\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 9567, mode: os.FileMode(420), modTime: time.Unix(1515595922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/devices.html": templatesViewsDevicesHtml,
	"templates/views/index.html": templatesViewsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"devices.html": &bintree{templatesViewsDevicesHtml, map[string]*bintree{}},
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
