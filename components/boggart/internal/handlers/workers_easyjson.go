// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package handlers

import (
	json "encoding/json"
	time "time"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE6f1d0abDecodeGithubComKihamoBoggartComponentsBoggartInternalHandlers(in *jlexer.Lexer, out *workersHandlerItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "attempts_success":
			out.AttemptsSuccess = uint64(in.Uint64())
		case "attempts_fails":
			out.AttemptsFails = uint64(in.Uint64())
		case "first_run_at":
			if in.IsNull() {
				in.Skip()
				out.FirstRunAt = nil
			} else {
				if out.FirstRunAt == nil {
					out.FirstRunAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FirstRunAt).UnmarshalJSON(data))
				}
			}
		case "last_run_at":
			if in.IsNull() {
				in.Skip()
				out.LastRunAt = nil
			} else {
				if out.LastRunAt == nil {
					out.LastRunAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastRunAt).UnmarshalJSON(data))
				}
			}
		case "next_run_at":
			if in.IsNull() {
				in.Skip()
				out.NextRunAt = nil
			} else {
				if out.NextRunAt == nil {
					out.NextRunAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NextRunAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE6f1d0abEncodeGithubComKihamoBoggartComponentsBoggartInternalHandlers(out *jwriter.Writer, in workersHandlerItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"attempts_success\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AttemptsSuccess))
	}
	{
		const prefix string = ",\"attempts_fails\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.AttemptsFails))
	}
	if in.FirstRunAt != nil {
		const prefix string = ",\"first_run_at\":"
		out.RawString(prefix)
		out.Raw((*in.FirstRunAt).MarshalJSON())
	}
	if in.LastRunAt != nil {
		const prefix string = ",\"last_run_at\":"
		out.RawString(prefix)
		out.Raw((*in.LastRunAt).MarshalJSON())
	}
	if in.NextRunAt != nil {
		const prefix string = ",\"next_run_at\":"
		out.RawString(prefix)
		out.Raw((*in.NextRunAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v workersHandlerItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE6f1d0abEncodeGithubComKihamoBoggartComponentsBoggartInternalHandlers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v workersHandlerItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE6f1d0abEncodeGithubComKihamoBoggartComponentsBoggartInternalHandlers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *workersHandlerItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE6f1d0abDecodeGithubComKihamoBoggartComponentsBoggartInternalHandlers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *workersHandlerItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE6f1d0abDecodeGithubComKihamoBoggartComponentsBoggartInternalHandlers(l, v)
}
