package internal

import (
	"time"

	"github.com/davecheney/gpio"
	"github.com/kihamo/boggart/components/boggart"
	"github.com/kihamo/boggart/components/boggart/protocols/rs485"
	"github.com/kihamo/boggart/components/boggart/providers/pulsar"
	"github.com/kihamo/shadow/components/config"
)

func (c *Component) GetConfigVariables() []config.Variable {
	return []config.Variable{
		config.NewVariable(
			boggart.ConfigRS485Address,
			config.ValueTypeString,
			rs485.DefaultSerialAddress,
			"Serial port address",
			true,
			"RS485 protocol",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigRS485Timeout,
			config.ValueTypeDuration,
			rs485.DefaultTimeout,
			"Serial port timeout",
			true,
			"RS485 protocol",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigDoorsEnabled,
			config.ValueTypeBool,
			false,
			"Enabled",
			false,
			"Doors",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigDoorsEntrancePin,
			config.ValueTypeInt,
			gpio.GPIO17,
			"Pin for door reed switch",
			false,
			"Doors",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigHikvisionStreetEnabled,
			config.ValueTypeBool,
			false,
			"Enabled",
			true,
			"HikVision on the street",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigHikvisionStreetHost,
			config.ValueTypeString,
			nil,
			"Host",
			true,
			"HikVision on the street",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigHikvisionStreetPort,
			config.ValueTypeInt64,
			nil,
			"Port",
			true,
			"HikVision on the street",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigHikvisionStreetUsername,
			config.ValueTypeString,
			"admin",
			"Username",
			true,
			"HikVision on the street",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigHikvisionStreetPassword,
			config.ValueTypeString,
			nil,
			"Password",
			true,
			"HikVision on the street",
			[]string{config.ViewPassword},
			nil),
		config.NewVariable(
			boggart.ConfigHikvisionStreetStreamingChannel,
			config.ValueTypeInt64,
			101,
			"Streaming channel",
			true,
			"HikVision on the street",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMercuryEnabled,
			config.ValueTypeBool,
			false,
			"Enabled",
			true,
			"Mercury devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMercuryRepeatInterval,
			config.ValueTypeDuration,
			time.Minute*2,
			"Repeat interval",
			false,
			"Mercury devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMercuryDeviceAddress,
			config.ValueTypeString,
			nil,
			"Device address in format XXXXXX (last 6 digits of device serial number)",
			true,
			"Mercury devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMikrotikEnabled,
			config.ValueTypeBool,
			false,
			"Enabled",
			true,
			"Mikrotik devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMikrotikRepeatInterval,
			config.ValueTypeDuration,
			time.Minute*5,
			"Repeat interval",
			false,
			"Mikrotik devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMikrotikAddress,
			config.ValueTypeString,
			"192.168.88.1:8728",
			"API address in format host:port",
			true,
			"Mikrotik devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMikrotikUsername,
			config.ValueTypeString,
			"admin",
			"Username",
			true,
			"Mikrotik devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMikrotikPassword,
			config.ValueTypeString,
			nil,
			"Password",
			true,
			"Mikrotik devices",
			[]string{config.ViewPassword},
			nil),
		config.NewVariable(
			boggart.ConfigMikrotikTimeout,
			config.ValueTypeDuration,
			time.Second*10,
			"Request timeout",
			true,
			"Mikrotik devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMobileEnabled,
			config.ValueTypeBool,
			false,
			"Enabled",
			false,
			"Mobile accounts",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMobileRepeatInterval,
			config.ValueTypeDuration,
			time.Minute*30,
			"Repeat interval",
			false,
			"Mobile accounts",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMobileMegafonPhone,
			config.ValueTypeString,
			nil,
			"Phone number",
			true,
			"Mobile Megafon accounts",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigMobileMegafonPassword,
			config.ValueTypeString,
			nil,
			"Password",
			true,
			"Mobile Megafon accounts",
			[]string{config.ViewPassword},
			nil),
		config.NewVariable(
			boggart.ConfigPulsarEnabled,
			config.ValueTypeBool,
			false,
			"Enabled",
			true,
			"Pulsar devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigPulsarRepeatInterval,
			config.ValueTypeDuration,
			time.Minute*15,
			"Repeat interval",
			false,
			"Pulsar devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigPulsarHeatMeterAddress,
			config.ValueTypeString,
			nil,
			"Device address HEX value (AABBCCDD). If empty system try to find device",
			true,
			"Pulsar devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigPulsarColdWaterPulseInput,
			config.ValueTypeInt64,
			pulsar.Input1,
			"Input number of cold water",
			true,
			"Pulsar devices",
			[]string{config.ViewEnum},
			map[string]interface{}{
				config.ViewOptionEnumOptions: [][]interface{}{
					{pulsar.Input1, "#1"},
					{pulsar.Input2, "#2"},
				},
			}),
		config.NewVariable(
			boggart.ConfigPulsarColdWaterStartValue,
			config.ValueTypeFloat64,
			0,
			"Start value of cold water (in m3)",
			true,
			"Pulsar devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigPulsarHotWaterPulseInput,
			config.ValueTypeInt64,
			pulsar.Input2,
			"Input number of hot water",
			true,
			"Pulsar devices",
			[]string{config.ViewEnum},
			map[string]interface{}{
				config.ViewOptionEnumOptions: [][]interface{}{
					{pulsar.Input1, "#1"},
					{pulsar.Input2, "#2"},
				},
			}),
		config.NewVariable(
			boggart.ConfigPulsarHotWaterStartValue,
			config.ValueTypeFloat64,
			0,
			"Start value of hot water (in m3)",
			true,
			"Pulsar devices",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigSoftVideoEnabled,
			config.ValueTypeBool,
			false,
			"Enabled",
			true,
			"SoftVideo provider",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigSoftVideoRepeatInterval,
			config.ValueTypeDuration,
			time.Hour*12,
			"Repeat interval",
			false,
			"SoftVideo provider",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigSoftVideoLogin,
			config.ValueTypeString,
			nil,
			"Login",
			true,
			"SoftVideo provider",
			nil,
			nil),
		config.NewVariable(
			boggart.ConfigSoftVideoPassword,
			config.ValueTypeString,
			nil,
			"Password",
			true,
			"SoftVideo provider",
			[]string{config.ViewPassword},
			nil),
		config.NewVariable(
			boggart.ConfigMonitoringExternalURL,
			config.ValueTypeString,
			nil,
			"Monitoring external URL",
			false,
			"Others",
			nil,
			nil),
	}
}

func (c *Component) GetConfigWatchers() []config.Watcher {
	return []config.Watcher{
		config.NewWatcher(c.GetName(), []string{
			boggart.ConfigRS485Timeout,
			boggart.ConfigRS485Address,
		}, c.watchConnectionRS485),
	}
}

func (c *Component) watchConnectionRS485(_ string, _ interface{}, _ interface{}) {
	c.initConnectionRS485()
}
