// Code generated by "enumer -type=DeviceType -trimprefix=DeviceType -output=device_type_enumer.go"; DO NOT EDIT.

package boggart

import (
	"fmt"
)

const _DeviceTypeName = "ElectricityMeterHeatMeterInternetProviderPhoneRouterCameraWaterMeterThermometerBarometerHygrometerGPIOSocketRemoteControlLEDTVUPSSmartSpeaker"

var _DeviceTypeIndex = [...]uint8{0, 16, 25, 41, 46, 52, 58, 68, 79, 88, 98, 102, 108, 121, 124, 126, 129, 141}

func (i DeviceType) String() string {
	if i < 0 || i >= DeviceType(len(_DeviceTypeIndex)-1) {
		return fmt.Sprintf("DeviceType(%d)", i)
	}
	return _DeviceTypeName[_DeviceTypeIndex[i]:_DeviceTypeIndex[i+1]]
}

var _DeviceTypeValues = []DeviceType{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}

var _DeviceTypeNameToValueMap = map[string]DeviceType{
	_DeviceTypeName[0:16]:    0,
	_DeviceTypeName[16:25]:   1,
	_DeviceTypeName[25:41]:   2,
	_DeviceTypeName[41:46]:   3,
	_DeviceTypeName[46:52]:   4,
	_DeviceTypeName[52:58]:   5,
	_DeviceTypeName[58:68]:   6,
	_DeviceTypeName[68:79]:   7,
	_DeviceTypeName[79:88]:   8,
	_DeviceTypeName[88:98]:   9,
	_DeviceTypeName[98:102]:  10,
	_DeviceTypeName[102:108]: 11,
	_DeviceTypeName[108:121]: 12,
	_DeviceTypeName[121:124]: 13,
	_DeviceTypeName[124:126]: 14,
	_DeviceTypeName[126:129]: 15,
	_DeviceTypeName[129:141]: 16,
}

// DeviceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DeviceTypeString(s string) (DeviceType, error) {
	if val, ok := _DeviceTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DeviceType values", s)
}

// DeviceTypeValues returns all values of the enum
func DeviceTypeValues() []DeviceType {
	return _DeviceTypeValues
}

// IsADeviceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DeviceType) IsADeviceType() bool {
	for _, v := range _DeviceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
