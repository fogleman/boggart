// Code generated by "enumer -type=DeviceStatus -trimprefix=DeviceStatus -output=device_status_enumer.go"; DO NOT EDIT.

package boggart

import (
	"fmt"
)

const _DeviceStatusName = "UnknownUninitializedInitializingOnlineOfflineRemovingRemoved"

var _DeviceStatusIndex = [...]uint8{0, 7, 20, 32, 38, 45, 53, 60}

func (i DeviceStatus) String() string {
	if i >= DeviceStatus(len(_DeviceStatusIndex)-1) {
		return fmt.Sprintf("DeviceStatus(%d)", i)
	}
	return _DeviceStatusName[_DeviceStatusIndex[i]:_DeviceStatusIndex[i+1]]
}

var _DeviceStatusValues = []DeviceStatus{0, 1, 2, 3, 4, 5, 6}

var _DeviceStatusNameToValueMap = map[string]DeviceStatus{
	_DeviceStatusName[0:7]:   0,
	_DeviceStatusName[7:20]:  1,
	_DeviceStatusName[20:32]: 2,
	_DeviceStatusName[32:38]: 3,
	_DeviceStatusName[38:45]: 4,
	_DeviceStatusName[45:53]: 5,
	_DeviceStatusName[53:60]: 6,
}

// DeviceStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DeviceStatusString(s string) (DeviceStatus, error) {
	if val, ok := _DeviceStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DeviceStatus values", s)
}

// DeviceStatusValues returns all values of the enum
func DeviceStatusValues() []DeviceStatus {
	return _DeviceStatusValues
}

// IsADeviceStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DeviceStatus) IsADeviceStatus() bool {
	for _, v := range _DeviceStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
