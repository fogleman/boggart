// Code generated by go-bindata.
// sources:
// templates/views/message.html
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsMessageHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5b\x6f\xe3\x36\x13\x7d\xcf\xaf\x18\x10\xc1\x87\xec\x87\xca\xca\xa5\x58\x14\xad\x65\xa0\x28\x0a\x14\xc5\xf6\x82\x66\xdb\x87\xbe\x04\x63\x73\x14\x33\xcb\x8b\x96\xa4\xbd\x49\x0c\xff\xf7\x82\x22\x65\x2b\x8e\xa2\x55\x52\x07\x5d\xbf\x24\x24\x67\x38\x3c\x3c\x3c\x33\xb4\xb8\x5a\x01\xa7\x52\x68\x02\x36\x33\xda\x93\xf6\x0c\xd6\xeb\xa3\x31\x17\x4b\x98\x49\x74\xae\x60\xd6\x7c\x62\x93\x23\x00\x80\xf6\xe8\xcc\xc8\x4c\xf1\xec\xec\x1c\x42\xcb\xa9\xa6\x75\xeb\xb2\xb3\xf3\xe4\xbf\x3b\xe7\xf6\xaa\x42\x4d\xb2\x65\x7d\xec\xe1\x85\x97\xb4\xe3\x51\x7b\xcd\xcf\x27\xab\x15\x88\xb3\x6f\x34\xb0\x4b\xd2\x1c\x14\x39\x87\xd7\xc4\x60\x04\xeb\xf5\x38\x9f\x9f\x77\x4c\x6a\x03\x96\x84\xb6\x14\xb7\x6c\x32\xce\xb9\x58\xee\x60\xe8\x18\x7a\x00\xab\x21\xe7\xf1\x1a\x01\x54\x09\x23\xb2\xd6\xd8\x40\x5d\x1f\x06\x94\x64\x3d\xd4\x7f\x33\x8e\xfa\x9a\x6c\xd3\x11\x4e\x09\xe7\x70\xda\xb9\xf7\x3a\xcc\x74\xe1\xbd\xd1\xe0\xef\x2a\x2a\x58\xec\xb0\xed\xde\x8c\x23\x06\x1c\x3d\x36\xa1\xd2\x62\x0c\xd0\x0a\xcc\xe6\x82\x73\xd2\x05\xf3\x76\x41\x6c\xf2\x3f\x2f\x14\xb9\xef\xc6\x79\x0c\xd3\xbd\xe0\x6a\xd5\xb7\xa9\xc7\x7c\xa5\x39\xe1\x64\xd6\xeb\xa3\xa7\x68\x4a\x87\xf6\x1c\xa2\x84\x2e\xcd\x97\x4d\x53\xdf\xa6\x9e\x4d\xd4\xb8\x34\x56\x35\x88\x43\x3b\x9b\x1b\x2b\xee\x8d\xf6\x28\xa1\xee\x4b\x9c\x92\xcc\x24\x95\x9e\x81\x35\x92\xa2\x1b\x03\x45\x7e\x6e\x78\xc1\x2a\xe3\x3c\x03\xc1\x0b\xe6\x48\xf3\x6c\x93\x27\x38\xf3\xc2\xe8\x82\xe5\x01\xf3\x0f\x46\x55\x46\x93\xf6\xbf\xa2\x0a\xc8\xf3\xe4\x96\x33\xd0\x66\x89\x52\x70\xf4\xf4\x04\xc7\xad\x83\x12\x9e\x54\x44\x75\x6d\xcd\xa2\x7a\xe2\x54\xea\x59\x35\xec\xe0\x5b\xb0\x4a\xe2\x1d\xd9\xed\xb9\x18\xed\xad\x91\x71\x63\x90\x2a\xcb\x45\x53\x58\x2e\x3a\xeb\x4a\x07\xa3\xb1\x36\xfc\x9e\x62\x87\xaa\x00\x63\x57\xa1\xde\x14\x32\xfa\xb8\x10\x96\x38\x9b\xfc\x7f\x9c\x07\x43\x0f\xd8\xbc\xc6\xd2\xe3\xf0\xb8\x14\xbe\x6d\x00\xbf\x1d\x04\xb8\x8e\xe2\x48\xd2\xcc\x3f\x38\xed\x44\x06\x44\xd3\x39\x03\x8d\x8a\xb6\x94\x85\x63\x6d\xda\xcd\x86\xda\x5b\xeb\x5d\x2f\x11\x65\x43\xe9\x81\x63\xf1\x15\x1c\xc7\x50\xf0\x6d\x01\xa3\xd8\x74\x5d\x2a\xee\xc4\x6e\xaa\x20\x27\x58\xa2\x5c\x50\xc1\x56\xab\x4d\xb0\xf5\x9a\xc5\x6c\xa7\x8f\x9b\xb1\xe3\xd1\xc6\x98\x76\x46\xb5\x3e\x63\x8b\x6d\xf2\x61\xf2\x20\xce\x38\x8f\x8b\x0c\xda\x55\x4a\xa8\x5e\xcc\x79\x5c\xb1\xef\xe0\x3b\xf3\xf5\x73\xa6\x7f\x9d\x11\x4b\x23\x17\x8a\xf6\x9a\x11\xd0\xce\x8a\xbf\x52\xfc\x83\xc8\x0a\xa1\xab\x85\x4f\x25\xbc\xd6\x2a\x03\x25\x74\xc1\xce\x18\x28\xbc\x2d\xd8\xd9\xe9\x29\x03\xe7\xa9\xaa\x87\x3a\x92\x27\xa6\x49\xc3\x69\x4c\xa0\xa6\xb7\xd5\xeb\x28\x0e\x05\xbd\x3e\x2f\x95\xfe\x2b\x91\xb8\x8a\x88\xbf\x9e\x46\x2e\x63\xf8\x83\x96\xc8\x69\x92\xc8\x45\x23\x90\xd3\x51\x9f\x44\x12\xa3\x51\x21\xa9\xd3\x12\x48\x3d\x72\x50\xfa\xc0\x0f\xaf\x75\xaf\x5e\x36\xc1\x0f\x42\x1f\xc3\x2f\xd6\x0d\x69\x49\x0f\xb1\xf3\xa2\xab\x75\xe7\x4a\xbc\x41\x4d\xdb\x9b\x70\x94\x62\x43\x1c\x1f\x72\x11\x46\xe2\x7f\x46\x4d\x70\x52\x92\x42\x49\x6f\x9a\xaf\x9d\xa1\xf7\xe2\x0e\x24\xf3\xc1\xa1\xc6\x2e\x50\xc9\x32\x1c\xd6\x6f\xf5\x84\x7d\x01\x43\x79\xe7\x5c\x17\xae\x68\x18\x0e\xeb\xfb\xe0\xbf\x37\xba\x14\xde\xcf\x3b\xd9\xaa\x0d\xcf\x20\x2b\xf8\xef\x0b\xd5\x3d\xce\xd1\x76\xa1\x8a\x86\xe1\xa8\xfe\x0e\xfe\x70\xb2\x0f\x4c\x64\x95\x90\x5d\x98\xa2\x61\x38\xa6\x1f\x83\xff\x0b\x30\x7d\xb9\x3f\xed\x3c\xdd\xfa\xd7\xbb\xb4\xdf\xd7\xd1\x0f\xa2\x26\x07\x22\xd0\x12\x76\x56\x65\x4b\x4e\xdc\x87\x0f\xfb\xab\xc6\x2d\x7c\xdc\x7e\x72\x05\xfb\xba\xa9\xd4\x91\xc8\x50\xa6\x63\xab\xab\x46\x87\x5b\x3b\x58\x6b\xdd\x34\x91\x5e\x53\x13\x52\x5f\x39\x23\x05\xef\x7c\x56\xea\x9a\x30\x4c\x3f\x4f\x31\xae\x78\x66\xca\xd2\x91\xcf\x2e\x3e\x47\x77\x7a\x09\x69\xde\x01\x58\xfa\xb5\xe4\x16\x53\x25\xb6\x82\x9c\x7a\x0d\x53\xaf\x33\xb7\x98\xcd\xc8\x39\xf6\xf0\x91\xad\xc9\xc0\xbe\x17\x90\x97\xf1\x38\xce\x03\x11\xbd\xaf\x70\xad\x6e\x6a\xa6\x7f\xad\xd7\x93\xd6\xfb\xe5\x4d\x7d\x4d\x84\x11\xe7\xd1\x8b\xd9\x4f\xef\x7f\x79\x07\x27\xb1\xfd\xe7\x1f\xef\x80\xe5\x1c\xdd\x7c\x6a\xd0\xf2\x1c\x9d\x23\xef\xf2\x25\x69\x6e\xac\xcb\xd3\x7b\x87\xb1\xf9\x4d\xab\x33\x52\x42\x8f\x42\xd4\x12\xa5\xa3\x37\x29\x78\x5c\xf9\x9f\x00\x00\x00\xff\xff\xe1\xdf\x8f\xe1\x38\x15\x00\x00"

func templatesViewsMessageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsMessageHtml,
		"templates/views/message.html",
	)
}

func templatesViewsMessageHtml() (*asset, error) {
	bytes, err := templatesViewsMessageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/message.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/message.html": templatesViewsMessageHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"message.html": &bintree{templatesViewsMessageHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
