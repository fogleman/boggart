// Code generated by go-bindata.
// sources:
// templates/views/message.html
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsMessageHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5b\x6f\xe3\x36\x13\x7d\xcf\xaf\x18\x10\xc1\x87\xec\x87\xca\xca\xa5\x58\x14\xad\x65\xa0\x28\x0a\x14\xc5\xf6\x82\x66\xdb\x87\xbe\x04\x63\x73\x14\x33\xcb\x8b\x96\xa4\xbd\x49\x0c\xff\xf7\x82\x22\x65\x2b\x8e\xa2\x55\x52\x07\x5d\xbf\x24\x24\x67\x38\x3c\x3c\x3c\x33\xb4\xb8\x5a\x01\xa7\x52\x68\x02\x36\x33\xda\x93\xf6\x0c\xd6\xeb\xa3\x31\x17\x4b\x98\x49\x74\xae\x60\xd6\x7c\x62\x93\x23\x00\x80\xf6\xe8\xcc\xc8\x4c\xf1\xec\xec\x1c\x42\xcb\xa9\xa6\x75\xeb\xb2\xb3\xf3\xe4\xbf\x3b\xe7\xf6\xaa\x42\x4d\xb2\x65\x7d\xec\xe1\x85\x97\xb4\xe3\x51\x7b\xcd\xcf\x27\xab\x15\x88\xb3\x6f\x34\xb0\x4b\xd2\x1c\x14\x39\x87\xd7\xc4\x60\x04\xeb\xf5\x38\x9f\x9f\x77\x4c\x6a\x03\x96\x84\xb6\x14\xb7\x6c\x32\xce\xb9\x58\xee\x60\xe8\x18\x7a\x00\xab\x21\xe7\xf1\x1a\x01\x54\x09\x23\xb2\xd6\xd8\x40\x5d\x1f\x06\x94\x64\x3d\xd4\x7f\x33\x8e\xfa\x9a\x6c\xd3\x11\x4e\x09\xe7\x70\xda\xb9\xf7\x3a\xcc\x74\xe1\xbd\xd1\xe0\xef\x2a\x2a\x58\xec\xb0\xed\xde\x8c\x23\x06\x1c\x3d\x36\xa1\xd2\x62\x0c\xd0\x0a\xcc\xe6\x82\x73\xd2\x05\xf3\x76\x41\x6c\xf2\x3f\x2f\x14\xb9\xef\xc6\x79\x0c\xd3\xbd\xe0\x6a\xd5\xb7\xa9\xc7\x7c\xa5\x39\xe1\x64\xd6\xeb\xa3\xa7\x68\x4a\x87\xf6\x1c\xa2\x84\x2e\xcd\x97\x4d\x53\xdf\xa6\x9e\x4d\xd4\xb8\x34\x56\x35\x88\x43\x3b\x9b\x1b\x2b\xee\x8d\xf6\x28\xa1\xee\x4b\x9c\x92\xcc\x24\x95\x9e\x81\x35\x92\xa2\x1b\x03\x45\x7e\x6e\x78\xc1\x2a\xe3\x3c\x03\xc1\x0b\xe6\x48\xf3\x4c\xa1\x90\x0c\x70\xe6\x85\xd1\x05\xcb\x03\xe0\x1f\x8c\xaa\x8c\x26\xed\x7f\x45\x15\x60\xe7\x69\x07\x39\x03\x6d\x96\x28\x05\x47\x4f\x4f\x10\xdc\x3a\x25\xe1\x49\x45\x48\xd7\xd6\x2c\xaa\x27\x8e\xa4\x9e\x55\x63\x0e\xbe\x05\xab\x24\xde\x91\xdd\x1e\x8a\xd1\xde\x1a\x19\x77\x05\xa9\xac\x5c\x34\x55\xe5\xa2\xb3\xa8\x74\xd0\x19\x0b\xc3\xef\x29\x76\x28\x09\x30\x76\x15\xea\x4d\x15\xa3\x8f\x0b\x61\x89\xb3\xc9\xff\xc7\x79\x30\xf4\x80\xcd\x6b\x2c\x3d\x0e\x8f\xeb\xe0\xdb\x06\xf0\xdb\x41\x80\xeb\x28\x8e\x24\xcd\xfc\x83\xa3\x4e\x64\x40\x34\x9d\x33\xd0\xa8\x68\x4b\x59\x38\xd3\xa6\xdd\x6c\xa8\xbd\xb5\xde\xf5\x12\x51\x36\xd4\x1d\x38\x16\x5f\xc1\x71\x0c\x05\xdf\x16\x30\x8a\x4d\xd7\x25\xe1\x4e\xec\xa6\x0a\x72\x82\x25\xca\x05\x15\x6c\xb5\xda\x04\x5b\xaf\x59\x4c\x75\xfa\xb8\x19\x3b\x1e\x6d\x8c\x69\x67\x54\x8b\x33\xb6\xd8\x26\x19\x26\x0f\xe2\x8c\xf3\xb8\xc8\xa0\x5d\xa5\x6c\xea\xc5\x9c\xc7\x15\xfb\x0e\xbe\x33\x59\x3f\x67\xfa\xd7\x19\xb1\x34\x72\xa1\x68\xaf\x19\x01\xed\xac\xf8\x2b\xc5\x3f\x88\xac\x10\xba\x5a\xf8\x54\xbf\x6b\xad\x32\x50\x42\x17\xec\x8c\x81\xc2\xdb\x82\x9d\x9d\x9e\x32\x70\x9e\xaa\x7a\xa8\x23\x79\x62\x9a\x34\x9c\xc6\x04\x6a\x7a\x5b\xbd\x8e\xe2\x50\xd0\xeb\xf3\x52\xe9\xbf\x12\x89\xab\x88\xf8\xeb\x69\xe4\x32\x86\x3f\x68\x89\x9c\x26\x89\x5c\x34\x02\x39\x1d\xf5\x49\x24\x31\x1a\x15\x92\x3a\x2d\x81\xd4\x23\x07\xa5\x0f\xfc\xf0\x5a\xf7\xea\x65\x13\xfc\x20\xf4\x31\xfc\x62\xdd\x90\x96\xf4\x10\x3b\x2f\xba\x5a\x77\xae\xc4\x1b\xd4\xb4\xbd\x09\x47\x29\x36\xc4\xf1\x21\x17\x61\x24\xfe\x67\xd4\x04\x27\x25\x29\x94\xf4\xa6\xf9\xd4\x19\x7a\x2f\xee\x40\x32\x1f\x1c\x6a\xec\x02\x95\x2c\xc3\x61\xfd\x56\x4f\xd8\x17\x30\x94\x77\xce\x75\xe1\x8a\x86\xe1\xb0\xbe\x0f\xfe\x7b\xa3\x4b\xe1\xfd\xbc\x93\xad\xda\xf0\x0c\xb2\x82\xff\xbe\x50\xdd\xe3\x1c\x6d\x17\xaa\x68\x18\x8e\xea\xef\xe0\x0f\x27\xfb\xc0\x44\x56\x09\xd9\x85\x29\x1a\x86\x63\xfa\x31\xf8\xbf\x00\xd3\x97\xfb\xd3\xce\xd3\xad\x7f\xbd\x4b\xfb\x7d\x1d\xfd\x20\x6a\x72\x20\x02\x2d\x61\x67\x55\xb6\xe4\xc4\x7d\xf8\xaa\xbf\x6a\xdc\xc2\x97\xed\x27\x57\xb0\xaf\x9b\x4a\x1d\x89\x0c\x65\x3a\xb6\xba\x6a\x74\xb8\xb5\x83\xb5\xd6\x4d\x13\xe9\x35\x35\x21\xf5\x95\x33\x52\xf0\xce\x37\xa5\xae\x09\xc3\xf4\xf3\x14\xe3\x8a\x67\xa6\x2c\x1d\xf9\xec\xe2\x73\x74\xa7\x67\x90\xe6\x11\x80\xa5\x5f\x4b\x6e\x31\x55\x62\x2b\xc8\xa9\xd7\x30\xf5\x3a\x73\x8b\xd9\x8c\x9c\x63\x0f\x5f\xd8\x9a\x0c\xec\x7b\xfe\x78\x19\x8f\xe3\x3c\x10\xd1\xfb\x04\xd7\xea\xa6\x66\xfa\xd7\x7a\x3a\x69\x3d\x5e\xde\xd4\xd7\x44\x18\x71\x1e\xbd\x98\xfd\xf4\xfe\x97\x77\x70\x12\xdb\x7f\xfe\xf1\x0e\x58\xce\xd1\xcd\xa7\x06\x2d\xcf\xd1\x39\xf2\x2e\x5f\x92\xe6\xc6\xba\x3c\xbd\x77\x18\x9b\xdf\xb4\x3a\x23\x25\xf4\x28\x44\x2d\x51\x3a\x7a\x93\x82\xc7\x95\xff\x09\x00\x00\xff\xff\xc3\xe1\xc6\x8d\x35\x15\x00\x00")

func templatesViewsMessageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsMessageHtml,
		"templates/views/message.html",
	)
}

func templatesViewsMessageHtml() (*asset, error) {
	bytes, err := templatesViewsMessageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/message.html", size: 5429, mode: os.FileMode(420), modTime: time.Unix(1546735961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/message.html": templatesViewsMessageHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"message.html": &bintree{templatesViewsMessageHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
