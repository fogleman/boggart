// Code generated by go-bindata.
// sources:
// templates/views/message.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsMessageHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x51\x6f\xdb\x36\x10\x7e\xcf\xaf\x38\xf0\x61\x48\x06\xc8\x8a\x9d\xad\x18\x30\xc9\xc0\x1e\x06\x0c\x43\x8b\x01\xeb\xb6\x87\xbd\x18\x67\xf1\x14\x33\xa1\x48\x95\xa4\x5c\x27\x86\xff\xfb\x40\x91\xb2\xd5\x44\x76\xed\xd6\x01\x52\xec\x25\x21\xa5\xe3\xf1\xbe\xef\x3e\xf3\x78\x5a\xaf\x81\x53\x29\x14\x01\x2b\xb4\x72\xa4\x1c\x83\xcd\xe6\x22\xe3\x62\x09\x85\x44\x6b\x73\x66\xf4\x47\x36\xbd\x00\x00\xe8\x3f\x2d\xb4\x4c\x2a\x9e\x8c\x27\xe0\x47\xb6\xea\x46\x2b\x9b\x8c\x27\xd1\xfe\xe9\x9a\xd5\xac\x46\x45\xb2\xf7\xf6\xb9\x85\x13\x4e\xd2\x13\x8b\xd6\x6a\x31\x99\xae\xd7\x20\xc6\x3f\x29\x60\xef\x49\x71\xa8\xc8\x5a\xbc\x25\x06\x23\xd8\x6c\xb2\x74\x31\x19\x58\xd4\x0f\x58\x12\x9a\x52\xac\xd8\x34\x4b\xb9\x58\x3e\x89\x61\xe0\xd1\x27\x61\x75\xe4\x3c\xdf\xc3\x07\x55\xc2\x88\x8c\xd1\xc6\x53\x77\x28\x06\x94\x64\x1c\xb4\x7f\x13\x8e\xea\x96\x4c\x37\x11\xb6\x12\xd6\xe2\x7c\x10\x7b\xeb\x66\xde\x38\xa7\x15\xb8\x87\x9a\x72\x16\x26\x6c\x87\x4d\x5b\x62\xc0\xd1\x61\xe7\x2a\x6e\xc6\x00\x8d\xc0\x64\x21\x38\x27\x95\x33\x67\x1a\x62\xd3\xef\x9c\xa8\xc8\xfe\x9c\xa5\xc1\xcd\xf0\x86\xeb\xf5\x21\x50\xcf\xf9\x8a\x6b\x7c\x66\x36\x9b\x8b\x7d\x34\xc5\xa4\x9d\x42\x94\x50\xa5\x7e\xdd\x34\x1d\x02\x75\x32\x51\x59\xa9\x4d\xd5\x45\xec\xc7\xc9\x42\x1b\xf1\xa8\x95\x43\x09\xed\x5c\xe2\x9c\x64\x22\xa9\x74\x0c\x8c\x96\x14\xcc\x18\x54\xe4\x16\x9a\xe7\xac\xd6\xd6\x31\x10\x3c\x67\x96\x14\x4f\x2a\x14\x92\x01\x16\x4e\x68\x95\xb3\x74\xa9\x45\x41\x69\x0c\x39\x65\xa0\xf4\x12\xa5\xe0\xe8\x68\x0f\xa3\xbd\xb4\x08\x47\x55\x88\xe1\xd6\xe8\xa6\xde\x93\x83\x76\x55\x1b\xa4\xb7\xcd\x99\xd3\xbb\x0c\x68\xe5\x8c\x96\x01\x02\xc4\x33\xe4\xa6\x3b\x42\x6e\x06\x4f\x90\x3d\xac\x87\x93\xe0\x1f\x2d\x9b\x2a\x9e\x01\x90\xd9\x1a\xd5\xf6\xd8\xa2\x0f\x8d\x30\xc4\xd9\xf4\xfb\x2c\xf5\x2f\x0e\x04\x9b\xb6\xf1\x1c\x30\x78\x7e\xf0\xbd\xe9\x82\x7e\x73\x74\xd0\x99\x50\x75\xe3\xa2\x34\x8d\xff\xf9\x33\xa8\x84\xca\xd9\x98\x41\x85\xab\x9c\x8d\xaf\xaf\x19\x58\x47\x75\xfb\xa8\x2f\x81\xc8\x5b\xc8\xea\x32\x62\x56\x58\xd1\x6e\xb6\x44\xd9\x50\xce\xd6\x6b\x28\xb4\x2a\xc5\x2d\xb0\x36\xd3\x23\x5b\x13\x15\x8b\x51\x67\xf6\xe3\x35\x6c\x36\x0c\x3a\x76\xfa\x3c\x1d\xe0\x67\x50\xc4\x9f\x7b\xf5\xd5\xc2\xb1\xcd\xfc\x8e\x0a\xf7\x72\xea\x79\x5f\x13\xf1\x6f\x5c\x3c\xd7\x51\x3c\x37\x9d\x74\xae\x47\x87\xc4\x63\x03\xe4\xa0\x9d\x38\xd9\x27\x9d\x07\x54\x9c\x56\xb3\xa0\xa0\x7b\xe1\x66\x85\xd4\x0d\x1f\xc5\x55\xe3\xff\xb7\x90\xfa\x22\xc2\x7b\x32\xdf\x88\x8c\x2c\x49\x2a\xdc\x90\x3e\x20\xbc\x9a\xf4\xc4\x11\x70\x45\xd9\x84\xc9\x49\xf9\xde\xee\xaa\x6b\x5f\x7d\x3a\xa1\xdd\xa1\x22\x16\x2e\x04\xf4\x01\x2e\x8f\x15\x5d\x08\x80\xa1\x7c\xb0\x96\x5d\x41\x70\xe3\x39\x0f\x81\x53\x5b\xf0\xc2\x88\x6d\x0b\xec\xee\xd2\xf8\x3b\x2a\x82\xcb\x92\x2a\x94\x74\xd5\xdd\x1a\x43\x60\x27\x23\xd0\xf7\x16\x15\x9e\x01\x43\x74\x74\x3c\x8a\x3f\xda\x05\xe7\xc2\x11\xe2\xf8\x7a\x18\x61\x70\x3c\x8a\x5f\xbc\xfd\xd9\x92\x51\xe1\xe3\xe2\x1c\xb9\x68\xfd\x9c\x90\x0a\x6f\x7f\x2e\x10\x8f\xb8\x40\x73\x06\x10\xc1\xcf\xf1\x20\xfe\xf5\xf6\x70\x79\x0e\x08\x64\x2a\x21\xcf\x00\x21\xf8\x39\x1e\xc2\xaf\xde\xfe\x0b\x20\x64\x69\xf0\xfa\xfa\xea\xd5\xb6\xb5\x7d\xa9\x8b\xcf\xbb\x7e\xef\xfc\xea\x6b\x96\xa3\x95\x43\x43\x38\x58\xb5\x0c\x59\xf1\xe8\x3b\xc2\x59\x67\xe6\xbb\xa2\x8f\x36\x67\x3f\x74\x95\x6c\x4b\xa7\xaf\x64\xdb\xc9\x50\x25\xcb\xd2\xce\xc9\x4b\x8a\x42\xaa\x99\xd5\x52\xf0\xc1\x4f\x11\x43\x0b\x8e\x13\xd0\x3e\xb2\x2b\x9e\xe8\xb2\xb4\xe4\x92\x9b\xcf\x31\x1d\xbb\xe7\xae\x77\x64\xf1\xbe\x69\x9b\x79\x25\x76\xd7\xa7\xb9\x53\x30\x77\x2a\xb1\x4d\x51\x90\xb5\xec\xd3\x0f\x33\xdd\x4f\xf0\x50\xd7\xfc\x65\x3c\x66\xa9\x27\xe2\xe0\x97\x9b\xde\x34\x0e\xe3\xbf\x5e\xc7\xdd\xfb\xe6\x75\xd7\x16\x2d\xff\xc4\x3a\x74\xa2\xf8\xed\xaf\x77\x6f\xe1\x32\x8c\xff\xfe\xf3\x2d\xb0\x94\xa3\x5d\xcc\x35\x1a\x9e\xa2\xb5\xe4\x6c\xba\x24\xc5\xb5\xb1\x69\xec\x9a\xb5\x49\xef\x7a\x93\x51\x25\xd4\xc8\x7b\x2d\x51\x5a\xba\x8a\xce\xc3\xce\xff\x05\x00\x00\xff\xff\xb7\xea\x6d\x0d\x6c\x13\x00\x00")

func templatesViewsMessageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsMessageHtml,
		"templates/views/message.html",
	)
}

func templatesViewsMessageHtml() (*asset, error) {
	bytes, err := templatesViewsMessageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/message.html", size: 4972, mode: os.FileMode(420), modTime: time.Unix(1537215219, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/message.html": templatesViewsMessageHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"message.html": &bintree{templatesViewsMessageHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
