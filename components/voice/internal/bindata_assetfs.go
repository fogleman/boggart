// Code generated by go-bindata.
// sources:
// templates/views/message.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsMessageHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdf\x6f\xdb\xb6\x13\x7f\xcf\x5f\x71\xe0\xc3\x17\xe9\x17\x90\x15\x3b\x43\x31\x60\x92\x81\x61\x18\x30\x0c\xdd\x06\xac\xdd\x1e\xf6\x12\x9c\xcd\x53\xcc\x94\x3f\x54\x92\x72\xdd\x18\xfe\xdf\x07\x8a\x54\xac\x26\xb2\x6a\x77\x0e\xd0\xbc\x24\x24\xef\x78\xfc\xf0\x73\x1f\x1f\x49\x6d\xb7\xc0\xa9\x12\x9a\x80\x2d\x8d\xf6\xa4\x3d\x83\xdd\xee\xa2\xe0\x62\x0d\x4b\x89\xce\x95\xcc\x9a\x8f\x6c\x7e\x01\x00\xd0\x1f\x5d\x1a\x99\x29\x9e\x4d\x67\x10\x5a\x4e\x75\xad\x8d\xcb\xa6\xb3\xe4\xff\x78\xce\xe6\xa6\x46\x4d\xb2\x67\x7d\xea\xe1\x85\x97\xf4\xc8\xa3\xf5\x5a\xcd\xe6\xdb\x2d\x88\xe9\xf7\x1a\xd8\x5b\xd2\x1c\x14\x39\x87\xb7\xc4\x60\x02\xbb\x5d\x91\xaf\x66\x03\x93\xfa\x80\x25\xa1\xad\xc4\x86\xcd\x8b\x9c\x8b\xf5\x23\x0c\x03\x43\x9f\xc1\xea\xc8\x79\xba\x46\x00\x55\xc1\x84\xac\x35\x36\x50\x37\x86\x01\x25\x59\x0f\xed\xdf\x8c\xa3\xbe\x25\xdb\x75\x84\x53\xc2\x39\x5c\x0c\xee\xbd\x0d\xb3\x68\xbc\x37\x1a\xfc\xa7\x9a\x4a\x16\x3b\x6c\xbf\x37\xe3\x88\x01\x47\x8f\x5d\xa8\xb4\x18\x03\xb4\x02\xb3\x95\xe0\x9c\x74\xc9\xbc\x6d\x88\xcd\xff\xe7\x85\x22\xf7\x43\x91\xc7\x30\xc3\x0b\x6e\xb7\x63\x9b\x7a\xca\x57\x9a\x13\x32\xb3\xdb\x5d\x1c\xa2\x29\x25\xed\x14\xa2\x84\xae\xcc\xb7\x4d\xd3\xd8\xa6\x4e\x26\xaa\xa8\x8c\x55\x1d\xe2\xd0\xce\x56\xc6\x8a\x7b\xa3\x3d\x4a\x68\xfb\x12\x17\x24\x33\x49\x95\x67\x60\x8d\xa4\xe8\xc6\x40\x91\x5f\x19\x5e\xb2\xda\x38\xcf\x40\xf0\x92\x39\xd2\x3c\x53\x28\x24\x03\x5c\x7a\x61\x74\xc9\xf2\x00\xf8\x27\xa3\x6a\xa3\x49\xfb\xdf\x51\x05\xd8\x79\xda\x41\xce\x40\x9b\x35\x4a\xc1\xd1\xd3\x01\x82\x7b\x59\x12\x9e\x54\x84\x74\x6b\x4d\x53\x1f\x48\x49\x3b\xab\xc5\x1c\x7c\x4b\xb6\x36\xb2\x51\xb4\x4f\x8a\xd1\xde\x1a\x19\x77\x05\xa9\xac\x5c\x77\x55\xe5\x7a\xb0\xa8\x1c\x48\x44\x2c\x0e\x7f\xa7\xf8\xa1\x2c\x40\xe1\x6a\xd4\x0f\x95\x8c\x3e\x34\xc2\x12\x67\xf3\xff\x17\x79\x30\x8c\x00\xce\x5b\x3c\x23\x0e\x4f\x6b\xe1\xeb\x0e\xf4\xeb\xa3\x41\x17\x42\xd7\x8d\x4f\x6a\xb5\xa1\x22\x30\x50\x42\x97\x6c\xca\x40\xe1\xa6\x64\xd3\xab\x2b\x06\xce\x53\xdd\x0e\xf5\x55\x91\x78\x8b\x89\xee\x38\xd5\xa8\x68\xdf\x5b\xa3\x6c\xa8\x64\x21\xe3\x71\x08\x76\x3b\x06\x1d\x0b\x7d\x3e\x46\x78\x18\xd4\xef\x97\x4c\xff\x59\x24\xae\x26\xe2\xcf\xa7\x91\xb7\x31\xfc\x8b\x96\xc8\x55\x92\xc8\x75\x27\x90\xab\xc9\x98\x44\x12\xa3\x51\x21\xa9\xd3\x13\x48\x3b\xf2\xa2\xf4\x81\xef\xc9\x9e\x55\x21\x7d\x75\xc4\xe0\x2f\x42\x1f\x8e\x24\x2d\xfd\x50\xe2\x21\x9a\x66\xbd\xac\xc7\x7d\x25\x3d\xc4\xce\x49\xf9\x7e\x58\xd5\xd4\xe1\x3c\xe9\x14\x74\x87\x9a\x58\x3c\xe2\xe9\x43\x2b\xa6\x10\x1b\xe2\x78\x20\x31\x22\xa1\xf6\x4c\x8a\x2d\xf6\x70\x06\xee\xef\x75\xbf\xa2\x26\xb8\xac\x48\xa1\xa4\x57\xdd\xc5\x2e\xae\x74\x32\x24\xf3\xde\xa1\xc6\x21\x50\xc9\x72\x3c\xac\x3f\xda\x09\xe7\x02\x86\xf2\x93\x73\x43\xb8\xa2\xe1\x78\x58\x3f\x06\xff\xb3\xd1\xa5\xf0\x7e\x35\xc8\x56\x6b\x38\x81\xac\xe0\x7f\x2e\x54\xf7\xb8\x42\x3b\x84\x2a\x1a\x8e\x47\xf5\x4f\xf0\x87\xcb\x73\x60\x22\xab\x84\x1c\xc2\x14\x0d\xc7\x63\xfa\x39\xf8\x7f\x05\xa6\x22\x8f\x51\xbf\xbd\xaa\xec\x69\xe3\x9f\xef\xd0\x7e\xd7\x46\x7f\x11\x35\x39\x10\x81\x96\x70\xb0\x2a\x5b\x72\xe2\x3e\xbc\x61\x6e\x3a\xb7\x70\x8f\xff\xe8\x4a\xf6\x5d\x57\xa9\x23\x91\xa1\x4c\xc7\xd6\x50\x8d\x0e\xa7\x76\xb0\xb6\xba\xe9\x22\x3d\xa7\x26\xa4\xbe\x71\x46\x0a\x3e\xf8\x82\x1e\x9a\x70\x9c\x7e\x0e\x31\xae\x78\x66\xaa\xca\x91\xcf\xae\xbf\x44\x77\x7a\xf4\x75\x4f\x1e\x96\x6e\x4b\xae\x59\x28\xb1\x17\xe4\xc2\x6b\x58\x78\x9d\xb9\x66\xb9\x24\xe7\xd8\xe7\xdf\x13\xba\x5f\xe0\xd8\x63\xef\xeb\x78\x2c\xf2\x40\xc4\xe8\x07\x87\x5e\x37\x35\xd3\xbf\xde\x43\xb1\xf7\xa9\xe6\xae\x3d\x26\xc2\x88\xf3\xe8\xc5\xf2\x97\x77\xbf\xbd\x81\xcb\xd8\xfe\xeb\xcf\x37\xc0\x72\x8e\x6e\xb5\x30\x68\x79\x8e\xce\x91\x77\xf9\x9a\x34\x37\xd6\xe5\xe9\x75\x67\x6c\x7e\xd7\xeb\x4c\x94\xd0\x93\x10\xb5\x42\xe9\xe8\x55\x0a\x1e\x57\xfe\x37\x00\x00\xff\xff\x73\x56\x22\x56\x23\x12\x00\x00")

func templatesViewsMessageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsMessageHtml,
		"templates/views/message.html",
	)
}

func templatesViewsMessageHtml() (*asset, error) {
	bytes, err := templatesViewsMessageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/message.html", size: 4643, mode: os.FileMode(420), modTime: time.Unix(1543014460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/message.html": templatesViewsMessageHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"message.html": &bintree{templatesViewsMessageHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
