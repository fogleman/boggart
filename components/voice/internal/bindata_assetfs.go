// Code generated by go-bindata.
// sources:
// templates/views/message.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsMessageHtml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x0c\x88\xa0\xc8\x16\x95\x95\x8f\x62\x51\xb4\x96\x81\x1e\x0a\x14\xc5\x16\x2d\x9a\x6d\x0f\xbd\x04\x63\x73\x14\x33\x4b\x91\x5a\x92\xf6\x26\x31\xfc\xdf\x0b\x8a\x94\xad\x38\x8c\x56\x49\x1d\xec\xfa\x92\x90\x9c\xe1\xf0\xf1\xf1\xcd\xd0\xe2\x6a\x05\x9c\x4a\xa1\x08\xd8\x4c\x2b\x47\xca\x31\x58\xaf\x8f\xc6\x5c\x2c\x61\x26\xd1\xda\x82\x19\xfd\x89\x4d\x8e\x00\x00\xba\xa3\x33\x2d\xb3\x8a\x67\x67\xe7\xe0\x5b\xb6\x6a\x5b\xb7\x36\x3b\x3b\x8f\xfe\xbb\x73\x6e\xaf\x6a\x54\x24\x3b\xd6\xc7\x1e\x4e\x38\x49\x3b\x1e\x8d\xd7\xfc\x7c\xb2\x5a\x81\x38\xfb\x41\x01\xbb\x24\xc5\xa1\x22\x6b\xf1\x9a\x18\x8c\x60\xbd\x1e\xe7\xf3\xf3\xc4\xa4\x2e\x60\x49\x68\x4a\x71\xcb\x26\xe3\x9c\x8b\xe5\x0e\x86\xc4\xd0\x03\x58\x2d\x39\x8f\xd7\xf0\xa0\x4a\x18\x91\x31\xda\x78\xea\xfa\x30\xa0\x24\xe3\xa0\xf9\x9b\x71\x54\xd7\x64\xda\x8e\xb0\x95\xb0\x16\xa7\xc9\xbd\x37\x61\xa6\x0b\xe7\xb4\x02\x77\x57\x53\xc1\x42\x87\x6d\xf7\xa6\x2d\x31\xe0\xe8\xb0\x0d\x15\x17\x63\x80\x46\x60\x36\x17\x9c\x93\x2a\x98\x33\x0b\x62\x93\x6f\x9c\xa8\xc8\xfe\x34\xce\x43\x98\xf4\x82\xab\x55\xdf\xa6\x1e\xf3\x15\xe7\xf8\x93\x59\xaf\x8f\x9e\xa2\x29\x1e\xda\x73\x88\x12\xaa\xd4\x5f\x37\x4d\x7d\x9b\x7a\x36\x51\xe3\x52\x9b\xaa\x45\xec\xdb\xd9\x5c\x1b\x71\xaf\x95\x43\x09\x4d\x5f\xe2\x94\x64\x26\xa9\x74\x0c\x8c\x96\x14\xdc\x18\x54\xe4\xe6\x9a\x17\xac\xd6\xd6\x31\x10\xbc\x60\x96\x14\xcf\x36\x79\x82\x33\x27\xb4\x2a\x58\xbe\xd4\x62\x46\x79\x1c\xcf\x19\x28\xbd\x44\x29\x38\x3a\x7a\x82\xd4\xce\xc9\x08\x47\x55\x80\x71\x6d\xf4\xa2\x7e\xe2\x18\x9a\x59\x0d\x4e\xef\x5b\xb0\x5a\xe2\x1d\x99\xed\x41\x68\xe5\x8c\x96\x61\x27\x10\x4b\xc9\x45\x5b\x49\x2e\x92\x85\x24\x41\x61\x28\x06\x7f\xc6\xd8\xbe\x0c\xc0\xd8\xd6\xa8\x36\x95\x8b\x3e\x2e\x84\x21\xce\x26\xdf\x8e\x73\x6f\xe8\x01\x9b\x37\x58\x7a\x1c\x1e\xd7\xbe\xb7\x2d\xe0\xb7\x83\x00\x37\x51\x2c\x49\x9a\xb9\x07\xc7\x1b\xc9\x80\x60\x3a\x67\xa0\xb0\xa2\x2d\x65\xfe\x1c\xdb\x76\xbb\xa1\xee\xd6\x7a\xd7\x8b\x44\x19\x5f\x6b\xe0\x58\x7c\x07\xc7\x21\x14\xfc\x58\xc0\x28\x34\x6d\x4a\xb6\x49\xec\xba\xf6\xfa\x81\x25\xca\x05\x15\x6c\xb5\xda\x04\x5b\xaf\x59\x48\x6f\xfa\xb8\x19\x3b\x1e\x6d\x8c\x71\x67\xd4\x08\x32\xb4\xd8\x26\x01\x26\x0f\xe2\x8c\xf3\xb0\xc8\xa0\x5d\xc5\x0c\xea\xc5\x9c\x87\x15\xfb\x0e\x3e\x99\xa0\x9f\x33\xfd\xef\x8c\x58\x6a\xb9\xa8\x68\xaf\x19\x01\xdd\xac\xf8\x27\xc6\x3f\x88\xac\x10\xaa\x5e\xb8\x58\xb3\x1b\xad\x32\xa8\x84\x2a\xd8\x19\x83\x0a\x6f\x0b\x76\x76\x7a\xca\xc0\x3a\xaa\x9b\xa1\x44\xf2\x84\x34\x69\x39\x0d\x09\xd4\xf6\xb6\x7a\x1d\x85\x21\xaf\xd7\xe7\xa5\xd2\x97\x12\x89\xad\x89\xf8\xeb\x69\xe4\x32\x84\x3f\x68\x89\x9c\x46\x89\x5c\xb4\x02\x39\x1d\xf5\x49\x24\x32\x1a\x14\x12\x3b\x1d\x81\x34\x23\x07\xa5\x0f\xfc\xf0\x5a\xf7\xea\x65\x1b\xfc\x20\xf4\x31\xfc\x62\xdd\x90\x16\xf5\x10\x3a\x2f\xba\x5a\x77\xae\xc4\x1b\x54\xb4\xbd\x09\x47\x31\x36\x84\xf1\x21\x17\x61\x20\xfe\x37\x54\x04\x27\x25\x55\x28\xe9\x4d\xfb\x79\x33\xf4\x5e\xdc\x81\xa4\x3f\x58\x54\x98\x02\x15\x2d\xc3\x61\xfd\xd1\x4c\xd8\x17\x30\x94\x77\xd6\xa6\x70\x05\xc3\x70\x58\x3f\x7b\xff\xbd\xd1\x55\xe1\xfd\x3c\xc9\x56\x63\x78\x06\x59\xde\x7f\x5f\xa8\xee\x71\x8e\x26\x85\x2a\x18\x86\xa3\xfa\xd7\xfb\xc3\xc9\x3e\x30\x91\xa9\x84\x4c\x61\x0a\x86\xe1\x98\x7e\xf1\xfe\x2f\xc0\xf4\xf5\xfe\xb4\x73\x74\xeb\x5e\xef\xd2\x7e\xdf\x44\x3f\x88\x9a\xec\x89\x40\x43\x98\xac\xca\x86\xac\xb8\xf7\x5f\xf2\x57\xad\x9b\xff\x9a\xfd\x64\x0b\xf6\x7d\x5b\xa9\x03\x91\xbe\x4c\x87\x56\xaa\x46\xfb\x5b\xdb\x5b\x1b\xdd\xb4\x91\x5e\x53\x13\x52\x5d\x59\x2d\x05\x4f\xbe\x23\xa5\x26\x0c\xd3\xcf\x53\x8c\x57\x3c\xd3\x65\x69\xc9\x65\x17\x9f\xa3\x3b\x3e\x7d\xb4\x1f\xfe\x2c\xfe\x5a\xb2\x8b\x69\x25\xb6\x82\x9c\x3a\x05\x53\xa7\x32\xbb\x98\xcd\xc8\x5a\xf6\xf0\x55\xad\xcd\xc0\xbe\x27\x8f\x97\xf1\x38\xce\x3d\x11\xbd\xcf\x6e\x9d\x6e\x6c\xc6\x7f\x9d\xe7\x92\xce\x83\xe5\x4d\x73\x4d\xf8\x11\xeb\xd0\x89\xd9\xaf\xef\x7f\x7f\x07\x27\xa1\xfd\xf7\x5f\xef\x80\xe5\x1c\xed\x7c\xaa\xd1\xf0\x1c\xad\x25\x67\xf3\x25\x29\xae\x8d\xcd\xe3\x7b\x87\x36\xf9\x4d\xa7\x33\xaa\x84\x1a\xf9\xa8\x25\x4a\x4b\x6f\x62\xf0\xb0\xf2\x7f\x01\x00\x00\xff\xff\x93\x90\x94\x91\x29\x15\x00\x00"

func templatesViewsMessageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsMessageHtml,
		"templates/views/message.html",
	)
}

func templatesViewsMessageHtml() (*asset, error) {
	bytes, err := templatesViewsMessageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/message.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/message.html": templatesViewsMessageHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"message.html": &bintree{templatesViewsMessageHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
