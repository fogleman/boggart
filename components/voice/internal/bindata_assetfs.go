// Code generated by go-bindata.
// sources:
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x6a\x14\x31\x1c\xc6\xbf\x2d\xf5\x32\x27\xf1\xec\xe1\xef\xc1\xa2\x68\x6a\x32\x63\xa1\x64\x37\x5b\xb1\xb6\x20\x76\x71\x2d\xa3\xf7\x74\x27\x9d\x0d\xce\x24\x43\x92\x29\x0a\xbd\xf8\x0c\xe2\xd3\x08\x7d\x01\x2f\xe3\x0b\xf8\x2c\xb2\xb3\xd4\xe2\x77\xfa\xfd\xc8\x97\x8f\xff\x9f\x07\xbb\x3f\x00\x60\x07\xc0\x43\x00\xcf\x01\xdc\x03\x30\xc3\x36\x4b\x00\xf7\x01\x7c\x00\xb0\x9e\x00\x17\x00\x32\x00\xbf\x26\xc0\x04\x77\xd9\xb9\x85\x95\x77\x97\xb6\x66\x49\x5f\xec\x5e\x79\xbb\x32\x38\x37\x9d\x0f\x89\x2d\x62\x6d\x2b\xf6\xba\xaf\x23\x2b\xbd\xa4\xca\x5c\xbd\xfa\x6c\xd7\xba\xf5\xfb\xa1\xcf\x96\xef\x4b\x76\x1c\x8c\x4e\xd6\x3b\xf6\x46\x27\x23\x29\xe7\xe2\x90\xf1\x82\xe5\x05\xe5\x85\x3c\x38\x78\xc6\x0b\xce\xb3\x33\x1d\x13\x2b\x83\x76\xb1\xd1\xc9\x07\x49\xef\xc6\x0d\x5a\xf4\x41\xb7\xbe\xf2\x34\xfb\x6f\x78\x9e\x9d\x69\x57\xf7\xba\x36\xac\x34\xba\x95\xf4\xcf\x25\x9d\xf7\x31\x5a\xed\xb2\xc5\xdb\xc5\x09\xfb\x64\x42\xb4\xde\x49\x12\xfb\x3c\x3b\xf6\x2e\x19\x97\x58\xf9\xb5\x33\x92\x92\xf9\x92\x5e\x74\x8d\xb6\x6e\x4a\xab\xb5\x0e\xd1\x24\xf5\xb1\x3c\x65\x87\x77\xbd\xcd\x3d\x97\x26\xb0\x13\xb7\xf2\x95\x75\xb5\xa4\x6c\xd9\xf4\x41\x37\xec\xd4\x87\x36\x4a\x72\xdd\xa8\x51\x15\x53\xda\xa2\x72\x8f\x05\x57\x4a\xd0\xde\x1e\x6d\x90\x3f\x52\x42\xd0\x11\x71\x92\xa3\xcf\x55\x7e\xfb\x34\x53\x2f\x37\xf8\x64\xac\xcd\x04\xa7\xeb\xeb\xed\x97\xb9\xca\xf9\x53\x3a\x22\x41\x92\xf2\x29\x86\xef\xc3\xcd\xf0\x73\xb8\xf9\xfd\x0d\x7f\x03\x00\x00\xff\xff\xb0\x44\x86\x8b\xd6\x01\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
