// Code generated by go-swagger; DO NOT EDIT.

package habmin_floorplan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new habmin floorplan API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for habmin floorplan API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
HTTPDeleteFloorplan http delete floorplan API
*/
func (a *Client) HTTPDeleteFloorplan(params *HTTPDeleteFloorplanParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPDeleteFloorplanParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpDeleteFloorplan",
		Method:             "DELETE",
		PathPattern:        "/habmin/floorplan/{floorplanID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPDeleteFloorplanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
HTTPGetFloorplan http get floorplan API
*/
func (a *Client) HTTPGetFloorplan(params *HTTPGetFloorplanParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPGetFloorplanParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpGetFloorplan",
		Method:             "GET",
		PathPattern:        "/habmin/floorplan/{floorplanID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPGetFloorplanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
HTTPGetFloorplanImage http get floorplan image API
*/
func (a *Client) HTTPGetFloorplanImage(params *HTTPGetFloorplanImageParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPGetFloorplanImageParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpGetFloorplanImage",
		Method:             "GET",
		PathPattern:        "/habmin/floorplan/{floorplanID}/image",
		ProducesMediaTypes: []string{"image/jpeg"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPGetFloorplanImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
HTTPGetFloorplans http get floorplans API
*/
func (a *Client) HTTPGetFloorplans(params *HTTPGetFloorplansParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPGetFloorplansParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpGetFloorplans",
		Method:             "GET",
		PathPattern:        "/habmin/floorplan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPGetFloorplansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
HTTPPostFloorplan http post floorplan API
*/
func (a *Client) HTTPPostFloorplan(params *HTTPPostFloorplanParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPPostFloorplanParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpPostFloorplan",
		Method:             "POST",
		PathPattern:        "/habmin/floorplan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPPostFloorplanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
HTTPPutFloorplan http put floorplan API
*/
func (a *Client) HTTPPutFloorplan(params *HTTPPutFloorplanParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPPutFloorplanParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpPutFloorplan",
		Method:             "PUT",
		PathPattern:        "/habmin/floorplan/{floorplanID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPPutFloorplanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
