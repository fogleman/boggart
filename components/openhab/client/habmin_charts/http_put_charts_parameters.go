// Code generated by go-swagger; DO NOT EDIT.

package habmin_charts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kihamo/boggart/components/openhab/models"
)

// NewHTTPPutChartsParams creates a new HTTPPutChartsParams object
// with the default values initialized.
func NewHTTPPutChartsParams() *HTTPPutChartsParams {
	var ()
	return &HTTPPutChartsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHTTPPutChartsParamsWithTimeout creates a new HTTPPutChartsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHTTPPutChartsParamsWithTimeout(timeout time.Duration) *HTTPPutChartsParams {
	var ()
	return &HTTPPutChartsParams{

		timeout: timeout,
	}
}

// NewHTTPPutChartsParamsWithContext creates a new HTTPPutChartsParams object
// with the default values initialized, and the ability to set a context for a request
func NewHTTPPutChartsParamsWithContext(ctx context.Context) *HTTPPutChartsParams {
	var ()
	return &HTTPPutChartsParams{

		Context: ctx,
	}
}

// NewHTTPPutChartsParamsWithHTTPClient creates a new HTTPPutChartsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHTTPPutChartsParamsWithHTTPClient(client *http.Client) *HTTPPutChartsParams {
	var ()
	return &HTTPPutChartsParams{
		HTTPClient: client,
	}
}

/*HTTPPutChartsParams contains all the parameters to send to the API endpoint
for the http put charts operation typically these are written to a http.Request
*/
type HTTPPutChartsParams struct {

	/*Body*/
	Body *models.ChartConfigBean
	/*ChartID*/
	ChartID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the http put charts params
func (o *HTTPPutChartsParams) WithTimeout(timeout time.Duration) *HTTPPutChartsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the http put charts params
func (o *HTTPPutChartsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the http put charts params
func (o *HTTPPutChartsParams) WithContext(ctx context.Context) *HTTPPutChartsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the http put charts params
func (o *HTTPPutChartsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the http put charts params
func (o *HTTPPutChartsParams) WithHTTPClient(client *http.Client) *HTTPPutChartsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the http put charts params
func (o *HTTPPutChartsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the http put charts params
func (o *HTTPPutChartsParams) WithBody(body *models.ChartConfigBean) *HTTPPutChartsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the http put charts params
func (o *HTTPPutChartsParams) SetBody(body *models.ChartConfigBean) {
	o.Body = body
}

// WithChartID adds the chartID to the http put charts params
func (o *HTTPPutChartsParams) WithChartID(chartID int32) *HTTPPutChartsParams {
	o.SetChartID(chartID)
	return o
}

// SetChartID adds the chartId to the http put charts params
func (o *HTTPPutChartsParams) SetChartID(chartID int32) {
	o.ChartID = chartID
}

// WriteToRequest writes these params to a swagger request
func (o *HTTPPutChartsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param chartId
	if err := r.SetPathParam("chartId", swag.FormatInt32(o.ChartID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
