// Code generated by go-swagger; DO NOT EDIT.

package habmin_charts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new habmin charts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for habmin charts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
HTTPDeleteCharts http delete charts API
*/
func (a *Client) HTTPDeleteCharts(params *HTTPDeleteChartsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPDeleteChartsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpDeleteCharts",
		Method:             "DELETE",
		PathPattern:        "/habmin/charts/{chartId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPDeleteChartsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
HTTPGetCharts http get charts API
*/
func (a *Client) HTTPGetCharts(params *HTTPGetChartsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPGetChartsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpGetCharts",
		Method:             "GET",
		PathPattern:        "/habmin/charts/{chartId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPGetChartsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
HTTPPostCharts creates a new chart
*/
func (a *Client) HTTPPostCharts(params *HTTPPostChartsParams) (*HTTPPostChartsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPPostChartsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpPostCharts",
		Method:             "POST",
		PathPattern:        "/habmin/charts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPPostChartsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HTTPPostChartsOK), nil

}

/*
HTTPPutCharts http put charts API
*/
func (a *Client) HTTPPutCharts(params *HTTPPutChartsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPPutChartsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpPutCharts",
		Method:             "PUT",
		PathPattern:        "/habmin/charts/{chartId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPPutChartsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
