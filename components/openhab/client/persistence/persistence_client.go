// Code generated by go-swagger; DO NOT EDIT.

package persistence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new persistence API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for persistence API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
HTTPDeletePersistenceServiceItem deletes item data from a specific persistence service
*/
func (a *Client) HTTPDeletePersistenceServiceItem(params *HTTPDeletePersistenceServiceItemParams) (*HTTPDeletePersistenceServiceItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPDeletePersistenceServiceItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpDeletePersistenceServiceItem",
		Method:             "DELETE",
		PathPattern:        "/persistence/items/{itemname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPDeletePersistenceServiceItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HTTPDeletePersistenceServiceItemOK), nil

}

/*
HTTPGetPersistenceItemData gets item persistence data from the persistence service
*/
func (a *Client) HTTPGetPersistenceItemData(params *HTTPGetPersistenceItemDataParams) (*HTTPGetPersistenceItemDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPGetPersistenceItemDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpGetPersistenceItemData",
		Method:             "GET",
		PathPattern:        "/persistence/items/{itemname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPGetPersistenceItemDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HTTPGetPersistenceItemDataOK), nil

}

/*
HTTPGetPersistenceServiceItems gets a list of items available via a specific persistence service
*/
func (a *Client) HTTPGetPersistenceServiceItems(params *HTTPGetPersistenceServiceItemsParams) (*HTTPGetPersistenceServiceItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPGetPersistenceServiceItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpGetPersistenceServiceItems",
		Method:             "GET",
		PathPattern:        "/persistence/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPGetPersistenceServiceItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HTTPGetPersistenceServiceItemsOK), nil

}

/*
HTTPGetPersistenceServices gets a list of persistence services
*/
func (a *Client) HTTPGetPersistenceServices(params *HTTPGetPersistenceServicesParams) (*HTTPGetPersistenceServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPGetPersistenceServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpGetPersistenceServices",
		Method:             "GET",
		PathPattern:        "/persistence",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPGetPersistenceServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HTTPGetPersistenceServicesOK), nil

}

/*
HTTPPutPersistenceItemData stores item persistence data into the persistence service
*/
func (a *Client) HTTPPutPersistenceItemData(params *HTTPPutPersistenceItemDataParams) (*HTTPPutPersistenceItemDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHTTPPutPersistenceItemDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "httpPutPersistenceItemData",
		Method:             "PUT",
		PathPattern:        "/persistence/items/{itemname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HTTPPutPersistenceItemDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*HTTPPutPersistenceItemDataOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
