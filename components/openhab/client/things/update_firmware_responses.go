// Code generated by go-swagger; DO NOT EDIT.

package things

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateFirmwareReader is a Reader for the UpdateFirmware structure.
type UpdateFirmwareReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateFirmwareReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateFirmwareOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateFirmwareBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateFirmwareNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateFirmwareOK creates a UpdateFirmwareOK with default headers values
func NewUpdateFirmwareOK() *UpdateFirmwareOK {
	return &UpdateFirmwareOK{}
}

/*UpdateFirmwareOK handles this case with default header values.

OK
*/
type UpdateFirmwareOK struct {
}

func (o *UpdateFirmwareOK) Error() string {
	return fmt.Sprintf("[PUT /things/{thingUID}/firmware/{firmwareVersion}][%d] updateFirmwareOK ", 200)
}

func (o *UpdateFirmwareOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFirmwareBadRequest creates a UpdateFirmwareBadRequest with default headers values
func NewUpdateFirmwareBadRequest() *UpdateFirmwareBadRequest {
	return &UpdateFirmwareBadRequest{}
}

/*UpdateFirmwareBadRequest handles this case with default header values.

Firmware update preconditions not satisfied.
*/
type UpdateFirmwareBadRequest struct {
}

func (o *UpdateFirmwareBadRequest) Error() string {
	return fmt.Sprintf("[PUT /things/{thingUID}/firmware/{firmwareVersion}][%d] updateFirmwareBadRequest ", 400)
}

func (o *UpdateFirmwareBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFirmwareNotFound creates a UpdateFirmwareNotFound with default headers values
func NewUpdateFirmwareNotFound() *UpdateFirmwareNotFound {
	return &UpdateFirmwareNotFound{}
}

/*UpdateFirmwareNotFound handles this case with default header values.

Thing not found.
*/
type UpdateFirmwareNotFound struct {
}

func (o *UpdateFirmwareNotFound) Error() string {
	return fmt.Sprintf("[PUT /things/{thingUID}/firmware/{firmwareVersion}][%d] updateFirmwareNotFound ", 404)
}

func (o *UpdateFirmwareNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
