// Code generated by go-swagger; DO NOT EDIT.

package items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new items API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for items API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddMember adds a new member to a group item
*/
func (a *Client) AddMember(params *AddMemberParams) (*AddMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addMember",
		Method:             "PUT",
		PathPattern:        "/items/{itemName}/members/{memberItemName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddMemberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddMemberOK), nil

}

/*
AddMetadata adds metadata to an item
*/
func (a *Client) AddMetadata(params *AddMetadataParams) (*AddMetadataOK, *AddMetadataCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addMetadata",
		Method:             "PUT",
		PathPattern:        "/items/{itemname}/metadata/{namespace}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddMetadataOK:
		return value, nil, nil
	case *AddMetadataCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
AddTag adds a tag to an item
*/
func (a *Client) AddTag(params *AddTagParams) (*AddTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTag",
		Method:             "PUT",
		PathPattern:        "/items/{itemname}/tags/{tag}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddTagOK), nil

}

/*
CreateOrUpdateItem adds a new item to the registry or updates the existing item
*/
func (a *Client) CreateOrUpdateItem(params *CreateOrUpdateItemParams) (*CreateOrUpdateItemOK, *CreateOrUpdateItemCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrUpdateItem",
		Method:             "PUT",
		PathPattern:        "/items/{itemname}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrUpdateItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateOrUpdateItemOK:
		return value, nil, nil
	case *CreateOrUpdateItemCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
CreateOrUpdateItems adds a list of items to the registry or updates the existing items
*/
func (a *Client) CreateOrUpdateItems(params *CreateOrUpdateItemsParams) (*CreateOrUpdateItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createOrUpdateItems",
		Method:             "PUT",
		PathPattern:        "/items",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrUpdateItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOrUpdateItemsOK), nil

}

/*
GetItemData gets a single item
*/
func (a *Client) GetItemData(params *GetItemDataParams) (*GetItemDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetItemDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getItemData",
		Method:             "GET",
		PathPattern:        "/items/{itemname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetItemDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetItemDataOK), nil

}

/*
GetItems gets all available items
*/
func (a *Client) GetItems(params *GetItemsParams) (*GetItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getItems",
		Method:             "GET",
		PathPattern:        "/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetItemsOK), nil

}

/*
GetPlainItemState gets the state of an item
*/
func (a *Client) GetPlainItemState(params *GetPlainItemStateParams) (*GetPlainItemStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlainItemStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlainItemState",
		Method:             "GET",
		PathPattern:        "/items/{itemname}/state",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlainItemStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlainItemStateOK), nil

}

/*
PostItemCommand sends a command to an item
*/
func (a *Client) PostItemCommand(params *PostItemCommandParams) (*PostItemCommandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostItemCommandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postItemCommand",
		Method:             "POST",
		PathPattern:        "/items/{itemname}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostItemCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostItemCommandOK), nil

}

/*
PutItemState updates the state of an item
*/
func (a *Client) PutItemState(params *PutItemStateParams) (*PutItemStateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutItemStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putItemState",
		Method:             "PUT",
		PathPattern:        "/items/{itemname}/state",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutItemStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutItemStateAccepted), nil

}

/*
RemoveItem removes an item from the registry
*/
func (a *Client) RemoveItem(params *RemoveItemParams) (*RemoveItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeItem",
		Method:             "DELETE",
		PathPattern:        "/items/{itemname}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveItemOK), nil

}

/*
RemoveMember removes an existing member from a group item
*/
func (a *Client) RemoveMember(params *RemoveMemberParams) (*RemoveMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeMember",
		Method:             "DELETE",
		PathPattern:        "/items/{itemName}/members/{memberItemName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveMemberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveMemberOK), nil

}

/*
RemoveMetadata removes metadata from an item
*/
func (a *Client) RemoveMetadata(params *RemoveMetadataParams) (*RemoveMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeMetadata",
		Method:             "DELETE",
		PathPattern:        "/items/{itemname}/metadata/{namespace}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveMetadataOK), nil

}

/*
RemoveTag removes a tag from an item
*/
func (a *Client) RemoveTag(params *RemoveTagParams) (*RemoveTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTagParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeTag",
		Method:             "DELETE",
		PathPattern:        "/items/{itemname}/tags/{tag}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveTagReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveTagOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
