// Code generated by go-swagger; DO NOT EDIT.

package items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRemoveMemberParams creates a new RemoveMemberParams object
// with the default values initialized.
func NewRemoveMemberParams() *RemoveMemberParams {
	var ()
	return &RemoveMemberParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveMemberParamsWithTimeout creates a new RemoveMemberParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveMemberParamsWithTimeout(timeout time.Duration) *RemoveMemberParams {
	var ()
	return &RemoveMemberParams{

		timeout: timeout,
	}
}

// NewRemoveMemberParamsWithContext creates a new RemoveMemberParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveMemberParamsWithContext(ctx context.Context) *RemoveMemberParams {
	var ()
	return &RemoveMemberParams{

		Context: ctx,
	}
}

// NewRemoveMemberParamsWithHTTPClient creates a new RemoveMemberParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveMemberParamsWithHTTPClient(client *http.Client) *RemoveMemberParams {
	var ()
	return &RemoveMemberParams{
		HTTPClient: client,
	}
}

/*RemoveMemberParams contains all the parameters to send to the API endpoint
for the remove member operation typically these are written to a http.Request
*/
type RemoveMemberParams struct {

	/*ItemName
	  item name

	*/
	ItemName string
	/*MemberItemName
	  member item name

	*/
	MemberItemName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove member params
func (o *RemoveMemberParams) WithTimeout(timeout time.Duration) *RemoveMemberParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove member params
func (o *RemoveMemberParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove member params
func (o *RemoveMemberParams) WithContext(ctx context.Context) *RemoveMemberParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove member params
func (o *RemoveMemberParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove member params
func (o *RemoveMemberParams) WithHTTPClient(client *http.Client) *RemoveMemberParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove member params
func (o *RemoveMemberParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithItemName adds the itemName to the remove member params
func (o *RemoveMemberParams) WithItemName(itemName string) *RemoveMemberParams {
	o.SetItemName(itemName)
	return o
}

// SetItemName adds the itemName to the remove member params
func (o *RemoveMemberParams) SetItemName(itemName string) {
	o.ItemName = itemName
}

// WithMemberItemName adds the memberItemName to the remove member params
func (o *RemoveMemberParams) WithMemberItemName(memberItemName string) *RemoveMemberParams {
	o.SetMemberItemName(memberItemName)
	return o
}

// SetMemberItemName adds the memberItemName to the remove member params
func (o *RemoveMemberParams) SetMemberItemName(memberItemName string) {
	o.MemberItemName = memberItemName
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveMemberParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param itemName
	if err := r.SetPathParam("itemName", o.ItemName); err != nil {
		return err
	}

	// path param memberItemName
	if err := r.SetPathParam("memberItemName", o.MemberItemName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
