// Code generated by go-swagger; DO NOT EDIT.

package habmin_designer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new habmin designer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for habmin designer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteDesignRef delete design ref API
*/
func (a *Client) DeleteDesignRef(params *DeleteDesignRefParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDesignRefParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDesignRef",
		Method:             "DELETE",
		PathPattern:        "/habmin/designer/{designref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDesignRefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetDesignRef get design ref API
*/
func (a *Client) GetDesignRef(params *GetDesignRefParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDesignRefParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDesignRef",
		Method:             "GET",
		PathPattern:        "/habmin/designer/{designref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDesignRefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetDesigns get designs API
*/
func (a *Client) GetDesigns(params *GetDesignsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDesignsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDesigns",
		Method:             "GET",
		PathPattern:        "/habmin/designer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDesignsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostDesignRef post design ref API
*/
func (a *Client) PostDesignRef(params *PostDesignRefParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDesignRefParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postDesignRef",
		Method:             "POST",
		PathPattern:        "/habmin/designer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDesignRefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutDesignRef put design ref API
*/
func (a *Client) PutDesignRef(params *PutDesignRefParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDesignRefParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putDesignRef",
		Method:             "PUT",
		PathPattern:        "/habmin/designer/{designref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDesignRefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
