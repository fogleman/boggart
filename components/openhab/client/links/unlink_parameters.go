// Code generated by go-swagger; DO NOT EDIT.

package links

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUnlinkParams creates a new UnlinkParams object
// with the default values initialized.
func NewUnlinkParams() *UnlinkParams {
	var ()
	return &UnlinkParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUnlinkParamsWithTimeout creates a new UnlinkParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUnlinkParamsWithTimeout(timeout time.Duration) *UnlinkParams {
	var ()
	return &UnlinkParams{

		timeout: timeout,
	}
}

// NewUnlinkParamsWithContext creates a new UnlinkParams object
// with the default values initialized, and the ability to set a context for a request
func NewUnlinkParamsWithContext(ctx context.Context) *UnlinkParams {
	var ()
	return &UnlinkParams{

		Context: ctx,
	}
}

// NewUnlinkParamsWithHTTPClient creates a new UnlinkParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUnlinkParamsWithHTTPClient(client *http.Client) *UnlinkParams {
	var ()
	return &UnlinkParams{
		HTTPClient: client,
	}
}

/*UnlinkParams contains all the parameters to send to the API endpoint
for the unlink operation typically these are written to a http.Request
*/
type UnlinkParams struct {

	/*ChannelUID
	  channelUID

	*/
	ChannelUID string
	/*ItemName
	  itemName

	*/
	ItemName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the unlink params
func (o *UnlinkParams) WithTimeout(timeout time.Duration) *UnlinkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the unlink params
func (o *UnlinkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the unlink params
func (o *UnlinkParams) WithContext(ctx context.Context) *UnlinkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the unlink params
func (o *UnlinkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the unlink params
func (o *UnlinkParams) WithHTTPClient(client *http.Client) *UnlinkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the unlink params
func (o *UnlinkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannelUID adds the channelUID to the unlink params
func (o *UnlinkParams) WithChannelUID(channelUID string) *UnlinkParams {
	o.SetChannelUID(channelUID)
	return o
}

// SetChannelUID adds the channelUid to the unlink params
func (o *UnlinkParams) SetChannelUID(channelUID string) {
	o.ChannelUID = channelUID
}

// WithItemName adds the itemName to the unlink params
func (o *UnlinkParams) WithItemName(itemName string) *UnlinkParams {
	o.SetItemName(itemName)
	return o
}

// SetItemName adds the itemName to the unlink params
func (o *UnlinkParams) SetItemName(itemName string) {
	o.ItemName = itemName
}

// WriteToRequest writes these params to a swagger request
func (o *UnlinkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param channelUID
	if err := r.SetPathParam("channelUID", o.ChannelUID); err != nil {
		return err
	}

	// path param itemName
	if err := r.SetPathParam("itemName", o.ItemName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
