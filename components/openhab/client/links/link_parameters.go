// Code generated by go-swagger; DO NOT EDIT.

package links

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kihamo/boggart/components/openhab/models"
)

// NewLinkParams creates a new LinkParams object
// with the default values initialized.
func NewLinkParams() *LinkParams {
	var ()
	return &LinkParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLinkParamsWithTimeout creates a new LinkParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLinkParamsWithTimeout(timeout time.Duration) *LinkParams {
	var ()
	return &LinkParams{

		timeout: timeout,
	}
}

// NewLinkParamsWithContext creates a new LinkParams object
// with the default values initialized, and the ability to set a context for a request
func NewLinkParamsWithContext(ctx context.Context) *LinkParams {
	var ()
	return &LinkParams{

		Context: ctx,
	}
}

// NewLinkParamsWithHTTPClient creates a new LinkParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLinkParamsWithHTTPClient(client *http.Client) *LinkParams {
	var ()
	return &LinkParams{
		HTTPClient: client,
	}
}

/*LinkParams contains all the parameters to send to the API endpoint
for the link operation typically these are written to a http.Request
*/
type LinkParams struct {

	/*Body
	  link data

	*/
	Body *models.ItemChannelLinkDTO
	/*ChannelUID
	  channelUID

	*/
	ChannelUID string
	/*ItemName
	  itemName

	*/
	ItemName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the link params
func (o *LinkParams) WithTimeout(timeout time.Duration) *LinkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the link params
func (o *LinkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the link params
func (o *LinkParams) WithContext(ctx context.Context) *LinkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the link params
func (o *LinkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the link params
func (o *LinkParams) WithHTTPClient(client *http.Client) *LinkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the link params
func (o *LinkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the link params
func (o *LinkParams) WithBody(body *models.ItemChannelLinkDTO) *LinkParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the link params
func (o *LinkParams) SetBody(body *models.ItemChannelLinkDTO) {
	o.Body = body
}

// WithChannelUID adds the channelUID to the link params
func (o *LinkParams) WithChannelUID(channelUID string) *LinkParams {
	o.SetChannelUID(channelUID)
	return o
}

// SetChannelUID adds the channelUid to the link params
func (o *LinkParams) SetChannelUID(channelUID string) {
	o.ChannelUID = channelUID
}

// WithItemName adds the itemName to the link params
func (o *LinkParams) WithItemName(itemName string) *LinkParams {
	o.SetItemName(itemName)
	return o
}

// SetItemName adds the itemName to the link params
func (o *LinkParams) SetItemName(itemName string) {
	o.ItemName = itemName
}

// WriteToRequest writes these params to a swagger request
func (o *LinkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param channelUID
	if err := r.SetPathParam("channelUID", o.ChannelUID); err != nil {
		return err
	}

	// path param itemName
	if err := r.SetPathParam("itemName", o.ItemName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
