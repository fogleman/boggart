// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// InstallExtensionByURLReader is a Reader for the InstallExtensionByURL structure.
type InstallExtensionByURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InstallExtensionByURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewInstallExtensionByURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewInstallExtensionByURLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewInstallExtensionByURLOK creates a InstallExtensionByURLOK with default headers values
func NewInstallExtensionByURLOK() *InstallExtensionByURLOK {
	return &InstallExtensionByURLOK{}
}

/*InstallExtensionByURLOK handles this case with default header values.

OK
*/
type InstallExtensionByURLOK struct {
}

func (o *InstallExtensionByURLOK) Error() string {
	return fmt.Sprintf("[POST /extensions/url/{url}/install][%d] installExtensionByUrlOK ", 200)
}

func (o *InstallExtensionByURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstallExtensionByURLBadRequest creates a InstallExtensionByURLBadRequest with default headers values
func NewInstallExtensionByURLBadRequest() *InstallExtensionByURLBadRequest {
	return &InstallExtensionByURLBadRequest{}
}

/*InstallExtensionByURLBadRequest handles this case with default header values.

The given URL is malformed or not valid.
*/
type InstallExtensionByURLBadRequest struct {
}

func (o *InstallExtensionByURLBadRequest) Error() string {
	return fmt.Sprintf("[POST /extensions/url/{url}/install][%d] installExtensionByUrlBadRequest ", 400)
}

func (o *InstallExtensionByURLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
