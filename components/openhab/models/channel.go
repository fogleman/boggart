// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Channel channel
// swagger:model Channel
type Channel struct {

	// accepted item type
	AcceptedItemType string `json:"acceptedItemType,omitempty"`

	// channel type UID
	ChannelTypeUID *ChannelTypeUID `json:"channelTypeUID,omitempty"`

	// configuration
	Configuration *Configuration `json:"configuration,omitempty"`

	// default tags
	// Unique: true
	DefaultTags []string `json:"defaultTags"`

	// description
	Description string `json:"description,omitempty"`

	// kind
	// Enum: [STATE TRIGGER]
	Kind string `json:"kind,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// properties
	Properties map[string]string `json:"properties,omitempty"`

	// uid
	UID *ChannelUID `json:"uid,omitempty"`
}

// Validate validates this channel
func (m *Channel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelTypeUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Channel) validateChannelTypeUID(formats strfmt.Registry) error {

	if swag.IsZero(m.ChannelTypeUID) { // not required
		return nil
	}

	if m.ChannelTypeUID != nil {
		if err := m.ChannelTypeUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelTypeUID")
			}
			return err
		}
	}

	return nil
}

func (m *Channel) validateConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *Channel) validateDefaultTags(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultTags) { // not required
		return nil
	}

	if err := validate.UniqueItems("defaultTags", "body", m.DefaultTags); err != nil {
		return err
	}

	return nil
}

var channelTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STATE","TRIGGER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		channelTypeKindPropEnum = append(channelTypeKindPropEnum, v)
	}
}

const (

	// ChannelKindSTATE captures enum value "STATE"
	ChannelKindSTATE string = "STATE"

	// ChannelKindTRIGGER captures enum value "TRIGGER"
	ChannelKindTRIGGER string = "TRIGGER"
)

// prop value enum
func (m *Channel) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, channelTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Channel) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *Channel) validateUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if m.UID != nil {
		if err := m.UID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Channel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Channel) UnmarshalBinary(b []byte) error {
	var res Channel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
