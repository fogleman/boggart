// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigDescriptionParameterDTO config description parameter d t o
// swagger:model ConfigDescriptionParameterDTO
type ConfigDescriptionParameterDTO struct {

	// advanced
	Advanced *bool `json:"advanced,omitempty"`

	// context
	Context string `json:"context,omitempty"`

	// default value
	DefaultValue string `json:"defaultValue,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// filter criteria
	FilterCriteria []*FilterCriteriaDTO `json:"filterCriteria"`

	// group name
	GroupName string `json:"groupName,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// limit to options
	LimitToOptions *bool `json:"limitToOptions,omitempty"`

	// max
	Max float64 `json:"max,omitempty"`

	// min
	Min float64 `json:"min,omitempty"`

	// multiple
	Multiple *bool `json:"multiple,omitempty"`

	// multiple limit
	MultipleLimit int32 `json:"multipleLimit,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// options
	Options []*ParameterOptionDTO `json:"options"`

	// pattern
	Pattern string `json:"pattern,omitempty"`

	// read only
	ReadOnly *bool `json:"readOnly,omitempty"`

	// required
	Required *bool `json:"required,omitempty"`

	// stepsize
	Stepsize float64 `json:"stepsize,omitempty"`

	// type
	// Enum: [TEXT INTEGER DECIMAL BOOLEAN]
	Type string `json:"type,omitempty"`

	// unit
	Unit string `json:"unit,omitempty"`

	// unit label
	UnitLabel string `json:"unitLabel,omitempty"`

	// verify
	Verify *bool `json:"verify,omitempty"`
}

// Validate validates this config description parameter d t o
func (m *ConfigDescriptionParameterDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigDescriptionParameterDTO) validateFilterCriteria(formats strfmt.Registry) error {

	if swag.IsZero(m.FilterCriteria) { // not required
		return nil
	}

	for i := 0; i < len(m.FilterCriteria); i++ {
		if swag.IsZero(m.FilterCriteria[i]) { // not required
			continue
		}

		if m.FilterCriteria[i] != nil {
			if err := m.FilterCriteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("filterCriteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigDescriptionParameterDTO) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var configDescriptionParameterDTOTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TEXT","INTEGER","DECIMAL","BOOLEAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configDescriptionParameterDTOTypeTypePropEnum = append(configDescriptionParameterDTOTypeTypePropEnum, v)
	}
}

const (

	// ConfigDescriptionParameterDTOTypeTEXT captures enum value "TEXT"
	ConfigDescriptionParameterDTOTypeTEXT string = "TEXT"

	// ConfigDescriptionParameterDTOTypeINTEGER captures enum value "INTEGER"
	ConfigDescriptionParameterDTOTypeINTEGER string = "INTEGER"

	// ConfigDescriptionParameterDTOTypeDECIMAL captures enum value "DECIMAL"
	ConfigDescriptionParameterDTOTypeDECIMAL string = "DECIMAL"

	// ConfigDescriptionParameterDTOTypeBOOLEAN captures enum value "BOOLEAN"
	ConfigDescriptionParameterDTOTypeBOOLEAN string = "BOOLEAN"
)

// prop value enum
func (m *ConfigDescriptionParameterDTO) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, configDescriptionParameterDTOTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConfigDescriptionParameterDTO) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigDescriptionParameterDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigDescriptionParameterDTO) UnmarshalBinary(b []byte) error {
	var res ConfigDescriptionParameterDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
