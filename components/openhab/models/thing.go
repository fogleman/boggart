// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Thing thing
// swagger:model Thing
type Thing struct {

	// bridge UID
	BridgeUID *ThingUID `json:"bridgeUID,omitempty"`

	// channels
	Channels []*Channel `json:"channels"`

	// configuration
	Configuration *Configuration `json:"configuration,omitempty"`

	// handler
	Handler *ThingHandler `json:"handler,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// properties
	Properties map[string]string `json:"properties,omitempty"`

	// status
	// Enum: [UNINITIALIZED INITIALIZING UNKNOWN ONLINE OFFLINE REMOVING REMOVED]
	Status string `json:"status,omitempty"`

	// status info
	StatusInfo *ThingStatusInfo `json:"statusInfo,omitempty"`

	// thing type UID
	ThingTypeUID *ThingTypeUID `json:"thingTypeUID,omitempty"`

	// uid
	UID *ThingUID `json:"uid,omitempty"`
}

// Validate validates this thing
func (m *Thing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBridgeUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThingTypeUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Thing) validateBridgeUID(formats strfmt.Registry) error {

	if swag.IsZero(m.BridgeUID) { // not required
		return nil
	}

	if m.BridgeUID != nil {
		if err := m.BridgeUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bridgeUID")
			}
			return err
		}
	}

	return nil
}

func (m *Thing) validateChannels(formats strfmt.Registry) error {

	if swag.IsZero(m.Channels) { // not required
		return nil
	}

	for i := 0; i < len(m.Channels); i++ {
		if swag.IsZero(m.Channels[i]) { // not required
			continue
		}

		if m.Channels[i] != nil {
			if err := m.Channels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Thing) validateConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *Thing) validateHandler(formats strfmt.Registry) error {

	if swag.IsZero(m.Handler) { // not required
		return nil
	}

	if m.Handler != nil {
		if err := m.Handler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handler")
			}
			return err
		}
	}

	return nil
}

var thingTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNINITIALIZED","INITIALIZING","UNKNOWN","ONLINE","OFFLINE","REMOVING","REMOVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thingTypeStatusPropEnum = append(thingTypeStatusPropEnum, v)
	}
}

const (

	// ThingStatusUNINITIALIZED captures enum value "UNINITIALIZED"
	ThingStatusUNINITIALIZED string = "UNINITIALIZED"

	// ThingStatusINITIALIZING captures enum value "INITIALIZING"
	ThingStatusINITIALIZING string = "INITIALIZING"

	// ThingStatusUNKNOWN captures enum value "UNKNOWN"
	ThingStatusUNKNOWN string = "UNKNOWN"

	// ThingStatusONLINE captures enum value "ONLINE"
	ThingStatusONLINE string = "ONLINE"

	// ThingStatusOFFLINE captures enum value "OFFLINE"
	ThingStatusOFFLINE string = "OFFLINE"

	// ThingStatusREMOVING captures enum value "REMOVING"
	ThingStatusREMOVING string = "REMOVING"

	// ThingStatusREMOVED captures enum value "REMOVED"
	ThingStatusREMOVED string = "REMOVED"
)

// prop value enum
func (m *Thing) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, thingTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Thing) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Thing) validateStatusInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusInfo) { // not required
		return nil
	}

	if m.StatusInfo != nil {
		if err := m.StatusInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Thing) validateThingTypeUID(formats strfmt.Registry) error {

	if swag.IsZero(m.ThingTypeUID) { // not required
		return nil
	}

	if m.ThingTypeUID != nil {
		if err := m.ThingTypeUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thingTypeUID")
			}
			return err
		}
	}

	return nil
}

func (m *Thing) validateUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if m.UID != nil {
		if err := m.UID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Thing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Thing) UnmarshalBinary(b []byte) error {
	var res Thing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
