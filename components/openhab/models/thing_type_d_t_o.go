// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ThingTypeDTO thing type d t o
// swagger:model ThingTypeDTO
type ThingTypeDTO struct {

	// UID
	UID string `json:"UID,omitempty"`

	// bridge
	Bridge *bool `json:"bridge,omitempty"`

	// category
	Category string `json:"category,omitempty"`

	// channel groups
	ChannelGroups []*ChannelGroupDefinitionDTO `json:"channelGroups"`

	// channels
	Channels []*ChannelDefinitionDTO `json:"channels"`

	// config parameters
	ConfigParameters []*ConfigDescriptionParameterDTO `json:"configParameters"`

	// description
	Description string `json:"description,omitempty"`

	// extensible channel type ids
	ExtensibleChannelTypeIds []string `json:"extensibleChannelTypeIds"`

	// label
	Label string `json:"label,omitempty"`

	// listed
	Listed *bool `json:"listed,omitempty"`

	// parameter groups
	ParameterGroups []*ConfigDescriptionParameterGroupDTO `json:"parameterGroups"`

	// properties
	Properties map[string]string `json:"properties,omitempty"`

	// supported bridge type uids
	SupportedBridgeTypeUIDS []string `json:"supportedBridgeTypeUIDs"`
}

// Validate validates this thing type d t o
func (m *ThingTypeDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThingTypeDTO) validateChannelGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.ChannelGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ChannelGroups); i++ {
		if swag.IsZero(m.ChannelGroups[i]) { // not required
			continue
		}

		if m.ChannelGroups[i] != nil {
			if err := m.ChannelGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channelGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThingTypeDTO) validateChannels(formats strfmt.Registry) error {

	if swag.IsZero(m.Channels) { // not required
		return nil
	}

	for i := 0; i < len(m.Channels); i++ {
		if swag.IsZero(m.Channels[i]) { // not required
			continue
		}

		if m.Channels[i] != nil {
			if err := m.Channels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("channels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThingTypeDTO) validateConfigParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigParameters); i++ {
		if swag.IsZero(m.ConfigParameters[i]) { // not required
			continue
		}

		if m.ConfigParameters[i] != nil {
			if err := m.ConfigParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThingTypeDTO) validateParameterGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.ParameterGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ParameterGroups); i++ {
		if swag.IsZero(m.ParameterGroups[i]) { // not required
			continue
		}

		if m.ParameterGroups[i] != nil {
			if err := m.ParameterGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThingTypeDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThingTypeDTO) UnmarshalBinary(b []byte) error {
	var res ThingTypeDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
