// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// WidgetDTO widget d t o
// swagger:model WidgetDTO
type WidgetDTO struct {

	// encoding
	Encoding string `json:"encoding,omitempty"`

	// height
	Height int32 `json:"height,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// item
	Item *EnrichedItemDTO `json:"item,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// labelcolor
	Labelcolor string `json:"labelcolor,omitempty"`

	// legend
	Legend *bool `json:"legend,omitempty"`

	// linked page
	LinkedPage *PageDTO `json:"linkedPage,omitempty"`

	// mappings
	Mappings []*MappingDTO `json:"mappings"`

	// max value
	MaxValue float64 `json:"maxValue,omitempty"`

	// min value
	MinValue float64 `json:"minValue,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// period
	Period string `json:"period,omitempty"`

	// refresh
	Refresh int32 `json:"refresh,omitempty"`

	// send frequency
	SendFrequency int32 `json:"sendFrequency,omitempty"`

	// separator
	Separator string `json:"separator,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// step
	Step float64 `json:"step,omitempty"`

	// switch support
	SwitchSupport *bool `json:"switchSupport,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// valuecolor
	Valuecolor string `json:"valuecolor,omitempty"`

	// widget Id
	WidgetID string `json:"widgetId,omitempty"`

	// widgets
	Widgets []*WidgetDTO `json:"widgets"`
}

// Validate validates this widget d t o
func (m *WidgetDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkedPage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidgets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WidgetDTO) validateItem(formats strfmt.Registry) error {

	if swag.IsZero(m.Item) { // not required
		return nil
	}

	if m.Item != nil {
		if err := m.Item.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("item")
			}
			return err
		}
	}

	return nil
}

func (m *WidgetDTO) validateLinkedPage(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkedPage) { // not required
		return nil
	}

	if m.LinkedPage != nil {
		if err := m.LinkedPage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linkedPage")
			}
			return err
		}
	}

	return nil
}

func (m *WidgetDTO) validateMappings(formats strfmt.Registry) error {

	if swag.IsZero(m.Mappings) { // not required
		return nil
	}

	for i := 0; i < len(m.Mappings); i++ {
		if swag.IsZero(m.Mappings[i]) { // not required
			continue
		}

		if m.Mappings[i] != nil {
			if err := m.Mappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *WidgetDTO) validateWidgets(formats strfmt.Registry) error {

	if swag.IsZero(m.Widgets) { // not required
		return nil
	}

	for i := 0; i < len(m.Widgets); i++ {
		if swag.IsZero(m.Widgets[i]) { // not required
			continue
		}

		if m.Widgets[i] != nil {
			if err := m.Widgets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("widgets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WidgetDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WidgetDTO) UnmarshalBinary(b []byte) error {
	var res WidgetDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
