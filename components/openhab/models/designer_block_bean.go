// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DesignerBlockBean designer block bean
// swagger:model DesignerBlockBean
type DesignerBlockBean struct {

	// children
	Children []*DesignerChildBean `json:"children"`

	// comment
	Comment *DesignerCommentBean `json:"comment,omitempty"`

	// deletable
	Deletable *bool `json:"deletable,omitempty"`

	// disabled
	Disabled *bool `json:"disabled,omitempty"`

	// editable
	Editable *bool `json:"editable,omitempty"`

	// fields
	Fields []*DesignerFieldBean `json:"fields"`

	// inline
	Inline *bool `json:"inline,omitempty"`

	// moveable
	Moveable *bool `json:"moveable,omitempty"`

	// mutation
	Mutation []*DesignerMutationBean `json:"mutation"`

	// next
	Next *DesignerBlockBean `json:"next,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this designer block bean
func (m *DesignerBlockBean) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMutation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DesignerBlockBean) validateChildren(formats strfmt.Registry) error {

	if swag.IsZero(m.Children) { // not required
		return nil
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DesignerBlockBean) validateComment(formats strfmt.Registry) error {

	if swag.IsZero(m.Comment) { // not required
		return nil
	}

	if m.Comment != nil {
		if err := m.Comment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("comment")
			}
			return err
		}
	}

	return nil
}

func (m *DesignerBlockBean) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DesignerBlockBean) validateMutation(formats strfmt.Registry) error {

	if swag.IsZero(m.Mutation) { // not required
		return nil
	}

	for i := 0; i < len(m.Mutation); i++ {
		if swag.IsZero(m.Mutation[i]) { // not required
			continue
		}

		if m.Mutation[i] != nil {
			if err := m.Mutation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mutation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DesignerBlockBean) validateNext(formats strfmt.Registry) error {

	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DesignerBlockBean) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DesignerBlockBean) UnmarshalBinary(b []byte) error {
	var res DesignerBlockBean
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
