// Code generated by go-bindata. DO NOT EDIT.
// sources:
// locales/ru/LC_MESSAGES/config.mo
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/elazarl/go-bindata-assetfs"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xcd\x0a\xd3\x40\x14\x85\x4f\x4b\xdd\x64\xd9\xb5\x8b\xeb\xc2\xa2\xe0\xd4\xa4\xba\x90\x69\xa6\x15\xa5\x05\xb1\x81\x5a\xa2\xfb\xb1\x99\xa6\xc1\x64\x26\xcc\x4c\x44\xa1\x0b\xb7\x3e\x80\x6f\xa0\x7b\x37\x42\x41\x7c\x87\xf4\x05\x7c\x16\x69\x5a\xff\xce\xea\x7c\x9c\xef\xc2\xfd\x39\x1c\x7c\x02\x80\x3e\x80\x9b\x00\xee\x01\xb8\x01\x20\xc6\x25\x6b\x00\x43\x00\x2f\x00\xcc\x7b\x40\x76\xe5\xcf\x3d\xa0\x77\x75\xfa\xf8\x27\x5b\xa3\x77\x45\xce\xbc\x7c\x3d\x70\xde\x58\x99\x2b\x6c\x54\x6d\xac\x67\x89\xcb\x8b\x8c\x3d\x69\x72\xc7\x52\xc3\x29\x53\x6f\x1f\xbf\x29\xf6\xb2\x32\x63\xdb\x04\x2b\xe9\x3c\x4b\xad\xd4\xae\x94\xde\x58\x4e\xcf\xbb\x89\x92\xc6\xca\xca\x64\x86\xe2\xff\xfc\x59\xb0\x92\x3a\x6f\x64\xae\x58\xaa\x64\xc5\xe9\x0f\x73\xda\x34\xce\x15\x52\x07\xc9\xb3\x64\xc1\x5e\x29\xeb\x0a\xa3\x39\x45\xe3\x30\x78\x6a\xb4\x57\xda\xb3\xf4\x7d\xad\x38\x79\xf5\xce\xdf\xaf\x4b\x59\xe8\x29\x6d\xf7\xd2\x3a\xe5\xc5\xcb\x74\xc9\x1e\xfd\xf5\xce\xff\xec\x94\x65\x0b\xbd\x35\x59\xa1\x73\x4e\xc1\xba\x6c\xac\x2c\xd9\xd2\xd8\xca\x71\xd2\x75\x87\x4e\x3c\x98\xd2\xa5\x0a\x7d\x3b\x0a\x85\x88\x68\x34\xa2\x73\x0d\x6f\x89\x28\xa2\x39\x85\xc4\x3b\x9e\x89\xc9\xef\x29\x16\x0f\xcf\xf5\x4e\xa7\xc5\x51\x48\x87\xc3\xe5\x64\x26\x26\xe1\x5d\x9a\x53\x44\x9c\x26\x53\xb4\x5f\x4e\x1f\xda\xaf\xed\x8f\xf6\xd8\x7e\x6f\x8f\xa7\x8f\xed\x37\xfc\x0a\x00\x00\xff\xff\x53\x68\x71\x5b\xb7\x01\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
