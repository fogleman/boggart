// Code generated by go-bindata.
// sources:
// locales/ru/LC_MESSAGES/config.mo
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesRuLc_messagesConfigMo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xcd\x6a\x14\x41\x14\x85\xcf\x84\xb8\xe9\x65\xd6\x2e\xae\x0b\x83\xa2\x15\xab\xbb\x0d\x84\x9a\xa9\x89\x18\x13\x10\x33\x38\x86\xd6\xfd\x75\xba\xd2\x53\x38\x53\x35\x54\x55\x8b\x42\x16\x6e\x7d\x00\x1f\xc1\xbd\x1b\x21\x20\x3e\x82\xd0\x79\x01\x9f\x45\xa6\x27\xfe\x9d\xd5\xf9\xa8\xaf\x0e\xf7\xe7\xce\xf6\x27\x00\xd8\x02\x70\x13\xc0\x7d\x00\x37\x00\x8c\xb0\xc9\x14\xc0\x0e\x80\x17\x00\xe6\x03\xa0\xbe\xe6\x1f\x03\x60\x70\xed\x6c\xe1\x9f\xcc\xbc\x3b\xb7\x8d\x48\xfc\x7a\x3b\x26\x1f\xb8\x31\x38\x33\x2b\x1f\x92\x98\xc4\xc6\xd6\xe2\x71\xdb\x44\x51\x79\x45\xb5\x79\xfb\xe8\x8d\x9d\xf3\xd2\xef\x85\x36\x9b\x3e\xaf\xc4\x51\x30\x9c\xac\x77\xe2\x09\x27\xa3\xa8\x90\xf9\x81\x90\xa5\x28\x4a\x2a\x4a\xb5\xbf\x7f\x4f\x96\x52\x66\xa7\x1c\x93\xa8\x02\xbb\xb8\xe0\xe4\x83\xa2\x67\xfd\x06\x4d\xda\xc0\x4b\x5f\x7b\x1a\xfd\x37\x3c\xce\x4e\xd9\x35\x2d\x37\x46\x54\x86\x97\x8a\xfe\xb0\xa2\xb3\x36\x46\xcb\x2e\x9b\x3c\x9d\x1c\x8b\x57\x26\x44\xeb\x9d\xa2\x7c\x4f\x66\x47\xde\x25\xe3\x92\xa8\xde\xaf\x8c\xa2\x64\xde\xa5\x07\xab\x05\x5b\x37\xa4\xd9\x9c\x43\x34\x49\xbf\xac\x4e\xc4\xc1\x5f\x6f\x7d\xcf\xb9\x09\xe2\xd8\xcd\x7c\x6d\x5d\xa3\x28\x9b\x2e\xda\xc0\x0b\x71\xe2\xc3\x32\x2a\x72\xab\x1e\xa3\x2e\x87\xb4\xa9\xda\xdd\xce\xa5\xd6\x39\xed\xee\xd2\xba\xca\x5b\x3a\xcf\xe9\x90\x24\xa9\x9e\xc7\xba\xf8\xfd\x34\xd2\x0f\xd7\xf5\x4e\xaf\x8d\x72\x49\x17\x17\x9b\x2f\x63\x5d\xc8\xbb\x74\x48\x39\x29\x2a\x86\xe8\x3e\x5f\x7d\xe8\xbe\x74\xdf\xbb\xcb\xee\x5b\x77\x79\xf5\xb1\xfb\x8a\x5f\x01\x00\x00\xff\xff\x9d\x74\xc1\x9f\xe0\x01\x00\x00"

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
