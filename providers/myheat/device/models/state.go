// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	extend "github.com/kihamo/boggart/protocols/swagger"
)

// State state
//
// swagger:model State
type State struct {

	// gsm balance
	GsmBalance string `json:"gsmBalance,omitempty"`

	// gsm carrier
	GsmCarrier string `json:"gsmCarrier,omitempty"`

	// gsm rssi
	GsmRssi string `json:"gsmRssi,omitempty"`

	// inet
	Inet extend.BooleanAsString `json:"inet,omitempty"`

	// regkey
	Regkey string `json:"regkey,omitempty"`

	// serial
	Serial string `json:"serial,omitempty"`

	// status
	Status int64 `json:"status,omitempty"`

	// wifi ssid
	WifiSsid string `json:"wifiSsid,omitempty"`
}

// Validate validates this state
func (m *State) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *State) validateInet(formats strfmt.Registry) error {
	if swag.IsZero(m.Inet) { // not required
		return nil
	}

	if err := m.Inet.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("inet")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("inet")
		}
		return err
	}

	return nil
}

// ContextValidate validate this state based on the context it is used
func (m *State) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *State) contextValidateInet(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Inet.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("inet")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("inet")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *State) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *State) UnmarshalBinary(b []byte) error {
	var res State
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
