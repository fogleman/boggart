// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NetStatusContent net status content
// swagger:model NetStatusContent
type NetStatusContent struct {

	// ip group
	IPGroup *NetStatusIPGroup `json:"ipGroup,omitempty" xml:"ipGroup"`

	// nic
	Nic []*NetStatusContentNicItems0 `json:"nic" xml:"nic>item"`
}

// Validate validates this net status content
func (m *NetStatusContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetStatusContent) validateIPGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.IPGroup) { // not required
		return nil
	}

	if m.IPGroup != nil {
		if err := m.IPGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipGroup")
			}
			return err
		}
	}

	return nil
}

func (m *NetStatusContent) validateNic(formats strfmt.Registry) error {

	if swag.IsZero(m.Nic) { // not required
		return nil
	}

	for i := 0; i < len(m.Nic); i++ {
		if swag.IsZero(m.Nic[i]) { // not required
			continue
		}

		if m.Nic[i] != nil {
			if err := m.Nic[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetStatusContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetStatusContent) UnmarshalBinary(b []byte) error {
	var res NetStatusContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetStatusContentNicItems0 net status content nic items0
// swagger:model NetStatusContentNicItems0
type NetStatusContentNicItems0 struct {

	// dhcp status
	DhcpStatus string `json:"dhcpStatus,omitempty" xml:"dhcpStatus"`

	// dhcp status v6
	DhcpStatusV6 string `json:"dhcpStatusV6,omitempty" xml:"dhcpStatusV6"`

	// gateway
	Gateway string `json:"gateway,omitempty" xml:"gateway"`

	// gateway v6
	GatewayV6 string `json:"gatewayV6,omitempty" xml:"gatewayV6"`

	// id
	ID string `json:"id,omitempty" xml:"id,attr"`

	// ip
	IP string `json:"ip,omitempty" xml:"ip"`

	// ip v6
	IPV6 string `json:"ipV6,omitempty" xml:"ipV6"`

	// mac
	Mac string `json:"mac,omitempty" xml:"mac"`

	// mask
	Mask string `json:"mask,omitempty" xml:"mask"`

	// nic status
	NicStatus string `json:"nicStatus,omitempty" xml:"nicStatus"`

	// sub length v6
	SubLengthV6 int64 `json:"subLengthV6,omitempty" xml:"subLengthV6"`
}

// Validate validates this net status content nic items0
func (m *NetStatusContentNicItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetStatusContentNicItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetStatusContentNicItems0) UnmarshalBinary(b []byte) error {
	var res NetStatusContentNicItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
