// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StorageInfoContent storage info content
// swagger:model StorageInfoContent
type StorageInfoContent struct {

	// disks
	Disks []*StorageInfoContentDisksItems0 `json:"disks" xml:"diskList>item"`

	// disks size
	DisksSize *Size `json:"disksSize,omitempty" xml:"diskList>itemType>size"`
}

// Validate validates this storage info content
func (m *StorageInfoContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageInfoContent) validateDisks(formats strfmt.Registry) error {

	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StorageInfoContent) validateDisksSize(formats strfmt.Registry) error {

	if swag.IsZero(m.DisksSize) { // not required
		return nil
	}

	if m.DisksSize != nil {
		if err := m.DisksSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disksSize")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageInfoContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageInfoContent) UnmarshalBinary(b []byte) error {
	var res StorageInfoContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StorageInfoContentDisksItems0 storage info content disks items0
// swagger:model StorageInfoContentDisksItems0
type StorageInfoContentDisksItems0 struct {

	// disk interface type
	DiskInterfaceType string `json:"diskInterfaceType,omitempty" xml:"diskInterfaceType"`

	// free space
	FreeSpace int64 `json:"freeSpace,omitempty" xml:"freeSpace"`

	// id
	ID string `json:"id,omitempty" xml:"id,attr"`

	// model
	Model string `json:"model,omitempty" xml:"model"`

	// rec end date
	// Format: date
	RecEndDate strfmt.Date `json:"recEndDate,omitempty" xml:"recEndDate"`

	// rec start date
	// Format: date
	RecStartDate strfmt.Date `json:"recStartDate,omitempty" xml:"recStartDate"`

	// serial num
	SerialNum string `json:"serialNum,omitempty" xml:"serialNum"`

	// size
	Size int64 `json:"size,omitempty" xml:"size"`

	// slot index
	SlotIndex int64 `json:"slotIndex,omitempty" xml:"slotIndex"`
}

// Validate validates this storage info content disks items0
func (m *StorageInfoContentDisksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StorageInfoContentDisksItems0) validateRecEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RecEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("recEndDate", "body", "date", m.RecEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StorageInfoContentDisksItems0) validateRecStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.RecStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("recStartDate", "body", "date", m.RecStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StorageInfoContentDisksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StorageInfoContentDisksItems0) UnmarshalBinary(b []byte) error {
	var res StorageInfoContentDisksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
