// Code generated by "enumer -type=DeviceState -trimprefix=DeviceState -output=device_state_enumer.go"; DO NOT EDIT.

//
package zstack

import (
	"fmt"
)

const _DeviceStateName = "InitializedNotStartedInitializedNotConnectedDiscoveringPANJoiningPANRejoiningPANUnauthenticationStartedDeviceRouterStartingCoordinatorStartedCoordinatorOrphan"

var _DeviceStateIndex = [...]uint8{0, 21, 44, 58, 68, 80, 96, 109, 115, 134, 152, 158}

func (i DeviceState) String() string {
	if i >= DeviceState(len(_DeviceStateIndex)-1) {
		return fmt.Sprintf("DeviceState(%d)", i)
	}
	return _DeviceStateName[_DeviceStateIndex[i]:_DeviceStateIndex[i+1]]
}

var _DeviceStateValues = []DeviceState{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

var _DeviceStateNameToValueMap = map[string]DeviceState{
	_DeviceStateName[0:21]:    0,
	_DeviceStateName[21:44]:   1,
	_DeviceStateName[44:58]:   2,
	_DeviceStateName[58:68]:   3,
	_DeviceStateName[68:80]:   4,
	_DeviceStateName[80:96]:   5,
	_DeviceStateName[96:109]:  6,
	_DeviceStateName[109:115]: 7,
	_DeviceStateName[115:134]: 8,
	_DeviceStateName[134:152]: 9,
	_DeviceStateName[152:158]: 10,
}

// DeviceStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DeviceStateString(s string) (DeviceState, error) {
	if val, ok := _DeviceStateNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DeviceState values", s)
}

// DeviceStateValues returns all values of the enum
func DeviceStateValues() []DeviceState {
	return _DeviceStateValues
}

// IsADeviceState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DeviceState) IsADeviceState() bool {
	for _, v := range _DeviceStateValues {
		if i == v {
			return true
		}
	}
	return false
}
