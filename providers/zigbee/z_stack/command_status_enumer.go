// Code generated by "enumer -type=CommandStatus -trimprefix=CommandStatus -output=command_status_enumer.go"; DO NOT EDIT.

//
package zstack

import (
	"fmt"
)

const (
	_CommandStatusName_0 = "SuccessFailureInvalidParam"
	_CommandStatusName_1 = "NvItemInitialized"
	_CommandStatusName_2 = "ApsDuplicateEntry"
	_CommandStatusName_3 = "NwkInvalidRequest"
)

var (
	_CommandStatusIndex_0 = [...]uint8{0, 7, 14, 26}
	_CommandStatusIndex_1 = [...]uint8{0, 17}
	_CommandStatusIndex_2 = [...]uint8{0, 17}
	_CommandStatusIndex_3 = [...]uint8{0, 17}
)

func (i CommandStatus) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _CommandStatusName_0[_CommandStatusIndex_0[i]:_CommandStatusIndex_0[i+1]]
	case i == 9:
		return _CommandStatusName_1
	case i == 184:
		return _CommandStatusName_2
	case i == 194:
		return _CommandStatusName_3
	default:
		return fmt.Sprintf("CommandStatus(%d)", i)
	}
}

var _CommandStatusValues = []CommandStatus{0, 1, 2, 9, 184, 194}

var _CommandStatusNameToValueMap = map[string]CommandStatus{
	_CommandStatusName_0[0:7]:   0,
	_CommandStatusName_0[7:14]:  1,
	_CommandStatusName_0[14:26]: 2,
	_CommandStatusName_1[0:17]:  9,
	_CommandStatusName_2[0:17]:  184,
	_CommandStatusName_3[0:17]:  194,
}

// CommandStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CommandStatusString(s string) (CommandStatus, error) {
	if val, ok := _CommandStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CommandStatus values", s)
}

// CommandStatusValues returns all values of the enum
func CommandStatusValues() []CommandStatus {
	return _CommandStatusValues
}

// IsACommandStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CommandStatus) IsACommandStatus() bool {
	for _, v := range _CommandStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
