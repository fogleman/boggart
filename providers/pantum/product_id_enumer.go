// Code generated by "enumer -type=ProductID -trimprefix=ProductID -output=product_id_enumer.go"; DO NOT EDIT.

//
package pantum

import (
	"fmt"
)

const (
	_ProductIDName_0 = "Unknown"
	_ProductIDName_1 = "P3010DP3010DWP3060DWP3300P3300DNP3300DWM6700DM6700DWM6760DWM6800FDWM6860FDWM7100DNM7100DWM7200FDM7200FDNM7200FDW"
	_ProductIDName_2 = "M6700DNM7100D"
	_ProductIDName_3 = "M6860FDN"
	_ProductIDName_4 = "M6760DM7160DW"
	_ProductIDName_5 = "P3012NET"
	_ProductIDName_6 = "P3100DLP3255DN"
)

var (
	_ProductIDIndex_0 = [...]uint8{0, 7}
	_ProductIDIndex_1 = [...]uint8{0, 6, 13, 20, 25, 32, 39, 45, 52, 59, 67, 75, 82, 89, 96, 104, 112}
	_ProductIDIndex_2 = [...]uint8{0, 7, 13}
	_ProductIDIndex_3 = [...]uint8{0, 8}
	_ProductIDIndex_4 = [...]uint8{0, 6, 13}
	_ProductIDIndex_5 = [...]uint8{0, 8}
	_ProductIDIndex_6 = [...]uint8{0, 14}
)

func (i ProductID) String() string {
	switch {
	case i == 0:
		return _ProductIDName_0
	case 3780 <= i && i <= 3795:
		i -= 3780
		return _ProductIDName_1[_ProductIDIndex_1[i]:_ProductIDIndex_1[i+1]]
	case 3809 <= i && i <= 3810:
		i -= 3809
		return _ProductIDName_2[_ProductIDIndex_2[i]:_ProductIDIndex_2[i+1]]
	case i == 3831:
		return _ProductIDName_3
	case 3842 <= i && i <= 3843:
		i -= 3842
		return _ProductIDName_4[_ProductIDIndex_4[i]:_ProductIDIndex_4[i+1]]
	case i == 6192:
		return _ProductIDName_5
	case i == 26672:
		return _ProductIDName_6
	default:
		return fmt.Sprintf("ProductID(%d)", i)
	}
}

var _ProductIDValues = []ProductID{0, 3780, 3781, 3782, 3783, 3784, 3785, 3786, 3787, 3788, 3789, 3790, 3791, 3792, 3793, 3794, 3795, 3809, 3810, 3831, 3842, 3843, 6192, 26672}

var _ProductIDNameToValueMap = map[string]ProductID{
	_ProductIDName_0[0:7]:     0,
	_ProductIDName_1[0:6]:     3780,
	_ProductIDName_1[6:13]:    3781,
	_ProductIDName_1[13:20]:   3782,
	_ProductIDName_1[20:25]:   3783,
	_ProductIDName_1[25:32]:   3784,
	_ProductIDName_1[32:39]:   3785,
	_ProductIDName_1[39:45]:   3786,
	_ProductIDName_1[45:52]:   3787,
	_ProductIDName_1[52:59]:   3788,
	_ProductIDName_1[59:67]:   3789,
	_ProductIDName_1[67:75]:   3790,
	_ProductIDName_1[75:82]:   3791,
	_ProductIDName_1[82:89]:   3792,
	_ProductIDName_1[89:96]:   3793,
	_ProductIDName_1[96:104]:  3794,
	_ProductIDName_1[104:112]: 3795,
	_ProductIDName_2[0:7]:     3809,
	_ProductIDName_2[7:13]:    3810,
	_ProductIDName_3[0:8]:     3831,
	_ProductIDName_4[0:6]:     3842,
	_ProductIDName_4[6:13]:    3843,
	_ProductIDName_5[0:8]:     6192,
	_ProductIDName_6[0:14]:    26672,
}

// ProductIDString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ProductIDString(s string) (ProductID, error) {
	if val, ok := _ProductIDNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ProductID values", s)
}

// ProductIDValues returns all values of the enum
func ProductIDValues() []ProductID {
	return _ProductIDValues
}

// IsAProductID returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ProductID) IsAProductID() bool {
	for _, v := range _ProductIDValues {
		if i == v {
			return true
		}
	}
	return false
}
