// Code generated by go-swagger; DO NOT EDIT.

package light

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTurnOffLightParams creates a new TurnOffLightParams object
// with the default values initialized.
func NewTurnOffLightParams() *TurnOffLightParams {
	var ()
	return &TurnOffLightParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTurnOffLightParamsWithTimeout creates a new TurnOffLightParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTurnOffLightParamsWithTimeout(timeout time.Duration) *TurnOffLightParams {
	var ()
	return &TurnOffLightParams{

		timeout: timeout,
	}
}

// NewTurnOffLightParamsWithContext creates a new TurnOffLightParams object
// with the default values initialized, and the ability to set a context for a request
func NewTurnOffLightParamsWithContext(ctx context.Context) *TurnOffLightParams {
	var ()
	return &TurnOffLightParams{

		Context: ctx,
	}
}

// NewTurnOffLightParamsWithHTTPClient creates a new TurnOffLightParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTurnOffLightParamsWithHTTPClient(client *http.Client) *TurnOffLightParams {
	var ()
	return &TurnOffLightParams{
		HTTPClient: client,
	}
}

/*TurnOffLightParams contains all the parameters to send to the API endpoint
for the turn off light operation typically these are written to a http.Request
*/
type TurnOffLightParams struct {

	/*ID
	  The id of the light

	*/
	ID string
	/*Transition
	  Transition to off in this duration in seconds

	*/
	Transition *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the turn off light params
func (o *TurnOffLightParams) WithTimeout(timeout time.Duration) *TurnOffLightParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the turn off light params
func (o *TurnOffLightParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the turn off light params
func (o *TurnOffLightParams) WithContext(ctx context.Context) *TurnOffLightParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the turn off light params
func (o *TurnOffLightParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the turn off light params
func (o *TurnOffLightParams) WithHTTPClient(client *http.Client) *TurnOffLightParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the turn off light params
func (o *TurnOffLightParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the turn off light params
func (o *TurnOffLightParams) WithID(id string) *TurnOffLightParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the turn off light params
func (o *TurnOffLightParams) SetID(id string) {
	o.ID = id
}

// WithTransition adds the transition to the turn off light params
func (o *TurnOffLightParams) WithTransition(transition *int64) *TurnOffLightParams {
	o.SetTransition(transition)
	return o
}

// SetTransition adds the transition to the turn off light params
func (o *TurnOffLightParams) SetTransition(transition *int64) {
	o.Transition = transition
}

// WriteToRequest writes these params to a swagger request
func (o *TurnOffLightParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Transition != nil {

		// query param transition
		var qrTransition int64
		if o.Transition != nil {
			qrTransition = *o.Transition
		}
		qTransition := swag.FormatInt64(qrTransition)
		if qTransition != "" {
			if err := r.SetQueryParam("transition", qTransition); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
