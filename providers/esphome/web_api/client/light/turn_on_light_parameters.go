// Code generated by go-swagger; DO NOT EDIT.

package light

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTurnOnLightParams creates a new TurnOnLightParams object
// with the default values initialized.
func NewTurnOnLightParams() *TurnOnLightParams {
	var ()
	return &TurnOnLightParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTurnOnLightParamsWithTimeout creates a new TurnOnLightParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTurnOnLightParamsWithTimeout(timeout time.Duration) *TurnOnLightParams {
	var ()
	return &TurnOnLightParams{

		timeout: timeout,
	}
}

// NewTurnOnLightParamsWithContext creates a new TurnOnLightParams object
// with the default values initialized, and the ability to set a context for a request
func NewTurnOnLightParamsWithContext(ctx context.Context) *TurnOnLightParams {
	var ()
	return &TurnOnLightParams{

		Context: ctx,
	}
}

// NewTurnOnLightParamsWithHTTPClient creates a new TurnOnLightParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTurnOnLightParamsWithHTTPClient(client *http.Client) *TurnOnLightParams {
	var ()
	return &TurnOnLightParams{
		HTTPClient: client,
	}
}

/*TurnOnLightParams contains all the parameters to send to the API endpoint
for the turn on light operation typically these are written to a http.Request
*/
type TurnOnLightParams struct {

	/*B
	  The blue color channel of the light, from 0 to 255

	*/
	B *int64
	/*Brightness
	  The brightness of the light, from 0 to 255

	*/
	Brightness *int64
	/*Effect
	  Set an effect for the light

	*/
	Effect *string
	/*Flash
	  Flash the color provided by the other properties for a duration in seconds

	*/
	Flash *int64
	/*G
	  The green color channel of the light, from 0 to 255

	*/
	G *int64
	/*ID
	  The id of the light

	*/
	ID string
	/*R
	  The red color channel of the light, from 0 to 255

	*/
	R *int64
	/*Transition
	  Transition to the specified color values in this duration in seconds

	*/
	Transition *int64
	/*WhiteValue
	  The white channel of RGBW lights, from 0 to 255

	*/
	WhiteValue *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the turn on light params
func (o *TurnOnLightParams) WithTimeout(timeout time.Duration) *TurnOnLightParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the turn on light params
func (o *TurnOnLightParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the turn on light params
func (o *TurnOnLightParams) WithContext(ctx context.Context) *TurnOnLightParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the turn on light params
func (o *TurnOnLightParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the turn on light params
func (o *TurnOnLightParams) WithHTTPClient(client *http.Client) *TurnOnLightParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the turn on light params
func (o *TurnOnLightParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithB adds the b to the turn on light params
func (o *TurnOnLightParams) WithB(b *int64) *TurnOnLightParams {
	o.SetB(b)
	return o
}

// SetB adds the b to the turn on light params
func (o *TurnOnLightParams) SetB(b *int64) {
	o.B = b
}

// WithBrightness adds the brightness to the turn on light params
func (o *TurnOnLightParams) WithBrightness(brightness *int64) *TurnOnLightParams {
	o.SetBrightness(brightness)
	return o
}

// SetBrightness adds the brightness to the turn on light params
func (o *TurnOnLightParams) SetBrightness(brightness *int64) {
	o.Brightness = brightness
}

// WithEffect adds the effect to the turn on light params
func (o *TurnOnLightParams) WithEffect(effect *string) *TurnOnLightParams {
	o.SetEffect(effect)
	return o
}

// SetEffect adds the effect to the turn on light params
func (o *TurnOnLightParams) SetEffect(effect *string) {
	o.Effect = effect
}

// WithFlash adds the flash to the turn on light params
func (o *TurnOnLightParams) WithFlash(flash *int64) *TurnOnLightParams {
	o.SetFlash(flash)
	return o
}

// SetFlash adds the flash to the turn on light params
func (o *TurnOnLightParams) SetFlash(flash *int64) {
	o.Flash = flash
}

// WithG adds the g to the turn on light params
func (o *TurnOnLightParams) WithG(g *int64) *TurnOnLightParams {
	o.SetG(g)
	return o
}

// SetG adds the g to the turn on light params
func (o *TurnOnLightParams) SetG(g *int64) {
	o.G = g
}

// WithID adds the id to the turn on light params
func (o *TurnOnLightParams) WithID(id string) *TurnOnLightParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the turn on light params
func (o *TurnOnLightParams) SetID(id string) {
	o.ID = id
}

// WithR adds the r to the turn on light params
func (o *TurnOnLightParams) WithR(r *int64) *TurnOnLightParams {
	o.SetR(r)
	return o
}

// SetR adds the r to the turn on light params
func (o *TurnOnLightParams) SetR(r *int64) {
	o.R = r
}

// WithTransition adds the transition to the turn on light params
func (o *TurnOnLightParams) WithTransition(transition *int64) *TurnOnLightParams {
	o.SetTransition(transition)
	return o
}

// SetTransition adds the transition to the turn on light params
func (o *TurnOnLightParams) SetTransition(transition *int64) {
	o.Transition = transition
}

// WithWhiteValue adds the whiteValue to the turn on light params
func (o *TurnOnLightParams) WithWhiteValue(whiteValue *int64) *TurnOnLightParams {
	o.SetWhiteValue(whiteValue)
	return o
}

// SetWhiteValue adds the whiteValue to the turn on light params
func (o *TurnOnLightParams) SetWhiteValue(whiteValue *int64) {
	o.WhiteValue = whiteValue
}

// WriteToRequest writes these params to a swagger request
func (o *TurnOnLightParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.B != nil {

		// query param b
		var qrB int64
		if o.B != nil {
			qrB = *o.B
		}
		qB := swag.FormatInt64(qrB)
		if qB != "" {
			if err := r.SetQueryParam("b", qB); err != nil {
				return err
			}
		}

	}

	if o.Brightness != nil {

		// query param brightness
		var qrBrightness int64
		if o.Brightness != nil {
			qrBrightness = *o.Brightness
		}
		qBrightness := swag.FormatInt64(qrBrightness)
		if qBrightness != "" {
			if err := r.SetQueryParam("brightness", qBrightness); err != nil {
				return err
			}
		}

	}

	if o.Effect != nil {

		// query param effect
		var qrEffect string
		if o.Effect != nil {
			qrEffect = *o.Effect
		}
		qEffect := qrEffect
		if qEffect != "" {
			if err := r.SetQueryParam("effect", qEffect); err != nil {
				return err
			}
		}

	}

	if o.Flash != nil {

		// query param flash
		var qrFlash int64
		if o.Flash != nil {
			qrFlash = *o.Flash
		}
		qFlash := swag.FormatInt64(qrFlash)
		if qFlash != "" {
			if err := r.SetQueryParam("flash", qFlash); err != nil {
				return err
			}
		}

	}

	if o.G != nil {

		// query param g
		var qrG int64
		if o.G != nil {
			qrG = *o.G
		}
		qG := swag.FormatInt64(qrG)
		if qG != "" {
			if err := r.SetQueryParam("g", qG); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.R != nil {

		// query param r
		var qrR int64
		if o.R != nil {
			qrR = *o.R
		}
		qR := swag.FormatInt64(qrR)
		if qR != "" {
			if err := r.SetQueryParam("r", qR); err != nil {
				return err
			}
		}

	}

	if o.Transition != nil {

		// query param transition
		var qrTransition int64
		if o.Transition != nil {
			qrTransition = *o.Transition
		}
		qTransition := swag.FormatInt64(qrTransition)
		if qTransition != "" {
			if err := r.SetQueryParam("transition", qTransition); err != nil {
				return err
			}
		}

	}

	if o.WhiteValue != nil {

		// query param white_value
		var qrWhiteValue int64
		if o.WhiteValue != nil {
			qrWhiteValue = *o.WhiteValue
		}
		qWhiteValue := swag.FormatInt64(qrWhiteValue)
		if qWhiteValue != "" {
			if err := r.SetQueryParam("white_value", qWhiteValue); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
