// Code generated by go-swagger; DO NOT EDIT.

package light

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new light API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for light API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetLight get light API
*/
func (a *Client) GetLight(params *GetLightParams) (*GetLightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLight",
		Method:             "GET",
		PathPattern:        "/light/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLight: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ToggleLight toggle light API
*/
func (a *Client) ToggleLight(params *ToggleLightParams) (*ToggleLightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleLightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "toggleLight",
		Method:             "POST",
		PathPattern:        "/light/{id}/toggle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ToggleLightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ToggleLightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for toggleLight: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TurnOffLight turn off light API
*/
func (a *Client) TurnOffLight(params *TurnOffLightParams) (*TurnOffLightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTurnOffLightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "turnOffLight",
		Method:             "POST",
		PathPattern:        "/light/{id}/turn_off",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TurnOffLightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TurnOffLightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for turnOffLight: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TurnOnLight turn on light API
*/
func (a *Client) TurnOnLight(params *TurnOnLightParams) (*TurnOnLightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTurnOnLightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "turnOnLight",
		Method:             "POST",
		PathPattern:        "/light/{id}/turn_on",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TurnOnLightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TurnOnLightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for turnOnLight: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
