// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCheckParams creates a new CheckParams object
// with the default values initialized.
func NewCheckParams() *CheckParams {
	var ()
	return &CheckParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCheckParamsWithTimeout creates a new CheckParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCheckParamsWithTimeout(timeout time.Duration) *CheckParams {
	var ()
	return &CheckParams{

		timeout: timeout,
	}
}

// NewCheckParamsWithContext creates a new CheckParams object
// with the default values initialized, and the ability to set a context for a request
func NewCheckParamsWithContext(ctx context.Context) *CheckParams {
	var ()
	return &CheckParams{

		Context: ctx,
	}
}

// NewCheckParamsWithHTTPClient creates a new CheckParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCheckParamsWithHTTPClient(client *http.Client) *CheckParams {
	var ()
	return &CheckParams{
		HTTPClient: client,
	}
}

/*CheckParams contains all the parameters to send to the API endpoint
for the check operation typically these are written to a http.Request
*/
type CheckParams struct {

	/*Date
	  Дата в формате DD-MM-YYYY HH:II

	*/
	Date string
	/*FiscalDocumentNumber
	  Номер фискальных данных

	*/
	FiscalDocumentNumber uint64
	/*FiscalDriveNumber
	  Номер фискальное накопителя

	*/
	FiscalDriveNumber uint64
	/*FiscalSign
	  Фискальный признак

	*/
	FiscalSign uint64
	/*Sum
	  Сумма в копейках

	*/
	Sum uint64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the check params
func (o *CheckParams) WithTimeout(timeout time.Duration) *CheckParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the check params
func (o *CheckParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the check params
func (o *CheckParams) WithContext(ctx context.Context) *CheckParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the check params
func (o *CheckParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the check params
func (o *CheckParams) WithHTTPClient(client *http.Client) *CheckParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the check params
func (o *CheckParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDate adds the date to the check params
func (o *CheckParams) WithDate(date string) *CheckParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the check params
func (o *CheckParams) SetDate(date string) {
	o.Date = date
}

// WithFiscalDocumentNumber adds the fiscalDocumentNumber to the check params
func (o *CheckParams) WithFiscalDocumentNumber(fiscalDocumentNumber uint64) *CheckParams {
	o.SetFiscalDocumentNumber(fiscalDocumentNumber)
	return o
}

// SetFiscalDocumentNumber adds the fiscalDocumentNumber to the check params
func (o *CheckParams) SetFiscalDocumentNumber(fiscalDocumentNumber uint64) {
	o.FiscalDocumentNumber = fiscalDocumentNumber
}

// WithFiscalDriveNumber adds the fiscalDriveNumber to the check params
func (o *CheckParams) WithFiscalDriveNumber(fiscalDriveNumber uint64) *CheckParams {
	o.SetFiscalDriveNumber(fiscalDriveNumber)
	return o
}

// SetFiscalDriveNumber adds the fiscalDriveNumber to the check params
func (o *CheckParams) SetFiscalDriveNumber(fiscalDriveNumber uint64) {
	o.FiscalDriveNumber = fiscalDriveNumber
}

// WithFiscalSign adds the fiscalSign to the check params
func (o *CheckParams) WithFiscalSign(fiscalSign uint64) *CheckParams {
	o.SetFiscalSign(fiscalSign)
	return o
}

// SetFiscalSign adds the fiscalSign to the check params
func (o *CheckParams) SetFiscalSign(fiscalSign uint64) {
	o.FiscalSign = fiscalSign
}

// WithSum adds the sum to the check params
func (o *CheckParams) WithSum(sum uint64) *CheckParams {
	o.SetSum(sum)
	return o
}

// SetSum adds the sum to the check params
func (o *CheckParams) SetSum(sum uint64) {
	o.Sum = sum
}

// WriteToRequest writes these params to a swagger request
func (o *CheckParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param date
	qrDate := o.Date
	qDate := qrDate
	if qDate != "" {
		if err := r.SetQueryParam("date", qDate); err != nil {
			return err
		}
	}

	// path param fiscalDocumentNumber
	if err := r.SetPathParam("fiscalDocumentNumber", swag.FormatUint64(o.FiscalDocumentNumber)); err != nil {
		return err
	}

	// path param fiscalDriveNumber
	if err := r.SetPathParam("fiscalDriveNumber", swag.FormatUint64(o.FiscalDriveNumber)); err != nil {
		return err
	}

	// query param fiscalSign
	qrFiscalSign := o.FiscalSign
	qFiscalSign := swag.FormatUint64(qrFiscalSign)
	if qFiscalSign != "" {
		if err := r.SetQueryParam("fiscalSign", qFiscalSign); err != nil {
			return err
		}
	}

	// query param sum
	qrSum := o.Sum
	qSum := swag.FormatUint64(qrSum)
	if qSum != "" {
		if err := r.SetQueryParam("sum", qSum); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
