// Code generated by go-swagger; DO NOT EDIT.

package generate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGenerateParams creates a new GenerateParams object
// with the default values initialized.
func NewGenerateParams() *GenerateParams {
	var ()
	return &GenerateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGenerateParamsWithTimeout creates a new GenerateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGenerateParamsWithTimeout(timeout time.Duration) *GenerateParams {
	var ()
	return &GenerateParams{

		timeout: timeout,
	}
}

// NewGenerateParamsWithContext creates a new GenerateParams object
// with the default values initialized, and the ability to set a context for a request
func NewGenerateParamsWithContext(ctx context.Context) *GenerateParams {
	var ()
	return &GenerateParams{

		Context: ctx,
	}
}

// NewGenerateParamsWithHTTPClient creates a new GenerateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGenerateParamsWithHTTPClient(client *http.Client) *GenerateParams {
	var ()
	return &GenerateParams{
		HTTPClient: client,
	}
}

/*GenerateParams contains all the parameters to send to the API endpoint
for the generate operation typically these are written to a http.Request
*/
type GenerateParams struct {

	/*Emotion
	  Эмоциональная окраска голоса

	*/
	Emotion *string
	/*Format
	  Формат синтезируемого аудио

	*/
	Format *string
	/*Key
	  API Key

	*/
	Key string
	/*Lang
	  Язык

	*/
	Lang *string
	/*Quality
	  Частота дискретизации синтезируемого аудио

	*/
	Quality *string
	/*Speaker
	  Желаемый голос для синтеза речи

	*/
	Speaker *string
	/*Speed
	  Скорость (темп) синтезированной речи

	*/
	Speed *float64
	/*Text
	  Текст, который нужно озвучить, в кодировке UTF-8

	*/
	Text string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the generate params
func (o *GenerateParams) WithTimeout(timeout time.Duration) *GenerateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the generate params
func (o *GenerateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the generate params
func (o *GenerateParams) WithContext(ctx context.Context) *GenerateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the generate params
func (o *GenerateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the generate params
func (o *GenerateParams) WithHTTPClient(client *http.Client) *GenerateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the generate params
func (o *GenerateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmotion adds the emotion to the generate params
func (o *GenerateParams) WithEmotion(emotion *string) *GenerateParams {
	o.SetEmotion(emotion)
	return o
}

// SetEmotion adds the emotion to the generate params
func (o *GenerateParams) SetEmotion(emotion *string) {
	o.Emotion = emotion
}

// WithFormat adds the format to the generate params
func (o *GenerateParams) WithFormat(format *string) *GenerateParams {
	o.SetFormat(format)
	return o
}

// SetFormat adds the format to the generate params
func (o *GenerateParams) SetFormat(format *string) {
	o.Format = format
}

// WithKey adds the key to the generate params
func (o *GenerateParams) WithKey(key string) *GenerateParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the generate params
func (o *GenerateParams) SetKey(key string) {
	o.Key = key
}

// WithLang adds the lang to the generate params
func (o *GenerateParams) WithLang(lang *string) *GenerateParams {
	o.SetLang(lang)
	return o
}

// SetLang adds the lang to the generate params
func (o *GenerateParams) SetLang(lang *string) {
	o.Lang = lang
}

// WithQuality adds the quality to the generate params
func (o *GenerateParams) WithQuality(quality *string) *GenerateParams {
	o.SetQuality(quality)
	return o
}

// SetQuality adds the quality to the generate params
func (o *GenerateParams) SetQuality(quality *string) {
	o.Quality = quality
}

// WithSpeaker adds the speaker to the generate params
func (o *GenerateParams) WithSpeaker(speaker *string) *GenerateParams {
	o.SetSpeaker(speaker)
	return o
}

// SetSpeaker adds the speaker to the generate params
func (o *GenerateParams) SetSpeaker(speaker *string) {
	o.Speaker = speaker
}

// WithSpeed adds the speed to the generate params
func (o *GenerateParams) WithSpeed(speed *float64) *GenerateParams {
	o.SetSpeed(speed)
	return o
}

// SetSpeed adds the speed to the generate params
func (o *GenerateParams) SetSpeed(speed *float64) {
	o.Speed = speed
}

// WithText adds the text to the generate params
func (o *GenerateParams) WithText(text string) *GenerateParams {
	o.SetText(text)
	return o
}

// SetText adds the text to the generate params
func (o *GenerateParams) SetText(text string) {
	o.Text = text
}

// WriteToRequest writes these params to a swagger request
func (o *GenerateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Emotion != nil {

		// query param emotion
		var qrEmotion string
		if o.Emotion != nil {
			qrEmotion = *o.Emotion
		}
		qEmotion := qrEmotion
		if qEmotion != "" {
			if err := r.SetQueryParam("emotion", qEmotion); err != nil {
				return err
			}
		}

	}

	if o.Format != nil {

		// query param format
		var qrFormat string
		if o.Format != nil {
			qrFormat = *o.Format
		}
		qFormat := qrFormat
		if qFormat != "" {
			if err := r.SetQueryParam("format", qFormat); err != nil {
				return err
			}
		}

	}

	// query param key
	qrKey := o.Key
	qKey := qrKey
	if qKey != "" {
		if err := r.SetQueryParam("key", qKey); err != nil {
			return err
		}
	}

	if o.Lang != nil {

		// query param lang
		var qrLang string
		if o.Lang != nil {
			qrLang = *o.Lang
		}
		qLang := qrLang
		if qLang != "" {
			if err := r.SetQueryParam("lang", qLang); err != nil {
				return err
			}
		}

	}

	if o.Quality != nil {

		// query param quality
		var qrQuality string
		if o.Quality != nil {
			qrQuality = *o.Quality
		}
		qQuality := qrQuality
		if qQuality != "" {
			if err := r.SetQueryParam("quality", qQuality); err != nil {
				return err
			}
		}

	}

	if o.Speaker != nil {

		// query param speaker
		var qrSpeaker string
		if o.Speaker != nil {
			qrSpeaker = *o.Speaker
		}
		qSpeaker := qrSpeaker
		if qSpeaker != "" {
			if err := r.SetQueryParam("speaker", qSpeaker); err != nil {
				return err
			}
		}

	}

	if o.Speed != nil {

		// query param speed
		var qrSpeed float64
		if o.Speed != nil {
			qrSpeed = *o.Speed
		}
		qSpeed := swag.FormatFloat64(qrSpeed)
		if qSpeed != "" {
			if err := r.SetQueryParam("speed", qSpeed); err != nil {
				return err
			}
		}

	}

	// query param text
	qrText := o.Text
	qText := qrText
	if qText != "" {
		if err := r.SetQueryParam("text", qText); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
