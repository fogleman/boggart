// Code generated by go-swagger; DO NOT EDIT.

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDebtByAccountParams creates a new GetDebtByAccountParams object
// with the default values initialized.
func NewGetDebtByAccountParams() *GetDebtByAccountParams {
	var ()
	return &GetDebtByAccountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDebtByAccountParamsWithTimeout creates a new GetDebtByAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDebtByAccountParamsWithTimeout(timeout time.Duration) *GetDebtByAccountParams {
	var ()
	return &GetDebtByAccountParams{

		timeout: timeout,
	}
}

// NewGetDebtByAccountParamsWithContext creates a new GetDebtByAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDebtByAccountParamsWithContext(ctx context.Context) *GetDebtByAccountParams {
	var ()
	return &GetDebtByAccountParams{

		Context: ctx,
	}
}

// NewGetDebtByAccountParamsWithHTTPClient creates a new GetDebtByAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDebtByAccountParamsWithHTTPClient(client *http.Client) *GetDebtByAccountParams {
	var ()
	return &GetDebtByAccountParams{
		HTTPClient: client,
	}
}

/*GetDebtByAccountParams contains all the parameters to send to the API endpoint
for the get debt by account operation typically these are written to a http.Request
*/
type GetDebtByAccountParams struct {

	/*Ident
	  ID

	*/
	Ident string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get debt by account params
func (o *GetDebtByAccountParams) WithTimeout(timeout time.Duration) *GetDebtByAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get debt by account params
func (o *GetDebtByAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get debt by account params
func (o *GetDebtByAccountParams) WithContext(ctx context.Context) *GetDebtByAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get debt by account params
func (o *GetDebtByAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get debt by account params
func (o *GetDebtByAccountParams) WithHTTPClient(client *http.Client) *GetDebtByAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get debt by account params
func (o *GetDebtByAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIdent adds the ident to the get debt by account params
func (o *GetDebtByAccountParams) WithIdent(ident string) *GetDebtByAccountParams {
	o.SetIdent(ident)
	return o
}

// SetIdent adds the ident to the get debt by account params
func (o *GetDebtByAccountParams) SetIdent(ident string) {
	o.Ident = ident
}

// WriteToRequest writes these params to a swagger request
func (o *GetDebtByAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param ident
	qrIdent := o.Ident
	qIdent := qrIdent
	if qIdent != "" {
		if err := r.SetQueryParam("ident", qIdent); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
