// Code generated by go-swagger; DO NOT EDIT.

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAdditionalServicesParams creates a new GetAdditionalServicesParams object
// with the default values initialized.
func NewGetAdditionalServicesParams() *GetAdditionalServicesParams {
	var ()
	return &GetAdditionalServicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAdditionalServicesParamsWithTimeout creates a new GetAdditionalServicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAdditionalServicesParamsWithTimeout(timeout time.Duration) *GetAdditionalServicesParams {
	var ()
	return &GetAdditionalServicesParams{

		timeout: timeout,
	}
}

// NewGetAdditionalServicesParamsWithContext creates a new GetAdditionalServicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAdditionalServicesParamsWithContext(ctx context.Context) *GetAdditionalServicesParams {
	var ()
	return &GetAdditionalServicesParams{

		Context: ctx,
	}
}

// NewGetAdditionalServicesParamsWithHTTPClient creates a new GetAdditionalServicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAdditionalServicesParamsWithHTTPClient(client *http.Client) *GetAdditionalServicesParams {
	var ()
	return &GetAdditionalServicesParams{
		HTTPClient: client,
	}
}

/*GetAdditionalServicesParams contains all the parameters to send to the API endpoint
for the get additional services operation typically these are written to a http.Request
*/
type GetAdditionalServicesParams struct {

	/*Login
	  Login

	*/
	Login string
	/*Pwd
	  Password

	*/
	Pwd string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get additional services params
func (o *GetAdditionalServicesParams) WithTimeout(timeout time.Duration) *GetAdditionalServicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get additional services params
func (o *GetAdditionalServicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get additional services params
func (o *GetAdditionalServicesParams) WithContext(ctx context.Context) *GetAdditionalServicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get additional services params
func (o *GetAdditionalServicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get additional services params
func (o *GetAdditionalServicesParams) WithHTTPClient(client *http.Client) *GetAdditionalServicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get additional services params
func (o *GetAdditionalServicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLogin adds the login to the get additional services params
func (o *GetAdditionalServicesParams) WithLogin(login string) *GetAdditionalServicesParams {
	o.SetLogin(login)
	return o
}

// SetLogin adds the login to the get additional services params
func (o *GetAdditionalServicesParams) SetLogin(login string) {
	o.Login = login
}

// WithPwd adds the pwd to the get additional services params
func (o *GetAdditionalServicesParams) WithPwd(pwd string) *GetAdditionalServicesParams {
	o.SetPwd(pwd)
	return o
}

// SetPwd adds the pwd to the get additional services params
func (o *GetAdditionalServicesParams) SetPwd(pwd string) {
	o.Pwd = pwd
}

// WriteToRequest writes these params to a swagger request
func (o *GetAdditionalServicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param login
	qrLogin := o.Login
	qLogin := qrLogin
	if qLogin != "" {
		if err := r.SetQueryParam("login", qLogin); err != nil {
			return err
		}
	}

	// query param pwd
	qrPwd := o.Pwd
	qPwd := qrPwd
	if qPwd != "" {
		if err := r.SetQueryParam("pwd", qPwd); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
