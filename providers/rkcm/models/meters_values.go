// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// MetersValues meters values
// swagger:model MetersValues
type MetersValues struct {

	// meter
	Meter []*MetersValuesMeterItems0 `json:"Meter" xml:"Meter"`
}

// Validate validates this meters values
func (m *MetersValues) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetersValues) validateMeter(formats strfmt.Registry) error {

	if swag.IsZero(m.Meter) { // not required
		return nil
	}

	for i := 0; i < len(m.Meter); i++ {
		if swag.IsZero(m.Meter[i]) { // not required
			continue
		}

		if m.Meter[i] != nil {
			if err := m.Meter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Meter" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetersValues) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetersValues) UnmarshalBinary(b []byte) error {
	var res MetersValues
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetersValuesMeterItems0 meters values meter items0
// swagger:model MetersValuesMeterItems0
type MetersValuesMeterItems0 struct {

	// auto value getting only
	AutoValueGettingOnly int64 `json:"AutoValueGettingOnly,omitempty" xml:"AutoValueGettingOnly,attr"`

	// factory number
	FactoryNumber int64 `json:"FactoryNumber,omitempty" xml:"FactoryNumber,attr"`

	// ident
	Ident string `json:"Ident,omitempty" xml:"Ident,attr"`

	// last checkup date
	LastCheckupDate string `json:"LastCheckupDate,omitempty" xml:"LastCheckupDate,attr"`

	// meter type ID
	MeterTypeID int64 `json:"MeterTypeID,omitempty" xml:"MeterTypeID,attr"`

	// meter unique num
	MeterUniqueNum int64 `json:"MeterUniqueNum,omitempty" xml:"MeterUniqueNum,attr"`

	// name
	Name string `json:"Name,omitempty" xml:"Name,attr"`

	// tariff number
	TariffNumber int64 `json:"TariffNumber,omitempty" xml:"TariffNumber,attr"`

	// units
	Units string `json:"Units,omitempty" xml:"Units,attr"`

	// value
	Value []*MetersValuesMeterItems0ValueItems0 `json:"Value" xml:"MeterValue"`
}

// Validate validates this meters values meter items0
func (m *MetersValuesMeterItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetersValuesMeterItems0) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(m.Value) { // not required
		return nil
	}

	for i := 0; i < len(m.Value); i++ {
		if swag.IsZero(m.Value[i]) { // not required
			continue
		}

		if m.Value[i] != nil {
			if err := m.Value[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Value" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetersValuesMeterItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetersValuesMeterItems0) UnmarshalBinary(b []byte) error {
	var res MetersValuesMeterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetersValuesMeterItems0ValueItems0 meters values meter items0 value items0
// swagger:model MetersValuesMeterItems0ValueItems0
type MetersValuesMeterItems0ValueItems0 struct {

	// is sended
	IsSended string `json:"IsSended,omitempty" xml:"IsSended,attr"`

	// period date
	PeriodDate string `json:"PeriodDate,omitempty" xml:"PeriodDate,attr"`

	// send error
	SendError string `json:"SendError,omitempty" xml:"SendError,attr"`

	// send error text
	SendErrorText string `json:"SendErrorText,omitempty" xml:"SendErrorText,attr"`

	// value
	Value string `json:"Value,omitempty" xml:"Value,attr"`

	// value t2
	ValueT2 string `json:"ValueT2,omitempty" xml:"ValueT2,attr"`

	// value t3
	ValueT3 string `json:"ValueT3,omitempty" xml:"ValueT3,attr"`
}

// Validate validates this meters values meter items0 value items0
func (m *MetersValuesMeterItems0ValueItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MetersValuesMeterItems0ValueItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetersValuesMeterItems0ValueItems0) UnmarshalBinary(b []byte) error {
	var res MetersValuesMeterItems0ValueItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
