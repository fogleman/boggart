// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kihamo/boggart/providers/hikvision/models"
)

// NewSetImageFlipParams creates a new SetImageFlipParams object
// with the default values initialized.
func NewSetImageFlipParams() *SetImageFlipParams {
	var ()
	return &SetImageFlipParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetImageFlipParamsWithTimeout creates a new SetImageFlipParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetImageFlipParamsWithTimeout(timeout time.Duration) *SetImageFlipParams {
	var ()
	return &SetImageFlipParams{

		timeout: timeout,
	}
}

// NewSetImageFlipParamsWithContext creates a new SetImageFlipParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetImageFlipParamsWithContext(ctx context.Context) *SetImageFlipParams {
	var ()
	return &SetImageFlipParams{

		Context: ctx,
	}
}

// NewSetImageFlipParamsWithHTTPClient creates a new SetImageFlipParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetImageFlipParamsWithHTTPClient(client *http.Client) *SetImageFlipParams {
	var ()
	return &SetImageFlipParams{
		HTTPClient: client,
	}
}

/*SetImageFlipParams contains all the parameters to send to the API endpoint
for the set image flip operation typically these are written to a http.Request
*/
type SetImageFlipParams struct {

	/*ImageFlip*/
	ImageFlip *models.ImageFlip
	/*Channel
	  Channel ID

	*/
	Channel uint64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set image flip params
func (o *SetImageFlipParams) WithTimeout(timeout time.Duration) *SetImageFlipParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set image flip params
func (o *SetImageFlipParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set image flip params
func (o *SetImageFlipParams) WithContext(ctx context.Context) *SetImageFlipParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set image flip params
func (o *SetImageFlipParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set image flip params
func (o *SetImageFlipParams) WithHTTPClient(client *http.Client) *SetImageFlipParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set image flip params
func (o *SetImageFlipParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithImageFlip adds the imageFlip to the set image flip params
func (o *SetImageFlipParams) WithImageFlip(imageFlip *models.ImageFlip) *SetImageFlipParams {
	o.SetImageFlip(imageFlip)
	return o
}

// SetImageFlip adds the imageFlip to the set image flip params
func (o *SetImageFlipParams) SetImageFlip(imageFlip *models.ImageFlip) {
	o.ImageFlip = imageFlip
}

// WithChannel adds the channel to the set image flip params
func (o *SetImageFlipParams) WithChannel(channel uint64) *SetImageFlipParams {
	o.SetChannel(channel)
	return o
}

// SetChannel adds the channel to the set image flip params
func (o *SetImageFlipParams) SetChannel(channel uint64) {
	o.Channel = channel
}

// WriteToRequest writes these params to a swagger request
func (o *SetImageFlipParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ImageFlip != nil {
		if err := r.SetBodyParam(o.ImageFlip); err != nil {
			return err
		}
	}

	// path param channel
	if err := r.SetPathParam("channel", swag.FormatUint64(o.Channel)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
