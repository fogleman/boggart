// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new event API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for event API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetNotificationAlertStream its is used to get the event notification data stream through h t t p server push
*/
func (a *Client) GetNotificationAlertStream(params *GetNotificationAlertStreamParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer) (*GetNotificationAlertStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificationAlertStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNotificationAlertStream",
		Method:             "GET",
		PathPattern:        "/Event/notification/alertStream",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNotificationAlertStreamReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNotificationAlertStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNotificationAlertStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNotificationHttpHost its is used to get the configuration of a particular e mail
*/
func (a *Client) GetNotificationHttpHost(params *GetNotificationHttpHostParams, authInfo runtime.ClientAuthInfoWriter) (*GetNotificationHttpHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificationHttpHostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNotificationHttpHost",
		Method:             "GET",
		PathPattern:        "/Event/notification/httpHosts/{httpHost}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNotificationHttpHostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNotificationHttpHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNotificationHttpHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetNotificationHttpHost its is used to get the configuration of a particular e mail
*/
func (a *Client) SetNotificationHttpHost(params *SetNotificationHttpHostParams, authInfo runtime.ClientAuthInfoWriter) (*SetNotificationHttpHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetNotificationHttpHostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setNotificationHttpHost",
		Method:             "PUT",
		PathPattern:        "/Event/notification/httpHosts/{httpHost}",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetNotificationHttpHostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetNotificationHttpHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setNotificationHttpHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
