// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageFlip image flip
//
// swagger:model ImageFlip
type ImageFlip struct {

	// enabled
	Enabled bool `json:"enabled" xml:"enabled"`

	// style
	// Enum: [LEFTRIGHT UPDOWN CENTER AUTO]
	Style string `json:"style,omitempty" xml:"ImageFlipStyle,omitempty"`
}

// Validate validates this image flip
func (m *ImageFlip) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStyle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var imageFlipTypeStylePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LEFTRIGHT","UPDOWN","CENTER","AUTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageFlipTypeStylePropEnum = append(imageFlipTypeStylePropEnum, v)
	}
}

const (

	// ImageFlipStyleLEFTRIGHT captures enum value "LEFTRIGHT"
	ImageFlipStyleLEFTRIGHT string = "LEFTRIGHT"

	// ImageFlipStyleUPDOWN captures enum value "UPDOWN"
	ImageFlipStyleUPDOWN string = "UPDOWN"

	// ImageFlipStyleCENTER captures enum value "CENTER"
	ImageFlipStyleCENTER string = "CENTER"

	// ImageFlipStyleAUTO captures enum value "AUTO"
	ImageFlipStyleAUTO string = "AUTO"
)

// prop value enum
func (m *ImageFlip) validateStyleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, imageFlipTypeStylePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImageFlip) validateStyle(formats strfmt.Registry) error {
	if swag.IsZero(m.Style) { // not required
		return nil
	}

	// value enum
	if err := m.validateStyleEnum("style", "body", m.Style); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this image flip based on context it is used
func (m *ImageFlip) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageFlip) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageFlip) UnmarshalBinary(b []byte) error {
	var res ImageFlip
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
