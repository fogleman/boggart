// Code generated by go-swagger; DO NOT EDIT.

package annotation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kihamo/boggart/providers/grafana/models"
)

// CreateAnnotationReader is a Reader for the CreateAnnotation structure.
type CreateAnnotationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateAnnotationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateAnnotationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateAnnotationOK creates a CreateAnnotationOK with default headers values
func NewCreateAnnotationOK() *CreateAnnotationOK {
	return &CreateAnnotationOK{}
}

/*CreateAnnotationOK handles this case with default header values.

Successful operation
*/
type CreateAnnotationOK struct {
	Payload *models.Message
}

func (o *CreateAnnotationOK) Error() string {
	return fmt.Sprintf("[POST /annotations][%d] createAnnotationOK  %+v", 200, o.Payload)
}

func (o *CreateAnnotationOK) GetPayload() *models.Message {
	return o.Payload
}

func (o *CreateAnnotationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Message)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateAnnotationBody create annotation body
swagger:model CreateAnnotationBody
*/
type CreateAnnotationBody struct {

	// dashboard Id
	DashboardID int64 `json:"dashboardId,omitempty"`

	// panel Id
	PanelID int64 `json:"panelId,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// text
	Text string `json:"text,omitempty"`

	// time
	Time int64 `json:"time,omitempty"`

	// time end
	TimeEnd int64 `json:"timeEnd,omitempty"`
}

// Validate validates this create annotation body
func (o *CreateAnnotationBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateAnnotationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateAnnotationBody) UnmarshalBinary(b []byte) error {
	var res CreateAnnotationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
