// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	extend "github.com/kihamo/boggart/protocols/swagger"
)

// Pass pass
//
// swagger:model Pass
type Pass struct {

	// address
	Address *PassAddress `json:"address,omitempty"`

	// closed at
	// Format: date-time
	ClosedAt *extend.DateTime `json:"closedAt,omitempty"`

	// comment
	Comment string `json:"comment,omitempty"`

	// created at
	// Format: date-time
	CreatedAt *extend.DateTime `json:"createdAt,omitempty"`

	// duration type
	DurationType uint64 `json:"durationType,omitempty"`

	// expires at
	// Format: date-time
	ExpiresAt *extend.DateTime `json:"expiresAt,omitempty"`

	// from confidant
	FromConfidant bool `json:"fromConfidant,omitempty"`

	// guest data
	GuestData *PassGuestData `json:"guestData,omitempty"`

	// guest type
	GuestType uint64 `json:"guestType,omitempty"`

	// id
	ID uint64 `json:"id,omitempty"`

	// invite link
	InviteLink string `json:"inviteLink,omitempty"`

	// object
	Object *PassObject `json:"object,omitempty"`

	// starts at
	// Format: date-time
	StartsAt *extend.DateTime `json:"startsAt,omitempty"`

	// status
	Status int64 `json:"status,omitempty"`

	// tenant
	Tenant *PassTenant `json:"tenant,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt *extend.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this pass
func (m *Pass) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClosedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartsAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pass) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *Pass) validateClosedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ClosedAt) { // not required
		return nil
	}

	if m.ClosedAt != nil {
		if err := m.ClosedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closedAt")
			}
			return err
		}
	}

	return nil
}

func (m *Pass) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if m.CreatedAt != nil {
		if err := m.CreatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdAt")
			}
			return err
		}
	}

	return nil
}

func (m *Pass) validateExpiresAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiresAt) { // not required
		return nil
	}

	if m.ExpiresAt != nil {
		if err := m.ExpiresAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expiresAt")
			}
			return err
		}
	}

	return nil
}

func (m *Pass) validateGuestData(formats strfmt.Registry) error {

	if swag.IsZero(m.GuestData) { // not required
		return nil
	}

	if m.GuestData != nil {
		if err := m.GuestData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestData")
			}
			return err
		}
	}

	return nil
}

func (m *Pass) validateObject(formats strfmt.Registry) error {

	if swag.IsZero(m.Object) { // not required
		return nil
	}

	if m.Object != nil {
		if err := m.Object.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object")
			}
			return err
		}
	}

	return nil
}

func (m *Pass) validateStartsAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartsAt) { // not required
		return nil
	}

	if m.StartsAt != nil {
		if err := m.StartsAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startsAt")
			}
			return err
		}
	}

	return nil
}

func (m *Pass) validateTenant(formats strfmt.Registry) error {

	if swag.IsZero(m.Tenant) { // not required
		return nil
	}

	if m.Tenant != nil {
		if err := m.Tenant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tenant")
			}
			return err
		}
	}

	return nil
}

func (m *Pass) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if m.UpdatedAt != nil {
		if err := m.UpdatedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedAt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pass) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pass) UnmarshalBinary(b []byte) error {
	var res Pass
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PassAddress pass address
//
// swagger:model PassAddress
type PassAddress struct {

	// id
	ID uint64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// object Id
	ObjectID uint64 `json:"objectId,omitempty"`
}

// Validate validates this pass address
func (m *PassAddress) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PassAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PassAddress) UnmarshalBinary(b []byte) error {
	var res PassAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PassGuestData pass guest data
//
// swagger:model PassGuestData
type PassGuestData struct {

	// model
	Model *PassGuestDataModel `json:"model,omitempty"`

	// plate number
	PlateNumber string `json:"plateNumber,omitempty"`

	// type plate number
	TypePlateNumber string `json:"typePlateNumber,omitempty"`

	// vehicle type
	VehicleType uint64 `json:"vehicleType,omitempty"`

	// vehicle type name
	VehicleTypeName string `json:"vehicleTypeName,omitempty"`

	// vehicle type object
	VehicleTypeObject *PassGuestDataVehicleTypeObject `json:"vehicleTypeObject,omitempty"`
}

// Validate validates this pass guest data
func (m *PassGuestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVehicleTypeObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PassGuestData) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if m.Model != nil {
		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestData" + "." + "model")
			}
			return err
		}
	}

	return nil
}

func (m *PassGuestData) validateVehicleTypeObject(formats strfmt.Registry) error {

	if swag.IsZero(m.VehicleTypeObject) { // not required
		return nil
	}

	if m.VehicleTypeObject != nil {
		if err := m.VehicleTypeObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestData" + "." + "vehicleTypeObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PassGuestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PassGuestData) UnmarshalBinary(b []byte) error {
	var res PassGuestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PassGuestDataModel pass guest data model
//
// swagger:model PassGuestDataModel
type PassGuestDataModel struct {

	// id
	ID uint64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// name translate
	NameTranslate string `json:"nameTranslate,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this pass guest data model
func (m *PassGuestDataModel) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PassGuestDataModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PassGuestDataModel) UnmarshalBinary(b []byte) error {
	var res PassGuestDataModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PassGuestDataVehicleTypeObject pass guest data vehicle type object
//
// swagger:model PassGuestDataVehicleTypeObject
type PassGuestDataVehicleTypeObject struct {

	// id
	ID uint64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// object
	Object *PassGuestDataVehicleTypeObjectObject `json:"object,omitempty"`

	// sort
	Sort string `json:"sort,omitempty"`
}

// Validate validates this pass guest data vehicle type object
func (m *PassGuestDataVehicleTypeObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PassGuestDataVehicleTypeObject) validateObject(formats strfmt.Registry) error {

	if swag.IsZero(m.Object) { // not required
		return nil
	}

	if m.Object != nil {
		if err := m.Object.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestData" + "." + "vehicleTypeObject" + "." + "object")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PassGuestDataVehicleTypeObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PassGuestDataVehicleTypeObject) UnmarshalBinary(b []byte) error {
	var res PassGuestDataVehicleTypeObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PassGuestDataVehicleTypeObjectObject pass guest data vehicle type object object
//
// swagger:model PassGuestDataVehicleTypeObjectObject
type PassGuestDataVehicleTypeObjectObject struct {

	// available options
	AvailableOptions []*PassGuestDataVehicleTypeObjectObjectAvailableOptionsItems0 `json:"availableOptions"`

	// id
	ID uint64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// options
	Options []*PassGuestDataVehicleTypeObjectObjectOptionsItems0 `json:"options"`

	// phone
	Phone string `json:"phone,omitempty"`
}

// Validate validates this pass guest data vehicle type object object
func (m *PassGuestDataVehicleTypeObjectObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PassGuestDataVehicleTypeObjectObject) validateAvailableOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailableOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailableOptions); i++ {
		if swag.IsZero(m.AvailableOptions[i]) { // not required
			continue
		}

		if m.AvailableOptions[i] != nil {
			if err := m.AvailableOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("guestData" + "." + "vehicleTypeObject" + "." + "object" + "." + "availableOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PassGuestDataVehicleTypeObjectObject) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	for i := 0; i < len(m.Options); i++ {
		if swag.IsZero(m.Options[i]) { // not required
			continue
		}

		if m.Options[i] != nil {
			if err := m.Options[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("guestData" + "." + "vehicleTypeObject" + "." + "object" + "." + "options" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PassGuestDataVehicleTypeObjectObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PassGuestDataVehicleTypeObjectObject) UnmarshalBinary(b []byte) error {
	var res PassGuestDataVehicleTypeObjectObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PassGuestDataVehicleTypeObjectObjectAvailableOptionsItems0 pass guest data vehicle type object object available options items0
//
// swagger:model PassGuestDataVehicleTypeObjectObjectAvailableOptionsItems0
type PassGuestDataVehicleTypeObjectObjectAvailableOptionsItems0 struct {

	// guest type
	GuestType string `json:"guestType,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// id
	ID uint64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this pass guest data vehicle type object object available options items0
func (m *PassGuestDataVehicleTypeObjectObjectAvailableOptionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PassGuestDataVehicleTypeObjectObjectAvailableOptionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PassGuestDataVehicleTypeObjectObjectAvailableOptionsItems0) UnmarshalBinary(b []byte) error {
	var res PassGuestDataVehicleTypeObjectObjectAvailableOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PassGuestDataVehicleTypeObjectObjectOptionsItems0 pass guest data vehicle type object object options items0
//
// swagger:model PassGuestDataVehicleTypeObjectObjectOptionsItems0
type PassGuestDataVehicleTypeObjectObjectOptionsItems0 struct {

	// guest type
	GuestType []uint64 `json:"guestType"`

	// icon
	Icon string `json:"icon,omitempty"`

	// id
	ID uint64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this pass guest data vehicle type object object options items0
func (m *PassGuestDataVehicleTypeObjectObjectOptionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PassGuestDataVehicleTypeObjectObjectOptionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PassGuestDataVehicleTypeObjectObjectOptionsItems0) UnmarshalBinary(b []byte) error {
	var res PassGuestDataVehicleTypeObjectObjectOptionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PassObject pass object
//
// swagger:model PassObject
type PassObject struct {

	// id
	ID uint64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// vehicle types
	VehicleTypes []*PassObjectVehicleTypesItems0 `json:"vehicleTypes"`
}

// Validate validates this pass object
func (m *PassObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVehicleTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PassObject) validateVehicleTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.VehicleTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.VehicleTypes); i++ {
		if swag.IsZero(m.VehicleTypes[i]) { // not required
			continue
		}

		if m.VehicleTypes[i] != nil {
			if err := m.VehicleTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("object" + "." + "vehicleTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PassObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PassObject) UnmarshalBinary(b []byte) error {
	var res PassObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PassObjectVehicleTypesItems0 pass object vehicle types items0
//
// swagger:model PassObjectVehicleTypesItems0
type PassObjectVehicleTypesItems0 struct {

	// id
	ID uint64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// sort
	Sort string `json:"sort,omitempty"`
}

// Validate validates this pass object vehicle types items0
func (m *PassObjectVehicleTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PassObjectVehicleTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PassObjectVehicleTypesItems0) UnmarshalBinary(b []byte) error {
	var res PassObjectVehicleTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PassTenant pass tenant
//
// swagger:model PassTenant
type PassTenant struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`
}

// Validate validates this pass tenant
func (m *PassTenant) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PassTenant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PassTenant) UnmarshalBinary(b []byte) error {
	var res PassTenant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
