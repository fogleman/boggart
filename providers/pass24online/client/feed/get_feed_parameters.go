// Code generated by go-swagger; DO NOT EDIT.

package feed

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFeedParams creates a new GetFeedParams object
// with the default values initialized.
func NewGetFeedParams() *GetFeedParams {
	var ()
	return &GetFeedParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFeedParamsWithTimeout creates a new GetFeedParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFeedParamsWithTimeout(timeout time.Duration) *GetFeedParams {
	var ()
	return &GetFeedParams{

		timeout: timeout,
	}
}

// NewGetFeedParamsWithContext creates a new GetFeedParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFeedParamsWithContext(ctx context.Context) *GetFeedParams {
	var ()
	return &GetFeedParams{

		Context: ctx,
	}
}

// NewGetFeedParamsWithHTTPClient creates a new GetFeedParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFeedParamsWithHTTPClient(client *http.Client) *GetFeedParams {
	var ()
	return &GetFeedParams{
		HTTPClient: client,
	}
}

/*GetFeedParams contains all the parameters to send to the API endpoint
for the get feed operation typically these are written to a http.Request
*/
type GetFeedParams struct {

	/*FilterFromConfidant
	  Filter by confidant

	*/
	FilterFromConfidant *uint64
	/*FilterType
	  Filter by type

	*/
	FilterType *uint64
	/*Page
	  Page number

	*/
	Page *uint64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get feed params
func (o *GetFeedParams) WithTimeout(timeout time.Duration) *GetFeedParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get feed params
func (o *GetFeedParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get feed params
func (o *GetFeedParams) WithContext(ctx context.Context) *GetFeedParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get feed params
func (o *GetFeedParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get feed params
func (o *GetFeedParams) WithHTTPClient(client *http.Client) *GetFeedParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get feed params
func (o *GetFeedParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterFromConfidant adds the filterFromConfidant to the get feed params
func (o *GetFeedParams) WithFilterFromConfidant(filterFromConfidant *uint64) *GetFeedParams {
	o.SetFilterFromConfidant(filterFromConfidant)
	return o
}

// SetFilterFromConfidant adds the filterFromConfidant to the get feed params
func (o *GetFeedParams) SetFilterFromConfidant(filterFromConfidant *uint64) {
	o.FilterFromConfidant = filterFromConfidant
}

// WithFilterType adds the filterType to the get feed params
func (o *GetFeedParams) WithFilterType(filterType *uint64) *GetFeedParams {
	o.SetFilterType(filterType)
	return o
}

// SetFilterType adds the filterType to the get feed params
func (o *GetFeedParams) SetFilterType(filterType *uint64) {
	o.FilterType = filterType
}

// WithPage adds the page to the get feed params
func (o *GetFeedParams) WithPage(page *uint64) *GetFeedParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get feed params
func (o *GetFeedParams) SetPage(page *uint64) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *GetFeedParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterFromConfidant != nil {

		// query param filter[fromConfidant]
		var qrFilterFromConfidant uint64
		if o.FilterFromConfidant != nil {
			qrFilterFromConfidant = *o.FilterFromConfidant
		}
		qFilterFromConfidant := swag.FormatUint64(qrFilterFromConfidant)
		if qFilterFromConfidant != "" {
			if err := r.SetQueryParam("filter[fromConfidant]", qFilterFromConfidant); err != nil {
				return err
			}
		}

	}

	if o.FilterType != nil {

		// query param filter[type]
		var qrFilterType uint64
		if o.FilterType != nil {
			qrFilterType = *o.FilterType
		}
		qFilterType := swag.FormatUint64(qrFilterType)
		if qFilterType != "" {
			if err := r.SetQueryParam("filter[type]", qFilterType); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage uint64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatUint64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
