// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	static "github.com/kihamo/boggart/providers/openweathermap/static/models"
)

// Current current
//
// swagger:model Current
type Current struct {

	// base
	Base string `json:"base,omitempty"`

	// clouds
	Clouds *Clouds `json:"clouds,omitempty"`

	// cod
	Cod uint64 `json:"cod,omitempty"`

	// coord
	Coord *Coord `json:"coord,omitempty"`

	// dt
	// Format: date-time
	Dt static.DateTime `json:"dt,omitempty"`

	// id
	ID uint64 `json:"id,omitempty"`

	// main
	Main *Main `json:"main,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rain
	Rain *Rain `json:"rain,omitempty"`

	// snow
	Snow *Snow `json:"snow,omitempty"`

	// sys
	Sys *CurrentSys `json:"sys,omitempty"`

	// timezone
	Timezone uint64 `json:"timezone,omitempty"`

	// weather
	Weather []*Weather `json:"weather"`

	// wind
	Wind *Wind `json:"wind,omitempty"`
}

// Validate validates this current
func (m *Current) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeather(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Current) validateClouds(formats strfmt.Registry) error {

	if swag.IsZero(m.Clouds) { // not required
		return nil
	}

	if m.Clouds != nil {
		if err := m.Clouds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clouds")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateCoord(formats strfmt.Registry) error {

	if swag.IsZero(m.Coord) { // not required
		return nil
	}

	if m.Coord != nil {
		if err := m.Coord.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coord")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateDt(formats strfmt.Registry) error {

	if swag.IsZero(m.Dt) { // not required
		return nil
	}

	if err := m.Dt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dt")
		}
		return err
	}

	return nil
}

func (m *Current) validateMain(formats strfmt.Registry) error {

	if swag.IsZero(m.Main) { // not required
		return nil
	}

	if m.Main != nil {
		if err := m.Main.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("main")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateRain(formats strfmt.Registry) error {

	if swag.IsZero(m.Rain) { // not required
		return nil
	}

	if m.Rain != nil {
		if err := m.Rain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rain")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateSnow(formats strfmt.Registry) error {

	if swag.IsZero(m.Snow) { // not required
		return nil
	}

	if m.Snow != nil {
		if err := m.Snow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snow")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateSys(formats strfmt.Registry) error {

	if swag.IsZero(m.Sys) { // not required
		return nil
	}

	if m.Sys != nil {
		if err := m.Sys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sys")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateWeather(formats strfmt.Registry) error {

	if swag.IsZero(m.Weather) { // not required
		return nil
	}

	for i := 0; i < len(m.Weather); i++ {
		if swag.IsZero(m.Weather[i]) { // not required
			continue
		}

		if m.Weather[i] != nil {
			if err := m.Weather[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("weather" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Current) validateWind(formats strfmt.Registry) error {

	if swag.IsZero(m.Wind) { // not required
		return nil
	}

	if m.Wind != nil {
		if err := m.Wind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wind")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Current) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Current) UnmarshalBinary(b []byte) error {
	var res Current
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CurrentSys current sys
//
// swagger:model CurrentSys
type CurrentSys struct {

	// country
	Country string `json:"country,omitempty"`

	// id
	ID uint64 `json:"id,omitempty"`

	// message
	Message float64 `json:"message,omitempty"`

	// sunrise
	// Format: date-time
	Sunrise static.DateTime `json:"sunrise,omitempty"`

	// sunset
	// Format: date-time
	Sunset static.DateTime `json:"sunset,omitempty"`
}

// Validate validates this current sys
func (m *CurrentSys) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSunrise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSunset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CurrentSys) validateSunrise(formats strfmt.Registry) error {

	if swag.IsZero(m.Sunrise) { // not required
		return nil
	}

	if err := m.Sunrise.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sys" + "." + "sunrise")
		}
		return err
	}

	return nil
}

func (m *CurrentSys) validateSunset(formats strfmt.Registry) error {

	if swag.IsZero(m.Sunset) { // not required
		return nil
	}

	if err := m.Sunset.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sys" + "." + "sunset")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CurrentSys) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentSys) UnmarshalBinary(b []byte) error {
	var res CurrentSys
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
