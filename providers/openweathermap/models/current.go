// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Current current
//
// swagger:model Current
type Current struct {

	// base
	Base string `json:"base,omitempty"`

	// clouds
	Clouds *CurrentClouds `json:"clouds,omitempty"`

	// cod
	Cod uint64 `json:"cod,omitempty"`

	// coord
	Coord *CurrentCoord `json:"coord,omitempty"`

	// dt
	Dt uint64 `json:"dt,omitempty"`

	// id
	ID uint64 `json:"id,omitempty"`

	// main
	Main *CurrentMain `json:"main,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rain
	Rain *CurrentRain `json:"rain,omitempty"`

	// snow
	Snow *CurrentSnow `json:"snow,omitempty"`

	// sys
	Sys *CurrentSys `json:"sys,omitempty"`

	// timezone
	Timezone uint64 `json:"timezone,omitempty"`

	// weather
	Weather []*CurrentWeatherItems0 `json:"weather"`

	// wind
	Wind *CurrentWind `json:"wind,omitempty"`
}

// Validate validates this current
func (m *Current) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClouds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeather(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Current) validateClouds(formats strfmt.Registry) error {

	if swag.IsZero(m.Clouds) { // not required
		return nil
	}

	if m.Clouds != nil {
		if err := m.Clouds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clouds")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateCoord(formats strfmt.Registry) error {

	if swag.IsZero(m.Coord) { // not required
		return nil
	}

	if m.Coord != nil {
		if err := m.Coord.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coord")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateMain(formats strfmt.Registry) error {

	if swag.IsZero(m.Main) { // not required
		return nil
	}

	if m.Main != nil {
		if err := m.Main.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("main")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateRain(formats strfmt.Registry) error {

	if swag.IsZero(m.Rain) { // not required
		return nil
	}

	if m.Rain != nil {
		if err := m.Rain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rain")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateSnow(formats strfmt.Registry) error {

	if swag.IsZero(m.Snow) { // not required
		return nil
	}

	if m.Snow != nil {
		if err := m.Snow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snow")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateSys(formats strfmt.Registry) error {

	if swag.IsZero(m.Sys) { // not required
		return nil
	}

	if m.Sys != nil {
		if err := m.Sys.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sys")
			}
			return err
		}
	}

	return nil
}

func (m *Current) validateWeather(formats strfmt.Registry) error {

	if swag.IsZero(m.Weather) { // not required
		return nil
	}

	for i := 0; i < len(m.Weather); i++ {
		if swag.IsZero(m.Weather[i]) { // not required
			continue
		}

		if m.Weather[i] != nil {
			if err := m.Weather[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("weather" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Current) validateWind(formats strfmt.Registry) error {

	if swag.IsZero(m.Wind) { // not required
		return nil
	}

	if m.Wind != nil {
		if err := m.Wind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wind")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Current) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Current) UnmarshalBinary(b []byte) error {
	var res Current
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CurrentClouds current clouds
//
// swagger:model CurrentClouds
type CurrentClouds struct {

	// all
	All uint64 `json:"all,omitempty"`
}

// Validate validates this current clouds
func (m *CurrentClouds) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrentClouds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentClouds) UnmarshalBinary(b []byte) error {
	var res CurrentClouds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CurrentCoord current coord
//
// swagger:model CurrentCoord
type CurrentCoord struct {

	// lat
	Lat float64 `json:"lat,omitempty"`

	// lon
	Lon float64 `json:"lon,omitempty"`
}

// Validate validates this current coord
func (m *CurrentCoord) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrentCoord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentCoord) UnmarshalBinary(b []byte) error {
	var res CurrentCoord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CurrentMain current main
//
// swagger:model CurrentMain
type CurrentMain struct {

	// feels like
	FeelsLike float64 `json:"feels_like,omitempty"`

	// grnd level
	GrndLevel float64 `json:"grnd_level,omitempty"`

	// humidity
	Humidity uint64 `json:"humidity,omitempty"`

	// pressure
	Pressure float64 `json:"pressure,omitempty"`

	// sea level
	SeaLevel float64 `json:"sea_level,omitempty"`

	// temp
	Temp float64 `json:"temp,omitempty"`

	// temp max
	TempMax float64 `json:"temp_max,omitempty"`

	// temp min
	TempMin float64 `json:"temp_min,omitempty"`
}

// Validate validates this current main
func (m *CurrentMain) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrentMain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentMain) UnmarshalBinary(b []byte) error {
	var res CurrentMain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CurrentRain current rain
//
// swagger:model CurrentRain
type CurrentRain struct {

	// 1h
	Nr1h float64 `json:"1h,omitempty"`

	// 3h
	Nr3h float64 `json:"3h,omitempty"`
}

// Validate validates this current rain
func (m *CurrentRain) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrentRain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentRain) UnmarshalBinary(b []byte) error {
	var res CurrentRain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CurrentSnow current snow
//
// swagger:model CurrentSnow
type CurrentSnow struct {

	// 1h
	Nr1h float64 `json:"1h,omitempty"`

	// 3h
	Nr3h float64 `json:"3h,omitempty"`
}

// Validate validates this current snow
func (m *CurrentSnow) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrentSnow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentSnow) UnmarshalBinary(b []byte) error {
	var res CurrentSnow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CurrentSys current sys
//
// swagger:model CurrentSys
type CurrentSys struct {

	// country
	Country string `json:"country,omitempty"`

	// id
	ID uint64 `json:"id,omitempty"`

	// message
	Message float64 `json:"message,omitempty"`

	// sunrise
	Sunrise uint64 `json:"sunrise,omitempty"`

	// sunset
	Sunset uint64 `json:"sunset,omitempty"`
}

// Validate validates this current sys
func (m *CurrentSys) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrentSys) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentSys) UnmarshalBinary(b []byte) error {
	var res CurrentSys
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CurrentWeatherItems0 current weather items0
//
// swagger:model CurrentWeatherItems0
type CurrentWeatherItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// id
	ID uint64 `json:"id,omitempty"`

	// main
	Main string `json:"main,omitempty"`
}

// Validate validates this current weather items0
func (m *CurrentWeatherItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrentWeatherItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentWeatherItems0) UnmarshalBinary(b []byte) error {
	var res CurrentWeatherItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CurrentWind current wind
//
// swagger:model CurrentWind
type CurrentWind struct {

	// deg
	Deg uint64 `json:"deg,omitempty"`

	// gust
	Gust float64 `json:"gust,omitempty"`

	// speed
	Speed float64 `json:"speed,omitempty"`
}

// Validate validates this current wind
func (m *CurrentWind) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrentWind) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentWind) UnmarshalBinary(b []byte) error {
	var res CurrentWind
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
