// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OneCallTimeMachine one call time machine
//
// swagger:model OneCallTimeMachine
type OneCallTimeMachine struct {

	// current
	Current *OneCallTimeMachineCurrent `json:"current,omitempty"`

	// hourly
	Hourly []*OneCallTimeMachineHourlyItems0 `json:"hourly"`

	// lat
	Lat float64 `json:"lat,omitempty"`

	// lon
	Lon float64 `json:"lon,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`

	// timezone offset
	TimezoneOffset uint64 `json:"timezone_offset,omitempty"`
}

// Validate validates this one call time machine
func (m *OneCallTimeMachine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHourly(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OneCallTimeMachine) validateCurrent(formats strfmt.Registry) error {

	if swag.IsZero(m.Current) { // not required
		return nil
	}

	if m.Current != nil {
		if err := m.Current.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current")
			}
			return err
		}
	}

	return nil
}

func (m *OneCallTimeMachine) validateHourly(formats strfmt.Registry) error {

	if swag.IsZero(m.Hourly) { // not required
		return nil
	}

	for i := 0; i < len(m.Hourly); i++ {
		if swag.IsZero(m.Hourly[i]) { // not required
			continue
		}

		if m.Hourly[i] != nil {
			if err := m.Hourly[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hourly" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OneCallTimeMachine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OneCallTimeMachine) UnmarshalBinary(b []byte) error {
	var res OneCallTimeMachine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OneCallTimeMachineCurrent one call time machine current
//
// swagger:model OneCallTimeMachineCurrent
type OneCallTimeMachineCurrent struct {

	// clouds
	Clouds uint64 `json:"clouds,omitempty"`

	// dew point
	DewPoint float64 `json:"dew_point,omitempty"`

	// dt
	Dt uint64 `json:"dt,omitempty"`

	// feels like
	FeelsLike float64 `json:"feels_like,omitempty"`

	// humidity
	Humidity uint64 `json:"humidity,omitempty"`

	// pressure
	Pressure float64 `json:"pressure,omitempty"`

	// rain
	Rain float64 `json:"rain,omitempty"`

	// snow
	Snow float64 `json:"snow,omitempty"`

	// sunrise
	Sunrise uint64 `json:"sunrise,omitempty"`

	// sunset
	Sunset uint64 `json:"sunset,omitempty"`

	// temp
	Temp float64 `json:"temp,omitempty"`

	// uvi
	Uvi float64 `json:"uvi,omitempty"`

	// visibility
	Visibility uint64 `json:"visibility,omitempty"`

	// weather
	Weather []*Weather `json:"weather"`

	// wind deg
	WindDeg uint64 `json:"wind_deg,omitempty"`

	// wind gust
	WindGust float64 `json:"wind_gust,omitempty"`

	// wind speed
	WindSpeed float64 `json:"wind_speed,omitempty"`
}

// Validate validates this one call time machine current
func (m *OneCallTimeMachineCurrent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWeather(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OneCallTimeMachineCurrent) validateWeather(formats strfmt.Registry) error {

	if swag.IsZero(m.Weather) { // not required
		return nil
	}

	for i := 0; i < len(m.Weather); i++ {
		if swag.IsZero(m.Weather[i]) { // not required
			continue
		}

		if m.Weather[i] != nil {
			if err := m.Weather[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("current" + "." + "weather" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OneCallTimeMachineCurrent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OneCallTimeMachineCurrent) UnmarshalBinary(b []byte) error {
	var res OneCallTimeMachineCurrent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OneCallTimeMachineHourlyItems0 one call time machine hourly items0
//
// swagger:model OneCallTimeMachineHourlyItems0
type OneCallTimeMachineHourlyItems0 struct {

	// clouds
	Clouds uint64 `json:"clouds,omitempty"`

	// dew point
	DewPoint float64 `json:"dew_point,omitempty"`

	// dt
	Dt uint64 `json:"dt,omitempty"`

	// feels like
	FeelsLike float64 `json:"feels_like,omitempty"`

	// humidity
	Humidity uint64 `json:"humidity,omitempty"`

	// pressure
	Pressure float64 `json:"pressure,omitempty"`

	// rain
	Rain *Rain `json:"rain,omitempty"`

	// snow
	Snow *Snow `json:"snow,omitempty"`

	// temp
	Temp float64 `json:"temp,omitempty"`

	// visibility
	Visibility uint64 `json:"visibility,omitempty"`

	// weather
	Weather []*Weather `json:"weather"`

	// wind deg
	WindDeg uint64 `json:"wind_deg,omitempty"`

	// wind gust
	WindGust float64 `json:"wind_gust,omitempty"`

	// wind speed
	WindSpeed float64 `json:"wind_speed,omitempty"`
}

// Validate validates this one call time machine hourly items0
func (m *OneCallTimeMachineHourlyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeather(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OneCallTimeMachineHourlyItems0) validateRain(formats strfmt.Registry) error {

	if swag.IsZero(m.Rain) { // not required
		return nil
	}

	if m.Rain != nil {
		if err := m.Rain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rain")
			}
			return err
		}
	}

	return nil
}

func (m *OneCallTimeMachineHourlyItems0) validateSnow(formats strfmt.Registry) error {

	if swag.IsZero(m.Snow) { // not required
		return nil
	}

	if m.Snow != nil {
		if err := m.Snow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snow")
			}
			return err
		}
	}

	return nil
}

func (m *OneCallTimeMachineHourlyItems0) validateWeather(formats strfmt.Registry) error {

	if swag.IsZero(m.Weather) { // not required
		return nil
	}

	for i := 0; i < len(m.Weather); i++ {
		if swag.IsZero(m.Weather[i]) { // not required
			continue
		}

		if m.Weather[i] != nil {
			if err := m.Weather[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("weather" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OneCallTimeMachineHourlyItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OneCallTimeMachineHourlyItems0) UnmarshalBinary(b []byte) error {
	var res OneCallTimeMachineHourlyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
