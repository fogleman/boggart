// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	extend "github.com/kihamo/boggart/protocols/swagger"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SMSList s m s list
//
// swagger:model SMSList
type SMSList struct {

	// count
	Count int64 `json:"Count,omitempty" xml:"Count,omitempty"`

	// messages
	Messages []*SMSListMessagesItems0 `json:"Messages" xml:"Messages>Message"`
}

// Validate validates this s m s list
func (m *SMSList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SMSList) validateMessages(formats strfmt.Registry) error {
	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this s m s list based on the context it is used
func (m *SMSList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SMSList) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {
			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SMSList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SMSList) UnmarshalBinary(b []byte) error {
	var res SMSList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SMSListMessagesItems0 s m s list messages items0
//
// swagger:model SMSListMessagesItems0
type SMSListMessagesItems0 struct {

	// content
	Content string `json:"Content,omitempty" xml:"Content,omitempty"`

	// date
	// Format: date-time
	Date extend.DateTime `json:"Date,omitempty" xml:"Date,omitempty"`

	// index
	Index int64 `json:"Index,omitempty" xml:"Index,omitempty"`

	// phone
	Phone string `json:"Phone,omitempty" xml:"Phone,omitempty"`

	// priority
	Priority int64 `json:"Priority,omitempty" xml:"Priority,omitempty"`

	// save type
	SaveType int64 `json:"SaveType,omitempty" xml:"SaveType,omitempty"`

	// sca
	Sca string `json:"Sca,omitempty" xml:"Sca,omitempty"`

	// sms type
	SmsType int64 `json:"SmsType,omitempty" xml:"SmsType,omitempty"`

	// status
	Status int64 `json:"Status,omitempty" xml:"Smstat,omitempty"`
}

// Validate validates this s m s list messages items0
func (m *SMSListMessagesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SMSListMessagesItems0) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := m.Date.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Date")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Date")
		}
		return err
	}

	return nil
}

// ContextValidate validate this s m s list messages items0 based on the context it is used
func (m *SMSListMessagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SMSListMessagesItems0) contextValidateDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Date.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Date")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Date")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SMSListMessagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SMSListMessagesItems0) UnmarshalBinary(b []byte) error {
	var res SMSListMessagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
