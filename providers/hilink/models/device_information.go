// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceInformation device information
//
// swagger:model DeviceInformation
type DeviceInformation struct {

	// classify
	Classify string `json:"Classify,omitempty" xml:"Classify,omitempty"`

	// device name
	DeviceName string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`

	// hardware version
	HardwareVersion string `json:"HardwareVersion,omitempty" xml:"HardwareVersion,omitempty"`

	// i c c ID
	ICCID string `json:"ICCID,omitempty" xml:"Iccid,omitempty"`

	// i m e i
	IMEI string `json:"IMEI,omitempty" xml:"Imei,omitempty"`

	// i m s i
	IMSI string `json:"IMSI,omitempty" xml:"Imsi,omitempty"`

	// m s i s d n
	MSISDN string `json:"MSISDN,omitempty" xml:"Msisdn,omitempty"`

	// mac address1
	MacAddress1 string `json:"MacAddress1,omitempty" xml:"MacAddress1,omitempty"`

	// mac address2
	MacAddress2 string `json:"MacAddress2,omitempty" xml:"MacAddress2,omitempty"`

	// product family
	ProductFamily string `json:"ProductFamily,omitempty" xml:"ProductFamily,omitempty"`

	// serial number
	SerialNumber string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`

	// software version
	SoftwareVersion string `json:"SoftwareVersion,omitempty" xml:"SoftwareVersion,omitempty"`

	// support mode
	SupportMode string `json:"SupportMode,omitempty" xml:"supportmode,omitempty"`

	// wan IP address
	WanIPAddress string `json:"WanIPAddress,omitempty" xml:"WanIPAddress,omitempty"`

	// wan IPv6 address
	WanIPV6Address string `json:"WanIPv6Address,omitempty" xml:"WanIPv6Address,omitempty"`

	// web UI version
	WebUIVersion string `json:"WebUIVersion,omitempty" xml:"WebUIVersion,omitempty"`

	// work mode
	WorkMode string `json:"WorkMode,omitempty" xml:"workmode,omitempty"`
}

// Validate validates this device information
func (m *DeviceInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceInformation) UnmarshalBinary(b []byte) error {
	var res DeviceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
