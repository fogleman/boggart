// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetSMSCount(params *GetSMSCountParams, opts ...ClientOption) (*GetSMSCountOK, error)

	GetSMSList(params *GetSMSListParams, opts ...ClientOption) (*GetSMSListOK, error)

	ReadSMS(params *ReadSMSParams, opts ...ClientOption) (*ReadSMSOK, error)

	RemoveSMS(params *RemoveSMSParams, opts ...ClientOption) (*RemoveSMSOK, error)

	SendSMS(params *SendSMSParams, opts ...ClientOption) (*SendSMSOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetSMSCount get s m s count API
*/
func (a *Client) GetSMSCount(params *GetSMSCountParams, opts ...ClientOption) (*GetSMSCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSMSCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSMSCount",
		Method:             "GET",
		PathPattern:        "/api/sms/sms-count",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSMSCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSMSCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSMSCountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSMSList get s m s list API
*/
func (a *Client) GetSMSList(params *GetSMSListParams, opts ...ClientOption) (*GetSMSListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSMSListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSMSList",
		Method:             "POST",
		PathPattern:        "/api/sms/sms-list",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSMSListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSMSListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSMSListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReadSMS read s m s API
*/
func (a *Client) ReadSMS(params *ReadSMSParams, opts ...ClientOption) (*ReadSMSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadSMSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "readSMS",
		Method:             "POST",
		PathPattern:        "/api/sms/set-read",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadSMSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadSMSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReadSMSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RemoveSMS remove s m s API
*/
func (a *Client) RemoveSMS(params *RemoveSMSParams, opts ...ClientOption) (*RemoveSMSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSMSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeSMS",
		Method:             "POST",
		PathPattern:        "/api/sms/delete-sms",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveSMSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveSMSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveSMSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SendSMS send s m s API
*/
func (a *Client) SendSMS(params *SendSMSParams, opts ...ClientOption) (*SendSMSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendSMSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sendSMS",
		Method:             "POST",
		PathPattern:        "/api/sms/send-sms",
		ProducesMediaTypes: []string{"application/xml"},
		ConsumesMediaTypes: []string{"application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendSMSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendSMSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SendSMSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
