// Code generated by go-swagger; DO NOT EDIT.

package geo_localized

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kihamo/boggart/providers/aqicn/models"
)

// GetGeoLocalizedFeedReader is a Reader for the GetGeoLocalizedFeed structure.
type GetGeoLocalizedFeedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGeoLocalizedFeedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGeoLocalizedFeedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetGeoLocalizedFeedDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetGeoLocalizedFeedOK creates a GetGeoLocalizedFeedOK with default headers values
func NewGetGeoLocalizedFeedOK() *GetGeoLocalizedFeedOK {
	return &GetGeoLocalizedFeedOK{}
}

/*GetGeoLocalizedFeedOK handles this case with default header values.

Successful operation
*/
type GetGeoLocalizedFeedOK struct {
	Payload *GetGeoLocalizedFeedOKBody
}

func (o *GetGeoLocalizedFeedOK) Error() string {
	return fmt.Sprintf("[GET /feed/geo:{lat};{lng}/][%d] getGeoLocalizedFeedOK  %+v", 200, o.Payload)
}

func (o *GetGeoLocalizedFeedOK) GetPayload() *GetGeoLocalizedFeedOKBody {
	return o.Payload
}

func (o *GetGeoLocalizedFeedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetGeoLocalizedFeedOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGeoLocalizedFeedDefault creates a GetGeoLocalizedFeedDefault with default headers values
func NewGetGeoLocalizedFeedDefault(code int) *GetGeoLocalizedFeedDefault {
	return &GetGeoLocalizedFeedDefault{
		_statusCode: code,
	}
}

/*GetGeoLocalizedFeedDefault handles this case with default header values.

Unexpected error
*/
type GetGeoLocalizedFeedDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get geo localized feed default response
func (o *GetGeoLocalizedFeedDefault) Code() int {
	return o._statusCode
}

func (o *GetGeoLocalizedFeedDefault) Error() string {
	return fmt.Sprintf("[GET /feed/geo:{lat};{lng}/][%d] getGeoLocalizedFeed default  %+v", o._statusCode, o.Payload)
}

func (o *GetGeoLocalizedFeedDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGeoLocalizedFeedDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetGeoLocalizedFeedOKBody get geo localized feed o k body
swagger:model GetGeoLocalizedFeedOKBody
*/
type GetGeoLocalizedFeedOKBody struct {

	// data
	Data *models.Data `json:"data,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this get geo localized feed o k body
func (o *GetGeoLocalizedFeedOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetGeoLocalizedFeedOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getGeoLocalizedFeedOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetGeoLocalizedFeedOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetGeoLocalizedFeedOKBody) UnmarshalBinary(b []byte) error {
	var res GetGeoLocalizedFeedOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
