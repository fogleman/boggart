// Code generated by go-swagger; DO NOT EDIT.

package feed

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kihamo/boggart/providers/aqicn/models"
)

// GetByCityReader is a Reader for the GetByCity structure.
type GetByCityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetByCityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetByCityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetByCityDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetByCityOK creates a GetByCityOK with default headers values
func NewGetByCityOK() *GetByCityOK {
	return &GetByCityOK{}
}

/*GetByCityOK handles this case with default header values.

Successful operation
*/
type GetByCityOK struct {
	Payload *models.Feed
}

func (o *GetByCityOK) Error() string {
	return fmt.Sprintf("[GET /feed/{city}/][%d] getByCityOK  %+v", 200, o.Payload)
}

func (o *GetByCityOK) GetPayload() *models.Feed {
	return o.Payload
}

func (o *GetByCityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Feed)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetByCityDefault creates a GetByCityDefault with default headers values
func NewGetByCityDefault(code int) *GetByCityDefault {
	return &GetByCityDefault{
		_statusCode: code,
	}
}

/*GetByCityDefault handles this case with default header values.

Unexpected error
*/
type GetByCityDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get by city default response
func (o *GetByCityDefault) Code() int {
	return o._statusCode
}

func (o *GetByCityDefault) Error() string {
	return fmt.Sprintf("[GET /feed/{city}/][%d] getByCity default  %+v", o._statusCode, o.Payload)
}

func (o *GetByCityDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetByCityDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
