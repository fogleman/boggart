// Code generated by go-swagger; DO NOT EDIT.

package feed

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetByLatLngParams creates a new GetByLatLngParams object
// with the default values initialized.
func NewGetByLatLngParams() *GetByLatLngParams {
	var ()
	return &GetByLatLngParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetByLatLngParamsWithTimeout creates a new GetByLatLngParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetByLatLngParamsWithTimeout(timeout time.Duration) *GetByLatLngParams {
	var ()
	return &GetByLatLngParams{

		timeout: timeout,
	}
}

// NewGetByLatLngParamsWithContext creates a new GetByLatLngParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetByLatLngParamsWithContext(ctx context.Context) *GetByLatLngParams {
	var ()
	return &GetByLatLngParams{

		Context: ctx,
	}
}

// NewGetByLatLngParamsWithHTTPClient creates a new GetByLatLngParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetByLatLngParamsWithHTTPClient(client *http.Client) *GetByLatLngParams {
	var ()
	return &GetByLatLngParams{
		HTTPClient: client,
	}
}

/*GetByLatLngParams contains all the parameters to send to the API endpoint
for the get by lat lng operation typically these are written to a http.Request
*/
type GetByLatLngParams struct {

	/*Lat
	  Latitude

	*/
	Lat float64
	/*Lng
	  Longitude

	*/
	Lng float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get by lat lng params
func (o *GetByLatLngParams) WithTimeout(timeout time.Duration) *GetByLatLngParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get by lat lng params
func (o *GetByLatLngParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get by lat lng params
func (o *GetByLatLngParams) WithContext(ctx context.Context) *GetByLatLngParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get by lat lng params
func (o *GetByLatLngParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get by lat lng params
func (o *GetByLatLngParams) WithHTTPClient(client *http.Client) *GetByLatLngParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get by lat lng params
func (o *GetByLatLngParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLat adds the lat to the get by lat lng params
func (o *GetByLatLngParams) WithLat(lat float64) *GetByLatLngParams {
	o.SetLat(lat)
	return o
}

// SetLat adds the lat to the get by lat lng params
func (o *GetByLatLngParams) SetLat(lat float64) {
	o.Lat = lat
}

// WithLng adds the lng to the get by lat lng params
func (o *GetByLatLngParams) WithLng(lng float64) *GetByLatLngParams {
	o.SetLng(lng)
	return o
}

// SetLng adds the lng to the get by lat lng params
func (o *GetByLatLngParams) SetLng(lng float64) {
	o.Lng = lng
}

// WriteToRequest writes these params to a swagger request
func (o *GetByLatLngParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param lat
	if err := r.SetPathParam("lat", swag.FormatFloat64(o.Lat)); err != nil {
		return err
	}

	// path param lng
	if err := r.SetPathParam("lng", swag.FormatFloat64(o.Lng)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
