// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	extend "github.com/kihamo/boggart/protocols/swagger"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Search search
// swagger:model Search
type Search struct {

	// data
	Data *SearchData `json:"data,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this search
func (m *Search) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Search) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Search) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Search) UnmarshalBinary(b []byte) error {
	var res Search
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchData search data
// swagger:model SearchData
type SearchData struct {

	// Real-time air quality infomrmation
	Aqi int64 `json:"aqi,omitempty"`

	// station
	Station *SearchDataStation `json:"station,omitempty"`

	// time
	Time *SearchDataTime `json:"time,omitempty"`

	// Unique ID for the city monitoring station
	UID int64 `json:"uid,omitempty"`
}

// Validate validates this search data
func (m *SearchData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchData) validateStation(formats strfmt.Registry) error {

	if swag.IsZero(m.Station) { // not required
		return nil
	}

	if m.Station != nil {
		if err := m.Station.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "station")
			}
			return err
		}
	}

	return nil
}

func (m *SearchData) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if m.Time != nil {
		if err := m.Time.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "time")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchData) UnmarshalBinary(b []byte) error {
	var res SearchData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchDataStation search data station
// swagger:model SearchDataStation
type SearchDataStation struct {

	// Country of the monitoring station
	Country string `json:"country,omitempty"`

	// Latitude/Longitude of the monitoring station
	Geo []float64 `json:"geo"`

	// Name of the monitoring station
	Name string `json:"name,omitempty"`

	// Webpage associated to the the monitoring station
	URL string `json:"url,omitempty"`
}

// Validate validates this search data station
func (m *SearchDataStation) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchDataStation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchDataStation) UnmarshalBinary(b []byte) error {
	var res SearchDataStation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchDataTime search data time
// swagger:model SearchDataTime
type SearchDataTime struct {

	// Local measurement time time
	// Format: date-time
	Stime *extend.DateTime `json:"stime,omitempty"`

	// Station timezone
	Tz string `json:"tz,omitempty"`

	// vtime
	// Format: date-time
	Vtime *extend.DateTimeByTimestamp `json:"vtime,omitempty"`
}

// Validate validates this search data time
func (m *SearchDataTime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVtime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchDataTime) validateStime(formats strfmt.Registry) error {

	if swag.IsZero(m.Stime) { // not required
		return nil
	}

	if m.Stime != nil {
		if err := m.Stime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "time" + "." + "stime")
			}
			return err
		}
	}

	return nil
}

func (m *SearchDataTime) validateVtime(formats strfmt.Registry) error {

	if swag.IsZero(m.Vtime) { // not required
		return nil
	}

	if m.Vtime != nil {
		if err := m.Vtime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "time" + "." + "vtime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchDataTime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchDataTime) UnmarshalBinary(b []byte) error {
	var res SearchDataTime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
