// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Data data
// swagger:model Data
type Data struct {

	// Real-time air quality information
	Aqi float64 `json:"aqi,omitempty"`

	// EPA Attribution for the station
	Attributions []*DataAttributionsItems0 `json:"attributions"`

	// city
	City *DataCity `json:"city,omitempty"`

	// debug
	Debug *DataDebug `json:"debug,omitempty"`

	// Dominant polutor
	Dominentpol string `json:"dominentpol,omitempty"`

	// forecast
	Forecast *DataForecast `json:"forecast,omitempty"`

	// iaqi
	Iaqi *DataIaqi `json:"iaqi,omitempty"`

	// Unique ID for the city monitoring station
	Idx float64 `json:"idx,omitempty"`

	// time
	Time *DataTime `json:"time,omitempty"`
}

// Validate validates this data
func (m *Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForecast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIaqi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Data) validateAttributions(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributions) { // not required
		return nil
	}

	for i := 0; i < len(m.Attributions); i++ {
		if swag.IsZero(m.Attributions[i]) { // not required
			continue
		}

		if m.Attributions[i] != nil {
			if err := m.Attributions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Data) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if m.City != nil {
		if err := m.City.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("city")
			}
			return err
		}
	}

	return nil
}

func (m *Data) validateDebug(formats strfmt.Registry) error {

	if swag.IsZero(m.Debug) { // not required
		return nil
	}

	if m.Debug != nil {
		if err := m.Debug.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debug")
			}
			return err
		}
	}

	return nil
}

func (m *Data) validateForecast(formats strfmt.Registry) error {

	if swag.IsZero(m.Forecast) { // not required
		return nil
	}

	if m.Forecast != nil {
		if err := m.Forecast.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forecast")
			}
			return err
		}
	}

	return nil
}

func (m *Data) validateIaqi(formats strfmt.Registry) error {

	if swag.IsZero(m.Iaqi) { // not required
		return nil
	}

	if m.Iaqi != nil {
		if err := m.Iaqi.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi")
			}
			return err
		}
	}

	return nil
}

func (m *Data) validateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.Time) { // not required
		return nil
	}

	if m.Time != nil {
		if err := m.Time.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Data) UnmarshalBinary(b []byte) error {
	var res Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DataAttributionsItems0 data attributions items0
// swagger:model DataAttributionsItems0
type DataAttributionsItems0 struct {

	// logo
	Logo string `json:"logo,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this data attributions items0
func (m *DataAttributionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataAttributionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataAttributionsItems0) UnmarshalBinary(b []byte) error {
	var res DataAttributionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DataCity Information about the monitoring station
// swagger:model DataCity
type DataCity struct {

	// Latitude/Longitude of the monitoring station
	Geo []float64 `json:"geo"`

	// Name of the monitoring station
	Name string `json:"name,omitempty"`

	// Webpage associated to the the monitoring station
	URL string `json:"url,omitempty"`
}

// Validate validates this data city
func (m *DataCity) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataCity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataCity) UnmarshalBinary(b []byte) error {
	var res DataCity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DataDebug data debug
// swagger:model DataDebug
type DataDebug struct {

	// sync
	// Format: date-time
	Sync strfmt.DateTime `json:"sync,omitempty"`
}

// Validate validates this data debug
func (m *DataDebug) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSync(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataDebug) validateSync(formats strfmt.Registry) error {

	if swag.IsZero(m.Sync) { // not required
		return nil
	}

	if err := validate.FormatOf("debug"+"."+"sync", "body", "date-time", m.Sync.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataDebug) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataDebug) UnmarshalBinary(b []byte) error {
	var res DataDebug
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DataForecast Forecast data
// swagger:model DataForecast
type DataForecast struct {

	// daily
	Daily *DataForecastDaily `json:"daily,omitempty"`
}

// Validate validates this data forecast
func (m *DataForecast) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDaily(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataForecast) validateDaily(formats strfmt.Registry) error {

	if swag.IsZero(m.Daily) { // not required
		return nil
	}

	if m.Daily != nil {
		if err := m.Daily.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forecast" + "." + "daily")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataForecast) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataForecast) UnmarshalBinary(b []byte) error {
	var res DataForecast
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DataForecastDaily Daily forecast data
// swagger:model DataForecastDaily
type DataForecastDaily struct {

	// Ozone forecast
	O3 []*ForecastValue `json:"o3"`

	// PM10 forecast
	Pm10 []*ForecastValue `json:"pm10"`

	// PM2.5 forecast
	Pm25 []*ForecastValue `json:"pm25"`

	// Ultra Violet Index forecast
	Uvi []*ForecastValue `json:"uvi"`
}

// Validate validates this data forecast daily
func (m *DataForecastDaily) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateO3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePm10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePm25(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUvi(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataForecastDaily) validateO3(formats strfmt.Registry) error {

	if swag.IsZero(m.O3) { // not required
		return nil
	}

	for i := 0; i < len(m.O3); i++ {
		if swag.IsZero(m.O3[i]) { // not required
			continue
		}

		if m.O3[i] != nil {
			if err := m.O3[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forecast" + "." + "daily" + "." + "o3" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataForecastDaily) validatePm10(formats strfmt.Registry) error {

	if swag.IsZero(m.Pm10) { // not required
		return nil
	}

	for i := 0; i < len(m.Pm10); i++ {
		if swag.IsZero(m.Pm10[i]) { // not required
			continue
		}

		if m.Pm10[i] != nil {
			if err := m.Pm10[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forecast" + "." + "daily" + "." + "pm10" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataForecastDaily) validatePm25(formats strfmt.Registry) error {

	if swag.IsZero(m.Pm25) { // not required
		return nil
	}

	for i := 0; i < len(m.Pm25); i++ {
		if swag.IsZero(m.Pm25[i]) { // not required
			continue
		}

		if m.Pm25[i] != nil {
			if err := m.Pm25[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forecast" + "." + "daily" + "." + "pm25" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataForecastDaily) validateUvi(formats strfmt.Registry) error {

	if swag.IsZero(m.Uvi) { // not required
		return nil
	}

	for i := 0; i < len(m.Uvi); i++ {
		if swag.IsZero(m.Uvi[i]) { // not required
			continue
		}

		if m.Uvi[i] != nil {
			if err := m.Uvi[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("forecast" + "." + "daily" + "." + "uvi" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataForecastDaily) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataForecastDaily) UnmarshalBinary(b []byte) error {
	var res DataForecastDaily
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DataIaqi Measurement time information
// swagger:model DataIaqi
type DataIaqi struct {

	// Carbon monoxide level (CO)
	Co *Value `json:"co,omitempty"`

	// Dew point
	Dew *Value `json:"dew,omitempty"`

	// Humidity
	H *Value `json:"h,omitempty"`

	// Nitrogen Dioxide level (NO2)
	No2 *Value `json:"no2,omitempty"`

	// Ozone level (O3)
	O3 *Value `json:"o3,omitempty"`

	// Pressure
	P *Value `json:"p,omitempty"`

	// Coarse dust particles pollution level (PM10)
	Pm10 *Value `json:"pm10,omitempty"`

	// Fine particles pollution level (PM2.5)
	Pm25 *Value `json:"pm25,omitempty"`

	// Sulfur dioxide level (SO2)
	So2 *Value `json:"so2,omitempty"`

	// Temperature
	T *Value `json:"t,omitempty"`

	// Wind speed
	W *Value `json:"w,omitempty"`

	// wg
	Wg *Value `json:"wg,omitempty"`
}

// Validate validates this data iaqi
func (m *DataIaqi) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDew(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateH(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNo2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateO3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePm10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePm25(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSo2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateW(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataIaqi) validateCo(formats strfmt.Registry) error {

	if swag.IsZero(m.Co) { // not required
		return nil
	}

	if m.Co != nil {
		if err := m.Co.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "co")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validateDew(formats strfmt.Registry) error {

	if swag.IsZero(m.Dew) { // not required
		return nil
	}

	if m.Dew != nil {
		if err := m.Dew.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "dew")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validateH(formats strfmt.Registry) error {

	if swag.IsZero(m.H) { // not required
		return nil
	}

	if m.H != nil {
		if err := m.H.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "h")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validateNo2(formats strfmt.Registry) error {

	if swag.IsZero(m.No2) { // not required
		return nil
	}

	if m.No2 != nil {
		if err := m.No2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "no2")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validateO3(formats strfmt.Registry) error {

	if swag.IsZero(m.O3) { // not required
		return nil
	}

	if m.O3 != nil {
		if err := m.O3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "o3")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validateP(formats strfmt.Registry) error {

	if swag.IsZero(m.P) { // not required
		return nil
	}

	if m.P != nil {
		if err := m.P.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "p")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validatePm10(formats strfmt.Registry) error {

	if swag.IsZero(m.Pm10) { // not required
		return nil
	}

	if m.Pm10 != nil {
		if err := m.Pm10.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "pm10")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validatePm25(formats strfmt.Registry) error {

	if swag.IsZero(m.Pm25) { // not required
		return nil
	}

	if m.Pm25 != nil {
		if err := m.Pm25.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "pm25")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validateSo2(formats strfmt.Registry) error {

	if swag.IsZero(m.So2) { // not required
		return nil
	}

	if m.So2 != nil {
		if err := m.So2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "so2")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validateT(formats strfmt.Registry) error {

	if swag.IsZero(m.T) { // not required
		return nil
	}

	if m.T != nil {
		if err := m.T.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "t")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validateW(formats strfmt.Registry) error {

	if swag.IsZero(m.W) { // not required
		return nil
	}

	if m.W != nil {
		if err := m.W.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "w")
			}
			return err
		}
	}

	return nil
}

func (m *DataIaqi) validateWg(formats strfmt.Registry) error {

	if swag.IsZero(m.Wg) { // not required
		return nil
	}

	if m.Wg != nil {
		if err := m.Wg.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iaqi" + "." + "wg")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataIaqi) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataIaqi) UnmarshalBinary(b []byte) error {
	var res DataIaqi
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DataTime Measurement time information
// swagger:model DataTime
type DataTime struct {

	// iso
	// Format: date-time
	Iso strfmt.DateTime `json:"iso,omitempty"`

	// Local measurement time time
	S string `json:"s,omitempty"`

	// Station timezone
	Tz string `json:"tz,omitempty"`

	// v
	V int64 `json:"v,omitempty"`
}

// Validate validates this data time
func (m *DataTime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIso(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataTime) validateIso(formats strfmt.Registry) error {

	if swag.IsZero(m.Iso) { // not required
		return nil
	}

	if err := validate.FormatOf("time"+"."+"iso", "body", "date-time", m.Iso.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataTime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataTime) UnmarshalBinary(b []byte) error {
	var res DataTime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
