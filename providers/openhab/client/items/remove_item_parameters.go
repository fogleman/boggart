// Code generated by go-swagger; DO NOT EDIT.

package items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRemoveItemParams creates a new RemoveItemParams object
// with the default values initialized.
func NewRemoveItemParams() *RemoveItemParams {
	var ()
	return &RemoveItemParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveItemParamsWithTimeout creates a new RemoveItemParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveItemParamsWithTimeout(timeout time.Duration) *RemoveItemParams {
	var ()
	return &RemoveItemParams{

		timeout: timeout,
	}
}

// NewRemoveItemParamsWithContext creates a new RemoveItemParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveItemParamsWithContext(ctx context.Context) *RemoveItemParams {
	var ()
	return &RemoveItemParams{

		Context: ctx,
	}
}

// NewRemoveItemParamsWithHTTPClient creates a new RemoveItemParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveItemParamsWithHTTPClient(client *http.Client) *RemoveItemParams {
	var ()
	return &RemoveItemParams{
		HTTPClient: client,
	}
}

/*RemoveItemParams contains all the parameters to send to the API endpoint
for the remove item operation typically these are written to a http.Request
*/
type RemoveItemParams struct {

	/*Itemname
	  item name

	*/
	Itemname string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove item params
func (o *RemoveItemParams) WithTimeout(timeout time.Duration) *RemoveItemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove item params
func (o *RemoveItemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove item params
func (o *RemoveItemParams) WithContext(ctx context.Context) *RemoveItemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove item params
func (o *RemoveItemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove item params
func (o *RemoveItemParams) WithHTTPClient(client *http.Client) *RemoveItemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove item params
func (o *RemoveItemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithItemname adds the itemname to the remove item params
func (o *RemoveItemParams) WithItemname(itemname string) *RemoveItemParams {
	o.SetItemname(itemname)
	return o
}

// SetItemname adds the itemname to the remove item params
func (o *RemoveItemParams) SetItemname(itemname string) {
	o.Itemname = itemname
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveItemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param itemname
	if err := r.SetPathParam("itemname", o.Itemname); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
