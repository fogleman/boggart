// Code generated by go-swagger; DO NOT EDIT.

package links

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// LinkReader is a Reader for the Link structure.
type LinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewLinkMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLinkOK creates a LinkOK with default headers values
func NewLinkOK() *LinkOK {
	return &LinkOK{}
}

/*LinkOK handles this case with default header values.

OK
*/
type LinkOK struct {
}

func (o *LinkOK) Error() string {
	return fmt.Sprintf("[PUT /links/{itemName}/{channelUID}][%d] linkOK ", 200)
}

func (o *LinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkBadRequest creates a LinkBadRequest with default headers values
func NewLinkBadRequest() *LinkBadRequest {
	return &LinkBadRequest{}
}

/*LinkBadRequest handles this case with default header values.

Content does not match the path
*/
type LinkBadRequest struct {
}

func (o *LinkBadRequest) Error() string {
	return fmt.Sprintf("[PUT /links/{itemName}/{channelUID}][%d] linkBadRequest ", 400)
}

func (o *LinkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLinkMethodNotAllowed creates a LinkMethodNotAllowed with default headers values
func NewLinkMethodNotAllowed() *LinkMethodNotAllowed {
	return &LinkMethodNotAllowed{}
}

/*LinkMethodNotAllowed handles this case with default header values.

Link is not editable
*/
type LinkMethodNotAllowed struct {
}

func (o *LinkMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /links/{itemName}/{channelUID}][%d] linkMethodNotAllowed ", 405)
}

func (o *LinkMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
