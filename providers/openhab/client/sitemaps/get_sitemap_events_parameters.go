// Code generated by go-swagger; DO NOT EDIT.

package sitemaps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSitemapEventsParams creates a new GetSitemapEventsParams object
// with the default values initialized.
func NewGetSitemapEventsParams() *GetSitemapEventsParams {
	var ()
	return &GetSitemapEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSitemapEventsParamsWithTimeout creates a new GetSitemapEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSitemapEventsParamsWithTimeout(timeout time.Duration) *GetSitemapEventsParams {
	var ()
	return &GetSitemapEventsParams{

		timeout: timeout,
	}
}

// NewGetSitemapEventsParamsWithContext creates a new GetSitemapEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSitemapEventsParamsWithContext(ctx context.Context) *GetSitemapEventsParams {
	var ()
	return &GetSitemapEventsParams{

		Context: ctx,
	}
}

// NewGetSitemapEventsParamsWithHTTPClient creates a new GetSitemapEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSitemapEventsParamsWithHTTPClient(client *http.Client) *GetSitemapEventsParams {
	var ()
	return &GetSitemapEventsParams{
		HTTPClient: client,
	}
}

/*GetSitemapEventsParams contains all the parameters to send to the API endpoint
for the get sitemap events operation typically these are written to a http.Request
*/
type GetSitemapEventsParams struct {

	/*Pageid
	  page id

	*/
	Pageid *string
	/*Sitemap
	  sitemap name

	*/
	Sitemap *string
	/*Subscriptionid
	  subscription id

	*/
	Subscriptionid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sitemap events params
func (o *GetSitemapEventsParams) WithTimeout(timeout time.Duration) *GetSitemapEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sitemap events params
func (o *GetSitemapEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sitemap events params
func (o *GetSitemapEventsParams) WithContext(ctx context.Context) *GetSitemapEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sitemap events params
func (o *GetSitemapEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sitemap events params
func (o *GetSitemapEventsParams) WithHTTPClient(client *http.Client) *GetSitemapEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sitemap events params
func (o *GetSitemapEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageid adds the pageid to the get sitemap events params
func (o *GetSitemapEventsParams) WithPageid(pageid *string) *GetSitemapEventsParams {
	o.SetPageid(pageid)
	return o
}

// SetPageid adds the pageid to the get sitemap events params
func (o *GetSitemapEventsParams) SetPageid(pageid *string) {
	o.Pageid = pageid
}

// WithSitemap adds the sitemap to the get sitemap events params
func (o *GetSitemapEventsParams) WithSitemap(sitemap *string) *GetSitemapEventsParams {
	o.SetSitemap(sitemap)
	return o
}

// SetSitemap adds the sitemap to the get sitemap events params
func (o *GetSitemapEventsParams) SetSitemap(sitemap *string) {
	o.Sitemap = sitemap
}

// WithSubscriptionid adds the subscriptionid to the get sitemap events params
func (o *GetSitemapEventsParams) WithSubscriptionid(subscriptionid string) *GetSitemapEventsParams {
	o.SetSubscriptionid(subscriptionid)
	return o
}

// SetSubscriptionid adds the subscriptionid to the get sitemap events params
func (o *GetSitemapEventsParams) SetSubscriptionid(subscriptionid string) {
	o.Subscriptionid = subscriptionid
}

// WriteToRequest writes these params to a swagger request
func (o *GetSitemapEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Pageid != nil {

		// query param pageid
		var qrPageid string
		if o.Pageid != nil {
			qrPageid = *o.Pageid
		}
		qPageid := qrPageid
		if qPageid != "" {
			if err := r.SetQueryParam("pageid", qPageid); err != nil {
				return err
			}
		}

	}

	if o.Sitemap != nil {

		// query param sitemap
		var qrSitemap string
		if o.Sitemap != nil {
			qrSitemap = *o.Sitemap
		}
		qSitemap := qrSitemap
		if qSitemap != "" {
			if err := r.SetQueryParam("sitemap", qSitemap); err != nil {
				return err
			}
		}

	}

	// path param subscriptionid
	if err := r.SetPathParam("subscriptionid", o.Subscriptionid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
