// Code generated by go-swagger; DO NOT EDIT.

package sitemaps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetPageDataReader is a Reader for the GetPageData structure.
type GetPageDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPageDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPageDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPageDataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPageDataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPageDataOK creates a GetPageDataOK with default headers values
func NewGetPageDataOK() *GetPageDataOK {
	return &GetPageDataOK{}
}

/*GetPageDataOK handles this case with default header values.

OK
*/
type GetPageDataOK struct {
}

func (o *GetPageDataOK) Error() string {
	return fmt.Sprintf("[GET /sitemaps/{sitemapname}/{pageid}][%d] getPageDataOK ", 200)
}

func (o *GetPageDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPageDataBadRequest creates a GetPageDataBadRequest with default headers values
func NewGetPageDataBadRequest() *GetPageDataBadRequest {
	return &GetPageDataBadRequest{}
}

/*GetPageDataBadRequest handles this case with default header values.

Invalid subscription id has been provided.
*/
type GetPageDataBadRequest struct {
}

func (o *GetPageDataBadRequest) Error() string {
	return fmt.Sprintf("[GET /sitemaps/{sitemapname}/{pageid}][%d] getPageDataBadRequest ", 400)
}

func (o *GetPageDataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPageDataNotFound creates a GetPageDataNotFound with default headers values
func NewGetPageDataNotFound() *GetPageDataNotFound {
	return &GetPageDataNotFound{}
}

/*GetPageDataNotFound handles this case with default header values.

Sitemap with requested name does not exist or page does not exist, or page refers to a non-linkable widget
*/
type GetPageDataNotFound struct {
}

func (o *GetPageDataNotFound) Error() string {
	return fmt.Sprintf("[GET /sitemaps/{sitemapname}/{pageid}][%d] getPageDataNotFound ", 404)
}

func (o *GetPageDataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
