// Code generated by go-swagger; DO NOT EDIT.

package sitemaps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sitemaps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sitemaps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateEventSubscription creates a sitemap event subscription
*/
func (a *Client) CreateEventSubscription(params *CreateEventSubscriptionParams) (*CreateEventSubscriptionOK, *CreateEventSubscriptionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEventSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEventSubscription",
		Method:             "POST",
		PathPattern:        "/sitemaps/events/subscribe",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEventSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateEventSubscriptionOK:
		return value, nil, nil
	case *CreateEventSubscriptionCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sitemaps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPageData polls the data for a sitemap
*/
func (a *Client) GetPageData(params *GetPageDataParams) (*GetPageDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPageDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPageData",
		Method:             "GET",
		PathPattern:        "/sitemaps/{sitemapname}/{pageid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPageDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPageDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPageData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSitemapData gets sitemap by name
*/
func (a *Client) GetSitemapData(params *GetSitemapDataParams) (*GetSitemapDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitemapDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitemapData",
		Method:             "GET",
		PathPattern:        "/sitemaps/{sitemapname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitemapDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSitemapDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSitemapData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSitemapEvents gets sitemap events
*/
func (a *Client) GetSitemapEvents(params *GetSitemapEventsParams) (*GetSitemapEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitemapEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitemapEvents",
		Method:             "GET",
		PathPattern:        "/sitemaps/events/{subscriptionid}",
		ProducesMediaTypes: []string{"text/event-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitemapEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSitemapEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSitemapEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSitemaps gets all available sitemaps
*/
func (a *Client) GetSitemaps(params *GetSitemapsParams) (*GetSitemapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitemapsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSitemaps",
		Method:             "GET",
		PathPattern:        "/sitemaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSitemapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSitemapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSitemaps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
