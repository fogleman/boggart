// Code generated by go-swagger; DO NOT EDIT.

package sitemaps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPageDataParams creates a new GetPageDataParams object
// with the default values initialized.
func NewGetPageDataParams() *GetPageDataParams {
	var ()
	return &GetPageDataParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPageDataParamsWithTimeout creates a new GetPageDataParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPageDataParamsWithTimeout(timeout time.Duration) *GetPageDataParams {
	var ()
	return &GetPageDataParams{

		timeout: timeout,
	}
}

// NewGetPageDataParamsWithContext creates a new GetPageDataParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPageDataParamsWithContext(ctx context.Context) *GetPageDataParams {
	var ()
	return &GetPageDataParams{

		Context: ctx,
	}
}

// NewGetPageDataParamsWithHTTPClient creates a new GetPageDataParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPageDataParamsWithHTTPClient(client *http.Client) *GetPageDataParams {
	var ()
	return &GetPageDataParams{
		HTTPClient: client,
	}
}

/*GetPageDataParams contains all the parameters to send to the API endpoint
for the get page data operation typically these are written to a http.Request
*/
type GetPageDataParams struct {

	/*AcceptLanguage
	  language

	*/
	AcceptLanguage *string
	/*IncludeHidden
	  include hidden widgets

	*/
	IncludeHidden *bool
	/*Pageid
	  page id

	*/
	Pageid string
	/*Sitemapname
	  sitemap name

	*/
	Sitemapname string
	/*Subscriptionid
	  subscriptionid

	*/
	Subscriptionid *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get page data params
func (o *GetPageDataParams) WithTimeout(timeout time.Duration) *GetPageDataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get page data params
func (o *GetPageDataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get page data params
func (o *GetPageDataParams) WithContext(ctx context.Context) *GetPageDataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get page data params
func (o *GetPageDataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get page data params
func (o *GetPageDataParams) WithHTTPClient(client *http.Client) *GetPageDataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get page data params
func (o *GetPageDataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptLanguage adds the acceptLanguage to the get page data params
func (o *GetPageDataParams) WithAcceptLanguage(acceptLanguage *string) *GetPageDataParams {
	o.SetAcceptLanguage(acceptLanguage)
	return o
}

// SetAcceptLanguage adds the acceptLanguage to the get page data params
func (o *GetPageDataParams) SetAcceptLanguage(acceptLanguage *string) {
	o.AcceptLanguage = acceptLanguage
}

// WithIncludeHidden adds the includeHidden to the get page data params
func (o *GetPageDataParams) WithIncludeHidden(includeHidden *bool) *GetPageDataParams {
	o.SetIncludeHidden(includeHidden)
	return o
}

// SetIncludeHidden adds the includeHidden to the get page data params
func (o *GetPageDataParams) SetIncludeHidden(includeHidden *bool) {
	o.IncludeHidden = includeHidden
}

// WithPageid adds the pageid to the get page data params
func (o *GetPageDataParams) WithPageid(pageid string) *GetPageDataParams {
	o.SetPageid(pageid)
	return o
}

// SetPageid adds the pageid to the get page data params
func (o *GetPageDataParams) SetPageid(pageid string) {
	o.Pageid = pageid
}

// WithSitemapname adds the sitemapname to the get page data params
func (o *GetPageDataParams) WithSitemapname(sitemapname string) *GetPageDataParams {
	o.SetSitemapname(sitemapname)
	return o
}

// SetSitemapname adds the sitemapname to the get page data params
func (o *GetPageDataParams) SetSitemapname(sitemapname string) {
	o.Sitemapname = sitemapname
}

// WithSubscriptionid adds the subscriptionid to the get page data params
func (o *GetPageDataParams) WithSubscriptionid(subscriptionid *string) *GetPageDataParams {
	o.SetSubscriptionid(subscriptionid)
	return o
}

// SetSubscriptionid adds the subscriptionid to the get page data params
func (o *GetPageDataParams) SetSubscriptionid(subscriptionid *string) {
	o.Subscriptionid = subscriptionid
}

// WriteToRequest writes these params to a swagger request
func (o *GetPageDataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcceptLanguage != nil {

		// header param Accept-Language
		if err := r.SetHeaderParam("Accept-Language", *o.AcceptLanguage); err != nil {
			return err
		}

	}

	if o.IncludeHidden != nil {

		// query param includeHidden
		var qrIncludeHidden bool
		if o.IncludeHidden != nil {
			qrIncludeHidden = *o.IncludeHidden
		}
		qIncludeHidden := swag.FormatBool(qrIncludeHidden)
		if qIncludeHidden != "" {
			if err := r.SetQueryParam("includeHidden", qIncludeHidden); err != nil {
				return err
			}
		}

	}

	// path param pageid
	if err := r.SetPathParam("pageid", o.Pageid); err != nil {
		return err
	}

	// path param sitemapname
	if err := r.SetPathParam("sitemapname", o.Sitemapname); err != nil {
		return err
	}

	if o.Subscriptionid != nil {

		// query param subscriptionid
		var qrSubscriptionid string
		if o.Subscriptionid != nil {
			qrSubscriptionid = *o.Subscriptionid
		}
		qSubscriptionid := qrSubscriptionid
		if qSubscriptionid != "" {
			if err := r.SetQueryParam("subscriptionid", qSubscriptionid); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
