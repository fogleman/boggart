// Code generated by go-swagger; DO NOT EDIT.

package voice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSayParams creates a new SayParams object
// with the default values initialized.
func NewSayParams() *SayParams {
	var ()
	return &SayParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSayParamsWithTimeout creates a new SayParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSayParamsWithTimeout(timeout time.Duration) *SayParams {
	var ()
	return &SayParams{

		timeout: timeout,
	}
}

// NewSayParamsWithContext creates a new SayParams object
// with the default values initialized, and the ability to set a context for a request
func NewSayParamsWithContext(ctx context.Context) *SayParams {
	var ()
	return &SayParams{

		Context: ctx,
	}
}

// NewSayParamsWithHTTPClient creates a new SayParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSayParamsWithHTTPClient(client *http.Client) *SayParams {
	var ()
	return &SayParams{
		HTTPClient: client,
	}
}

/*SayParams contains all the parameters to send to the API endpoint
for the say operation typically these are written to a http.Request
*/
type SayParams struct {

	/*Body
	  text to speak

	*/
	Body string
	/*Sinkid
	  audio sink id

	*/
	Sinkid *string
	/*Voiceid
	  voice id

	*/
	Voiceid *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the say params
func (o *SayParams) WithTimeout(timeout time.Duration) *SayParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the say params
func (o *SayParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the say params
func (o *SayParams) WithContext(ctx context.Context) *SayParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the say params
func (o *SayParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the say params
func (o *SayParams) WithHTTPClient(client *http.Client) *SayParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the say params
func (o *SayParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the say params
func (o *SayParams) WithBody(body string) *SayParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the say params
func (o *SayParams) SetBody(body string) {
	o.Body = body
}

// WithSinkid adds the sinkid to the say params
func (o *SayParams) WithSinkid(sinkid *string) *SayParams {
	o.SetSinkid(sinkid)
	return o
}

// SetSinkid adds the sinkid to the say params
func (o *SayParams) SetSinkid(sinkid *string) {
	o.Sinkid = sinkid
}

// WithVoiceid adds the voiceid to the say params
func (o *SayParams) WithVoiceid(voiceid *string) *SayParams {
	o.SetVoiceid(voiceid)
	return o
}

// SetVoiceid adds the voiceid to the say params
func (o *SayParams) SetVoiceid(voiceid *string) {
	o.Voiceid = voiceid
}

// WriteToRequest writes these params to a swagger request
func (o *SayParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Sinkid != nil {

		// query param sinkid
		var qrSinkid string
		if o.Sinkid != nil {
			qrSinkid = *o.Sinkid
		}
		qSinkid := qrSinkid
		if qSinkid != "" {
			if err := r.SetQueryParam("sinkid", qSinkid); err != nil {
				return err
			}
		}

	}

	if o.Voiceid != nil {

		// query param voiceid
		var qrVoiceid string
		if o.Voiceid != nil {
			qrVoiceid = *o.Voiceid
		}
		qVoiceid := qrVoiceid
		if qVoiceid != "" {
			if err := r.SetQueryParam("voiceid", qVoiceid); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
