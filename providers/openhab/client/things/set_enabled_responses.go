// Code generated by go-swagger; DO NOT EDIT.

package things

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SetEnabledReader is a Reader for the SetEnabled structure.
type SetEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewSetEnabledNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetEnabledOK creates a SetEnabledOK with default headers values
func NewSetEnabledOK() *SetEnabledOK {
	return &SetEnabledOK{}
}

/*SetEnabledOK handles this case with default header values.

OK
*/
type SetEnabledOK struct {
	Payload string
}

func (o *SetEnabledOK) Error() string {
	return fmt.Sprintf("[PUT /things/{thingUID}/enable][%d] setEnabledOK  %+v", 200, o.Payload)
}

func (o *SetEnabledOK) GetPayload() string {
	return o.Payload
}

func (o *SetEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetEnabledNotFound creates a SetEnabledNotFound with default headers values
func NewSetEnabledNotFound() *SetEnabledNotFound {
	return &SetEnabledNotFound{}
}

/*SetEnabledNotFound handles this case with default header values.

Thing not found.
*/
type SetEnabledNotFound struct {
}

func (o *SetEnabledNotFound) Error() string {
	return fmt.Sprintf("[PUT /things/{thingUID}/enable][%d] setEnabledNotFound ", 404)
}

func (o *SetEnabledNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
