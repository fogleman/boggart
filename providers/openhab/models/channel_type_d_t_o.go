// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelTypeDTO channel type d t o
// swagger:model ChannelTypeDTO
type ChannelTypeDTO struct {

	// UID
	UID string `json:"UID,omitempty"`

	// advanced
	Advanced *bool `json:"advanced,omitempty"`

	// category
	Category string `json:"category,omitempty"`

	// command description
	CommandDescription *CommandDescription `json:"commandDescription,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// item type
	ItemType string `json:"itemType,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// parameter groups
	ParameterGroups []*ConfigDescriptionParameterGroupDTO `json:"parameterGroups"`

	// parameters
	Parameters []*ConfigDescriptionParameterDTO `json:"parameters"`

	// state description
	StateDescription *StateDescription `json:"stateDescription,omitempty"`

	// tags
	// Unique: true
	Tags []string `json:"tags"`
}

// Validate validates this channel type d t o
func (m *ChannelTypeDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommandDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelTypeDTO) validateCommandDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.CommandDescription) { // not required
		return nil
	}

	if m.CommandDescription != nil {
		if err := m.CommandDescription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commandDescription")
			}
			return err
		}
	}

	return nil
}

func (m *ChannelTypeDTO) validateParameterGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.ParameterGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ParameterGroups); i++ {
		if swag.IsZero(m.ParameterGroups[i]) { // not required
			continue
		}

		if m.ParameterGroups[i] != nil {
			if err := m.ParameterGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ChannelTypeDTO) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ChannelTypeDTO) validateStateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.StateDescription) { // not required
		return nil
	}

	if m.StateDescription != nil {
		if err := m.StateDescription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stateDescription")
			}
			return err
		}
	}

	return nil
}

func (m *ChannelTypeDTO) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelTypeDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelTypeDTO) UnmarshalBinary(b []byte) error {
	var res ChannelTypeDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
