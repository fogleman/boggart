// Code generated by go-swagger; DO NOT EDIT.

package info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new info API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for info API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAppDeviceID this gives certificate by device ID

The app_id in the request is mandatory and refers to Chromecast backdrop/screensaver app. It has to be set to E8C28D3C
*/
func (a *Client) GetAppDeviceID(params *GetAppDeviceIDParams) (*GetAppDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppDeviceID",
		Method:             "POST",
		PathPattern:        "/setup/get_app_device_id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAppDeviceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppDeviceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAppDeviceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEurekaInfo this gives most of the device info

This gives most of the device info
*/
func (a *Client) GetEurekaInfo(params *GetEurekaInfoParams) (*GetEurekaInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEurekaInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEurekaInfo",
		Method:             "GET",
		PathPattern:        "/setup/eureka_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEurekaInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEurekaInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEurekaInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOffer this gives a token which is used by the home app to get offers

This gives a token which is used by the Home app to get offers. The offers themselves are not stored on the device. A new token is generated for every request.
*/
func (a *Client) GetOffer(params *GetOfferParams) (*GetOfferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOfferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOffer",
		Method:             "GET",
		PathPattern:        "/setup/offer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOfferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOfferOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOffer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSupportedLocales simplies returns a list of all supported locales

Simply returns a list of all supported locales
*/
func (a *Client) GetSupportedLocales(params *GetSupportedLocalesParams) (*GetSupportedLocalesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportedLocalesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSupportedLocales",
		Method:             "GET",
		PathPattern:        "/setup/supported_locales",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSupportedLocalesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupportedLocalesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSupportedLocales: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSupportedTimezones simplies returns a list of all supported timezones

Simply returns a list of all supported timezones
*/
func (a *Client) GetSupportedTimezones(params *GetSupportedTimezonesParams) (*GetSupportedTimezonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupportedTimezonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSupportedTimezones",
		Method:             "GET",
		PathPattern:        "/setup/supported_timezones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSupportedTimezonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupportedTimezonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSupportedTimezones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostTestInternetDownloadSpeed this endpoint tests internet download speed

This endpoint tests internet download speed. Any sample file URL can be provided.
*/
func (a *Client) PostTestInternetDownloadSpeed(params *PostTestInternetDownloadSpeedParams) (*PostTestInternetDownloadSpeedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTestInternetDownloadSpeedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postTestInternetDownloadSpeed",
		Method:             "POST",
		PathPattern:        "/setup/test_internet_download_speed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTestInternetDownloadSpeedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostTestInternetDownloadSpeedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postTestInternetDownloadSpeed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
