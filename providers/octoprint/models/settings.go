// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Settings settings
// swagger:model Settings
type Settings struct {

	// api
	API *SettingsAPI `json:"api,omitempty"`

	// appearance
	Appearance *SettingsAppearance `json:"appearance,omitempty"`

	// feature
	Feature *SettingsFeature `json:"feature,omitempty"`

	// folder
	Folder *SettingsFolder `json:"folder,omitempty"`

	// plugins
	Plugins map[string]interface{} `json:"plugins,omitempty"`

	// printer
	Printer *SettingsPrinter `json:"printer,omitempty"`

	// scripts
	Scripts *SettingsScripts `json:"scripts,omitempty"`

	// serial
	Serial *SettingsSerial `json:"serial,omitempty"`
}

// Validate validates this settings
func (m *Settings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppearance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrinter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScripts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerial(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Settings) validateAPI(formats strfmt.Registry) error {

	if swag.IsZero(m.API) { // not required
		return nil
	}

	if m.API != nil {
		if err := m.API.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("api")
			}
			return err
		}
	}

	return nil
}

func (m *Settings) validateAppearance(formats strfmt.Registry) error {

	if swag.IsZero(m.Appearance) { // not required
		return nil
	}

	if m.Appearance != nil {
		if err := m.Appearance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appearance")
			}
			return err
		}
	}

	return nil
}

func (m *Settings) validateFeature(formats strfmt.Registry) error {

	if swag.IsZero(m.Feature) { // not required
		return nil
	}

	if m.Feature != nil {
		if err := m.Feature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feature")
			}
			return err
		}
	}

	return nil
}

func (m *Settings) validateFolder(formats strfmt.Registry) error {

	if swag.IsZero(m.Folder) { // not required
		return nil
	}

	if m.Folder != nil {
		if err := m.Folder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("folder")
			}
			return err
		}
	}

	return nil
}

func (m *Settings) validatePrinter(formats strfmt.Registry) error {

	if swag.IsZero(m.Printer) { // not required
		return nil
	}

	if m.Printer != nil {
		if err := m.Printer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("printer")
			}
			return err
		}
	}

	return nil
}

func (m *Settings) validateScripts(formats strfmt.Registry) error {

	if swag.IsZero(m.Scripts) { // not required
		return nil
	}

	if m.Scripts != nil {
		if err := m.Scripts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scripts")
			}
			return err
		}
	}

	return nil
}

func (m *Settings) validateSerial(formats strfmt.Registry) error {

	if swag.IsZero(m.Serial) { // not required
		return nil
	}

	if m.Serial != nil {
		if err := m.Serial.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serial")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Settings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Settings) UnmarshalBinary(b []byte) error {
	var res Settings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SettingsAPI settings API
// swagger:model SettingsAPI
type SettingsAPI struct {

	// allow cross origin
	AllowCrossOrigin bool `json:"allowCrossOrigin,omitempty"`

	// key
	Key string `json:"key,omitempty"`
}

// Validate validates this settings API
func (m *SettingsAPI) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SettingsAPI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsAPI) UnmarshalBinary(b []byte) error {
	var res SettingsAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SettingsAppearance settings appearance
// swagger:model SettingsAppearance
type SettingsAppearance struct {

	// color
	Color string `json:"color,omitempty"`

	// color icon
	ColorIcon bool `json:"colorIcon,omitempty"`

	// color transparent
	ColorTransparent bool `json:"colorTransparent,omitempty"`

	// default language
	DefaultLanguage string `json:"defaultLanguage,omitempty"`

	// fuzzy times
	FuzzyTimes bool `json:"fuzzyTimes,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// show fahrenheit also
	ShowFahrenheitAlso bool `json:"showFahrenheitAlso,omitempty"`
}

// Validate validates this settings appearance
func (m *SettingsAppearance) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SettingsAppearance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsAppearance) UnmarshalBinary(b []byte) error {
	var res SettingsAppearance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SettingsFeature settings feature
// swagger:model SettingsFeature
type SettingsFeature struct {

	// auto uppercase blacklist
	AutoUppercaseBlacklist []string `json:"autoUppercaseBlacklist"`

	// g90 influences extruder
	G90InfluencesExtruder bool `json:"g90InfluencesExtruder,omitempty"`

	// gcode viewer
	GcodeViewer bool `json:"gcodeViewer,omitempty"`

	// keyboard control
	KeyboardControl bool `json:"keyboardControl,omitempty"`

	// mobile size threshold
	MobileSizeThreshold int64 `json:"mobileSizeThreshold,omitempty"`

	// model size detection
	ModelSizeDetection bool `json:"modelSizeDetection,omitempty"`

	// poll watched
	PollWatched bool `json:"pollWatched,omitempty"`

	// print cancel confirmation
	PrintCancelConfirmation bool `json:"printCancelConfirmation,omitempty"`

	// sd support
	SdSupport bool `json:"sdSupport,omitempty"`

	// size threshold
	SizeThreshold int64 `json:"sizeThreshold,omitempty"`

	// temperature graph
	TemperatureGraph bool `json:"temperatureGraph,omitempty"`
}

// Validate validates this settings feature
func (m *SettingsFeature) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SettingsFeature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsFeature) UnmarshalBinary(b []byte) error {
	var res SettingsFeature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SettingsFolder settings folder
// swagger:model SettingsFolder
type SettingsFolder struct {

	// logs
	Logs string `json:"logs,omitempty"`

	// timelapse
	Timelapse string `json:"timelapse,omitempty"`

	// timelapse tmp
	TimelapseTmp string `json:"timelapseTmp,omitempty"`

	// uploads
	Uploads string `json:"uploads,omitempty"`

	// watched
	Watched string `json:"watched,omitempty"`
}

// Validate validates this settings folder
func (m *SettingsFolder) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SettingsFolder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsFolder) UnmarshalBinary(b []byte) error {
	var res SettingsFolder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SettingsPrinter settings printer
// swagger:model SettingsPrinter
type SettingsPrinter struct {

	// default extrusion length
	DefaultExtrusionLength int64 `json:"defaultExtrusionLength,omitempty"`
}

// Validate validates this settings printer
func (m *SettingsPrinter) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SettingsPrinter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsPrinter) UnmarshalBinary(b []byte) error {
	var res SettingsPrinter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SettingsScripts settings scripts
// swagger:model SettingsScripts
type SettingsScripts struct {

	// gcode
	Gcode map[string]interface{} `json:"gcode,omitempty"`
}

// Validate validates this settings scripts
func (m *SettingsScripts) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SettingsScripts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsScripts) UnmarshalBinary(b []byte) error {
	var res SettingsScripts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SettingsSerial settings serial
// swagger:model SettingsSerial
type SettingsSerial struct {

	// abort heatup on cancel
	AbortHeatupOnCancel bool `json:"abortHeatupOnCancel,omitempty"`

	// additional baudrates
	AdditionalBaudrates []int64 `json:"additionalBaudrates"`

	// additional ports
	AdditionalPorts []string `json:"additionalPorts"`

	// always send checksum
	AlwaysSendChecksum bool `json:"alwaysSendChecksum,omitempty"`

	// autoconnect
	Autoconnect bool `json:"autoconnect,omitempty"`

	// baudrate
	Baudrate int64 `json:"baudrate,omitempty"`

	// baudrate options
	BaudrateOptions []int64 `json:"baudrateOptions"`

	// block while dwelling
	BlockWhileDwelling bool `json:"blockWhileDwelling,omitempty"`

	// blocked commands
	BlockedCommands []string `json:"blockedCommands"`

	// cap autoreport sd status
	CapAutoreportSdStatus bool `json:"capAutoreportSdStatus,omitempty"`

	// cap autoreport temp
	CapAutoreportTemp bool `json:"capAutoreportTemp,omitempty"`

	// cap busy protocol
	CapBusyProtocol bool `json:"capBusyProtocol,omitempty"`

	// cap emergency parser
	CapEmergencyParser bool `json:"capEmergencyParser,omitempty"`

	// checksum requiring commands
	ChecksumRequiringCommands []string `json:"checksumRequiringCommands"`

	// disconnect on errors
	DisconnectOnErrors bool `json:"disconnectOnErrors,omitempty"`

	// exclusive
	Exclusive bool `json:"exclusive,omitempty"`

	// external heatup detection
	ExternalHeatupDetection bool `json:"externalHeatupDetection,omitempty"`

	// firmware detection
	FirmwareDetection bool `json:"firmwareDetection,omitempty"`

	// hello command
	HelloCommand string `json:"helloCommand,omitempty"`

	// ignore errors from firmware
	IgnoreErrorsFromFirmware bool `json:"ignoreErrorsFromFirmware,omitempty"`

	// ignore identical resends
	IgnoreIdenticalResends bool `json:"ignoreIdenticalResends,omitempty"`

	// log
	Log bool `json:"log,omitempty"`

	// log position on cancel
	LogPositionOnCancel bool `json:"logPositionOnCancel,omitempty"`

	// log position on pause
	LogPositionOnPause bool `json:"logPositionOnPause,omitempty"`

	// long running commands
	LongRunningCommands []string `json:"longRunningCommands"`

	// max timeouts idle
	MaxTimeoutsIdle int64 `json:"maxTimeoutsIdle,omitempty"`

	// max timeouts long
	MaxTimeoutsLong int64 `json:"maxTimeoutsLong,omitempty"`

	// max timeouts printing
	MaxTimeoutsPrinting int64 `json:"maxTimeoutsPrinting,omitempty"`

	// never send checksum
	NeverSendChecksum bool `json:"neverSendChecksum,omitempty"`

	// pausing commands
	PausingCommands []string `json:"pausingCommands"`

	// port
	Port string `json:"port,omitempty"`

	// port options
	PortOptions []string `json:"portOptions"`

	// repetier target temp
	RepetierTargetTemp bool `json:"repetierTargetTemp,omitempty"`

	// sd always available
	SdAlwaysAvailable bool `json:"sdAlwaysAvailable,omitempty"`

	// sd relative path
	SdRelativePath bool `json:"sdRelativePath,omitempty"`

	// support resends without ok
	SupportResendsWithoutOk string `json:"supportResendsWithoutOk,omitempty"`

	// swallow ok after resend
	SwallowOkAfterResend bool `json:"swallowOkAfterResend,omitempty"`

	// timeout baudrate detection pause
	TimeoutBaudrateDetectionPause float64 `json:"timeoutBaudrateDetectionPause,omitempty"`

	// timeout communication
	TimeoutCommunication float64 `json:"timeoutCommunication,omitempty"`

	// timeout communication busy
	TimeoutCommunicationBusy float64 `json:"timeoutCommunicationBusy,omitempty"`

	// timeout connection
	TimeoutConnection float64 `json:"timeoutConnection,omitempty"`

	// timeout detection
	TimeoutDetection float64 `json:"timeoutDetection,omitempty"`

	// timeout position log wait
	TimeoutPositionLogWait float64 `json:"timeoutPositionLogWait,omitempty"`

	// timeout sd status
	TimeoutSdStatus float64 `json:"timeoutSdStatus,omitempty"`

	// timeout sd status autoreport
	TimeoutSdStatusAutoreport float64 `json:"timeoutSdStatusAutoreport,omitempty"`

	// timeout temperature
	TimeoutTemperature float64 `json:"timeoutTemperature,omitempty"`

	// timeout temperature autoreport
	TimeoutTemperatureAutoreport float64 `json:"timeoutTemperatureAutoreport,omitempty"`

	// timeout temperature target set
	TimeoutTemperatureTargetSet float64 `json:"timeoutTemperatureTargetSet,omitempty"`

	// trigger ok for m29
	TriggerOkForM29 bool `json:"triggerOkForM29,omitempty"`

	// wait for start
	WaitForStart bool `json:"waitForStart,omitempty"`
}

// Validate validates this settings serial
func (m *SettingsSerial) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SettingsSerial) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsSerial) UnmarshalBinary(b []byte) error {
	var res SettingsSerial
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
